{
  "docs": "https://community.bistudio.com/wiki/Category:Introduced_with_Take_On_Helicopters",
  "1.00": [
    {
      "key": "batteryChargeRTD",
      "overwrite": {
        "syntax": "batteryChargeRTD <objectrtd>",
        "docSyntax": "batteryChargeRTD helicopterRTD",
        "tags": "",
        "description": "Returns the current charge of a helicopter's batteries. * 0: empty * 1: fully charged",
        "example": "_charge = batteryChargeRTD vehicle player;",
        "params": "<objectrtd>",
        "returns": "number"
      }
    },
    {
      "key": "BIS_fnc_ambientBlacklist",
      "overwrite": {
        "syntax": "[<array>] call BIS_fnc_ambientBlacklist",
        "docSyntax": "[input] call BIS_fnc_ambientBlacklist",
        "tags": "",
        "description": "Check if area is blacklisted. Blacklist triggers are to be named 'bis_ambientBlacklist_#', where # is number from 0 to 99.",
        "example": "[1337,1337,0] call BIS_fnc_ambientBlacklist;",
        "params": "<array>",
        "returns": "boolean | boolean | nil"
      }
    },
    {
      "key": "BIS_fnc_ambientBlacklistAdd",
      "overwrite": {
        "syntax": "[<object>] call BIS_fnc_ambientBlacklistAdd",
        "docSyntax": "[trigger] call BIS_fnc_ambientBlacklistAdd",
        "tags": "",
        "description": "Add a new ambient blacklist trigger",
        "example": "[BIS_trigger] call BIS_fnc_ambientBlacklistAdd;",
        "params": "<object>",
        "returns": "boolean | true"
      }
    },
    {
      "key": "BIS_fnc_ambientBoats",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_ambientBoats -->",
        "docSyntax": "<!-- [] call BIS_fnc_ambientBoats -->",
        "tags": "",
        "description": "Wikiplaceholder",
        "example": "",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_ambientHelicopters",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_ambientHelicopters -->",
        "docSyntax": "<!-- [] call BIS_fnc_ambientHelicopters -->",
        "tags": "",
        "description": "Wikiplaceholder",
        "example": "",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_ambientPlanes",
      "overwrite": {
        "syntax": "[<number>, <number>, <number>] call BIS_fnc_ambientPlanes",
        "docSyntax": "[quantity, areaRadius, dirStep] call BIS_fnc_ambientPlanes",
        "tags": "[EG]",
        "description": "Creates ambient airplanes fly-by near airports around the player. It will automatically get classes from icconfigFile >> \"CfgVehicles\" on all planes that have \"ambientType\" attribute &gt; 0.",
        "example": "[] call BIS_fnc_ambientPlanes;",
        "params": "<number> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_ambientPostprocess",
      "overwrite": {
        "syntax": "[<string>, activation] call BIS_fnc_ambientPostprocess",
        "docSyntax": "[terrain, activation] call BIS_fnc_ambientPostprocess",
        "tags": "[EL]",
        "description": "Initialize terrain-related postprocess effects.",
        "example": "[] call BIS_fnc_ambientPostprocess;",
        "params": "<string>",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_animType",
      "overwrite": {
        "syntax": "param call BIS_fnc_animType",
        "docSyntax": "param call BIS_fnc_animType",
        "tags": "",
        "description": "Function that returns a categorized array using a single string with the animation name.",
        "example": "animType = [\"AmovPsitMstpSrasWrflDnon\"] call BIS_fnc_animType; ccReturns [[\"Action\",\"Move\"],[\"Pose\",\"Sit\"],[\"Movement\",\"Stop\"],[\"Stance\",\"Raised\"],[\"Hand item\",\"Rifle\"],[\"Direction\",\"Not specified\"]]",
        "params": "",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_assignPlayerRole",
      "overwrite": {
        "syntax": "[<object>, <string>, <array>] call BIS_fnc_assignPlayerRole",
        "docSyntax": "[vehicle, role, path] call BIS_fnc_assignPlayerRole",
        "tags": "[EL]",
        "description": "Ensures the player can only get in the specific vehicle role.",
        "example": "[myVehicle, \"turret\", [0, 1]] call BIS_fnc_assignPlayerRole;",
        "params": "<object> <string> <array>",
        "returns": "boolean | true"
      }
    },
    {
      "key": "BIS_fnc_camFollow",
      "overwrite": {
        "syntax": "[<object>, <object>, absolute] call BIS_fnc_camFollow",
        "docSyntax": "[camera, target, refreshTime] call BIS_fnc_camFollow",
        "tags": "",
        "description": "Refresh a camera Field of View according to its distance with the target.",
        "example": "_camera = \"camera\" camCreate ((getPos player) vectorAdd [0,0,3]); [_camera, player, -2] call BIS_fnc_camFollow;",
        "params": "<object> <object> absolute",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_convertUnits",
      "overwrite": {
        "syntax": "[<number>, <number>, <number>, <number>, <number>] call BIS_fnc_convertUnits",
        "docSyntax": "[value, from, to, mode, precision] call BIS_fnc_convertUnits",
        "tags": "",
        "description": "Converts values to a target system of units.",
        "example": "_distString = [500, 0, 5, 1, -1] call BIS_fnc_convertUnits;",
        "params": "<number> <number> <number> <number> <number>",
        "returns": "number | string"
      }
    },
    {
      "key": "BIS_fnc_counter",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_counter -->",
        "docSyntax": "<!-- [] call BIS_fnc_counter -->",
        "tags": "",
        "description": "pre/* Description: Modify the given counter (create it if doesn't exist) Parameter(s): _this select 0: STRING - variable name of counter ARRAY in format [variableName,nameSpace], where nameSpace can be object, group or missionNameSpace/uiNameSpace _this select 1 (Optional): NUMBER - added value _this select 2 (Optional): NUMBER - modulo value Returns: NUMBER - counter's value */</pre> Wikiplaceholder",
        "example": "",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_credits",
      "overwrite": {
        "syntax": "[] spawn BIS_fnc_credits;",
        "docSyntax": "[] spawn BIS_fnc_credits;",
        "tags": "",
        "description": "Opens credits, identical to those found in main menu (arma3). Also present in arma3.",
        "example": "[] spawn BIS_fnc_credits;",
        "params": "",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_dbClassCheck",
      "overwrite": {
        "syntax": "[databaseArray, path] call BIS_fnc_dbClassCheck",
        "docSyntax": "[databaseArray, path] call BIS_fnc_dbClassCheck",
        "tags": "",
        "description": "Check if class exists in Scripted Database.",
        "example": "[[\"#MILLER\", [\"&NAME\", \"Miller\", \"&UID\", \"1234\", \"&MONEY\", 1000], [\"miller\"]] call BIS_fnc_dbClassCheck cctrue",
        "params": "an database",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_dbClassId",
      "overwrite": {
        "syntax": "text call BIS_fnc_dbClassId",
        "docSyntax": "text call BIS_fnc_dbClassId",
        "tags": "",
        "description": "Converts string to class definition.",
        "example": "\"miller\" call BIS_fnc_dbClassID codecomment//\"#MILLER\"",
        "params": "string",
        "returns": "string"
      }
    },
    {
      "key": "BIS_fnc_dbClassIndex",
      "overwrite": {
        "syntax": "[database, path] call BIS_fnc_dbClassIndex",
        "docSyntax": "[database, path] call BIS_fnc_dbClassIndex",
        "tags": "",
        "description": "Returns indices leading to given class.",
        "example": "<\"#MILLER\", [\"&NAME\", \"Miller\", \"&UID\", \"1234\", \"&MONEY\", 1000>, [\"miller\"]] call BIS_fnc_dbClassIndex; codecomment//[0]",
        "params": "database path",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_dbClassList",
      "overwrite": {
        "syntax": "[database, path] call BIS_fnc_dbClassList",
        "docSyntax": "[database, path] call BIS_fnc_dbClassList",
        "tags": "",
        "description": "Returns all classes within class.",
        "example": "[[\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]], []] call BIS_fnc_dbClassList; codecomment// [\"MILLER\",\"TERRA\"]",
        "params": "databse path",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_dbClassRemove",
      "overwrite": {
        "syntax": "[database, path] call BIS_fnc_dbClassRemove",
        "docSyntax": "[database, path] call BIS_fnc_dbClassRemove",
        "tags": "",
        "description": "Remove class from Scripted Database. The function does not return the modified database but modifies the passed array directly.",
        "example": "_db = [\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]]; [_db, [\"terra\"]] call BIS_fnc_dbClassRemove; cctrue _db cc[\"#MILLER\",[\"&KILLS\",1000]]",
        "params": "database path",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_dbClassReturn",
      "overwrite": {
        "syntax": "[database, path] call BIS_fnc_dbClassReturn",
        "docSyntax": "[database, path] call BIS_fnc_dbClassReturn",
        "tags": "",
        "description": "Returns content of given class.",
        "example": "[[\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]], [\"miller\"]] call BIS_fnc_dbClassReturn; codecomment// [\"&KILLS\",1000]",
        "params": "database path",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_dbClassSet",
      "overwrite": {
        "syntax": "[database, path, (value)] call BIS_fnc_dbClassSet",
        "docSyntax": "[database, path, (value)] call BIS_fnc_dbClassSet",
        "tags": "",
        "description": "Add class to Scripted Database. The function modifies the passed array and returns a success flag.",
        "example": "_db = [\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]]; [_db, [\"kavala\"], [\"&POPULATION\", 42]] call BIS_fnc_dbClassSet; _db codecomment// [\"#MILLER\",[\"&KILLS\",1000],\"#TERRA\",[\"&WEAPON\",\"MX 6.5mm\"],\"#KAVALA\",[\"&POPULATION\",42]]",
        "params": "database path the",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_dbConfigPath",
      "overwrite": {
        "syntax": "[path, config] call BIS_fnc_dbConfigPath",
        "docSyntax": "[path, config] call BIS_fnc_dbConfigPath",
        "tags": "",
        "description": "If there is a database present in the config (config.cpp or descritpion.ext) then this function can be used to get the config path of the passed array. So it basically converts the array into a config entry.",
        "example": "",
        "params": "path database",
        "returns": "config"
      }
    },
    {
      "key": "BIS_fnc_dbImportConfig",
      "overwrite": {
        "syntax": "[database, path, config] call BIS_fnc_dbImportConfig",
        "docSyntax": "[database, path, config] call BIS_fnc_dbImportConfig",
        "tags": "",
        "description": "Copy config classes and adds them to Scripted Database. Config values can not be passed through this function. The passed array gets modified.",
        "example": "",
        "params": "database path config",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_dbImportXML",
      "overwrite": {
        "syntax": "<string> call BIS_fnc_dbImportXML",
        "docSyntax": "xmlFile call BIS_fnc_dbImportXML",
        "tags": "",
        "description": "Import XML file into Scripted Database.",
        "example": "_xmlDB = \"myFile.xml\" call BIS_fnc_dbImportXML;",
        "params": "<string>",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_dbIsClass",
      "overwrite": {
        "syntax": "text call BIS_fnc_dbIsClass",
        "docSyntax": "text call BIS_fnc_dbIsClass",
        "tags": "",
        "description": "Checks if string is class definition.",
        "example": "\"#MYCLASS\" call BIS_fnc_dbIsClass; cctrue \"#myclass\" call BIS_fnc_dbIsClass; cctrue \"MYCLASS\" call BIS_fnc_dbIsClass; ccfalse 1234 call BIS_fnc_dbIsClass; ccfalse",
        "params": "check",
        "returns": "boolean | bis_fnc_dbsymbolclass"
      }
    },
    {
      "key": "BIS_fnc_dbIsValue",
      "overwrite": {
        "syntax": "text call BIS_fnc_dbIsValue",
        "docSyntax": "text call BIS_fnc_dbIsValue",
        "tags": "",
        "description": "Checks if string is value definition.",
        "example": "\"&MYVALUE\" call BIS_fnc_dbIsValue; cctrue \"&myvalue\" call BIS_fnc_dbIsValue; cctrue \"MYVALUE\" call BIS_fnc_dbIsValue; ccfalse 1234 call BIS_fnc_dbIsValue; ccfalse",
        "params": "check",
        "returns": "boolean | true | bis_fnc_dbsymbolvalue"
      }
    },
    {
      "key": "BIS_fnc_dbPrint",
      "overwrite": {
        "syntax": "[database, tabs] call BIS_fnc_dbPrint",
        "docSyntax": "[database, tabs] call BIS_fnc_dbPrint",
        "tags": "",
        "description": "Copy Scripted Database content into clipboard for evaluation. Text will be formatted as config. FeatureimportantGVIarma31.92 The function does not insert semicolons at the end of values (not intentional?). You have to manually add them to make the config functional.",
        "example": "[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]]] call BIS_fnc_dbPrint;",
        "params": "database number",
        "returns": "string"
      }
    },
    {
      "key": "BIS_fnc_dbSymbolClass",
      "overwrite": {
        "syntax": "call BIS_fnc_dbSymbolClass",
        "docSyntax": "call BIS_fnc_dbSymbolClass",
        "tags": "",
        "description": "A getter function to return the symobl used for declaring a class.",
        "example": "call BIS_fnc_dbSymbolClass; codecomment// #",
        "params": "",
        "returns": "string"
      }
    },
    {
      "key": "BIS_fnc_dbSymbolValue",
      "overwrite": {
        "syntax": "call BIS_fnc_dbSymbolValue",
        "docSyntax": "call BIS_fnc_dbSymbolValue",
        "tags": "",
        "description": "A getter function to return the symobl used for declaring a value.",
        "example": "call BIS_fnc_dbSymbolValue; codecomment// &",
        "params": "",
        "returns": "string"
      }
    },
    {
      "key": "BIS_fnc_dbValueCheck",
      "overwrite": {
        "syntax": "[database, path] call BIS_fnc_dbValueCheck",
        "docSyntax": "[database, path] call BIS_fnc_dbValueCheck",
        "tags": "",
        "description": "Check if value exists in Scripted Database.",
        "example": "<\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\">] call BIS_fnc_dbValueCheck; cctrue",
        "params": "database path",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_dbValueId",
      "overwrite": {
        "syntax": "valueString call BIS_fnc_dbValueId",
        "docSyntax": "valueString call BIS_fnc_dbValueId",
        "tags": "",
        "description": "Converts string to value definition or vice versa.",
        "example": "\"MYVALUE\" call BIS_fnc_dbValueId; codecomment// \"&MYVALUE\"",
        "params": "converts",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_dbValueIndex",
      "overwrite": {
        "syntax": "[database, path] call BIS_fnc_dbValueIndex",
        "docSyntax": "[database, path] call BIS_fnc_dbValueIndex",
        "tags": "",
        "description": "Returns indexes leading to given value.",
        "example": "",
        "params": "database path",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_dbValueList",
      "overwrite": {
        "syntax": "[database, path] call BIS_fnc_dbValueList",
        "docSyntax": "[database, path] call BIS_fnc_dbValueList",
        "tags": "",
        "description": "Returns all values within class.",
        "example": "<\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\">, [\"miller\"]] call BIS_fnc_dbValueList; codecomment// [\"KILLS\",\"RANK\"]",
        "params": "databse path",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_dbValueRemove",
      "overwrite": {
        "syntax": "[database, path] call BIS_fnc_dbValueRemove",
        "docSyntax": "[database, path] call BIS_fnc_dbValueRemove",
        "tags": "",
        "description": "Remove value from Scripted Database.",
        "example": "",
        "params": "databse path",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_dbValueReturn",
      "overwrite": {
        "syntax": "[database, path, (defaultValue)] call BIS_fnc_dbValueReturn",
        "docSyntax": "[database, path, (defaultValue)] call BIS_fnc_dbValueReturn",
        "tags": "",
        "description": "Returns content of given value.",
        "example": "<\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\">, [\"miller\",\"kills\"]] call BIS_fnc_dbValueReturn; cc1000",
        "params": "databse path in",
        "returns": "anything: value's content"
      }
    },
    {
      "key": "BIS_fnc_dbValueSet",
      "overwrite": {
        "syntax": "[database, path, newvalue] call BIS_fnc_dbValueSet",
        "docSyntax": "[database, path, newvalue] call BIS_fnc_dbValueSet",
        "tags": "",
        "description": "Add value to Scripted Database. If current path does not exist it is created otherwise value is overwritten. The passed array gets modified.",
        "example": "_db = [\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]]; [_db, [\"miller\",\"kills\"],200] call BIS_fnc_dbValueSet; _db codecomment //[\"#MILLER\",[\"&KILLS\",200,\"&RANK\",\"CAPTAIN\"]]",
        "params": "database path",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_diaryHints",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_diaryHints -->",
        "docSyntax": "<!-- [] call BIS_fnc_diaryHints -->",
        "tags": "",
        "description": "pre#define DIARY_CATEGORY \"BIS_fnc_diaryHints\" Wikiplaceholder",
        "example": "[] call BIS_fnc_diaryHints;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_diaryMaps",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_diaryMaps -->",
        "docSyntax": "<!-- [] call BIS_fnc_diaryMaps -->",
        "tags": "",
        "description": "pre#define DIARY_CATEGORY \"BIS_fnc_diaryMaps\" Wikiplaceholder",
        "example": "[] call BIS_fnc_diaryMaps;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_displayClouds",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_displayClouds -->",
        "docSyntax": "<!-- [] call BIS_fnc_displayClouds -->",
        "tags": "",
        "description": "pre#define DISPLAY (uinamespace getvariable 'hsim_RscClouds') #define CONTROL (DISPLAY displayctrl _idc) #define RSC_LAYER 759 Wikiplaceholder",
        "example": "[] call BIS_fnc_displayClouds;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_displayColorGet",
      "overwrite": {
        "syntax": "[cfguidefault, <string>] call BIS_fnc_displayColorGet",
        "docSyntax": "[tag, variable] call BIS_fnc_displayColorGet",
        "tags": "",
        "description": "Loads custom color settings from CfgUIDefault. If variables are not stored in profileNamespace yet, the function will declare them. {! ! style=\"vertical-align: top; width: 50%\" ! <!-- A3 --> {! class=\"wikitable\" !+ arma3 v1.99 ! Tag !! Variable !! Description !- ! rowspan=\"5\" ! \"IGUI\" !\"BCG_RGB\" !! Backgrounds !- ! \"TEXT_RGB\" !! Active Elements !- ! \"WARNING_RGB\" !! Warnings !- ! \"ERROR_RGB\" !! Errors !- ! \"TACTPING_RGB\" !! Tactical Ping !- ! rowspan=\"2\" ! \"GUI\" ! \"BCG_RGB\" !! Backgrounds !- ! \"TITLETEXT_RGB\" !! Title Text !- ! rowspan=\"5\" ! \"Map\" ! \"BLUFOR\" !! BLUFOR !- ! \"OPFOR\" !! OPFOR !- ! \"Independent\" !! Independent !- ! \"Civilian\" !! Civilian !- ! \"Unknown\" !! Unknown !- ! rowspan=\"2\" ! \"Subtitles\" ! \"Background\" !! Subtitle background !- ! \"Text\" !! Subtitle text !} ! style=\"vertical-align: top; width: 50%\" ! <!-- TKOH --> {! class=\"wikitable\" !+ tkoh v1.00 ! Tag !! Variable !! Description !- ! rowspan=\"2\" ! \"IGUI\" !\"IGUI_TEXT_RGB\" !! HUD color 'RGB' !- ! \"IGUI_TEXT_COLOR\" !! HUD color 'RGBA' !- ! rowspan=\"5\" ! \"GUI\" ! \"BCG_RGB\" !! menu background 'RGB' !- ! \"GUI_BCG_COLOR\" !! menu background 'RGBA' !- ! \"GUI_BCG_MEDIUM_RGB\" !! button background 'RGB' (darker version of GUI_BCG_RGB) !- ! \"GUI_BCG_MEDIUM_COLOR\" !! button background 'RGBA' !- ! \"GUI_BCG_ACTIVE_RGB\" !! active button background color (e.g. focused buttons) 'RGB' !} !}",
        "example": "[\"GUI\", \"BCG_RGB\"] call BIS_fnc_displayColorGet;//Returns menu color",
        "params": "cfguidefault <string> <boolean>",
        "returns": "color (rgba)"
      }
    },
    {
      "key": "BIS_fnc_displayColorSet",
      "overwrite": {
        "syntax": "[<config>, <display>, commitTime, code] call BIS_fnc_displayColorSet",
        "docSyntax": "[displayClass, display, commitTime, code] call BIS_fnc_displayColorSet",
        "tags": "",
        "description": "Applies custom color settings to given Display. Display must be already using color macros, function will just refresh the values according to current color settings.",
        "example": "[nowikiconfigFile >> (GUI_classes select _forEachIndex), _x] call BIS_fnc_displayColorSet;",
        "params": "<config> <display> <number> <code>",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_displayControls",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_displayControls -->",
        "docSyntax": "<!-- [] call BIS_fnc_displayControls -->",
        "tags": "",
        "description": "pre/* Description: Return all controls of given display class Parameter(s): _this select 0: CONFIG - display config _this select 1: NUMBER or CONFIG or STRING - type of returned values (control configs, their names or IDCs; default: configfile)) _this select 2: BOOL - true to search content of controls group (default: true) Returns: ARRAY */</pre> Wikiplaceholder",
        "example": "[] call BIS_fnc_displayControls;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_displayLoading",
      "overwrite": {
        "syntax": "[ui, <number>] call BIS_fnc_displayLoading",
        "docSyntax": "[onLoad, id] call BIS_fnc_displayLoading",
        "tags": "",
        "description": "<Loading Screens> init.",
        "example": "([_this, 2302] call (uiNamespace getVariable 'BIS_fnc_displayLoading')",
        "params": "ui <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_displayMission",
      "overwrite": {
        "syntax": "call BIS_fnc_displayMission",
        "docSyntax": "call BIS_fnc_displayMission",
        "tags": "",
        "description": "Returns main display of current mission/intro/outro. A cleaner alternative to icfindDisplay 46.",
        "example": "_mainDisplay = call BIS_fnc_displayMission;",
        "params": "",
        "returns": "display"
      }
    },
    {
      "key": "BIS_fnc_displayName",
      "overwrite": {
        "syntax": "[<config>] call BIS_fnc_displayName",
        "docSyntax": "[config] call BIS_fnc_displayName",
        "tags": "",
        "description": "Return given class displayName value. Return base class name if displayName not defined.",
        "example": "_myDisplayName = [nowikiconfigFile >> \"CfgVehicles\" >> typeOf vehicle player] call BIS_fnc_displayName;",
        "params": "<config>",
        "returns": "string | configname"
      }
    },
    {
      "key": "BIS_fnc_displayResize",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_displayResize -->",
        "docSyntax": "<!-- [] call BIS_fnc_displayResize -->",
        "tags": "",
        "description": "''N/A''",
        "example": "[] call BIS_fnc_displayResize;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_endMission",
      "overwrite": {
        "syntax": "[<string>, <number>, <string>, <boolean>, code] call BIS_fnc_endMission",
        "docSyntax": "[nextMission, endingId, displayText, isSuccess, code] call BIS_fnc_endMission",
        "tags": "[EL]",
        "description": "Ends mission with the specified ending. Always ends with a 4 seconds black out effect. Featureinformative''nextMission'' and ''endingId'' parameters are assembled together to define which ending is called, in format hlnextMission_endType.",
        "example": "[\"mission2\", 1, \"You won\"] call BIS_fnc_endMission; ccendMission \"mission2_1\"",
        "params": "<string> <number> <string> <boolean> <code> <boolean> closing false <boolean>",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_errorMsg",
      "overwrite": {
        "syntax": "[<string>, <anything>] call BIS_fnc_errorMsg",
        "docSyntax": "[message, otherParameters] call BIS_fnc_errorMsg",
        "tags": "",
        "description": "Display error window. Featurearma3Broken in arma3. Use BIS_fnc_error instead",
        "example": "[\"This is an error message\"] call BIS_fnc_errorMsg;",
        "params": "<string> <anything>",
        "returns": "script handle"
      }
    },
    {
      "key": "BIS_fnc_functionPath",
      "overwrite": {
        "syntax": "<string> call BIS_fnc_functionPath",
        "docSyntax": "functionName call BIS_fnc_functionPath",
        "tags": "",
        "description": "Returns path to function file.",
        "example": "_path = \"BIS_fnc_wpLand\" call BIS_fnc_functionPath;",
        "params": "<string>",
        "returns": "string"
      }
    },
    {
      "key": "BIS_fnc_functionsDebug",
      "overwrite": {
        "syntax": "<number> call BIS_fnc_functionsDebug",
        "docSyntax": "mode call BIS_fnc_functionsDebug",
        "tags": "",
        "description": "Changes debug mode used when compiling functions from the <Arma 3: Functions Library>. Also recompiles all functions. See <Arma 3: Functions Library> for more information.",
        "example": "2 call BIS_fnc_functionsDebug;",
        "params": "<number>",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_GC",
      "overwrite": {
        "syntax": "<object> spawn BIS_fnc_GC",
        "docSyntax": "entity spawn BIS_fnc_GC",
        "tags": "",
        "description": "Sends an entity to the garbage collection queue. Replaces Arma 2 Garbage Collector.",
        "example": "[dude1] spawn BIS_fnc_GC;",
        "params": "<object>",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_GCinit",
      "overwrite": {
        "syntax": "[] call BIS_fnc_GCinit",
        "docSyntax": "[] call BIS_fnc_GCinit",
        "tags": "",
        "description": "Initializes Garbage Collection.",
        "example": "[] call BIS_fnc_GCinit",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_genericSentence",
      "overwrite": {
        "syntax": "[<string>,(speaker,delay,canRepeat)] call BIS_fnc_genericSentence",
        "docSyntax": "[class,(speaker,delay,canRepeat)] call BIS_fnc_genericSentence",
        "tags": "",
        "description": "Play generic sentence with probablity set by bis_genericSentenceMode variable (0.5 nowiki=</nowiki> 50%, 1 nowiki=</nowiki> 100%)",
        "example": "[\"FeedbackFlightNegativeHeightTooHigh\"] call BIS_fnc_genericSentence;",
        "params": "<string> <object> <number> <boolean>",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_genericSentenceInit",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_genericSentenceInit -->",
        "docSyntax": "<!-- [] call BIS_fnc_genericSentenceInit -->",
        "tags": "[SE]",
        "description": "''N/A''",
        "example": "[] call BIS_fnc_genericSentenceInit;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_getIDC",
      "overwrite": {
        "syntax": "[<config>, control] call BIS_fnc_getIDC",
        "docSyntax": "[config, ctrlName] call BIS_fnc_getIDC",
        "tags": "",
        "description": "Returns IDD of given display.",
        "example": "_IDC = [nowikiconfigFile >> \"Display3DENPlace\", \"ButtonCancel\"] call BIS_fnc_getIDC;",
        "params": "<config> control",
        "returns": "number"
      }
    },
    {
      "key": "BIS_fnc_getIDD",
      "overwrite": {
        "syntax": "[<config>] call BIS_fnc_getIDD",
        "docSyntax": "[config] call BIS_fnc_getIDD",
        "tags": "",
        "description": "Returns IDD of given display.",
        "example": "_IDD = [nowikiconfigFile >> \"display3DENPublishMissionSelectImage\" ] call BIS_fnc_getIDD;",
        "params": "<config>",
        "returns": "number"
      }
    },
    {
      "key": "BIS_fnc_GUIbackground",
      "overwrite": {
        "syntax": "[<array>] call BIS_fnc_GUIbackground",
        "docSyntax": "[position] call BIS_fnc_GUIbackground",
        "tags": "",
        "description": "Creates GUI background.",
        "example": "[1,1,1,1] call BIS_fnc_GUIbackground;",
        "params": "<array>",
        "returns": "display"
      }
    },
    {
      "key": "BIS_fnc_GUIeditor",
      "overwrite": {
        "syntax": "call BIS_fnc_GUIeditor;",
        "docSyntax": "call BIS_fnc_GUIeditor;",
        "tags": "",
        "description": "Opens the <Arma 3: User Interface Editor>.",
        "example": "call BIS_fnc_GUIeditor;",
        "params": "",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_GUIgrid",
      "overwrite": {
        "syntax": "[<string>, <string>] call BIS_fnc_GUIgrid",
        "docSyntax": "[category, grid] call BIS_fnc_GUIgrid",
        "tags": "",
        "description": "Returns grid params and stores it into uiNamespace.",
        "example": "call BIS_fnc_GUIgrid; //[-0.452381,0.214286,1.2,1]",
        "params": "<string> <string>",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_GUIgridToProfile",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_GUIgridToProfile -->",
        "docSyntax": "<!-- [] call BIS_fnc_GUIgridToProfile -->",
        "tags": "",
        "description": "Wikiplaceholder",
        "example": "",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_GUIhint",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_GUIhint -->",
        "docSyntax": "<!-- [] call BIS_fnc_GUIhint -->",
        "tags": "",
        "description": "pre/* Description: Creates advanced hintC dialog Parameter(s): _this select 0: ARRAY in format [text,picture] * text: STRING - hint text * picture: STRING - picture [item1,item2...] - Listbox item ARRAYs in format [itemText,itemDescription,picture,icon] * itemText: STRING - Text displayed in listbox * itemDescription (Optional): STRING - text displayed after clicking on item * picture (Optional): STRING - picture displayed after clicking on item * icon (Optional): STRING - icon displayed in listbox left from text _this select 1 (Optional): STRING - hint header _this select 2 (Optional): ARRAY - [STRING,CODE,NUMBER] - text on left button (when \"\", button is hidden), code executed upon clicking and fade out delay. If only text is present, button is disabled. _this select 3 (Optional): ARRAY - [STRING,CODE,NUMBER] - STRING - text on right button and code executed upon clicking _this select 4 (Optional): ARRAY - [STRING,CODE,NUMBER] - STRING - text on middle button and code executed upon clicking _this select 5 (Optional): NUMBER or ARRAY - width or [width,height] of picture (in grid coordinates). Width > 17 means only picture is used. Returns: ARRAY - [endState(,lbId)] * endState: NUMBER - 1 when clicked on right button, -1 when clicked on left button, 0 when escaped * lbId: NUMBER - selected listbox item (when listbox was used) */ #define DISPLAY_CLASS 'Hsim_RscDisplayCommonHint_guiHint' #define DISPLAY_CONFIG (configfile >> \"RscDisplayCommonHint\") #define DISPLAY (uinamespace getvariable DISPLAY_CLASS) #define CONTROL (DISPLAY displayctrl _idc) #define CONTROL_FADEINTIME 0.3 #define CONTROL_FADEIN \\ CONTROL ctrlsetfade 1; \\ CONTROL ctrlcommit 0; \\ CONTROL ctrlsetfade 0; \\ CONTROL ctrlcommit CONTROL_FADEINTIME; Wikiplaceholder",
        "example": "",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_guiMessage",
      "overwrite": {
        "syntax": "[<string>, <string>, <array>, <boolean>, <display>, <boolean>] spawn BIS_fnc_guiMessage",
        "docSyntax": "[message, header, position, isCancel, parent, pause] spawn BIS_fnc_guiMessage",
        "tags": "[EL]",
        "description": "Shows customized native message box to user.",
        "example": "[\"Hello World\"] BIS_fnc_guiMessage;",
        "params": "<string> <string> <array> <boolean> <display> <boolean> <string> <string> <boolean> <display> <boolean> <boolean>",
        "returns": "array | boolean | true | false | number"
      }
    },
    {
      "key": "BIS_fnc_halt",
      "overwrite": {
        "syntax": "[formatted, param2, ..., param10] call BIS_fnc_halt",
        "docSyntax": "[param1, param2, ..., param10] call BIS_fnc_halt",
        "tags": "",
        "description": "Halts current function and all its parents and logs an error message.",
        "example": "[\"You are now supposed to be %1\", rank player] call BIS_fnc_halt;",
        "params": "formatted <anything>",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_helicopterCanFly",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_helicopterCanFly -->",
        "docSyntax": "<!-- [] call BIS_fnc_helicopterCanFly -->",
        "tags": "",
        "description": "''N/A''",
        "example": "[] call BIS_fnc_helicopterCanFly;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_helicopterDamage",
      "overwrite": {
        "syntax": "[<object>, <string>, <number>] call BIS_fnc_helicopterDamage",
        "docSyntax": "[helicopter, selection, damage] call BIS_fnc_helicopterDamage",
        "tags": "",
        "description": "Handling EH-based helicopter damage, event handler in question being Da''mm''agedsic. syntaxhighlight lang=\"cpp\"params [\"_helicopter\", \"_selection\", \"_damage\"];</syntaxhighlight> Executed script is: codehelicopter execVM '\"hsim\\air_h\\data\\scripts\\main_rotor_destruction.sqf\"';</code> helicopter rotor status can be found ''via'' variable 'HSim_mainRotorDestroyed': code_isRotorDestroyed = helicopter getVariable [\"HSim_mainRotorDestroyed\", false];</code>",
        "example": "myHelicopter _this call BIS_fnc_helicopterDamage; }];",
        "params": "<object> <string> <number>",
        "returns": "boolean | true"
      }
    },
    {
      "key": "BIS_fnc_helicopterGetHitpoints",
      "overwrite": {
        "syntax": "<object> call BIS_fnc_helicopterGetHitpoints",
        "docSyntax": "object call BIS_fnc_helicopterGetHitpoints",
        "tags": "",
        "description": "Return all hitpoints for a helicopter.",
        "example": "[BIS_helicopter] call BIS_fnc_helicopterGetHitpoints;",
        "params": "<object>",
        "returns": "strings"
      }
    },
    {
      "key": "BIS_fnc_helicopterSeat",
      "overwrite": {
        "syntax": "<object> call BIS_fnc_helicopterSeat",
        "docSyntax": "unit call BIS_fnc_helicopterSeat",
        "tags": "",
        "description": "Check if unit sits on right or left seat.",
        "example": "player call BIS_fnc_helicopterSeat;",
        "params": "<object>",
        "returns": "number"
      }
    },
    {
      "key": "BIS_fnc_helicopterSeatMove",
      "overwrite": {
        "syntax": "[<object>, <string>] call BIS_fnc_helicopterSeatMove",
        "docSyntax": "[unit, gesture] call BIS_fnc_helicopterSeatMove",
        "tags": "",
        "description": "Plays cockpit animation. 'tkoh only'.",
        "example": "[instructor, \"thumbUp\"] call BIS_fnc_helicopterSeatMove;",
        "params": "<object> <string>",
        "returns": "string"
      }
    },
    {
      "key": "BIS_fnc_helicopterType",
      "overwrite": {
        "syntax": "[object] call BIS_fnc_helicopterType",
        "docSyntax": "[object] call BIS_fnc_helicopterType",
        "tags": "",
        "description": "Returns helicopter type.",
        "example": "private _helicopterType = [nowikivehicle player] call BIS_fnc_helicopterType;",
        "params": "<object>",
        "returns": "number"
      }
    },
    {
      "key": "BIS_fnc_HUDLimits",
      "overwrite": {
        "syntax": "[<array>, <array>, <array>] call BIS_fnc_HUDLimits",
        "docSyntax": "[speedLimit, altLimit, dirLimit] call BIS_fnc_HUDLimits",
        "tags": "",
        "description": "Set helicopter advanced flight model HUD limits and prevents overwriting existing values. See also setHUDMovementLevels.br br Notes: * default value is 0, which means no limits were assigned * using 0 in min or max value will hide the corresponding limit * same or higher priority will replace currently set priority * using a negative priority will reset the values if absolute value is same or higher than current level",
        "example": "nowiki[</nowiki>[0,0,0], [1, 0, 50], [0,0,0]] call BIS_fnc_HUDLimits; cclimits altitude on HUD to 50m max",
        "params": "<array> <array> <array>",
        "returns": "array | hudmovementlevels"
      }
    },
    {
      "key": "BIS_fnc_isLocalized",
      "overwrite": {
        "syntax": "[<string>] call BIS_fnc_isLocalized",
        "docSyntax": "[localizationString] call BIS_fnc_isLocalized",
        "tags": "",
        "description": "Checks if string is localized. Obsolete variant before isLocalized command was introduced.",
        "example": "[\"STR_someLocalizedString\"] call BIS_fnc_isLocalized;",
        "params": "<string>",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_kbCanSpeak",
      "overwrite": {
        "syntax": "<object> call BIS_fnc_kbCanSpeak",
        "docSyntax": "unit call BIS_fnc_kbCanSpeak",
        "tags": "",
        "description": "Check if person is not locked by some conversation.",
        "example": "_canPlayerTalk = player call BIS_fnc_kbCanSpeak;",
        "params": "<object>",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_kbCreateDummy",
      "overwrite": {
        "syntax": "cfgidentities call BIS_fnc_kbCreateDummy",
        "docSyntax": "dummyVarName call BIS_fnc_kbCreateDummy",
        "tags": "",
        "description": "Creates a dummy speaker (as a <Game Logic>). If given dummy variable has already been created, returns this one.",
        "example": "private _dummySpeaker = \"BIS_dummySpeaker\" call BIS_fnc_kbCreateDummy; cc_dummySpeaker == BIS_dummySpeaker now",
        "params": "cfgidentities",
        "returns": "object"
      }
    },
    {
      "key": "BIS_fnc_kbIsSpeaking",
      "overwrite": {
        "syntax": "<object> call BIS_fnc_kbIsSpeaking",
        "docSyntax": "unit call BIS_fnc_kbIsSpeaking",
        "tags": "",
        "description": "Check if speaker is locked for different conversation.",
        "example": "player call BIS_fnc_kbIsSpeaking;",
        "params": "<object>",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_kbMenu",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_kbMenu -->",
        "docSyntax": "<!-- [] call BIS_fnc_kbMenu -->",
        "tags": "",
        "description": "pre/* Description: Opens conversation menu. Script terminates itself when menu selection is finished. Parameter(s): _this select 0: ARRAY or STRING - List of responses (of type ARRAY) or Menu name Responses are in format: _response select 0: STRING or ANY - Display name when STRING, otherwise used as default option when menu is closed without selecting anything. _response select 1: STRING - expression ARRAY - BIS_fnc_kbTell params Returns: NUMBER - ID of select option */</pre> Wikiplaceholder",
        "example": "[] call BIS_fnc_kbMenu;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_kbPriority",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_kbPriority -->",
        "docSyntax": "<!-- [] call BIS_fnc_kbPriority -->",
        "tags": "",
        "description": "pre/* Description: Set conversation priority. Conversations with priority not in the list won't be played Parameter(s): _this: ARRAY - List of priorities. Empty array will just return current value. NUMBER >0 - add priority to already existing list <0 - remove priority from already existing list Priority 0 cannot be tempered with Returns: ARRAY - List of priorities */</pre> Wikiplaceholder",
        "example": "[] call BIS_fnc_kbPriority;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_kbSentence",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_kbSentence -->",
        "docSyntax": "<!-- [] call BIS_fnc_kbSentence -->",
        "tags": "",
        "description": "''N/A''",
        "example": "[] call BIS_fnc_kbSentence;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_kbSkip",
      "overwrite": {
        "syntax": "[<string>, <string>, <boolean>] call BIS_fnc_kbSkip",
        "docSyntax": "[topicName, mission, wait] call BIS_fnc_kbSkip",
        "tags": "",
        "description": "Skip a conversation started with BIS_fnc_kbTell. Currently played sentence will be finished.",
        "example": "[\"topic1\", \"currentMission\"] call BIS_fnc_kbSkip;",
        "params": "<string> <string> <boolean>",
        "returns": "boolean | number"
      }
    },
    {
      "key": "BIS_fnc_kbTell",
      "overwrite": {
        "syntax": "[<string>, cfgsentences, <array>, custom, <code>, <array>, <number>, <boolean>] spawn BIS_fnc_kbTell",
        "docSyntax": "[topic, container, section, radioMode, code, speakers, soundVolume, radioProtocol] spawn BIS_fnc_kbTell",
        "tags": "[AG] [EG]",
        "description": "Play given sentence/conversation. Script terminates itself when conversation is finished.br Conversation must be declared in Description.ext/CfgSentences. FeatureInformativeThis function can also be executed with call. Doing so will make it internally spawn since it needs to be able suspend its execution.",
        "example": "[\"01_Wave\", \"A_in\", nil, \"SIDE\", nil, nil, 1, false] spawn BIS_fnc_kbTell;",
        "params": "<string> cfgsentences <array> custom <code> <array> <number> <boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_kbTellLocal",
      "overwrite": {
        "syntax": "[<string>, <array>] call BIS_fnc_kbTellLocal",
        "docSyntax": "[mode, parameters] call BIS_fnc_kbTellLocal",
        "tags": "[AG] [EL]",
        "description": "Play given sentence, disable radio and/or lower sounds. Will use BIS_fnc_showSubtitle for better effects if channel is DIRECT or VEHICLE. Feature important This function is intended to be used by BIS_fnc_kbTell only.",
        "example": "[\"sentence\", [nowikiplayer, [BIS_HQ, \"myTopic\", \"playerSentence1\"]]] call BIS_fnc_kbTellLocal;",
        "params": "<string> <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_kbTopicConfig",
      "overwrite": {
        "syntax": "[<string>, <string>] call BIS_fnc_kbTopicConfig",
        "docSyntax": "[missionName, topic] call BIS_fnc_kbTopicConfig",
        "tags": "",
        "description": "Reads the configs to return a matching hlconfig &gt;&gt; CfgSentences &gt;&gt; missionName &gt;&gt; topic entry. Feature Informative Configs are checked in that order: configFile, campaignConfigFile, missionConfigFile. Feature important This function is intended to be used by BIS_fnc_kbTell only.",
        "example": "private _configTopic = [\"missionName\", \"topic\"] call BIS_fnc_kbTopicConfig;",
        "params": "<string> <string>",
        "returns": "config | nil"
      }
    },
    {
      "key": "BIS_fnc_keypointsExport",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_keypointsExport -->",
        "docSyntax": "<!-- [] call BIS_fnc_keypointsExport -->",
        "tags": "",
        "description": "''N/A''",
        "example": "[] call BIS_fnc_keypointsExport;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_keypointsExportFromKML",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_keypointsExportFromKML -->",
        "docSyntax": "<!-- [] call BIS_fnc_keypointsExportFromKML -->",
        "tags": "",
        "description": "pre/* Description: Imports and marks positions from KLM file. Parameter(s): _this: STRING - path to .kml file Returns: STRING - config output (also copied to clipboard) */</pre> Wikiplaceholder",
        "example": "[] call BIS_fnc_keypointsExportFromKML;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_KMLimport",
      "overwrite": {
        "syntax": "<string> call BIS_fnc_KMLimport",
        "docSyntax": "filePath call BIS_fnc_KMLimport",
        "tags": "",
        "description": "Read positions from a WikipediaKeyhole_Markup_LanguageKML file. FeatureInformativeRecommended to execute in loading screen.",
        "example": "_data = \"subDir\\myFile.kml\" call BIS_fnc_KMLimport;",
        "params": "<string>",
        "returns": "number | position | positionagl | string | string | string"
      }
    },
    {
      "key": "BIS_fnc_markerCreate",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_markerCreate -->",
        "docSyntax": "<!-- [] call BIS_fnc_markerCreate -->",
        "tags": "",
        "description": "pre/* Description: Creates marker with given params. Reads config to recognize settings - use for quick debugging only. Parameter(s): _this: ARRAY of values: STRING - one of type, color, brush or shape. If no corresponding class is found, value is used as marker text ARRAY [STRING(,ANY,ANY,...)] - marker name with optional arguments [NUMBER] - marker size [a,a] [NUMBER,NUMBER] - marker size [x,y] [NUMBER,NUMBER,NUMBER] - marker position [x,y,z] OBJECT - object's position NUMBER - marker dir BOOL - marker locality (true if global) Returns: STRING - created marker */</pre> Wikiplaceholder",
        "example": "[] call BIS_fnc_markerCreate;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_markerParams",
      "overwrite": {
        "syntax": "<string> call BIS_fnc_markerParams",
        "docSyntax": "varName call BIS_fnc_markerParams",
        "tags": "",
        "description": "Returns marker params in format compatible with BIS_fnc_markerCreate.",
        "example": "_params = \"marker_1\" call BIS_fnc_markerParams;",
        "params": "<string>",
        "returns": "array | array | string | array | array | string | string | string | string | number | string"
      }
    },
    {
      "key": "BIS_fnc_markerPath",
      "overwrite": {
        "syntax": "[<position>, same, <number>, <array>] call BIS_fnc_markerPath",
        "docSyntax": "[start, end, spacing, params] call BIS_fnc_markerPath",
        "tags": "[EG]",
        "description": "Create marker(s) between two points.",
        "example": "[\"markerStart\", \"markerEnd\"] call BIS_fnc_markerPath;",
        "params": "<position> same <number> <array>",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_moveIn",
      "overwrite": {
        "syntax": "[<object>, <object>, <array>] call BIS_fnc_moveIn",
        "docSyntax": "[vehicle, unit, role] call BIS_fnc_moveIn",
        "tags": "[AL]",
        "description": "Moves a unit into vehicle. Compatible with assignedVehicleRole output.",
        "example": "[myCar, player, \"cargo\"] [call]] BIS_fnc_moveIn;",
        "params": "<object> <object> <array>",
        "returns": "boolean | true"
      }
    },
    {
      "key": "BIS_fnc_MP",
      "overwrite": {
        "syntax": "[params, functionName, target, isSpawn, isPersistent] call BIS_fnc_MP",
        "docSyntax": "[params, functionName, target, isSpawn, isPersistent] call BIS_fnc_MP",
        "tags": "",
        "description": "Send function for remote execution (and executes locally if conditions are met).",
        "example": "[\"Imma spamming your log!\", \"BIS_fnc_log\"] call BIS_fnc_MP;",
        "params": "<anything> <string> <object> <boolean> <boolean> <anything> function everyone <boolean> called",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_MPexec",
      "overwrite": {
        "syntax": "[<string>, <array>] call BIS_fnc_MPexec",
        "docSyntax": "[packetName, packetValue] call BIS_fnc_MPexec",
        "tags": "",
        "description": "Execute received remote execution. This function is used by BIS_fnc_MP and should not be called directly. Feature arma3 Obsolete and ''completely'' effectless (empty file) since GVIarma31.52 and introduction of remoteExec/remoteExecCall. Feature Informative This page is about tkoh and arma3 &lt; 1.52.",
        "example": "[\"BIS_fnc_MP_packet\", [\"Hello World\", \"hint\", true, true]] call BIS_fnc_MPexec;",
        "params": "<string> <array>",
        "returns": "boolean"
      }
    },
    {
      "key": "BIS_fnc_nearestHelipad",
      "overwrite": {
        "syntax": "[<array>, <number>, <boolean>, <array>] call BIS_fnc_nearestHelipad",
        "docSyntax": "[position, radius, random, types] call BIS_fnc_nearestHelipad",
        "tags": "",
        "description": "Finds the nearest helipad of given type.",
        "example": "",
        "params": "<array> <number> <boolean> <array>",
        "returns": "array | position | object | position"
      }
    },
    {
      "key": "BIS_fnc_noFlyZone",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_noFlyZone -->",
        "docSyntax": "<!-- [] call BIS_fnc_noFlyZone -->",
        "tags": "",
        "description": "''N/A''",
        "example": "[] call BIS_fnc_noFlyZone;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_noFlyZonesCreate",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_noFlyZonesCreate -->",
        "docSyntax": "<!-- [] call BIS_fnc_noFlyZonesCreate -->",
        "tags": "",
        "description": "''N/A''",
        "example": "[] call BIS_fnc_noFlyZonesCreate;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_noFlyZonesExport",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_noFlyZonesExport -->",
        "docSyntax": "<!-- [] call BIS_fnc_noFlyZonesExport -->",
        "tags": "",
        "description": "''N/A''",
        "example": "[] call BIS_fnc_noFlyZonesExport;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_numberDigits",
      "overwrite": {
        "syntax": "<number> call BIS_fnc_numberDigits",
        "docSyntax": "number call BIS_fnc_numberDigits",
        "tags": "",
        "description": "Break number into array of digits.",
        "example": "12345678 call BIS_fnc_numberDigits; ccreturns [1,2,3,4,5,6,7,8]",
        "params": "<number>",
        "returns": "numbers - array of ''number'' digits"
      }
    },
    {
      "key": "BIS_fnc_numberText",
      "overwrite": {
        "syntax": "[<number>, <number>] call BIS_fnc_numberText",
        "docSyntax": "[number, modulo] call BIS_fnc_numberText",
        "tags": "",
        "description": "Convert a number into string (avoiding scientific notation).",
        "example": "[4096] call BIS_fnc_numberText; cc\"4 096\"",
        "params": "<number> <number>",
        "returns": "string"
      }
    },
    {
      "key": "BIS_fnc_onEnd",
      "overwrite": {
        "syntax": "argument call BIS_fnc_onEnd",
        "docSyntax": "argument call BIS_fnc_onEnd",
        "tags": "",
        "description": "Register code to be executed after mission end.",
        "example": "_onEndIndex = { player addRating 10000; } call BIS_fnc_onEnd;",
        "params": "",
        "returns": "number"
      }
    },
    {
      "key": "BIS_fnc_onLoad",
      "overwrite": {
        "syntax": "<code> call BIS_fnc_onLoad",
        "docSyntax": "parameter call BIS_fnc_onLoad",
        "tags": "",
        "description": "Register code to be executed after a mission load (from a save, for example). FeatureimportantReplaced by \"loaded\" mission event handler.br This function now exists only because of backward compatibility",
        "example": "_codeIndex = { hint \"Welcome back!\"; } call BIS_fnc_onLoad;",
        "params": "<code>",
        "returns": "number"
      }
    },
    {
      "key": "BIS_fnc_overviewAuthor",
      "overwrite": {
        "syntax": "[<config>, <control>] call BIS_fnc_overviewAuthor",
        "docSyntax": "[config, control] call BIS_fnc_overviewAuthor",
        "tags": "",
        "description": "Returns the mission author's name preceded by \"by\", e.g \"by Username\". See HashLinkDescription.ext#author.",
        "example": "hint format [\"%1, %2\", briefingName, call BIS_fnc_overviewAuthor];",
        "params": "<config> <control>",
        "returns": "string"
      }
    },
    {
      "key": "BIS_fnc_overviewDifficulty",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_overviewDifficulty -->",
        "docSyntax": "<!-- [] call BIS_fnc_overviewDifficulty -->",
        "tags": "",
        "description": "''N/A''",
        "example": "[] call BIS_fnc_overviewDifficulty;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_overviewMission",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_overviewMission -->",
        "docSyntax": "<!-- [] call BIS_fnc_overviewMission -->",
        "tags": "",
        "description": "pre#define CONTROL_SHOW(CONTROL) \\ CONTROL ctrlshow true; \\ CONTROL ctrlsetfade 0; \\ CONTROL ctrlcommit 0; #define CONTROL_HIDE(CONTROL) \\ CONTROL ctrlshow false; \\ CONTROL ctrlsetfade 1; \\ CONTROL ctrlcommit 0; Wikiplaceholder",
        "example": "[] call BIS_fnc_overviewMission;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_overviewTerrain",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_overviewTerrain -->",
        "docSyntax": "<!-- [] call BIS_fnc_overviewTerrain -->",
        "tags": "",
        "description": "''N/A''",
        "example": "[] call BIS_fnc_overviewTerrain;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_overviewTimeTrial",
      "overwrite": {
        "syntax": "<string> call BIS_fnc_overviewTimeTrial",
        "docSyntax": "class call BIS_fnc_overviewTimeTrial",
        "tags": "",
        "description": "Returns the dynamically composed overview text for Time Trial scenarios.",
        "example": "\"BIS_someTimeTrail\" call BIS_fnc_overviewTimeTrial;",
        "params": "<string>",
        "returns": "string"
      }
    },
    {
      "key": "BIS_fnc_param",
      "overwrite": {
        "syntax": "[<array>, <number>, defaultValue, dataTypes, requiredCount] call BIS_fnc_param",
        "docSyntax": "[input, index, defaultValue, dataTypes, requiredCount] call BIS_fnc_param",
        "tags": "",
        "description": "Load a script parameter. See Arma 3: Functions Library for detailed description. FeatureArma3Use param or params commands instead.",
        "example": "_target nowiki=</nowiki> [_this, 0, objNull, [nowikiobjNull,[]], [2,3]] call BIS_fnc_param;",
        "params": "<array> <number> <anything> <array> <number>",
        "returns": "anything"
      }
    },
    {
      "key": "BIS_fnc_paramIn",
      "overwrite": {
        "syntax": "See BIS_fnc_param",
        "docSyntax": "See BIS_fnc_param",
        "tags": "",
        "description": "See _this is not used as an input param.",
        "example": "_array = [_this, 0, [], [[]]] call BIS_fnc_param; _item = [_array,0,true,[true]] call BIS_fnc_paramIn;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_PIP",
      "overwrite": {
        "syntax": "[<string>, <object>, <object>, <boolean>] call BIS_fnc_PIP",
        "docSyntax": "[renderTarget, cameraParams, vehicle, replace] call BIS_fnc_PIP",
        "tags": "",
        "description": "Displays Picture in Picture.",
        "example": "[\"rendertarget0\", [nowiki[heli1, heli1 selectionPosition \"slingload0\"], cargo1], heli1, false] call BIS_fnc_PIP;",
        "params": "<string> <object> <object> <boolean>",
        "returns": "object"
      }
    },
    {
      "key": "BIS_fnc_playerName",
      "overwrite": {
        "syntax": "call BIS_fnc_playerName",
        "docSyntax": "call BIS_fnc_playerName",
        "tags": "",
        "description": "Return current profile's name. Deprecated since arma3, use profileName instead.",
        "example": "_myPlayerName = call BIS_fnc_playerName;",
        "params": "",
        "returns": "string | profilename"
      }
    },
    {
      "key": "BIS_fnc_posDegToUTM",
      "overwrite": {
        "syntax": "[<number>, <number>'', <number>''] call BIS_fnc_posDegToUTM",
        "docSyntax": "[longitude, latitude'', zone''] call BIS_fnc_posDegToUTM",
        "tags": "",
        "description": "Generate a WikipediaUniversal_Transverse_Mercator_coordinate_system#UTM_zoneUTM Zone, Easting and Northing from lat and long fields. It uses WikipediaNorth_American_DatumNAD83 constants.",
        "example": "_utmZone = [47.63959,-122.127249] call BIS_fnc_posDegToUTM;",
        "params": "<number> <number> <number>",
        "returns": "numbers - format [easting, northing, zone]"
      }
    },
    {
      "key": "BIS_fnc_posDegToWorld",
      "overwrite": {
        "syntax": "[<number>, <number>, <string>] call BIS_fnc_posDegToWorld",
        "docSyntax": "[longitude, latitude, world] call BIS_fnc_posDegToWorld",
        "tags": "",
        "description": "Convert latitude/longtitude coordinates into game world position.br World config 'must' contain following settings to convert the position correctly: codeccRequired for scripting mapSize = 61440; ccCan differ from mapArea size, as ingame world can be resized mapZone = 10; ccUTM zone mapArea[] = { cclon/lat coordinates (not in UTM to assure .kml precision) -122.754367782585,47.3272454065969, ccBottom Left -121.930117859276,47.8753494907418 ccTop Right };</code>",
        "example": "[47.63959,-122.127249] call BIS_fnc_posDegToWorld;",
        "params": "<number> <number> <string>",
        "returns": "numbers - format [easting, northing, zone]"
      }
    },
    {
      "key": "BIS_fnc_position",
      "overwrite": {
        "syntax": "argument call BIS_fnc_position",
        "docSyntax": "argument call BIS_fnc_position",
        "tags": "",
        "description": "Returns PositionAGL, unless passed argument is Array, then the same array is returned. When position is Object and alternative position is stored in hl\"BIS_fnc_position_forced\" variable on this object, the stored position is used rather than actual object position. This function is a pretty safe way to get the position of an entity.",
        "example": "_pos = player call BIS_fnc_position;",
        "params": "",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_posUTMToDeg",
      "overwrite": {
        "syntax": "[<number>, <number>, <number>'', <string>''] call BIS_fnc_posUTMToDeg",
        "docSyntax": "[easting, northing, zone'', hemisphere''] call BIS_fnc_posUTMToDeg",
        "tags": "",
        "description": "Generate Lat and Long fields from WikipediaUniversal_Transverse_Mercator_coordinate_system#UTM_zoneUTM Zone, Easting and Northing. It uses WikipediaNorth_American_DatumNAD83 constants.",
        "example": "[5273702, 560561, 10] call BIS_fnc_posUTMToDeg;",
        "params": "<number> <number> <number> <string>",
        "returns": "numbers - format [longitude, latitude]"
      }
    },
    {
      "key": "BIS_fnc_progressLoadingScreen",
      "overwrite": {
        "syntax": "[<number>] call BIS_fnc_progressLoadingScreen",
        "docSyntax": "[progress] call BIS_fnc_progressLoadingScreen",
        "tags": "",
        "description": "Progress scripted loading screen. The value will be preserved even when a new screen is opened.",
        "example": "_IDD = _prog = [0.75] call BIS_fnc_progressLoadingScreen;",
        "params": "<number>",
        "returns": "number"
      }
    },
    {
      "key": "BIS_fnc_radioSetChannel",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_radioSetChannel -->",
        "docSyntax": "<!-- [] call BIS_fnc_radioSetChannel -->",
        "tags": "",
        "description": "pre/* Description: Set a specific or random music channel. Parameter(s): _this select 0: channel (String) _this select 1: next (Bool) _this select 2: override (Bool) Returns: Bool */</pre> Wikiplaceholder",
        "example": "[] call BIS_fnc_radioSetChannel;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_radioSetPlaylist",
      "overwrite": {
        "syntax": "call BIS_fnc_radioSetPlaylist",
        "docSyntax": "call BIS_fnc_radioSetPlaylist",
        "tags": "",
        "description": "Set a random music playlist for the current set channel (default \"Rock\"). Musics with \"genre\" set in CfgMusic are selected and shuffled.",
        "example": "call BIS_fnc_radioSetPlaylist;",
        "params": "",
        "returns": "strings - created music playlist"
      }
    },
    {
      "key": "BIS_fnc_radioSetTrack",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_radioSetTrack -->",
        "docSyntax": "<!-- [] call BIS_fnc_radioSetTrack -->",
        "tags": "",
        "description": "pre/* Description: Set a specific or random music track. Parameter(s): _this select 0: track (String) _this select 1: override (Bool) _this select 2: Bool (first track? -> start randomly within the track) Returns: Array (duration (s): Scalar, start time (s): Scalar) */</pre> Wikiplaceholder",
        "example": "[] call BIS_fnc_radioSetTrack;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_randomPos",
      "overwrite": {
        "syntax": "<array> call BIS_fnc_randomPos",
        "docSyntax": "[whitelist, blacklist, code] call BIS_fnc_randomPos",
        "tags": "",
        "description": "Selects random position according to given params within given area",
        "example": "_randomPosMapNoWater = [] call BIS_fnc_randomPos;",
        "params": "<array> <array> <array> _this",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_randomPosTrigger",
      "overwrite": {
        "syntax": "can call BIS_fnc_randomPosTrigger",
        "docSyntax": "param call BIS_fnc_randomPosTrigger",
        "tags": "",
        "description": "Selects random position within trigger, marker, location area or area defined by array",
        "example": "marker1 call BIS_fnc_randomPosTrigger;",
        "params": "can",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_roundDir",
      "overwrite": {
        "syntax": "[<number>, <number>] call BIS_fnc_roundDir",
        "docSyntax": "[rawDirection, rounding] call BIS_fnc_roundDir",
        "tags": "",
        "description": "Round direction to nearest set rounding; used for determining cardinal direction.",
        "example": "player setDir (nowiki[</nowiki>getDir player, 45] call BIS_fnc_roundDir);",
        "params": "<number> <number>",
        "returns": "number"
      }
    },
    {
      "key": "BIS_fnc_saveGame",
      "overwrite": {
        "syntax": "[<array>] call BIS_fnc_saveGame",
        "docSyntax": "[objects] call BIS_fnc_saveGame",
        "tags": "",
        "description": "Evaluates the current battlefield situation and saves the game when appropriate.",
        "example": "[ [unit_1,unit_2] ] call BIS_fnc_saveGame;",
        "params": "<array>",
        "returns": "boolean | true"
      }
    },
    {
      "key": "BIS_fnc_secondsToString",
      "overwrite": {
        "syntax": "[<number>, <string>, <boolean>] call BIS_fnc_secondsToString",
        "docSyntax": "[totalSeconds, format, returnArray] call BIS_fnc_secondsToString",
        "tags": "",
        "description": "Convert seconds to formatted string.",
        "example": "hint format [\"Hi, it is currently %1.\", [nowikitime, \"HH:MM\"] call BIS_fnc_secondsToString];",
        "params": "<number> <string> <boolean>",
        "returns": "true"
      }
    },
    {
      "key": "BIS_fnc_setHeight",
      "overwrite": {
        "syntax": "[<object>, <number>, <position>, <string>] call BIS_fnc_setHeight",
        "docSyntax": "[target, height, position, mode] call BIS_fnc_setHeight",
        "tags": "",
        "description": "Set an object height.",
        "example": "ccwill place player's vehicle on \"myHeightMarker\", 50m above terrain [nowikivehicle player, 50, getMarkerPos \"myHeightMarker\", \"ATL\"]]] call BIS_fnc_setHeight;",
        "params": "<object> <number> <position> <string> <number> <string>",
        "returns": "boolean | true"
      }
    },
    {
      "key": "BIS_fnc_shakeGauges",
      "overwrite": {
        "syntax": "<!-- [] call BIS_fnc_shakeGauges -->",
        "docSyntax": "<!-- [] call BIS_fnc_shakeGauges -->",
        "tags": "",
        "description": "pre/* Description: Shake analogue gauges Parameter(s): _this select 0 (Optional): NUMBER - shake limit (max distance gauges can move on screen from original position) _this select 1 (Optional): NUMBER - number of repeats _this select 2 (Optional): NUMBER - delay between every position change _this select 3 (Optional): ARRAY - list of IDCs Returns: NOTHING */</pre> Wikiplaceholder",
        "example": "[] call BIS_fnc_shakeGauges;",
        "params": "",
        "returns": ""
      }
    },
    {
      "key": "BIS_fnc_shutdown",
      "overwrite": {
        "syntax": "call BIS_fnc_shutdown",
        "docSyntax": "call BIS_fnc_shutdown",
        "tags": "",
        "description": "Shut downs the game. Featurearma3this function will only close the game once back to the main menu.",
        "example": "call BIS_fnc_shutdown",
        "params": "",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_singleMissionConfig",
      "overwrite": {
        "syntax": "call BIS_fnc_singleMissionConfig",
        "docSyntax": "call BIS_fnc_singleMissionConfig",
        "tags": "",
        "description": "Returns config of current single mission.",
        "example": "_config = call BIS_fnc_singleMissionConfig;",
        "params": "",
        "returns": "config | nothing | config | nothing"
      }
    },
    {
      "key": "BIS_fnc_singleMissionKeys",
      "overwrite": {
        "syntax": "call BIS_fnc_singleMissionKeys",
        "docSyntax": "call BIS_fnc_singleMissionKeys",
        "tags": "",
        "description": "Activate mission related keys.",
        "example": "_activatedKeys = call BIS_fnc_singleMissionKeys;",
        "params": "",
        "returns": "array"
      }
    },
    {
      "key": "BIS_fnc_singleMissionName",
      "overwrite": {
        "syntax": "call BIS_fnc_singleMissionName",
        "docSyntax": "call BIS_fnc_singleMissionName",
        "tags": "",
        "description": "Returns name of currently selected single mission.",
        "example": "_missionName = call BIS_fnc_singleMissionName;",
        "params": "",
        "returns": "string"
      }
    },
    {
      "key": "BIS_fnc_titleText",
      "overwrite": {
        "syntax": "<string> call BIS_fnc_titleText",
        "docSyntax": "message call BIS_fnc_titleText",
        "tags": "",
        "description": "Display given string as structured text. Featurearma3In arma3 this function displays a bottom-left message, limited to two lines of approximately 53 characters each.",
        "example": "\"Stratis, 2035-07-14 0130nowiki<br /></nowiki>A dark night ahead…\" call BIS_fnc_titleText;",
        "params": "<string>",
        "returns": "boolean | true"
      }
    },
    {
      "key": "BIS_fnc_worldArea",
      "overwrite": {
        "syntax": "call BIS_fnc_worldArea",
        "docSyntax": "call BIS_fnc_worldArea",
        "tags": "[EL]",
        "description": "Creates (or returns if it already exists) trigger with size of map.",
        "example": "_bigTrigger = call BIS_fnc_worldArea;",
        "params": "",
        "returns": "object | trigger"
      }
    },
    {
      "key": "BIS_fnc_wpAerobatics",
      "overwrite": {
        "syntax": "arguments: [dynamic, <code>, <code>]",
        "docSyntax": "arguments: [visuals, detectionCode, completionCode]",
        "tags": "",
        "description": "AEROBATICS custom waypoint. Player must perform all the required manoeuvres: * \"hover_turn_360\" * \"hover_bow\" * \"fast_turn_180\" * \"backwards\" * \"strafe\"",
        "example": "[nowikiplayer, { hint \"OK, start!\" }, { hint \"success!\" }] spawn BIS_fnc_wpAerobatics;",
        "params": "dynamic <code> <code>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpAngle",
      "overwrite": {
        "syntax": "arguments: [<number>, <number>, <number>, <code>, <string>]",
        "docSyntax": "arguments: [circleLimit, circleBorder, circleDir, customCond, hint]",
        "tags": "",
        "description": "CIRCLE custom waypoint. Keep helicopter rotated in given vector toward target.",
        "example": "",
        "params": "<number> <number> <number> <code> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpCheckpoint",
      "overwrite": {
        "syntax": "arguments: [<code>]",
        "docSyntax": "arguments: [posLimit]",
        "tags": "",
        "description": "CHECKPOINT custom waypoint. Player has to reach waypoint position with certain precision (as opposed to normal Move waypoint, which became completed in around 500m).",
        "example": "[nowikiplayer,position dude,10,2] spawn BIS_fnc_wpCheckpoint;",
        "params": "<code>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpFastRope",
      "overwrite": {
        "syntax": "arguments: [<number>,<number>,<number>]",
        "docSyntax": "arguments: [limitHeight,limitSpeed,fastropeID]",
        "tags": "",
        "description": "FAST-ROPE custom waypoint. Let everybody in vehicles' cargo space rappel down on a rope.",
        "example": "[nowikiplayer, position dude, 50, 5, 15, 1] spawn BIS_fnc_wpFastRope;",
        "params": "<number> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpFormation",
      "overwrite": {
        "syntax": "arguments: [<number>, <number>, <array>, <number>, <boolean>]",
        "docSyntax": "arguments: [failCode, maxTime, relPos, diffAlt, visualize]",
        "tags": "",
        "description": "FORMATION custom waypoint. Player must stay within certain radius and angle towards followed vehicle.",
        "example": "[nowikiplayer, dude, 80, { HSim_keptFormation = false }, -60, [80,160], 20, true] spawn BIS_fnc_wpFormation;",
        "params": "<number> <number> <array> <number> <boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpHover",
      "overwrite": {
        "syntax": "arguments: [<number>, <boolean>, <number>, <boolean>]",
        "docSyntax": "arguments: [minTime, reset, altDiff, visualize]",
        "tags": "",
        "description": "HOVER custom waypoint. Hover on specific spot.",
        "example": "[nowikiplayer, position dude, 10, 10, false, -1, true] spawn BIS_fnc_wpLand;",
        "params": "<number> <boolean> <number> <boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpLand",
      "overwrite": {
        "syntax": "arguments: [<array>, <boolean>]",
        "docSyntax": "arguments: [dirParam, visualize]",
        "tags": "",
        "description": "\"LAND\" custom waypoint. Land on specific spot.",
        "example": "[nowikiplayer, position dude, 10, [42, 20], true] spawn BIS_fnc_wpLand;",
        "params": "<array> <boolean> <group> <position> <object>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpRestricted",
      "overwrite": {
        "syntax": "arguments: [limits, <number>, <array>, <boolean>, <code>]",
        "docSyntax": "arguments: [limits, maxTime, failCode, visualize, warnCode]",
        "tags": "",
        "description": "RESTRICTED custom waypoint. Player must fly in given limits.",
        "example": "[nowikiplayer, objNull, 0, [250, -1, 150, -1], 30, { HSim_RestrictedFlight = false }, true] spawn BIS_fnc_wpFormation;",
        "params": "<array> <number> <code> <boolean> <code>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpSlingLoadAttach",
      "overwrite": {
        "syntax": "arguments: [<number>,<code>,<number>]",
        "docSyntax": "arguments: [posLimit,failCode,weight]",
        "tags": "",
        "description": "ATTACH SLINGLOAD custom waypoint. Load an object to rope.",
        "example": "[nowikiplayer, dude, 50, 10, { hintC \"You lost the cargo!\" }, 1000] spawn BIS_fnc_wpSlingLoadAttach;",
        "params": "<number> <code> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpSlingLoadDetach",
      "overwrite": {
        "syntax": "arguments: [<number>,<array>]",
        "docSyntax": "arguments: [posLimit,limitDir]",
        "tags": "",
        "description": "DETACH SLINGLOAD custom waypoint. Unload an object which was previously loaded using BIS_fnc_wpSlingLoadAttach.",
        "example": "[nowikiplayer, position dude, 50, 10, [42, 52]] spawn BIS_fnc_wpSlingLoadDetach;",
        "params": "<number> <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpSlingLoadDrop",
      "overwrite": {
        "syntax": "arguments: none",
        "docSyntax": "arguments: none",
        "tags": "",
        "description": "DROP SLINGLOAD custom waypoint. Drop an object which was previously loaded using BIS_fnc_wpSlingLoadAttach",
        "example": "[nowikiplayer, position dude, 50] spawn BIS_fnc_wpSlingLoadDrop;",
        "params": "",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpSteady",
      "overwrite": {
        "syntax": "arguments: [<array>, <number>, <code>, <code>, <code>]",
        "docSyntax": "arguments: [limitArray, failLimit, failCode, warningCode, positiveCode]",
        "tags": "",
        "description": "FLY STEADY custom waypoint. Keep helicopter's pitch, bank, relative velocity a relative vector in given limits",
        "example": "[ player, position dude, nil, [15,1.3,30], 10, { hintC \"You failed\"; }, { hint \"Watch out!\"; }, { hint \"Good\"; } ] spawn BIS_fnc_wpSteady;",
        "params": "<array> <number> <code> <code> <code>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpTimed",
      "overwrite": {
        "syntax": "arguments: [<code>,<number>,<boolean>]",
        "docSyntax": "arguments: [failCode,timeLimit,showHint]",
        "tags": "",
        "description": "COUNTDOWN custom waypoint. Player has to reach waypoint area before time runs out.",
        "example": "[nowikiplayer, position dude, 100, { hintC \"You failed!\" }, 42, true] spawn BIS_fnc_wpTimed;",
        "params": "<code> <number> <boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpTransport",
      "overwrite": {
        "syntax": "arguments: none",
        "docSyntax": "arguments: none",
        "tags": "",
        "description": "TRANSPORT custom waypoint. Player must pick up group of units in their location. Get in AI pathfinding is supressed (to avoid unwanted behaviour on building roofs), units are teleported into player's vehicle instead.",
        "example": "[nowikiplayer, dude, 100] spawn BIS_fnc_wpTransport;",
        "params": "",
        "returns": "nothing"
      }
    },
    {
      "key": "BIS_fnc_wpWinchLoad",
      "overwrite": {
        "syntax": "arguments: [<number>, <number>, <object>, <code>, <code>]",
        "docSyntax": "arguments: [limitHeight, winchID, crewman, failCode, loadCode]",
        "tags": "",
        "description": "WINCH LOAD custom waypoint. Load a group into helicopter cargo using winch.",
        "example": "[nowikiplayer, dude, 50, 5, 1, rescuer, {hintC \"Rescuer died!\"}, {hintC \"Dude saved\"}] spawn BIS_fnc_wpWinchLoad;",
        "params": "<number> <number> <object> <code> <code>",
        "returns": "nothing"
      }
    },
    {
      "key": "clearForcesRTD",
      "overwrite": {
        "syntax": "clearForcesRTD",
        "docSyntax": "clearForcesRTD",
        "tags": "",
        "description": "Removes all force generators from world. Featureafm",
        "example": "clearForcesRTD;",
        "params": "",
        "returns": "array"
      }
    },
    {
      "key": "collectiveRTD",
      "overwrite": {
        "syntax": "collectiveRTD <objectrtd>",
        "docSyntax": "collectiveRTD helicopterRTD",
        "tags": "",
        "description": "Returns the current position of a helicopter's collective pitch control. * 0: fully lowered * 1: fully raised Featureafm",
        "example": "_collective = collectiveRTD vehicle player;",
        "params": "<objectrtd>",
        "returns": "number"
      }
    },
    {
      "key": "enableAutoStartUpRTD",
      "overwrite": {
        "syntax": "<objectrtd> <boolean>AutoStartUpRTD enable",
        "docSyntax": "helicopterRTD enableAutoStartUpRTD enable",
        "tags": "",
        "description": "Toggle availability of the automated helicopter start-up and shutdown sequences. Featureafm",
        "example": "myHelicopterRTD enableAutoStartUpRTD true;",
        "params": "<objectrtd> <boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "enableAutoTrimRTD",
      "overwrite": {
        "syntax": "<objectrtd> <boolean>AutoTrimRTD enable",
        "docSyntax": "helicopterRTD enableAutoTrimRTD enable",
        "tags": "",
        "description": "Toggle auto-trim for RTD helicopters. Featureafm",
        "example": "myHelicopterRTD enableAutoTrimRTD true;",
        "params": "<objectrtd> <boolean>",
        "returns": "boolean"
      }
    },
    {
      "key": "forceAtPositionRTD",
      "overwrite": {
        "syntax": "forceAtPositionRTD <array>",
        "docSyntax": "forceAtPositionRTD position",
        "tags": "",
        "description": "Adds force generator to world. Featureafm",
        "example": "forceAtPositionRTD;",
        "params": "<array>",
        "returns": "number"
      }
    },
    {
      "key": "forceGeneratorRTD",
      "overwrite": {
        "syntax": "forceGeneratorRTD <number>",
        "docSyntax": "forceGeneratorRTD index",
        "tags": "",
        "description": "Adds force generator to world. Featureafm",
        "example": "forceGeneratorRTD 2;",
        "params": "<number>",
        "returns": "number"
      }
    },
    {
      "key": "getEngineTargetRPMRTD",
      "overwrite": {
        "syntax": "getEngineTargetRPMRTD <object>",
        "docSyntax": "getEngineTargetRPMRTD helicopter",
        "tags": "",
        "description": "Returns RPM of all engines. Featureafm",
        "example": "private _rpm = getEngineTargetRPMRTD _helicopter;",
        "params": "<object>",
        "returns": "numbers with the rpm of each engine"
      }
    },
    {
      "key": "getHitPointDamage",
      "overwrite": {
        "syntax": "<object>getHitPointDamage <string>",
        "docSyntax": "vehicle getHitPointDamage hitPointName",
        "tags": "[AG]",
        "description": "Return current level of damage in range 0..1 for a specific Hit Point (specified by its config class). If you need to get damage of a selection instead of hit point, use getHit.",
        "example": "vehicle player getHitPointDamage \"hitEngine\";",
        "params": "<object> <string>",
        "returns": "number | nothing"
      }
    },
    {
      "key": "getRotorBrakeRTD",
      "overwrite": {
        "syntax": "getRotorBrakeRTD helicopter",
        "docSyntax": "getRotorBrakeRTD helicopter",
        "tags": "",
        "description": "Returns if rotor break is on. Featureafm",
        "example": "_isOn = getRotorBrakeRTD _heli;",
        "params": "<object>",
        "returns": "boolean | true | false"
      }
    },
    {
      "key": "getWingsOrientationRTD",
      "overwrite": {
        "syntax": "getWingsOrientationRTD <object>",
        "docSyntax": "getWingsOrientationRTD RTD_helicopter",
        "tags": "",
        "description": "Returns orientation of horizontal stabilizers.Featureafm",
        "example": "_orientation = getWingsOrientationRTD myHelicopter;",
        "params": "<object>",
        "returns": "number"
      }
    },
    {
      "key": "getWingsPositionRTD",
      "overwrite": {
        "syntax": "getWingsPositionRTD <object>",
        "docSyntax": "getWingsPositionRTD RTD_helicopter",
        "tags": "",
        "description": "Returns position of stabilizers.Featureafm",
        "example": "_position = getWingsPositionRTD myHelicopter;",
        "params": "<object>",
        "returns": "number"
      }
    },
    {
      "key": "HUDMovementLevels",
      "overwrite": {
        "syntax": "HUDMovementLevels",
        "docSyntax": "HUDMovementLevels",
        "tags": "",
        "description": "Returns movement borders for HUD [min speed, max speed, min alt, max alt, min dir, max dir, position[x,y,z] or target]",
        "example": "HUDMovementLevels; ccreturns e.g [0,0,0,0,0,0,[0,0,0]]",
        "params": "",
        "returns": "array"
      }
    },
    {
      "key": "numberOfEnginesRTD",
      "overwrite": {
        "syntax": "numberOfEnginesRTD <objectrtd>",
        "docSyntax": "numberOfEnginesRTD helicopterRTD",
        "tags": "",
        "description": "Returns the number of engines a helicopter has. Featureafm",
        "example": "_engineCount = numberOfEnginesRTD vehicle player;",
        "params": "<objectrtd>",
        "returns": "number"
      }
    },
    {
      "key": "profileNamespace",
      "overwrite": {
        "syntax": "'profileNamespace'",
        "docSyntax": "'profileNamespace'",
        "tags": "",
        "description": "Returns the global namespace attached to the active user profile. Use setVariable and getVariable to save and load data to and from this Namespace. A variable can be deleted by setting its value to nil. By default the variables set in this namespace will exist while the game is running and variables are saved persistently when the game is closed. Saving can also be forced by using saveProfileNamespace. The variables are stored next to the user profile in a file named hlmyUsername.vars.GAMENAME.",
        "example": "_namespace = 'profileNamespace';",
        "params": "",
        "returns": "namespace"
      }
    },
    {
      "key": "radioChannelAdd",
      "overwrite": {
        "syntax": "custom radioChannelAdd <array>",
        "docSyntax": "customChannelID radioChannelAdd units",
        "tags": "[EG]",
        "description": "Add the units to the custom channel.",
        "example": "2 radioChannelAdd [nowikiplayer, unit1];",
        "params": "custom <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "radioChannelCreate",
      "overwrite": {
        "syntax": "radioChannelCreate [<array>, <string>, <string>, <array>, sentenceType]",
        "docSyntax": "radioChannelCreate [color, label, callSign, units, sentenceType]",
        "tags": "[SE] [AG] [EG]",
        "description": "Create a custom radio channel with the given color, label, call sign and registered characters. The 'custom channel ID' returned can be used to manipulate the created channel later. There are 10 slots for custom radio channels which would correspond to channels 6-15 (see getPlayerChannel). The command will find an unused index in this range and create it when found.",
        "example": "_channelID= radioChannelCreate [[0.96, 0.34, 0.13, 0.8], \"Q-dance Radio\", \"%UNIT_NAME\", [player1, player2]];",
        "params": "<array> <string> <string> <array> <boolean>",
        "returns": "customchat"
      }
    },
    {
      "key": "radioChannelRemove",
      "overwrite": {
        "syntax": "custom radioChannelRemove <array>",
        "docSyntax": "customChannelID radioChannelRemove units",
        "tags": "",
        "description": "Remove the units from the custom radio channel.",
        "example": "3 radioChannelRemove [blufor_unit_1, blufor_unit_2];",
        "params": "custom <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "radioChannelSetCallSign",
      "overwrite": {
        "syntax": "custom radioChannelSetCallSign <string>",
        "docSyntax": "customChannelID radioChannelSetCallSign callSign",
        "tags": "",
        "description": "Set the custom radio channel's call sign. Available special parameters: * $KEY (reference to a localized text) * %CHANNEL_LABEL * %UNIT_SIDE * %UNIT_NAME * %UNIT_RANK * %UNIT_ID * %UNIT_REF * %UNIT_GRP_NAME * %UNIT_GRP_LEADER * %UNIT_VEH_NAME * %UNIT_VEH_POSITION",
        "example": "4 radioChannelSetCallSign \"%UNIT_NAME\";",
        "params": "custom <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "radioChannelSetLabel",
      "overwrite": {
        "syntax": "custom radioChannelSetLabel <string>",
        "docSyntax": "customChannelID radioChannelSetLabel label",
        "tags": "",
        "description": "Set the custom radio channel's label.",
        "example": "5 radioChannelSetLabel \"Q-dance Radio\";",
        "params": "custom <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "ropeCreate",
      "overwrite": {
        "syntax": "ropeCreate [<object>, <array>, <object>, <array>, <number>, <number>]",
        "docSyntax": "ropeCreate [fromObject, fromPoint, toObject, toPoint, segments, length]",
        "tags": "[EG]",
        "description": "Creates a rope.",
        "example": "myRope = ropeCreate [nowikivehicle player, \"fastrope0\", 10, 10, true];",
        "params": "<object> <array> <object> <array> <number> <number> <object> <array> <number> <number> <boolean> transport <string> attached <string> <number> <array> <array> transport <string> <number> <array> <array>",
        "returns": "object"
      }
    },
    {
      "key": "ropeDestroy",
      "overwrite": {
        "syntax": "<object>Destroy rope",
        "docSyntax": "ropeDestroy rope",
        "tags": "",
        "description": "Destroys the given rope. If the rope is attached to a vehicle, it will be detached and then destroyed.",
        "example": "ropeDestroy myRope;",
        "params": "<object>",
        "returns": "nothing"
      }
    },
    {
      "key": "ropeDetach",
      "overwrite": {
        "syntax": "<object> <object>Detach rope",
        "docSyntax": "attachedObject ropeDetach rope",
        "tags": "",
        "description": "Detaches attached object from rope (i.e. detaches rope end from attached to it entity). See ropeAttachTo for attach operation.",
        "example": "vehicle player ropeDetach myRope;",
        "params": "<object> <object>",
        "returns": "nothing"
      }
    },
    {
      "key": "ropeSetCargoMass",
      "overwrite": {
        "syntax": "<object>SetCargoMass [rope, <object>, <number>]",
        "docSyntax": "ropeSetCargoMass [rope, cargo, mass]",
        "tags": "",
        "description": "Set the simulated mass of an object attached to a rope. Featurearma3This command is not present in arma3. Use setMass instead.",
        "example": "ropeSetCargoMass [myRope, myCargo, 1138];",
        "params": "<object> <object> <number>",
        "returns": "number"
      }
    },
    {
      "key": "saveProfileNamespace",
      "overwrite": {
        "syntax": "'saveProfileNamespace'",
        "docSyntax": "'saveProfileNamespace'",
        "tags": "",
        "description": "Saves all variables stored in profileNamespace to the active Profile. FeatureWarning * This command triggers a file operation. As file operations are slow (even on SSDs), it is not recommended to use this command too frequently (i.e. several times per second). * Do not save large amounts of data to the profile; the larger the profile file gets, the slower it loads! * The profileNamespace is also saved when the game is closed. FeaturetkohHeliport status, used in the Career mode for example, is stored in the file that is modified by this command, so be mindful of this to avoid losing data and progress.",
        "example": "profileNamespace setVariable [\"TAG_lastPlayerLocation\", getPosASL player]; saveProfileNamespace;ccOptional since namespace is saved when game is closed",
        "params": "",
        "returns": "nothing"
      }
    },
    {
      "key": "setActualCollectiveRTD",
      "overwrite": {
        "syntax": "<objectrtd>setActualCollectiveRTD <number>",
        "docSyntax": "helicopterRTD setActualCollectiveRTD value",
        "tags": "",
        "description": "Sets the collective pitch control to a specific position, regardless of input devices (until those are changed). * 0: collective fully down * ~0.7: approximate stable hover position * 1: collective fully up Featureafm",
        "example": "myHelicopterRTD setActualCollectiveRTD 0.7;",
        "params": "<objectrtd> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setAPURTD",
      "overwrite": {
        "syntax": "<objectrtd> setAPURTD [<number>, <number>]",
        "docSyntax": "helicopterRTD setAPURTD [value, time]",
        "tags": "",
        "description": "Let the Auxiliary Power Unit (APU) reach a desired state over the given period of time.",
        "example": "vehicle player setAPURTD [1, 15];",
        "params": "<objectrtd> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setBatteryChargeRTD",
      "overwrite": {
        "syntax": "<objectrtd> setBatteryChargeRTD <number>",
        "docSyntax": "helicopterRTD setBatteryChargeRTD charge",
        "tags": "",
        "description": "Set the actual battery charge of a helicopter. * 0: no charge * 1: fully charged",
        "example": "vehicle player setBatteryChargeRTD 0.5;",
        "params": "<objectrtd> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setBatteryRTD",
      "overwrite": {
        "syntax": "<objectrtd>setBatteryRTD enable",
        "docSyntax": "helicopterRTD setBatteryRTD enable",
        "tags": "",
        "description": "Toggle a helicopter's electrical systems on and off.",
        "example": "(vehicle player) setBatteryRTD false;",
        "params": "<objectrtd> <boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "setBrakesRTD",
      "overwrite": {
        "syntax": "<objectrtd> setBrakesRTD [<number>, <number>]",
        "docSyntax": "helicopterRTD setBrakesRTD [value, wheelIndex]",
        "tags": "",
        "description": "Enable landing gear wheel brakes for a helicopter. * value 0: brakes off * value 1: brakes on * index 1: left wheels * index 2: right wheels * index 3: both sides Featureafm FeatureInformativeThis command is implemented, but not fully supported.",
        "example": "myHelicopterRTD setBrakesRTD [1, 3];",
        "params": "<objectrtd> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setCustomWeightRTD",
      "overwrite": {
        "syntax": "<objectrtd>setCustomWeightRTD <number>",
        "docSyntax": "helicopterRTD setCustomWeightRTD weight",
        "tags": "",
        "description": "Add virtual custom weight to a helicopter's center of gravity. This can be used to simulate added internal payload for specific scenarios, and affects the flight model. Featureafm",
        "example": "myHelicopterRTD setCustomWeightRTD 120;",
        "params": "<objectrtd> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setEngineRpmRTD",
      "overwrite": {
        "syntax": "<object> setEngineRpmRTD [<number>, <number>]",
        "docSyntax": "helicopter setEngineRpmRTD [rpm, engineIndex]",
        "tags": "",
        "description": "Sets the RPM of given engines. Featureafm",
        "example": "myHelicopter setEngineRpmRTD [1337, -1];",
        "params": "<object> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setHitPointDamage",
      "overwrite": {
        "syntax": "<object>setHitPointDamage [<string>, <number>, useEffects, instigator]",
        "docSyntax": "vehicle setHitPointDamage [hitPointName, damage, useEffects, instigator]",
        "tags": "[AL] [EG]",
        "description": "Set the current level of damage for a specific Hit Point (specified by its config class). This command has no effect when allowDamage is set to false. FeatureinformativeSee also BIS_fnc_setHitPointDamage for setting hit with dependency.",
        "example": "vehicle player setHitPointDamage [\"hitEngine2\", 1.0];",
        "params": "<object> <string> <number> <boolean> killed",
        "returns": "nothing"
      }
    },
    {
      "key": "setPiPEffect",
      "overwrite": {
        "syntax": "rendersetPiPEffect [effect, <number>, ..., optionalParamN]",
        "docSyntax": "name setPiPEffect [effect, optionalParam1, ..., optionalParamN]",
        "tags": "",
        "description": "Sets Render Target's visual effect (Picture-in-Picture). * 0: Normal - [0] * 1: Night Vision - [1] * 2: Thermal - [2] * 3: Color Correction - [3, enabled, brightness, contrast, offset, blend [r,g,b,a], lerp [r,g,b,a], rgb [r,g,b,a]] * 4: Mirror - [4] '<currently not working>' * 5: Chromatic Aberration - [5, enabled, powerx, powery, (bool) aspectCorrection] '<currently not working>' * 6: Film Grain - [6, enabled, intensity, sharpness, grainsize, intensityx1, intensityx2, (bool) monochromatic] '<currently not working>' * 7: Thermal Inverted [7] * 8: Green Thermal [8]",
        "example": "\"rendersurface\" setPiPEffect [0];",
        "params": "render <array> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setRotorBrakeRTD",
      "overwrite": {
        "syntax": "<object>setRotorBrakeRTD enable",
        "docSyntax": "helicopterRTD setRotorBrakeRTD enable",
        "tags": "",
        "description": "Toggles a helicopter's rotor brake. Featureafm",
        "example": "myHelicopterRTD setRotorBrakeRTD 1;",
        "params": "<object> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setStarterRTD",
      "overwrite": {
        "syntax": "<objectrtd>setStarterRTD [enable, engineIndex]",
        "docSyntax": "helicopterRTD setStarterRTD [enable, engineIndex]",
        "tags": "",
        "description": "Toggle the starter for the given helicopter engine(s) on or off. * engine index 0: engine #1 * engine index 1: engine #2 * engine index 2: engine #3 * engine index -1: all engines",
        "example": "vehicle player setStarterRTD [nowikitrue, -1];",
        "params": "<objectrtd> <boolean> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setThrottleRTD",
      "overwrite": {
        "syntax": "<objectrtd> setThrottleRTD [<number>, <number>]",
        "docSyntax": "helicopterRTD setThrottleRTD [value, engineIndex]",
        "tags": "",
        "description": "Set the throttle for the given engine(s) of a helicopter. * engine index 0: engine #1 * engine index 1: engine #2 * engine index 2: engine #3 * engine index -1: all engines * throttle 0: fully closed * throttle ~0.15: average flight idle * throttle 1: full",
        "example": "vehicle player setThrottleRTD [0.5, 1];",
        "params": "<objectrtd> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setWantedRPMRTD",
      "overwrite": {
        "syntax": "<objectrtd>setWantedRPMRTD [value, time, engineIndex]",
        "docSyntax": "helicopterRTD setWantedRPMRTD [value, time, engineIndex]",
        "tags": "",
        "description": "Tell the helicopter engine RPMs to reach the given value within a period of time. The simulation will try to reach the RPMs, but it does not guarantee it will reach the precise value! * engine index 0: engine #1 * engine index 1: engine #2 * engine index 2: engine #3 * engine index -1: all engines Featureafm",
        "example": "vehicle player setWantedRPMRTD [2500, 30, 0];",
        "params": "<objectrtd> <number> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setWingForceScaleRTD",
      "overwrite": {
        "syntax": "<objectrtd> setWingForceScaleRTD [<number>, <number>, <number>]",
        "docSyntax": "helicopterRTD setWingForceScaleRTD [leftHorizontal, rightHorizontal, vertical]",
        "tags": "",
        "description": "Set effectivity of wings. Featureafm",
        "example": "",
        "params": "<objectrtd> <number> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "stopEngineRTD",
      "overwrite": {
        "syntax": "stopEngineRTD <object>",
        "docSyntax": "stopEngineRTD heli",
        "tags": "",
        "description": "Instant engines stop. Featureafm",
        "example": "stopEngineRTD myHeli",
        "params": "<object>",
        "returns": "nothing"
      }
    },
    {
      "key": "systemOfUnits",
      "overwrite": {
        "syntax": "'systemOfUnits'",
        "docSyntax": "'systemOfUnits'",
        "tags": "",
        "description": "Returns the currently selected system of units. * 0: Metric * 1: Mixed (ground vehicles use Metric / air vehicles use Imperial) * 2: Imperial",
        "example": "_system = 'systemOfUnits';",
        "params": "",
        "returns": "number"
      }
    },
    {
      "key": "throttleRTD",
      "overwrite": {
        "syntax": "throttleRTD helicopterRTD",
        "docSyntax": "throttleRTD helicopterRTD",
        "tags": "",
        "description": "Return the current throttle level for all engines of a helicopter.",
        "example": "_throttleValues = throttleRTD vehicle player;",
        "params": "<objectrtd>",
        "returns": "array"
      }
    },
    {
      "key": "windRTD",
      "overwrite": {
        "syntax": "windRTD",
        "docSyntax": "windRTD",
        "tags": "",
        "description": "Returns wind strength and direction. Featureafm",
        "example": "_wind = windRTD;",
        "params": "",
        "returns": "array"
      }
    },
    {
      "key": "wingsForcesRTD",
      "overwrite": {
        "syntax": "wingsForcesRTD <object>",
        "docSyntax": "wingsForcesRTD RTD_helicopter",
        "tags": "",
        "description": "Featureafm Returns force produced by wings.",
        "example": "_wingForce = wingsForcesRTD _rtdHelo",
        "params": "<object>",
        "returns": "array"
      }
    }
  ],
  "1.01": [
    {
      "key": "assignAsCargoIndex",
      "overwrite": {
        "syntax": "<object> assignAsCargoIndex [<object>, <number>]",
        "docSyntax": "character assignAsCargoIndex [vehicle, index]",
        "tags": "",
        "description": "Assigns the character to a specific cargo / passenger index of the given vehicle. FeatureinformativeSee <AI Group Vehicle Management> for more information.",
        "example": "player assignAsCargoIndex [myHelicopter, 1];",
        "params": "<object> <object> <number>",
        "returns": "boolean"
      }
    },
    {
      "key": "enableCopilot",
      "overwrite": {
        "syntax": "<object> <boolean>Copilot enable",
        "docSyntax": "vehicle enableCopilot enable",
        "tags": "[AG] [EL]",
        "description": "Enables copilot actions, toggles availability of the actions related to copilots, such as taking over controls, suspending controls, etc. This command triggers the hl\"ControlsShifted\" event handler.",
        "example": "if (!isCopilotEnabled myHeli) then { myHeli enableCopilot true; };",
        "params": "<object> <boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "enableTraffic",
      "overwrite": {
        "syntax": "<boolean>Traffic enable",
        "docSyntax": "enableTraffic enable",
        "tags": "",
        "description": "Enable ambient traffic. Featurearma3This command does nothing in arma3.",
        "example": "enableTraffic true;",
        "params": "<boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "isPiPEnabled",
      "overwrite": {
        "syntax": "isPiPEnabled",
        "docSyntax": "isPiPEnabled",
        "tags": "",
        "description": "Returns whether Picture-In-Picture video option (Render to Texture) is enabled or not.",
        "example": "private _PiPState = isPiPEnabled;",
        "params": "",
        "returns": "boolean"
      }
    },
    {
      "key": "setTrafficDensity",
      "overwrite": {
        "syntax": "setTrafficDensity [<number>, <number>, <number>, <number>, <number>]",
        "docSyntax": "setTrafficDensity [density, xMin, xMax, zMin, zMax]",
        "tags": "",
        "description": "Set the density of ambient cars in a rectangle (in cars per kilometer). Featurearma3This command does nothing in arma3.",
        "example": "setTrafficDensity [40, 31000, 32000, 30000, 32000];",
        "params": "<number> <number> <number> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setTrafficDistance",
      "overwrite": {
        "syntax": "setTrafficDistance <number>",
        "docSyntax": "setTrafficDistance distance",
        "tags": "",
        "description": "Set maximum ambient traffic draw distance (in 2D). Featurearma3This command does nothing in arma3.",
        "example": "setTrafficDistance 1000;",
        "params": "<number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setTrafficGap",
      "overwrite": {
        "syntax": "setTrafficGap [<number>, <number>, <number>, <number>, <number>]",
        "docSyntax": "setTrafficGap [gap, xMin, xMax, zMin, zMax]",
        "tags": "",
        "description": "Set the average gap between ambient cars in a rectangle (in meters). Featurearma3This command does nothing in arma3.",
        "example": "setTrafficGap [50, 31000, 32500, 28000, 32000];",
        "params": "<number> <number> <number> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setTrafficSpeed",
      "overwrite": {
        "syntax": "setTrafficSpeed [<number>, <number>, <number>, <number>, <number>]",
        "docSyntax": "setTrafficSpeed [speed, xMin, xMax, zMin, zMax]",
        "tags": "",
        "description": "Set ambient traffic speed in a rectangle (in kilometers per hour). Featurearma3This command does nothing in arma3.",
        "example": "setTrafficSpeed [50, _xMin, _xMax, _zMin, _zMax];",
        "params": "<number> <number> <number> <number> <number>",
        "returns": "nothing"
      }
    }
  ]
}