{
  "docs": "https://community.bistudio.com/wiki/Category:Introduced_with_Operation_Flashpoint:_Elite",
  "1.00": [
    {
      "key": "actionKeys",
      "overwrite": {
        "syntax": "actionKeys <string>",
        "docSyntax": "actionKeys userAction",
        "tags": "",
        "description": "Returns dikCodes of keys, buttons and combos assigned to the given user action. Action names could be found in config class ControllerSchemes or user action names or user profile, for example: syntaxhighlight lang=\"cpp\" keyWatch[] = { 24 }; </syntaxhighlight> To retrieve the value, use the property name without 'key': codeactionKeys \"Watch\"; cc24</code> In addition, some of the actions are also listed in here: <inputAction/actions>",
        "example": "_array = actionKeys \"ReloadMagazine\"",
        "params": "<string>",
        "returns": "array | number"
      }
    },
    {
      "key": "actionKeysImages",
      "overwrite": {
        "syntax": "actionKeysImages <string>",
        "docSyntax": "actionKeysImages userAction",
        "tags": "",
        "description": "Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes or user action names.",
        "example": "_text = actionKeysImages \"ReloadMagazine\"",
        "params": "<string> <string> <number>",
        "returns": "<structured text>"
      }
    },
    {
      "key": "actionKeysNames",
      "overwrite": {
        "syntax": "actionKeysNames <string>",
        "docSyntax": "actionKeysNames userAction",
        "tags": "",
        "description": "Returns a list of button names assigned to the given user action. Action names can be found in config class hlControllerSchemes or user action names.",
        "example": "_list = actionKeysNames \"ReloadMagazine\"; cc\"R\"",
        "params": "<string> <string> <number> <string>",
        "returns": "string"
      }
    },
    {
      "key": "activateAddons",
      "overwrite": {
        "syntax": "activateAddons <array>",
        "docSyntax": "activateAddons [addon1, ...]",
        "tags": "",
        "description": "Activates the listed addons. The list of active addons is initialized during this function.",
        "example": "activateAddons [\"BISOFP\"];",
        "params": "<array>",
        "returns": "nothing"
      }
    },
    {
      "key": "activateKey",
      "overwrite": {
        "syntax": "activateKey <string>",
        "docSyntax": "activateKey keyname",
        "tags": "",
        "description": "Activates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the description.ext file of the missions.",
        "example": "activateKey \"Mission04Key\";",
        "params": "<string>",
        "returns": "nothing"
      }
    },
    {
      "key": "addLiveStats",
      "overwrite": {
        "syntax": "<object> addLiveStats <number>",
        "docSyntax": "unit addLiveStats score",
        "tags": "",
        "description": "Adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle).",
        "example": "player addLiveStats 10;",
        "params": "<object> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "addWaypoint",
      "overwrite": {
        "syntax": "<group> addWaypoint [<positionagl>, <number>, index, name]",
        "docSyntax": "groupName addWaypoint [center, radius, index, name]",
        "tags": "[AG] [EG]",
        "description": "Adds (or inserts when index is given) a new waypoint to a group. The waypoint is placed randomly within a circle with the given center and radius. The function returns a waypoint with format [group, index].brbr Feature Informative Prior to arma3 v1.90, if you need exact waypoint placement, use setWaypointPosition",
        "example": "_wp = _grp addWaypoint [nowikiposition player, 0];",
        "params": "<group> <positionagl> <number> <number> <string>",
        "returns": "array | waypoint | group"
      }
    },
    {
      "key": "assignedTarget",
      "overwrite": {
        "syntax": "assignedTarget <object>",
        "docSyntax": "assignedTarget vehicleName",
        "tags": "[AL]",
        "description": "Returns the target assigned to an unit or the vehicle's quick command menu or \"target\" complex command menu).br To unassign the target use \"target\" complex command menu. Feature Informative * This command does not return the target a unit is actually engaging (\"attack unit\"). For this information, see getAttackTarget. * If a player is inside a vehicle as the effectiveCommander, the vehicle's crew assignedTarget will always be objNull.",
        "example": "_target = assignedTarget _T72",
        "params": "<object>",
        "returns": "object"
      }
    },
    {
      "key": "assignTeam",
      "overwrite": {
        "syntax": "<object> assignTeam <string>",
        "docSyntax": "unit assignTeam team",
        "tags": "[AG] [EG]",
        "description": "Assigns the unit (in case of a vehicle, its commander) to the given team. Team is an option in group control (unit management) menu that allows to split player group in teams and then give bulk order to separate teams. In order to operate properly, the command requires specific conditions: * The command requires player to be fully initialised * The unit getting assigned must be either player himself or a unit in player's group * Units in player's group as well as player himself can all have different teams assigned * The colour of the assigned team for a unit is seen on the group management UI as well as squad radar The possible team values (colours) are: * \"MAIN\" - (white) * \"RED\" - (red) * \"GREEN\" - (green) * \"BLUE\" - (blue) * \"YELLOW\" - (yellow) 'NOTE': In older version of the game the effect of this command is local IconlocalEffect32",
        "example": "_soldier2 assignTeam \"RED\";",
        "params": "<object> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "attackEnabled",
      "overwrite": {
        "syntax": "attackEnabled <object>",
        "docSyntax": "attackEnabled name",
        "tags": "[AG]",
        "description": "Return whether a group's leader can issue attack commands to soldiers under his command.",
        "example": "if (not 'attackEnabled' _soldier) then {_soldier setCombatMode \"Careless\"}",
        "params": "<object>",
        "returns": "boolean"
      }
    },
    {
      "key": "camSetFocus",
      "overwrite": {
        "syntax": "<object> camSetFocus <array>",
        "docSyntax": "camera camSetFocus focusRange",
        "tags": "",
        "description": "Sets camera focus range in format [distance, blur]. blur param - sets the camera focus blur. It does not automatically commit changes (see camCommit). Use [-1, -1] to disable focus completely.",
        "example": "_camera camSetFocus [50, 1];",
        "params": "<object> <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "camUseNVG",
      "overwrite": {
        "syntax": "camUseNVG <boolean>",
        "docSyntax": "camUseNVG set",
        "tags": "",
        "description": "Set / clear using of night vision during cutscenes. This command only works with camCreate created camera that is currently the main camera for the player (see example).",
        "example": "camUseNVG true;",
        "params": "<boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "clearRadio",
      "overwrite": {
        "syntax": "clearRadio",
        "docSyntax": "clearRadio",
        "tags": "[EL]",
        "description": "Clean up the content of radio protocol history.",
        "example": "clearRadio;",
        "params": "",
        "returns": "nothing"
      }
    },
    {
      "key": "commandGetOut",
      "overwrite": {
        "syntax": "commandGetOut <object>",
        "docSyntax": "commandGetOut unit(s)",
        "tags": "[AL] [EG]",
        "description": "Orders one or multiple units to get out from the vehicle (via the radio). Same as action \"Eject\" and action \"Eject\" and action \"Eject\") - unlike action \"Eject\") - unlike action \"Eject\" (one after another) or unconscious units - unless the AI is under player command. Unlike action \"Eject\" (but one after another)",
        "example": "commandGetOut _unitOne",
        "params": "<object>",
        "returns": "nothing"
      }
    },
    {
      "key": "composeText",
      "overwrite": {
        "syntax": "composeText <array>",
        "docSyntax": "composeText [argument1, argument2, ...]",
        "tags": "",
        "description": "Creates a structured or plain text arguments.",
        "example": "hint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];",
        "params": "<array> <string>",
        "returns": "<structured text>"
      }
    },
    {
      "key": "createCenter",
      "overwrite": {
        "syntax": "createCenter <side>",
        "docSyntax": "createCenter side",
        "tags": "[EG]",
        "description": "Instanciate a create groups of this side.br Centers can only be created for sides.br Created sides must have their \"side-friendship\" defined with setFriend. Feature Informative In arma1 and arma2, only <Mission.sqm>'s units side centers are created; e.g if no resistance unit has been placed in the editor you must use createCenter before being able to create a resistance group. Feature arma3 In Arma 3, centers for all sides are all created by the engine.",
        "example": "createCenter east;",
        "params": "<side>",
        "returns": "side"
      }
    },
    {
      "key": "createGroup",
      "overwrite": {
        "syntax": "createGroup <<side>>",
        "docSyntax": "createGroup side",
        "tags": "[EG]",
        "description": "Creates a new center must exist before group creation (either by having editor-placed units or createCenter usage). Featurearma3 * createCenter usage is not needed anymore as all centers are automatically created. * When the last unit leaves its group, the group usually gets immediately auto-deleted, regardless of its auto-deletion setting.",
        "example": "private _group = createGroup east;",
        "params": "<side> <side> delete",
        "returns": "group | grpnull"
      }
    },
    {
      "key": "createGuardedPoint",
      "overwrite": {
        "syntax": "createGuardedPoint [<side>, <position>, <number>, <object>]",
        "docSyntax": "createGuardedPoint [side, position, objectMapID, vehicle]",
        "tags": "",
        "description": "Adds a point guarded by the given side (scripted way of adding equivalent of \"GUARDED BY\" trigger in Editor). A closest AI group in the given side with assigned \"GUARD\" waypoint will attempt to secure this guard point. The actual guarded position is determined via the following rules: * Given \"position\" is always considered. It could be waypoint. How does \"GUARD\" waypoint work: <Waypoint:Guard>",
        "example": "createGuardedPoint [nowikieast, [0,0], -1, vehicle player];",
        "params": "<array> <side> <position> <number> <object>",
        "returns": "nothing"
      }
    },
    {
      "key": "createMine",
      "overwrite": {
        "syntax": "createMine <array>",
        "docSyntax": "createMine [type, position, markers, placement]",
        "tags": "",
        "description": "Creates a mine of the given type (type is the name of the subclass of hlCfgVehicles). If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The mine is placed inside a circle with this position as its center and placement as its radius. Feature Informative The command creates object of the hlCfgAmmo class named in hlconfigFile >> \"CfgVehicles\" >> type >> \"ammo\". The following explosives used in Arma 3 could be created with this command: * Mines: hl\"ATMine\", hl\"APERSMine\", hl\"APERSBoundingMine\", hl\"SLAMDirectionalMine\", hl\"APERSTripMine\", hl\"UnderwaterMine\", hl\"UnderwaterMineAB\", hl\"UnderwaterMinePDM\" * Remote detonation charges: hl\"SatchelCharge_F\", hl\"DemoCharge_F\", hl\"Claymore_F\", hl\"IEDUrbanBig_F\", hl\"IEDLandBig_F\", hl\"IEDUrbanSmall_F\", hl\"IEDLandSmall_F\"",
        "example": "_mine = createMine [\"APERSMine\", position player, [], 0];",
        "params": "<array> <string> <positionagl> <array> <number>",
        "returns": "object"
      }
    },
    {
      "key": "createSoundSource",
      "overwrite": {
        "syntax": "createSoundSource <array>",
        "docSyntax": "createSoundSource [type, position, markers, placement]",
        "tags": "[AG] [EG]",
        "description": "Creates a sound source of the given type (type is the name of the subclass of CfgVehicles which is pointing to the sound defined in description.ext. Here is an example of suitable mission config definition: syntaxhighlight lang=php // description.ext class CfgSFX { class MyOwl { sound0[] = {\"@A3\\Sounds_F\\environment\\animals\\birds\\owl1\", db-10, 1.0, 1000, 0.2, 0, 15, 30}; // path to addon sound sound1[] = {\"@A3\\Sounds_F\\environment\\animals\\birds\\owl2\", db-10, 1.0, 1000, 0.2, 0, 15, 30}; // path to addon sound sound2[] = {\"@A3\\Sounds_F\\environment\\animals\\birds\\owl3\", db-10, 1.0, 1000, 0.2, 0, 15, 30}; // path to addon sound sounds[] = {sound0, sound1, sound2}; empty[] = {\"\", 0, 0, 0, 0, 0, 0, 0}; }; }; class CfgVehicles { class MyOwlSound // class name to be used with createSoundSource { sound = \"MyOwl\"; // reference to CfgSFX class }; }; </syntaxhighlight> code_owl nowiki=</nowiki> createSoundSource [\"MyOwlSound\", position player, [], 0];</code> Note that the sound created by createSoundSource will always be looping. Also when CfgSFX sound definition contains more than 1 sound, there is no guarantee that the sound played will be the same on every PC in Multiplayer. Featureimportant For some unknown reason if at the moment of command execution the player is in first person view and is inside a vehicle, the sound created is greatly attenuated",
        "example": "_soundSource = createSoundSource [\"LittleDog\", position player, [], 0]",
        "params": "<array> <string> <positionagl> <array> <number>",
        "returns": "object"
      }
    },
    {
      "key": "createTrigger",
      "overwrite": {
        "syntax": "createTrigger <array>",
        "docSyntax": "createTrigger [type, position, makeGlobal]",
        "tags": "",
        "description": "Creates a 'objects', commands such as getPosASL, setPosASL, deleteVehicle, etc. work on them. Feature Informative Since arma3 v1.54 triggers can be disabled/enabled using enableSimulation command. Triggers are created with default parameters: Columns4 * hla: 50 * hlb: 50 * hlc: -1 * hlangle: 0 * hlrectangular: false * hlactivationBy: None * hlactivationType: Present * hlrepeating: false * hltimeoutMin: 0 * hltimeoutMid: 0 * hltimeoutMax: 0 * hlinterruptable: true * hltype: None * hltext: \"\" * hlname: \"\" * hlexpCond: \"this\" * hlexpActiv: \"\" * hlexpDesactiv: \"\" * GVIarma31.98size=0.8 hlinterval: 0.5",
        "example": "_trg = createTrigger [\"EmptyDetector\", getPos player]; _trg setTriggerArea [5, 5, 0, false]; _trg setTriggerActivation [\"CIV\", \"PRESENT\", true]; _trg setTriggerStatements [\"this\", \"hint 'Civilian near player'\", \"hint 'no civilian near'\"];",
        "params": "<array> <string> <position2d> <boolean>",
        "returns": "object"
      }
    },
    {
      "key": "deleteGroup",
      "overwrite": {
        "syntax": "deleteGroup <group>",
        "docSyntax": "deleteGroup group",
        "tags": "[AL] [EG]",
        "description": "Destroys the given group. uGroup must be empty and local to the machine executing command</u>. brbr Feature Informative In Arma 3 you can find out locality of the group with auto deleted. Manually deleting all units from a group however, does not auto delete the empty group. To force the group to get auto-deleted when empty use deleteGroupWhenEmpty",
        "example": "'deleteGroup' _groupname;",
        "params": "<group>",
        "returns": "nothing"
      }
    },
    {
      "key": "deleteMarker",
      "overwrite": {
        "syntax": "deleteMarker <string>",
        "docSyntax": "deleteMarker name",
        "tags": "",
        "description": "Destroys the given marker.",
        "example": "deleteMarker \"Marker1\"",
        "params": "<string>",
        "returns": "nothing"
      }
    },
    {
      "key": "deleteWaypoint",
      "overwrite": {
        "syntax": "deleteWaypoint <array>",
        "docSyntax": "deleteWaypoint [group, index]",
        "tags": "[AG] [EG]",
        "description": "Removes the specified waypoint. Feature Informative * When a waypoint is deleted, all other current waypoint will ''not'' stop the group on its tracks.",
        "example": "deleteWaypoint [_grp, 2];",
        "params": "<array> <group> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "dissolveTeam",
      "overwrite": {
        "syntax": "dissolveTeam <string>",
        "docSyntax": "dissolveTeam teamColor",
        "tags": "[AL]",
        "description": "Dissolves the given team. All members become members of the main team.",
        "example": "dissolveTeam \"RED\"",
        "params": "<string>",
        "returns": "nothing"
      }
    },
    {
      "key": "doGetOut",
      "overwrite": {
        "syntax": "doGetOut <object>",
        "docSyntax": "doGetOut units",
        "tags": "[AL] [EG]",
        "description": "Orders one or multiple units to get out from the vehicle (silently). Same as action \"Eject\" and action \"Eject\" and action \"Eject\") - unlike action \"Eject\") - unlike action \"Eject\" (one after another) or unconscious - unless the AI is under player command. Unlike action \"Eject\" (but one after another))",
        "example": "doGetOut _unitOne",
        "params": "<object>",
        "returns": "nothing"
      }
    },
    {
      "key": "enableAI",
      "overwrite": {
        "syntax": "<object> enableAI <string>",
        "docSyntax": "unit enableAI skilltype",
        "tags": "[AL] [EG]",
        "description": "Enables parts of the AI behavior that was disabled by disableAI. Feature important When player switches and leaves behind AI unit, you need to enable \"TeamSwitch\" AI on it hl_unit enableAI \"TeamSwitch\" so that the unit continues with waypoints Feature arma3 Since Arma 3 v1.96 it is possible to return the state of the given AI flag via checkAIFeature or set it using alias command enableAIFeature",
        "example": "_soldierOne enableAI \"Move\";",
        "params": "<object> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "find",
      "overwrite": {
        "syntax": "<array> find <anything>",
        "docSyntax": "array find element",
        "tags": "",
        "description": "Searches for an array element within array or a ANSI string within a ANSI string. Feature Arma3 If Unicode support is desired, see forceUnicode. Feature important Search is cASe-seNsItiVE!",
        "example": "[\"Apples\", \"Oranges\", \"Pears\"] find \"Oranges\"; ccreturns 1",
        "params": "<array> <anything> <string> <string> <string> <string> <number>",
        "returns": "number"
      }
    },
    {
      "key": "finishMissionInit",
      "overwrite": {
        "syntax": "'finishMissionInit'",
        "docSyntax": "'finishMissionInit'",
        "tags": "",
        "description": "Finish world initialization before mission is launched.",
        "example": "finishMissionInit",
        "params": "",
        "returns": "nothing"
      }
    },
    {
      "key": "getPosASL",
      "overwrite": {
        "syntax": "getPosASL <object>",
        "docSyntax": "getPosASL object",
        "tags": "[AG]",
        "description": "Returns the object position height above sea level.",
        "example": "_AslPos = getPosASL player;",
        "params": "<object>",
        "returns": "array | positionasl"
      }
    },
    {
      "key": "glanceAt",
      "overwrite": {
        "syntax": "<object> glanceAt <object>",
        "docSyntax": "unit(s) glanceAt position",
        "tags": "",
        "description": "Control what the unit(s) is/are glancing at (target or Position). If target is used, it will get revealed fully. How frequently the unit(s) is/are glancing there depends on behaviour.",
        "example": "_someSoldier glanceAt _otherSoldier",
        "params": "<object> <object>",
        "returns": "nothing"
      }
    },
    {
      "key": "isKeyActive",
      "overwrite": {
        "syntax": "isKeyActive <string>",
        "docSyntax": "isKeyActive keyName",
        "tags": "",
        "description": "Checks whether the given key is active in the current user profile. See keys, keysLimit and doneKeys in the description.ext file of the missions.",
        "example": "_active = isKeyActive \"Mission04Key\";",
        "params": "<string>",
        "returns": "boolean"
      }
    },
    {
      "key": "isKindOf",
      "overwrite": {
        "syntax": "<object> isKindOf <string>",
        "docSyntax": "object isKindOf typeName",
        "tags": "",
        "description": "Checks whether the object is (a subtype) of the given type. While main and alternative syntaxes support only 'CfgVehicles', 'CfgAmmo' and 'CfgNonAIVehicles', alternative syntax 2 allows to specify any config, including mission config.",
        "example": "vehicle player isKindOf \"Tank\";",
        "params": "<object> <string> <string> <string> <string> <string> <config>",
        "returns": "boolean"
      }
    },
    {
      "key": "keyImage",
      "overwrite": {
        "syntax": "keyImage <number>",
        "docSyntax": "keyImage dikCode",
        "tags": "",
        "description": "Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code.",
        "example": "_name = keyImage 28; ccresult is \"Enter\"",
        "params": "<number>",
        "returns": "<structured text>"
      }
    },
    {
      "key": "keyName",
      "overwrite": {
        "syntax": "keyName <number>",
        "docSyntax": "keyName dikCode",
        "tags": "",
        "description": "Returns the name of a button (on the keyboard, mouse or joystick) with the given code.",
        "example": "_name = keyName 28; ccresult is \"Enter\"",
        "params": "<number>",
        "returns": "string"
      }
    },
    {
      "key": "lightAttachObject",
      "overwrite": {
        "syntax": "<<object>> lightAttachObject <array>",
        "docSyntax": "light lightAttachObject [object, position]",
        "tags": "[AG] [EL]",
        "description": "Attach light to given object at given position on object.",
        "example": "myLight lightAttachObject [myVehicle, [-0.5,-0.25,1]];",
        "params": "<object> <array> <object> <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "lightDetachObject",
      "overwrite": {
        "syntax": "<object>DetachObject light",
        "docSyntax": "lightDetachObject light",
        "tags": "",
        "description": "Detach light from object.",
        "example": "lightDetachObject _light",
        "params": "<object>",
        "returns": "nothing"
      }
    },
    {
      "key": "lineBreak",
      "overwrite": {
        "syntax": "lineBreak",
        "docSyntax": "lineBreak",
        "tags": "",
        "description": "Creates a structured text containing a line break.",
        "example": "hint composeText [\"First line\", lineBreak, \"Second line\"];",
        "params": "",
        "returns": "<structured text>"
      }
    },
    {
      "key": "lookAt",
      "overwrite": {
        "syntax": "<object> lookAt <object>",
        "docSyntax": "unit(s) lookAt position",
        "tags": "",
        "description": "Control what the unit(s) is/are looking at (target or Position). If target is used, it will get revealed fully.",
        "example": "_someSoldier lookAt _otherSoldier",
        "params": "<object> <object>",
        "returns": "nothing"
      }
    },
    {
      "key": "moveToCompleted",
      "overwrite": {
        "syntax": "moveToCompleted <object>",
        "docSyntax": "moveToCompleted person",
        "tags": "",
        "description": "Check if latest low level moveTo command is finished.",
        "example": "_isCompleted = moveToCompleted _unit;",
        "params": "<object>",
        "returns": "boolean"
      }
    },
    {
      "key": "onPlayerConnected",
      "overwrite": {
        "syntax": "onPlayerConnected jip",
        "docSyntax": "onPlayerConnected code",
        "tags": "[SE]",
        "description": "This command will execute the provided code on the server whenever a player connects to a multiplayer session. Feature arma3 Since arma3 v1.57 a stackable MissionEventHandler is available and should be used: PlayerConnected.brBefore that, the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead in order to keep compatibility between official and community content.",
        "example": "onPlayerConnected \"[_id, _name] execVM 'PlayerConnected.sqf';\";",
        "params": "jip",
        "returns": "nothing"
      }
    },
    {
      "key": "parseText",
      "overwrite": {
        "syntax": "parseText <string>",
        "docSyntax": "parseText text",
        "tags": "",
        "description": "Creates a structured text by parsing the given XML description. Do not use parseText when displaying a localized text from <Stringtable.xml>.br A detailed explanation of all formatting possibilities can be found at <Structured Text>.",
        "example": "private _Stxt = parseText \"First line<img image='data\\isniper.paa'/>nowiki<br/></nowiki>Second line\";",
        "params": "<string>",
        "returns": "<structured text>"
      }
    },
    {
      "key": "playMission",
      "overwrite": {
        "syntax": "playMission [<string>, <string>, skipBriefing]",
        "docSyntax": "playMission [campaign, mission, skipBriefing]",
        "tags": "",
        "description": "The mission is launched (from the main menu). Both campaign and mission are given as their directory name. If the campaign is empty, a single mission is launched. If skipBriefing is true, the intro and briefing are skipped.",
        "example": "'playMission' [\"XOutrage\",\"x05Negotiator.Noe\"];",
        "params": "<string> <string> <boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "preloadCamera",
      "overwrite": {
        "syntax": "preloadCamera <array>",
        "docSyntax": "preloadCamera position",
        "tags": "",
        "description": "Preload all textures and models around given Position to avoid visual artifacts after camera is moved. Should be used before any abrupt camera change/cut. Returns true once all data is ready. See camPreload for alternative, more flexible camera preloading.",
        "example": "waitUntil {preloadCamera markerPos \"cam_location_2\"};",
        "params": "<array>",
        "returns": "boolean"
      }
    },
    {
      "key": "preloadObject",
      "overwrite": {
        "syntax": "<number> preloadObject object",
        "docSyntax": "distance preloadObject object",
        "tags": "",
        "description": "Preloads all textures, materials and proxies needed to render given object. Works with objects and classnames - note that classnames require an object instance in the mission.",
        "example": "[] spawn { waitUntil { 10 preloadObject \"SoldierW\" }; hint \"Preload finished\"; };",
        "params": "<number> <object>",
        "returns": "boolean | true"
      }
    },
    {
      "key": "preloadSound",
      "overwrite": {
        "syntax": "preloadSound <string>",
        "docSyntax": "preloadSound soundName",
        "tags": "",
        "description": "Makes sure that a sound can start playing without any delay once it is needed. Command works in Arma 3, but might not be implemented in earlier Arma installments.",
        "example": "{ waitUntil {preloadSound _x}; } forEach getArray (missionConfigFile >> \"CfgSounds\" >> \"sounds\");",
        "params": "<string>",
        "returns": "boolean"
      }
    },
    {
      "key": "preloadTitleObj",
      "overwrite": {
        "syntax": "preloadTitleObj <array>",
        "docSyntax": "preloadTitleObj [name, type, speed, showInMap]",
        "tags": "",
        "description": "Preloads data for the given resource object.",
        "example": "_ok = preloadTitleObj [\"BISLogo\", \"PLAIN\"]",
        "params": "<array> <string> <string> <number> <boolean>",
        "returns": "boolean"
      }
    },
    {
      "key": "preloadTitleRsc",
      "overwrite": {
        "syntax": "preloadTitleRsc [<string>, <string>, <number>, <boolean>]",
        "docSyntax": "preloadTitleRsc [name, type, speed, showInMap]",
        "tags": "",
        "description": "Resource title - preload data. The resource can be defined in the <Description.ext> file.",
        "example": "_ok = preloadTitleRsc [\"BIS\", \"PLAIN\"]",
        "params": "<string> <string> <number> <boolean>",
        "returns": "boolean"
      }
    },
    {
      "key": "preprocessFileLineNumbers",
      "overwrite": {
        "syntax": "preprocessFileLineNumbers <string>",
        "docSyntax": "preprocessFileLineNumbers fileName",
        "tags": "",
        "description": "Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using /* */ and with codes > 127, they might convert incorrectly",
        "example": "_string = preprocessFileLineNumbers \"A3\\ui_f\\scripts\\IGUI\\RscUnitInfo.sqf\"",
        "params": "<string>",
        "returns": "string"
      }
    },
    {
      "key": "processInitCommands",
      "overwrite": {
        "syntax": "processInitCommands",
        "docSyntax": "processInitCommands",
        "tags": "[EG]",
        "description": "Process statements stored using setVehicleInit. The statements will only be executed once even if processInitCommands is called multiple times. Featurearma3For security reasons, the command was disabled in Arma 3.br For remote execution, see <Arma 3: Remote Execution>, remoteExec and remoteExecCall.",
        "example": "processInitCommands;",
        "params": "",
        "returns": "nothing"
      }
    },
    {
      "key": "radioVolume",
      "overwrite": {
        "syntax": "radioVolume",
        "docSyntax": "radioVolume",
        "tags": "",
        "description": "Returns the current radio volume (set by fadeRadio).",
        "example": "hint str radioVolume;",
        "params": "",
        "returns": "number"
      }
    },
    {
      "key": "respawnVehicle",
      "overwrite": {
        "syntax": "<object> respawnVehicle [description, <number>]",
        "docSyntax": "vehicle respawnVehicle [delay, count]",
        "tags": "[AL] [EG]",
        "description": "Sets vehicle as respawnable in MP game. The vehicle will be spawned at the locality and coordinates it was prior to destruction. If respawn type is set to base respawn (type 3) and vehicle respawn marker is provided (respawn_vehicle_XXXSIDEXXX), vehicle will spawn on the marker.",
        "example": "car respawnVehicle [5, 3]; cc'car' will respawn at the predefined marker for the side after 5 seconds. The unit will respawn 3 times.",
        "params": "<object> description <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "runInitScript",
      "overwrite": {
        "syntax": "runInitScript",
        "docSyntax": "runInitScript",
        "tags": "[EL]",
        "description": "Fades in mission screen and re-executes hlinit.sqf and hlinit.sqs scripts. In <Eden Editor> the code inside the \"Init\" mission attribute is executed.",
        "example": "runInitScript;",
        "params": "",
        "returns": "nothing"
      }
    },
    {
      "key": "scriptDone",
      "overwrite": {
        "syntax": "scriptDone <script",
        "docSyntax": "scriptDone handle",
        "tags": "",
        "description": "Check if a script is finished running using the <Script Handle> returned by execVM or spawn.",
        "example": "@scriptDone _Handle",
        "params": "<script",
        "returns": "boolean"
      }
    },
    {
      "key": "selectLeader",
      "overwrite": {
        "syntax": "<group> selectLeader <object>",
        "docSyntax": "group selectLeader unitName",
        "tags": "[AL] [EG]",
        "description": "Select the group's leader. Group locality can be checked with local command and group ownership with groupOwner command. Feature important An invalid combination can be provided to this command, e.g ''unitName'' 'not' being part of ''group''. In that case: * ''unitName'' will be leader of ''group'', but will not be able to command them * if ''unitName'' is deleted or killed, leader of ''group'' will be objNull and will not automatically be reassigned.",
        "example": "group player selectLeader player;",
        "params": "<group> <object>",
        "returns": "nothing"
      }
    },
    {
      "key": "selectPlayer",
      "overwrite": {
        "syntax": "selectPlayer <object>",
        "docSyntax": "selectPlayer unitName",
        "tags": "[AL] [EG]",
        "description": "Move player into given unit. Some usage advices: * Try avoiding creatingUnit dynamically.Feature Informative Before arma3 it was possible to selectPlayer another player-controlled unit, leading to control issues. Feature Warning Creating and immediately selecting player into newly created unit could cause all sort of problems due to possible delay in unit initialization. Give unit some time to propagate properly on network before selecting player into it.",
        "example": "selectPlayer bob;",
        "params": "<object>",
        "returns": "nothing"
      }
    },
    {
      "key": "sendSimpleCommand",
      "overwrite": {
        "syntax": "<object> sendSimpleCommand <string>",
        "docSyntax": "vehicleName sendSimpleCommand command",
        "tags": "",
        "description": "Sends a simple command to the vehicle's driver / gunner (air vehicles ignore it). See also vehicleMoveInfo.Feature important Doesn't seem to work if AI driver is alone, needs another unit in the vehicle (could be another AI or player) that is set as setEffectiveCommander. If driver is effectiveCommander it will refuse any drive commands. Feature arma3 Due to some sort of a bug when vehicle is ordered turning (\"LEFT\" or \"RIGHT\"), it locks vehicle ability to respond to any other commands properly. Always use \"STOPTURNING\" to cancel turning before issuing other move commands br''Gunner commands'' * hl\"FIRE\" * hl\"CEASE FIRE\" * hl\"MANUAL FIRE\" * hl\"CANCEL MANUAL FIRE\" * hl\"KEY FIRE\" br''Driver move commands'' * hl\"FORWARD\" - move forward * hl\"FAST\" - move forward, fast * hl\"SLOW\" - move forward, slow * hl\"STOP\" - stop moving forward or backward * hl\"BACK\" - move backward * hl\"KEY UP\" * hl\"KEY DOWN\" * hl\"KEY FAST\" * hl\"KEY SLOW\" br''Driver turn commands'' * hl\"LEFT\" - turn left, while moving or not * hl\"RIGHT\" - turn right, while moving or not * GVIarma31.78size=0.8 hl\"STOPTURNING\" - cancel turning (special case, normally would be called by the engine when LEFT or RIGHT turn key is released by the player)",
        "example": "vehicle player sendSimpleCommand \"STOP\";",
        "params": "<object> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setAttributes",
      "overwrite": {
        "syntax": "<string> setAttributes <array>",
        "docSyntax": "text setAttributes [name1, value1, name2, value2, ...]",
        "tags": "",
        "description": "Returns a structured text and sets attributes to the given values.Feature important Even though command accepts plain String too, the argument should be <Structured Text> in order for the set attributes to have an effect. Additionally the result of the command should be fed to composeText (See Example 1) or formatText",
        "example": "_txt = text \"Red text, right align\"; _txt setAttributes [\"color\", \"#ff0000\", \"align\", \"right\"]; hint composeText [_txt];",
        "params": "<string> <array> <string> <string>",
        "returns": "<structured text>"
      }
    },
    {
      "key": "setCameraEffect",
      "overwrite": {
        "syntax": "<object> setCameraEffect [<string>, <string>]",
        "docSyntax": "triggerOrWaypoint setCameraEffect [type, position]",
        "tags": "",
        "description": "Applies an effect to the current camera of the player. Featurearma3This command is not present in arma3.",
        "example": "myTrigger setCameraEffect [\"ZoomIn\", \"FRONT\"];",
        "params": "<object> <string> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setCameraInterest",
      "overwrite": {
        "syntax": "<object> setCameraInterest <number>",
        "docSyntax": "entity setCameraInterest interest",
        "tags": "",
        "description": "Set camera interest for given entity. Camera interest is by default 0. Any unit which is speaking has its camera interest raised to 50. Camera interest is used to focus camera to control depth of field in cutscenes. Combination of camera interest, unit position of the screen, unit movement, unit type, and some other properties is used to determine which unit to focus at. Higher camera interest increases the chance of the unit being focused.",
        "example": "_soldier setCameraInterest 50;",
        "params": "<object> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setDate",
      "overwrite": {
        "syntax": "setDate <date>",
        "docSyntax": "setDate date",
        "tags": "[EL]",
        "description": "Sets mission date and time. Players joining after mission start will get the current server date including the year.",
        "example": "setDate [1986, 2, 25, 16, 0]; cc4:00pm February 25, 1986",
        "params": "<date>",
        "returns": "nothing"
      }
    },
    {
      "key": "setDestination",
      "overwrite": {
        "syntax": "<object> setDestination <array>",
        "docSyntax": "object setDestination [position, planningMode, forceReplan]",
        "tags": "[AL] [EG]",
        "description": "Set the destination for path planning of the pilot. Possible values for planningMode are: * \"DoNotPlan\" - used when not moving * \"DoNotPlanFormation\" - used in formation when simple path testing is used * \"LEADER PLANNED\" - used for formation leader (full path finding used) * \"LEADER DIRECT\" - used for DirectGo (like getin, supply) * \"FORMATION PLANNED\" - used in formation when full path finding is used * \"VEHICLE PLANNED\" - used for vehicle driver Works best when used on Event Handler",
        "example": "bob setDestination [nowikiscreenToWorld [0.5,0.5], \"LEADER PLANNED\", true]",
        "params": "<object> <array> <position> <string> <boolean>",
        "returns": "nothing"
      }
    },
    {
      "key": "setDropInterval",
      "overwrite": {
        "syntax": "<object> setDropInterval <number>",
        "docSyntax": "particleSource setDropInterval interval",
        "tags": "[AG] [EL]",
        "description": "Set interval of emitting particles from particle source. In Arma 3 hardcoded limit of how many particles can exist at the same time is ExternalLinklink= http://forums.bistudio.com/showthread.php?177797-Ruin-your-copy-of-Arma-and-your-PC#post2691090text= 18000. Correspondence between CfgCloudlets class param name and command param: codeparticleSource setDropInterval interval;</code>",
        "example": "_source setDropInterval 0.05;",
        "params": "<object> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setEffectCondition",
      "overwrite": {
        "syntax": "<object> setEffectCondition <string>",
        "docSyntax": "trigger setEffectCondition statement",
        "tags": "",
        "description": "The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result. *If the result is a boolean and array, the effect is launched if the result contains the player or the player vehicle.",
        "example": "_triggerObj setEffectCondition \"thisList\";",
        "params": "<object> <string> <waypoint> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setFormationTask",
      "overwrite": {
        "syntax": "<object> setFormationTask <string>",
        "docSyntax": "unit setFormationTask task",
        "tags": "",
        "description": "Set the current task of the formation member. Featurearma2This command is not available in arma2.",
        "example": "_unit setFormationTask \"MOVE\";",
        "params": "<object> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setFriend",
      "overwrite": {
        "syntax": "<side> setFriend [<side>, <number>]",
        "docSyntax": "side1 setFriend [side2, value]",
        "tags": "[SE] [EG]",
        "description": "Sets how friendly a side is with another. The friendliness is set for one side, not for the other. See also <Side relations>. Featurearma3Since arma3 this command can be used mid-mission. Before that it was intended to be used on mission start only, as changing value during mission could cause unexpected errors in AI behaviour (especially for groups already knowing about \"switched to enemy\" groups).",
        "example": "west setFriend [nowikiresistance, 0]; ccwest will not like resistance from now on",
        "params": "<side> <side> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setHideBehind",
      "overwrite": {
        "syntax": "<object> setHideBehind [<object>, <array>]",
        "docSyntax": "object setHideBehind [objectWhereHide, hidePosition]",
        "tags": "",
        "description": "Sets the data for hiding. objectWhereHide can be taken using findCover. hidePosition can be taken using getHideFrom. Command is not functional in Arma 2. FeatureWarning This command is not implemented!",
        "example": "-",
        "params": "<object> <object> <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "setLightAmbient",
      "overwrite": {
        "syntax": "<o<number>ject> setLi<number>htAmbient <a<number>ray>",
        "docSyntax": "light setLightAmbient [r, g, b]",
        "tags": "[AL] [EL]",
        "description": "Set ambient color of light. This includes surfaces that 'face away' from the light, unlike setLightColor.",
        "example": "myLight setLightAmbient [0.5,0,0]; ccproduces red light around the origin source",
        "params": "<object> <array> <number> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setLightColor",
      "overwrite": {
        "syntax": "<o<number>ject> setLi<number>htColo<number> <array>",
        "docSyntax": "light setLightColor [r, g, b]",
        "tags": "[AL] [EL]",
        "description": "Set diffuse color of light. Illuminates surfaces that are facing the light.",
        "example": "myLight setLightColor [0.5,0,0]; ccproduces red",
        "params": "<object> <array> <number> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setMarkerBrush",
      "overwrite": {
        "syntax": "<string> setMarkerBrush <string>",
        "docSyntax": "markerName setMarkerBrush brush",
        "tags": "[EG]",
        "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes. br br ''brush'' can be: * \"Solid\" * \"SolidFull\" (A3 only) * \"Horizontal\" * \"Vertical\" * \"Grid\" * \"FDiagonal\" * \"BDiagonal\" * \"DiagGrid\" * \"Cross\" * \"Border\" * \"SolidBorder\" FeatureInformative'Multiplayer optimisation:' Global marker commands always broadcast the ''entire'' marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
        "example": "\"Marker1\" setMarkerBrush \"DIAGGRID\";",
        "params": "<string> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setMarkerDir",
      "overwrite": {
        "syntax": "<string> setMarkerDir <number>",
        "docSyntax": "markerName setMarkerDir angle",
        "tags": "[EG]",
        "description": "Sets the orientation of the marker. Angle is in degrees. FeatureInformative'Multiplayer optimisation:' Global marker commands always broadcast the ''entire'' marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
        "example": "\"Marker1\" setMarkerDir 90;",
        "params": "<string> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setMarkerText",
      "overwrite": {
        "syntax": "<string> setMarkerText <string>",
        "docSyntax": "markerName setMarkerText text",
        "tags": "[EG]",
        "description": "Sets the text label of an existing marker. FeatureInformative'Multiplayer optimisation:' Global marker commands always broadcast the ''entire'' marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).",
        "example": "\"Marker1\" setMarkerText \"You are here.\";",
        "params": "<string> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setMusicEffect",
      "overwrite": {
        "syntax": "<object> setMusicEffect <string>",
        "docSyntax": "trigger setMusicEffect track",
        "tags": "",
        "description": "Defines a music track played on activation. If another track is playing already, this will stop it and start the new track. Track is a subclass name of CfgMusic. In addition, \"$STOP$\" (stops the current music track) or use hlplayMusic \"\". When used in a trigger, the track starts on activation but does not automatically stop on deactivation.",
        "example": "_trigger setMusicEffect \"Track1\";",
        "params": "<object> <string> <array> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setParticleRandom",
      "overwrite": {
        "syntax": "<object> setParticleRandom [<number>, <array>, <array>, <number>, <number>, color, <number>, <number>, <number>, <number>]",
        "docSyntax": "particleSource setParticleRandom [lifeTime, position, moveVelocity, rotationVelocity, size, color, directionPeriod, directionIntensity, angle, bounceOnSurface]",
        "tags": "[AG] [EL]",
        "description": "Sets randomization of particle source parameters. Correspondence between CfgCloudlets class param names and command array of params: codeparticleSource setParticleRandom [ lifeTimeVar, positionVar, moveVelocityVar, rotationVelocityVar, sizeVar, colorVar, randomDirectionPeriodVar, randomDirectionIntensityVar, angleVar, bounceOnSurfaceVar ];</code>",
        "example": "_particleSource setParticleRandom [0, [0.1, 0.1, 0.1], [0, 0, 0.5], 0, 0.1, [0, 0, 0, 0], 0, 0, 45, 0];",
        "params": "<object> <number> <array> <array> <number> <number> color <number> <number> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setPlayable",
      "overwrite": {
        "syntax": "setPlayable <object>",
        "docSyntax": "setPlayable unitName",
        "tags": "",
        "description": "Create MP role for the unit. The roles created this way are used for Join In Progress and <Team Switch>.",
        "example": "setPlayable _aPerson",
        "params": "<object>",
        "returns": "nothing"
      }
    },
    {
      "key": "setPosASL",
      "overwrite": {
        "syntax": "<object> setPosASL <array>",
        "docSyntax": "object setPosASL pos",
        "tags": "[AG] [EG]",
        "description": "Sets the object position above sea level. Given position must be in PositionASL format.",
        "example": "player setPosASL [nowikigetPosASL player select 0, (getPosASL player select 1) + 10, getPosASL player select 2];",
        "params": "<object> <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "setTargetAge",
      "overwrite": {
        "syntax": "<object> setTargetAge <string>",
        "docSyntax": "object setTargetAge age",
        "tags": "",
        "description": "Sets how the target is known to the other centers. They behave like the target was seen age seconds ago. Possible age values are: \"ACTUAL\", \"5 MIN\", \"10 MIN\", \"15 MIN\", \"30 MIN\", \"60 MIN\", \"120 MIN\" or \"UNKNOWN\".",
        "example": "player setTargetAge \"10 MIN\"",
        "params": "<object> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setTitleEffect",
      "overwrite": {
        "syntax": "<object> setTitleEffect <array>",
        "docSyntax": "trigger setTitleEffect [type, effect, text]",
        "tags": "",
        "description": "Defines the title effect to show on activation via [Type, Effect, Text] where 'Type' can be *\"NONE\" *\"OBJECT\" **'Text' defines the shown object , a subclass of CfgTitles (see cutObj) **'Effect' defines <Title Effect Type> *\"RES\" **'Text' defines a resource class, a subclass of RscTitles (see cutRsc) **'Effect' defines <Title Effect Type> *\"TEXT\" **'Text' defines text string to show (see cutText) **'Effect' defines <Title Effect Type> The title effect does not disappear on deactivation, this should be done manually if required.",
        "example": "_trigger setTitleEffect [\"TEXT\", \"PLAIN DOWN\", \"Hello world.\"]",
        "params": "<object> <array> <string> <string> <string> <array> <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "setTriggerArea",
      "overwrite": {
        "syntax": "<o<number>je<number>t> setTriggerAre<number> <array>",
        "docSyntax": "trigger setTriggerArea [a, b, angle, isRectangle, c]",
        "tags": "[AG] [EL]",
        "description": "thumb|300px|Trigger axis a, b and c (''half'' of their x, y and z dimensions) Defines the area monitored by the given trigger. The area could be either rectangular or elliptical. Feature Informative Just like with a and b dimensions, c dimension will alter area in opposite directions from the trigger position along z axis. Therefore if the trigger position is on the surface, half of the trigger area will be above the surface and half below. To place the whole area above the surface, adjust trigger position (move it up c meters). If c is not specified or &lt;= 0, the trigger's height is considered infinite like 2D triggers.",
        "example": "_trigger setTriggerArea [100, 50, 45, false];",
        "params": "<object> <array> <number> <number> <number> <boolean> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setUnitAbility",
      "overwrite": {
        "syntax": "<object> setUnitAbility <number>",
        "docSyntax": "unit setUnitAbility value",
        "tags": "",
        "description": "Sets skill of given unit. Unlike setSkill, setUnitAbility can set values > 1. Even though the skill command will correctly return set value, the actual unit ability will be capped to max available.",
        "example": "_unit setUnitAbility 1;",
        "params": "<object> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setUnitRank",
      "overwrite": {
        "syntax": "<object> setUnitRank <string>",
        "docSyntax": "unitName setUnitRank rank",
        "tags": "[AG] [EL]",
        "description": "Sets rank of given unit. Possible rank values, and the associated rating that is 'set' (not added, the value replaces previous rating) with it: {! class=\"wikitable\" style=\"text-align: center\" ! colspan=\"2\" ! Ranks ! PRIVATE ! CORPORAL ! SERGEANT ! LIEUTENANT ! CAPTAIN ! MAJOR ! COLONEL !- ! rowspan=\"3\" ! Ratings ! Namearma1shortbr Namearma2shortbr Namearma2oashortbr Nametkohshort ! 0 ! 500 ! 1500 ! 2500 ! 3500 ! 5000 ! 7500 !- ! Namearma3short (ca 2015) ! 0 ! 50 ! 150 ! 250 ! 350 ! 500 ! 750 !- ! Namearma3short ! 0 ! 0 ! 0 ! 0 ! 0 ! 0 ! 0 !} Featurearma3Since GVIarma31.68 this command is IconglobalArgument32 IconglobalEffect32",
        "example": "player setUnitRank \"COLONEL\";",
        "params": "<object> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setVectorDir",
      "overwrite": {
        "syntax": "<object> setVectorDir <array>",
        "docSyntax": "object setVectorDir [x,y,z]",
        "tags": "[AL] [EG]",
        "description": "Set object's direction vector. Up vector will remain unchanged.",
        "example": "player setVectorDir [5,6,1];",
        "params": "<object> <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "setVectorUp",
      "overwrite": {
        "syntax": "<object> setVectorUp vector",
        "docSyntax": "object setVectorUp vectorUp",
        "tags": "[AL] [EG]",
        "description": "Set object's up vector. Direction of the object remain unchanged. Default object's vectorUp is [0,0,1].",
        "example": "_obj setVectorUp [0,0,-1];",
        "params": "<object> vector",
        "returns": "nothing"
      }
    },
    {
      "key": "setVehicleArmor",
      "overwrite": {
        "syntax": "<object> setVehicleArmor <number>",
        "docSyntax": "vehicleName setVehicleArmor value",
        "tags": "[AL] [EG]",
        "description": "Sets the armor (or health for men) state of the vehicle (a value from 0 to 1). Works like setDamage, but the other way around: 1 is full health - see HashLink#Example 2.",
        "example": "player setVehicleArmor 0.5;",
        "params": "<object> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setVehicleId",
      "overwrite": {
        "syntax": "<object> setVehicleId <number>",
        "docSyntax": "vehicleName setVehicleId id",
        "tags": "",
        "description": "Sets ID to vehicle. By this ID vehicle is referenced by triggers and waypoints. Feature Warning This command is 'not' to be used.",
        "example": "player setVehicleId 1",
        "params": "<object> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setVehicleInit",
      "overwrite": {
        "syntax": "<object> setVehicleInit <string>",
        "docSyntax": "unitName setVehicleInit statement",
        "tags": "[EG]",
        "description": "Attach a statement to a unit. The statement is propagated over the network in MP games, it can be executed by invoking processInitCommands. Featurearma3For security reasons, the command was disabled in Arma 3. Use remoteExec for remote execution.",
        "example": "_soldier3 this allowFleeing 0\";",
        "params": "<object> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setVehicleLock",
      "overwrite": {
        "syntax": "<object> setVehicleLock <string>",
        "docSyntax": "vehicleName setVehicleLock lockState",
        "tags": "[AL] [EG]",
        "description": "Sets vehicle lock. Possible values: br * \"UNLOCKED\" * \"DEFAULT\" * \"LOCKED\" * \"LOCKEDPLAYER\"",
        "example": "_veh1 setVehicleLock \"LOCKED\";",
        "params": "<object> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setVehiclePosition",
      "overwrite": {
        "syntax": "<object> setVehiclePosition <array>",
        "docSyntax": "object setVehiclePosition [position, markers, placement, special]",
        "tags": "[AG] [EG]",
        "description": "Moves the object to a given position (same as createVehicle placement algorithm). Uses either the position that's defined by the ''position'' param, or one of the marker positions from the markers array. The object is placed inside a circle with ''position'' as its center and ''placement'' as its radius. The type of placement could also be controlled with ''special''. brbr If position is in water and vehicle can float, it is placed on water surface, otherwise it is placed on the ground, even if ground is under water. If roof surfaces support walking, units will be placed on roofs if such position is given.",
        "example": "player setVehiclePosition [nowiki[1000,2000], [\"Pos1\",\"Pos2\",\"Pos3\"], 0, \"CAN_COLLIDE\"];",
        "params": "<object> <array> <positionatl> <array> <number> <string>",
        "returns": "boolean | true | false"
      }
    },
    {
      "key": "setWaypointBehaviour",
      "overwrite": {
        "syntax": "<waypoint> setWaypointBehaviour <string>",
        "docSyntax": "waypoint setWaypointBehaviour mode",
        "tags": "[SE] [EG]",
        "description": "Switches the unit behaviour when the waypoint becomes active. br br Possible values are: * \"UNCHANGED\" * \"CARELESS\" * \"SAFE\" * \"AWARE\" * \"COMBAT\" * \"STEALTH\" See the AIBehaviour page for details of the effect of this command on AI units.",
        "example": "[_grp, 2] setWaypointBehaviour \"AWARE\";",
        "params": "<waypoint> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setWaypointDescription",
      "overwrite": {
        "syntax": "<array> setWaypointDescription <string>",
        "docSyntax": "waypoint setWaypointDescription text",
        "tags": "",
        "description": "Sets the description shown in the HUD while the waypoint is active.",
        "example": "[_grp, 2] setWaypointDescription \"Move here.\";",
        "params": "<array> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setWaypointFormation",
      "overwrite": {
        "syntax": "<array> setWaypointFormation <string>",
        "docSyntax": "waypoint setWaypointFormation formation",
        "tags": "[SE] [EG]",
        "description": "Switches the group formation when the waypoint becomes active. br br Possible values are: * \"NO CHANGE\" * \"COLUMN\" * \"STAG COLUMN\" * \"WEDGE\" * \"ECH LEFT\" * \"ECH RIGHT\" * \"VEE\" * \"LINE\" * \"FILE\" * \"DIAMOND\"",
        "example": "[_grp, 2] setWaypointFormation \"LINE\";",
        "params": "<array> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setWaypointHousePosition",
      "overwrite": {
        "syntax": "<array> setWaypointHousePosition <number>",
        "docSyntax": "waypoint setWaypointHousePosition pos",
        "tags": "",
        "description": "For waypoints attached to a house, this defines the target buildingPos index.",
        "example": "[_grp, 2] setWaypointHousePosition 1;",
        "params": "<array> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setWaypointPosition",
      "overwrite": {
        "syntax": "<array> setWaypointPosition <array>",
        "docSyntax": "waypoint setWaypointPosition [center, radius]",
        "tags": "",
        "description": "Attempts to move given waypoint to a random position inside a circle with the given center and radius. Feature Informative If you are looking for the command to set precise WP position, see setWPPosbr The waypoint will be placed similar to hl\"NONE\" attribute in setVehiclePosition, even if the radius is 0, which means it could still be off center. In order to force waypoint to the exact position, similar to hl\"CAN_COLLIDE\" attribute, use negative radius, like -1 for example. You will probably laugh at this, but be warned: Feature Warning When using negative radius, the center position supplied must be PositionASL, only then the resulting waypointPosition will be in format PositionAGL and not buried under the ground ¯\\_(ツ)_/¯",
        "example": "[_grp, 2] setWaypointPosition [nowikiposition player, 0];",
        "params": "<array> <array> <positionagl> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "setWaypointScript",
      "overwrite": {
        "syntax": "<array> setWaypointScript <string>",
        "docSyntax": "waypoint setWaypointScript command",
        "tags": "",
        "description": "Attaches a script to a scripted waypoint. In early versions of Arma, command consisted of a script name and additional script arguments and the script had to use SQS-Syntax. The script receives the following arguments in _this variable: [group, position, target] + [the optional passed arguments]. The optional arguments are appended to the end of the arguments array. Featurearma3In Arma 3, ''command'' argument can be a reference to .sqf script (it will have to explicitly end with '.sqf') or a reference to .sqs script.",
        "example": "[_grp, 2] setWaypointScript \"find.sqs player\";",
        "params": "<array> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setWaypointSpeed",
      "overwrite": {
        "syntax": "<array> setWaypointSpeed <string>",
        "docSyntax": "waypoint setWaypointSpeed mode",
        "tags": "[SE] [EG]",
        "description": "Switches the group speed mode when the waypoint becomes active. br br Possible values are: * \"UNCHANGED\" * \"LIMITED\" * \"NORMAL\" * \"FULL\"",
        "example": "[_grp, 2] setWaypointSpeed \"FULL\";",
        "params": "<array> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setWaypointStatements",
      "overwrite": {
        "syntax": "<array> setWaypointStatements <array>",
        "docSyntax": "waypoint setWaypointStatements [condition, statement]",
        "tags": "",
        "description": "The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed.br Within the Condition & Statement code string: * this refers to the group leader * thisList refers to the group's units Feature important The 'Condition' code is evaluated on the group owner's machine. When condition returns globally', a.k.a on every client! See Waypoints.",
        "example": "_waypoint setWaypointStatements [\"true\", \"hint 'hello'; hint 'goodbye'\"];",
        "params": "<array> <array> <string> <string>",
        "returns": "nothing"
      }
    },
    {
      "key": "setWaypointTimeout",
      "overwrite": {
        "syntax": "<array> setWaypointTimeout <array>",
        "docSyntax": "waypoint setWaypointTimeout [min, mid, max]",
        "tags": "",
        "description": "Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid).",
        "example": "[_grp, 2] setWaypointTimeout [5, 10, 6];",
        "params": "<array> <array> <number> <number> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "spawn",
      "overwrite": {
        "syntax": "<anything> spawn <code>",
        "docSyntax": "arguments spawn code",
        "tags": "",
        "description": "Adds given set of compiled instructions to the scheduler. Exactly when the code will be executed is unknown, it depends on how busy is the engine and how filled up is the scheduler. Therefore Script handle to the scheduler task. _this. Since Arma 3 v1.55 the script handle also exists inside the code in hl_thisScript variable. To see what spawned scripts are currently in the scheduler, use diag_activeSQFScripts command.FeatureWarning When multiple Code is spawned in an order, there is uno guarantee</u> that the spawned Code will also execute in the same order. If you need such guarantee, use BIS_fnc_spawnOrdered function",
        "example": "_handle = [] spawn {player globalChat \"Hello world!\"};",
        "params": "<anything> <code>",
        "returns": "scriptdone | isnull"
      }
    },
    {
      "key": "surfaceIsWater",
      "overwrite": {
        "syntax": "surfaceIsWater <array>",
        "docSyntax": "surfaceIsWater position",
        "tags": "",
        "description": "Returns whether there is water at given position. In Arma 3, it also detects pond objects, but only if they are loaded in memory (normally only true if the objects are within the object view distance)",
        "example": "_isWater= surfaceIsWater [1000, 3000];",
        "params": "<array>",
        "returns": "boolean"
      }
    },
    {
      "key": "surfaceType",
      "overwrite": {
        "syntax": "surfaceType <array>",
        "docSyntax": "surfaceType position",
        "tags": "",
        "description": "Returns what surface type is at the given position. For surface texture see surfaceTexture command.br br Feature Informative The command returns surface type of the ground, even underneath objects such as buildings and roads spoiler text=\"Show surface types (Armed Assault)\" * #GRASSSOUTH * #GRASSGENERAL * #SANDGENERAL </spoiler> spoiler text=\"Show surface types (Arma 2)\" * #UTGRASS - for natural surfaces * #UTCONCRETE - for urban surfaces </spoiler> spoiler text=\"Show surface types (Arma 3)\" {{Columns|4| * BuildingRubble * BuildingRubble_exp * cardboard * cardboard_exp * carpet * carpet_exp * carpet_inside * carpet_in_exp * concrete * concrete_exp * concrete_hall * concrete_hall_exp * concrete_inside * concrete_in_exp * concrete_out * Default * dirtrunway * floor * floor_exp * floor_inside * floor_in_exp * GdtAsphalt * GdtBeach * GdtCliff * GdtConcrete * GdtDead * GdtDesert * GdtDirt * GdtField * GdtForest * GdtForestMalden * GdtForestPine * GdtGrassDry * GdtGrassGreen * GdtGrassLong * GdtGrassShort * GdtGrassTall * GdtGrassWild * GdtKLCobblestone * GdtKLDirt * GdtKlField * GdtKLForestCon * GdtKLForestDec * GdtKLGrass1 * GdtKLGrass2 * GdtKlSoil * GdtKlStubble * GdtKlTarmac * GdtKlWeatheredTarmac * GdtMarsh * GdtMud * GdtRedDirt * GdtRock * GdtRubble * GdtSeabed * GdtSeabedExp * GdtSoil * GdtStony * GdtStonyThistle * GdtStratisBeach * GdtStratisConcrete * GdtStratisDirt * GdtStratisDryGrass * GdtStratisForestPine * GdtStratisGreenGrass * GdtStratisRocky * GdtStratisSeabed * GdtStratisSeabedCluttered * GdtStratisThistles * GdtThorn * GdtVolcano * GdtVolcanoBeach * GdtVRsurface01 * GdtWeed * GdtWildField * grid * grid_exp * lino * lino_exp * lino_in_exp * mat_in_exp * metalPlate * metalPlatePressed_exp * metalPlate_exp * metalPlate_in_exp * mud * mud_exp * parquet * planks * planks_exp * planks_inside * planks_in_exp * road * road_exp * roof_tiles_exp * rubble * rubble_exp * sand * sand_exp * softwood_in_exp * steel * steel_exp * stones * stones_exp * straw_exp * SurfIntConcrete * SurfIntMetal * SurfIntTiles * SurfIntWood * surfint_concrete * surfint_metal * surfint_tiles * surfint_wood * SurfMetal * SurfRoadConcrete * SurfRoadConcrete_exp * SurfRoadDirt * SurfRoadDirt_Enoch * SurfRoadDirt_exp * SurfRoadTarmac * SurfRoadTarmac1_Enoch * SurfRoadTarmac2_Enoch * SurfRoadTarmac3_Enoch * SurfRoadTarmac_exp * SurfRoofTiles * SurfRoofTin * SurfTrailDirt_Enoch * SurfTrailDirt_exp * SurfWater * SurfWood * surf_metal * surf_roadconcrete * surf_roaddirt * surf_roadtarmac * surf_rooftiles * surf_rooftin * surf_wood * TEST_SurfNormal * tiling * trash * trash_exp * Water * wavyMetal * wavyMetal_exp * woodenFloor }} </spoiler>",
        "example": "private _surface = surfaceType [4500, 4500];",
        "params": "<array>",
        "returns": "string"
      }
    },
    {
      "key": "synchronizeWaypoint",
      "overwrite": {
        "syntax": "<object> synchronizeWaypoint <array>",
        "docSyntax": "triggerOrWaypoint synchronizeWaypoint waypoints",
        "tags": "",
        "description": "Synchronizes the trigger or the waypoint with an array of waypoints.",
        "example": "_myTrigger synchronizeWaypoint [nowiki[_group2, 3]];",
        "params": "<object> <array>",
        "returns": "nothing"
      }
    },
    {
      "key": "terminate",
      "overwrite": {
        "syntax": "terminate <script",
        "docSyntax": "terminate scriptHandle",
        "tags": "",
        "description": "Terminates (aborts) scheduler",
        "example": "_script = [] execVM \"script.sqf\"; sleep 5; terminate _script;",
        "params": "<script",
        "returns": "nothing"
      }
    },
    {
      "key": "triggerAttachObject",
      "overwrite": {
        "syntax": "<object> triggerAttachObject <number>",
        "docSyntax": "triggerName triggerAttachObject objectId",
        "tags": "",
        "description": "Assigns a static object to the trigger. The activation source is changed to \"STATIC\".",
        "example": "_trigger triggerAttachObject 1234;",
        "params": "<object> <number>",
        "returns": "nothing"
      }
    },
    {
      "key": "unassignTeam",
      "overwrite": {
        "syntax": "unassignTeam <object>",
        "docSyntax": "unassignTeam vehicleName",
        "tags": "[AL]",
        "description": "Unassigns the unit (in the case of a vehicle its commander unit) from his team. This is equal to unit assignTeam \"MAIN\".",
        "example": "unassignTeam _soldier2",
        "params": "<object>",
        "returns": "nothing"
      }
    },
    {
      "key": "vectorDir",
      "overwrite": {
        "syntax": "vectorDir <object>",
        "docSyntax": "vectorDir object",
        "tags": "[AG]",
        "description": "Returns object direction vector in world space (hl[x,y,z]). FeatureimportantThe vector is 'not necessarily normalized'. The magnitude of the vector will be the same as the object scale. * A unit facing North would return hl[0,1,0] * A unit facing East would return hl[1,0,0] * A unit facing South would return hl[0,-1,0] * A unit facing West would return hl[-1,0,0]",
        "example": "_dirVector = vectorDir _unit;",
        "params": "<object>",
        "returns": "array | vector3d"
      }
    },
    {
      "key": "waypointAttachObject",
      "overwrite": {
        "syntax": "<array> <array>AttachObject <number>",
        "docSyntax": "waypoint waypointAttachObject objectID",
        "tags": "",
        "description": "Attaches a static object via it is numeric ID to the given waypoint. Featureimportant * The main syntax doesn't work in arma3 anymore. * The alternative syntax is (at least) available since arma2.",
        "example": "[_grp, 2] waypointAttachObject 1234;",
        "params": "<array> <number> <array> <object>",
        "returns": "nothing"
      }
    },
    {
      "key": "waypointAttachVehicle",
      "overwrite": {
        "syntax": "<waypoint> waypointAttachVehicle <object>",
        "docSyntax": "waypoint waypointAttachVehicle vehicleName",
        "tags": "",
        "description": "Attaches a vehicle Object to the given Waypoint. Feature important Use this command to associate a transport with hl\"GETIN\" waypoint, other types of waypoints might work or might not. If you have different type of waypoint to start with, make it a hl\"GETIN\" type with setWaypointType",
        "example": "[_grp, 2] waypointAttachVehicle vehicle player;",
        "params": "<waypoint> <object>",
        "returns": "nothing"
      }
    },
    {
      "key": "weaponDirection",
      "overwrite": {
        "syntax": "<object> weaponDirection <string>",
        "docSyntax": "vehicleName weaponDirection weaponName",
        "tags": "[AG]",
        "description": "Returns the direction that the vehicle weapon is aiming in. For addons the weapon name must be an entry in CfgWeapons. Feature Informative Turret and gun angle in degrees can also be obtained using animationSourcePhase or animationPhase commands.",
        "example": "_weaponVectorDir = player weaponDirection currentWeapon player;",
        "params": "<object> <string>",
        "returns": "array | vector3d"
      }
    }
  ]
}