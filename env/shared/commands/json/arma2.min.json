{"addEditorObject": {"version": "1.00", "tags": "", "description": "Add an object to the editor and assign arguments. Create script is,called with _new equal to true. Returns the ID of the new EditorObject.,Subtype class is optional.", "example": "-", "docSyntax": "map addEditorObject [type,[name1,value1,...],subtype class]", "syntax": "<objMap> addEditorObject [type,[name1,value1,...],subtype class]"}, "addGroupIcon": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Adds icon to a group leader. Returns icon ID, Control icons visibility with setGroupIconsVisible.", "example": "groupName addGroupIcon [\"b_inf\", [offsetX, offsetY]]", "docSyntax": "group addGroupIcon [iconClass, offset]", "syntax": "<objGroup> addGroupIcon [iconClass,offset]"}, "addLiveStats": {"version": "1.00", "tags": "", "description": "Adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle). (Also available in OFPE & VBS2)", "example": "player addLiveStats 10;", "docSyntax": "unit addLiveStats score", "syntax": "<objUnit> addLiveStats score"}, "addMenu": {"version": "1.00", "tags": "", "description": "Adds a new menu button. Priority is optional.", "example": "-", "docSyntax": "map addMenu [text,priority]", "syntax": "<objMap> addMenu [<string>,priority]"}, "addMenuItem": {"version": "1.00", "tags": "", "description": "Creates a new menu item. Menu can be \"file\" or \"view\",index is index,as returned from addMenu command. priority is optional and determines,where in the menu the item will reside (higher priority items first).", "example": "-", "docSyntax": "map addMenuItem [menu or index,text,command,priority]", "syntax": "<objMap> addMenuItem [menu or <scalar>,<string>,command,priority]"}, "addResources": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Adds resources to a team member.", "docSyntax": "teamMember addResources [resource1, resource2, ...]", "syntax": "teamMember addResources [resource1,resource2,...]"}, "addTeamMember": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Add given member to given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.", "example": "_team addTeamMember _teamMember;", "docSyntax": "team addTeamMember member", "syntax": "team addTeamMember <objUnit>"}, "agent": {"version": "1.00", "tags": "", "description": "Return a person for a given agent.", "example": "_obj = agent teamMember _unit;", "docSyntax": "agent teamMember", "syntax": "agent teamMember"}, "agents": {"version": "1.00", "tags": "", "description": "Return a list of agents in the current mission.", "example": "{agent _x moveTo position player} forEach agents;", "docSyntax": "agents", "syntax": "agents"}, "AISFinishHeal": {"version": "1.00", "tags": "", "description": "Alternative Injury Simulation (AIS) end state. Used to tell engine that script side healing is done when using \"HandleHeal\" event handler.", "example": "AISFinishHeal [_wounded, _medic, true];", "docSyntax": "AISFinishHeal [unit, healer, healercanheal]", "syntax": "AISFinishHeal [<objUnit>,healer,healercanheal]"}, "allGroups": {"version": "1.00", "tags": "", "description": "Return a list of all groups created on the following sides east, west, resistance/independent and civilian only. Does not contain groups of sideLogic.", "example": "{(leader _x) sideChat \"Go\u00a0! Go\u00a0! Go\u00a0!\"} forEach allGroups;", "docSyntax": "allGroups", "syntax": "allGroups"}, "allow3DMode": {"version": "1.00", "tags": "", "description": "Allow/dissallow 3D mode.,", "example": "-", "docSyntax": "map allow3DMode bool", "syntax": "<objMap> allow3DMode <bool>"}, "allowDamage": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Allow or prevent an object being damaged (or injured, or killed). The command does not prevent object from taking scripted damage such as setHit, setHitIndex, setHitPointDamage or setDamage. To check if damage is allowed at current locality, see isDamageAllowed.", "example": "player allowDamage false;", "docSyntax": "object allowDamage allow", "syntax": "<object> allowDamage allow"}, "allowFileOperations": {"version": "1.00", "tags": "", "description": "Allow/dissallow file ops (load/save etc).", "example": "-", "docSyntax": "map allowFileOperations bool", "syntax": "<objMap> allowFileOperations <bool>"}, "allUnits": {"version": "1.00", "tags": "", "description": "Return a list of all units (all persons except agents) outside and inside vehicles, created on the following sides east, west, resistance/independent and civilian only. Does not contain units of sideLogic. Dead units and units awaiting for respawn are also excluded.", "example": "{_x setDamage 0.5; _x groupChat \"Braaains\"} forEach allUnits;", "docSyntax": "allUnits", "syntax": "allUnits"}, "armoryPoints": {"version": "1.00", "tags": "", "description": "Returns, stored in [USERNAME].ArmaXProfile, value of armoryPoints entry. If the entry doesn't exist, it returns 0.", "example": "_points = armoryPoints;", "docSyntax": "armoryPoints", "syntax": "armoryPoints"}, "assignedCargo": {"version": "1.00", "tags": "", "description": "Returns the list of soldiers assigned to the given vehicle as a cargo.", "example": "_list = assignedCargo _vehicleName", "docSyntax": "assignedCargo vehicle", "syntax": "assignedCargo <objVehicle>"}, "assignedCommander": {"version": "1.00", "tags": "", "description": "Returns the soldier assigned to the given vehicle as a commander.", "example": "_commander = assignedCommander vehicleName", "docSyntax": "assignedCommander vehicle", "syntax": "assignedCommander <objVehicle>"}, "assignedDriver": {"version": "1.00", "tags": "", "description": "Returns the soldier assigned to the given vehicle as a driver.", "example": "_driver= assignedDriver vehicleName", "docSyntax": "assignedDriver vehicle", "syntax": "assignedDriver <objVehicle>"}, "assignedGunner": {"version": "1.00", "tags": "", "description": "Returns the soldier assigned to the given vehicle as a gunner.", "example": "_gunner = assignedGunner vehicle player;", "docSyntax": "assignedGunner vehicle", "syntax": "assignedGunner <objVehicle>"}, "attachTo": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Attaches an object to another object.", "example": "player attachTo [car, [0, 0, 1]];", "docSyntax": "object1 attachTo [object2, offset, memPoint, followBoneRotation]", "syntax": "object1 attachTo [object2,offset,memPoint,followBoneRotation]"}, "BIS_fnc_absSpeed": {"version": "1.00", "tags": "", "description": "Returns absolute speed of a vehicle in kilometers per hour (km/h)", "example": "if (((vehicle player) call BIS_fnc_absSpeed) > 150) then { hint \"There goes my driver's license\u00a0:(\"; };", "docSyntax": "Object call BIS_fnc_absSpeed;", "syntax": "<object> call BIS_fnc_absSpeed;"}, "BIS_fnc_addEvidence": {"version": "1.00", "tags": "", "description": "/******************************************************************************* * * version: 1.0 * name: Add evidence * description: add an evidence value to global campaign variable * paramater: evidence variable name (defined in init.sqf of campaign mission C1) or simply number (scalar) * return value: none *", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_areEqual": {"version": "1.00", "tags": "", "description": "This function returns true if all of the passed data elements are of the same type and value. One or more elements can be passed.", "example": "[0, \"0\"] call BIS_fnc_areEqual; // false [0, 1 + 1 - 2] call BIS_fnc_areEqual; // true [str 50, \"50\"] call BIS_fnc_areEqual; // true", "docSyntax": "[anything1, anything2, \u2026] call BIS_fnc_areEqual", "syntax": "[anything1,anything2,\u2026] call BIS_fnc_areEqual"}, "BIS_fnc_arithmeticMean": {"version": "1.00", "tags": "", "description": "Returns the arithmetic mean of an array of numbers.", "example": "[1,3] call BIS_fnc_arithmeticMean;//Returns 2", "docSyntax": "array call BIS_fnc_arithmeticMean", "syntax": "<array> call BIS_fnc_arithmeticMean"}, "BIS_fnc_arrayCompare": {"version": "1.00", "tags": "", "description": "This function checks if two arrays are containing the same elements in the same order.", "example": "_array1 = [0,1,2]; _array2 = [0,1,2]; [_array1, _array2] call BIS_fnc_arrayCompare; // returns true", "docSyntax": "[array1, array2] call BIS_fnc_arrayCompare", "syntax": "[array1,array2] call BIS_fnc_arrayCompare"}, "BIS_fnc_arrayFindDeep": {"version": "1.00", "tags": "", "description": "Searches an array for a specific value and returns its index.", "example": "[ [1,2,3,4,5], 3 ] call BIS_fnc_arrayFindDeep;//Returns [2]", "docSyntax": "[array,value] call BIS_fnc_arrayFindDeep", "syntax": "[<array>,<scalar>] call BIS_fnc_arrayFindDeep"}, "BIS_fnc_arrayInsert": {"version": "1.00", "tags": "", "description": "Inserts the elements of one array into another, at a specified index. Neither arrays are touched by reference, a new array is returned.", "example": "_result = [[0,1,2,3,4], [\"a\",\"b\",\"c\"], 1] call BIS_fnc_arrayInsert; // returns [0,\"a\",\"b\",\"c\",1,2,3,4]", "docSyntax": "[array1, array2, index] call BIS_fnc_arrayInsert", "syntax": "[array1,array2,<scalar>] call BIS_fnc_arrayInsert"}, "BIS_fnc_arrayPop": {"version": "1.00", "tags": "", "description": "This function removes the last (rightmost) element of an array and returns it.", "example": "_array = [1,2,3,4]; _removedElement = _array call BIS_fnc_arrayPop; // _array is now [1,2,3] and _removedElement = 4", "docSyntax": "array call BIS_fnc_arrayPop", "syntax": "<array> call BIS_fnc_arrayPop"}, "BIS_fnc_arrayPush": {"version": "1.00", "tags": "", "description": "This function adds an element to the end of an array and returns the array.", "example": "_newArray = [[0,1,2], 3] call BIS_fnc_arrayPush; // _newArray is [0,1,2,3]", "docSyntax": "[array, element] call BIS_fnc_arrayPush", "syntax": "[<array>,element] call BIS_fnc_arrayPush"}, "BIS_fnc_arrayPushStack": {"version": "1.00", "tags": "", "description": "This function is similar to the array push function; however, it pushes the contents of an array onto the stack array.", "example": "_array = [0,1,2]; [_array, [3,4,5]] call BIS_fnc_arrayPushStack; // _array is [0,1,2,3,4,5]", "docSyntax": "[array1, array2] call BIS_fnc_arrayPushStack", "syntax": "[array1,array2] call BIS_fnc_arrayPushStack"}, "BIS_fnc_arrayShift": {"version": "1.00", "tags": "", "description": "This function removes the first (leftmost) element of an array and returns it.", "example": "_myArray = [\"2\", \"report\", \"status\"]; _removedElement = [_myArray] call BIS_fnc_arrayShift; // array is within an array _removedElement == \"2\"; // true _myArray isEqualTo [\"report\", \"status\"]; // true", "docSyntax": "[array] call BIS_fnc_arrayShift", "syntax": "[<array>] call BIS_fnc_arrayShift"}, "BIS_fnc_arrayUnShift": {"version": "1.00", "tags": "", "description": "This function adds an element to the beginning of an array and returns the array. The array is passed by reference so changes inside the function will be reflected outside of it.", "example": "_array = [2,3,4]; [_array, 1] call BIS_fnc_arrayUnShift; // _array is now [1,2,3,4]", "docSyntax": "[array, value] call BIS_fnc_arrayUnShift", "syntax": "[<array>,<scalar>] call BIS_fnc_arrayUnShift"}, "BIS_fnc_classMagazine": {"version": "1.00", "tags": "", "description": "Returns class of magazine given by string.", "example": "_magazineConfig = currentMagazine player call BIS_fnc_classMagazine;", "docSyntax": "magazineClass call BIS_fnc_classMagazine", "syntax": "magazineClass call BIS_fnc_classMagazine"}, "BIS_fnc_classWeapon": {"version": "1.00", "tags": "", "description": "Returns class of weapon given by string.", "example": "_weaponConfig = currentWeapon player call BIS_fnc_classWeapon;", "docSyntax": "weaponClass call BIS_fnc_classWeapon", "syntax": "weaponClass call BIS_fnc_classWeapon"}, "BIS_fnc_colorRGBtoHTML": {"version": "1.00", "tags": "", "description": "Converts RGB color format to HTML color format.", "example": "_htmlColor = [0,0,0,1] call BIS_fnc_colorRGBtoHTML; // will return #000000", "docSyntax": "colorArray call BIS_fnc_colorRGBtoHTML", "syntax": "colorArray call BIS_fnc_colorRGBtoHTML"}, "BIS_fnc_commsMenuCreate": {"version": "1.00", "tags": "", "description": "Creates the global communications menu, if it is not already created. All entries are invisible by default. Unhide appropriate sections by using BIS_fnc_commsMenuToggleVisibility.", "example": "call BIS_fnc_commsMenuCreate;", "docSyntax": "call BIS_fnc_commsMenuCreate", "syntax": "call BIS_fnc_commsMenuCreate"}, "BIS_fnc_commsMenuToggleAvailability": {"version": "1.00", "tags": "", "description": "/* File: fn_commsMenuToggleAvailability.sqf Description: Enables or disables certain sections of the global communications menu. Parameter(s): _this select 0: index (Scalar) or list of indices (Array of Scalars) or section name (String) \"som\" - SecOps section \"wf\" - Warfare section _this select 1: mode (Scalar) 0 - disable 1 - enable Returns: Success flag (Boolean) */", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_commsMenuToggleVisibility": {"version": "1.00", "tags": "", "description": "/* File: fn_commsMenuToggleVisibility.sqf Description: Shows or hides certain sections of the global communications menu. Parameter(s): _this select 0: index (Scalar) or list of indices (Array of Scalars) or section name (String) \"som\" - SecOps section \"wf\" - Warfare section _this select 1: mode (Scalar) 0 - hide 1 - show Returns: Success flag (Boolean) */", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_conditionalSelect": {"version": "1.00", "tags": "", "description": "This returns a sub-array of elements that satisfy a specific condition in the order they have been passed.", "example": "[[10,0,8,2,6,4], { _x > 5 }] call BIS_fnc_conditionalSelect; // will return [10,8,6]", "docSyntax": "[items, condition] call BIS_fnc_conditionalSelect", "syntax": "[items,condition] call BIS_fnc_conditionalSelect"}, "BIS_fnc_createmenu": {"version": "1.00", "tags": "", "description": "/* File: fn_createMenu.sqf Description: Create custom commanding menu (with multiple pages if necessary). Parameter(s): _this select 0 - STRING or ARRAY - Name of menu or [Name, Context sensitive] _this select 1 - STRING - Variable in which will be menu params stored (as variable_0, variable_1, ...) _this select 2 - ARRAY - Array with menu items (can be either [items] or [[items],[itemNames],[itemEnable]] if you want to set custom params (names, enable values)) _this select 3 - STRING - Name of submenu which will open when item is activated. Name of selected item is passed to string as %1 _this select 4 - STRING - Expression which is executed when item is activated. Name of selected item is passed to string as %1, ID is %2. _this select 5 - ANYTHING (Optional) - params passed to expression. Whole argument is passed as %3 _this select 6 - BOOLEAN - False to hide number shortcuts Returned value(s): True Example: c = [\"first\",\"second\"]; [\"Menu\", \"b\", c, \"\",\"hint 'ahoj'\"] call BIS_FNC_createmenu; showCommandingMenu \"#USER:b_0\" c = [[\"firstData\",\"secondData\"],[\"First\",\"Second\"]]; [\"Menu\", \"b\", c, \"\",\"hint (str '%1' + str '%2' + str '%3')\"] call BIS_FNC_createmenu; showCommandingMenu \"#USER:b_0\"; see news:g7p3po$gik$1@new-server.localdomain */", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_crossProduct": {"version": "1.00", "tags": "", "description": "Return the cross product of two 3D vectors.", "example": "_product = [[1,2,3], [3,2,1]] call BIS_fnc_crossProduct;", "docSyntax": "[vector1, vector2] call BIS_fnc_crossProduct", "syntax": "[vector1,vector2] call BIS_fnc_crossProduct"}, "BIS_fnc_cutDecimals": {"version": "1.00", "tags": "", "description": "Function that rounds specified number to specified amount of decimals.", "example": "_cutDecimals = [33.3333, 1] call BIS_fnc_cutDecimals; // returns 33.3", "docSyntax": "[number, precision] call BIS_fnc_cutDecimals", "syntax": "[<scalar>,precision] call BIS_fnc_cutDecimals"}, "BIS_fnc_diagAnim": {"version": "1.00", "tags": "", "description": "Displays or logs animation states:", "example": "call BIS_fnc_diagAnim;", "docSyntax": "[target] call BIS_fnc_diagAnim", "syntax": "[<object>] call BIS_fnc_diagAnim", "type": "diagnoseFunction"}, "BIS_fnc_dirTo": {"version": "1.00", "tags": "", "description": "Function which returns vector direction from pos1 to pos2.", "example": "sets unit1 in the direction of unit2 unit1 setDir [unit1, unit2] call BIS_fnc_dirTo", "docSyntax": "[param1, param2] call BIS_fnc_dirTo", "syntax": "[param1,param2] call BIS_fnc_dirTo"}, "BIS_fnc_distance2D": {"version": "1.00", "tags": "", "description": "Returns the distance between two objects or positions.", "example": "[player, rescueHelicopter] call BIS_fnc_distance2D;", "docSyntax": "[param1, param2] call BIS_fnc_distance2D", "syntax": "[param1,param2] call BIS_fnc_distance2D"}, "BIS_fnc_distance2Dsqr": {"version": "1.00", "tags": "", "description": "Returns the SQUARE of the distance between the two objects or positions \"as the crow flies\" (ignoring elevation).", "example": "[ player, soldier_1 ] call BIS_fnc_distance2Dsqr", "docSyntax": "[Point_1,Point_2] call BIS_fnc_distance2Dsqr;", "syntax": "[Point_1,Point_2] call BIS_fnc_distance2Dsqr;"}, "BIS_fnc_dotProduct": {"version": "1.00", "tags": "", "description": "Dot product of two vectors.", "example": "[[1,2,3], [1,2,3]] call BIS_fnc_dotProduct; //Returns: 1*1+2*2+3*3 = 14", "docSyntax": "[vector1, vector2] call BIS_fnc_dotProduct;", "syntax": "[vector1,vector2] call BIS_fnc_dotProduct;"}, "BIS_fnc_findNestedElement": {"version": "1.00", "tags": "", "description": "Function to find item in nested arrays and return a path to the first match.", "example": "_array = [[1, 2], [3, 4]]; _path = [_array, 3] call BIS_fnc_findNestedElement; // expected result: [1, 0] // ((_array select 1) select 0) == 3", "docSyntax": "[array, query] call BIS_fnc_findNestedElement", "syntax": "[<array>,query] call BIS_fnc_findNestedElement"}, "BIS_fnc_findSafePos": {"version": "1.00", "tags": "", "description": "This function generates position on a map according to several given parameters (see diagram):", "example": "Find position minimum 1m from from player but not further than 150m, not closer than 3m to any other object, not in the water, maximum gradient of 20, not on the shoreline: _pos = [player, 1, 150, 3, 0, 20, 0] call BIS_fnc_findSafePos;", "docSyntax": "[center, minDist, maxDist, objDist, waterMode, maxGrad, shoreMode, blacklistPos, defaultPos] call BIS_fnc_findSafePos", "syntax": "[center,minDist,maxDist,objDist,waterMode,maxGrad,shoreMode,blacklistPos,defaultPos] call BIS_fnc_findSafePos"}, "BIS_fnc_fps": {"version": "1.00", "tags": "", "description": "Function to measure FPS. Spawns code running for given time and displays result on screen via titleText, globalChat and diag_log. Variable BIS_fps_output is filled with diag_log content too.", "example": "_scriptHandle = [10, \"50 units on screen\", 3] call BIS_fnc_fps;", "docSyntax": "[duration, sceneId, startDelay] call BIS_fnc_fps", "syntax": "[duration,sceneId,startDelay] call BIS_fnc_fps", "type": "diagnoseFunction"}, "BIS_fnc_geometricMean": {"version": "1.00", "tags": "", "description": "Returns the geometric mean of an array of numbers.", "example": "[0,1,3] call BIS_fnc_geometricMean;//Returns 1.73205", "docSyntax": "array call BIS_fnc_geometricMean", "syntax": "<array> call BIS_fnc_geometricMean"}, "BIS_fnc_getFactions": {"version": "1.00", "tags": "", "description": "Gets list and sides of current factions.", "example": "call BIS_fnc_getFactions; // returns all factions", "docSyntax": "[parameter] call BIS_fnc_getFactions", "syntax": "[parameter] call BIS_fnc_getFactions"}, "BIS_fnc_getLineDist": {"version": "1.00", "tags": "", "description": "Return the distance between two sections of a virtual straight line.", "example": "_distance = [0,5,15,20] call BIS_fnc_getLineDist; // returns 10", "docSyntax": "[start1, length1, start2, length2] call BIS_fnc_getLineDist", "syntax": "[start1,length1,start2,length2] call BIS_fnc_getLineDist"}, "BIS_fnc_getPitchBank": {"version": "1.00", "tags": "", "description": "Returns the pitch and bank of an object, in degrees. Yaw can be found using the getDir command.", "example": "_pitchBank = vehicle player call BIS_fnc_getPitchBank;", "docSyntax": "object call BIS_fnc_getPitchBank", "syntax": "<object> call BIS_fnc_getPitchBank"}, "BIS_fnc_greatestNum": {"version": "1.00", "tags": "", "description": "Returns the greatest number out of the passed set.", "example": "_result = [7,2,1,5,10] call BIS_fnc_greatestNum; //_result = 10", "docSyntax": "numbers call BIS_fnc_greatestNum", "syntax": "numbers call BIS_fnc_greatestNum"}, "BIS_fnc_halo": {"version": "1.00", "tags": "", "description": "Makes a High Altitude Low Opening (HALO) parachute jump.", "example": "[player] call BIS_fnc_halo; // Instantly parachutes the player object", "docSyntax": "[unit, altitude] call BIS_fnc_halo", "syntax": "[<objUnit>,<scalar>] call BIS_fnc_halo"}, "BIS_fnc_help": {"version": "1.00", "tags": "", "description": "Shows Function Library viewer, which contains list of all available functions, both official and unofficial.", "example": "[] call BIS_fnc_help;", "docSyntax": "[parentDisplay] call BIS_fnc_help", "syntax": "[parentDisplay] call BIS_fnc_help"}, "BIS_fnc_inTrigger": {"version": "1.00", "tags": "", "description": "Detects whether position is within area (Since Arma 3 v1.57 an engine solution is available inArea) or calculates distance to the nearest edge of trigger area by using optional params.", "example": "_trigger = createTrigger [\"EmptyDetector\", getPosATL player]; _trigger setTriggerArea [10, 10, 0, false]; _inTrigger = [_trigger, player] call BIS_fnc_inTrigger; //_inTrigger = true", "docSyntax": "[area, position, returnDistance, includeFloorCeiling] call BIS_fnc_inTrigger", "syntax": "[area,position,returnDistance,includeFloorCeiling] call BIS_fnc_inTrigger"}, "BIS_fnc_inv": {"version": "1.00", "tags": "", "description": "Returns inventory contents of given vehicle (unit). For vehicles it returns mounted gun and its ammo, not cargo weapons and ammo.", "example": "[player] call BIS_fnc_inv;", "docSyntax": "[unit] call BIS_fnc_inv", "syntax": "[<objUnit>] call BIS_fnc_inv"}, "BIS_fnc_invAdd": {"version": "1.00", "tags": "", "description": "Adds item to inventory - checks if there is room for it. Checks if add was done by engine.", "example": "[ player,\"someClass\" ] call BIS_fnc_invAdd;", "docSyntax": "[object,class,force] call BIS_fnc_invAdd", "syntax": "[<object>,class,force] call BIS_fnc_invAdd"}, "BIS_fnc_invCodeToArray": {"version": "1.00", "tags": "", "description": "Converts inventory code (used in configs) to array with numbers for weapons and magazines (and their counts).", "example": "[ call compile getText (configfile >> \"CfgVehicles\" >> typeOf player >> \"weaponSlots\")] call BIS_fnc_invCodeToArray;//Can return [1,0,0,0,0,0,0,0]", "docSyntax": "[configCode] call BIS_fnc_invCodeToArray", "syntax": "[configCode] call BIS_fnc_invCodeToArray"}, "BIS_fnc_invRemove": {"version": "1.00", "tags": "", "description": "Removes from inventory. Given number of items. Returns actually removed items count.", "example": "[ player,\"someClass\",5 ] call BIS_fnc_invRemove;", "docSyntax": "[object,class,count] call BIS_fnc_invRemove", "syntax": "[<object>,class,count] call BIS_fnc_invRemove"}, "BIS_fnc_invSlots": {"version": "1.00", "tags": "", "description": "Returns config inventory slots of given unit (total numbers of available slots in array).", "example": "[ player ] call BIS_fnc_invSlots;//Returns [1,1,1,8,12,1,0,12] for \"B_T_Recon_TL_F\" class. Means: 1 x WeaponSlotPrimary, 1 x WeaponSlotHangun, ... , 12 x WeaponSlotInventory", "docSyntax": "[object] call BIS_fnc_invSlots", "syntax": "[<object>] call BIS_fnc_invSlots"}, "BIS_fnc_invSlotsEmpty": {"version": "1.00", "tags": "", "description": "Returns empty inventory slots of given unit.", "example": "[ player ] call BIS_fnc_invSlotsEmpty;//Can return [0,0,-1,-7,0,-1,0,-12]", "docSyntax": "[object] call BIS_fnc_invSlotsEmpty", "syntax": "[<object>] call BIS_fnc_invSlotsEmpty"}, "BIS_fnc_invSlotType": {"version": "1.00", "tags": "", "description": "Returns empty inventory slots of given unit.", "example": "[ currentWeapon player ] call BIS_fnc_invSlotType;//Can return [1,0,0,0,0,0,0,0]", "docSyntax": "[class] call BIS_fnc_invSlotType", "syntax": "[class] call BIS_fnc_invSlotType"}, "BIS_fnc_invString": {"version": "1.00", "tags": "", "description": "Returns inventory contents of given vehicle (unit). Note: for vehicles it returns mounted gun and its ammo, not cargo weapons and ammo.", "example": "[ player ] call BIS_fnc_invString;", "docSyntax": "[object] call BIS_fnc_invString", "syntax": "[<object>] call BIS_fnc_invString"}, "BIS_fnc_isInFrontOf": {"version": "1.00", "tags": "", "description": "Check if an object is in front of another object (in the front 180\u00b0)", "example": "_isInstructorInFrontOfPlayer = [player, instructor, 0] call BIS_fnc_isInFrontOf;", "docSyntax": "[reference, checked, offset] call BIS_fnc_isInFrontOf", "syntax": "[reference,checked,offset] call BIS_fnc_isInFrontOf"}, "BIS_fnc_isPosBlacklisted": {"version": "1.00", "tags": "", "description": "Function checks a blacklist and sees if the given position is in it or not.", "example": "[[50,50], [[0,0], [100,100]]] call BIS_fnc_isPosBlacklisted;", "docSyntax": "[position, blacklistArea] call BIS_fnc_isPosBlacklisted", "syntax": "[position,blacklistArea] call BIS_fnc_isPosBlacklisted"}, "BIS_fnc_listPlayers": {"version": "1.00", "tags": "", "description": "Returns a list of currently played units, alive or dead.", "example": "_allPlayers = call BIS_fnc_listPlayers;", "docSyntax": "call BIS_fnc_listPlayers", "syntax": "call BIS_fnc_listPlayers"}, "BIS_fnc_locations": {"version": "1.00", "tags": "", "description": "Creates or registers location logics (used in various modules, like Ambient Civilians, Ambient Civilian Vehicles or Warfare 2). Upon registering, function will set following variables into location logic's variable space:", "example": "[\"CityCenter\",[position player,1000]] call bis_fnc_locations;", "docSyntax": "[type(s),area,debug] call BIS_fnc_locations", "syntax": "[type(s),area,debug] call BIS_fnc_locations"}, "BIS_fnc_lowestNum": {"version": "1.00", "tags": "", "description": "Returns the lowest number out of the passed set.", "example": "_result = [7,2,1,5,10] call BIS_fnc_lowestNum; //_result = 1", "docSyntax": "numbers call BIS_fnc_lowestNum", "syntax": "numbers call BIS_fnc_lowestNum"}, "BIS_fnc_magnitude": {"version": "1.00", "tags": "", "description": "Returns the magnitude of an array of numbers. The vector can have any number of elements.", "example": "[5,3] call BIS_fnc_magnitude;", "docSyntax": "vector call BIS_fnc_magnitude", "syntax": "vector call BIS_fnc_magnitude"}, "BIS_fnc_magnitudeSqr": {"version": "1.00", "tags": "", "description": "Returns the square magnitude of an array of numbers. The vector can have any number of elements.", "example": "[5,3] call BIS_fnc_magnitudeSqr;", "docSyntax": "vector call BIS_fnc_magnitudeSqr", "syntax": "vector call BIS_fnc_magnitudeSqr"}, "BIS_fnc_maxDiffArray": {"version": "1.00", "tags": "", "description": "Function to return the maximum difference between all values in an array.", "example": "_maxDiff = [[0, 5, 10, -5]] call BIS_fnc_maxDiffArray; // will return 15 (-5 to 10)", "docSyntax": "[arrayOfNumbers] call BIS_fnc_maxDiffArray", "syntax": "[arrayOfNumbers] call BIS_fnc_maxDiffArray"}, "BIS_fnc_miscanim": {"version": "1.00", "tags": "", "description": "Setting up the animations with correct positions for object - choose correct performance. For ex. fixingTowingTractor (read the description)", "example": "[\"twoTalking1\", unit1, myCar, unit2] call BIS_fnc_miscanim;", "docSyntax": "[anim, person1, vehicle, person2, isOnBoard, altitude, doMove] call BIS_fnc_miscanim", "syntax": "[anim,person1,<objVehicle>,person2,isOnBoard,<scalar>,doMove] call BIS_fnc_miscanim"}, "BIS_fnc_nearestNum": {"version": "1.00", "tags": "", "description": "Returns the provided set closest number to the target number.", "example": "_closestValueTo4 = [[1,5,10], 4] call BIS_fnc_nearestNum; // returns 5", "docSyntax": "[values, value] call BIS_fnc_nearestNum", "syntax": "[values,<scalar>] call BIS_fnc_nearestNum"}, "BIS_fnc_nearestPoint": {"version": "1.00", "tags": "", "description": "Computes nearest point in a line.", "example": "_idealLocation = [getMarkerPos \"base\", getMarkerPos \"destination\", getPos player, true] call BIS_fnc_nearestPoint;", "docSyntax": "[start, end, point, is2D] call BIS_fnc_nearestPoint", "syntax": "[start,end,point,is2D] call BIS_fnc_nearestPoint"}, "BIS_fnc_nearestPosition": {"version": "1.00", "tags": "", "description": "Function to find the nearest Object or position from a list, when compared to a given reference.", "example": "// Find the nearest marker from player _nearestMarker = [allMapMarkers, player] call BIS_fnc_nearestPosition;", "docSyntax": "[items, origin] call BIS_fnc_nearestPosition", "syntax": "[items,origin] call BIS_fnc_nearestPosition"}, "BIS_fnc_objectsGrabber": {"version": "1.00", "tags": "", "description": "Converts a set of placed objects to an object array (as a String) for the DynO mapper.", "example": "[getPos player, 20, true] call BIS_fnc_ObjectsGrabber;", "docSyntax": "[position, size, objectOrientation] call BIS_fnc_ObjectsGrabber", "syntax": "[position,size,objectOrientation] call BIS_fnc_ObjectsGrabber"}, "BIS_fnc_objectsMapper": {"version": "1.00", "tags": "", "description": "Takes an array of data about a dynamic object template and creates the objects.", "example": "_objectsArray = [ [\"B_UAV_01_F\",[-5.23706,-0.183594,-0.00126648],167.39,1,0,[],\"\",\"\",true,false], [\"C_Offroad_01_F\",[-4.25903,4.62158,0.0630951],224.14,1,0,[],\"\",\"\",true,false] ]; [getMarkerPos \"myBase\", 0, _objectsArray, 0.5] call BIS_fnc_objectsMapper;", "docSyntax": "[position, azimuth, objectsArray, badChance] call BIS_fnc_ObjectsMapper", "syntax": "[position,azimuth,objectsArray,badChance] call BIS_fnc_ObjectsMapper"}, "BIS_fnc_parseNumber": {"version": "1.00", "tags": "", "description": "Return number from expression", "example": "_result = 7.62 call BIS_fnc_parseNumber; _result = \"7.62\" call BIS_fnc_parseNumber; _result = { 7.62 } call BIS_fnc_parseNumber;", "docSyntax": "value call BIS_fnc_parseNumber", "syntax": "<scalar> call BIS_fnc_parseNumber"}, "BIS_fnc_posToGrid": {"version": "1.00", "tags": "", "description": "Converts array position to map grid position.", "example": "player call BIS_fnc_posToGrid; //\u00a0[\"046\", \"049\"]", "docSyntax": "element call BIS_fnc_posToGrid", "syntax": "element call BIS_fnc_posToGrid"}, "BIS_fnc_randomIndex": {"version": "1.00", "tags": "", "description": "Return a random integer representing an index in the passed array.", "example": "[\"a\",0,objNull] call BIS_fnc_randomIndex; // returns 0, 1 or 2", "docSyntax": "array call BIS_fnc_randomIndex", "syntax": "<array> call BIS_fnc_randomIndex"}, "BIS_fnc_randomInt": {"version": "1.00", "tags": "", "description": "Returns a random integer between the two passed numbers (inclusive). The order of parameters doesn't matter: it can be [min, max] or [max, min].", "example": "[1,3] call BIS_fnc_randomInt; // will return 1, 2 or 3", "docSyntax": "[min, max] call BIS_fnc_randomInt", "syntax": "[min,max] call BIS_fnc_randomInt"}, "BIS_fnc_randomNum": {"version": "1.00", "tags": "", "description": "Returns a random (float) number between the two passed numbers (inclusive). The order of parameters doesn't matter: it can be [min, max] or [max, min].", "example": "[1,3] call BIS_fnc_randomNum; // can be 1, 3 or any value in-between", "docSyntax": "[min, max] call BIS_fnc_randomNum", "syntax": "[min,max] call BIS_fnc_randomNum"}, "BIS_fnc_recompile": {"version": "1.00", "tags": "", "description": "Can be used to recompile functions.", "example": "[] call BIS_fnc_recompile;", "docSyntax": "[mode] call BIS_fnc_recompile", "syntax": "[mode] call BIS_fnc_recompile"}, "BIS_fnc_refreshCommMenu": {"version": "1.00", "tags": "", "description": "Refresh the communication menu variable.", "example": "call BIS_fnc_refreshCommMenu;", "docSyntax": "call BIS_fnc_refreshCommMenu", "syntax": "call BIS_fnc_refreshCommMenu"}, "BIS_fnc_relativeDirTo": {"version": "1.00", "tags": "", "description": "Returns the relative direction from object 1 to object/position 2. Return value is always in between 0 and 360.", "example": "[[0,0,0], player] call BIS_fnc_relPos;", "docSyntax": "[point1, point2] call BIS_fnc_relativeDirTo", "syntax": "[point1,point2] call BIS_fnc_relativeDirTo"}, "BIS_fnc_relPos": {"version": "1.00", "tags": "", "description": "Returns a position that is a specified distance and compass direction from the passed position or object.", "example": "[ [0,0,0], 1000, 50 ] call BIS_fnc_relPos;//[766.044,642.788,0]", "docSyntax": "[start, distance, direction] call BIS_fnc_relPos", "syntax": "[start,<scalar>,direction] call BIS_fnc_relPos"}, "BIS_fnc_removeIndex": {"version": "1.00", "tags": "", "description": "Takes an array, and returns a new array with the specified index(es) removed. This takes the array passed in the first parameter, and returns an array that has the index number in the second parameter removed. If a third parameter is passed, then a range of indexes will be removed. Alternatively, you can pass an array of indexes to remove in the second parameter.", "example": "_array = [0,1,2,3,4]; [array,0] call BIS_fnc_removeIndex;//Returns [1,2,3,4]", "docSyntax": "[array,startIndex,endIndex] call BIS_fnc_removeIndex", "syntax": "[<array>,startIndex,endIndex] call BIS_fnc_removeIndex"}, "BIS_fnc_removeNestedElement": {"version": "1.00", "tags": "", "description": "Function to remove an item in a nested array. Modifies the array by reference.", "example": "_array = [[1, 2], [3, 3, 4]]; _bool = [_array, 3] call BIS_fnc_removeNestedElement; // _array is now [[1, 2], [4]]", "docSyntax": "[array, itemToRemove] call BIS_fnc_removeNestedElement", "syntax": "[<array>,itemToRemove] call BIS_fnc_removeNestedElement"}, "BIS_fnc_respect": {"version": "1.00", "tags": "", "description": "RESpect - The Effective Calculation Process.", "docSyntax": "[mode, param1, param2, param3] call BIS_fnc_respect", "syntax": "[mode,param1,param2,param3] call BIS_fnc_respect"}, "BIS_fnc_returnConfigEntry": {"version": "1.00", "tags": "", "description": "Explores parent classes in the run-time config for the value of a config entry.", "example": "[configfile >> \"Cfg3DEN\" >> \"Attributes\" >> \"ActivationType\",\"idc\"] call BIS_fnc_returnConfigEntry;", "docSyntax": "[config,attribute,defaultValue] call BIS_fnc_returnConfigEntry", "syntax": "[config,attribute,defaultValue] call BIS_fnc_returnConfigEntry"}, "BIS_fnc_returnGroupComposition": {"version": "1.00", "tags": "", "description": "/* File: returnGroupComp.sqf Description: Function which returns a logical group composition based on a number of parameters. Parameter(s): _this select 0: side (Side). _this select 1: number of characters (Number). _this select 2: (optional) type (String): - \"riflesquad\": (default) standard rifle squad. - \"sniper\": sniper team. Returns: Array of Strings - object types. TODO: use CfgGroups instead? */ //Validate parameter count", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_returnNestedElement": {"version": "1.00", "tags": "", "description": "Function to return an item at a path in an array.", "example": "_array = [[1, 2], [3, 4]]; _value = [_array, [0, 1]] call BIS_fnc_returnNestedElement; // returns 2", "docSyntax": "[array, path] call BIS_fnc_returnNestedElement", "syntax": "[<array>,path] call BIS_fnc_returnNestedElement"}, "BIS_fnc_returnParents": {"version": "1.00", "tags": "", "description": "Returns list of all parent classes.", "example": "[ configFile >> \"CfgVehicles\" >> \"Land_FirePlace_F\", true ] call BIS_fnc_returnParents; //Returns [\"Land_FirePlace_F\",\"House_F\",\"House\",\"HouseBase\",\"NonStrategic\",\"Building\",\"Static\",\"All\"]", "docSyntax": "[config, onlyClassNames] call BIS_fnc_returnParents", "syntax": "[config,onlyClassNames] call BIS_fnc_returnParents"}, "BIS_fnc_returnVehicleTurrets": {"version": "1.00", "tags": "", "description": "Return the path to all turrets and sub-turrets in a vehicle.", "example": "[configFile >> \"CfgVehicles\" >> \"B_MBT_01_TUSK_F\"] call BIS_fnc_returnVehicleTurrets;", "docSyntax": "[configEntry] call BIS_fnc_returnVehicleTurrets", "syntax": "[configEntry] call BIS_fnc_returnVehicleTurrets"}, "BIS_fnc_rotateVector2D": {"version": "1.00", "tags": "", "description": "This function returns a 2D vector rotated a specified number of degrees around the origin.", "example": "[ [5,3], 60 ] call BIS_fnc_rotateVector2D;//Returns[-0.0980766,5.83013]", "docSyntax": "[vector2D, angle] call BIS_fnc_rotateVector2D", "syntax": "[vector2D,angle] call BIS_fnc_rotateVector2D"}, "BIS_fnc_roundNum": {"version": "1.00", "tags": "", "description": "Round a number to the provided factor.", "example": "[10.254,2,3] call BIS_fnc_roundNum;//Returns 9", "docSyntax": "[number, factor, secondary factor] call BIS_fnc_roundNum", "syntax": "[<scalar>,factor,secondary factor] call BIS_fnc_roundNum"}, "BIS_fnc_sceneAreaClearance": {"version": "1.00", "tags": "", "description": "Removes object clutter within a set trigger, for use within cutscenes.", "example": "0 = [triggerArea1] spawn BIS_fnc_sceneAreaClearance;", "docSyntax": "param spawn BIS_fnc_sceneAreaClearance;", "syntax": "param spawn BIS_fnc_sceneAreaClearance;"}, "BIS_fnc_sceneCheckWeapons": {"version": "1.00", "tags": "", "description": "Checks if participants haven't missing weapon or haven't it selected before scene", "example": "[[BIS_Cooper, \"primary\"],[BIS_Ohara, \"primary\"],[BIS_Rodriguez, \"primary\"],[BIS_Sykes, \"primary\"],[BIS_Miles, \"primary\"]] call BIS_fnc_sceneCheckWeapons;", "docSyntax": "[participants] call BIS_fnc_sceneCheckWeapons", "syntax": "[participants] call BIS_fnc_sceneCheckWeapons"}, "BIS_fnc_sceneCreateSceneTrigger": {"version": "1.00", "tags": "", "description": "Create trigger for scene which can interrupt scene with name passed during creating the trigger. Scene name is saved in format BIS_SceneIntDetector%1 where %1 is sceneName.", "example": "[\"BIS_scene,WEST,5,500,[1337,1337,0],false] call BIS_fnc_sceneCreateSceneTrigger;", "docSyntax": "[sceneName, side, timeout, triggerSize, triggerPosition] call BIS_fnc_sceneCreateSceneTrigger", "syntax": "[sceneName,<objSide>,timeout,triggerSize,triggerPosition] call BIS_fnc_sceneCreateSceneTrigger"}, "BIS_fnc_sceneCreateSoundEntities": {"version": "1.00", "tags": "", "description": "/******************************************************************************* * version: 1.0 * name: create sound entities * description: creates sound entities(logic objects) and attaches to * an objects passed as parameter * After scene end it will detach and delete all created * sound entities (if scene was executed from scenes * controller. * * paramater: objects - ARRAY of OBJECTS in format without \"BIS_\" * prefix. For example, if you have BIS_Cooper in mission * than parameter will be [Cooper]. Then you can use * created sound entities as BIS_ZvukCooper say \"something\" * * return value: nothing *", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_sceneGetObjects": {"version": "1.00", "tags": "", "description": "\u26a0", "example": "[player, 20, \"Car\"] call BIS_fnc_sceneGetObjects;", "docSyntax": "[centre, radius, type] call BIS_fnc_sceneGetObjects", "syntax": "[centre,radius,type] call BIS_fnc_sceneGetObjects"}, "BIS_fnc_sceneGetParticipants": {"version": "1.00", "tags": "", "description": "gets members of unit's group who are in unit's range.", "example": "[player, 20] call BIS_fnc_sceneGetParticipants;", "docSyntax": "[unit, maxDistance] call BIS_fnc_sceneGetParticipants", "syntax": "[<objUnit>,maxDistance] call BIS_fnc_sceneGetParticipants"}, "BIS_fnc_sceneGetPositionByAngle": {"version": "1.00", "tags": "", "description": "/******************************************************************************* * * version: 1.0 * name: sceneGetPositionByAngle * description: returns new calculated position of object from angle and distance from specified object * parameters: described bellow * return value: array of new coordinates [x, y] *", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_sceneIntruderDetector": {"version": "1.00", "tags": "", "description": "Checks if there are intruders during scene. All intruders during scene will be disabled if they will get into the detector trigger. Checking is deactivated by passing BIS_sceneIntruderDetectorLogic setVariable [\"_detectInProgress\", false];", "example": "[[1337,1337,0],[42,42]] call BIS_fnc_sceneCreateSceneTrigger;", "docSyntax": "[sceneCenter, triggerSize] call BIS_fnc_sceneIntruderDetector", "syntax": "[sceneCenter,triggerSize] call BIS_fnc_sceneIntruderDetector"}, "BIS_fnc_sceneMiscStuff": {"version": "1.00", "tags": "", "description": "/********************************************************************* Version: 1.0 Name: sceneMiscStuff DESCRIPTION: Does the basic minor stuff for scene - cinema borders, map is denied etc. PARAMETERS: 1) _cameraPositions - [[cameraTarget],[cameraPos]] - Coordinates. If BIS_debugScene is true then external camera is activated 2) _skipInitBlackout - BOOL - if true, initial blackout is skipped 3) _skipFinalBlackout - BOOL - if true, final blackout is skipped 4) _noUseCheckTheWeapons - BOOL - if true, checking of weapon before scene is skipped 5) _noUseLoadingScreen - BOOL - if true, loadingscreen is bypassed 6) __excludedObjectsForIntruderDetector - ARRAY of objects - objects will be excluded from intruder detector RETURNED VALUE: **********************************************************************/", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_sceneRotate": {"version": "1.00", "tags": "", "description": "Compute new object coordinates from given center and angle from MOTION BUILDER", "example": "[[1337,1337,0],42,120,[200,200,0]] call BIS_fnc_sceneRotate;//\u00a0Returns [[1337.15,1334.18,0],-258]", "docSyntax": "[center, centerAngle, angle, iniPosition] call BIS_fnc_sceneRotate", "syntax": "[center,centerAngle,angle,iniPosition] call BIS_fnc_sceneRotate"}, "BIS_fnc_sceneSetAnimationsForGroup": {"version": "1.00", "tags": "", "description": "Plays a range of animations for a specific set of units, intended for use during cutscenes.", "example": "setAnims = [group player, [\"AmovPercMstpSrasWrflDnon\"]] call BIS_fnc_sceneSetAnimationsForGroup;", "docSyntax": "param call BIS_fnc_sceneSetAnimationsForGroup;", "syntax": "param call BIS_fnc_sceneSetAnimationsForGroup;"}, "BIS_fnc_sceneSetBehaviour": {"version": "1.00", "tags": "", "description": "Enables / disables a specific set of AI units, usable for cutscenes.", "example": "[\"disableAI\", [unit1, player, unit2, unit3]] call BIS_fnc_sceneSetBehaviour;", "docSyntax": "param call BIS_fnc_sceneSetBehaviour;", "syntax": "param call BIS_fnc_sceneSetBehaviour;"}, "BIS_fnc_sceneSetObjects": {"version": "1.00", "tags": "", "description": "This function sets objects positions and direction relative to the chosen object.", "example": "[player, _arrayOfObjects, false] call BIS_fnc_sceneSetObjects;", "docSyntax": "[centre, objectsArray, applyOffset, stopped] call BIS_fnc_sceneSetObjects", "syntax": "[centre,objectsArray,applyOffset,stopped] call BIS_fnc_sceneSetObjects"}, "BIS_fnc_sceneSetPosFormation": {"version": "1.00", "tags": "", "description": "Adjusts units into a pre-determined formation, using a few variables. Part of S.C.E.N.E.S function group.", "example": "0 = [units group player, bluforCommander, player, \"HALFCIRCLE\",0] spawn BIS_fnc_sceneSetPosFormation;", "docSyntax": "param spawn BIS_fnc_sceneSetPosFormation;", "syntax": "param spawn BIS_fnc_sceneSetPosFormation;"}, "BIS_fnc_selectCrew": {"version": "1.00", "tags": "", "description": "Return an appropriate crew type for a certain vehicle.", "example": "_crewType = [blufor, configFile >> \"CfgVehicles\" >> \"B_MRAP_01_F\"] call BIS_fnc_selectCrew;", "docSyntax": "[side, configEntry] call BIS_fnc_selectCrew", "syntax": "[<objSide>,configEntry] call BIS_fnc_selectCrew"}, "BIS_fnc_selectRandom": {"version": "1.00", "tags": "", "description": "GROUP1", "example": "_bestShooter = [_rento, _ben, _trit] call BIS_fnc_selectRandom; //\u00a0returns one of the variables _bestSeries = [[\"halo1\",\"halo2\"],[\"ofp\",\"arma2\"]] call BIS_fnc_selectRandom; //\u00a0returns one of the arrays", "docSyntax": "Selects one of the arguments at random.", "syntax": "Selects one of the arguments at random."}, "BIS_fnc_selectRandomWeighted": {"version": "1.00", "tags": "", "description": "Selects a random item from an array, taking into account item weight. Note:", "example": "[\"apples\",.3,\"pears\",.2,\"bananas\",.4,\"diamonds\",.1,\"unicorns\",.00001] call BIS_fnc_selectRandomWeighted;", "docSyntax": "itemsAndWeights call BIS_fnc_selectRandomWeighted", "syntax": "itemsAndWeights call BIS_fnc_selectRandomWeighted"}, "BIS_fnc_setNestedElement": {"version": "1.00", "tags": "", "description": "Function to set an item in a nested array using a path. Modifies the array by reference.", "example": "_array = [[1, 2], [3, 4]]; _bool = [_array, [0, 0], 0] call BIS_fnc_setNestedElement; // _array is now [[0, 2], [3, 4]]", "docSyntax": "[array, path, value] call BIS_fnc_setNestedElement", "syntax": "[<array>,path,<scalar>] call BIS_fnc_setNestedElement"}, "BIS_fnc_setPitchBank": {"version": "1.00", "tags": "", "description": "Rotate an object, giving it the specified pitch and bank, in degrees.", "example": "[player, 45, -45] call BIS_fnc_setPitchBank;", "docSyntax": "[object, pitch, bank] call BIS_fnc_setPitchBank", "syntax": "[<object>,pitch,bank] call BIS_fnc_setPitchBank"}, "BIS_fnc_showTime": {"version": "1.00", "tags": "", "description": "Shows time gap between two dates.", "example": "_dayStart = date; _dayStart set [3, 0]; // set hours to 0 _dayStart set [4, 0]; // set minutes to 0 _now = date; [_dayStart, _now] call BIS_fnc_showTime;", "docSyntax": "[startDate, endDate] call BIS_fnc_showTime", "syntax": "[startDate,endDate] call BIS_fnc_showTime"}, "BIS_fnc_sortNum": {"version": "1.00", "tags": "", "description": "Sorts an array of numbers from lowest (left) to highest (right). The passed array is modified by reference. This function uses the quick sort algorithm.", "example": "[5,9,987,6,97,8,6] call BIS_fnc_sortNum; // Returns [5,6,6,8,9,97,987]", "docSyntax": "array call BIS_fnc_sortNum", "syntax": "<array> call BIS_fnc_sortNum"}, "BIS_fnc_spawnCrew": {"version": "1.00", "tags": "", "description": "Function to fill all crew positions in a vehicle, including turrets. In dummy mode no objects are created and the returned array contains only ones. In this mode the function can be used to count the actual crew of an existing vehicle or vehicle type.", "example": "[ BIS_vehicle, group player ] call BIS_fnc_spawnCrew;", "docSyntax": "[vehicle,group,dummyMode,dummyType,crewType]] call BIS_fnc_spawnCrew", "syntax": "[<objVehicle>,<objGroup>,dummyMode,dummyType,crewType]] call BIS_fnc_spawnCrew"}, "BIS_fnc_spawnGroup": {"version": "1.00", "tags": "", "description": "Function which handles the spawning of a dynamic group of characters. The composition of the group can be passed to the function. Alternatively a number can be passed and the function will spawn that amount of characters with a random type.", "example": "Spawn five random EAST units at aPosition: [getPos aPosition, east, 5] call BIS_fnc_spawnGroup;", "docSyntax": "[position, side, toSpawn, relPositions, ranks, skillRange, ammoRange, randomControls, azimuth, precisePos, maxVehicles] call BIS_fnc_spawnGroup", "syntax": "[position,<objSide>,toSpawn,relPositions,ranks,skillRange,ammoRange,randomControls,azimuth,precisePos,maxVehicles] call BIS_fnc_spawnGroup"}, "BIS_fnc_spawnVehicle": {"version": "1.00", "tags": "", "description": "Function to spawn a certain vehicle type with all crew (including turrets). The vehicle can either become part of an existing group or create a new group.", "example": "[getPos player, 180, \"BMP3\", east] call BIS_fnc_spawnVehicle;", "docSyntax": "[position, direction, type, sideOrGroup] call BIS_fnc_spawnVehicle", "syntax": "[position,direction,type,sideOrGroup] call BIS_fnc_spawnVehicle"}, "BIS_fnc_subSelect": {"version": "1.00", "tags": "", "description": "Returns a sub-selection of the passed array.", "example": "_array = [\"a\",\"b\",true,3,8]; [_array, 2] call BIS_fnc_subSelect; // returns [true,3,8]", "docSyntax": "[array, start, endOrLength] call BIS_fnc_subSelect", "syntax": "[<array>,start,endOrLength] call BIS_fnc_subSelect"}, "BIS_fnc_supplydrop": {"version": "1.00", "tags": "", "description": "Script for para-drop of objects. Spawns waitUntil that handles ground hit (detaching of object from parachute). Used by supplydrop service.", "example": "[ [BIS_airDropVeh, \"reammobox\"] spawn BIS_fnc_supplydrop;", "docSyntax": "[airUnit,class] spawn BIS_fnc_supplydrop", "syntax": "[airUnit,class] spawn BIS_fnc_supplydrop"}, "BIS_fnc_supplydropService": {"version": "1.00", "tags": "", "description": "/* File: supplydropService.sqf Description: Supply drop service - controls approach and departure of transporting air vehicle and actual cargo drop. Used by Supply drop support request. Parameter(s): 1: <object> unit allowed to use the transport system 2: <object> vehicle providing transport 4: <array> positions to be cosen by player; accepted strings are \"pickup\" and \"unload\", the second position is defined by the next paramter (OPTIONAL) 5: <position> (NEEDED ONLY IF PARAMETER #4 IS USED) Returns: N/A */ //MP framework init (used for move command given to transporter vehicle)", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_swapVars": {"version": "1.00", "tags": "", "description": "Swaps the values of two variables passed as String.", "example": "_a = 1; _b = 2; [\"_a\", \"_b\"] call BIS_fnc_swapVars; _a == 2; // true _b == 1; // true", "docSyntax": "[variableName1, variableName2] call BIS_fnc_swapVars", "syntax": "[variableName1,variableName2] call BIS_fnc_swapVars"}, "BIS_fnc_taskAttack": {"version": "1.00", "tags": "", "description": "This function adds a Seek and Destroy waypoint on defined position to the group and set its behaviour to \"AWARE\". If the group has other waypoints, the waypoint will be added at the end of the list.", "example": "[opforGroup, getPosATL player] call BIS_fnc_taskAttack;", "docSyntax": "[group, position] call BIS_fnc_taskAttack", "syntax": "[<objGroup>,position] call BIS_fnc_taskAttack"}, "BIS_fnc_taskDefend": {"version": "1.00", "tags": "", "description": "Group will man nearby static defenses within a 100 metre radius of the defense position and guard the position. Some units will man weapons, others will patrol and the remainder will sit on the ground.", "example": "[group this, getPos this] call bis_fnc_taskDefend", "docSyntax": "[group,position] call BIS_fnc_taskDefend", "syntax": "[<objGroup>,position] call BIS_fnc_taskDefend"}, "BIS_fnc_taskHandler": {"version": "1.00", "tags": "", "description": "Automatically sets tasks as current for assigned units.", "docSyntax": "[unit, [[task, priority]] call BIS_fnc_taskHandler;", "syntax": "[<objUnit>, [[<string>, <scalar>]] call BIS_fnc_taskHandler;", "returns": "void", "example": "[ BIS_cooper, [ [\"objShaftoe\", 1], [\"objGorka\", 3]] call BIS_fnc_taskHandler;"}, "BIS_fnc_taskPatrol": {"version": "1.00", "tags": "", "description": "Create a random patrol of several waypoints around a given position.", "example": "[group _unit, getPos _unit, 1000] call BIS_fnc_taskPatrol;", "docSyntax": "[group, position, distance, blacklist] call BIS_fnc_taskPatrol", "syntax": "[<objGroup>,position,<scalar>,blacklist] call BIS_fnc_taskPatrol"}, "BIS_fnc_threat": {"version": "1.00", "tags": "", "description": "Calculates threat values of given unit.", "example": "_threatLevel = [player ] call BIS_fnc_threat;", "docSyntax": "[unit] call BIS_fnc_threat", "syntax": "[<objUnit>] call BIS_fnc_threat"}, "BIS_fnc_transportService": {"version": "1.00", "tags": "", "description": "/* File: transportService.sqf Description: Transportation system Parameter(s): 1: <object> unit allowed to use the transport system 2: <object> vehicle providing transport 3: <array> positions to be chosen by player; accepted strings are \"pickup\" and \"unload\", the second position is defined by the next paramter (OPTIONAL) 4: <position> (NEEDED ONLY IF PARAMETER #3 IS USED) Returns: N/A */ //MP framework init (used for move command given to transporter vehicle)", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_unitVector": {"version": "1.00", "tags": "", "description": "/************************************************************ Unit Vector Returns the unit vector for the passed vector (vector pointing in the same direction, but with magnitude == 1) This does not modify the original array. The array can have any number of elements (2, 3, etc). ************************************************************/", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_variableSpaceAdd": {"version": "1.00", "tags": "", "description": "Add element to variable from someone's variable space.", "example": "[ player,\"someVar\",1337,true,true ] call BIS_fnc_variableSpaceAdd;", "docSyntax": "[object,varName,element,global,inArray] call BIS_fnc_variableSpaceAdd", "syntax": "[<object>,varName,element,global,inArray] call BIS_fnc_variableSpaceAdd"}, "BIS_fnc_variableSpaceRemove": {"version": "1.00", "tags": "", "description": "Remove element from variable from someone's variable space.", "example": "[ player,\"someVar\",1337,true ] call BIS_fnc_variableSpaceRemove;", "docSyntax": "[object,varName,element,global,inArray] call BIS_fnc_variableSpaceRemove", "syntax": "[<object>,varName,element,global,inArray] call BIS_fnc_variableSpaceRemove"}, "BIS_fnc_vectorAdd": {"version": "1.00", "tags": "", "description": "Returns the sum of two vectors.", "example": "[[1,1,1], [2,5,3]] call BIS_fnc_vectorAdd; // returns [3,6,4]", "docSyntax": "[vector1, vector2] call BIS_fnc_vectorAdd", "syntax": "[vector1,vector2] call BIS_fnc_vectorAdd"}, "BIS_fnc_vectorDiff": {"version": "1.00", "tags": "", "description": "Returns a vector that is the difference between two vectors.", "example": "_vectorDiff = [[1,2,3], [5,6,7]] call BIS_fnc_vectorDiff;", "docSyntax": "[vector1, vector2] call BIS_fnc_vectorDiff", "syntax": "[vector1,vector2] call BIS_fnc_vectorDiff"}, "BIS_fnc_vectorFromXToY": {"version": "1.00", "tags": "", "description": "Returns a unit vector that 'points' from vector1 to vector2. This is a very useful function as it can be used with the velocity command to move an object from one position to another (i.e vector1 to vector2).", "example": "_resultVector = [getPosASL vehicle player, getPosASL airTarget] call BIS_fnc_vectorFromXToY;", "docSyntax": "[vector1, vector2] call BIS_fnc_vectorFromXToY", "syntax": "[vector1,vector2] call BIS_fnc_vectorFromXToY"}, "BIS_fnc_vectorMultiply": {"version": "1.00", "tags": "", "description": "Multiplies 3D vector by a scalar.", "example": "_newVector = [[1,2,3], 3] call BIS_fnc_vectorMultiply; // returns [3,6,9]", "docSyntax": "[vector, factor] call BIS_fnc_vectorMultiply", "syntax": "[vector,factor] call BIS_fnc_vectorMultiply"}, "BIS_fnc_version": {"version": "1.00", "tags": "", "description": "Detects which Arma 2 expansions and addons are available. Only works in Arma 2.", "example": "_availableExpansions = call BIS_fnc_version;", "docSyntax": "call BIS_fnc_version", "syntax": "call BIS_fnc_version"}, "BIS_fnc_zzRotate": {"version": "1.00", "tags": "", "description": "This function is non functional in Arma 3 because of undefined variables.", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_SOM_addSupportRequestFunc": {"version": "1.00", "tags": "", "description": "Function behind the Secondary Operations Manager module.", "example": "[[\"transport\", \"aerial_reconnaissance\", \"supply_drop\", \"tactical_airstrike\", \"artillery_barrage\", \"gunship_run\"], player] call BIS_SOM_addSupportRequestFunc;", "docSyntax": "[secops, unit] call BIS_SOM_addSupportRequestFunc", "syntax": "[secops,<objUnit>] call BIS_SOM_addSupportRequestFunc"}, "boundingCenter": {"version": "1.00", "tags": "", "description": "Returns the position of original (loaded) center of object in model coordinates.", "example": "_center = boundingCenter TruckOne", "docSyntax": "boundingCenter object", "syntax": "boundingCenter <object>"}, "buildingExit": {"version": "1.00", "tags": "", "description": "Returns the given indexed exit in a building. The returned value is in format Position.", "example": "_building buildingExit 0", "docSyntax": "building buildingExit index", "syntax": "building buildingExit <scalar>"}, "camConstuctionSetParams": {"version": "1.00", "tags": "", "description": "Sets construction camera parameters. To work with \"camconstruct\" object.", "example": "_camera camConstuctionSetParams [getPos player, 50, 20];", "docSyntax": "camera camConstuctionSetParams [[x,y,z], radius, maxAboveLand]", "syntax": "<objCamera> camConstuctionSetParams [[x,y,z],radius,maxAboveLand]"}, "cameraEffectEnableHUD": {"version": "1.00", "tags": "", "description": "Enable / disable showing of in-game UI during currently active camera effect. By default the HUD is off, which will make results of drawIcon3D invisible, for example.", "example": "cameraEffectEnableHUD true;", "docSyntax": "cameraEffectEnableHUD enable", "syntax": "cameraEffectEnableHUD <bool>"}, "cameraView": {"version": "1.00", "tags": "", "description": "Returns mode of active camera view. Mode is one of:", "example": "if (cameraOn == _vehicle && cameraView == \"External\") then { _vehicle switchCamera \"Internal\"; };", "docSyntax": "cameraView", "syntax": "cameraView"}, "camTarget": {"version": "1.00", "tags": "", "description": "Returns camera's target.", "example": "_someObject = camTarget _camera;", "docSyntax": "camTarget camera", "syntax": "camTarget <objCamera>"}, "canUnloadInCombat": {"version": "1.00", "tags": "", "description": "Check if cargo of this vehicle want to get out when in combat.", "example": "if (canUnloadInCombat _vehicle) then {...};", "docSyntax": "canUnloadInCombat vehicle", "syntax": "canUnloadInCombat <objVehicle>"}, "captiveNum": {"version": "1.00", "tags": "[AG] ", "description": "Checks whether the unit is a captive. If the unit is a vehicle, its commander is checked instead.", "example": "_captivity = captiveNum _unit;", "docSyntax": "captiveNum unit", "syntax": "captiveNum <objUnit>"}, "clearGroupIcons": {"version": "1.00", "tags": "", "description": "Removes all icon from group.", "example": "clearGroupIcons (group player);", "docSyntax": "clearGroupIcons group", "syntax": "clearGroupIcons <objGroup>"}, "clearOverlay": {"version": "1.00", "tags": "", "description": "Clear the current overlay.", "example": "clearOverlay _map,", "docSyntax": "clearOverlay map", "syntax": "clearOverlay <objMap>"}, "closeOverlay": {"version": "1.00", "tags": "", "description": "Closes the current overlay without committing.", "example": "-", "docSyntax": "closeOverlay map", "syntax": "closeOverlay <objMap>"}, "collapseObjectTree": {"version": "1.00", "tags": "", "description": "Collapse the object tree.", "example": "collapseObjectTree _map,", "docSyntax": "collapseObjectTree map", "syntax": "collapseObjectTree <objMap>"}, "commandChat": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Types text to the command radio channel. Must have assigned \"ItemRadio\" to see or transmit the messages. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "_soldierOne commandChat \"Show this text\";", "docSyntax": "unitName commandChat chatText", "syntax": "<objUnit> commandChat chatText"}, "commandingMenu": {"version": "1.00", "tags": "", "description": "Returns the name of the topmost commanding menu or \"\" if the menu is closed. For action menu visibility check see isActionMenuVisible.", "example": "waitUntil {commandingMenu == \"RscStatus\"}; hint \"Press 4, I'm bleeding\u00a0!\";", "docSyntax": "commandingMenu", "syntax": "commandingMenu"}, "commandRadio": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sends the audio message to the command radio channel. Must have assigned \"ItemRadio\" to send or receive the transmission. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne commandRadio \"messageOne\";", "docSyntax": "unit commandRadio radioName", "syntax": "<objUnit> commandRadio radioName"}, "commitOverlay": {"version": "1.00", "tags": "", "description": "Commit the current overlay.", "example": "commitOverlay _map,", "docSyntax": "commitOverlay map", "syntax": "commitOverlay <objMap>"}, "completedFSM": {"version": "1.00", "tags": "", "description": "Checks whether the given FSM is completed. The FSM handle is the number returned by the execFSM command.", "example": "_completed = completedFSM _fsmHandle;", "docSyntax": "completedFSM fsmHandle", "syntax": "completedFSM fsmHandle"}, "copyFromClipboard": {"version": "1.00", "tags": "", "description": "Return the content of the (text) clipboard.", "example": "hint copyFromClipboard;", "docSyntax": "copyFromClipboard", "syntax": "copyFromClipboard", "returns": "string"}, "copyToClipboard": {"version": "1.00", "tags": "", "description": "Copies ANSI text string to the clipboard. If Unicode support is desired, see forceUnicode.", "example": "copyToClipboard str _data;", "docSyntax": "copyToClipboard text", "syntax": "copyToClipboard <string>"}, "copyWaypoints": {"version": "1.00", "tags": "", "description": "Copy the chain of waypoints from source to target group. The target group will start to process waypoints from the first one.", "example": "group1 copyWaypoints group2;", "docSyntax": "groupTo copyWaypoints groupFrom", "syntax": "groupTo copyWaypoints groupFrom"}, "createAgent": {"version": "1.00", "tags": "[EG] ", "description": "Creates an agent of the given type. An agent does not have a group or leader or the standard soldier FSM associated with it - for instance, an enemy soldier spawned as an agent has limited AI and will do nothing when fired upon - which can be useful to limit the amount of AI processing being done in a mission with very large numbers of \"AI\".", "example": "private _agent = createAgent [\"B_Soldier_F\", getPosATL player, [], 0, \"FORM\"];", "docSyntax": "createAgent [type, position, markers, placement, special]", "syntax": "createAgent [type,position,markers,placement,special]"}, "createDiaryLink": {"version": "1.00", "tags": "", "description": "Creates a link to the section of diary given by subject. Record is selected based on given unit/object, diary record or task.", "example": "_link = createDiarySubject [\"Group\", player, \"Player\"]", "docSyntax": "createDiaryLink [subject, record, text]", "syntax": "createDiaryLink [<string>,record,<string>]"}, "createDiaryRecord": {"version": "1.00", "tags": "[EL] ", "description": "Creates a diary entry. Supported tags and their parameters: Show text", "example": "player createDiaryRecord [\"Diary\", [\"Intel\", \"Enemy base is on grid <marker name='enemyBase'>161170</marker>\"]]", "docSyntax": "unitName createDiaryRecord [subject, text, task, taskState, showTitle]", "syntax": "<objUnit> createDiaryRecord [<string>,<string>,<objTask>,taskState,showTitle]"}, "createDiarySubject": {"version": "1.00", "tags": "", "description": "Create a new subject page in a log.", "example": "_index =player createDiarySubject [\"myPage\",\"My page\"];", "docSyntax": "person createDiarySubject [subject, displayName, picture]", "syntax": "<objUnit> createDiarySubject [<string>,displayName,picture]"}, "createGearDialog": {"version": "1.00", "tags": "", "description": "Opens gear dialog for given unit. Alternatively use action command: player action [\"Gear\", player];", "example": "createGearDialog [player];", "docSyntax": "createGearDialog [unit, resource]", "syntax": "createGearDialog [<objUnit>,resource]"}, "createMenu": {"version": "1.00", "tags": "", "description": "Creates a previously added menu.", "example": "-", "docSyntax": "map createMenu index", "syntax": "<objMap> createMenu <scalar>"}, "createSimpleTask": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Creates a new Task. The task effect is local, it will only exist on the client it was added.", "example": "_currentTask = player createSimpleTask [\"NewTask\"];", "docSyntax": "person createSimpleTask [name, parentTask]", "syntax": "<objUnit> createSimpleTask [<string>,parentTask]"}, "createTask": {"version": "1.00", "tags": "", "description": "Create a new AI task (subtask of parentTask). Type is name of registered task type.", "docSyntax": "teamMember createTask [[type, parentTask], priority, name1, value1, (...), nameN, valueN]", "syntax": "teamMember createTask [[type,parentTask],priority,name1,value1,(...),nameN,valueN]"}, "createTeam": {"version": "1.00", "tags": "", "description": "Create a team and name it.", "example": "_team = createTeam [\"USMC_Team\", \"Fire Team Red\"];", "docSyntax": "createTeam [type, name]", "syntax": "createTeam [type,<string>]"}, "ctrlAddEventHandler": {"version": "1.00", "tags": "", "description": "Add an event handler (User Interface Event Handlers) to the given control. Returns id of the handler or -1 when failed.", "example": "_map ctrlAddEventHandler [\"draw\",\"_this call BIS_fnc_strategicMapOpen_draw\"];", "docSyntax": "control ctrlAddEventHandler [handler,function]", "syntax": "<uiControl> ctrlAddEventHandler [handler,function]"}, "ctrlAutoScrollDelay": {"version": "1.00", "tags": "", "description": "Returns number of seconds auto-scroll will wait before scroll and/or rewind. -2 if scrollbar not present.", "example": "_ctrlDelay = ctrlAutoScrollDelay _ctrlGroup;", "docSyntax": "ctrlAutoScrollDelay control", "syntax": "ctrlAutoScrollDelay <uiControl>"}, "ctrlAutoScrollRewind": {"version": "1.00", "tags": "", "description": "Returns true if auto-scroll should move back to start after it reaches the end.", "example": "_ctrlRewind = ctrlAutoScrollRewind _ctrlGroup;", "docSyntax": "ctrlAutoScrollRewind control", "syntax": "ctrlAutoScrollRewind <uiControl>"}, "ctrlAutoScrollSpeed": {"version": "1.00", "tags": "", "description": "Returns number of seconds to auto-scroll one line. -1 if auto-scroll is disabled. -2 if scrollbar not present.", "example": "_ctrlSpeed = ctrlAutoScrollSpeed _ctrlGroup;", "docSyntax": "ctrlAutoScrollSpeed control", "syntax": "ctrlAutoScrollSpeed <uiControl>"}, "ctrlMapCursor": {"version": "1.00", "tags": "", "description": "Changes the default cursor that appears when interacting with a map control to a custom one. Use an empty string to restore the default cursor. If the specified cursor does not exist, the default is used and no error is produced. ( NOT in case of Arma 3. Using an empty string will result in an error: \"No entry 'bin\\config.bin/CfgWrapperUI/Cursors.' ). The cursor is the name of a config entry from CfgWrapperUI / Cursors. This command has the following specifics:", "example": "_map ctrlMapCursor [\"Track\", \"Arrow\"];", "docSyntax": "control ctrlMapCursor [defaultCursor, newCursor]", "syntax": "<uiControl> ctrlMapCursor [defaultCursor,newCursor]"}, "ctrlMapMouseOver": {"version": "1.00", "tags": "", "description": "Returns description of map sign mouse cursor is over. Works with in-game map as well as 2D editor map in edit mode.", "example": "(uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_overFriendly\"]; _mouseover = if (count (ctrlMapMouseOver (uiNamespace getVariable \"_map\")) > 0) then { ctrlMapMouseOver (uiNamespace getVariable \"_map\") } else { [\"\"] }; if (_mouseover select 0 == \"task\" && str(_logic getVariable \"onTaskAssigned\")\u00a0!= str{}) then { //--- Task (uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_overMission\"]; } else { //--- Waypoint (uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_move\"]; };", "docSyntax": "ctrlMapMouseOver control", "syntax": "ctrlMapMouseOver <uiControl>"}, "ctrlRemoveAllEventHandlers": {"version": "1.00", "tags": "", "description": "Remove all event handlers from the given control.", "example": "_ctrlButton ctrlRemoveAllEventHandlers \"ButtonDown\";", "docSyntax": "control ctrlRemoveAllEventHandlers handlerName", "syntax": "<uiControl> ctrlRemoveAllEventHandlers handlerName"}, "ctrlRemoveEventHandler": {"version": "1.00", "tags": "", "description": "Remove a given event handler from the given control.", "example": "_map ctrlRemoveEventHandler [\"Draw\", _id];", "docSyntax": "control ctrlRemoveEventHandler [handler name,id]", "syntax": "<uiControl> ctrlRemoveEventHandler [handler <string>,<scalar>]"}, "ctrlSetAutoScrollDelay": {"version": "1.00", "tags": "", "description": "Sets number of second before auto-scroll starts/rewinds. Setter for ctrlAutoScrollDelay.", "example": "_ctrlGroup ctrlSetAutoScrollDelay 5;", "docSyntax": "control ctrlSetAutoScrollDelay delay", "syntax": "<uiControl> ctrlSetAutoScrollDelay <scalar>"}, "ctrlSetAutoScrollRewind": {"version": "1.00", "tags": "", "description": "Defines if scroll should rewind when auto-scroll reach end. Setter for ctrlAutoScrollRewind.", "example": "_ctrlGroup ctrlSetAutoScrollRewind true;", "docSyntax": "control ctrlSetAutoScrollRewind set", "syntax": "<uiControl> ctrlSetAutoScrollRewind set"}, "ctrlSetAutoScrollSpeed": {"version": "1.00", "tags": "", "description": "Sets number of second required to scroll to next line. If speed < 0, auto-scroll is disabled. Setter for ctrlAutoScrollSpeed.", "example": "_ctrlGroup ctrlSetAutoScrollSpeed 0.1;", "docSyntax": "control ctrlSetAutoScrollSpeed speed", "syntax": "<uiControl> ctrlSetAutoScrollSpeed <scalar>"}, "currentMagazine": {"version": "1.00", "tags": "", "description": "Returns class name of currently loaded vehicle's / unit's magazine.", "example": "_magazineClass = currentMagazine player;//Example: \"30Rnd_545x39_AK\"", "docSyntax": "currentMagazine vehicle", "syntax": "currentMagazine <objVehicle>"}, "currentTask": {"version": "1.00", "tags": "", "description": "Return current task of given person.", "example": "_currTask = currentTask player;", "docSyntax": "currentTask person", "syntax": "currentTask <objUnit>"}, "currentTasks": {"version": "1.00", "tags": "", "description": "Returns array with all uncompleted tasks for the given agent. getVariable could be used on Task to get the following special local variables from the task:", "example": "currentTasks teamMember _agent", "docSyntax": "currentTasks teamMember", "syntax": "currentTasks teamMember"}, "currentWaypoint": {"version": "1.00", "tags": "", "description": "Returns the index of the current waypoint contrary to misleading name. To determine the validity of the index, compare it to the waypoints count. If all waypoints are 'completed', then the index is 1 greater than the last valid index. If there are no waypoints, then the index is 0. By default, a group has 1 waypoint at their starting position, which is considered completed and so the currentWaypoint is 1.", "example": "_index = currentWaypoint group player;", "docSyntax": "currentWaypoint groupName", "syntax": "currentWaypoint groupName"}, "currentWeapon": {"version": "1.00", "tags": "", "description": "Return the name of the currently selected weapon (on the primary turret for vehicles).", "example": "_weaponClass = currentWeapon (vehicle player);//Example: \"M16A2GL\"", "docSyntax": "currentWeapon vehicle", "syntax": "currentWeapon <objVehicle>"}, "cursorTarget": {"version": "1.00", "tags": "", "description": "Returns the target pointed at by the player (usually with cross-hairs). The target has to be known to the player to some degree (knowsAbout > 0). If target is completely unknown, command returns objNull.", "example": "alive cursorTarget;", "docSyntax": "cursorTarget", "syntax": "cursorTarget", "returns": "object"}, "dateToNumber": {"version": "1.00", "tags": "", "description": "Convert a date to a float number, based on Jan 1st 00:00:00 = 0 and Dec 31st 23:59:59 = 1. The same day and time in leap year will be different after 28th of February and 23:59 on 31st of December will be 1.00274", "example": "_float = dateToNumber [2035,7,6,12,0]; //0.510959", "docSyntax": "dateToNumber date", "syntax": "dateToNumber date"}, "deleteEditorObject": {"version": "1.00", "tags": "", "description": "Delete the editor object. Requires all editor object links to be removed prior.", "example": "-", "docSyntax": "map deleteEditorObject object", "syntax": "<objMap> deleteEditorObject <object>"}, "deleteResources": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Delete (unregister) resources of the team member. Resources are deleted in the order they were added. Case insensitive.", "example": "teamMember _agent deleteResources [\"Legs\"];", "docSyntax": "teamMember deleteResources [resource1, resource2,...]", "syntax": "teamMember deleteResources [resource1,resource2,...]"}, "deleteTeam": {"version": "1.00", "tags": "", "description": "Destroy given team.", "example": "deleteTeam _team;", "docSyntax": "deleteTeam team", "syntax": "deleteTeam team"}, "detach": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Detaches previously attached with attachTo object.", "example": "obj1 attachTo [player]; detach obj1;", "docSyntax": "detach object", "syntax": "detach <object>"}, "diag_fps": {"version": "1.00", "tags": "", "description": "Returns average framerate calculated over last 16 frames.", "example": "diag_log diag_fps;", "docSyntax": "diag_fps", "syntax": "diag_fps", "type": "diagnoseStatement"}, "diag_fpsMin": {"version": "1.00", "tags": "", "description": "Returns minimal framerate. Calculated from the longest frame over last 16 frames.", "example": "_minfps = diag_fpsMin;", "docSyntax": "diag_fpsMin", "syntax": "diag_fpsMin", "type": "diagnoseStatement"}, "diag_frameNo": {"version": "1.00", "tags": "", "description": "Returns number of frame currently displayed.", "example": "_currFrameNo = diag_frameNo;", "docSyntax": "diag_frameNo", "syntax": "diag_frameNo", "type": "diagnoseStatement"}, "diag_log": {"version": "1.00", "tags": "", "description": "Dumps the argument's value to the report file. Each call creates a new line in the file.", "example": "diag_log time;", "docSyntax": "diag_log output", "syntax": "diag_log output", "type": "diagnoseStatement"}, "diag_tickTime": {"version": "1.00", "tags": "", "description": "Real time in seconds spent from the start of the game. On Windows the command uses timeGetTime.", "example": "_start = diag_tickTime; //code _stop = diag_tickTime; diag_log format [\"%1\",_stop - _start];", "docSyntax": "diag_tickTime", "syntax": "diag_tickTime", "type": "diagnoseStatement"}, "diarySubjectExists": {"version": "1.00", "tags": "", "description": "Checks whether given subject is present in the diary of given person.", "example": "_exists = player diarySubjectExists \"subjectName\"", "docSyntax": "person diarySubjectExists name", "syntax": "<objUnit> diarySubjectExists <string>"}, "directSay": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sends given audio message to the direct channel. Command operates just like xxxxRadio commands, but the sound is played over direct channel and is independent of fadeRadio. The message is defined in CfgRadio in the description.ext file or config radio protocol or a kbAddTopic. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "player directSay configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\"));", "docSyntax": "unit directSay radioName", "syntax": "<objUnit> directSay radioName"}, "disableConversation": {"version": "1.00", "tags": "", "description": "Disable the ability to talk to other people.", "example": "player disableConversation true", "docSyntax": "unitName disableConversation disable", "syntax": "<objUnit> disableConversation disable"}, "disableSerialization": {"version": "1.00", "tags": "", "description": "Disable saving of script containing this command. After this, the script can work with data types which do not support serialization (UI types). See Namespace serialization for more information.", "example": "disableSerialization; _display = findDisplay 46;", "docSyntax": "disableSerialization", "syntax": "disableSerialization"}, "displayAddEventHandler": {"version": "1.00", "tags": "", "description": "Adds an event handler to the given display. Returns the ID of the event handler, or -1 when failed.", "example": "moduleName_keyDownEHId = findDisplay 46 displayAddEventHandler [\"KeyDown\", \"hint str _this;\"];", "docSyntax": "display displayAddEventHandler [eventName, code]", "syntax": "<uiDisplay> displayAddEventHandler [eventName,<code>]"}, "displayRemoveAllEventHandlers": {"version": "1.00", "tags": "", "description": "Remove all event handlers from the given display.", "example": "(findDisplay 46) displayRemoveAllEventHandlers \"KeyDown\";", "docSyntax": "display displayRemoveAllEventHandlers eventName", "syntax": "<uiDisplay> displayRemoveAllEventHandlers eventName"}, "displayRemoveEventHandler": {"version": "1.00", "tags": "", "description": "Remove a given event handler from the given display.", "example": "mod_keyDownEHId = (findDisplay 46) displayRemoveEventHandler [\"keyDown\",5];", "docSyntax": "display displayRemoveEventHandler [handler name,id]", "syntax": "<uiDisplay> displayRemoveEventHandler [<string>,<scalar>]", "returns": "void"}, "drawLink": {"version": "1.00", "tags": "", "description": "The editor will draw a line between the two specified editor objects. Line type can be LINE or ARROW.", "example": "-", "docSyntax": "map drawLink [from,to,param type,line type,color]", "syntax": "<objMap> drawLink [from,to,param type,line type,<scalar>]"}, "editObject": {"version": "1.00", "tags": "", "description": "Show the edit object dialog for the given object.", "example": "-", "docSyntax": "map editObject object", "syntax": "<objMap> editObject <object>"}, "editorSetEventHandler": {"version": "1.00", "tags": "", "description": "Sets given event handler of given editor.", "example": "_map editorSetEventHandler [\"SelectObject\",\"\"];", "docSyntax": "map editorSetEventHandler [handler name,function]", "syntax": "<objMap> editorSetEventHandler [handler <string>,function]"}, "enableSaving": {"version": "1.00", "tags": "", "description": "Enable / disable saving of the game with an optional autosave.", "example": "enableSaving false; //\u00a0saving disabled, does autosave - same as [false, true] enableSaving true; //\u00a0saving enabled, doesn't autosave - same as [true, false] enableSaving [false, false]; //\u00a0saving disabled, doesn't autosave enableSaving [false, true]; //\u00a0saving disabled, does autosave enableSaving [true, false]; //\u00a0saving enabled, doesn't autosave enableSaving [true, true]; //\u00a0saving enabled, does autosave", "docSyntax": "enableSaving enable", "syntax": "enableSaving <bool>"}, "enableSentences": {"version": "1.00", "tags": "[EL] ", "description": "Enables radio transmissions to be heard and seen on screen. It does not affect KBTell conversations.", "example": "enableSentences false;", "docSyntax": "enableSentences enable", "syntax": "enableSentences <bool>"}, "enableSimulation": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Enables / disables simulation for the given entity. This command will affect entity simulation only locally. For a global and JIP enabled alternative see enableSimulationGlobal", "example": "player enableSimulation false;", "docSyntax": "entity enableSimulation state", "syntax": "entity enableSimulation state"}, "endLoadingScreen": {"version": "1.00", "tags": "[EL] ", "description": "Finishes loading screen started by startLoadingScreen.", "example": "startLoadingScreen [\"Loading My Mission\"]; //\u00a0code progressLoadingScreen 0.5; //\u00a0code endLoadingScreen;", "docSyntax": "endLoadingScreen", "syntax": "endLoadingScreen"}, "endMission": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Finish the mission. The end type can be:", "example": "endMission \"END1\";", "docSyntax": "endMission endType", "syntax": "endMission endType"}, "estimatedEndServerTime": {"version": "1.00", "tags": "", "description": "Estimated end of MP game in seconds converted to serverTime.", "example": "Estimated minutes left: _min = (ceil (estimatedEndServerTime - serverTime) / 60);", "docSyntax": "estimatedEndServerTime", "syntax": "estimatedEndServerTime"}, "evalObjectArgument": {"version": "1.00", "tags": "", "description": "Return argument in mission editor of a given object.", "example": "// returns string \"[1009.0351, 1319.4928]\" (findDisplay 128 displayCtrl 51) getObjectArgument [\"_unit_1\", \"POSITION\"] // returns array [1009.0351, 1319.4928] (findDisplay 128 displayCtrl 51) evalObjectArgument [\"_unit_1\", \"POSITION\"]", "docSyntax": "map evalObjectArgument [object, argument]", "syntax": "<objMap> evalObjectArgument [<object>,argument]"}, "execEditorScript": {"version": "1.00", "tags": "", "description": "Execute an editor script for the specified object.", "example": "_map execEditorScript [\"_team_1\",\"create\"];", "docSyntax": "map execEditorScript [object,script]", "syntax": "<objMap> execEditorScript [<object>,script]"}, "execFSM": {"version": "1.00", "tags": "", "description": "Execute scripted FSM and return the FSM handle or 0 when failed. The FSM file is first searched in the mission folder, then in the campaign scripts folder and finally in the global scripts folder. Argument (if any) are available in _this variable inside FSM. Variables set inside FSMs can be read/modified externally, using setFSMVariable and getFSMVariable commands.", "example": "_id = player execFSM \"test.fsm\";", "docSyntax": "arguments execFSM fsmFilePath", "syntax": "arguments execFSM fsmFilePath", "type": "executionStatement"}, "faction": {"version": "1.00", "tags": "[AG] ", "description": "Gets unit faction. Factions were introduced in Arma 2 and are defined under CfgFactionClasses.", "example": "private _playerFaction = faction player;", "docSyntax": "faction unitName", "syntax": "faction <objUnit>"}, "failMission": {"version": "1.00", "tags": "", "description": "Finish the mission. If the server is set to run persistent mission, failMission will not end the mission when last player gets kicked to the lobby. Use endMission to end the mission. The end type can be:", "example": "failMission \"LOSER\";", "docSyntax": "failMission endtype", "syntax": "failMission endtype"}, "findEditorObject": {"version": "1.00", "tags": "", "description": "Return object that matches the provided reference.", "example": "-", "docSyntax": "map findEditorObject value", "syntax": "<objMap> findEditorObject <scalar>"}, "findEmptyPosition": {"version": "1.00", "tags": "", "description": "Searches for an empty position around specified position. The search starts looking for an empty position at a minimum distance of [radius] from the [center] and looks as far away as [radius + maxDistance]. If a [vehicleType] parameter is specified, then the search will look for an empty positions that is big enough to hold that vehicle type. If an empty position isn't found, an empty array is returned. This command ignores moving objects present within search area. The search area could be preloaded with findEmptyPositionReady command. See also: BIS_fnc_findSafePos.", "example": "_position = (getPosATL player) findEmptyPosition [0,100];", "docSyntax": "center findEmptyPosition [radius, maxDistance, vehicleType]", "syntax": "center findEmptyPosition [radius,maxDistance,vehicleType]"}, "findEmptyPositionReady": {"version": "1.00", "tags": "", "description": "Preloads area to be used with findEmptyPosition command and returns true when area is ready. The size of the area preloaded is from center - radius - maxDistance to center + radius + maxDistance", "example": "Preload aread within 500m: _ready = _center findEmptyPositionReady [0, 500];", "docSyntax": "center findEmptyPositionReady [radius, maxDistance]", "syntax": "center findEmptyPositionReady [radius,maxDistance]"}, "forEachMember": {"version": "1.00", "tags": "", "description": "Executes the given command recursively for both teams and agents that are members of the given team. For teams only use forEachMemberTeam. For agents only use forEachMemberAgent.", "docSyntax": "command forEachMember team", "syntax": "command forEachMember team"}, "forEachMemberAgent": {"version": "1.00", "tags": "", "description": "Executes the given command recursively for each agent that is a member of the given team. For just teams use forEachMemberTeam. For both teams and agents use forEachMember.", "docSyntax": "command forEachMemberAgent team", "syntax": "command forEachMemberAgent team"}, "forEachMemberTeam": {"version": "1.00", "tags": "", "description": "Executes the given command recursively for each team that is a member of the given team. For just agents use forEachMemberAgent. For both teams and agents use forEachMember.", "docSyntax": "command forEachMemberTeam team", "syntax": "command forEachMemberTeam team"}, "fromEditor": {"version": "1.00", "tags": "", "description": "Return if given team was inserted directly from mission editor.", "example": "_fromEditor = fromEditor _member", "docSyntax": "fromEditor teamMember", "syntax": "fromEditor teamMember"}, "getEditorCamera": {"version": "1.00", "tags": "", "description": "Fetches a reference to the mission editor camera.", "example": "-", "docSyntax": "getEditorCamera map", "syntax": "getEditorCamera <objMap>"}, "getEditorMode": {"version": "1.00", "tags": "", "description": "Returns the current mode of the editor.", "example": "-", "docSyntax": "getEditorMode map", "syntax": "getEditorMode <objMap>"}, "getEditorObjectScope": {"version": "1.00", "tags": "", "description": "Returns the editor object scope of the specified editor object.", "example": "-", "docSyntax": "map getEditorObjectScope object", "syntax": "<objMap> getEditorObjectScope <object>"}, "getFriend": {"version": "1.00", "tags": "[AG] ", "description": "Returns if sides are friendly or hostile. For a value smaller than 0.6 it results in being enemy, otherwise it is friendly. See also Side relations.", "example": "value = west getFriend east;", "docSyntax": "side1 getFriend side2", "syntax": "side1 getFriend side2"}, "getFSMVariable": {"version": "1.00", "tags": "", "description": "Return the value of variable in the variable space of given FSM. The FSM handle is the number returned by the execFSM command.", "example": "_handle getFSMVariable \"_foo\";", "docSyntax": "FSMhandle getFSMVariable name", "syntax": "FSMhandle getFSMVariable <string>"}, "getGroupIcon": {"version": "1.00", "tags": "[AG] ", "description": "Get group icon properties.", "example": "_grpIconId = _group getVariable \"BIS_MARTA_ICON_TYPE\"; _grpIcon = _group getGroupIcon _grpIconId;", "docSyntax": "group getGroupIcon ID", "syntax": "<objGroup> getGroupIcon <scalar>"}, "getGroupIconParams": {"version": "1.00", "tags": "", "description": "Returns group icons params used for command bar drawing such as color, text, scale, visibility, waypoint visibility, waypoint color.", "example": "_iconParams = getGroupIconParams group player;", "docSyntax": "getGroupIconParams group", "syntax": "getGroupIconParams <objGroup>"}, "getGroupIcons": {"version": "1.00", "tags": "[AG] ", "description": "Returns all group icons. [id,icon,[offsetx,offsety],[..],..]", "docSyntax": "getGroupIcons group", "syntax": "getGroupIcons <objGroup>"}, "getObjectArgument": {"version": "1.00", "tags": "", "description": "Return name of object argument in mission editor.", "example": "// returns string \"[1009.0351, 1319.4928]\" (findDisplay 128 displayCtrl 51) getObjectArgument [\"_unit_1\", \"POSITION\"] // returns array [1009.0351, 1319.4928] (findDisplay 128 displayCtrl 51) evalObjectArgument [\"_unit_1\", \"POSITION\"]", "docSyntax": "map getObjectArgument [object, argument]", "syntax": "<objMap> getObjectArgument [<object>,argument]"}, "getObjectChildren": {"version": "1.00", "tags": "", "description": "Return a list of all the children of the specified object.", "example": "-", "docSyntax": "map getObjectChildren object", "syntax": "<objMap> getObjectChildren <object>"}, "getObjectProxy": {"version": "1.00", "tags": "", "description": "Return the proxy object associated with the given editor object.", "example": "(findDisplay 128 displayCtrl 51) getObjectProxy \"_unit_1\" // returns the object 'B 1-1-A:1 (Sean Johnson)'", "docSyntax": "map getObjectProxy object", "syntax": "<objMap> getObjectProxy <object>"}, "groupIconSelectable": {"version": "1.00", "tags": "", "description": "Returns whether or not group icons raise onGroupIconClick, onGroupIconOverEnter and onGroupIconOverLeave events.", "example": "hint str groupIconSelectable;", "docSyntax": "groupIconSelectable", "syntax": "groupIconSelectable"}, "groupIconsVisible": {"version": "1.00", "tags": "", "description": "Returns array with group icons visibility. A getter for setGroupIconsVisible", "example": "hint str groupIconsVisible;", "docSyntax": "groupIconsVisible", "syntax": "groupIconsVisible"}, "groupSelectedUnits": {"version": "1.00", "tags": "", "description": "Returns selected units in source group for normal commanding mode (individual units). For the High Command equivalent, see hcSelected.", "example": "_selectedUnits = groupSelectedUnits player;", "docSyntax": "groupSelectedUnits unit", "syntax": "groupSelectedUnits <objUnit>"}, "groupSelectUnit": {"version": "1.00", "tags": "", "description": "Selects a unit from player's group. If player is the leader, the effect of this command is similar to player pressing F1, F2, F3... buttons to highlight units in his squad, after which the unit command menu is shown. If leader is AI, player will get usual communication menu to interact with the leader.", "example": "After leaving menu, deselect all units (command menu is not opened -> no selection){ player groupSelectUnit [_x, false]; } forEach (groupSelectedUnits player);", "docSyntax": "player groupSelectUnit [unit, select]", "syntax": "<objUnit> groupSelectUnit [<objUnit>,select]"}, "hcAllGroups": {"version": "1.00", "tags": "", "description": "Returns selected groups in high command.", "example": "hcAllGroups player;", "docSyntax": "hcAllGroups unit", "syntax": "hcAllGroups <objUnit>"}, "hcGroupParams": {"version": "1.00", "tags": "", "description": "Returns parameters describing group in high command bar. Return value is array in format [groupName, teamName] or [] if error. Possible values for team name:", "example": "player hcGroupParams someGroup;", "docSyntax": "unit hcGroupParams group", "syntax": "<objUnit> hcGroupParams <objGroup>"}, "hcLeader": {"version": "1.00", "tags": "", "description": "Returns group's high command commander.", "example": "_leader = hcLeader groupName;", "docSyntax": "hcLeader group", "syntax": "hcLeader <objGroup>"}, "hcRemoveAllGroups": {"version": "1.00", "tags": "", "description": "Remove all groups from unit's high command bar.", "example": "hcRemoveAllGroups player;", "docSyntax": "hcRemoveAllGroups unit", "syntax": "hcRemoveAllGroups <objUnit>"}, "hcRemoveGroup": {"version": "1.00", "tags": "", "description": "Removes group from unit's high command bar.", "example": "player hcRemoveGroup BIS_group;", "docSyntax": "unit hcRemoveGroup group", "syntax": "<objUnit> hcRemoveGroup <objGroup>"}, "hcSelected": {"version": "1.00", "tags": "", "description": "Returns selected groups in high command.", "example": "array = hcSelected unit;", "docSyntax": "hcSelected unit", "syntax": "hcSelected <objUnit>"}, "hcSelectGroup": {"version": "1.00", "tags": "", "description": "Select given group in high command bar.", "example": "player hcSelectGroup [group_1,group_2];", "docSyntax": "unit hcSelectGroup array", "syntax": "<objUnit> hcSelectGroup <array>"}, "hcSetGroup": {"version": "1.00", "tags": "", "description": "Add group to unit's high command bar.", "example": "unit hcSetGroup [group, \"HQ\", \"teamred\"];", "docSyntax": "unit hcSetGroup [group, groupName, team]", "syntax": "<objUnit> hcSetGroup [<objGroup>,groupName,team]"}, "hcShowBar": {"version": "1.00", "tags": "", "description": "Shows or hides high command bar. There must be some groups under HC command to show HC bar.", "example": "hcShowBar true;", "docSyntax": "hcShowBar bool", "syntax": "hcShowBar <bool>"}, "hcShownBar": {"version": "1.00", "tags": "", "description": "Return true if the high command bar is shown/active.", "example": "if (hcShownBar) then {hint \"HC bar is active\";};", "docSyntax": "hcShownBar", "syntax": "hcShownBar"}, "hintSilent": {"version": "1.00", "tags": "[EL] ", "description": "Same as hint, but without a sound.", "example": "hintSilent format [\"Hello, %1!\", name player];", "docSyntax": "hintSilent text", "syntax": "hintSilent <string>"}, "importAllGroups": {"version": "1.00", "tags": "", "description": "Imports all groups into the RTE.", "example": "-", "docSyntax": "importAllGroups map", "syntax": "importAllGroups <objMap>"}, "inputAction": {"version": "1.00", "tags": "", "description": "Return the state of input devices mapped to given input action.", "example": "inputAction \"leanLeft\" Returns 1 if the button mapped to \"leanLeft\" is pressed currently else 0.", "docSyntax": "inputAction name", "syntax": "inputAction <string>"}, "insertEditorObject": {"version": "1.00", "tags": "", "description": "Insert an object to the editor and assign arguments. Create script is,not called. Returns the ID of the new EditorObject. Subtype class is,optional.", "example": "-", "docSyntax": "map insertEditorObject [type,value,[name1,value1,...],subtype class]", "syntax": "<objMap> insertEditorObject [type,<scalar>,[name1,value1,...],subtype class]"}, "isAgent": {"version": "1.00", "tags": "", "description": "Check if team member is an agent.", "example": "isAgent teamMember _unit;", "docSyntax": "isAgent teamMember", "syntax": "isAgent teamMember"}, "isDedicated": {"version": "1.00", "tags": "", "description": "Return true if the machine (executing the command) is a dedicated multiplayer server. In single player returns false.", "example": "if (isDedicated) then {diag_log \"Dedicated Server on the run\u00a0!\";};", "docSyntax": "isDedicated", "syntax": "isDedicated"}, "isFlatEmpty": {"version": "1.00", "tags": "", "description": "Checks given position against given filter params. Filter includes checks for:", "example": "Check if player position is over land: _overLand =\u00a0!(position player isFlatEmpty [-1, -1, -1, -1, 0, false] isEqualTo []);", "docSyntax": "position isFlatEmpty [minDistance, mode, maxGradient, maxGradientRadius, overLandOrWater, shoreLine, ignoreObject]", "syntax": "position isFlatEmpty [minDistance,mode,maxGradient,maxGradientRadius,overLandOrWater,shoreLine,ignoreObject]"}, "isMultiplayer": {"version": "1.00", "tags": "", "description": "Return true if multiPlayer.", "example": "if (isMultiplayer) then { //...block }", "docSyntax": "isMultiplayer", "syntax": "isMultiplayer"}, "isOnRoad": {"version": "1.00", "tags": "[AG] ", "description": "Checks if given position is inside road segment. Same as roadAt, only return is boolean instead of road object.", "example": "_objOnRoad = isOnRoad player;", "docSyntax": "isOnRoad position", "syntax": "isOnRoad position"}, "isRealTime": {"version": "1.00", "tags": "", "description": "Returns true if the mission editor is operating in real time mode.", "example": "_isRealTime = isRealTime _map", "docSyntax": "isRealTime map", "syntax": "isRealTime <objMap>"}, "isShowing3DIcons": {"version": "1.00", "tags": "", "description": "Returns true if the editor is set to draw 3D icons.", "example": "-", "docSyntax": "isShowing3DIcons map", "syntax": "isShowing3DIcons <objMap>"}, "items": {"version": "1.00", "tags": "[AG] ", "description": "Returns an array of names of all unit's stored items, including weapons but excluding magazines (see itemsWithMagazines) and assignedItems.", "example": "_itemsPlayer = items player;", "docSyntax": "items unit", "syntax": "items <objUnit>"}, "joinAs": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Joins the unit to the given group, if position id is available, this one is used.", "example": "player joinAs [_group, 4];", "docSyntax": "unit joinAs [group, id]", "syntax": "<objUnit> joinAs [<objGroup>,<scalar>]"}, "joinAsSilent": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Joins the unit to the given group, if position id is available, this one is used. Avoid any radio communication related to joining.", "example": "player joinAsSilent [_group, 4];", "docSyntax": "unit joinAsSilent [group, id]", "syntax": "<objUnit> joinAsSilent [<objGroup>,<scalar>]"}, "kbAddDatabase": {"version": "1.00", "tags": "", "description": "Register knowledge base database to given person. See Conversations for more details.", "example": "_hasBeenAdded = _unit kbAddDatabase \"chat.txt\"", "docSyntax": "person kbAddDatabase fileName", "syntax": "<objUnit> kbAddDatabase fileName"}, "kbAddDatabaseTargets": {"version": "1.00", "tags": "", "description": "Register target list knowledge base database to given person. See Conversations for more details.", "example": "_hasBeenAdded = _unit kbAddDatabaseTargets \"chat.txt\"", "docSyntax": "Boolean = person kbAddDatabaseTargets fileName", "syntax": "<bool> = <objUnit> kbAddDatabaseTargets fileName"}, "kbAddTopic": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Register conversation topic to given person. See Conversations for more details.", "example": "player kbAddTopic [\"myTest\", \"myTest.bikb\", \"myTest.fsm\", compile preprocessFileLineNumbers \"myTest.sqf\"];", "docSyntax": "person kbAddTopic [topicName, conversationFile, fsmFile, eventHandler]", "syntax": "<objUnit> kbAddTopic [topicName,conversationFile,fsmFile,eventHandler]"}, "kbHasTopic": {"version": "1.00", "tags": "[AL] ", "description": "Check if conversation topic was registered to given person. See Conversations for more details.", "example": "_obiHasTopic = player kbHasTopic \"helloThereGeneralK\";", "docSyntax": "person kbHasTopic topicName", "syntax": "<objUnit> kbHasTopic topicName"}, "kbReact": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Pass a non-verbal communication to the receiver. This command does as if the sentence was said and triggers the reaction scripts (AI FSM or player's conversation EH). See Conversations for more details.", "example": "// will trigger as if unit1 said the sentence (via kbTell) // unit2's FSM will react accordingly. unit1 kbReact [unit2, \"topicName\", \"speech1\"];", "docSyntax": "person kbReact [receiver, topicName, sentenceID(, argumentArray1, argumentArray2, \u2026)]", "syntax": "<objUnit> kbReact [receiver,topicName,sentenceID(,argumentArray1,argumentArray2,\u2026)]"}, "kbRemoveTopic": {"version": "1.00", "tags": "", "description": "Unregister conversation topic from given person. See Conversations for more details.", "example": "_unit1 kbRemoveTopic \"howsTheWeather\";", "docSyntax": "person kbRemoveTopic topicName", "syntax": "<objUnit> kbRemoveTopic topicName"}, "kbTell": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Make the person tell to the receiver the sentence. See Conversations for more details.", "example": "player kbTell [BIS_HQ, \"myTopic\", \"playerSentence1\"];", "docSyntax": "person kbTell [receiver, topicName, sentenceClass(, argumentArray1, argumentArray2, (\u2026), forceRadio)]", "syntax": "<objUnit> kbTell [receiver,topicName,sentenceClass(,argumentArray1,argumentArray2,(\u2026),forceRadio)]"}, "kbWasSaid": {"version": "1.00", "tags": "[AG] ", "description": "Check if given item was said by person to someone. See Conversations for more details.", "example": "player kbWasSaid [otherUnit, \"myTopic\", \"mySentenceID\", 3];", "docSyntax": "person kbWasSaid [receiver, topic, sentenceID, maxAge]", "syntax": "<objUnit> kbWasSaid [receiver,topic,sentenceID,maxAge]"}, "landResult": {"version": "1.00", "tags": "", "description": "Return the result of helicopter landing position searching (performed, after land command).", "example": "_result = landResult BIS_heli;", "docSyntax": "landResult helicopter", "syntax": "landResult helicopter"}, "leaveVehicle": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Ceases the using of the vehicle by a group and unassigns vehicle from the group. If the argument is a single unit, the vehicle will be unassigned from unit's group. After vehicle is unassigned from the group, each individual crew member then unassigned from the vehicle.", "example": "_unit leaveVehicle _vehicle", "docSyntax": "group leaveVehicle vehicle", "syntax": "<objGroup> leaveVehicle <objVehicle>"}, "lifeState": {"version": "1.00", "tags": "[AG] ", "description": "Returns the life state of the given unit.", "example": "private _lifeState = lifeState player;", "docSyntax": "lifeState unit", "syntax": "lifeState <objUnit>"}, "listObjects": {"version": "1.00", "tags": "", "description": "Return the list of all objects of given type.", "example": "-", "docSyntax": "map listObjects type", "syntax": "<objMap> listObjects type"}, "lnbAddArray": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Adds list of rows of strings.", "example": "lnbAddArray [102,[[[\"#1\"],[1],[\"#1\"]]]];", "docSyntax": "lnbAddArray [idc, [[[text,text],[value,..],[data,..]],[[text,text],[value,..],[data,..]],]]", "syntax": "lnbAddArray [<scalar>,[[[<string>,<string>],[<scalar>,..],[data,..]],[[<string>,<string>],[<scalar>,..],[data,..]],]]"}, "lnbAddColumn": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Adds an column at given position. It returns the index of the newly added column.", "example": "_ctrl lnbAddColumn 0.8;", "docSyntax": "_ctrl lnbAddColumn position", "syntax": "_ctrl lnbAddColumn position"}, "lnbAddRow": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Adds a row of strings.", "example": "lnbAddRow [1, [\"COL1\", \"COL2\"]];", "docSyntax": "lnbAddRow [idc, data]", "syntax": "lnbAddRow [<scalar>,data]"}, "lnbClear": {"version": "1.00", "tags": "", "description": "Clears all items in the given listbox or combobox.", "example": "lnbClear _ctrl;", "docSyntax": "lnbClear idc", "syntax": "lnbClear <scalar>"}, "lnbColor": {"version": "1.00", "tags": "", "description": "Returns the text color of the item with the given position of the 2D listbox. The color is returned in format Color (RGBA).", "example": "_ctrl lnbColor [0,0];", "docSyntax": "lnbColor [idc, [row, column]]", "syntax": "lnbColor [<scalar>,[<scalar>,<scalar>]]"}, "lnbCurSelRow": {"version": "1.00", "tags": "", "description": "Returns the index of the selected row id 2D listbox.", "example": "lnbCurSelRow _ctrl;", "docSyntax": "lnbCurSelRow idc", "syntax": "lnbCurSelRow <scalar>"}, "lnbData": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Returns the additional text (invisible) in an item with the given position of the 2D listbox.", "example": "_ctrl lnbData [lnbCurSelRow _ctrl,0]; //\u00a0\"#1\"", "docSyntax": "lnbData [idc, [row, column]]", "syntax": "lnbData [<scalar>,[<scalar>,<scalar>]]"}, "lnbDeleteColumn": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Removes column with given index from ListNBox control.", "example": "_ctrl lnbDeleteColumn 1;", "docSyntax": "lnbDeleteColumn [idc, index]", "syntax": "lnbDeleteColumn [<scalar>,<scalar>]"}, "lnbDeleteRow": {"version": "1.00", "tags": "", "description": "Removes row with the given index from the given listbox or combobox.", "example": "_ctrl lnbDeleteRow 1;", "docSyntax": "_ctrl lnbDeleteRow row", "syntax": "_ctrl lnbDeleteRow <scalar>"}, "lnbGetColumnsPosition": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Returns relative screen X of ListNBox control columns position [0.1,0.3,0.6...]. Use lnbSetColumnsPos to set positions.", "example": "lnbGetColumnsPosition _ctrl;", "docSyntax": "lnbGetColumnsPosition _ctrl", "syntax": "lnbGetColumnsPosition _ctrl"}, "lnbPicture": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Returns the picture name or path of the item with the given position of the 2D listbox.", "example": "lnbPicture [200, [1, 1]];", "docSyntax": "lnbPicture [idc, [row, column]]", "syntax": "lnbPicture [<scalar>,[<scalar>,<scalar>]]"}, "lnbSetColor": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Sets the color of the item with the given position of the 2D listbox. Color is in format Color (RGBA).", "example": "_ctrl lnbSetColor [[0,0], [1,0,0,1]];", "docSyntax": "lnbSetColor [idc, [row, column], color]", "syntax": "lnbSetColor [<scalar>,[<scalar>,<scalar>],<scalar>]"}, "lnbSetColumnsPos": {"version": "1.00", "tags": "", "description": "Sets relative screen X for ListNBox control columns positions. Setter for lnbGetColumnsPosition.", "example": "lnbSetColumnsPos [101, [0.1,0.5,0.7]];", "docSyntax": "lnbSetColumnsPos [idc, positions]", "syntax": "lnbSetColumnsPos [<scalar>,positions]"}, "lnbSetCurSelRow": {"version": "1.00", "tags": "", "description": "Selects the row with the given index of the 2D listbox.", "example": "disableSerialization; _ctrl = (findDisplay 300) displayCtrl 304; _ctrl lnbSetCurSelRow 1;", "docSyntax": "lnbSetCurSelRow [idc, index]", "syntax": "lnbSetCurSelRow [<scalar>,<scalar>]"}, "lnbSetData": {"version": "1.00", "tags": "", "description": "Sets the additional text (invisible) on the item with the given position of the 2D listbox.", "example": "lnbSetData [123, [0,0],\"#1\"];", "docSyntax": "lnbSetData [idc, [row, column], data]", "syntax": "lnbSetData [<scalar>,[<scalar>,<scalar>],data]"}, "lnbSetPicture": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Sets the picture in the item with the given position of the 2D listbox.", "example": "lnbSetPicture [1, [0, 0], \"Picture\"];", "docSyntax": "lnbSetPicture [idc, [row, column], picturePathOrName]", "syntax": "lnbSetPicture [<scalar>,[<scalar>,<scalar>],picturePathOrName]"}, "lnbSetText": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Sets the text in the item with the given position of the 2D listbox.", "example": "lnbSetText [101, [0,1], \"#1\"];", "docSyntax": "lnbSetText [idc, [row, column], data]", "syntax": "lnbSetText [<scalar>,[<scalar>,<scalar>],data]"}, "lnbSetValue": {"version": "1.00", "tags": "", "description": "Sets the additional integer value in the item with the position index of the 2D listbox.", "example": "_ctrl lnbSetValue [[0,0],1];", "docSyntax": "lnbSetValue [idc, [row, column], value]", "syntax": "lnbSetValue [<scalar>,[<scalar>,<scalar>],<scalar>]"}, "lnbSize": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Returns size of 2D listbox or combobox as [rows, columns].", "example": "lnbSize _control;", "docSyntax": "lnbSize controlOrIDC", "syntax": "lnbSize controlOrIDC"}, "lnbText": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Returns the shown text in the item with the given position of the given 2D listbox.", "example": "_ctrl lnbText [0,0];", "docSyntax": "control lnbText [row,column]", "syntax": "<uiControl> lnbText [<scalar>,<scalar>]"}, "lnbValue": {"version": "1.00", "tags": "", "description": "Returns the additional integer value in the item with the given position of the 2D listbox.", "example": "_ctrl lnbValue [0,0]; //\u00a01, default is 0 if value is String set by lnbSetValue", "docSyntax": "lnbValue [idc, [row, column]]", "syntax": "lnbValue [<scalar>,[<scalar>,<scalar>]]"}, "loadGame": {"version": "1.00", "tags": "", "description": "Loads game from the last autosave made with saveGame. If no autosave exists, restarts the mission. When used in campaign it will also deduct 1 life, defined in:", "example": "loadGame;", "docSyntax": "loadGame", "syntax": "loadGame"}, "loadOverlay": {"version": "1.00", "tags": "", "description": "Creates the load overlay dialog for the specified type of overlay.", "example": "-", "docSyntax": "map loadOverlay config", "syntax": "<objMap> loadOverlay config"}, "locationNull": {"version": "1.00", "tags": "", "description": "A non-existing Location. To compare non-existent locations use isNull or isEqualTo:", "example": "!isNull locationNull; // false", "docSyntax": "locationNull", "syntax": "locationNull"}, "lockCargo": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Lock all cargo positions of a vehicle or lock by index. This command will remove user \"get in\" action (not get out) but will also stop player getting into vehicle via script commands (e.g moveInCargo) unlike lock command.", "example": "vehicleName lockCargo true;", "docSyntax": "vehicle lockCargo lock", "syntax": "<objVehicle> lockCargo lock"}, "lockDriver": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Lock the driver position of the vehicle. This command must be executed where vehicle is local. This command will remove user get in action (not get out) but will also stop player getting into vehicle via script commands unlike lock command", "example": "vehicleName lockDriver true;", "docSyntax": "vehicle lockDriver lock", "syntax": "<objVehicle> lockDriver lock"}, "lockedCargo": {"version": "1.00", "tags": "", "description": "Check whether cargo position of the vehicle is locked.", "example": "_result = vehicleName lockedCargo 0;", "docSyntax": "vehicle lockedCargo cargoIndex", "syntax": "<objVehicle> lockedCargo cargoIndex"}, "lockedDriver": {"version": "1.00", "tags": "", "description": "Check whether driver position of the vehicle turret is locked.", "example": "_driverLocked = lockedDriver vehicle player;", "docSyntax": "lockedDriver vehicle", "syntax": "lockedDriver <objVehicle>"}, "lockedTurret": {"version": "1.00", "tags": "", "description": "Check whether gunner position of the vehicle turret is locked.", "example": "_locked = tank lockedTurret [0];", "docSyntax": "vehicle lockedTurret turretPath", "syntax": "<objVehicle> lockedTurret turretPath"}, "lockTurret": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Lock the gunner position of the vehicle turret. This command must be executed where vehicle is local. This command will remove user get in action (not get out) but will also stop player getting into vehicle via script commands unlike lock command", "example": "vehicleName lockTurret [[0,0], true];", "docSyntax": "vehicle lockTurret [turret path,lock]", "syntax": "<objVehicle> lockTurret [turret path,lock]"}, "lookAtPos": {"version": "1.00", "tags": "", "description": "Point the camera and center the map on the position.", "example": "findDisplay 12 lookAtPos [0,0,0];", "docSyntax": "map lookAtPos position", "syntax": "<objMap> lookAtPos position"}, "markerAlpha": {"version": "1.00", "tags": "[AG] ", "description": "Gets the marker alpha. See setMarkerAlpha.", "example": "AlphaMarker = markerAlpha \"myMarker;", "docSyntax": "markerAlpha markerName", "syntax": "markerAlpha <string>"}, "markerBrush": {"version": "1.00", "tags": "", "description": "Gets the marker brush. See setMarkerBrush.", "example": "if (markerBrush \"Marker1\" == \"Solid\") then {hint \"Marker1 is solid!\"}", "docSyntax": "markerBrush name", "syntax": "markerBrush <string>"}, "markerShape": {"version": "1.00", "tags": "[AG] ", "description": "Gets the marker shape. See setMarkerShape for a list of strings that can be returned. Possible return values:", "example": "if (markerShape \"Marker1\" == \"RECTANGLE\") then {hint \"Marker1 is a rectangle!\"}", "docSyntax": "markerShape name", "syntax": "markerShape <string>"}, "members": {"version": "1.00", "tags": "", "description": "Return a list of members in given team.", "example": "_members = members _team", "docSyntax": "members team", "syntax": "members team"}, "missionNamespace": {"version": "1.00", "tags": "", "description": "Returns the global namespace attached to mission.", "example": "missionNamespace setVariable [\"YourString\",3];//Same as: YourString = 3; _yourString = missionNamespace getVariable \"YourString\";", "docSyntax": "missionNamespace", "syntax": "missionNamespace"}, "morale": {"version": "1.00", "tags": "", "description": "Checks a current morale level of the unit (-1..+1).", "example": "morale (leader player);//result is 0.5", "docSyntax": "morale unit", "syntax": "morale <objUnit>"}, "moveObjectToEnd": {"version": "1.00", "tags": "", "description": "Shifts an editor object to the end of the objects array. This means,that the object will be drawn last (after all other objects).", "example": "-", "docSyntax": "map moveObjectToEnd object", "syntax": "<objMap> moveObjectToEnd <object>"}, "moveOut": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Moves the soldier out of the vehicle.", "example": "{if (lifeState _x == \"UNCONSCIOUS\") then {moveOut _x}} forEach crew cursorTarget;", "docSyntax": "moveOut soldier", "syntax": "moveOut soldier"}, "moveTime": {"version": "1.00", "tags": "", "description": "Returns the current time of the most important RTM animation currently being played on the soldier.", "example": "moveTime player;", "docSyntax": "moveTime soldier", "syntax": "moveTime soldier"}, "nearEntities": {"version": "1.00", "tags": "[AG] ", "description": "Finds entities inside a sphere with the given radius. If the alternative syntax is used, only entities of given types or subtypes are listed. Entities returned are not sorted by distance. This command doesn't return dead entities or entities inside vehicles. If you need to return those, use entities command.", "example": "_list = player nearEntities 20; _list = ASLToAGL getPosASL player nearEntities 50; _list = player nearEntities [\"Man\", 1000]; _list = ASLToAGL getPosASL player nearEntities [\"LaserTarget\", 3000]; _list = player nearEntities [[\"Car\", \"Motorcycle\", \"Tank\"], 50]; _list = ASLToAGL getPosASL player nearEntities [[\"Man\", \"Air\", \"Car\", \"Motorcycle\", \"Tank\"], 200];", "docSyntax": "position nearEntities radius", "syntax": "position nearEntities radius"}, "nearestLocationWithDubbing": {"version": "1.00", "tags": "", "description": "Find the nearest location having a non-empty speech.", "example": "_location = nearestLocationWithDubbing player;", "docSyntax": "nearestLocationWithDubbing position", "syntax": "nearestLocationWithDubbing position"}, "nearObjectsReady": {"version": "1.00", "tags": "", "description": "Check whether all data are loaded to nearObjects will return in reasonable time.", "example": "_twnpos nearObjectsReady 500;//from ALICE", "docSyntax": "position nearObjectsReady radius", "syntax": "position nearObjectsReady radius"}, "nearRoads": {"version": "1.00", "tags": "", "description": "Find the road segments within the circle of given radius.", "example": "_list = player nearRoads 50;", "docSyntax": "pos nearRoads radius", "syntax": "<array> nearRoads radius"}, "newOverlay": {"version": "1.00", "tags": "", "description": "Creates the new overlay dialog for the specified type of overlay.", "example": "-", "docSyntax": "map newOverlay config", "syntax": "<objMap> newOverlay config"}, "nextMenuItemIndex": {"version": "1.00", "tags": "", "description": "Returns the next available menu item index.", "example": "-", "docSyntax": "nextMenuItemIndex map", "syntax": "nextMenuItemIndex <objMap>"}, "nMenuItems": {"version": "1.00", "tags": "", "description": "Returns the total number of user-added menu items belonging to the given menu.", "docSyntax": "map nMenuItems menuName", "syntax": "<objMap> nMenuItems menuName"}, "numberToDate": {"version": "1.00", "tags": "", "description": "Convert float number to a date.", "example": "_date = numberToDate [2008,0.5324]; //[2008,7,13,7,49]", "docSyntax": "numberToDate [year,time]", "syntax": "numberToDate [year,<scalar>]"}, "onCommandModeChanged": {"version": "1.00", "tags": "", "description": "Defines code performed when hc command mode changes either because of (Left Ctrl + Space) shortcut or hcShowBar scripting command. Groups hc mode must contain at least one group for this command to work (see High Command). Attached code receives _isHighCommand boolean.", "example": "//Examples in-use can be found in: //ca\\modules\\HC\\data\\scripts\\HC_GUI.sqf //A3\\modules_f\\HC\\data\\scripts\\HC_GUI.sqf", "docSyntax": "onCommandModeChanged code", "syntax": "onCommandModeChanged <code>"}, "onDoubleClick": {"version": "1.00", "tags": "", "description": "Defines an action performed when the user double clicks on the map. Command receives:,_pos array position,_units array selected units,_shift,_alt bool key state", "example": "-", "docSyntax": "map onDoubleClick command", "syntax": "<objMap> onDoubleClick command"}, "onGroupIconClick": {"version": "1.00", "tags": "", "description": "Defines an action performed when player clicked on group marker (3D or in a map). The code executed once. This EH, unlike onGroupIconOverEnter and onGroupIconOverLeave, has one more param which returns 1 if RMB was pressed, 0 otherwise.", "example": "onGroupIconClick { // Passed values for _this are: _is3D = _this select 0; _group = _this select 1; _wpID = _this select 2; _RMB = _this select 3; _posx = _this select 4; _posy = _this select 5; _shift = _this select 6; _ctrl = _this select 7; _alt = _this select 8; _message = format [\"____ Info ____\"]; {_message = _message + format [\"\\n %1\",_x]} forEach _this; hint _message; }", "docSyntax": "onGroupIconClick command", "syntax": "onGroupIconClick command"}, "onGroupIconOverEnter": {"version": "1.00", "tags": "", "description": "Defines an action performed when player moves pointer over group marker (3D or in a map). The code will execute continuously while pointer is over icon.", "example": "onGroupIconOverEnter { // Passed values for _this are: _is3D = _this select 0; _group = _this select 1; _wpID = _this select 2; _posx = _this select 3; _posy = _this select 4; _shift = _this select 5; _ctrl = _this select 6; _alt = _this select 7; _message = format [\"____ Info ____\"]; {_message = _message + format [\"\\n %1\",_x]} forEach _this; hint _message; }", "docSyntax": "onGroupIconOverEnter command", "syntax": "onGroupIconOverEnter command"}, "onGroupIconOverLeave": {"version": "1.00", "tags": "", "description": "Defines an action performed when pointer, previously positioned over icon, is moved away from it (3D or in a map). The code is executed once.", "example": "onGroupIconOverLeave { // Passed values for _this are: _is3D = _this select 0; _group = _this select 1; _wpID = _this select 2; _posx = _this select 3; _posy = _this select 4; _shift = _this select 5; _ctrl = _this select 6; _alt = _this select 7; _message = format [\"____ Info ____\"]; {_message = _message + format [\"\\n %1\",_x]} forEach _this; hint _message; }", "docSyntax": "onGroupIconOverLeave command", "syntax": "onGroupIconOverLeave command"}, "onHCGroupSelectionChanged": {"version": "1.00", "tags": "", "description": "Defines an action performed when high command group selection has been changed.", "example": "onHCGroupSelectionChanged { if (_isSelected) then { hint format [\"Group %1 has been selected.\", _group]; } else { hint format [\"Group %1 has been deselected.\", _group]; }; };", "docSyntax": "onHCGroupSelectionChanged command", "syntax": "onHCGroupSelectionChanged command"}, "onPreloadFinished": {"version": "1.00", "tags": "", "description": "Defines an action performed after the preload screen finished. Preload event occurs after briefing screen on mission start.", "example": "onPreloadFinished {TAG_ReceivingScreenDone = true};", "docSyntax": "onPreloadFinished command", "syntax": "onPreloadFinished command"}, "onPreloadStarted": {"version": "1.00", "tags": "", "description": "Defines an action performed just before the preload screen started. Preload event occurs after briefing screen on mission start.", "example": "onPreloadStarted {diag_log \"preload started\"};", "docSyntax": "onPreloadStarted command", "syntax": "onPreloadStarted command"}, "onShowNewObject": {"version": "1.00", "tags": "", "description": "Defines an action performed when the user right clicks on the map and,selects New Object. Set to empty for default behavior. Command receives:,_pos array position,", "example": "-", "docSyntax": "map onShowNewObject command", "syntax": "<objMap> onShowNewObject command"}, "onTeamSwitch": {"version": "1.00", "tags": "", "description": "Defines an action performed when the team switch is finished. Commandset receives the following special variables: _from object previous unit, _to object current unit. Consecutive use of onTeamSwitch command will overwrite previously set commandset.", "example": "onTeamSwitch { [_from, _to] execVM \"myTeamSwitchScript.sqf\"; };", "docSyntax": "onTeamSwitch commandset", "syntax": "onTeamSwitch commandset"}, "owner": {"version": "1.00", "tags": "[SE] [AG] ", "description": "On server machine, returns the machine network ID of the client to which the object is local. Otherwise returns 0. For use on clients clientOwner command is available. To find out the owner of a Group, use groupOwner.", "example": "_clientID = owner _someobject;", "docSyntax": "owner object", "syntax": "owner <object>"}, "parsingNamespace": {"version": "1.00", "tags": "", "description": "Returns the global namespace attached to config parser.", "example": "parsingNamespace setVariable [\"var1\",101.23124]; _profVar1 = parsingNamespace getVariable \"var1\";", "docSyntax": "parsingNamespace", "syntax": "parsingNamespace"}, "playableUnits": {"version": "1.00", "tags": "", "description": "Returns a list of playable units in a multiplayer game (occupied by both AI or players), created on the following sides east/opfor, west/blufor, resistance/independent and civilian only. Does not contain units of sideLogic.", "example": "{ _x groupChat \"I'm a playable unit.\"; } forEach playableUnits;", "docSyntax": "playableUnits", "syntax": "playableUnits"}, "playAction": {"version": "1.00", "tags": "[AL] [EG] ", "description": "When used on a person, a smooth transition to the given action will be initiated.", "example": "soldierOne playAction \"SitDown\"", "docSyntax": "soldier playAction action", "syntax": "soldier playAction action"}, "playActionNow": {"version": "1.00", "tags": "[AL] [EG] ", "description": "When used on a person, a smooth transition to the given action will be initiated, but all previous playAction are discarded.", "example": "soldierOne playActionNow \"SitDown\";", "docSyntax": "soldier playActionNow action", "syntax": "soldier playActionNow action"}, "playGesture": {"version": "1.00", "tags": "", "description": "When used on a person,a smooth transition to the given move will be initiated. Command doesn't seem to be functional", "example": "soldierOne playGesture \"Wave\"", "docSyntax": "soldier playGesture moveName", "syntax": "soldier playGesture moveName"}, "playMoveNow": {"version": "1.00", "tags": "[AL] [EG] ", "description": "When used on a person,a smooth transition to the given move will be initiated, but all previous playMove are discarded.", "example": "player playMoveNow \"AmovPercMevaSlowWrflDf\"", "docSyntax": "soldier playMoveNow moveName", "syntax": "soldier playMoveNow moveName"}, "playScriptedMission": {"version": "1.00", "tags": "", "description": "Load the given world, launch an empty mission, and execute the given expression. Config (optional) can reference to the config entry, replacing Description.ext for this mission.", "example": "playScriptedMission [ \"desert_e\", { execVM \"\\ca\\missions_e\\data\\scenes\\credits1\\init.sqf\"; }, configFile / \"CfgMissions\" / \"Cutscenes\" / \"Credits\" ];", "docSyntax": "playScriptedMission [world, expression, config, ignoreChildWindow]", "syntax": "playScriptedMission [world,expression,config,ignoreChildWindow]"}, "ppEffectAdjust": {"version": "1.00", "tags": "[EL] ", "description": "Set post process effect parameters.", "example": "\"colorCorrections\" ppEffectAdjust [1, 1, -0.01, [0, 0, 0, 0], [1.5, 1, 1.2, 0.6], [0.199, 0.587, 0.114, 0]];", "docSyntax": "effect ppEffectAdjust settings", "syntax": "effect ppEffectAdjust settings"}, "ppEffectCommit": {"version": "1.00", "tags": "", "description": "Commit post process effect in given time.", "example": "\"colorCorrection\" ppEffectCommit 3;", "docSyntax": "effect ppEffectCommit commit", "syntax": "effect ppEffectCommit commit"}, "ppEffectCommitted": {"version": "1.00", "tags": "", "description": "Check whether given post process effect is committed", "example": "ppEffectCommitted \"colorCorrection\";", "docSyntax": "ppEffectCommitted effect", "syntax": "ppEffectCommitted effect"}, "ppEffectCreate": {"version": "1.00", "tags": "", "description": "Creates Post process effects specified by effect name and priority. Supported effects are:", "example": "_ppGrain = ppEffectCreate [\"filmGrain\", 2005];", "docSyntax": "ppEffectCreate [name, priority]", "syntax": "ppEffectCreate [<string>,priority]"}, "ppEffectDestroy": {"version": "1.00", "tags": "", "description": "Destroy Post process effects given by handle or array of handles.", "example": "ppEffectDestroy _hndl;", "docSyntax": "ppEffectDestroy effect", "syntax": "ppEffectDestroy effect"}, "ppEffectEnable": {"version": "1.00", "tags": "", "description": "Enable / disable Post process effects", "example": "\"colorCorrections\" ppEffectEnable true;", "docSyntax": "effect ppEffectEnable enable", "syntax": "effect ppEffectEnable <bool>"}, "priority": {"version": "1.00", "tags": "", "description": "Return the priority of the task.", "example": "_prioTsk01 = priority task01", "docSyntax": "priority task", "syntax": "priority <objTask>"}, "processDiaryLink": {"version": "1.00", "tags": "", "description": "Open the diary screen on the record specified by link.", "example": "processDiaryLink createDiaryLink [\"Tasks\", (simpleTasks player) select 0, \"\"];//\u00a0Select a task in the Task menu", "docSyntax": "processDiaryLink link", "syntax": "processDiaryLink link"}, "progressLoadingScreen": {"version": "1.00", "tags": "[EL] ", "description": "If loading screen is shown, sets progress bar to the given value (interval is from 0 to 1])", "example": "startLoadingScreen [\"Loading My Mission\"]; //\u00a0 //\u00a0batch of code //\u00a0 progressLoadingScreen 0.25; //\u00a0 //\u00a0batch of code //\u00a0 progressLoadingScreen 0.50; //\u00a0 //\u00a0batch of code //\u00a0 progressLoadingScreen 0.95; //\u00a0 //\u00a0batch of code //\u00a0 endLoadingScreen;", "docSyntax": "progressLoadingScreen progress", "syntax": "progressLoadingScreen progress"}, "progressPosition": {"version": "1.00", "tags": "", "description": "Returns the current position in the progress bar.", "example": "_pos = progressPosition _control;", "docSyntax": "progressPosition control", "syntax": "progressPosition <uiControl>"}, "progressSetPosition": {"version": "1.00", "tags": "", "description": "Sets progress position of a progress bar (CT_PROGRESS).", "example": "_control progressSetPosition 0.5", "docSyntax": "control progressSetPosition pos", "syntax": "<uiControl> progressSetPosition <array>"}, "rankId": {"version": "1.00", "tags": "", "description": "Return the rank of the given unit for comparison. Value may be\u00a0:", "example": "_myIdRank = rankId player;", "docSyntax": "rankId unit", "syntax": "rankId <objUnit>"}, "registeredTasks": {"version": "1.00", "tags": "", "description": "Returns array with all registered task types for the given agent. The values are the names set in CfgTasks classes name property. The same names are used for unregisterTask", "example": "tasklist = registeredTasks teamMember _agent;", "docSyntax": "registeredTasks teamMember", "syntax": "registeredTasks teamMember"}, "registerTask": {"version": "1.00", "tags": "", "description": "Registers a new task type. Parameters are defined in the given config class (subclass of CfgTasks)", "example": "teamMember _agent registerTask \"MyTask\";", "docSyntax": "teamMember registerTask entryName", "syntax": "teamMember registerTask entryName"}, "remoteControl": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Switches on remote control of the unit. Command needs to be executed locally to the player. If driver is remote it will get transferred to players PC. There is currently no getter command for remote control, but it is possible to use a trick described in Example 3.", "example": "Set player remote control of driver: player remoteControl driver UAV; driver UAV switchCamera \"Internal\"; //\u00a0switchCamera required //\u00a0sometimes switchCamera is not needed player remoteControl driver UAV;", "docSyntax": "who remoteControl whom", "syntax": "who remoteControl whom"}, "removeAllItems": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Removes all special items from the unit.", "example": "removeAllItems unitName;", "docSyntax": "removeAllItems unit", "syntax": "removeAllItems <objUnit>"}, "removeDrawIcon": {"version": "1.00", "tags": "", "description": "Removes an icon for an editor object.", "example": "-", "docSyntax": "map removeDrawIcon [object,string identifier]", "syntax": "<objMap> removeDrawIcon [<object>,<string> identifier]"}, "removeDrawLinks": {"version": "1.00", "tags": "", "description": "Remove all drawn links for the given editor object for the given editor,object type. Pass an empty string as param type to remove all draw,links for an object.", "example": "-", "docSyntax": "map removeDrawLinks [from,param type]", "syntax": "<objMap> removeDrawLinks [from,param type]"}, "removeGroupIcon": {"version": "1.00", "tags": "", "description": "Remove icon with given ID from group.", "example": "_target removeGroupIcon (_target getvariable \"hc_attackicon\");", "docSyntax": "group removeGroupIcon iconID", "syntax": "<objGroup> removeGroupIcon iconID"}, "removeMenuItem": {"version": "1.00", "tags": "", "description": "Removes a previously added menu item.", "example": "-", "docSyntax": "map removeMenuItem index", "syntax": "<objMap> removeMenuItem <scalar>"}, "removeSimpleTask": {"version": "1.00", "tags": "", "description": "Remove a simple task from the list of simple tasks.", "example": "player removeSimpleTask _tskKillSpongebob", "docSyntax": "person removeSimpleTask task", "syntax": "<objUnit> removeSimpleTask <objTask>"}, "removeTeamMember": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Remove given member from given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.", "example": "_team removeTeamMember _teamMember;", "docSyntax": "team removeTeamMember member", "syntax": "team removeTeamMember <objUnit>"}, "resources": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Returns the resources of a team member. Results are local to the PC on which command was executed.", "example": "resources teamMember _unit;", "docSyntax": "resources member", "syntax": "resources <objUnit>"}, "restartEditorCamera": {"version": "1.00", "tags": "", "description": "Restarts the mission editor camera (if it was deleted by a script,for example).", "example": "-", "docSyntax": "restartEditorCamera map", "syntax": "restartEditorCamera <objMap>"}, "reversedMouseY": {"version": "1.00", "tags": "", "description": "Returns true if mouse vertical axe is inverted.", "example": "if (reversedMouseY) then { hint \"Dude!\" };", "docSyntax": "reversedMouseY", "syntax": "reversedMouseY"}, "roadsConnectedTo": {"version": "1.00", "tags": "", "description": "Find the road segments connected to the given road segment.", "example": "_road = (player nearRoads 50) select 0; _connectedRoads = roadsConnectedTo _road;", "docSyntax": "roadsConnectedTo roadSegment", "syntax": "roadsConnectedTo roadSegment"}, "safeZoneH": {"version": "1.00", "tags": "", "description": "", "example": "_screenHeight = safeZoneH;", "docSyntax": "SafeZoneH", "syntax": "SafeZoneH"}, "safeZoneW": {"version": "1.00", "tags": "", "description": "", "example": "_screenWidth = safeZoneW;", "docSyntax": "safeZoneW", "syntax": "safeZoneW"}, "safeZoneX": {"version": "1.00", "tags": "", "description": "", "example": "_screenLeftBorderX = safeZoneX; // returns a float value < 0", "docSyntax": "SafeZoneX", "syntax": "SafeZoneX"}, "safeZoneY": {"version": "1.00", "tags": "", "description": "", "example": "_screenTopBorderY = safeZoneY; // returns a float value < 0", "docSyntax": "SafeZoneY", "syntax": "SafeZoneY"}, "saveOverlay": {"version": "1.00", "tags": "", "description": "Save the current overlay.", "example": "saveOverlay _map", "docSyntax": "saveOverlay map", "syntax": "saveOverlay <objMap>"}, "savingEnabled": {"version": "1.00", "tags": "", "description": "Check if saving the game is enabled.", "example": "if (savingEnabled) then { hint \"Saving is enabled!\"; };", "docSyntax": "savingEnabled", "syntax": "savingEnabled"}, "say2D": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Plays given sound in 2D", "example": "player say2D \"HelloThere\";", "docSyntax": "from say2D sound", "syntax": "from say2D sound"}, "say3D": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Unit or object will say given sound in 3D Space. This allows broadcasting of positional music or sound from a source, without having to script a fade sound or music command. Compare this with say2D which will always play a sound at the location of the player after he has been in the vicinity of a broadcasting sound. Sound is defined in \"CfgSounds\" of the Description.ext or main config.", "example": "helicopter1 say3D \"Fortunateson\"", "docSyntax": "from say3D sound", "syntax": "from say3D sound"}, "screenToWorld": {"version": "1.00", "tags": "", "description": "Returns the position on landscape (PositionAGL) corresponding to the given point on screen (in UI coordinates).", "example": "_wPos = screenToWorld [0.5,0.5];", "docSyntax": "screenToWorld screen", "syntax": "screenToWorld screen"}, "scriptName": {"version": "1.00", "tags": "", "description": "Assign a user friendly name to the VM script this command is executed from. Once name is assigned, it cannot be changed.", "example": "scriptName \"leetScript.sqf\";", "docSyntax": "scriptName name", "syntax": "scriptName <string>"}, "selectBestPlaces": {"version": "1.00", "tags": "", "description": "Find the places with the maximum value of expression in the given area. Places can be on water. Results are sorted by value. Search pattern is randomised every command execution.", "example": "myPlaces = selectBestPlaces [position player, 50, \"meadow + 2*hills\", 1, 5];", "docSyntax": "selectBestPlaces [position, radius, expression, precision, sourcesCount]", "syntax": "selectBestPlaces [position,radius,expression,precision,sourcesCount]"}, "selectDiarySubject": {"version": "1.00", "tags": "", "description": "Selects the subject page in a log.", "example": "player selectDiarySubject \"someSubject\";", "docSyntax": "person selectDiarySubject subject", "syntax": "<objUnit> selectDiarySubject <string>"}, "selectedEditorObjects": {"version": "1.00", "tags": "", "description": "Returns a list of currently selected editor objects.", "example": "_selObjects = selectedEditorObjects _map", "docSyntax": "selectedEditorObjects map", "syntax": "selectedEditorObjects <objMap>"}, "selectEditorObject": {"version": "1.00", "tags": "", "description": "Select an editor object. Does not un-select previously selected objects.", "example": "-", "docSyntax": "map selectEditorObject object", "syntax": "<objMap> selectEditorObject <object>"}, "selectNoPlayer": {"version": "1.00", "tags": "", "description": "Switches player to no unit, makes player return objNull. SP only, the command is completely ignored in MP.", "example": "Single player: selectNoPlayer; hint str player; //<NULL-object> Rough multiplayer emulation: _noPlayer = createGroup sideLogic createUnit [ \"Logic\", [0,0,1000], [], 0, \"NONE\" ]; selectPlayer _noPlayer; hint str player; //L Charlie 4-3:1 (KK)", "docSyntax": "selectNoPlayer", "syntax": "selectNoPlayer"}, "sendTask": {"version": "1.00", "tags": "", "description": "Create a new AI task (subtask of parentTask). Type is name of registered task type.", "docSyntax": "sender sendTask [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...]", "syntax": "sender sendTask [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...]"}, "sendTaskResult": {"version": "1.00", "tags": "", "description": "Send a result of the task to the task sender.", "docSyntax": "task sendTaskResult [state,result,sentence]", "syntax": "<objTask> sendTaskResult [state,result,sentence]"}, "serverTime": {"version": "1.00", "tags": "[EG] ", "description": "Returns the time since last server restart, synced to all clients in MP. The syncing is happening every 5 minutes, but you can force the next sync earlier by executing estimatedTimeLeft command. The time returned is also different to the time returned by time and diag_tickTime commands on server. Returns 0 in SP.", "example": "hint format [\"Synced server time\u00a0: %1\", serverTime];", "docSyntax": "serverTime", "syntax": "serverTime"}, "setArmoryPoints": {"version": "1.00", "tags": "", "description": "Stores passed number into [USERNAME].ArmaXProfile file, where it assigns it as a value to armoryPoints entry. If entry doesn't exist, it is created.", "example": "setArmoryPoints (armoryPoints + 20);", "docSyntax": "setArmoryPoints points", "syntax": "setArmoryPoints <scalar>"}, "setCurrentTask": {"version": "1.00", "tags": "", "description": "Set the task as a current task of the person.", "example": "player setCurrentTask tskKillSpongebob;", "docSyntax": "object setCurrentTask task", "syntax": "<object> setCurrentTask <objTask>"}, "setDrawIcon": {"version": "1.00", "tags": "", "description": "Set the icon to be shown in 2D editor for the specified editor object. If maintain size is false,icon will not scale depending on the scale,of the map. If maintain size is a number,the icon will maintain size,if map scale is below that number. is3D,show line and priority are,optional.", "example": "-", "docSyntax": "map setDrawIcon [object,texture,color,offset,width,height,maintain size?,angle,string identifier,shadow,is3D,draw line?,priority]", "syntax": "<objMap> setDrawIcon [<object>,<string>,<scalar>,offset,width,height,maintain size?,angle,<string> identifier,shadow,is3D,draw line?,priority]"}, "setEditorMode": {"version": "1.00", "tags": "", "description": "Sets map mode to MAP,3D or PREVIEW.", "example": "-", "docSyntax": "map setEditorMode mode", "syntax": "<objMap> setEditorMode mode"}, "setEditorObjectScope": {"version": "1.00", "tags": "", "description": "This command defines the level of access a user has to editor objects. \"objects\" is an array of either Editor Objects (eg [\"_unit_0\"]) or actual Game Objects (eg [player]). If the array is empty then the command will automatically parse all editor objects. \"editorType\" is the editor type to effect (eg \"unit\", \"vehicle\", \"center\") or \"\" for all types. \"condition\" is an executable string that must evaluate to true or false. If true, the scope of the evaluated editor object will be modified. \"_x\" can be used in the string as reference to the ingame representation of the currently processed array member. \"scope\" is one of \"HIDE\", \"VIEW\", \"SELECT\", \"LINKTO\", \"LINKFROM\", \"ALLNODRAG\", \"ALLNOTREE\", \"ALLNOCOPY\", \"ALLNOSELECT\" or \"ALL\". \"subordinatesAlso\" is a boolean value. If true then subordinates in the editor will be assigned the same scope as the parent.", "example": "_map setEditorObjectScope [ [],\"vehicle\", \"side effectiveCommander _x\u00a0!= side player\", \"HIDE\", false]", "docSyntax": "map setEditorObjectScope [objects, editorType, condition, scope, subordinatesAlso]", "syntax": "<objMap> setEditorObjectScope [objects,editorType,condition,scope,subordinatesAlso]"}, "setFromEditor": {"version": "1.00", "tags": "", "description": "Set if given team member was inserted directly from editor.", "example": "_teamMember setFromEditor true", "docSyntax": "teamMember setFromEditor fromEditor", "syntax": "teamMember setFromEditor fromEditor"}, "setFSMVariable": {"version": "1.00", "tags": "", "description": "Set variable to given value in the variable space of given FSM.", "example": "_handle = execFSM \"test.fsm\"; _handle setFSMVariable [\"_foo\", 23]; sets variable _foo in the FSM to 23", "docSyntax": "handle setFSMVariable [name, value]", "syntax": "handle setFSMVariable [<string>,<scalar>]"}, "setGroupIcon": {"version": "1.00", "tags": "", "description": "Sets group icon properties.", "example": "_target setGroupIcon [_icon, \"hc_selectedEnemy\"]; _target setGroupIcon [_icon, \"flag\"]; _grp setGroupIcon [_iconsize, _iconsizeclass, _offset]; _grp setGroupIcon [_newid, _icon, _offset]; _grp setGroupIcon [_icon, _iconclass];", "docSyntax": "group setGroupIcon [id, icon, offset]", "syntax": "<objGroup> setGroupIcon [<scalar>,icon,offset]"}, "setGroupIconParams": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Set group icons parameters. [color,string,float,bool]", "example": "_grp setGroupIconParams [_color,_text,_scale,_visible]; _grp setGroupIconParams [[0,0,0,0],\"\",1,false];", "docSyntax": "group setGroupIconParams properties", "syntax": "<objGroup> setGroupIconParams properties"}, "setGroupIconsSelectable": {"version": "1.00", "tags": "", "description": "Sets if group icons raise onGroupIconClick, onGroupIconOverEnter and onGroupIconOverLeave events.", "example": "setGroupIconsSelectable true;", "docSyntax": "setGroupIconsSelectable bool", "syntax": "setGroupIconsSelectable <bool>"}, "setGroupIconsVisible": {"version": "1.00", "tags": "[EL] ", "description": "Sets if group icons added with addGroupIcon are visible on map and in the HUD.", "example": "setGroupIconsVisible [true,true]; (group player) addGroupIcon [\"b_inf\", [0, 0]];", "docSyntax": "setGroupIconsVisible [showOnMap, showOnHUD]", "syntax": "setGroupIconsVisible [showOnMap,showOnHUD]"}, "setHit": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Set damage on a part of an object.", "example": "vehicle player setHit [\"motor\", 1];", "docSyntax": "object setHit [part, damage, useEffects]", "syntax": "<object> setHit [part,<scalar>,useEffects]"}, "setLeader": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Set the leader of given team. Effect is local, unless both leader unit and team are local to PC on which command is executed, then effect is global.", "docSyntax": "team setLeader leader", "syntax": "team setLeader leader"}, "setMarkerAlpha": {"version": "1.00", "tags": "[EG] ", "description": "Sets the marker alpha. The marker is modified on all computers in a network session.", "example": "\"my_marker\" setMarkerAlpha 0.5;", "docSyntax": "marker setMarkerAlpha alpha", "syntax": "marker setMarkerAlpha alpha"}, "setMarkerAlphaLocal": {"version": "1.00", "tags": "[EL] ", "description": "Sets the marker alpha. The marker is only modified on the computer where the command is called.", "example": "\"my_marker\" setMarkerAlphaLocal 0.5;", "docSyntax": "marker setMarkerAlphaLocal alpha", "syntax": "marker setMarkerAlphaLocal alpha"}, "setObjectArguments": {"version": "1.00", "tags": "", "description": "Set object arguments in mission editor.", "example": "-", "docSyntax": "map setObjectArguments [object,[name1,value1,...]]", "syntax": "<objMap> setObjectArguments [<object>,[name1,value1,...]]"}, "setObjectProxy": {"version": "1.00", "tags": "", "description": "Set the proxy object associated with the given editor object.", "example": "_map setObjectProxy [\"_group_0\", vehicle (leader _group)];", "docSyntax": "map setObjectProxy [object,proxy object]", "syntax": "<objMap> setObjectProxy [<object>,proxy <object>]"}, "setPosASL2": {"version": "1.00", "tags": "", "description": "Sets the object position. The pos array uses the PositionASL format. The version of the command does not offset based on object center.", "example": "private _aslPos = getPosASL player; _aslPos set [1, _aslPos select 1 + 10]; player setPosASL2 _aslPos;", "docSyntax": "obj setPosASL2 pos", "syntax": "<object> setPosASL2 <array>"}, "setSimpleTaskDescription": {"version": "1.00", "tags": "", "description": "Attach descriptions to the simple task.", "example": "mytask setSimpleTaskDescription [\"Today you have to kill Spongebob\",\"Kill Spongebob\",\"Here he is!\"];", "docSyntax": "task setSimpleTaskDescription [description, descriptionShort, descriptionHUD]", "syntax": "<objTask> setSimpleTaskDescription [description,descriptionShort,descriptionHUD]"}, "setSimpleTaskDestination": {"version": "1.00", "tags": "", "description": "Attach a destination to the simple task.", "example": "_tskGoHere setSimpleTaskDestination (getMarkerPos \"obj1\");", "docSyntax": "task setSimpleTaskDestination pos", "syntax": "<objTask> setSimpleTaskDestination <array>"}, "setTaskResult": {"version": "1.00", "tags": "", "description": "Set a result of the task.", "docSyntax": "task setTaskResult [state,result]", "syntax": "<objTask> setTaskResult [state,result]"}, "setTaskState": {"version": "1.00", "tags": "", "description": "Set the state of a given task. State value may be one of:", "example": "_tskKillSpongebob setTaskState \"Succeeded\";", "docSyntax": "task setTaskState state", "syntax": "<objTask> setTaskState state"}, "setUnconscious": {"version": "1.00", "tags": "[AL] [EG] ", "description": "In Arma 2 and since Arma 3 v1.63.136889, this command sets unit into incapacitated state.", "example": "_unit setUnconscious true;", "docSyntax": "unit setUnconscious set", "syntax": "<objUnit> setUnconscious set"}, "setVisibleIfTreeCollapsed": {"version": "1.00", "tags": "", "description": "Sets whether or not the object is visible even if the tree is collapsed.", "example": "_map setVisibleIfTreeCollapsed [\"_unit_0\", true]", "docSyntax": "map setVisibleIfTreeCollapsed [object, visible]", "syntax": "<objMap> setVisibleIfTreeCollapsed [<object>,visible]"}, "setWaypointCompletionRadius": {"version": "1.00", "tags": "", "description": "The completion radius allows units to call the waypoint completed once they are inside of the given circle.", "example": "[grp, 2] setWaypointCompletionRadius 30;", "docSyntax": "waypoint setWaypointCompletionRadius radius", "syntax": "waypoint setWaypointCompletionRadius radius"}, "setWind": {"version": "1.00", "tags": "[EG] ", "description": "Set current (forced == false) or permanent (forced == true) wind vector.", "example": "setWind [10, 10, true];", "docSyntax": "setWind [x, y, forced]", "syntax": "setWind [x,y,forced]"}, "show3DIcons": {"version": "1.00", "tags": "", "description": "Toggle the drawing of 3D icons.", "example": "-", "docSyntax": "map show3DIcons bool", "syntax": "<objMap> show3DIcons <bool>"}, "showCommandingMenu": {"version": "1.00", "tags": "", "description": "Create the commanding menu described by the given config class or menu name. When the name is empty, the current menu is hidden.", "example": "showCommandingMenu \"\";", "docSyntax": "showCommandingMenu name", "syntax": "showCommandingMenu <string>"}, "showHUD": {"version": "1.00", "tags": "[EL] ", "description": "Enable / disable showing of HUD. Defines visibility of weapon crosshair and any informational tags that appear when pointing the weapon at an object as well as availability of the default action menu. Unfortunately, it also hides icons drawn with drawIcon3D.", "example": "showHUD false;", "docSyntax": "showHUD enable", "syntax": "showHUD <bool>"}, "showLegend": {"version": "1.00", "tags": "", "description": "Show/hide map legend.", "example": "-", "docSyntax": "map showLegend bool", "syntax": "<objMap> showLegend <bool>"}, "showNewEditorObject": {"version": "1.00", "tags": "", "description": "Show the add editor object dialog,type is editor object type,class is,class definition to automatically select,side filters by a certain,side,pos is position to create the object.", "example": "-", "docSyntax": "map showNewEditorObject [type,class,side,position]", "syntax": "<objMap> showNewEditorObject [type,class,<objSide>,position]"}, "showSubtitles": {"version": "1.00", "tags": "[EL] ", "description": "Enables / disables showing of subtitles in a chat. Only scripted/engine chatter is affected, player manual chat is unaffected. Returns the previous state.", "example": "showSubtitles false;", "docSyntax": "showSubtitles enable", "syntax": "showSubtitles <bool>"}, "sideUnknown": {"version": "1.00", "tags": "", "description": "The unknown side.", "example": "//soldier1 and soldier2 of different sides and out of sight soldier1 reveal soldier2; hint str (soldier1 nearTargets 1000); //returns: [[[1557.96,5047.4,1.32402],\"SoldierWB\",UNKNOWN,0.0155183,soldier2,5]] soldier1 reveal [soldier2,1.5]; //returns: [[[1556.52,5050.08,1.32402],\"SoldierWB\",WEST,0.0211193,soldier2,5]]", "docSyntax": "sideUnknown", "syntax": "sideUnknown"}, "simpleTasks": {"version": "1.00", "tags": "", "description": "Return all simple tasks assigned to given person.", "example": "_tasks = simpleTasks player;", "docSyntax": "simpleTasks person", "syntax": "simpleTasks <objUnit>"}, "simulationEnabled": {"version": "1.00", "tags": "[AG] ", "description": "Check if the entity has enabled simulation.", "example": "simulationEnabled player;", "docSyntax": "simulationEnabled entity", "syntax": "simulationEnabled entity"}, "startLoadingScreen": {"version": "1.00", "tags": "", "description": "Shows loading screen with the given text, using the given resource. While loading screen is shown, simulation and scene drawing is disabled, user control is disabled, mouse cursor is hidden, scripts run at full speed (50ms per frame instead of 3ms per frame for Scheduled Scripts).", "example": "startLoadingScreen [\"Loading My Mission, please wait...\"];", "docSyntax": "startLoadingScreen [text, resource]", "syntax": "startLoadingScreen [<string>,resource]"}, "switchAction": {"version": "1.00", "tags": "", "description": "When used on a person, the given action is started immediately (there is no transition). Use switchmove \"\" to switch back to the default movement if there is no transition back, otherwise the person may be stuck.", "example": "soldierOne switchAction \"SitDown\"", "docSyntax": "soldier switchAction action", "syntax": "soldier switchAction action"}, "switchGesture": {"version": "1.00", "tags": "", "description": "When used on a person,the given move is started immediately (without transition).", "example": "soldierOne switchGesture \"Wave\";", "docSyntax": "soldier switchGesture moveName", "syntax": "soldier switchGesture moveName"}, "synchronizedObjects": {"version": "1.00", "tags": "[AL] ", "description": "Return the list of objects synchronized with the given unit.", "example": "_objects = synchronizedObjects _logic;", "docSyntax": "synchronizedObjects unit", "syntax": "synchronizedObjects <objUnit>"}, "synchronizeObjectsAdd": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Add given objects to the unit's list of synchronized objects.", "example": "_acm = _groupLogic createUnit [\"AmbientCombatManager\", position player,[],0,\"NONE\"]; _acm synchronizeObjectsAdd [player];", "docSyntax": "unit synchronizeObjectsAdd objects", "syntax": "<objUnit> synchronizeObjectsAdd objects"}, "synchronizeObjectsRemove": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Remove given objects from the unit's list of synchronized objects.", "example": "player synchronizeObjectsRemove [_object1, _object2, _object3]", "docSyntax": "unit synchronizeObjectsRemove objects", "syntax": "<objUnit> synchronizeObjectsRemove objects"}, "synchronizeTrigger": {"version": "1.00", "tags": "", "description": "Synchronizes the trigger with zero or more waypoints.", "example": "_trigger synchronizeTrigger []", "docSyntax": "trigger synchronizeTrigger [waypoint1, waypoint2, ...]", "syntax": "<objTrigger> synchronizeTrigger [waypoint1,waypoint2,...]"}, "targetsAggregate": {"version": "1.00", "tags": "", "description": "Aggregate candidates.", "example": "_aggregation = [player, sideEnemy, \"\", [], 0] targetsAggregate (player targetsQuery [objNull, sideUnknown, \"\", [], 0])", "docSyntax": "[speaker, side, unit, place, time] targetsAggregate candidates", "syntax": "[speaker,<objSide>,<objUnit>,place,<scalar>] targetsAggregate candidates"}, "targetsQuery": {"version": "1.00", "tags": "", "description": "Returns sorted array of targets, known to the enquirer (including own troops), where the accuracy coefficient reflects how close the result matches the query. This command could be CPU intensive.", "example": "Return all known targets for player:_targets = player targetsQuery [objNull, sideUnknown, \"\", [], 0];", "docSyntax": "enquirer targetsQuery [targetIgnore, targetSide, targetType, targetPosition, targetMaxAge]", "syntax": "enquirer targetsQuery [targetIgnore,targetSide,targetType,targetPosition,targetMaxAge]"}, "taskChildren": {"version": "1.00", "tags": "", "description": "Return the child tasks of the specified task.", "example": "_children = taskChildren \"someTask\";", "docSyntax": "taskChildren task", "syntax": "taskChildren <objTask>"}, "taskCompleted": {"version": "1.00", "tags": "", "description": "Return if task is completed. (state Succeeded, Failed or Canceled)", "example": "_task = createSimpleTask [\"task_1\"]; _done = taskCompleted _task;", "docSyntax": "taskCompleted task", "syntax": "taskCompleted <objTask>"}, "taskDescription": {"version": "1.00", "tags": "", "description": "Returns the sub-parts of the task description. The returned Array is in format [Task description, Task title, Task waypoint description].", "example": "_taskDescArray = taskDescription _task;", "docSyntax": "taskDescription task", "syntax": "taskDescription <objTask>"}, "taskDestination": {"version": "1.00", "tags": "", "description": "Returns the position of the task (as specified by destination parameter in config).", "example": "if (!isNull currentTask player) then {taskDestination currentTaskplayer}; //return Position (Array)", "docSyntax": "taskDestination task", "syntax": "taskDestination <objTask>"}, "taskHint": {"version": "1.00", "tags": "[EL] ", "description": "Shows info about new, changed or failed task. The text can contain several lines. \\n is used to set a line return.", "example": "taskHint [\"Task failed.\\nBad job!\", [1, 0, 0, 1], \"taskFailed\"];", "docSyntax": "taskHint [text, colour, icon]", "syntax": "taskHint [<string>,colour,icon]"}, "taskNull": {"version": "1.00", "tags": "", "description": "A non-existing Task. To compare non-existent tasks use isNull or isEqualTo:", "example": "!isNull taskNull; // false", "docSyntax": "taskNull", "syntax": "taskNull"}, "taskParent": {"version": "1.00", "tags": "", "description": "Returns the parent task of the specified task.", "example": "_parent = taskParent \"someTask\";", "docSyntax": "taskParent task", "syntax": "taskParent <objTask>"}, "taskResult": {"version": "1.00", "tags": "", "description": "Send a result of the task to the task sender.", "example": "taskResult (player createSimpleTask [\"NewTask\"]);", "docSyntax": "taskResult task", "syntax": "taskResult <objTask>"}, "taskState": {"version": "1.00", "tags": "", "description": "Returns the current state of a task. Possible return values are:", "example": "tskSomeTask = player createSimpleTask [\"NewTask\"]; hint format[\"Taskstate: %1\", taskState tskSomeTask];", "docSyntax": "taskState task", "syntax": "taskState <objTask>"}, "teamMember": {"version": "1.00", "tags": "", "description": "Return an agent for given person.", "example": "_agent = teamMember player;", "docSyntax": "teamMember person", "syntax": "teamMember <objUnit>"}, "teamMemberNull": {"version": "1.00", "tags": "", "description": "A non-existent Team Member. To compare non-existent team members use isNull or isEqualTo:", "example": "!isNull teamMemberNull; //\u00a0false", "docSyntax": "teamMemberNull", "syntax": "teamMemberNull"}, "teamName": {"version": "1.00", "tags": "", "description": "Return a name of given team.", "example": "_name = teamName _team;", "docSyntax": "teamName team", "syntax": "teamName team"}, "teams": {"version": "1.00", "tags": "", "description": "Return a list of teams in the current mission.", "example": "_teams = teams;", "docSyntax": "teams", "syntax": "teams"}, "teamType": {"version": "1.00", "tags": "", "description": "Returns a type of given team.", "example": "_type = teamType _team;", "docSyntax": "teamType team", "syntax": "teamType team"}, "triggerActivated": {"version": "1.00", "tags": "[AG] ", "description": "Returns true if the trigger has been activated.", "example": "if (triggerActivated trg1) then { //\u00a0code };", "docSyntax": "triggerActivated trigger", "syntax": "triggerActivated <objTrigger>"}, "triggerActivation": {"version": "1.00", "tags": "[AG] ", "description": "Returns trigger activation in the form [by, type, repeating].", "example": "_activation = triggerActivation someTrigger", "docSyntax": "triggerActivation trigger", "syntax": "triggerActivation <objTrigger>"}, "triggerArea": {"version": "1.00", "tags": "[AG] ", "description": "Returns currently monitored trigger area. Since Arma 3 v1.59.135137, the command returns 3rd dimension for the monitored area. If height is not set, the value for it would be -1.", "example": "_area = triggerArea sensor1; //\u00a0result is [200, 120, 45, false, -1];", "docSyntax": "triggerArea trigger", "syntax": "triggerArea <objTrigger>"}, "triggerAttachedVehicle": {"version": "1.00", "tags": "[AG] ", "description": "Returns vehicle attached to the trigger (for example using triggerAttachVehicle).", "example": "return = triggerAttachedVehicle triggerName;", "docSyntax": "triggerAttachedVehicle trigger", "syntax": "triggerAttachedVehicle <objTrigger>"}, "triggerStatements": {"version": "1.00", "tags": "[AG] ", "description": "Returns trigger statements.", "example": "_statements = triggerStatements someTrigger;", "docSyntax": "triggerStatements trigger", "syntax": "triggerStatements <objTrigger>"}, "triggerText": {"version": "1.00", "tags": "[AG] ", "description": "Returns trigger text.", "example": "_text = triggerText triggerName;", "docSyntax": "triggerText trigger", "syntax": "triggerText <objTrigger>"}, "triggerTimeout": {"version": "1.00", "tags": "[AG] ", "description": "Returns trigger timeout in the form [min, mid, max, interruptable].", "example": "_timeOut = triggerTimeout someTrigger;", "docSyntax": "triggerTimeout trigger", "syntax": "triggerTimeout <objTrigger>"}, "triggerType": {"version": "1.00", "tags": "[AG] ", "description": "Returns trigger type (see setTriggerType).", "example": "_type = triggerType tr1;", "docSyntax": "triggerType trigger", "syntax": "triggerType <objTrigger>"}, "turretUnit": {"version": "1.00", "tags": "", "description": "Returns the unit in the vehicle turret. Driver turret [-1] is supported since Arma 3 v1.57.135045. To find turret path of known unit see unitTurret", "example": "_vehicle turretUnit _thisTurret;", "docSyntax": "vehicle turretUnit turretpath", "syntax": "<objVehicle> turretUnit turretpath"}, "uiNamespace": {"version": "1.00", "tags": "", "description": "Returns the global namespace attached to user interface.", "example": "uiNamespace setVariable [\"LIB_interruptDisplay\", _display];", "docSyntax": "uiNamespace", "syntax": "uiNamespace"}, "unlockAchievement": {"version": "1.00", "tags": "", "description": "Unlocks the given achievement. The achievements are listed in CfgAchievements, however none of the currently listed achievements is used in Arma 3, hence the command always returns false.", "example": "_isUnlocked = unlockAchievement \"Hunter\";", "docSyntax": "unlockAchievement name", "syntax": "unlockAchievement <string>"}, "unregisterTask": {"version": "1.00", "tags": "", "description": "Unregisters a task type from given agent. The task type is the name given in CfgTasks classes in name property. Also available from registeredTasks array.", "example": "teamMember _agent unregisterTask (registeredTasks select 0);", "docSyntax": "teamMember unregisterTask name", "syntax": "teamMember unregisterTask <string>"}, "updateDrawIcon": {"version": "1.00", "tags": "", "description": "Updates the icon to be shown in 2D editor for the specified editor,object. If maintain size is false,icon will not scale depending on the,scale of the map. If maintain size is a number,the icon will maintain,size if map scale is below that number.", "example": "-", "docSyntax": "map updateDrawIcon [object,string identifier,color,offset,width,height,maintain size?,angle,shadow]", "syntax": "<objMap> updateDrawIcon [<object>,<string> identifier,<scalar>,offset,width,height,maintain size?,angle,shadow]"}, "updateMenuItem": {"version": "1.00", "tags": "", "description": "Sets the text and command for the menu item. index is index as returned from addMenuItem command. command is optional.", "example": "-", "docSyntax": "map updateMenuItem [menu item index,text,command]", "syntax": "<objMap> updateMenuItem [menu <objItem> <scalar>,<string>,command]"}, "updateObjectTree": {"version": "1.00", "tags": "", "description": "Update the editor object tree.", "example": "updateObjectTree _ctrlMap;", "docSyntax": "updateObjectTree map", "syntax": "updateObjectTree <objMap>"}, "useAudioTimeForMoves": {"version": "1.00", "tags": "", "description": "Switch between elapsed game time and audio time being used as animation timer. Used for audio/animation synchronization.", "example": "player useAudioTimeForMoves true", "docSyntax": "soldier useAudioTimeForMoves toggle", "syntax": "soldier useAudioTimeForMoves toggle"}, "viewDistance": {"version": "1.00", "tags": "", "description": "Returns the rendering distance.", "example": "hint (\"my view distance is \" + str viewDistance + \" meters\");", "docSyntax": "viewDistance", "syntax": "viewDistance"}, "visibleMap": {"version": "1.00", "tags": "", "description": "Return true if the main map is shown (active).", "example": "if (visibleMap) then {hint \"You're showing the map\u00a0!\"}", "docSyntax": "visibleMap", "syntax": "visibleMap"}, "waypointAttachedObject": {"version": "1.00", "tags": "", "description": "Gets the object attached to the waypoint.", "example": "waypointAttachedObject [groupOne,1]", "docSyntax": "waypointAttachedObject waypoint", "syntax": "waypointAttachedObject waypoint"}, "waypointAttachedVehicle": {"version": "1.00", "tags": "", "description": "Gets the vehicle attached to the waypoint.", "example": "waypointAttachedVehicle [groupOne,1]", "docSyntax": "waypointAttachedVehicle waypoint", "syntax": "waypointAttachedVehicle waypoint"}, "waypointBehaviour": {"version": "1.00", "tags": "", "description": "Gets the waypoint behavior.", "example": "waypointBehaviour [groupOne,1]", "docSyntax": "waypointBehaviour waypoint", "syntax": "waypointBehaviour waypoint"}, "waypointCombatMode": {"version": "1.00", "tags": "", "description": "Gets the waypoint combat mode.", "example": "waypointCombatMode [groupOne,1]", "docSyntax": "waypointCombatMode waypoint", "syntax": "waypointCombatMode waypoint"}, "waypointCompletionRadius": {"version": "1.00", "tags": "", "description": "Gets the radius around the waypoint where the waypoint is completed.", "example": "_radius = waypointCompletionRadius [groupOne, 1];", "docSyntax": "waypointCompletionRadius waypoint", "syntax": "waypointCompletionRadius waypoint"}, "waypointDescription": {"version": "1.00", "tags": "", "description": "Gets the waypoint description.", "example": "waypointDescription [groupOne,1]", "docSyntax": "waypointDescription waypoint", "syntax": "waypointDescription waypoint"}, "waypointFormation": {"version": "1.00", "tags": "", "description": "Gets the waypoint formation. Possible values are:", "example": "waypointFormation [groupOne,1]", "docSyntax": "waypointFormation waypoint", "syntax": "waypointFormation waypoint"}, "waypointHousePosition": {"version": "1.00", "tags": "", "description": "Returns buildingPos index assigned to the waypoint.", "example": "waypointHousePosition [groupOne,1]", "docSyntax": "waypointHousePosition waypoint", "syntax": "waypointHousePosition waypoint"}, "waypointScript": {"version": "1.00", "tags": "", "description": "Gets the waypoint script.", "example": "waypointScript [groupOne,1]", "docSyntax": "waypointScript waypoint", "syntax": "waypointScript waypoint"}, "waypointShow": {"version": "1.00", "tags": "", "description": "A getter for showWaypoint command. Possible values are:", "example": "_wpShow = waypointShow [groupOne,1];", "docSyntax": "waypointShow waypoint", "syntax": "waypointShow waypoint"}, "waypointSpeed": {"version": "1.00", "tags": "", "description": "Gets the waypoint speed. Possible values are:", "example": "_speed = waypointSpeed [groupOne,1];", "docSyntax": "waypointSpeed waypoint", "syntax": "waypointSpeed waypoint"}, "waypointStatements": {"version": "1.00", "tags": "", "description": "Gets the waypoint statements.", "example": "waypointStatements [groupOne,1]", "docSyntax": "waypointStatements waypoint", "syntax": "waypointStatements waypoint"}, "waypointTimeout": {"version": "1.00", "tags": "", "description": "Gets the waypoint timeout values.", "example": "waypointTimeout [groupOne,1]", "docSyntax": "waypointTimeout waypoint", "syntax": "waypointTimeout waypoint"}, "waypointType": {"version": "1.00", "tags": "", "description": "Gets the waypoint type. Type can be:", "example": "waypointType [groupOne,1],", "docSyntax": "waypointType waypoint", "syntax": "waypointType waypoint"}, "with": {"version": "1.00", "tags": "", "description": "Creates a With Type that is used inside a do construct in order to execute code inside a given namespace.", "example": "_myWithType = with uiNamespace;", "docSyntax": "with namespace", "syntax": "with namespace"}, "worldToScreen": {"version": "1.00", "tags": "", "description": "Converts position in world space into screen (UI) space. If a specified position is not within the current screen view, an empty array is returned.", "example": "_screenPos = worldToScreen getPos soldier1;", "docSyntax": "worldToScreen position", "syntax": "worldToScreen position"}, "getPlayerUID": {"version": "1.02", "tags": "[AG] ", "description": "Return a UniqueID of the given unit (player).", "example": "private _uid = getPlayerUID player;", "docSyntax": "getPlayerUID unit", "syntax": "getPlayerUID <objUnit>"}, "mapCenterOnCamera": {"version": "1.02", "tags": "", "description": "ctrl mapCenterOnCamera enable syntax enables/disables continuous centering of the main map type control on the camera position. Needs to be executed once.", "example": "//\u00a0--- Minimap update ((uiNamespace getVariable \"BIS_UAV_DISPLAY\") displayCtrl 112410) mapCenterOnCamera true;", "docSyntax": "mainmap mapCenterOnCamera enable", "syntax": "mainmap mapCenterOnCamera <bool>"}, "getPosATL": {"version": "1.03", "tags": "[AG] ", "description": "Returns the position of an object relative to the terrain.", "example": "_objPosition = getPosATL player", "docSyntax": "getPosATL object", "syntax": "getPosATL <object>"}, "openMap": {"version": "1.03", "tags": "[EL] ", "description": "Opens or closes in-game map.", "example": "openMap true;", "docSyntax": "openMap show", "syntax": "openMap show"}, "safeZoneWAbs": {"version": "1.03", "tags": "", "description": "Returns SafeZone width (of all monitors, in case there's more than one)", "example": "_szW = safeZoneWAbs;", "docSyntax": "safeZoneWAbs", "syntax": "safeZoneWAbs"}, "safeZoneXAbs": {"version": "1.03", "tags": "", "description": "Returns SafeZone left border (of all monitors, in case there's more than one)", "example": "_szX = safeZoneXAbs;", "docSyntax": "safeZoneXAbs", "syntax": "safeZoneXAbs"}, "setPosATL": {"version": "1.03", "tags": "[AG] [EG] ", "description": "Sets the position of an object relative to the terrain.", "example": "player setPosATL [getPosATL player select 0, (getPosATL player select 1) - 10, getPosATL player select 2];", "docSyntax": "object setPosATL pos", "syntax": "<object> setPosATL <array>"}, "mapGridPosition": {"version": "1.04", "tags": "", "description": "Returns the map grid position of an object or position.", "example": "_gridPos = mapGridPosition player;", "docSyntax": "mapGridPosition param", "syntax": "mapGridPosition param"}, "unitsBelowHeight": {"version": "1.04", "tags": "[AG] ", "description": "Returns units in group/array below given Above Terrain Level (ATL) height.", "example": "_allOnGroudUnits = group player unitsBelowHeight 10;", "docSyntax": "units unitsBelowHeight height", "syntax": "units unitsBelowHeight height"}, "WFSideText": {"version": "1.04", "tags": "", "description": "Returns the unlocalized text value of an object's side / a group's side or a side as:", "example": "WFSideText player;", "docSyntax": "WFSideText param", "syntax": "WFSideText param"}, "checkAIFeature": {"version": "1.05", "tags": "", "description": "Checks if the given AI feature is currently enabled. Feature may be one of:", "example": "_featureUsed = checkAIFeature \"AwareFormationSoft\";", "docSyntax": "checkAIFeature feature", "syntax": "checkAIFeature feature"}, "debugFSM": {"version": "1.05", "tags": "", "description": "Dump (something about FSM) to debugging output. This command is (assumed to be) non-functional in the retail version.", "example": "-", "docSyntax": "FSMhandle debugFSM true", "syntax": "FSMhandle debugFSM <bool>"}, "enableAIFeature": {"version": "1.05", "tags": "", "description": "Enables/disables given AI feature. Feature may be one of:", "example": "\"AwareFormationSoft\" enableAIFeature true;", "docSyntax": "feature enableAIFeature enable", "syntax": "feature enableAIFeature <bool>"}, "openDSInterface": {"version": "1.05", "tags": "", "description": "Opens MP interface.", "example": "openDSInterface", "docSyntax": "openDSInterface", "syntax": "openDSInterface"}, "serverCommand": {"version": "1.05", "tags": "[SE] ", "description": "Executes the given server command.", "example": "serverCommand \"#logout\";", "docSyntax": "serverCommand command", "syntax": "serverCommand command"}, "serverCommandAvailable": {"version": "1.05", "tags": "", "description": "Returns true if given serverCommand is available on current machine, false if not. Here is the general table of availability of Arma 3 server commands:", "example": "_can = serverCommandAvailable \"#kick\";", "docSyntax": "serverCommandAvailable command", "syntax": "serverCommandAvailable command"}, "suppressFor": {"version": "1.05", "tags": "", "description": "Force suppressive fire from the unit.", "example": "_soldier1 suppressFor 10 Will force soldier1 to do suppressive fire to known enemies during 10 seconds", "docSyntax": "unit suppressFor duration", "syntax": "<objUnit> suppressFor duration"}, "textLogFormat": {"version": "1.05", "tags": "", "description": "Debugging output.", "example": "-", "docSyntax": "textLogFormat [format, arg1, arg2, ...]", "syntax": "textLogFormat [format,arg1,arg2,...]"}, "uiSleep": {"version": "1.05", "tags": "", "description": "Suspend execution of script for given uitime. uiSleep is a sleep method to delay script execution where script time/simulation time is stopped. uiSleep is basically using the system time (uiTime more specifically) and not simulation time. So in the cases where sleep command would get stuck indefinitely, uiSleep can still be used to effectively delay script execution. For example in a mission briefing or an editor or when simulation is paused in general.", "example": "uiSleep 0.5", "docSyntax": "uiSleep delay", "syntax": "uiSleep <scalar>"}, "hideObject": {"version": "1.06", "tags": "[AG] [EL] ", "description": "Hide entity. Can be used on soldiers and vehicles, also on static objects.", "example": "hideObject unitName;", "docSyntax": "hideObject object", "syntax": "hideObject <object>"}}