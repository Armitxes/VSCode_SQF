{"abs": {"version": "1.00", "tags": "[AL] ", "description": "Absolute value of a real number", "example": "_n = abs -3; Returns 3", "docSyntax": "Number = abs n", "syntax": "<scalar> = abs <scalar>"}, "accTime": {"version": "1.00", "tags": "", "description": "Returns the current time acceleration factor", "example": "_acc = accTime", "docSyntax": "Number = accTime", "syntax": "<scalar> = accTime"}, "acos": {"version": "1.00", "tags": "", "description": "ArcCosine of a number, result in Degrees", "example": "_degrees = acos 0.5 returns 60", "docSyntax": "Number = acos x", "syntax": "<scalar> = acos x"}, "action": {"version": "1.00", "tags": "[EG] ", "description": "Make a unit perform an action. See Category:Actions for action names and syntaxes.", "example": "player action [\"SitDown\", player];", "docSyntax": "unit action actionArray", "syntax": "<objUnit> action actionArray"}, "addMagazine": {"version": "1.00", "tags": "[AL] [AG] [EG] ", "description": "Adds a magazine to a person. Infantry units can only carry a specific number of magazines, once the magazine slots are filled (or uniform/vest/bagpack are full in Arma 3), any further addMagazine commands are ignored. If class of magazine does not exist, an error message is printed in .rpt: player addMagazine \"dasdsa\"; //\u00a0.rpt: Given magazine[dasdsa] not found)", "example": "player addMagazine \"30Rnd_556x45_STANAG\";", "docSyntax": "unitName addMagazine magazineName", "syntax": "<objUnit> addMagazine magazineName"}, "addMagazineCargo": {"version": "1.00", "tags": "[AL] [AG] [EL] ", "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units. Once the magazine cargo space is filled up, any further addMagazineCargo commands are ignored.", "example": "_truck addMagazineCargo [\"M16\", 5];", "docSyntax": "vehicleName addMagazineCargo [magazineName, count]", "syntax": "vehicleName addMagazineCargo [magazineName,count]"}, "addRating": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Add a number to the rating of a unit - negative values can be used to reduce the rating.", "example": "player addRating 2000;", "docSyntax": "unitName addRating rating", "syntax": "<objUnit> addRating rating"}, "addScore": {"version": "1.00", "tags": "[SE] [AG] [EG] ", "description": "Add a number to the score of a unit. This score is shown in multiplayer in the \"I\" (\"P\" in Arma 3) screen. Negative values will remove from the score. Server execution only.", "example": "unit addScore 10;", "docSyntax": "unit addScore score", "syntax": "<objUnit> addScore score"}, "addWeapon": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Add a weapon to a unit. For a global version of this command see addWeaponGlobal. Infantry units can only carry a specific number of weapons, once the weapon slots are filled, any further addWeapon commands are ignored.", "example": "player addMagazine \"30Rnd_556x45_Stanag\"; player addWeapon \"BAF_L85A2_RIS_SUSAT\";", "docSyntax": "object addWeapon weapon", "syntax": "<object> addWeapon <string>"}, "addWeaponCargo": {"version": "1.00", "tags": "[AL] [AG] [EL] ", "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units. Ignores available cargo space.", "example": "_truck addWeaponCargo [\"M16\", 5];", "docSyntax": "vehicleName addWeaponCargo [weaponName, count]", "syntax": "vehicleName addWeaponCargo [weaponName,count]"}, "alive": {"version": "1.00", "tags": "[AG] ", "description": "Check if given vehicle/person/building is alive (i.e. not dead or destroyed).", "example": "SQS: ?!(alive player)\u00a0: exit", "docSyntax": "alive object", "syntax": "alive <object>"}, "allowDammage": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Allow or prevent an object being damaged (or injured, or killed). Alias of allowDamage.", "example": "player allowDammage false;", "docSyntax": "object allowDammage allow", "syntax": "<object> allowDammage allow"}, "allowFleeing": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets the cowardice level (the lack of courage or bravery) of a group or unit.", "example": "_group1 allowFleeing 0;", "docSyntax": "name allowFleeing cowardice", "syntax": "<string> allowFleeing cowardice"}, "allowGetIn": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Set if the units given in the list are allowed to enter vehicles.", "example": "[_soldier1, _soldier2] allowGetIn true;", "docSyntax": "unitArray allowGetIn allow", "syntax": "unitArray allowGetIn allow"}, "ammo": {"version": "1.00", "tags": "[AG] ", "description": "Check how many rounds are left in the currently loaded magazine in the given muzzle. Since Arma v1.55.133505 the command also returns ammo for units in vehicles.", "example": "_count = player ammo \"M16\"; //returns 30 in case of a full magazine", "docSyntax": "unit ammo muzzle", "syntax": "<objUnit> ammo muzzle"}, "and": {"version": "1.00", "tags": "", "description": "Returns true only if both conditions are true. In case of the alternative syntax, lazy evaluation is used (if left operand is false, evaluation of the right side is skipped completely).", "example": "if ((alive player) and (_enemycount == 0)) then {hint \"you win\u00a0!\"}", "docSyntax": "Boolean = a and b", "syntax": "<bool> = a and b"}, "asin": {"version": "1.00", "tags": "", "description": "Arcsine of a number, result in Degrees.", "example": "_degrees = asin 0.5; //\u00a0Returns 30", "docSyntax": "Number = asin x", "syntax": "<scalar> = asin x"}, "assignAsCargo": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Assign a unit as cargo of a vehicle. Used together with orderGetIn to order a unit to get in as cargo into a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the cargo space of the vehicle.", "example": "_soldier1 assignAsCargo _truck; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsCargo vehicleName", "syntax": "<objUnit> assignAsCargo vehicleName"}, "assignAsCommander": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Assign a unit as commander of a vehicle. Used together with orderGetIn to order subordinate units to get in as commander of a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the commander place of the vehicle.", "example": "_soldier1 assignAsCommander _tank [_soldier1] orderGetIn true", "docSyntax": "unitName assignAsCommander vehicleName", "syntax": "<objUnit> assignAsCommander vehicleName"}, "assignAsDriver": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Assign a unit as driver of a vehicle. Used together with orderGetIn to order subordinate units to get in as driver of a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the driver place of the vehicle.", "example": "_soldier1 assignAsDriver _tank [_soldier1] orderGetIn true", "docSyntax": "unitName assignAsDriver vehicleName", "syntax": "<objUnit> assignAsDriver vehicleName"}, "assignAsGunner": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Assign a unit as gunner of a vehicle. Used together with orderGetIn to order subordinate units to get in as gunner of a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the gunner place of the vehicle.", "example": "_soldier1 assignAsGunner _tank [_soldier1] orderGetIn true", "docSyntax": "unitName assignAsGunner vehicleName", "syntax": "<objUnit> assignAsGunner vehicleName"}, "atan": {"version": "1.00", "tags": "", "description": "ArcTangent of a number, result in Degrees.", "example": "_degrees = atan 1; //45", "docSyntax": "atan x", "syntax": "atan x"}, "atan2": {"version": "1.00", "tags": "", "description": "ArcTangent of x/y. Used to determine the angle of a vector [x,y]. Result in Degrees between -180 and 180.", "example": "_xy = [5,3]; _degrees = (_xy select 0) atan2 (_xy select 1); //59.0362", "docSyntax": "x atan2 y", "syntax": "x atan2 y"}, "atg": {"version": "1.00", "tags": "", "description": "Equivalent to atan.", "example": "_atanThreeFifth = atg 3/5;", "docSyntax": "atg x", "syntax": "atg x"}, "behaviour": {"version": "1.00", "tags": "[AG] ", "description": "Returns the behaviour of the unit's group. For Arma 3 behaviour explanation see Arma_3_AI_Behavior", "example": "_soldier setBehaviour \"CARELESS\"; _b = behaviour _soldier; //returns \"CARELESS\"", "docSyntax": "behaviour unitName", "syntax": "behaviour <objUnit>"}, "benchmark": {"version": "1.00", "tags": "", "description": "Returns the value of \"3D Performance\" in OFP Preferences (flashpoint.cfg). This can be used to estimate the computer performance to adapt CPU and GPU demanding settings like view distance dynamically in missions.", "example": "? (benchmark>2000)\u00a0: setViewDistance 2000", "docSyntax": "Number = benchmark", "syntax": "<scalar> = benchmark"}, "buildingPos": {"version": "1.00", "tags": "[AG] ", "description": "Returns PositionAGL of a given indexed position in a building. The index is 0-based (i.e. the first possible position would be 0. So if a building has 5 positions listed in the editor, 4 would be the highest position index usable with this command). Command will return [0,0,0] if buildingPos with given index is non-existent.", "example": "_soldier setPosATL (_house1 buildingPos 2);", "docSyntax": "building buildingPos index", "syntax": "building buildingPos <scalar>"}, "cadetMode": {"version": "1.00", "tags": "", "description": "Returns if the player is currently playing in cadet or veteran mode.", "example": "? (cadetMode)\u00a0: _AIsoldier setSkill 0.1 //sqs", "docSyntax": "cadetMode", "syntax": "cadetMode"}, "camCommand": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Executes a command on the given camera / actor object. Known commands for:", "example": "_camera camCommand \"manual on\";", "docSyntax": "camera camCommand command", "syntax": "<objCamera> camCommand command"}, "camCommit": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. For camPrepareXXX commands use camCommitPrepared.", "example": "SQS; create a camera object _cam = \"camera\" camCreate [5600,4800,10] _cam camSetTarget player _cam cameraEffect [\"internal\", \"BACK\"] _cam camCommit 0 ; smoothly move the camera to its new position in 6 seconds _cam camSetPos [5680,4720,20] _cam camCommit 6 @camCommitted _cam ; proceed", "docSyntax": "camera camCommit time", "syntax": "<objCamera> camCommit <scalar>"}, "camCommitted": {"version": "1.00", "tags": "", "description": "Checks if the conduction of the last camCommit call already finished.", "example": "SQS: ; create a camera object _cam = \"camera\" camCreate [5600,4800,10] _cam camSetTarget player _cam cameraEffect [\"internal\", \"BACK\"] _cam camCommit 0 ; smoothly move the camera to its new position in 6 seconds _cam camSetPos [5680,4720,20] _cam camCommit 6 @camCommitted _cam ; proceed", "docSyntax": "camCommitted camera", "syntax": "camCommitted <objCamera>"}, "camCreate": {"version": "1.00", "tags": "[EL] ", "description": "Create a camera or a seagull object on the given position. The creation happens immediately and doesn't wait for camCommit.", "example": "_cam = \"camera\" camCreate (ASLToAGL eyePos player);", "docSyntax": "type camCreate position", "syntax": "type camCreate position"}, "camDestroy": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Destroys camera object created with camCreate. This command doesn't need camCommit.", "example": "camDestroy _cam;", "docSyntax": "camDestroy object", "syntax": "camDestroy <object>"}, "cameraEffect": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Sets the given effect on the given camera. If you want to switch the screen directly to the first-person, aiming, third-person or group view of an object, use switchCamera instead. The effect type \"Terminate\" is used to exit the current camera view and switch back to the player's view. Does not need camCommit.", "example": "_cam cameraEffect [\"internal\", \"BACK\"];", "docSyntax": "camera cameraEffect [effectName, effectPosition, r2tName]", "syntax": "<objCamera> cameraEffect [effectName,effectPosition,r2tName]"}, "camSetBank": {"version": "1.00", "tags": "", "description": "Sets camera bank angle. Does not commit changes.", "example": "_camera camSetBank -0.1", "docSyntax": "camera camSetBank bank", "syntax": "<objCamera> camSetBank bank"}, "camSetDir": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Sets the orientation of the given camera in the direction of the given vector. Needs camCommit.", "example": "pos1 = player modelToWorld [0,5,5]; cam = \"camera\" camCreate pos1; cam cameraEffect [\"INTERNAL\", \"BACK\"]; pos2 = player modelToWorld [0,50,50]; cam camSetPos pos2; cam camSetDir (pos2 vectorFromTo pos1); cam camCommit 5; 0 = [] spawn { waitUntil {camCommitted cam}; cam camSetPos pos1; cam camCommit 5; };", "docSyntax": "camera camSetDir direction", "syntax": "<objCamera> camSetDir direction"}, "camSetDive": {"version": "1.00", "tags": "", "description": "Sets camera dive angle. Does not commit changes.", "example": "_camera camSetDive -0.1", "docSyntax": "camera camSetDive dive", "syntax": "<objCamera> camSetDive dive"}, "camSetFov": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Set the zoom level (Field Of View) of the given camera.", "example": "_cam camSetFov 0.75;", "docSyntax": "camera camSetFov level", "syntax": "<objCamera> camSetFov level"}, "camSetFovRange": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Set the zoom level (Field Of View) start and end values for automatical zooming.", "example": "_cam camSetFovRange [0.1, 0.7];", "docSyntax": "camera camSetFovRange fovRange", "syntax": "<objCamera> camSetFovRange fovRange"}, "camSetPos": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Sets the position of the given camera or seagull (see camCreate). It is worth mentioning that camera position can also be set with setPos, in which case it would be instant. With camSetPos it is possible to make smooth position transition in time, defined with camCommit, which is required in this case.", "example": "_cam camSetPos [2300,1000,130]; _cam camCommit 10;", "docSyntax": "camera camSetPos position", "syntax": "<objCamera> camSetPos position"}, "camSetRelPos": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Sets the position of the given camera relative to its target, set with camSetTarget. Needs a call to camCommit to be conducted.", "example": "_cam camSetTarget _car; _cam camSetRelPos [0,10,8];", "docSyntax": "camera camSetRelPos position", "syntax": "<objCamera> camSetRelPos position"}, "camSetTarget": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Set the target object or position where the given camera should point at. Needs the call of camCommit to be conducted. To reset the target use objNull.", "example": "_camera camSetTarget player;", "docSyntax": "camera camSetTarget target", "syntax": "<objCamera> camSetTarget <object>"}, "canFire": {"version": "1.00", "tags": "[AG] ", "description": "Returns true if the given vehicle is still able to fire. For the command to return true, vehicle must be alive, have weapon operator and the weapon cannot be damaged \u2265 0.9 but can be empty due to running out of ammo. If mission starts with vehicle having no ammo or setVehicleAmmo 0 command is executed on the vehicle, then canFire will always report false for it.", "example": "if (not canFire _tank) then { player sideChat \"Tank disabled!\"; };", "docSyntax": "canFire unitName", "syntax": "canFire <objUnit>"}, "canMove": {"version": "1.00", "tags": "[AG] ", "description": "Returns if the given vehicle is still able to move.", "example": "if (not canMove _tank) then { player sideChat \"He's nailed on the ground! Now hurry!\"; };", "docSyntax": "canMove unitName", "syntax": "canMove <objUnit>"}, "canStand": {"version": "1.00", "tags": "[AG] ", "description": "Returns if the given soldier is able to stand up.", "example": "SQS: ?!(canStand player)\u00a0: player groupChat \"My legs! They hit my legs!\"", "docSyntax": "Boolean = canStand unitName", "syntax": "<bool> = canStand <objUnit>"}, "captive": {"version": "1.00", "tags": "[AG] ", "description": "Returns the captive state of the given unit (set with setCaptive). A captive unit will not be attacked by its enemies.", "example": "if (captive _general) then { removeAllWeapons _general; };", "docSyntax": "captive object", "syntax": "captive <object>"}, "civilian": {"version": "1.00", "tags": "", "description": "Pre-defined variable for the civilian side.", "example": "SQS:?((side _unit) == civilian)\u00a0: hint \"This is a civilian unit!\"", "docSyntax": "civilian", "syntax": "civilian", "returns": "objSide"}, "clearMagazineCargo": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Remove all magazines from the given vehicle's magazine cargo space.", "example": "clearMagazineCargo _truck;", "docSyntax": "clearMagazineCargo vehicleName", "syntax": "clearMagazineCargo vehicleName"}, "clearWeaponCargo": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Remove all weapons from the given vehicle's weapon cargo space.", "example": "clearWeaponCargo _truck;", "docSyntax": "clearWeaponCargo vehicleName", "syntax": "clearWeaponCargo vehicleName"}, "combatMode": {"version": "1.00", "tags": "[AG] ", "description": "Returns the combat mode of the given AI group. See setCombatMode for more information about combat modes.", "example": "if (combatMode _grp1 == \"BLUE\") then {_grp1 setCombatMode \"GREEN\"};", "docSyntax": "combatMode group", "syntax": "combatMode <objGroup>"}, "commander": {"version": "1.00", "tags": "[AG] ", "description": "In OFP it returns the commander of a vehicle. Since ArmA and VBS2 it returns the primary observer. The commander of a vehicle can be found with effectiveCommander.", "example": "moveOut commander _tank;", "docSyntax": "commander vehicleName", "syntax": "commander vehicleName"}, "commandFire": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Order the given unit to fire on the given target (via the radio). If the target is objNull, the unit is ordered to fire on its current target (set with doTarget or commandTarget).", "example": "_ESoldier1 commandFire _WSoldier1;", "docSyntax": "unitName commandFire target", "syntax": "<objUnit> commandFire <object>"}, "commandFollow": {"version": "1.00", "tags": "[AL] ", "description": "Order the given unit to follow the given other unit (via the radio).", "example": "_soldier1 commandFollow _soldier2", "docSyntax": "unitName commandFollow followedunit", "syntax": "<objUnit> commandFollow followedunit"}, "commandMove": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Order the given unit(s) to move to the given location (via the radio). Exactly the same as doMove, except this command displays a radio message.", "example": "_soldier1 commandMove (getMarkerPos \"Marker1\")", "docSyntax": "unitName commandMove position", "syntax": "<objUnit> commandMove position"}, "commandStop": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Order the given unit(s) to stop (via the radio).", "example": "commandStop _soldier1;", "docSyntax": "commandStop unitName", "syntax": "commandStop <objUnit>"}, "commandTarget": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Order the given unit(s) to target the given target (via the radio). Command given to the player, puts a red square with words Target and Distance on player's HUD at target location. If player in vehicle and has radar facilities, it also adds target marker to the radar.", "example": "_ESoldier1 commandTarget _WSoldier1;", "docSyntax": "unit commandTarget target", "syntax": "<objUnit> commandTarget <object>"}, "commandWatch": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Orders the unit(s) to watch the given position or target (via the radio). Use objNull as the target to order a unit to stop watching a position/target.", "example": "_soldierOne commandWatch markerPos \"MarkerMoveOne\";", "docSyntax": "units commandWatch position", "syntax": "units commandWatch position"}, "cos": {"version": "1.00", "tags": "", "description": "Cosine of a number, argument in degrees.", "example": "cos 60;//returns 0.5", "docSyntax": "cos x", "syntax": "cos x"}, "count": {"version": "1.00", "tags": "", "description": "Can be used to count:", "example": "count [0, 0, 1, 2]; //\u00a0returns 4 count units group player; //\u00a0returns number of units in player group", "docSyntax": "count array", "syntax": "count <array>"}, "countEnemy": {"version": "1.00", "tags": "[AG] ", "description": "Count how many units in the array are considered enemy to the given unit.", "example": "_num = player countEnemy list _triggerOne;", "docSyntax": "unitName countEnemy arrayName", "syntax": "<objUnit> countEnemy arrayName"}, "countFriendly": {"version": "1.00", "tags": "[AG] ", "description": "Count how many units in the array are considered friendly to the given unit.", "example": "_num = player countFriendly list _triggerOne;", "docSyntax": "unitName countFriendly arrayName", "syntax": "<objUnit> countFriendly arrayName"}, "countSide": {"version": "1.00", "tags": "[AG] ", "description": "Count how many units in the given array belong to given side. If the object in passed array is a Group, the leader of the group will be counted.", "example": "_num = west countSide list _triggerOne;", "docSyntax": "side countSide arrayName", "syntax": "<objSide> countSide arrayName"}, "countType": {"version": "1.00", "tags": "[AG] ", "description": "Count how many objects in the array are of given type. This command also works with parent classes like \"Air\", \"Tank\", and \"Car\". For a full class reference see Classes.", "example": "_count = \"Tank\" countType list _triggerOne;", "docSyntax": "type countType objects", "syntax": "type countType objects"}, "countUnknown": {"version": "1.00", "tags": "[AG] ", "description": "Count how many units in the array are unknown to the given unit.", "example": "_num = player countUnknown list _triggerOne;", "docSyntax": "unitName countUnknown arrayName", "syntax": "<objUnit> countUnknown arrayName"}, "crew": {"version": "1.00", "tags": "[AG] ", "description": "Returns the crew (both dead and alive) of the given vehicle.", "example": "player in (crew _tank);", "docSyntax": "crew vehicleName", "syntax": "crew vehicleName"}, "cutObj": {"version": "1.00", "tags": "[EL] ", "description": "Displays an object defined in the global config in CfgTitles.", "example": "cutObj [\"TVSet\", \"PLAIN\"]; cutObj [\"TVSet\", \"PLAIN\", 2]", "docSyntax": "cutObj [class, type, speed, showInMap]", "syntax": "cutObj [class,type,<scalar>,showInMap]"}, "cutRsc": {"version": "1.00", "tags": "[EL] ", "description": "Display a resource defined in RscTitles of the mission's Description.ext, the campaign's description.ext or the global config.", "example": "cutRsc [\"binocular\", \"PLAIN\"]; cutRsc [\"binocular\", \"PLAIN\", 2]; cutRsc [\"binocular\", \"PLAIN\", 2, false];", "docSyntax": "cutRsc [class, type, speed, showInMap]", "syntax": "cutRsc [class,type,<scalar>,showInMap]"}, "cutText": {"version": "1.00", "tags": "[EL] ", "description": "Displays a text message in the center of the screen. The text can be displayed on multiple lines by using \"\\n\" new line characters:", "example": "cutText [\"\", \"BLACK OUT\"]; cutText [\"Hello World!\", \"PLAIN\", 2];", "docSyntax": "cutText [text, type, speed, showInMap, isStructuredText]", "syntax": "cutText [<string>,type,<scalar>,showInMap,isStructuredText]"}, "daytime": {"version": "1.00", "tags": "", "description": "Returns the current in-game time in hours. For a formatted version of time, see BIS_fnc_timeToString.", "example": "daytime; //\u00a0returns 16.5 given it is 16:30 (4.30pm) in game", "docSyntax": "daytime", "syntax": "daytime"}, "debugLog": {"version": "1.00", "tags": "", "description": "Dump argument type and value to debugging output.", "example": "debugLog player", "docSyntax": "debugLog anything", "syntax": "debugLog anything"}, "deg": {"version": "1.00", "tags": "", "description": "Converts given value in radians to degrees. 1 degree equals 0.01745 radians or pi / 180.", "example": "_degrees = deg 1; // returns 57.2958", "docSyntax": "deg value", "syntax": "deg <scalar>"}, "direction": {"version": "1.00", "tags": "[AG] ", "description": "Returns the direction an object or a location is facing (differs from getDir in that this also works with locations).", "example": "player setDir 90; _d = direction player;//returns 90", "docSyntax": "direction object", "syntax": "direction <object>"}, "disableAI": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Disables parts of the AI behaviour to get a better control over the actions of a unit. Must be executed where AI unit is local. If unit changes locality, it might need to be executed again at the new locality to maintain effect. Possible values are:", "example": "_soldier1 disableAI \"AUTOTARGET\";", "docSyntax": "unitName disableAI section", "syntax": "<objUnit> disableAI section"}, "disableUserInput": {"version": "1.00", "tags": "[EL] ", "description": "Disables or enables the keyboard and mouse input. Usually used during cutscenes.", "example": "disableUserInput true; // cutscene disableUserInput false;", "docSyntax": "disableUserInput state", "syntax": "disableUserInput state"}, "distance": {"version": "1.00", "tags": "[AG] ", "description": "Returns a distance in meters between Objects, Positions or Locations.", "example": "_meters = player distance _object;", "docSyntax": "param1 distance param2", "syntax": "param1 <scalar> param2"}, "doFire": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Order the given unit(s) to fire on the given target (without radio messages). The target is set with doTarget or commandTarget. The target can be a unit or a vehicle, but not an object.", "example": "_ESoldier1 doFire _WSoldier1;", "docSyntax": "unitName doFire target", "syntax": "<objUnit> doFire <object>"}, "doFollow": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Order the given unit(s) to follow the given other unit or vehicle eg (without radio messages). Also is used to resume unit formation after doStop, just doFollow leader even if it is the leader himself you want to resume (see Example 2).", "example": "_soldier1 doFollow _soldier2", "docSyntax": "unitName doFollow unitName2", "syntax": "<objUnit> doFollow unitName2"}, "doMove": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Order the given unit(s) to move to the given position (without radio messages). After reaching his destination, the unit will immediately return to formation (if in a group); or order his group to form around his new position (if a group leader). Use doStop to stop units returning to formation.", "example": "_soldier1 doMove (position _officer);", "docSyntax": "unit(s) doMove position", "syntax": "<objUnit>(s) doMove position"}, "doStop": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Order the given unit(s) to stop (without radio messages). The units stopped in this way will leave the groups formation. It will prevent them from moving around with their group (or formation leader), while still being able to turn around and even move to a new position if they see fit.", "example": "doStop _soldier1;", "docSyntax": "doStop unit(s)", "syntax": "doStop <objUnit>(s)"}, "doTarget": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Order the given unit(s) to target the given target (without radio messages).", "example": "_ESoldier1 doTarget _WSoldier1;", "docSyntax": "unit doTarget target", "syntax": "<objUnit> doTarget <object>"}, "doWatch": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Order the given unit(s) to watch the given position or target (without radio messages). Use objNull as the target to order a unit to stop watching a position/target.", "example": "_soldierOne doWatch markerPos \"MarkerMoveOne\" The unit named \"soldierOne\" will watch the position where the marker \"MarkerMoveOne\" is placed.", "docSyntax": "unit(s) doWatch position", "syntax": "<objUnit>(s) doWatch position"}, "driver": {"version": "1.00", "tags": "[AG] ", "description": "Returns the driver of a vehicle.", "example": "(driver _tank) action [\"getout\", _tank];", "docSyntax": "Object = driver vehicle", "syntax": "<object> = driver <objVehicle>"}, "east": {"version": "1.00", "tags": "", "description": "Pre-defined variable for the eastern side.", "example": "SQS:?((side _unit) == east)\u00a0: hint \"This is a eastern unit!\"", "docSyntax": "east", "syntax": "east", "returns": "objSide"}, "enableEndDialog": {"version": "1.00", "tags": "[EL] ", "description": "Enables the execution of a custom camera sequence after the players death, coded in the script onPlayerKilled.sqs.", "example": "enableEndDialog;", "docSyntax": "enableEndDialog", "syntax": "enableEndDialog"}, "enableRadio": {"version": "1.00", "tags": "[EL] ", "description": "Enable and disable radio messages to be heard and shown in the left lower corner of the screen. This command can be helpful during cutscenes.", "example": "enableRadio false;", "docSyntax": "enableRadio state", "syntax": "enableRadio state"}, "exec": {"version": "1.00", "tags": "", "description": "Execute a script using (the deprecated but still available) SQS syntax. SQF syntax (and execVM) is the most recent scripting language.", "example": "[player, _jeep] exec \"getin.sqs\"", "docSyntax": "argument exec script", "syntax": "argument exec script", "type": "executionStatement"}, "exit": {"version": "1.00", "tags": "[EL] ", "description": "Stops the execution of a SQS script. It's ignored in SQF Scripts.", "example": "exit", "docSyntax": "exit", "syntax": "exit"}, "exp": {"version": "1.00", "tags": "", "description": "Let x be a number, then exp (x) is equal to e to the power of x (or e^x)", "example": "_result = exp 1 returns 2.7182", "docSyntax": "Number = exp x", "syntax": "<scalar> = exp x"}, "fadeMusic": {"version": "1.00", "tags": "[EL] ", "description": "Changes the current music volume to the given value smoothly within the given time.", "example": "5 fadeMusic 0; // fade current music volume to 0 in 5 sec", "docSyntax": "time fadeMusic volume", "syntax": "<scalar> fadeMusic volume"}, "fadeSound": {"version": "1.00", "tags": "[EL] ", "description": "Changes the sound volume smoothly within the given time.", "example": "5 fadeSound 0;", "docSyntax": "time fadeSound volume", "syntax": "<scalar> fadeSound volume"}, "false": {"version": "1.00", "tags": "", "description": "Always false.", "example": "_var = false; systemChat str _var; //false", "docSyntax": "false", "syntax": "<bool>", "returns": "bool", "type": "boolLiteral"}, "fire": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Forces a unit to fire the given weapon. See also: BIS_fnc_fire.", "example": "_soldier fire \"M16\";", "docSyntax": "unit fire muzzle", "syntax": "<objUnit> fire muzzle"}, "flag": {"version": "1.00", "tags": "[AG] ", "description": "Returns the original flag pole of the flag the unit is carrying.", "example": "_flag = flag _soldier;", "docSyntax": "flag unit", "syntax": "<objFlag> <objUnit>"}, "flagOwner": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Returns the global owner of a flag. A getter for setFlagOwner. Note that owner of a flag is Object rather than Number, as how it is usually with other owner commands", "example": "_person = flagOwner _flagOne;", "docSyntax": "flagOwner flag", "syntax": "flagOwner <objFlag>"}, "fleeing": {"version": "1.00", "tags": "[AG] ", "description": "Checks if a unit is fleeing.", "example": "? (fleeing _east_unit)\u00a0: player sideChat \"We have won!\"", "docSyntax": "Boolean = fleeing unitName", "syntax": "<bool> = fleeing <objUnit>"}, "flyInHeight": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets the flying altitude for aircraft relatively to the ground surface. Avoid too low altitudes, as helicopters and planes won't evade trees and obstacles on the ground. The default flying altitude is 100 meters.", "example": "_helicopter flyInHeight 40;", "docSyntax": "aircraft flyInHeight altitude", "syntax": "aircraft flyInHeight <scalar>"}, "forceEnd": {"version": "1.00", "tags": "[EL] ", "description": "Forces mission ending (set with endMission) even if a camera effect or any another condition delays the endMission (mostly in Operation Flashpoint).", "example": "// in an Ending trigger to ensure no camera is delaying mission ending forceEnd;", "docSyntax": "forceEnd", "syntax": "forceEnd"}, "forEach": {"version": "1.00", "tags": "", "description": "Executes the given command(s) on every item of an array.", "example": "//\u00a0SQF { _x setDamage 1 } forEach units group player; ; SQS \"_x setDammage 1\" forEach units group player", "docSyntax": "code forEach array", "syntax": "<code> forEach <array>"}, "format": {"version": "1.00", "tags": "", "description": "Composes a string containing other variables or other variable types. Converts any variable type to a string. If you want to convert a string back to a number, use parseNumber.", "example": "format [\"Player:%1, player's side:%2\", player, side player]; returns \"Player:WEST 1-1-A:1 (Username), player's side:WEST\"", "docSyntax": "format [formatString, var1, var2 ...]", "syntax": "format [formatString,var1,var2 ...]"}, "formation": {"version": "1.00", "tags": "[AG] ", "description": "Returns the current formation of a group.", "example": "formation group player", "docSyntax": "String = formation grp", "syntax": "<string> = formation <objGroup>"}, "formLeader": {"version": "1.00", "tags": "[AG] ", "description": "Returns the formation leader of a given unit. This is often the same as the group leader, but not always, for example in cases when a unit is ordered to follow another unit.", "example": "? (formLeader player\u00a0!= leader player)\u00a0: hint \"The formation leader is different to the group leader!\"", "docSyntax": "Object = formLeader unitName", "syntax": "<object> = formLeader <objUnit>"}, "fuel": {"version": "1.00", "tags": "[AG] ", "description": "Checks how much fuel is left in the gas tank of a vehicle.", "example": "if (fuel vehicle player == 0) then {hint \"The vehicle is out of fuel!\"};", "docSyntax": "fuel vehicle", "syntax": "fuel <objVehicle>"}, "getDammage": {"version": "1.00", "tags": "", "description": "Returns the object damage in the range from 0 to 1. Alias of damage.", "example": "private _damage = getDammage player;", "docSyntax": "getDammage object", "syntax": "getDammage <object>"}, "getDir": {"version": "1.00", "tags": "[AG] ", "description": "Returns the object heading in the range 0..360.", "example": "_azimuth = getDir player;", "docSyntax": "getDir object", "syntax": "getDir <object>"}, "getMarkerPos": {"version": "1.00", "tags": "[EL] ", "description": "Returns marker position. See also setMarkerPos.", "example": "_mPos1 = getMarkerPos \"markerOne\";", "docSyntax": "getMarkerPos markerName", "syntax": "getMarkerPos <string>"}, "getPos": {"version": "1.00", "tags": "[AG] ", "description": "Returns object or location position. If the argument is the object, the return value is in format PositionAGLS. Z value is height over the surface underneath.", "example": "hintSilent str getPos player;", "docSyntax": "getPos object", "syntax": "getPos <object>"}, "globalChat": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Types text to the global radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "_soldierOne globalChat \"Show this text\";", "docSyntax": "unitName globalChat chatText", "syntax": "<objUnit> globalChat chatText"}, "globalRadio": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sends the audio message to the global radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne globalRadio \"messageOne\";", "docSyntax": "unit globalRadio radioName", "syntax": "<objUnit> globalRadio radioName"}, "goto": {"version": "1.00", "tags": "", "description": "Break script flow and go to given label (defined by # - NOT to be confused with SQF's hash sign!)", "example": "goto \"myLabel\" player setDamage 1 #myLabel hint \"you successfully avoided death!\"", "docSyntax": "goto label", "syntax": "goto label"}, "group": {"version": "1.00", "tags": "[AG] ", "description": "Returns the group a unit is assigned to.", "example": "_playerGrp = group player", "docSyntax": "group object", "syntax": "<objGroup> <object>"}, "groupChat": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Types text to the group radio channel. Must have assigned \"ItemRadio\" to see or transmit the messages. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "_soldierOne groupChat \"Show this text\";", "docSyntax": "unitName groupChat chatText", "syntax": "<objUnit> groupChat chatText"}, "groupRadio": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sends the audio message to the group radio channel. Must have assigned \"ItemRadio\" to send or receive the transmission. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne groupRadio \"messageOne\";", "docSyntax": "unit groupRadio radioName", "syntax": "<objUnit> groupRadio radioName"}, "grpNull": {"version": "1.00", "tags": "", "description": "A non-existing Group. To compare non-existent groups use isNull or isEqualTo:", "example": "!isNull grpNull; // false", "docSyntax": "grpNull", "syntax": "grpNull"}, "gunner": {"version": "1.00", "tags": "[AG] ", "description": "Returns the gunner of a vehicle.", "example": "(gunner _tank1) action [\"getout\",_tank1]", "docSyntax": "Object = gunner vehicle", "syntax": "<object> = gunner <objVehicle>"}, "handsHit": {"version": "1.00", "tags": "[AG] ", "description": "Checks if a soldier's hands are hit, which results in inaccurate aiming.", "example": "? (handsHit player == 1)\u00a0: player globalChat \"Ouch! Don't shoot at my hands dammit!\"", "docSyntax": "Number = handsHit unitName", "syntax": "<scalar> = handsHit <objUnit>"}, "hasWeapon": {"version": "1.00", "tags": "[AG] ", "description": "Checks if a unit has the given weapon in hands or on back/in holster. Weapons inside unit containers such as vest and backpack are not counted.", "example": "if\u00a0!(player hasWeapon \"arifle_MX_ACO_pointer_F\") then { player addWeapon \"arifle_MX_ACO_pointer_F\" };", "docSyntax": "unitName hasWeapon weaponName", "syntax": "<objUnit> hasWeapon weaponName"}, "hint": {"version": "1.00", "tags": "[EL] ", "description": "Outputs a hint message to the right of the screen (left of the screen in Operation Flashpoint) with a sound (except in Armed Assault). Use hintSilent for soundless hint. To split message in multiple lines either use Structured Text or \\n (in lower case).", "example": "// outputs the following: // Press W to move forward. // Press S to move backwards. hint \"Press W to move forward.\\nPress S to move backwards.\"", "docSyntax": "hint message", "syntax": "hint message"}, "hintC": {"version": "1.00", "tags": "[EL] ", "description": "Displays attractive hint in the center of the screen. Player control is taken away until \"Continue\" is pressed.", "example": "hintC \"Press W to move forward\";", "docSyntax": "hintC content", "syntax": "hintC content"}, "hintCadet": {"version": "1.00", "tags": "[EL] ", "description": "Shows a text hint only when in cadetMode. The text can contain several lines. \\n is used to indicate the end of a line.", "example": "hintCadet \"Press W to move forward\";", "docSyntax": "hintCadet text", "syntax": "hintCadet <string>"}, "in": {"version": "1.00", "tags": "", "description": "Checks whether value is in array, unit is in vehicle, position is inside location or ANSI string is part of other ANSI string. If Unicode support is desired, see forceUnicode.", "example": "1 in [0, 1, 2]; //\u00a0true", "docSyntax": "value in array", "syntax": "<scalar> in <array>"}, "inflame": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Control fireplace burning. Set inflame to true (on) or false (off).", "example": "_fireplaceOne inflame true;", "docSyntax": "fireplace inflame burn", "syntax": "fireplace inflame burn"}, "isNull": {"version": "1.00", "tags": "[AG] ", "description": "Checks whether the tested item is null.", "example": "if (isNull obj) then {hint \"doesn't exist\";};", "docSyntax": "isNull entity", "syntax": "isNull entity"}, "knowsAbout": {"version": "1.00", "tags": "[AL] ", "description": "Checks if a group or a side knows about target.", "example": "_knowledge = player knowsAbout _target;", "docSyntax": "who knowsAbout target", "syntax": "who knowsAbout <object>"}, "land": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Force helicopter landing. Landing mode may be:", "example": "_cobraOne land \"LAND\"", "docSyntax": "helicopter land mode", "syntax": "helicopter land mode"}, "leader": {"version": "1.00", "tags": "[AG] ", "description": "Returns the group leader for the given unit or group. For dead units, objNull is returned.", "example": "leader group player == leader player", "docSyntax": "Object = leader unitName", "syntax": "<object> = leader <objUnit>"}, "list": {"version": "1.00", "tags": "[AG] [EL] ", "description": "List of units that would activate given Trigger. It returns nothing before the simulation started, i.e. in (undelayed) init.sqf files. Returns a pointer to the trigger's list after the simulation started.", "example": "_tlist = list _triggerOne;", "docSyntax": "Array = list trigger", "syntax": "<array> = list <objTrigger>"}, "ln": {"version": "1.00", "tags": "", "description": "Natural logarithm of x.", "example": "", "docSyntax": "Number = ln x", "syntax": "<scalar> = ln x"}, "local": {"version": "1.00", "tags": "[AG] ", "description": "Check if given unit is local on the computer in Multiplayer games - see Multiplayer Scripting - Locality.", "example": "if (not local _unit) then { hint format [\"%1 is remote\", name _unit]; };", "docSyntax": "local object", "syntax": "local <object>"}, "localize": {"version": "1.00", "tags": "", "description": "Used to internationalise text messages. A string is returned from Stringtable.csv (or Stringtable.xml) which corresponds to the stringName.", "example": "hint localize \"STR_WEST\"; // -> \"BLUFOR\" (in Arma2)", "docSyntax": "localize stringName", "syntax": "localize stringName"}, "lock": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Lock vehicle (disable mounting / dismounting) for player. This command will remove user get in/get out actions but will not stop player getting into or out of vehicle via script commands (e.g moveInCargo).", "example": "_jeepOne lock true;", "docSyntax": "vehicleName lock locked", "syntax": "vehicleName lock <bool>"}, "locked": {"version": "1.00", "tags": "[AG] ", "description": "Check if vehicle is locked. If it is locked, Persons cannot mount / dismount without order.", "example": "_locked = locked _jeepOne;", "docSyntax": "locked vehicle", "syntax": "<bool> <objVehicle>"}, "lockWP": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Disable switching to next waypoint (current waypoint will never complete while lockwp is used). Sometimes used during cut-scenes.", "example": "_groupOne lockWP true;", "docSyntax": "groupName lockWP lock", "syntax": "groupName lockWP lock"}, "log": {"version": "1.00", "tags": "", "description": "Base-10 logarithm of x.", "example": "_log = log 10; // 1", "docSyntax": "Number = log x", "syntax": "<scalar> = log x"}, "mod": {"version": "1.00", "tags": "", "description": "Remainder of a divided by b.", "example": "", "docSyntax": "Number = a mod b", "syntax": "<scalar> = a mod b"}, "move": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Let group move to given position. Active waypoints will be ignored when command is used.", "example": "_groupOne move position player;", "docSyntax": "group move position", "syntax": "<objGroup> move position"}, "moveInCargo": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Move soldier into vehicle cargo position (Immediate, no animation).", "example": "_soldierOne moveInCargo _jeepOne;", "docSyntax": "unitName moveInCargo vehicle", "syntax": "<objUnit> moveInCargo <objVehicle>"}, "moveInCommander": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Move soldier into vehicle commander position (Immediate, no animation).", "example": "_soldierOne moveInCommander _tankOne", "docSyntax": "unitName moveInCommander vehicle", "syntax": "<objUnit> moveInCommander <objVehicle>"}, "moveInDriver": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Moves soldier into vehicle driver position (immediate, no animation).", "example": "_soldierOne moveInDriver _tankOne", "docSyntax": "unit moveInDriver vehicle", "syntax": "<objUnit> moveInDriver <objVehicle>"}, "moveInGunner": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Move soldier into vehicle gunner position (Immediate, no animation).", "example": "soldierOne moveInGunner tankOne", "docSyntax": "unitName moveInGunner vehicle", "syntax": "<objUnit> moveInGunner <objVehicle>"}, "musicVolume": {"version": "1.00", "tags": "", "description": "Returns the current music volume (set by fadeMusic)", "example": "hint str musicVolume;", "docSyntax": "musicVolume", "syntax": "musicVolume"}, "name": {"version": "1.00", "tags": "", "description": "When argument is Object, the command returns the name given to a unit using the setIdentity instruction or selected randomly by the game engine if setIdentity has not been used on the unit. If used on vehicle, name of first crew member (in order commander, driver, gunner). If used on an object, \"Error: No unit\" is being returned.", "example": "_name = name player;", "docSyntax": "name object", "syntax": "<string> <object>"}, "nearestBuilding": {"version": "1.00", "tags": "", "description": "Finds the nearest building to a given object or position. A \"building\" is defined as an object that is of class \"House\" and contains a path LOD.", "example": "_nBuilding = nearestBuilding player;", "docSyntax": "nearestBuilding position", "syntax": "nearestBuilding position"}, "nearestObject": {"version": "1.00", "tags": "", "description": "Returns the nearest object of given type (or inherited classes) to given position within a sphere. Hardcoded radius is 50 meters. Unlike with nearestObjects, where distance is measured in 2D space, nearestObject will be closest object in 3D space.", "example": "_nObject = nearestObject [2345, 6789]; _nObject = nearestObject [player, \"StreetLamp\"];", "docSyntax": "nearestObject [position, type]", "syntax": "nearestObject [position,type]"}, "nil": {"version": "1.00", "tags": "", "description": "Nil value. This value can be used to undefine existing variables.", "example": "variableToDestroy = nil;", "docSyntax": "nil", "syntax": "nil"}, "not": {"version": "1.00", "tags": "", "description": "not a is exactly the same as !a", "example": "", "docSyntax": "Boolean = not a", "syntax": "<bool> = not a"}, "objNull": {"version": "1.00", "tags": "", "description": "A non-existent Object. To compare non-existent objects use isNull or isEqualTo:", "example": "player == player; // false if player is null", "docSyntax": "objNull", "syntax": "objNull"}, "objStatus": {"version": "1.00", "tags": "", "description": "Sets the status of an objective that was defined in briefing.html. Status may be one of:", "example": "\"1\" objStatus \"DONE\" Marks the objective named \"OBJ_1\" as completed.", "docSyntax": "objectivenumber objStatus status", "syntax": "objectivenumber objStatus status"}, "or": {"version": "1.00", "tags": "", "description": "Returns true if one or both conditions are true. In case of the alternative syntax, lazy evaluation is used (if left operand is true, evaluation of the right side is skipped completely).", "example": "if (_obj1 or (_enemycount == 0) or (not alive _enemyGeneral)) then { hint \"you win\u00a0!\"; };", "docSyntax": "a or b", "syntax": "a or b"}, "orderGetIn": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Force all units in the array to get in or out of their assigned vehicles. Units must be assigned to a vehicle before this command will do anything.", "example": "[_unitOne, _unitTwo] orderGetIn true", "docSyntax": "unitArray orderGetIn order", "syntax": "unitArray orderGetIn <scalar>"}, "pi": {"version": "1.00", "tags": "", "description": "pi (180 degrees converted to Radians).", "example": "_radians = 2 * pi;//\u00a0Result is 6.2830", "docSyntax": "pi", "syntax": "pi"}, "player": {"version": "1.00", "tags": "", "description": "Returns the unit controlled by the local user / player.", "example": "player addRating 500;", "docSyntax": "player", "syntax": "player", "returns": "objUnit", "type": "objUnit"}, "playMove": {"version": "1.00", "tags": "[AL] [EG] ", "description": "When used on a person, smooth transition to given move will be done.", "example": "soldierOne playMove \"Stand\";", "docSyntax": "unitName playMove moveName", "syntax": "<objUnit> playMove moveName"}, "playMusic": {"version": "1.00", "tags": "[EL] ", "description": "Plays music defined in Description.ext's CfgMusic or config.cpp. If the musicName could not be found a message is logged into the .rpt file: Music <musicName> not found.", "example": "playMusic \"RadioAmbient1\";", "docSyntax": "playMusic musicName", "syntax": "playMusic musicName"}, "playSound": {"version": "1.00", "tags": "[EL] ", "description": "Plays a sound from CfgSounds. Sound can be defined in missionConfigFile, configFile or campaignConfigFile.", "example": "playSound \"soundname\"", "docSyntax": "playSound soundName", "syntax": "playSound <string>"}, "private": {"version": "1.00", "tags": "", "description": "Sets a variable to the innermost scope as demonstrated in Example 3. See also param and params.", "example": "private _varname = \"this is my new variable\"; //\u00a0since Arma 3 v1.53 only //\u00a0identical, but less performant private \"_varname\"; _varname = \"this is my new variable\";", "docSyntax": "private variableName", "syntax": "private variableName", "type": "accessModifier"}, "rad": {"version": "1.00", "tags": "", "description": "Converts given value in degrees to radians. 1 radian equals 180 degrees divided by pi.", "example": "_radians = rad 180;//\u00a0Returns 3.1415 (pi)", "docSyntax": "rad value", "syntax": "rad <scalar>"}, "random": {"version": "1.00", "tags": "", "description": "Random real (floating point) value from 0 (inclusive) to x (not inclusive).", "example": "_rNumber = random 1;", "docSyntax": "random x", "syntax": "random x"}, "rating": {"version": "1.00", "tags": "[AG] ", "description": "Check unit rating. Rating is increased for killing enemies, decreased for killing friendlies (see Rating Values). Can be changed via addRating by the mission designer. The rating of the player is displayed as the \"score\" at the end of the mission. Via Description.ext one can define how many points it takes to get a perfect score, as well as the number of stars.", "example": "_score = rating player", "docSyntax": "Number = rating unitName", "syntax": "<scalar> = rating <objUnit>"}, "removeAllWeapons": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Removes all weapons and magazines from the given unit. Does not remove map, compass, radio. You can use unitname removeWeapon \"itemMap\"; for example. Doesn't quite work with vehicles. If you need to remove all weapons from a vehicle, remove each weapon individually: {tank removeWeapon _x} forEach weapons tank;", "example": "removeAllWeapons player;", "docSyntax": "removeAllWeapons unitName", "syntax": "removeAllWeapons <objUnit>"}, "removeMagazine": {"version": "1.00", "tags": "[AL] ", "description": "Remove magazine from the unit.", "example": "player removeMagazine \"M16\"", "docSyntax": "unitName removeMagazine magazineName", "syntax": "<objUnit> removeMagazine magazineName"}, "removeMagazines": {"version": "1.00", "tags": "[AL] ", "description": "Removes all magazines of given type from the unit. If magazine class does not exist, nothing happens, not even .rpt message, unlike with addMagazine command.", "example": "player removeMagazines \"30Rnd_556x45_Stanag\";", "docSyntax": "unitName removeMagazines magazineName", "syntax": "<objUnit> removeMagazines magazineName"}, "removeWeapon": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Remove weapon from a unit. The unit must be local to the computer where command is executed. For a global version of this command see removeWeaponGlobal. Note: It is possible to create invalid combinations with this command (ie, attempting to remove a weapon that a unit does not possess). When doing so, application behaviour is undefined.", "example": "player removeWeapon \"BAF_L85A2_RIS_SUSAT\";", "docSyntax": "unit removeWeapon weapon", "syntax": "<objUnit> removeWeapon <string>"}, "resistance": {"version": "1.00", "tags": "", "description": "Resistance side.", "example": "SQS:?((side _unit) == resistance)\u00a0: hint \"This is a resistance unit!\"", "docSyntax": "resistance", "syntax": "resistance", "returns": "objSide"}, "reveal": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Reveals a target to a group. If toWhom is a unit, unit's group is considered. If toWhom is a vehicle, vehicle commander's group is considered. The knowledge value will be set to the highest level any unit of the revealing side has about the revealed target. If the revealing side has no knowledge about the revealed target, the value will be set to 1.", "example": "_soldierOne reveal _soldierTwo; //\u00a0soldierOne knowsAbout information about soldierTwo is updated", "docSyntax": "toWhom reveal target", "syntax": "toWhom reveal <object>"}, "saveGame": {"version": "1.00", "tags": "", "description": "Autosaves the game (used for Retry). The game can then be loaded from the last autosave with loadGame. Will not save if the player is null or dead.", "example": "saveGame;", "docSyntax": "saveGame", "syntax": "saveGame"}, "saveVar": {"version": "1.00", "tags": "", "description": "Save variable value into the campaign space. This variable is available to all following missions in the campaign.", "example": "saveVar \"varOne\"", "docSyntax": "saveVar varname", "syntax": "saveVar varname"}, "say": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Make unit say given sound. The sound is defined in CfgSounds. If the unit is a person, it will also perform corresponding lipsync effect provided an appropriate .lip file has been created for this sound.", "example": "(units player select 1) say [\"whisper1\", 5];", "docSyntax": "from say sound", "syntax": "from say sound"}, "score": {"version": "1.00", "tags": "", "description": "Returns the person's score in MP.", "example": "_pScore = score player;", "docSyntax": "score unit", "syntax": "score <objUnit>"}, "select": {"version": "1.00", "tags": "", "description": "Selects an element from an array, config entry from Config or substring from a string or a range from an array.", "example": "[\"a\", \"b\", \"c\", \"d\"] select 2; //\u00a0result is \"c\" position player select 2; //\u00a0result is Z coordinate of player position", "docSyntax": "array select index", "syntax": "<array> select <scalar>"}, "setAccTime": {"version": "1.00", "tags": "", "description": "Set time acceleration coefficient. May be also used to slow time in cutscenes. This command does NOT work in multiplayer. accFactor is clamped to [1/128; 4].", "example": "setAccTime 0.1", "docSyntax": "setAccTime accFactor", "syntax": "setAccTime accFactor"}, "setAmmoCargo": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Set amount of ammo resources in cargo space of a rearm vehicle. Ammo resource is used to resupply vehicles that take ammo. Soldiers use individual magazines instead. Amount: 1 is full cargo. The", "example": "_ammoTruck1 setAmmoCargo 0.5;", "docSyntax": "vehicleName setAmmoCargo ammoCargo", "syntax": "vehicleName setAmmoCargo ammoCargo"}, "setBehaviour": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets group behaviour mode. If a unit is given as argument, behaviour is set for the unit's group. Behaviour is one of:", "example": "_group1 setBehaviour \"SAFE\";", "docSyntax": "groupName setBehaviour behaviour", "syntax": "groupName setBehaviour behaviour"}, "setCaptive": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Mark a unit as captive. If unit is a vehicle, commander is marked. A captive unit:", "example": "_soldier1 setCaptive true; side _soldier1; //\u00a0returns civilian side group _soldier1; //\u00a0returns e.g blufor", "docSyntax": "unitName setCaptive status", "syntax": "<objUnit> setCaptive status"}, "setCombatMode": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Set group combat mode (engagement rules). Modes: Blue, Green, White, Yellow and Red", "example": "_group1 setCombatMode \"BLUE\";", "docSyntax": "groupName setCombatMode mode", "syntax": "<objGroup> setCombatMode <'Blue'|'Green'|'White'|'Yellow'|'Red'>", "returns": "void"}, "setDammage": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Damage / repair object. Damage 0 means fully functional, damage 1 means completely destroyed / dead.", "example": "_soldier1 setDammage 1;", "docSyntax": "object setDammage damage", "syntax": "<object> setDammage <scalar>"}, "setDir": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets object heading. Angles are measured in degrees clockwise from north, and regular range goes from 0 to 360 (0\u00b0 = N, 90\u00b0 = E, 180\u00b0 = S, 270\u00b0 = W). Negative angles represent a counter-clockwise angle.", "example": "unit1 setDir 45; // will set unit1 to face North-East", "docSyntax": "object setDir heading", "syntax": "<object> setDir heading"}, "setFace": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Set person's face. For a list of available faces, check Category:CfgIdentities.", "example": "soldier1 setFace \"WhiteHead_02\"", "docSyntax": "person setFace face", "syntax": "<objUnit> setFace face"}, "setFaceAnimation": {"version": "1.00", "tags": "", "description": "Sets facial animation phase (eye blinking), blink is in the range from 0 to 1.", "example": "_soldier1 setFaceAnimation 0.5;", "docSyntax": "person setFaceAnimation blink", "syntax": "<objUnit> setFaceAnimation blink"}, "setFlagOwner": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Sets flag owner. When owner is set to objNull or any object other than a unit of class man or logic, flag is returned to the flagpole. A flag owned by a logic has no visual representation.", "example": "_flag1 setFlagOwner _soldier1;", "docSyntax": "flag setFlagOwner owner", "syntax": "<objFlag> setFlagOwner owner"}, "setFlagSide": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets flag Side. A flag may be taken by any unit that is enemy to the side that owns the flag. Just like with setFlagTexture, if the command executed where unit is local effect of the command will be global and JIP compatible.", "example": "_flag1 setFlagSide east;", "docSyntax": "flag setFlagSide side", "syntax": "<objFlag> setFlagSide <objSide>"}, "setFlagTexture": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets flag texture. If texture is \"\", flag is not drawn.", "example": "_flagE setFlagTexture \"\\ca\\misc\\data\\sever_vlajka.paa\";", "docSyntax": "flag setFlagTexture texture", "syntax": "<objFlag> setFlagTexture <string>"}, "setFog": {"version": "1.00", "tags": "[SE] [EG] ", "description": "Smoothly change the fog over given time (in seconds). See also fogParams.", "example": "15 setFog 0.5;", "docSyntax": "time setFog fog", "syntax": "<scalar> setFog fog"}, "setFormation": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Set group formation. Formation is one of:", "example": "_groupOne setFormation \"LINE\"", "docSyntax": "group setFormation formation", "syntax": "<objGroup> setFormation formation"}, "setFormDir": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets group formation heading. Accepted heading range is 0 to 360. Formation is facing this direction unless enemy is seen. When group is moving, this value is overridden by movement direction. If the new direction is noticeably different from the old direction (approx +/- 15 degrees), units will change positions changing formationDirection.", "example": "_group1 setFormDir 180;", "docSyntax": "group setFormDir heading", "syntax": "<objGroup> setFormDir heading"}, "setFuel": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets fuel percentage from 0 (empty) to 1 (full). The vehicle must be local to the computer where command is executed.", "example": "_jeepOne setFuel 0.5;", "docSyntax": "vehicle setFuel amount", "syntax": "<objVehicle> setFuel amount"}, "setFuelCargo": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets fuel amount in cargo space of refuel vehicle from empty (0) to full (1) Note, the carrying capacity of each side's refuel trucks differ.", "example": "_refuelTruckOne setFuelCargo 0;", "docSyntax": "vehicle setFuelCargo amount", "syntax": "<objVehicle> setFuelCargo amount"}, "setGroupId": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sets the group radio callsign, how it will be displayed in radio chat. Two groups on the same side cannot have the same callsign (different side is possible). When trying to apply the same callsign to two groups of the same side, the callsigns will simply be swapped, e.g: group1 setGroupId [\"Active Group\"]; group2 setGroupId [\"Inactive Group\"]; group2 setGroupId [\"Active Group\"]; //\u00a0group1 is \"Inactive Group\" now The identity setup can also consist of format keywords (marked with\u00a0%) and param keywords taken from CfgWorlds config. Basically it is like format command but with some special group keywords (See Example 2).", "example": "Arma 3:group player setGroupId [\"Some name for the group\"]; hint groupId group player; //\u00a0\"Some name for the group\" player sideChat \"lalala\"; //\u00a0Some name for the group (KK): \"lalala\"", "docSyntax": "group setGroupId [nameFormat, nameParam1, ..., nameParamN]", "syntax": "<objGroup> setGroupId [nameFormat,nameParam1,...,nameParamN]"}, "setIdentity": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sets identity of a person. The identities could be defined in a custom config in Description.ext or in the main config. For a list of available main config values see CfgIdentities.", "example": "_soldier1 setIdentity \"MyLittleSoldier\";", "docSyntax": "person setIdentity identity", "syntax": "<objUnit> setIdentity identity"}, "setMarkerPos": {"version": "1.00", "tags": "[EG] ", "description": "Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, PositionWorld of the object is used.", "example": "\"MarkerOne\" setMarkerPos getMarkerPos \"MarkerTwo\"", "docSyntax": "markerName setMarkerPos pos", "syntax": "<string> setMarkerPos <array>"}, "setMarkerType": {"version": "1.00", "tags": "[EG] ", "description": "Sets marker type. Marker type is a class name from cfgMarkers.", "example": "\"MarkerOne\" setMarkerType \"Warning\";", "docSyntax": "markerName setMarkerType type", "syntax": "<string> setMarkerType type"}, "setMimic": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sets person's facial expression. To set it back to default, use \"\".", "example": "_soldier1 setMimic \"hurt\";", "docSyntax": "person setMimic mimic", "syntax": "<objUnit> setMimic mimic"}, "setOvercast": {"version": "1.00", "tags": "[EL] ", "description": "Set overcast to given value smoothly during given time (in seconds). Zero time means immediate change. An overcast setting of zero means clear (sunny) weather, and one means storms and rain are very likely. Higher overcast values also result in higher wind speeds.", "example": "50 setOvercast 0.5", "docSyntax": "time setOvercast overcast", "syntax": "<scalar> setOvercast overcast"}, "setPos": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Sets object position. The position is clamped to the bound of minXYZ: [-50k,-50k,-50k]; maxXYZ: [500k,500k,500k] (See Position)", "example": "player setPos [getPos player select 0, getPos player select 1, (getPos player select 2) +10]; //the same as above using modelToWorld: player setPos (player modelToWorld [0,0,10]); //the same as above using vectorAdd: player setPos (getPos player vectorAdd [0,0,10]);", "docSyntax": "object setPos pos", "syntax": "<object> setPos <array>"}, "setRadioMsg": {"version": "1.00", "tags": "[EL] ", "description": "Sets radio trigger menu title text (0 -> 0 -> map radio). Use \"NULL\" to disable radio slot. Use \"\" to restore default title", "example": "1 setRadioMsg \"Click meeeeeeeeee\"; //changes title of radio Alpha", "docSyntax": "index setRadioMsg text", "syntax": "<scalar> setRadioMsg <string>"}, "setRepairCargo": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Set amount of repair resources in cargo space of repair vehicle. Amount 1 is full cargo.", "example": "_repairTruck1 setRepairCargo 0", "docSyntax": "vehicleName setRepairCargo amount", "syntax": "vehicleName setRepairCargo amount"}, "setSpeedMode": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets group speed mode. If unit is passed as param, unit's group is used. Mode may be one of:", "example": "_groupOne setSpeedMode \"LIMITED\";", "docSyntax": "groupName setSpeedMode mode", "syntax": "groupName setSpeedMode mode"}, "setUnitPos": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Set unit position rules. Mode may be one of:", "example": "_soldier setUnitPos \"UP\";", "docSyntax": "unit setUnitPos mode", "syntax": "<objUnit> setUnitPos mode"}, "setViewDistance": {"version": "1.00", "tags": "[EL] ", "description": "Set rendering distance. Setting view distance to <= 0 resets the value to the client's options (set in Options\u00a0\u2192\u00a0Video\u00a0\u2192\u00a0General\u00a0\u2192\u00a0Visibility\u00a0\u2192\u00a0Overall).", "example": "setViewDistance 2250;", "docSyntax": "setViewDistance distance", "syntax": "setViewDistance <scalar>"}, "showCinemaBorder": {"version": "1.00", "tags": "", "description": "Forces drawing of cinema borders when using custom camera camCreate. This is normally used in cutscenes to indicate player has no control.", "example": "showCinemaBorder false;", "docSyntax": "showCinemaBorder show", "syntax": "showCinemaBorder show"}, "showCompass": {"version": "1.00", "tags": "", "description": "Shows or hides the compass on the map screen, if enabled for the mission and you possess the item. (default true)", "example": "showCompass false;", "docSyntax": "showCompass show", "syntax": "showCompass show"}, "showGPS": {"version": "1.00", "tags": "", "description": "Shows or hides the GPS receiver on the map screen, if enabled for the mission and you possess the item. (default false)", "example": "showGPS true;", "docSyntax": "showGPS show", "syntax": "showGPS show"}, "showMap": {"version": "1.00", "tags": "", "description": "Enable Map (default true)", "example": "showMap false", "docSyntax": "showMap show", "syntax": "showMap show"}, "shownCompass": {"version": "1.00", "tags": "", "description": "Checks if client has Compass enabled in description.ext (showCompass param) or force enabled with showCompass command.", "example": "if (shownCompass) then {hint \"You have Compass enabled\"};", "docSyntax": "shownCompass", "syntax": "shownCompass"}, "shownGPS": {"version": "1.00", "tags": "", "description": "Checks if client has GPS reciever enabled in description.ext (showGPS param) or force enabled with showGPS command.", "example": "if (shownGPS) then {hint \"You have GPS reciever enabled\"};", "docSyntax": "shownGPS", "syntax": "shownGPS"}, "shownMap": {"version": "1.00", "tags": "", "description": "Checks if client has Map enabled in description.ext (showMap param) or force enabled with showMap command.", "example": "if (shownMap) then {hint \"You have Map enabled\"};", "docSyntax": "shownMap", "syntax": "shownMap"}, "shownPad": {"version": "1.00", "tags": "", "description": "Checks if client has Notepad enabled.", "example": "if (shownPad) then {hint \"You have Notepad enabled.\"};", "docSyntax": "shownPad", "syntax": "shownPad"}, "shownRadio": {"version": "1.00", "tags": "", "description": "Check if player has Radio enabled.", "example": "if (shownRadio) then {hint \"You have Radio enabled.\"};", "docSyntax": "shownRadio", "syntax": "shownRadio"}, "shownWarrant": {"version": "1.00", "tags": "", "description": "Check if player has ID card enabled. Obsolete command.", "example": "hint format [\"Your ID is %1\", [\"off\", \"on\"] select shownWarrant];", "docSyntax": "shownWarrant", "syntax": "shownWarrant"}, "shownWatch": {"version": "1.00", "tags": "", "description": "Checks if client has Watch enabled in description.ext (showWatch param) or force enabled with showWatch command.", "example": "if (shownWatch) then {hint \"You have Watch enabled\"};", "docSyntax": "shownWatch", "syntax": "shownWatch"}, "showPad": {"version": "1.00", "tags": "", "description": "Shows or hides the notebook on the map screen, if enabled for the mission. (default true). It is no longer relevant to Arma 2.", "example": "showPad false", "docSyntax": "showPad show", "syntax": "showPad show"}, "showRadio": {"version": "1.00", "tags": "", "description": "Shows or hides the radio on the map screen, if enabled for the mission and you possess the item. (default true)", "example": "showRadio false", "docSyntax": "showRadio show", "syntax": "showRadio show"}, "showWarrant": {"version": "1.00", "tags": "", "description": "Enable ID card.", "example": "-", "docSyntax": "showWarrant show", "syntax": "showWarrant show"}, "showWatch": {"version": "1.00", "tags": "", "description": "Shows or hides the watch on the map screen, if enabled for the mission and you possess the item. (default true)", "example": "showWatch false;", "docSyntax": "showWatch show", "syntax": "showWatch show"}, "side": {"version": "1.00", "tags": "[AG] ", "description": "Returns the side of a unit, vehicle, object or location.", "example": "if (side player == west) then { hint \"Player is on the West side\" };", "docSyntax": "side object", "syntax": "<objSide> <object>"}, "sideRadio": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sends the audio message to the side radio channel. Must have assigned \"ItemRadio\" to send or receive the transmission. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne sideRadio \"messageOne\";", "docSyntax": "unit sideRadio radioName", "syntax": "<objUnit> sideRadio radioName"}, "sin": {"version": "1.00", "tags": "", "description": "Sine of x, argument in Degrees.", "example": "_sine = sin 30;//\u00a0//result is 0.5", "docSyntax": "sin x", "syntax": "sin x"}, "skipTime": {"version": "1.00", "tags": "[SE] ", "description": "Jumps the specified number of hours forward or backward.", "example": "skipTime 5;", "docSyntax": "skipTime duration", "syntax": "skipTime duration"}, "someAmmo": {"version": "1.00", "tags": "", "description": "Check if unit has some ammo.", "example": "? not (someAmmo _loon1)\u00a0: hint \"Loon1 is out of ammo!\"", "docSyntax": "Boolean = someAmmo unitName", "syntax": "<bool> = someAmmo <objUnit>"}, "soundVolume": {"version": "1.00", "tags": "", "description": "Returns the current sound volume (set by fadeSound).", "example": "hint str soundVolume;", "docSyntax": "soundVolume", "syntax": "soundVolume"}, "speed": {"version": "1.00", "tags": "", "description": "Object speed (in km/h). Returns relative speed of given object along Y axis. An equivalent to:", "example": "if (speed _truck1 >= 100) then {hint \"You're going too fast!\"};", "docSyntax": "speed object", "syntax": "<scalar> <object>"}, "speedMode": {"version": "1.00", "tags": "", "description": "Returns speed mode of the group, which can be any of the following:", "example": "_speed = speedMode group player;", "docSyntax": "String = speedMode groupName", "syntax": "<string> = speedMode groupName"}, "sqrt": {"version": "1.00", "tags": "", "description": "Returns square root of x.", "example": "private _squareRoot = sqrt 9; //\u00a0returns 3", "docSyntax": "sqrt x", "syntax": "sqrt x"}, "stop": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Stop AI unit.", "example": "loon1 stop true", "docSyntax": "unitName stop toggle", "syntax": "<objUnit> stop toggle"}, "stopped": {"version": "1.00", "tags": "", "description": "Check if unit is stopped by stop command.", "example": "? (stopped _loon1)\u00a0: hint \"Loon1 is stopped\"", "docSyntax": "Boolean = stopped unitName", "syntax": "<bool> = stopped <objUnit>"}, "switchCamera": {"version": "1.00", "tags": "", "description": "Switch camera to given vehicle / camera. Mode is one of:", "example": "player switchCamera \"Gunner\";", "docSyntax": "target switchCamera mode", "syntax": "<object> switchCamera mode"}, "switchLight": {"version": "1.00", "tags": "[EL] ", "description": "Controls whether a lamp is lit or not.", "example": "(object 12345) switchLight \"OFF\";", "docSyntax": "lamp switchLight mode", "syntax": "lamp switchLight mode"}, "switchMove": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Applies given animation to a unit. When used on a person, the given move is started immediately (there is no transition). Use _unit switchMove \"\"; to reset animation. For a smooth transition use playMove.", "example": "Prone: player switchMove \"AmovPpneMstpSrasWrflDnon\";", "docSyntax": "person switchMove moveName", "syntax": "<objUnit> switchMove moveName"}, "tan": {"version": "1.00", "tags": "", "description": "Tangent of x, argument in Degrees.", "example": "_tangent = tan 45 Result is 1", "docSyntax": "tan x", "syntax": "tan x"}, "textLog": {"version": "1.00", "tags": "", "description": "Dump argument value to debugging output.", "example": "textLog player", "docSyntax": "textLog anything", "syntax": "textLog <any>", "returns": "void"}, "tg": {"version": "1.00", "tags": "", "description": "Identical to tan", "example": "_tangent = tg 45;//\u00a0Result is 1", "docSyntax": "tg x", "syntax": "tg x"}, "time": {"version": "1.00", "tags": "", "description": "Returns time elapsed since mission started (in seconds). The value is different on each client. If you need unified time, use serverTime.", "example": "private _future = time + 30; waitUntil { time >= _future }; //\u00a0continue after 30 seconds", "docSyntax": "time", "syntax": "<scalar>"}, "titleCut": {"version": "1.00", "tags": "", "description": "This command is identical to cutText", "example": "titleCut [\"Hello, how are you?\",\"Plain Down\",3];", "docSyntax": "titleCut [text, type, speed]", "syntax": "titleCut [<string>,type,<scalar>]"}, "titleObj": {"version": "1.00", "tags": "", "description": "Shows object defined in global config in CfgTitles", "example": "titleObj [\"BISLogo\", \"PLAIN\"]", "docSyntax": "titleObj [class, type, speed, showInMap]", "syntax": "titleObj [class,type,<scalar>,showInMap]"}, "titleRsc": {"version": "1.00", "tags": "", "description": "Display a resource defined in RscTitles. Also see cutRsc, with these two commands you can show two different resources at once.", "example": "titleRsc [\"BIS\", \"PLAIN\"]", "docSyntax": "titleRsc [text, type, speed, showInMap]", "syntax": "titleRsc [<string>,type,<scalar>,showInMap]"}, "titleText": {"version": "1.00", "tags": "[EL] ", "description": "Displays text across the screen. If used along with cutText two different texts (in different type styles) can be shown at once. The text can be displayed on multiple lines by using \"\\n\" new line characters: titleText [\"line1\\nline2\\nline3\", \"PLAIN\"];. Since Arma 3 v1.73.142260 this command supports Structured Text formatting.", "example": "titleText [\"Show this text\", \"PLAIN\"];", "docSyntax": "titleText [text, type, speed, showInMap, isStructuredText]", "syntax": "titleText [<string>,type,<scalar>,showInMap,isStructuredText]"}, "true": {"version": "1.00", "tags": "", "description": "Always true", "example": "_var = true; systemChat str _var; //true", "docSyntax": "true", "syntax": "<bool>", "returns": "bool", "type": "boolLiteral"}, "unassignVehicle": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Unassigns individual unit from a vehicle, i.e removes assignedVehicleRole of the unit. If the unit is currently in that vehicle, the group leader will issue an order to disembark.", "example": "unassignVehicle player;", "docSyntax": "unassignVehicle unitName", "syntax": "unassignVehicle <objUnit>"}, "unitReady": {"version": "1.00", "tags": "", "description": "Check if the unit is ready. Unit is busy when it is given some command like move, until the command is finished.", "example": "private _it = unitReady _soldierOne;", "docSyntax": "unitReady unitName", "syntax": "unitReady <objUnit>"}, "units": {"version": "1.00", "tags": "", "description": "Returns an array with all the units in the group or group of the unit.", "example": "_myUnitCount = count units group player;", "docSyntax": "units type", "syntax": "units type"}, "vehicle": {"version": "1.00", "tags": "[AG] ", "description": "Vehicle in which given unit is mounted. If none, unit is returned. Alternatively, use objectParent", "example": "SQS ? vehicle player != player\u00a0: hint \"Player is in a vehicle\"", "docSyntax": "vehicle unitName", "syntax": "<objVehicle> <objUnit>"}, "vehicleRadio": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sends the audio message to the vehicle radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne vehicleRadio \"messageOne\";", "docSyntax": "unit vehicleRadio radioName", "syntax": "<objUnit> vehicleRadio radioName"}, "west": {"version": "1.00", "tags": "", "description": "West side.", "example": "SQS:?((side _unit) == west)\u00a0: hint \"This is a western unit!\"", "docSyntax": "west", "syntax": "west", "returns": "objSide"}, "inflamed": {"version": "1.04", "tags": "[AG] ", "description": "Checks if fireplace is inflamed (burning) or not. To check if a unit is receiving damage from fire, use isBurning command.", "example": "_inflamed = inflamed _fireplaceOne;", "docSyntax": "inflamed fireplace", "syntax": "inflamed fireplace"}, "lightIsOn": {"version": "1.04", "tags": "", "description": "Check if lampost is on (shining).", "example": "if (lightIsOn nearestObject [player, \"StreetLamp\"] == \"ON\") then { hint \"nightime\"; };", "docSyntax": "lightIsOn lamppost", "syntax": "lightIsOn lamppost"}, "addAction": {"version": "1.10", "tags": "[AG] [EL] ", "description": "This command syntax is for Arma 3 only. For TKOH and older Arma games see addAction TKOH.", "example": "//\u00a0short and sweet player addAction [\"a useless action that does nothing\", {}]; player addAction [\"<t color='#FF0000'>This Useless Action Is RED</t>\", {hint \"RED\"}]; player addAction [\"Hint Hello!\", { hint format [\"Hello %1!\", name player] }]; player addAction [\"String Exec\", \"hint 'this is also compiled'\"];", "docSyntax": "object addAction [title, script, arguments, priority, showWindow, hideOnUse, shortcut, condition, radius, unconscious, selection, memoryPoint]", "syntax": "<object> addAction [title,script,arguments,priority,showWindow,hideOnUse,shortcut,condition,radius,unconscious,selection,memoryPoint]"}, "removeAction": {"version": "1.20", "tags": "[AG] [EL] ", "description": "Removes user added action with given id index. This only removes actions added with the addAction command. You cannot remove default game actions, such as reload. This command has local effect. The action will only be removed on the computer that executes the command.", "example": "player removeAction 0;", "docSyntax": "unit removeAction index", "syntax": "<objUnit> removeAction <scalar>"}, "getMarkerColor": {"version": "1.21", "tags": "", "description": "Returns marker color for given marker.", "example": "\"MarkerOne\" setMarkerColor \"ColorBlack\"; _color = getMarkerColor \"MarkerOne\"; // returns \"ColorBlack\"", "docSyntax": "getMarkerColor markerName", "syntax": "getMarkerColor <string>"}, "getMarkerSize": {"version": "1.21", "tags": "[AG] ", "description": "Returns the size of the given marker. A getter for setMarkerSize and an alias of markerSize.", "example": "\"MarkerOne\" setMarkerSize [100,200]; _size = getMarkerSize \"MarkerOne\"; //returns [100,200]", "docSyntax": "getMarkerSize markerName", "syntax": "getMarkerSize <string>"}, "getMarkerType": {"version": "1.21", "tags": "[AG] ", "description": "Returns the type of a given marker. See cfgMarkers for a list of standard markers.", "example": "\"MarkerOne\" setMarkerType \"Destroy\" _type = getMarkerType \"MarkerOne\"", "docSyntax": "String = getMarkerType markerName", "syntax": "<string> = getMarkerType <string>"}, "getWPPos": {"version": "1.21", "tags": "[AG] ", "description": "Returns the position of a selected waypoint of a given group. Waypoints include only those which were placed in the mission editor.", "example": "[_group1,1] setWPPos [200,600,0];", "docSyntax": "getWPPos [group, index]", "syntax": "getWPPos [<objGroup>,<scalar>]"}, "requiredVersion": {"version": "1.21", "tags": "", "description": "Check if version of application is available. If the current version is older than the required one, a warning message is shown and false is returned.", "example": "if\u00a0!(requiredVersion \"1.09\") exitWith {};", "docSyntax": "requiredVersion version", "syntax": "requiredVersion version"}, "setMarkerColor": {"version": "1.21", "tags": "[EG] ", "description": "Sets marker color. Marker color names and their corresponding RGBA values for Arma 3 could be found here: CfgMarkerColors_Arma_3", "example": "\"MarkerOne\" setMarkerColor \"ColorBlack\";", "docSyntax": "markerName setMarkerColor color", "syntax": "<string> setMarkerColor <scalar>"}, "setMarkerSize": {"version": "1.21", "tags": "[EG] ", "description": "Set marker size. Size is in format [a-axis, b-axis].", "example": "\"MarkerOne\" setMarkerSize [100, 200];", "docSyntax": "markerName setMarkerSize [a-axis, b-axis]", "syntax": "<string> setMarkerSize [a-axis,b-axis]"}, "setWPPos": {"version": "1.21", "tags": "", "description": "Sets waypoint position", "example": "[_groupOne, 1] setWPPos markerPos \"MarkerOne\";", "docSyntax": "waypoint setWPPos pos", "syntax": "waypoint setWPPos <array>"}, "forceMap": {"version": "1.27", "tags": "[EL] ", "description": "Opens non-interactive main map in background that overrides user screen.", "example": "forceMap true", "docSyntax": "forceMap show", "syntax": "forceMap show"}, "mapAnimAdd": {"version": "1.27", "tags": "[AL] [EL] ", "description": "Add next frame to map animation.", "example": "mapAnimAdd [1, 0.1, markerPos \"anim1\"]; mapAnimCommit;", "docSyntax": "mapAnimAdd [time, zoom, position]", "syntax": "mapAnimAdd [<scalar>,<scalar>,position]"}, "mapAnimClear": {"version": "1.27", "tags": "[AL] [EL] ", "description": "Clear map animation.", "example": "mapAnimClear;", "docSyntax": "mapAnimClear", "syntax": "mapAnimClear"}, "mapAnimCommit": {"version": "1.27", "tags": "[AL] [EL] ", "description": "Play map animation.", "docSyntax": "mapAnimCommit", "syntax": "mapAnimCommit"}, "mapAnimDone": {"version": "1.27", "tags": "[AL] [EL] ", "description": "Check if map animation is finished.", "docSyntax": "Boolean = mapAnimDone", "syntax": "<bool> = mapAnimDone"}, "selectWeapon": {"version": "1.27", "tags": "[AL] [EG] ", "description": "Selects the given weapon.", "example": "_soldier1 selectWeapon \"LAWLauncher\";", "docSyntax": "unitName selectWeapon muzzleName", "syntax": "<objUnit> selectWeapon muzzleName"}, "scudState": {"version": "1.30", "tags": "", "description": "Current state of given Scud launcher. Following states are recognized:", "example": "if ((scudState _scud) == 3) exitWith { player sideChat \"SCUD Launch status: Missile Ignition\"; };", "docSyntax": "Number = scudState scudName", "syntax": "<scalar> = scudState scudName"}, "createUnit": {"version": "1.34", "tags": "[EG] ", "description": "Create a unit of class that is defined in CfgVehicles.", "example": "_unit = group player createUnit [\"B_RangeMaster_F\", position player, [], 0, \"FORM\"];", "docSyntax": "group createUnit [type, position, markers, placement, special]", "syntax": "<objGroup> createUnit [type,position,markers,placement,special]", "returns": "objUnit"}, "createVehicle": {"version": "1.34", "tags": "[EG] ", "description": "Creates an empty object of given classname type. See Arma 3 Assets / createVehicle/vehicles, or Category:CfgVehicles for earlier games.", "example": "_jeep = \"Jeep\" createVehicle position player;", "docSyntax": "type createVehicle position", "syntax": "type createVehicle position", "returns": "objVehicle"}, "deleteVehicle": {"version": "1.34", "tags": "[AG] [EG] ", "description": "Deletes an object. Only objects inserted in the mission editor and objects created during the game's progress can be deleted by this command. Island objects and player cannot be removed.", "example": "deleteVehicle _house1;", "docSyntax": "deleteVehicle object", "syntax": "deleteVehicle <object>"}, "estimatedTimeLeft": {"version": "1.34", "tags": "[SE] [EG] ", "description": "Sets the estimated time left in the game that is shown in the \"Game in progress\" screen or in the master browser.", "example": "estimatedTimeLeft 600; //\u00a010 min", "docSyntax": "estimatedTimeLeft seconds", "syntax": "estimatedTimeLeft seconds"}, "join": {"version": "1.34", "tags": "[AG] [EG] ", "description": "Join all units in the array to given group. Maximum number of group members is:", "example": "[_unitOne, _unitTwo] join player;", "docSyntax": "unitArray join group", "syntax": "unitArray join <objGroup>"}, "publicVariable": {"version": "1.34", "tags": "[AL] [EG] ", "description": "Reliably broadcasts missionNamespace variable and its current value to all computers (server/client).", "example": "TAG_MyPublicVariable = 0; TAG_MyPublicVariable = 1; publicVariable \"TAG_MyPublicVariable\"; //\u00a0other clients will receive the \"TAG_MyPublicVariable\" variable with a 1 value TAG_MyPublicVariable = 2; //\u00a0needs to be broadcast again - synchronisation is not automatic", "docSyntax": "publicVariable varName", "syntax": "publicVariable varName"}, "sideChat": {"version": "1.34", "tags": "[AG] [EL] ", "description": "Types text to the side radio channel. Must have assigned \"ItemRadio\" to see or transmit the messages. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "_soldierOne sideChat \"Show this text\";", "docSyntax": "unitName sideChat chatText", "syntax": "<objUnit> sideChat chatText"}, "vehicleChat": {"version": "1.34", "tags": "[AG] [EL] ", "description": "Types text to the vehicle radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "vehicle player vehicleChat \"Show this text\";", "docSyntax": "vehicleName vehicleChat chatText", "syntax": "vehicleName vehicleChat chatText"}, "markerColor": {"version": "1.46", "tags": "", "description": "Returns marker color for given marker. See also setMarkerColor.", "example": "if (markerColor \"Marker1\" == \"ColorRed\") then { hint \"Marker1 is red!\" };", "docSyntax": "markerColor markerName", "syntax": "markerColor <string>"}, "markerPos": {"version": "1.46", "tags": "", "description": "Returns marker position. See also setMarkerPos.", "example": "_mPos1 = markerPos \"markerOne\";", "docSyntax": "markerPos markerName", "syntax": "markerPos <string>"}, "find": {"version": "1.99", "tags": "", "description": "Searches for an array element within array or a ANSI string within a ANSI string. Returns the 0 based index on success or -1 if not found.", "example": "[\"Apples\", \"Oranges\", \"Pears\"] find \"Oranges\"; //\u00a0returns 1", "docSyntax": "array find element", "syntax": "<array> find element"}, "getPosASL": {"version": "1.99", "tags": "[AG] ", "description": "Returns the object position height above sea level.", "example": "_AslPos = getPosASL player;", "docSyntax": "Array = getPosASL object", "syntax": "<array> = getPosASL <object>"}, "getWorld": {"version": "1.99", "tags": "", "description": "Returns the name of the current map. Name is actually class as defined in config (eg Intro).", "example": "; if testing on Everon, getWorld will return \"eden\" hint getWorld", "docSyntax": "getWorld", "syntax": "getWorld"}, "isServer": {"version": "1.99", "tags": "", "description": "Returns true if the machine (executing the command) is the server in a multiplayer game or is running single player. It will return true for both dedicated and player-hosted server.", "example": "if (!isServer) exitWith {};", "docSyntax": "isServer", "syntax": "isServer"}, "setPosASL": {"version": "1.99", "tags": "[AG] [EG] ", "description": "Sets the object position above sea level. Given position must be in PositionASL format.", "example": "player setPosASL [getPosASL player select 0, (getPosASL player select 1) + 10, getPosASL player select 2];", "docSyntax": "object setPosASL pos", "syntax": "<object> setPosASL <array>"}, "buttonAction": {"version": "0.00", "tags": "[AL] ", "description": "Return the action assigned to a control of the currently active user dialog.", "example": "buttonSetAction [100, {player execVM \"reply.sqf\"}] _action = buttonAction 100", "docSyntax": "buttonAction idc", "syntax": "buttonSetAction [<scalar>, <code|function>]", "returns": "string"}, "buttonSetAction": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Set the action of a control of the currently active user dialog. The script statement is executed on button release and _this is available, but contains \"\"; See Arma: GUI Configuration for more information about user dialogs. Works with:", "example": "buttonSetAction [100, \"player exec \"\"reply.sqs\"\"\"];", "docSyntax": "buttonSetAction [idc, action]", "syntax": "buttonSetAction [<scalar>,action]"}, "closeDialog": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Close the currently active user dialog with exit code. Most common exit codes are: #define IDC_OK 1 //emulate \"Ok\" button #define IDC_CANCEL 2 //emulate \"Cancel\" button", "example": "closeDialog 2;", "docSyntax": "closeDialog exitcode", "syntax": "closeDialog exitcode"}, "createDialog": {"version": "0.00", "tags": "[EL] ", "description": "Create a dialog which is defined either in the mission's description.ext, in the campaign's description.ext or in the global resource.cpp. The given name has to be the class name used in one of these files. If another dialog is already opened, the desired dialog is created as a child dialog of the one already opened.", "example": "_ok = createDialog \"RscDisplayGame\"; if (!_ok) then {hint \"Dialog couldn't be opened!\"};", "docSyntax": "createDialog dialogName", "syntax": "createDialog dialogName"}, "ctrlEnable": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Enable or disable a control of the currently active user dialog. Disabled controls cannot be clicked onto. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "ctrlEnable [100, false]", "docSyntax": "ctrlEnable [idc, enable]", "syntax": "ctrlEnable [<scalar>,<bool>]"}, "ctrlEnabled": {"version": "0.00", "tags": "[AL] ", "description": "Returns if a control on the currently active user dialog is enabled. Disabled controls cannot be focused. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "if (!(ctrlEnabled 100)) then { ctrlEnable [100, true] };", "docSyntax": "Boolean = ctrlEnabled idc", "syntax": "<bool> = ctrlEnabled <scalar>"}, "ctrlSetText": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Set the text of a control of the currently active user dialog or display. This command can be used for: static texts, buttons, edit lines and active texts as well as for images, where you can use it to set the image path. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "ctrlSetText [100, \"Hello world\"]; //\u00a0for Dialogs", "docSyntax": "ctrlSetText [idc, text]", "syntax": "ctrlSetText [<scalar>,<string>]"}, "ctrlShow": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Set if a control of the currently active user dialog is shown or not. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "ctrlShow [100, false];", "docSyntax": "ctrlShow [idc, show]", "syntax": "ctrlShow [<scalar>,show]"}, "ctrlText": {"version": "0.00", "tags": "", "description": "Returns the text of a control of the currently active user dialog. This command can be used on static texts, buttons, edit lines and active texts as well as for images, where it returns the image path. Does not work on HTML control and returns empty string \"\".", "example": "_text = ctrlText 100", "docSyntax": "ctrlText idc", "syntax": "ctrlText <scalar>"}, "ctrlVisible": {"version": "0.00", "tags": "[AL] ", "description": "Returns if a control of the currently active user dialog is shown or not. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "_bool = ctrlVisible 100;", "docSyntax": "Boolean = ctrlVisible idc", "syntax": "<bool> = ctrlVisible <scalar>"}, "damage": {"version": "0.00", "tags": "[AG] ", "description": "Return the damage value of an object.", "example": "? ((damage player) > 0.1)\u00a0: player groupChat \"I'm hurt! Medic!\"", "docSyntax": "damage object", "syntax": "<scalar> <object>"}, "lbAdd": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Adds an item with the given text to the listbox or combobox with id idc of the topmost user dialog.", "example": "_index = lbAdd [101, \"First item\"];", "docSyntax": "lbAdd [idc, text]", "syntax": "lbAdd [<scalar>,<string>]"}, "lbClear": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Clear all items in listbox or combobox with id idc of topmost user dialog.", "example": "lbClear 101;", "docSyntax": "lbClear idc", "syntax": "lbClear <scalar>"}, "lbColor": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Returns the text color of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_colour = lbColor [101, 0];", "docSyntax": "lbColor [idc, index]", "syntax": "lbColor [<scalar>,<scalar>]"}, "lbColorRight": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Returns the text color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_colour = lbColorRight [101, 0];", "docSyntax": "lbColorRight [idc, index]", "syntax": "lbColorRight [<scalar>,<scalar>]"}, "lbCurSel": {"version": "0.00", "tags": "", "description": "Returns the index of the selected item of the listbox, combobox or toolbox with id idc of the topmost user dialog. For listbox LB_MULTI (multi-selection) use lbSelection.", "example": "_index = lbCurSel 101;", "docSyntax": "lbCurSel idc", "syntax": "lbCurSel <scalar>"}, "lbData": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Returns the additional text (invisible) in an item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_data = lbData [101, 0];", "docSyntax": "String = lbData [idc, index]", "syntax": "<string> = lbData [<scalar>,<scalar>]"}, "lbDelete": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Removes the item with the given index from the listbox or combobox/toolbox with id idc of the topmost user dialog.", "example": "lbDelete [101, 0];", "docSyntax": "lbDelete [idc, index]", "syntax": "lbDelete [<scalar>,<scalar>]"}, "lbPicture": {"version": "0.00", "tags": "", "description": "Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_picture = lbPicture [101, 0];", "docSyntax": "lbPicture [idc, index]", "syntax": "lbPicture [<scalar>,<scalar>]"}, "lbPictureRight": {"version": "0.00", "tags": "", "description": "Returns the right picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_picture = lbPictureRight [101, 0];", "docSyntax": "lbPictureRight [idc, index]", "syntax": "lbPictureRight [<scalar>,<scalar>]"}, "lbSetColor": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Sets the color of the item (left) with the given index of the listbox or combobox with id idc of the topmost user dialog to color.", "example": "lbSetColor [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetColor [idc, index, color]", "syntax": "lbSetColor [<scalar>,<scalar>,<scalar>]"}, "lbSetColorRight": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Sets the color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog to color.", "example": "lbSetColorRight [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetColorRight [idc, index, color]", "syntax": "lbSetColorRight [<scalar>,<scalar>,<scalar>]"}, "lbSetCurSel": {"version": "0.00", "tags": "", "description": "Selects the item with the given index in the listbox, listnbox, combobox, xcombobox, xlistbox", "example": "lbSetCurSel [101, 0];", "docSyntax": "lbSetCurSel [idc, index]", "syntax": "lbSetCurSel [<scalar>,<scalar>]"}, "lbSetData": {"version": "0.00", "tags": "", "description": "Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given data.", "example": "lbSetData [101, 1, \"#1\"];", "docSyntax": "lbSetData [idc, index, data]", "syntax": "lbSetData [<scalar>,<scalar>,data]"}, "lbSetPicture": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Sets a picture for an listbox item displayed to its left.", "example": "lbSetPicture [101, 0, \"iskoda\"];", "docSyntax": "lbSetPicture [idc, index, name] or uiControl lbSetPicture [index, name]", "syntax": "lbSetPicture [<scalar>, <scalar>, <string>]", "returns": "void", "syntax2": "<uiControl> lbSetPicture [<scalar>,<string>]"}, "lbSetPictureRight": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Sets the second (right aligned) picture in the item with the given index of the listbox or combobox with id idc of the topmost user dialog. Name is the picture name. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).", "example": "lbSetPictureRight [101, 0, \"iskoda\"];", "docSyntax": "lbSetPictureRight [idc, index, name]", "syntax": "lbSetPictureRight [<scalar>,<scalar>,<string>]"}, "lbSetText": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Sets the text on the left side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "lbSetText [101, 0, \"iskoda\"];", "docSyntax": "lbSetText [idc, index, name]", "syntax": "lbSetText [<scalar>,<scalar>,<string>]"}, "lbSetTextRight": {"version": "0.00", "tags": "", "description": "Sets the text on the right side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_control lbSetTextRight [0, \"iskoda\"];", "docSyntax": "control lbSetTextRight [index, name]", "syntax": "<uiControl> lbSetTextRight [<scalar>,<string>]"}, "lbSetValue": {"version": "0.00", "tags": "", "description": "Sets the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given value.", "example": "lbSetValue [101, 0, 1];", "docSyntax": "lbSetValue [idc, index, value]", "syntax": "lbSetValue [<scalar>,<scalar>,<scalar>]"}, "lbSize": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Return number of items of listbox or combobox with id idc of topmost user dialog.", "example": "_size = lbSize 101;", "docSyntax": "lbSize idc", "syntax": "lbSize <scalar>"}, "lbText": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Returns the shown text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_text = lbText [101, 0];", "docSyntax": "lbText [idc, index]", "syntax": "lbText [<scalar>,<scalar>]"}, "lbTextRight": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Returns the shown right text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_text = lbTextRight [101, 0];", "docSyntax": "lbTextRight [idc, index]", "syntax": "lbTextRight [<scalar>,<scalar>]"}, "lbValue": {"version": "0.00", "tags": "[AL] [EL] ", "description": "Returns the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_value = lbValue [101, 0];", "docSyntax": "lbValue [idc, index]", "syntax": "lbValue [<scalar>,<scalar>]"}, "markerSize": {"version": "0.00", "tags": "[AG] ", "description": "Returns marker size. This command is identical to getMarkerSize.", "example": "_mSize = markerSize \"Marker1\";", "docSyntax": "markerSize markerName", "syntax": "markerSize <string>"}, "markerType": {"version": "0.00", "tags": "[AG] ", "description": "Get type of marker. Note: This function is identical to getMarkerType. See cfgMarkers for a list of standard markers.", "example": "if (markerType \"Marker1\" == \"Empty\") then {hint \"Marker1 is not an icon!\"}", "docSyntax": "String = markerType markerName", "syntax": "<string> = markerType <string>"}, "position": {"version": "0.00", "tags": "", "description": "Returns position of an object (alias of getPos) or location (alias of locationPosition).", "example": "private _pos = position player;", "docSyntax": "position object", "syntax": "position <object>"}, "setDamage": {"version": "0.00", "tags": "[AG] [EG] ", "description": "Sets an object's damage value in the range 0..1, 0 meaning fully functional and 1 completely destroyed / dead.", "example": "_soldier1 setDamage 1;", "docSyntax": "object setDamage damage", "syntax": "<object> setDamage <scalar>"}, "waypointPosition": {"version": "0.00", "tags": "", "description": "Returns Position of the given waypoint.", "example": "_wPos = waypointPosition [_groupOne, 1];", "docSyntax": "waypointPosition waypoint", "syntax": "waypointPosition waypoint"}}