{"actionKeys": {"version": "1.00", "tags": "", "description": "Returns Array containing dikCodes of keys, buttons and combos assigned to the given user action. Action names could be found in config class ControllerSchemes or user action names or user profile, for example:", "example": "_array = actionKeys \"ReloadMagazine\"", "docSyntax": "actionKeys userAction", "syntax": "actionKeys userAction"}, "actionKeysImages": {"version": "1.00", "tags": "", "description": "Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes or user action names.", "example": "_text = actionKeysImages \"ReloadMagazine\"", "docSyntax": "Structured Text = actionKeysImages userAction", "syntax": "Structured <string> = actionKeysImages userAction"}, "actionKeysNames": {"version": "1.00", "tags": "", "description": "Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or user action names.", "example": "_list = actionKeysNames \"ReloadMagazine\"; //\"R\"", "docSyntax": "actionKeysNames userAction", "syntax": "actionKeysNames userAction"}, "activateAddons": {"version": "1.00", "tags": "", "description": "Activates the listed addons. The list of active addons is initialized during this function.", "example": "activateAddons [\"BISOFP\"];", "docSyntax": "activateAddons [addon1, ...]", "syntax": "activateAddons [addon1,...]"}, "activateKey": {"version": "1.00", "tags": "", "description": "Activates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the description.ext file of the missions.", "example": "activateKey \"Mission04Key\";", "docSyntax": "activateKey keyname", "syntax": "activateKey keyname"}, "addSwitchableUnit": {"version": "1.00", "tags": "", "description": "Adds a unit into the list of units available for Team Switch. Units marked as playable in editor are automatically switchable. This command allows to add non-playable unit into array of switchableUnits and make them available for teamSwitch. SP only.", "example": "addSwitchableUnit bob", "docSyntax": "addSwitchableUnit unitName", "syntax": "addSwitchableUnit <objUnit>"}, "addWaypoint": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Adds (or inserts when index is given) a new waypoint to a group. The waypoint is placed randomly within a circle with the given center and radius. The function returns a waypoint with format [group, index].", "example": "_wp =_grp addWaypoint [position player, 0];", "docSyntax": "groupName addWaypoint [center, radius, index, name]", "syntax": "groupName addWaypoint [center,radius,<scalar>,<string>]"}, "animationState": {"version": "1.00", "tags": "[AG] ", "description": "Returns the name of a unit's current primary animation. Seems to be forced to lower case in Arma 3.", "example": "_state = animationState player;", "docSyntax": "animationState unitName", "syntax": "animationState <objUnit>"}, "assert": {"version": "1.00", "tags": "", "description": "Tests a condition and if the condition is false, displays error on screen (if -showscripterrors enabled) and logs error into .rpt file. It does not interrupt the script execution. If script was pre-processed with preprocessFileLineNumbers, it will also show/log the error line number and the file name.", "example": "assert (1>2);", "docSyntax": "assert condition", "syntax": "assert condition"}, "assignedTarget": {"version": "1.00", "tags": "[AL] ", "description": "Returns the target assigned to an unit or the vehicle's effectiveCommander. The target can be assigned by the group/vehicle/formation leader (as player via quick command menu or \"target\" complex command menu).", "example": "_target = assignedTarget _T72", "docSyntax": "assignedTarget vehicleName", "syntax": "assignedTarget vehicleName"}, "assignTeam": {"version": "1.00", "tags": "[AG] [EL] [EG] ", "description": "Assigns the unit (in case of a vehicle, its commander) to the given team. Team is an option in group control (unit management) menu that allows to split player group in teams and then give bulk order to separate teams. In order to operate properly, the command requires specific conditions:", "example": "_soldier2 assignTeam \"RED\";", "docSyntax": "unit assignTeam team", "syntax": "<objUnit> assignTeam team"}, "attackEnabled": {"version": "1.00", "tags": "[AG] ", "description": "Return whether a group's leader can issue attack commands to soldiers under his command.", "example": "if (not attackEnabled _soldier) then {_soldier setCombatMode \"Careless\"}", "docSyntax": "Boolean = attackEnabled name", "syntax": "<bool> = attackEnabled <string>"}, "boundingBox": {"version": "1.00", "tags": "", "description": "Returns a bounding box of given object in model coordinate space, adjusted according to destruction/animation of an object. This command is rather generous on the size estimation, for more precise coordinates use boundingBoxReal.", "example": "private _box = boundingBox _abrams;", "docSyntax": "boundingBox object", "syntax": "boundingBox <object>"}, "breakOut": {"version": "1.00", "tags": "", "description": "Breaks the code execution out of scope {} named name. nil is returned. Scope name can be assigned using scopeName command.", "example": "scopeName \"main\"; while {true} do { scopeName \"loop1\"; while {true} do { scopeName \"loop2\"; if (condition1) then {breakTo \"main\"}; //\u00a0Breaks all scopes and return to \"main\" if (condition2) then {breakOut \"loop2\"}; //\u00a0Breaks scope named \"loop2\" sleep 1; }; sleep 1; };", "docSyntax": "breakOut name", "syntax": "breakOut <string>"}, "breakTo": {"version": "1.00", "tags": "", "description": "Breaks block to scope named name. Nil is returned. Scope name can be assigned using scopeName command.", "example": "scopeName \"main\"; while {true} do { scopeName \"loop1\"; while {true} do { scopeName \"loop2\"; if (condition1) then {breakTo \"main\"}; // Breaks all scopes and return to \"main\" if (condition2) then {breakOut \"loop2\"}; // Breaks scope named \"loop2\" sleep 1; }; sleep 1; };", "docSyntax": "breakTo name", "syntax": "breakTo <string>"}, "camCommitPrepared": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. This command is for use with camPrepareXXX commands. For the normal cam command use camCommit.", "example": "//create a camera object _cam = \"camera\" camCreate [5600,4800,10]; _cam camPrepareTarget player; _cam cameraEffect [\"internal\", \"BACK\"]; _cam camCommitPrepared 0; //smoothly move the camera to its new position in 6 seconds. _cam camPreparePos [5680,4720,20]; _cam camCommitPrepared 6; waitUntil {camCommitted _cam}; //proceed", "docSyntax": "camera camCommitPrepared time", "syntax": "<objCamera> camCommitPrepared <scalar>"}, "cameraInterest": {"version": "1.00", "tags": "", "description": "Return camera interest for given entity, as set by setCameraInterest, or as autodetected.", "example": "camInterest = cameraInterest myUnit;", "docSyntax": "Number = cameraInterest entity", "syntax": "<scalar> = cameraInterest entity"}, "cameraOn": {"version": "1.00", "tags": "", "description": "Returns the vehicle to which the camera is attached.", "example": "_object = cameraOn;", "docSyntax": "cameraOn", "syntax": "cameraOn"}, "campaignConfigFile": {"version": "1.00", "tags": "", "description": "Return root of campaign description.ext entries hierarchy.", "example": "_config = campaignConfigFile;", "docSyntax": "Config = campaignConfigFile", "syntax": "Config = campaignConfigFile"}, "camPreload": {"version": "1.00", "tags": "", "description": "Preloads the scene for the prepared camera with given timeout after which preloading is aborted. Max timeout is 30 seconds. Timeout of 0 means max timeout of 30 seconds as well.", "example": "_camera camPreload 5", "docSyntax": "camera camPreload timeout", "syntax": "<objCamera> camPreload timeout"}, "camPreloaded": {"version": "1.00", "tags": "", "description": "Checks whether the camera has finished preloading.", "example": "?(camPreloaded _camera)\u00a0: exit", "docSyntax": "Boolean = camPreloaded camera", "syntax": "<bool> = camPreloaded <objCamera>"}, "camPrepareBank": {"version": "1.00", "tags": "", "description": "Prepares the camera bank angle.", "example": "_camera camPrepareBank -0.1", "docSyntax": "camera camPrepareBank bank", "syntax": "<objCamera> camPrepareBank bank"}, "camPrepareDir": {"version": "1.00", "tags": "", "description": "Prepares the camera heading.", "example": "_camera camPrepareDir 150", "docSyntax": "camera camPrepareDir direction", "syntax": "<objCamera> camPrepareDir direction"}, "camPrepareDive": {"version": "1.00", "tags": "", "description": "Prepares the camera dive angle.", "example": "_camera camPrepareDive -0.1", "docSyntax": "camera camPrepareDive dive", "syntax": "<objCamera> camPrepareDive dive"}, "camPrepareFocus": {"version": "1.00", "tags": "", "description": "focusRange is in format [distance,blur]. Prepares the camera focus blur. [-1,1] will reset default values (auto focusing), [-1,-1] will disable postprocessing (all is focused). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareFocus [50, 1]", "docSyntax": "camera camPrepareFocus focusRange", "syntax": "<objCamera> camPrepareFocus focusRange"}, "camPrepareFov": {"version": "1.00", "tags": "", "description": "Prepares the camera field of view (zoom). The default zoom level is 0.75, 0.01 is the nearest and 2 the furthest zoom value. The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareFov 0.1", "docSyntax": "camera camPrepareFov fieldOfView", "syntax": "<objCamera> camPrepareFov fieldOfView"}, "camPrepareFovRange": {"version": "1.00", "tags": "", "description": "Prepares the camera field of view range for auto zooming.", "example": "_camera camPrepareFovRange [0.1, 0.5]", "docSyntax": "camera camPrepareFovRange fovRange", "syntax": "<objCamera> camPrepareFovRange fovRange"}, "camPreparePos": {"version": "1.00", "tags": "", "description": "Prepares the camera position (format Position). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPreparePos getPos player", "docSyntax": "camera camPreparePos position", "syntax": "<objCamera> camPreparePos position"}, "camPrepareRelPos": {"version": "1.00", "tags": "", "description": "Prepares the camera position relative to the current position of the currect target (see camPrepareTarget). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareRelPos [10,5,-2]", "docSyntax": "camera camPrepareRelPos position", "syntax": "<objCamera> camPrepareRelPos position"}, "camPrepareTarget": {"version": "1.00", "tags": "", "description": "Prepares the camera target to a position or to a target. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareTarget getPos player;", "docSyntax": "camera camPrepareTarget position", "syntax": "<objCamera> camPrepareTarget position"}, "camSetFocus": {"version": "1.00", "tags": "", "description": "Sets camera focus range in format [distance, blur]. blur param - sets the camera focus blur. It does not automatically commit changes (see camCommit). Use [-1, -1] to disable focus completely.", "example": "_camera camSetFocus [50, 1];", "docSyntax": "camera camSetFocus focusRange", "syntax": "<objCamera> camSetFocus focusRange"}, "camUseNVG": {"version": "1.00", "tags": "", "description": "Set / clear using of night vision during cutscenes. This command only works with camCreate created camera that is currently the main camera for the player (see example).", "example": "camUseNVG true;", "docSyntax": "camUseNVG set", "syntax": "camUseNVG set"}, "case": {"version": "1.00", "tags": "", "description": "This command is used inside a switch do construct.", "example": "switch (_condition) do { case 1: { hint \"1\" }; case 2: { hint \"2\" }; default { hint \"default\" }; };", "docSyntax": "case b", "syntax": "case b"}, "catch": {"version": "1.00", "tags": "", "description": "Processes code when an exception is thrown in a try block. The exception caught can be found in the _exception variable.", "example": "try {throw \"invalid argument\"} catch {hint str _exception};", "docSyntax": "tryBlock catch code", "syntax": "tryBlock catch <code>", "type": "exceptionHandling"}, "ceil": {"version": "1.00", "tags": "", "description": "The ceil value of x.", "example": "ceil 5.25", "docSyntax": "Number = ceil x", "syntax": "<scalar> = ceil x"}, "clearRadio": {"version": "1.00", "tags": "[EL] ", "description": "Clean up the content of radio protocol history.", "example": "clearRadio;", "docSyntax": "clearRadio", "syntax": "clearRadio"}, "closeDisplay": {"version": "1.00", "tags": "", "description": "Closes given display with exit code. It does not instantly close the display but does it on next simulation cycle. Most common exit codes are:", "example": "_display closeDisplay 1;", "docSyntax": "display closeDisplay exitCode", "syntax": "<uiDisplay> closeDisplay exitCode"}, "commandFSM": {"version": "1.00", "tags": "", "description": "Orders a unit to process command defined by FSM file (via the radio).", "example": "_soldierOne commandFSM [\"move.fsm\", position player, player]", "docSyntax": "unitName commandFSM [fsm name, position, target]", "syntax": "<objUnit> commandFSM [fsm <string>,position,<object>]"}, "commandGetOut": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Orders one or multiple units to get out from the vehicle (via the radio). Same as doGetOut with latter being silent.", "example": "commandGetOut _unitOne", "docSyntax": "commandGetOut units(s)", "syntax": "commandGetOut units(s)"}, "compile": {"version": "1.00", "tags": "", "description": "Compiles String expression into Code.", "example": "_string = \"a = a + 1\"; _code = compile _string; call _code;", "docSyntax": "compile expression", "syntax": "compile expression", "type": "compilationStatement"}, "composeText": {"version": "1.00", "tags": "", "description": "Creates a Structured Text by joining the given structured or plain text arguments.", "example": "hint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "composeText [argument1, argument2, ...]", "syntax": "composeText [argument1,argument2,...]"}, "configFile": {"version": "1.00", "tags": "", "description": "Return root of config entries hierarchy.", "example": "_isMyClassActive = isClass (configFile / \"CfgPatches\" / \"MyClass\");", "docSyntax": "Config = configFile", "syntax": "Config = configFile"}, "configName": {"version": "1.00", "tags": "", "description": "Returns name of config entry.", "example": "_name = configName (configFile >> \"CfgVehicles\"); Result is \"CfgVehicles\"", "docSyntax": "String = configName config", "syntax": "<string> = configName config"}, "controlNull": {"version": "1.00", "tags": "", "description": "A non-existing Control. To compare non-existent objects use isNull or isEqualTo (see examples).", "example": "if (_myCtrl isEqualTo controllNull) then { hint \"_myCtrl is null!\"; };", "docSyntax": "controlNull", "syntax": "controlNull", "returns": "bool"}, "createCenter": {"version": "1.00", "tags": "[EG] ", "description": "Instanciate a Side center. A Side center is required to be able to create groups of this side.", "example": "createCenter east;", "docSyntax": "createCenter side", "syntax": "createCenter <objSide>"}, "createDisplay": {"version": "1.00", "tags": "", "description": "Creates child display of given display and loads from \"resourceName\". The notable difference between createDisplay and createDialog is that with createDisplay the player would be able to move around while the display is shown.", "example": "findDisplay 46 createDisplay \"RscCredits\";", "docSyntax": "parent createDisplay resourceName", "syntax": "parent createDisplay resourceName"}, "createGroup": {"version": "1.00", "tags": "[EG] ", "description": "Creates a new Group for the given Side.", "example": "private _group = createGroup east;", "docSyntax": "createGroup side", "syntax": "createGroup <objSide>", "returns": "objGroup"}, "createGuardedPoint": {"version": "1.00", "tags": "", "description": "Adds a point guarded by the given side (scripted way of adding equivalent of \"GUARDED BY\" trigger in Editor). A closest AI group in the given side with assigned \"GUARD\" waypoint will attempt to secure this guard point. The actual guarded position is determined via the following rules:", "example": "createGuardedPoint [east, [0,0], -1, vehicle player];", "docSyntax": "createGuardedPoint [side, position, objectMapID, vehicle]", "syntax": "createGuardedPoint [<objSide>,position,objectMapID,<objVehicle>]"}, "createMarker": {"version": "1.00", "tags": "[EG] ", "description": "Creates a new map marker at the given position. The marker will be created for every player on network as well as JIP. The marker name has to be unique, if a marker with the given name exists, the command will be ignored. Use deleteMarker to delete global marker.", "example": "_marker1 = createMarker [\"Marker1\", position player];", "docSyntax": "createMarker [name, position, channel, creator]", "syntax": "createMarker [<string>,position,channel,creator]", "returns": "objMarker"}, "createMine": {"version": "1.00", "tags": "", "description": "Creates a mine of the given type (type is the name of the subclass of CfgVehicles). If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The mine is placed inside a circle with this position as its center and placement as its radius.", "example": "_mine = createMine [\"APERSMine\", position player, [], 0];", "docSyntax": "createMine [type, position, markers, placement]", "syntax": "createMine [type,position,markers,placement]"}, "createSoundSource": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Creates a sound source of the given type (type is the name of the subclass of CfgVehicles which is pointing to the sound defined in CfgSFX). The actual sound object created is of type \"#dynamicsound\" and could be detected with allMissionObjects. If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The sound source is placed inside a circle with this position as its center and placement as its radius. Some of the vanilla classes pre-configured in Arma 3:", "example": "_soundSource = createSoundSource [\"LittleDog\", position player, [], 0]", "docSyntax": "createSoundSource [type, position, markers, placement]", "syntax": "createSoundSource [type,position,markers,placement]"}, "createTarget": {"version": "1.00", "tags": "", "description": "Create a target.", "example": "_target = createTarget [\"targetType\", [0,0,0], 1, 1]", "docSyntax": "obj createTarget [type, position, typeAccuracy, posAccuracy]", "syntax": "<object> createTarget [type,position,typeAccuracy,posAccuracy]"}, "createTrigger": {"version": "1.00", "tags": "[EL] [EG] ", "description": "Creates a sensor (trigger) of the given type and at the given position. The type must be a class name in CfgNonAIVehicles or CfgVehicles with simulation = detector. An array containing all units that have activated the trigger is available via list triggerobj. Created triggers can be deleted using deleteVehicle.", "example": "_trg = createTrigger [\"EmptyDetector\", getPos player]; _trg setTriggerArea [5, 5, 0, false]; _trg setTriggerActivation [\"CIV\", \"PRESENT\", true]; _trg setTriggerStatements [\"this\", \"hint 'Civilian near player'\", \"hint 'no civilian near'\"];", "docSyntax": "createTrigger [type, position, makeGlobal]", "syntax": "createTrigger [type,position,makeGlobal]"}, "createVehicleLocal": {"version": "1.00", "tags": "[EL] ", "description": "Creates an object of the given type. Created object is not transferred through network in MP games. netId of such vehicle in multiplayer will be \"0:0\". To disable local vehicle creation, use CfgDisabledCommands to blacklist this command. Alternatively, you can use createSimpleObject with local option enabled where applicable.", "example": "_lightsource = \"#lightpoint\" createVehicleLocal _pos;", "docSyntax": "type createVehicleLocal position", "syntax": "type createVehicleLocal position", "returns": "objVehicle"}, "ctrlActivate": {"version": "1.00", "tags": "", "description": "Launch actions attached to given (button based) control.", "example": "ctrlActivate _control", "docSyntax": "ctrlActivate controlName", "syntax": "ctrlActivate controlName"}, "ctrlCommit": {"version": "1.00", "tags": "", "description": "Commits control animation to last specified duration.", "example": "_control ctrlCommit 2; // make animation last approx. 2 seconds", "docSyntax": "control ctrlCommit time", "syntax": "<uiControl> ctrlCommit <scalar>"}, "ctrlCommitted": {"version": "1.00", "tags": "", "description": "Check if the control animation is finished.", "example": "_done = ctrlCommitted _control", "docSyntax": "Boolean = ctrlCommitted controlName", "syntax": "<bool> = ctrlCommitted controlName", "returns": "bool"}, "ctrlFade": {"version": "1.00", "tags": "", "description": "Returns the current fade factor of control.", "example": "_scale = ctrlFade _control", "docSyntax": "Number = ctrlFade controlName", "syntax": "<scalar> = ctrlFade controlName"}, "ctrlMapAnimAdd": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Adds the next frame to the map animation.", "example": "_map ctrlMapAnimAdd [1, 0.1, getMarkerPos \"anim1\"]; ctrlMapAnimCommit _map;", "docSyntax": "map ctrlMapAnimAdd [time, zoom, position]", "syntax": "<objMap> ctrlMapAnimAdd [<scalar>,<scalar>,position]"}, "ctrlMapAnimClear": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Clears the map animation.", "example": "ctrlMapAnimClear _ctrlMap;", "docSyntax": "ctrlMapAnimClear controlName", "syntax": "ctrlMapAnimClear controlName"}, "ctrlMapAnimCommit": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Plays the map animation.", "example": "Center map on player: _ctrl ctrlMapAnimAdd [0, 0.05, player]; ctrlMapAnimCommit _ctrl;", "docSyntax": "ctrlMapAnimCommit controlName", "syntax": "ctrlMapAnimCommit controlName"}, "ctrlMapAnimDone": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Checks whether the map animation has finished.", "example": "_isDone = ctrlMapAnimDone _ctrlMap;", "docSyntax": "Boolean = ctrlMapAnimDone controlName", "syntax": "<bool> = ctrlMapAnimDone controlName"}, "ctrlMapScale": {"version": "1.00", "tags": "", "description": "Returns the current scale of given map control.", "example": "_control = (findDisplay 12) displayCtrl 51; //Arma 3 _scale = ctrlMapScale _control; //returns number from 1 to 0.001", "docSyntax": "ctrlMapScale ctrl", "syntax": "ctrlMapScale <uiControl>"}, "ctrlParent": {"version": "1.00", "tags": "", "description": "Returns the parent Display of the given control. For parent Controls group see ctrlParentControlsGroup.", "example": "_display = ctrlParent _control", "docSyntax": "ctrlParent control", "syntax": "ctrlParent <uiControl>"}, "ctrlPosition": {"version": "1.00", "tags": "", "description": "Returns the current position of 2D control as [x, y, w, h] array. For 3D control it returns relative [x,y,z].", "example": "_pos = ctrlPosition _control;", "docSyntax": "ctrlPosition controlName", "syntax": "ctrlPosition controlName"}, "ctrlScale": {"version": "1.00", "tags": "", "description": "Returns the current scale of the control.", "example": "_scale = ctrlScale _control;", "docSyntax": "ctrlScale control", "syntax": "ctrlScale <uiControl>"}, "ctrlSetActiveColor": {"version": "1.00", "tags": "", "description": "Sets text color of given control when control is selected.", "example": "_control ctrlSetActiveColor [1, 0, 0, 1]", "docSyntax": "control ctrlSetActiveColor color", "syntax": "<uiControl> ctrlSetActiveColor <scalar>"}, "ctrlSetBackgroundColor": {"version": "1.00", "tags": "", "description": "Sets background color of given control. Only affects CT_COMBO, CT_STATIC, CT_STRUCTURED_TEXT, CT_MAP and CT_MAP_MAIN.", "example": "_control ctrlSetBackgroundColor [1, 0, 0, 1]", "docSyntax": "control ctrlSetBackgroundColor color", "syntax": "<uiControl> ctrlSetBackgroundColor <scalar>"}, "ctrlSetEventHandler": {"version": "1.00", "tags": "", "description": "Sets given event handler of given control. The provided function should return true/false indicating that the event has handled this event fully or not and whether the engine should execute it is default code or not afterwards. See User Interface Event Handlers for the full list of handler names. If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp.", "example": "_control ctrlSetEventHandler [\"KeyDown\", \"\"]", "docSyntax": "controlName ctrlSetEventHandler [handlerName, function]", "syntax": "controlName ctrlSetEventHandler [handlerName,function]"}, "ctrlSetFade": {"version": "1.00", "tags": "", "description": "Sets wanted transparency for control animation. Requires ctrlCommit to commit changes. To hide or show a control instantly, use ctrlShow.", "example": "_control ctrlSetFade 1; _control ctrlCommit 5;", "docSyntax": "controlName ctrlSetFade fade", "syntax": "controlName ctrlSetFade fade"}, "ctrlSetFocus": {"version": "1.00", "tags": "", "description": "Set the input focus on given control.", "example": "ctrlSetFocus _control;", "docSyntax": "ctrlSetFocus controlName", "syntax": "ctrlSetFocus controlName"}, "ctrlSetFont": {"version": "1.00", "tags": "", "description": "Sets the font for given control (see Fonts)", "example": "_control ctrlSetFont \"TahomaB\"", "docSyntax": "control ctrlSetFont fontName", "syntax": "<uiControl> ctrlSetFont fontName"}, "ctrlSetFontH1": {"version": "1.00", "tags": "", "description": "Sets H1 font of given HTML control.", "example": "_control ctrlSetFontH1 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH1 fontName", "syntax": "controlName ctrlSetFontH1 fontName"}, "ctrlSetFontH1B": {"version": "1.00", "tags": "", "description": "Sets H1 bold font of given HTML control.", "example": "_control ctrlSetFontH1B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH1B fontName", "syntax": "controlName ctrlSetFontH1B fontName"}, "ctrlSetFontH2": {"version": "1.00", "tags": "", "description": "Sets H2 font of given HTML control", "example": "_control ctrlSetFontH2 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH2 fontName", "syntax": "controlName ctrlSetFontH2 fontName"}, "ctrlSetFontH2B": {"version": "1.00", "tags": "", "description": "Sets H2 bold font of given HTML control.", "example": "_control ctrlSetFontH2B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH2B fontName", "syntax": "controlName ctrlSetFontH2B fontName"}, "ctrlSetFontH3": {"version": "1.00", "tags": "", "description": "Sets H3 font of given HTML control.", "example": "_control ctrlSetFontH3 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH3 fontName", "syntax": "controlName ctrlSetFontH3 fontName"}, "ctrlSetFontH3B": {"version": "1.00", "tags": "", "description": "Sets H3 bold font of given HTML control.", "example": "_control ctrlSetFontH3B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH3B fontName", "syntax": "controlName ctrlSetFontH3B fontName"}, "ctrlSetFontH4": {"version": "1.00", "tags": "", "description": "Sets H4 font of given HTML control.", "example": "_control ctrlSetFontH4 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH4 fontName", "syntax": "controlName ctrlSetFontH4 fontName"}, "ctrlSetFontH4B": {"version": "1.00", "tags": "", "description": "Sets H4 bold font of given HTML control.", "example": "_control ctrlSetFontH4B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH4B fontName", "syntax": "controlName ctrlSetFontH4B fontName"}, "ctrlSetFontH5": {"version": "1.00", "tags": "", "description": "Sets H5 font of given HTML control.", "example": "_control ctrlSetFontH5 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH5 fontName", "syntax": "controlName ctrlSetFontH5 fontName"}, "ctrlSetFontH5B": {"version": "1.00", "tags": "", "description": "Sets H5 bold font of given HTML control.", "example": "_control ctrlSetFontH5B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH5B fontName", "syntax": "controlName ctrlSetFontH5B fontName"}, "ctrlSetFontH6": {"version": "1.00", "tags": "", "description": "Sets H6 font of given HTML control.", "example": "_control ctrlSetFontH6 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH6 fontName", "syntax": "controlName ctrlSetFontH6 fontName"}, "ctrlSetFontH6B": {"version": "1.00", "tags": "", "description": "Sets H6 bold font of given HTML control.", "example": "_control ctrlSetFontH6B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH6B fontName", "syntax": "controlName ctrlSetFontH6B fontName"}, "ctrlSetFontHeight": {"version": "1.00", "tags": "", "description": "Sets the sizeEx property for most controls as follows:", "example": "_control ctrlSetFontHeight 0.05;", "docSyntax": "control ctrlSetFontHeight size", "syntax": "<uiControl> ctrlSetFontHeight size"}, "ctrlSetFontHeightH1": {"version": "1.00", "tags": "", "description": "Sets H1 font size of given HTML control.", "example": "_control ctrlSetFontHeightH1 0.05", "docSyntax": "controlName ctrlSetFontHeightH1 height", "syntax": "controlName ctrlSetFontHeightH1 height"}, "ctrlSetFontHeightH2": {"version": "1.00", "tags": "", "description": "Sets H2 font size of given HTML control.", "example": "_control ctrlSetFontHeightH2 0.05", "docSyntax": "controlName ctrlSetFontHeightH2 height", "syntax": "controlName ctrlSetFontHeightH2 height"}, "ctrlSetFontHeightH3": {"version": "1.00", "tags": "", "description": "Sets H3 font size of given HTML control.", "example": "_control ctrlSetFontHeightH3 0.05", "docSyntax": "controlName ctrlSetFontHeightH3 height", "syntax": "controlName ctrlSetFontHeightH3 height"}, "ctrlSetFontHeightH4": {"version": "1.00", "tags": "", "description": "Sets H3 font size of given HTML control.", "example": "_control ctrlSetFontHeightH4 0.05", "docSyntax": "controlName ctrlSetFontHeightH4 height", "syntax": "controlName ctrlSetFontHeightH4 height"}, "ctrlSetFontHeightH5": {"version": "1.00", "tags": "", "description": "Sets H5 font size of given HTML control.", "example": "_control ctrlSetFontHeightH5 0.05", "docSyntax": "controlName ctrlSetFontHeightH5 height", "syntax": "controlName ctrlSetFontHeightH5 height"}, "ctrlSetFontHeightH6": {"version": "1.00", "tags": "", "description": "Sets H6 font size of given HTML control.", "example": "_control ctrlSetFontHeightH6 0.05", "docSyntax": "controlName ctrlSetFontHeightH6 height", "syntax": "controlName ctrlSetFontHeightH6 height"}, "ctrlSetFontP": {"version": "1.00", "tags": "", "description": "Sets P font of given HTML control or its size.", "example": "_control ctrlSetFontP \"TahomaB\";", "docSyntax": "control ctrlSetFontP fontOrSize", "syntax": "<uiControl> ctrlSetFontP fontOrSize"}, "ctrlSetFontPB": {"version": "1.00", "tags": "", "description": "Sets P bold font of given HTML control.", "example": "_control ctrlSetFontPB \"TahomaB\"", "docSyntax": "controlName ctrlSetFontPB fontName", "syntax": "controlName ctrlSetFontPB fontName"}, "ctrlSetForegroundColor": {"version": "1.00", "tags": "", "description": "Sets foreground color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetForegroundColor [1, 0, 0, 1]", "docSyntax": "control ctrlSetForegroundColor color", "syntax": "<uiControl> ctrlSetForegroundColor <scalar>"}, "ctrlSetPosition": {"version": "1.00", "tags": "", "description": "Sets wanted position and size for 2D control animation. Width and height are optional. ctrlCommit is required to complete the operation. For 3D control, param is relative [x,y,z] and no ctrlCommit is required as it cannot be animated.", "example": "Move control: _control2D ctrlSetPosition [0, 0]; _control2D ctrlCommit 0;", "docSyntax": "controlName ctrlSetPosition [x, y]", "syntax": "controlName ctrlSetPosition [x,y]"}, "ctrlSetScale": {"version": "1.00", "tags": "", "description": "Sets wanted scale for control animation. Top left corner remains same. This command requires ctrlCommit.", "example": "_control ctrlSetScale 0.5; _control ctrlCommit 0;", "docSyntax": "control ctrlSetScale scale", "syntax": "<uiControl> ctrlSetScale <scalar>"}, "ctrlSetStructuredText": {"version": "1.00", "tags": "", "description": "Set the Structured Text which will be displayed in structured text control.", "example": "_control ctrlSetStructuredText parseText \"First line<img image=data\\isniper.paa /><br />Second line\"", "docSyntax": "control ctrlSetStructuredText structuredText", "syntax": "<uiControl> ctrlSetStructuredText structuredText"}, "ctrlSetTextColor": {"version": "1.00", "tags": "", "description": "Sets text color of given control. Color is in format Color (RGBA). As of Arma 3 v1.40 this command can also be used to change fill-color of a CT_PROGRESS control.", "example": "_control ctrlSetTextColor [1, 0, 0, 1]", "docSyntax": "control ctrlSetTextColor color", "syntax": "<uiControl> ctrlSetTextColor <scalar>"}, "ctrlSetTooltip": {"version": "1.00", "tags": "", "description": "Sets tooltip text of given control.", "example": "_control ctrlSetTooltip \"tooltip\";", "docSyntax": "control ctrlSetTooltip text", "syntax": "<uiControl> ctrlSetTooltip <string>"}, "ctrlSetTooltipColorBox": {"version": "1.00", "tags": "", "description": "Sets tooltip border color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorBox [1, 0, 0, 1];", "docSyntax": "control ctrlSetTooltipColorBox color", "syntax": "<uiControl> ctrlSetTooltipColorBox <scalar>"}, "ctrlSetTooltipColorShade": {"version": "1.00", "tags": "", "description": "Sets tooltip background color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorShade [1, 0, 0, 1];", "docSyntax": "control ctrlSetTooltipColorShade color", "syntax": "<uiControl> ctrlSetTooltipColorShade <scalar>"}, "ctrlSetTooltipColorText": {"version": "1.00", "tags": "", "description": "Sets tooltip text color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorText [1, 0, 0, 1]", "docSyntax": "display ctrlSetTooltipColorText color", "syntax": "<uiDisplay> ctrlSetTooltipColorText <scalar>"}, "ctrlShown": {"version": "1.00", "tags": "", "description": "Returns whether given control is shown.", "example": "_bool = ctrlShown _ctrl;", "docSyntax": "Boolean = ctrlShown controlName", "syntax": "<bool> = ctrlShown controlName"}, "ctrlType": {"version": "1.00", "tags": "", "description": "Returns number representing the type of control, which is also defined by type property in config. For more information see Arma: GUI Configuration", "example": "_type = ctrlType _rscEdit; // 2", "docSyntax": "ctrlType control", "syntax": "ctrlType <uiControl>"}, "currentCommand": {"version": "1.00", "tags": "", "description": "Return the current command type (empty string when no command) for the commander of given vehicle (or for a given soldier). Returned value can be one of:", "example": "_command = currentCommand player;", "docSyntax": "currentCommand vehicleName", "syntax": "currentCommand vehicleName"}, "date": {"version": "1.00", "tags": "[EL] ", "description": "Return the actual in-mission date and time.", "example": "_now = date; //\u00a0[2014,10,30,2,30] (Oct. 30th, 2:30am)' _hour = _now select 3; _min = _now select 4;", "docSyntax": "date", "syntax": "date"}, "default": {"version": "1.00", "tags": "", "description": "See switch do.", "example": "switch (_condition) do { case 1: { hint \"1\" }; case 2: { hint \"2\" }; default { hint \"default\" }; };", "docSyntax": "default a", "syntax": "default a"}, "deleteCenter": {"version": "1.00", "tags": "[EG] ", "description": "In a nutshell, this command removes gaming Side (see createCenter). If a side has >0 Groups it cannot be deleted. Center can only be created for: east, west, resistance, civilian and sideLogic, therefore only centers from the mentioned sides can be deleted.", "example": "deleteCenter east", "docSyntax": "deleteCenter side", "syntax": "deleteCenter <objSide>"}, "deleteCollection": {"version": "1.00", "tags": "", "description": "Delete a collection. As example, used with a soldier, it'll hide the ingame model. When targetting ArmA 2 1.06 or newer, use hideObject instead. This function is a relic from dynamic building destruction development. It is left only for compatibility with scripts created before ArmA 2 1.06, and its functionality may be changed or removed in the future.", "example": "deleteCollection unitName;", "docSyntax": "deleteCollection object", "syntax": "deleteCollection <object>"}, "deleteGroup": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Destroys the given group.", "example": "deleteGroup _groupname", "docSyntax": "deleteGroup group", "syntax": "deleteGroup <objGroup>"}, "deleteMarker": {"version": "1.00", "tags": "", "description": "Destroys the given marker.", "example": "deleteMarker \"Marker1\"", "docSyntax": "deleteMarker name", "syntax": "deleteMarker <string>"}, "deleteTarget": {"version": "1.00", "tags": "", "description": "Delete a target.", "example": "deleteTarget target1", "docSyntax": "deleteTarget target", "syntax": "deleteTarget <object>"}, "deleteWaypoint": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Removes the specified waypoint.", "example": "deleteWaypoint [_grp, 2];", "docSyntax": "deleteWaypoint [group, index]", "syntax": "deleteWaypoint [<objGroup>,<scalar>]"}, "displayCtrl": {"version": "1.00", "tags": "", "description": "Return child control with specified idc.", "example": "_ChildControl = _ParentDisplay displayCtrl 101;", "docSyntax": "Control = display displayCtrl idc", "syntax": "<uiControl> = <uiDisplay> displayCtrl <scalar>", "returns": "uiControl"}, "displayNull": {"version": "1.00", "tags": "", "description": "A non-existing Display. To compare non-existent displays use isNull or isEqualTo:", "example": "!isNull displayNull; // false", "docSyntax": "displayNull", "syntax": "displayNull", "returns": "bool"}, "displaySetEventHandler": {"version": "1.00", "tags": "", "description": "Sets given event handler of given display. The return code of the provided function should indicate whether this event was handled correctly. This implies telling the engine whether it is default code should be executed. See User Interface Event Handlers for the full list of handler names. If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp.", "example": "_control displaySetEventHandler [\"KeyDown\", \"\"]", "docSyntax": "display displaySetEventHandler [handlerName, function]", "syntax": "<uiDisplay> displaySetEventHandler [handlerName,function]", "type": "eventStatement"}, "dissolveTeam": {"version": "1.00", "tags": "[AL] ", "description": "Dissolves the given team. All members become members of the main team. Possible team values are: \"RED\", \"GREEN\", \"BLUE\" or \"YELLOW\".", "example": "dissolveTeam \"RED\"", "docSyntax": "dissolveTeam teamColor", "syntax": "dissolveTeam teamColor"}, "doFSM": {"version": "1.00", "tags": "", "description": "Orders a unit to process command defined by FSM file (silently). Unlike with execFSM where _this is passed to the FSM, the following parameters are passed when using doFSM/commandFSM:", "example": "_soldierOne doFSM [\"move.fsm\", position player, player];", "docSyntax": "unit doFSM [fsmName, position, target]", "syntax": "<objUnit> doFSM [fsmName,position,<object>]", "type": "executionStatement"}, "doGetOut": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Orders one or multiple units to get out from the vehicle (silently). Same as commandGetOut with latter being shown via radio chat.", "example": "doGetOut _unitOne", "docSyntax": "doGetOut units", "syntax": "doGetOut units"}, "drawArrow": {"version": "1.00", "tags": "", "description": "Draws a single line arrow on the map. To draw a color filled arrow of custom shape see BIS_fnc_drawArrow", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawArrow [ player, player getRelPos [100, 0], [1,0,0,1] ]; }];", "docSyntax": "map drawArrow [from, to, color]", "syntax": "<objMap> drawArrow [from,to,<scalar>]"}, "drawEllipse": {"version": "1.00", "tags": "", "description": "Draws an ellipse on the map. Just like with marker or trigger area, negative a and b will result in hexagon.", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawEllipse [ player, 10, 10, 0, [1, 0, 0, 1], \"\" ]; _this select 0 drawEllipse [ player, -10, -10, 0, [1, 1, 1, 1], \"#(rgb,8,8,3)color(1,0.6,0,1)\" ]; _this select 0 drawEllipse [ player, -10, -10, 90, [0, 0, 1, 1], \"\" ]; }];", "docSyntax": "map drawEllipse [c, a, b, angle, color, fill]", "syntax": "<objMap> drawEllipse [c,a,b,angle,<scalar>,fill]"}, "drawIcon": {"version": "1.00", "tags": "", "description": "Draws an icon on the map. The command needs to be called every frame, preferably with \"Draw\" control event handler ctrlAddEventHandler.", "example": "Red icon with text: findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawIcon [ \"iconStaticMG\", [1,0,0,1], getPos player, 24, 24, getDir player, \"Player Vehicle\", 1, 0.03, \"TahomaB\", \"right\" ] }];", "docSyntax": "map drawIcon [texture, color, position, width, height, angle, text, shadow, textSize, font, align]", "syntax": "<objMap> drawIcon [<string>,<scalar>,position,width,height,angle,<string>,shadow,textSize,font,align]"}, "drawLine": {"version": "1.00", "tags": "", "description": "Draw a line on the map. Can decrease framerate!", "example": "(findDisplay 12 displayCtrl 51) ctrlAddEventHandler [\"Draw\",\" (_this select 0) drawLine [ getPos player, [0,0,0], [0,0,1,1] ]; \"];", "docSyntax": "map drawLine [position1, position2, color]", "syntax": "<objMap> drawLine [position1,position2,<scalar>]"}, "drawRectangle": {"version": "1.00", "tags": "", "description": "Draws a rectangle on the map.", "example": "_ctrl drawRectangle [ getPos player, 20, 20, getDir player, [0,0,1,1], \"\" ];", "docSyntax": "map drawRectangle [c, a, b, angle, color, fill]", "syntax": "<objMap> drawRectangle [c,a,b,angle,<scalar>,fill]"}, "echo": {"version": "1.00", "tags": "", "description": "Sends any text into the debugger console or the logfile. Present in internal version only, not working in the retail version.", "example": "echo \"Text in logfile\"", "docSyntax": "echo text", "syntax": "echo <string>", "type": "diagnoseStatement"}, "effectiveCommander": {"version": "1.00", "tags": "", "description": "Returns the effective commander of the vehicle. Effective commander is the player whom driver AI will listen to. So if in a tank there is a gunner and a commander and AI driver, if the effectiveCommander is gunner, then gunner pressing WASD will give AI orders to move. If gunner jumps out and then enters tank again, the effectiveCommander role most likely has changed to commander that remained in tank. Also the assignment seems to work on first come first served basis.", "example": "_commander = effectiveCommander tank;", "docSyntax": "effectiveCommander vehicle", "syntax": "effectiveCommander <objVehicle>"}, "emptyPositions": {"version": "1.00", "tags": "", "description": "Returns the number of given positions in the vehicle. Positions can be \"Commander\", \"Driver\", \"Gunner\" or \"Cargo\"", "example": "_freeCargoPositions = vehicle player emptyPositions \"cargo\";", "docSyntax": "vehicle emptyPositions position", "syntax": "<objVehicle> emptyPositions <string>", "returns": "scalar"}, "enableAI": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Enables parts of the AI behavior that was disabled by disableAI.", "example": "_soldierOne enableAI \"Move\";", "docSyntax": "unit enableAI skilltype", "syntax": "<objUnit> enableAI skilltype"}, "enableAttack": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Set if leader can issue attack commands to the soldiers in his group.", "example": "_group1 enableAttack true;", "docSyntax": "group enableAttack enable", "syntax": "<objGroup> enableAttack <bool>"}, "enableEnvironment": {"version": "1.00", "tags": "[EL] ", "description": "Enable/disable environmental effects: ambient life and/or ambient sound.", "example": "enableEnvironment false; //\u00a0identical to enableEnvironment [false, false]", "docSyntax": "enableEnvironment enabled", "syntax": "enableEnvironment <bool>"}, "enableReload": {"version": "1.00", "tags": "", "description": "Enable / disable reload when magazine is empty.", "example": "_vehicle enableReload false;", "docSyntax": "object enableReload enable", "syntax": "<object> enableReload <bool>"}, "enableTeamSwitch": {"version": "1.00", "tags": "", "description": "Enable / disable Team Switch. The default setting is enabled.", "example": "enableTeamSwitch true;", "docSyntax": "enableTeamSwitch enable", "syntax": "enableTeamSwitch <bool>"}, "execVM": {"version": "1.00", "tags": "", "description": "Compiles and adds SQF Script to the scheduler queue and returns script handle. The script is first searched for in the mission folder, then in the campaign scripts folder and finally in the global scripts folder. The script does not execute immediately upon running execVM command, but with some delay. How much delay is unknown as it largely depends on how many other scripts there are in the queue and how busy is VM. The optional argument is passed to the script in private variable _this. In Arma 3 the script handle is also passed to the script in _thisScript variable.", "example": "_handle = execVM \"test.sqf\";", "docSyntax": "arguments execVM filename", "syntax": "arguments execVM filename", "type": "executionStatement"}, "exitWith": {"version": "1.00", "tags": "", "description": "Exits current scope {...} it is executed from if condition evaluates true, creates new scope {...code...} and executes the given code in it. Often used for exiting do, for, count or forEach. Simply exiting waitUntil or onEachFrame scopes with exitWith will have no effect as these scopes are called repeatedly by the engine and require different handling to terminate (see Example 3).", "example": "if (_x>5) exitWith {echo \"_x is too big\"; _x} When _x is greater than 5, outputs message and terminates code in current level with value of _x.", "docSyntax": "ifType exitWith code", "syntax": "ifType exitWith <code>", "type": "controlStatement"}, "expectedDestination": {"version": "1.00", "tags": "[AL] ", "description": "Return expected destination of unit as an array.", "example": "_data = expectedDestination player;", "docSyntax": "Array = expectedDestination person", "syntax": "<array> = expectedDestination <objUnit>"}, "exportLandscapeXYZ": {"version": "1.00", "tags": "", "description": "Exports landscape as XYZ file. Note: Not available in Retail Version", "example": "exportLandscapeXYZ \"myLandscape.txt\"", "docSyntax": "exportLandscapeXYZ filename", "syntax": "exportLandscapeXYZ filename"}, "fadeRadio": {"version": "1.00", "tags": "[EL] ", "description": "Causes a smooth change in the radio volume. The change duration is given by time, the target volume by volume. The default radio volume is 1.0.", "example": "5 fadeRadio 0.1", "docSyntax": "time fadeRadio volume", "syntax": "<scalar> fadeRadio volume"}, "find": {"version": "1.00", "tags": "", "description": "Searches for an array element within array or a ANSI string within a ANSI string. Returns the 0 based index on success or -1 if not found.", "example": "[\"Apples\", \"Oranges\", \"Pears\"] find \"Oranges\"; //\u00a0returns 1", "docSyntax": "array find element", "syntax": "<array> find element"}, "findCover": {"version": "1.00", "tags": "", "description": "Returns the object around where the unit finds cover. The minDist, visibilityPosition and ignoreObject parameters are optional.", "example": "-", "docSyntax": "object findCover [position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]", "syntax": "<object> findCover [position,hidePosition,maxDist,minDist,visibilityPosition,ignoreObject]"}, "findDisplay": {"version": "1.00", "tags": "", "description": "Finds a display by its IDD which can either be defined in missionConfigFile (description.ext) or configFile (config.cpp)", "example": "[] spawn { waitUntil {\u00a0!isNull findDisplay 46 }; hint \"Mission Display is now available!\"; };", "docSyntax": "findDisplay idd", "syntax": "findDisplay idd"}, "findNearestEnemy": {"version": "1.00", "tags": "", "description": "Finds the nearest enemy to the specified position. Returns a null object if the object's group does not know about any enemies. This command will return nearest object that is known to the unit and is considered enemy. An empty vehicle that is part of enemy group assets (see addVehicle) can be returned as valid nearest target.", "example": "_myNearestEnemy = (units _myGroup select 0) findNearestEnemy player;", "docSyntax": "object findNearestEnemy position", "syntax": "<object> findNearestEnemy position"}, "finishMissionInit": {"version": "1.00", "tags": "", "description": "Finish world initialization before mission is launched.", "example": "finishMissionInit", "docSyntax": "finishMissionInit", "syntax": "finishMissionInit"}, "finite": {"version": "1.00", "tags": "", "description": "Returns true if the provided number is finite (not infinite and a valid number).", "example": "finite 123; //\u00a0returns true", "docSyntax": "finite number", "syntax": "finite <scalar>"}, "floor": {"version": "1.00", "tags": "", "description": "Returns the next lowest integer in relation to x.", "example": "floor 5.25", "docSyntax": "Number = floor x", "syntax": "<scalar> = floor x"}, "fog": {"version": "1.00", "tags": "", "description": "A getter for setFog. Returns the current value of the fog in range 0...1.", "example": "_foglevel = fog;", "docSyntax": "fog", "syntax": "fog"}, "fogForecast": {"version": "1.00", "tags": "", "description": "Returns the forecast fog value. A value of 0 means no fog, 1 means maximum fog.", "example": "_level = fogForecast;", "docSyntax": "fogForecast", "syntax": "fogForecast"}, "for": {"version": "1.00", "tags": "", "description": "This operator creates a For Type which is used in the for-constructs.", "example": "//\u00a0will output 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 (the to value being inclusive) for \"_i\" from 1 to 10 do { systemChat str _i; };", "docSyntax": "for arguments", "syntax": "for arguments", "type": "controlStatement"}, "forceSpeed": {"version": "1.00", "tags": "", "description": "Force the speed limit on given object (object will never attempt to move faster than given by forceSpeed). Use negative value to return to default behaviour. Used unit is m/s.", "example": "_helicopter forceSpeed 150;", "docSyntax": "object forceSpeed speed", "syntax": "<object> forceSpeed <scalar>"}, "formationDirection": {"version": "1.00", "tags": "[AL] ", "description": "Return the direction in degrees of the 'unit' watching in formation.", "example": "_degrees = FormationDirection _unit", "docSyntax": "Number = formationDirection unitName", "syntax": "<scalar> = formationDirection <objUnit>"}, "formationLeader": {"version": "1.00", "tags": "", "description": "Return leader of the formation.", "example": "? (formationLeader player\u00a0!= leader player)\u00a0: hint \"Formation leader is not the group leader.\"", "docSyntax": "Object = formationLeader unitName", "syntax": "<object> = formationLeader <objUnit>"}, "formationMembers": {"version": "1.00", "tags": "", "description": "Return list of units (drivers) in the formation.", "example": "_drivers=FormationMembers _person", "docSyntax": "Array = formationMembers person", "syntax": "<array> = formationMembers <objUnit>"}, "formationPosition": {"version": "1.00", "tags": "", "description": "Return position of unit in the formation.", "example": "_pos = formationPosition _unit;", "docSyntax": "formationPosition unit", "syntax": "formationPosition <objUnit>"}, "formationTask": {"version": "1.00", "tags": "", "description": "Return the current task of the unit in the formation. You can't use it in ArmA 2, it will always returns \"NOTHING\"", "example": "_CurrentTask = FormationTask _person", "docSyntax": "String = formationTask person", "syntax": "<string> = formationTask <objUnit>"}, "formatText": {"version": "1.00", "tags": "", "description": "Creates a Structured Text similar to format command.", "example": "hint formatText [\"Image: %1\", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "formatText [format, argument1, argument2, ...]", "syntax": "formatText [format,argument1,argument2,...]"}, "from": {"version": "1.00", "tags": "", "description": "Continue sequence of for construct. It sets the start value of the index variable.", "example": "for \"_x\" from 10 to 20 do {..code..}", "docSyntax": "for from b", "syntax": "for from b"}, "getArray": {"version": "1.00", "tags": "", "description": "Extract array from config entry.", "example": "_array = getArray (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"threat\")", "docSyntax": "Array = getArray config", "syntax": "<array> = getArray config"}, "getHideFrom": {"version": "1.00", "tags": "", "description": "Returns the Position where object believes the enemy to be. If there is no direct line of sight between the object and the enemy, this position is extrapolated based on the last known position and speed of the enemy. A returned position of [0,0,0] implies that object does not knowAbout enemy. If enemy is null it is some position in front of the object or enemy position.", "example": "_pos = player getHideFrom _enemy;", "docSyntax": "object getHideFrom enemy", "syntax": "<object> getHideFrom enemy"}, "getNumber": {"version": "1.00", "tags": "", "description": "Extract number from config entry.", "example": "_value = getNumber (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"maxSpeed\");", "docSyntax": "getNumber config", "syntax": "getNumber config"}, "getPosASL": {"version": "1.00", "tags": "[AG] ", "description": "Returns the object position height above sea level.", "example": "_AslPos = getPosASL player;", "docSyntax": "Array = getPosASL object", "syntax": "<array> = getPosASL <object>"}, "getSpeed": {"version": "1.00", "tags": "[AG] ", "description": "Get the speed for the given speed mode. SpeedMode can be:", "example": "_spd = player getSpeed \"FAST\";", "docSyntax": "object getSpeed speedMode", "syntax": "<object> getSpeed speedMode"}, "getText": {"version": "1.00", "tags": "", "description": "Extracts localized text from config entry, if entry is subject to localization, otherwise returns text value. To obtain the translation key itself, see getTextRaw.", "example": "_text = getText (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"icon\"); // \"Get in %1 as Driver\"", "docSyntax": "getText config", "syntax": "getText config"}, "getVariable": {"version": "1.00", "tags": "[AG] ", "description": "Return the value of variable in the variable space assigned to various data types.", "example": "_thePublicVariable = _myTruck getVariable \"myPublicVariable\";", "docSyntax": "varspace getVariable name", "syntax": "<string|object> getVariable <string>", "returns": "any"}, "glanceAt": {"version": "1.00", "tags": "", "description": "Control what the unit(s) is/are glancing at (target or Position). If target is used, it will get revealed fully. How frequently the unit(s) is/are glancing there depends on behaviour.", "example": "_someSoldier glanceAt _otherSoldier", "docSyntax": "unit(s) glanceAt position", "syntax": "<objUnit>(s) glanceAt position"}, "halt": {"version": "1.00", "tags": "", "description": "This command was meant to break the script into debugger, however currently it doesn't do anything except displaying and logging the following error: Error Debugger breakpoint hit.", "example": "if (_displayAnError) then {halt};", "docSyntax": "halt", "syntax": "halt"}, "hideBehindScripted": {"version": "1.00", "tags": "", "description": "When set to true it disables the default engine hiding behavior.", "example": "_unit hideBehindScripted true", "docSyntax": "object hideBehindScripted scriptedHideBehind", "syntax": "<object> hideBehindScripted scriptedHideBehind"}, "hideBody": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Hides dead body of the given unit. After a short delay, the body slowly sinks into the ground. After awhile, when group of the unit becomes grpNull, the body gets deleted and becomes objNull. If applied to alive unit, nothing happens until unit dies, then the unit's body gets hidden. If a dead unit is human player, the body is hidden but not deleted until player respawns.", "example": "hideBody player1;", "docSyntax": "hideBody unit", "syntax": "hideBody <objUnit>"}, "hierarchyObjectsCount": {"version": "1.00", "tags": "", "description": "The number of objects in hierarchy.", "example": "_number = hierarchyObjectsCount;", "docSyntax": "hierarchyObjectsCount", "syntax": "hierarchyObjectsCount"}, "htmlLoad": {"version": "1.00", "tags": "", "description": "Load HTML from file or Uri using given control. File path is relative to current mission dir or an absolute path (with drive letter etc.). The command is subject to restrictions, imposed by CfgCommands class.", "example": "_control htmlLoad \"briefing.html\";", "docSyntax": "control htmlLoad filename", "syntax": "<uiControl> htmlLoad filename"}, "image": {"version": "1.00", "tags": "", "description": "Creates a structured text containing the given image. Use setAttributes to set additional attributes on the image.", "example": "hint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "image filename", "syntax": "image filename"}, "inGameUISetEventHandler": {"version": "1.00", "tags": "[EL] ", "description": "Sets given event handler of in-game UI. If EH function returns true, performed action is overridden. Event handlers available are:", "example": "inGameUISetEventHandler [\"Action\",\"hint 'Lights, Camera, Action!'; true\"];", "docSyntax": "inGameUISetEventHandler [handlerName, function]", "syntax": "inGameUISetEventHandler [handlerName,function]"}, "inheritsFrom": {"version": "1.00", "tags": "", "description": "Returns base entry of config entry.", "example": "_base = inheritsFrom (configFile >> \"CfgVehicles\" >> \"Car\"); Result is Config entry for class \"LandVehicle\"", "docSyntax": "inheritsFrom config", "syntax": "inheritsFrom config"}, "initAmbientLife": {"version": "1.00", "tags": "[EL] ", "description": "Initialises the ambient life on local client from CfgWorlds >> worldName >> AmbientA3. Has no effect on dedicated server or headless client.", "example": "initAmbientLife;", "docSyntax": "initAmbientLife", "syntax": "initAmbientLife"}, "intersect": {"version": "1.00", "tags": "[AG] ", "description": "Finds named selections in object which are in specified LOD, intersected by given section of a line. Return value is in the form of [selection, distance]. Multiple returned arrays are nested within a single array. No intersection returns []. lodName could be one of the following:", "example": "[_tank, \"VIEW\"] intersect [[1500, 1500, 2], [1550, 1500, 2]];", "docSyntax": "[object, lodName] intersect [begPos, endPos]", "syntax": "[<object>,lodName] intersect [begPos,endPos]"}, "isArray": {"version": "1.00", "tags": "", "description": "Check if config entry represents array.", "example": "_ok = isArray (configFile >> \"CfgVehicles\") Result is false", "docSyntax": "Boolean = isArray config", "syntax": "<bool> = isArray config"}, "isClass": {"version": "1.00", "tags": "", "description": "Check if config entry represents config class.", "example": "_ok = isClass (configFile >> \"CfgVehicles\"); Result is true.", "docSyntax": "Boolean = isClass config", "syntax": "<bool> = isClass config"}, "isFormationLeader": {"version": "1.00", "tags": "", "description": "Returns true if the specified unit is subgroup leader.", "example": "_isLeader = isFormationLeader player;", "docSyntax": "isFormationLeader unit", "syntax": "isFormationLeader <objUnit>"}, "isHidden": {"version": "1.00", "tags": "[AG] ", "description": "Return whether the person is hidden (reached the hiding position). For command that tests general visibility of an object use isObjectHidden", "example": "_bobIsHidden = isHidden bob;", "docSyntax": "isHidden person", "syntax": "isHidden <objUnit>"}, "isHideBehindScripted": {"version": "1.00", "tags": "", "description": "Return whether the vehicle has set the hideBehindScripted to true or not.", "example": "_isHidden = isHideBehindScripted _vehicle;", "docSyntax": "Boolean = isHideBehindScripted vehicle", "syntax": "<bool> = isHideBehindScripted <objVehicle>"}, "isKeyActive": {"version": "1.00", "tags": "", "description": "Checks whether the given key is active in the current user profile. See keys, keysLimit and doneKeys in the description.ext file of the missions.", "example": "_active = isKeyActive \"Mission04Key\";", "docSyntax": "isKeyActive keyName", "syntax": "isKeyActive keyName"}, "isKindOf": {"version": "1.00", "tags": "", "description": "Checks whether the object is (a subtype) of the given type. While main and alternative syntaxes support only CfgVehicles, CfgAmmo and CfgNonAIVehicles, alternative syntax 2 allows to specify any config, including mission config.", "example": "vehicle player isKindOf \"Tank\";", "docSyntax": "object isKindOf typeName", "syntax": "<object> isKindOf typeName"}, "isMarkedForCollection": {"version": "1.00", "tags": "[AG] ", "description": "Checks whether the object is marked for weapons collection.", "example": "_marked = isMarkedForCollection _truck", "docSyntax": "Boolean = isMarkedForCollection object", "syntax": "<bool> = isMarkedForCollection <object>"}, "isNil": {"version": "1.00", "tags": "", "description": "Tests whether the variable given by its name is nil or undefined, or whether the given expression evaluates to nil or Nothing.", "example": "if (isNil \"pokus\") then { pokus = 0; };", "docSyntax": "isNil variableName", "syntax": "isNil variableName"}, "isNumber": {"version": "1.00", "tags": "", "description": "Check if config entry represents number.", "example": "_ok = isNumber (configFile >> \"CfgVehicles\") Result is false", "docSyntax": "Boolean = isNumber config", "syntax": "<bool> = isNumber config"}, "isPlayer": {"version": "1.00", "tags": "[AG] ", "description": "Checks if given person is a player. Returns true for headless clients as well.", "example": "if (isPlayer _Soldier1) then { _Soldier1 setDamage 1; };", "docSyntax": "isPlayer person", "syntax": "isPlayer <objUnit>"}, "isText": {"version": "1.00", "tags": "", "description": "Check if config entry represents text.", "example": "_ok = isText (configFile >> \"CfgVehicles\") Result is false", "docSyntax": "Boolean = isText config", "syntax": "<bool> = isText config"}, "keyImage": {"version": "1.00", "tags": "", "description": "Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code.", "example": "_name = keyImage 28; //result is \"Enter\"", "docSyntax": "keyImage dikCode", "syntax": "keyImage dikCode"}, "keyName": {"version": "1.00", "tags": "", "description": "Returns the name of a button (on the keyboard, mouse or joystick) with the given code.", "example": "_name = keyName 28; //result is \"Enter\"", "docSyntax": "keyName dikCode", "syntax": "keyName dikCode"}, "lbIsSelected": {"version": "1.00", "tags": "", "description": "Checks whether or not given row of the given listbox is selected.", "example": "_selected = _control lbIsSelected 0;", "docSyntax": "control lbIsSelected index", "syntax": "<uiControl> lbIsSelected <scalar>"}, "lbSelection": {"version": "1.00", "tags": "", "description": "Returns Array of selected rows indices in the given listbox. If listbox is of style LB_MULTI (multi-selection) the array will contain multiple elements, otherwise only a single element. For single selection listbox one can also use lbCurSel. See also lbIsSelected, lbSetSelected", "example": "_indices = lbSelection _control;", "docSyntax": "lbSelection control", "syntax": "lbSelection <uiControl>"}, "lbSetSelected": {"version": "1.00", "tags": "", "description": "Sets the selection state of the given row of the given listbox of style LB_MULTI. The command has to be called for every row which is needed to be selected in multi-selection listbox. For single selection listbox use lbSetCurSel instead.", "example": "_control lbSetSelected [0, true];", "docSyntax": "control lbSetSelected [index, selected]", "syntax": "<uiControl> lbSetSelected [<scalar>,selected]"}, "lightAttachObject": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Attach light to given object at given position on object.", "example": "myLight lightAttachObject [myVehicle, [-0.5,-0.25,1]];", "docSyntax": "light lightAttachObject [object, position]", "syntax": "light lightAttachObject [<object>,position]"}, "lightDetachObject": {"version": "1.00", "tags": "", "description": "Detach light from object.", "example": "lightDetachObject _light", "docSyntax": "lightDetachObject light", "syntax": "lightDetachObject light"}, "limitSpeed": {"version": "1.00", "tags": "", "description": "Limit speed of given vehicle or person to given value (in km/h).", "example": "// Adjust \"speedLimit\" variable to change limited speed. (A3 1.24 we don't need loop for a continus effect, limitSpeed alone is enough.) _this setVariable [\"speedLimit\", 200]; _nul = _this spawn { while {canMove _this} do { _this limitSpeed (_this getVariable \"speedLimit\"); sleep 0.1; }; };", "docSyntax": "objectName limitSpeed speed", "syntax": "objectName limitSpeed <scalar>"}, "lineBreak": {"version": "1.00", "tags": "", "description": "Creates a structured text containing a line break.", "example": "hint composeText [\"First line\", lineBreak, \"Second line\"];", "docSyntax": "lineBreak", "syntax": "lineBreak"}, "lookAt": {"version": "1.00", "tags": "", "description": "Control what the unit(s) is/are looking at (target or Position). If target is used, it will get revealed fully.", "example": "_someSoldier lookAt _otherSoldier", "docSyntax": "unit(s) lookAt position", "syntax": "<objUnit>(s) lookAt position"}, "max": {"version": "1.00", "tags": "", "description": "The greater of a,b", "example": "3 max 2 Result is 3", "docSyntax": "Number = a max b", "syntax": "<scalar> = a max b"}, "min": {"version": "1.00", "tags": "", "description": "The smaller of a,b", "example": "3 min 2 //\u00a0Result is 2", "docSyntax": "a min b", "syntax": "a min b"}, "missionConfigFile": {"version": "1.00", "tags": "", "description": "Return root of mission Description.ext entries hierarchy.", "example": "for \"_i\" from (0) to ((count paramsArray) - 1) do { missionNamespace setVariable [configName ((missionConfigFile/\"Params\") select _i), paramsArray select _i]; };", "docSyntax": "missionConfigFile", "syntax": "missionConfigFile"}, "modelToWorld": {"version": "1.00", "tags": "", "description": "Translates relative position from object model space into world position.", "example": "_aboveAndBehindPlayer = player modelToWorld [0,-1,3];", "docSyntax": "model modelToWorld position", "syntax": "<object> modelToWorld <array>", "returns": "array"}, "moveInTurret": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Moves the soldier into the vehicle's turret. (Immediately, without animation). turret path is an array of positions inside a turret, or positions inside a turret of a turret.", "example": "_soldierOne moveInTurret [_tank, [0, 0]]", "docSyntax": "unitName moveInTurret [vehicle, turretPath]", "syntax": "<objUnit> moveInTurret [<objVehicle>,turretPath]"}, "moveTarget": {"version": "1.00", "tags": "", "description": "Change information about a target.", "example": "_moved = _target moveTarget [position player, 1, 1]", "docSyntax": "target moveTarget [position, typeAccuracy, posAccuracy]", "syntax": "<object> moveTarget [position,typeAccuracy,posAccuracy]"}, "moveTo": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Low level command to person to move to given position.", "example": "_myAgent moveTo getPosATL player;", "docSyntax": "person moveTo position", "syntax": "<objUnit> moveTo position"}, "moveToCompleted": {"version": "1.00", "tags": "", "description": "Check if latest low level moveTo command is finished.", "example": "_isCompleted = moveToCompleted _unit;", "docSyntax": "moveToCompleted person", "syntax": "moveToCompleted <objUnit>"}, "moveToFailed": {"version": "1.00", "tags": "", "description": "Check if latest low level moveTo command failed.", "docSyntax": "Boolean = moveToFailed person", "syntax": "<bool> = moveToFailed <objUnit>"}, "nearestObjects": {"version": "1.00", "tags": "", "description": "Returns a list of nearest objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered by proximity, the closest one will be first in the array. Alternatively, you can use nearObjects command, which doesn't sort results.", "example": "nearestObjects [player, [\"Car\", \"Tank\"], 200];", "docSyntax": "nearestObjects [position, types, radius, 2Dmode]", "syntax": "nearestObjects [position,types,radius,2Dmode]"}, "nearObjects": {"version": "1.00", "tags": "", "description": "Find objects (Units, Vehicles, Dead, Map Objects) in a sphere with given radius. The first object in the returned array is not necessarily the closest one. If you need returned objects to be sorted by distance, use nearestObjects. If typeName is given, only objects of given type (or its subtype) are listed.", "example": "_list = position player nearObjects 50;", "docSyntax": "position nearObjects radius", "syntax": "position nearObjects radius"}, "needReload": {"version": "1.00", "tags": "", "description": "Return how much vehicle wants to reload its weapons.", "example": "_seriousness = needReload _vehicle;", "docSyntax": "needReload vehicle", "syntax": "needReload <objVehicle>"}, "nextWeatherChange": {"version": "1.00", "tags": "", "description": "Return the remaining time (in seconds) over which the current weather change will occur.", "example": "_seconds = nextWeatherChange;", "docSyntax": "Number = nextWeatherChange", "syntax": "<scalar> = nextWeatherChange"}, "onBriefingTeamSwitch": {"version": "1.00", "tags": "", "description": "Select a sound defined in the CfgSounds of the mission to be played the first time the TeamSwitch tab is selected in the briefing.", "example": "onBriefingTeamSwitch \"TeamSwitchVoiceOver\";", "docSyntax": "onBriefingTeamSwitch soundName", "syntax": "onBriefingTeamSwitch <string>"}, "onPlayerConnected": {"version": "1.00", "tags": "[SE] ", "description": "This command will execute attached code whenever a player is connected to a MP session. The code will receive a number of special variables:", "example": "onPlayerConnected \"[_id, _name] execVM \"\"PlayerConnected.sqf\"\"\";", "docSyntax": "onPlayerConnected code", "syntax": "onPlayerConnected <code>"}, "onPlayerDisconnected": {"version": "1.00", "tags": "[SE] ", "description": "This command will execute attached code whenever a player is leaving an MP session. The code will receive a number of special variables:", "example": "onPlayerDisconnected \"diag_log [_id, _uid, _name]\";", "docSyntax": "onPlayerDisconnected code", "syntax": "onPlayerDisconnected <code>"}, "overcast": {"version": "1.00", "tags": "", "description": "Return the current overcast level. Zero is clear skies, one is maximum cloud cover.", "example": "_cloudLevel = overcast", "docSyntax": "Number = overcast", "syntax": "<scalar> = overcast"}, "overcastForecast": {"version": "1.00", "tags": "", "description": "Return the overcast forecast.", "example": "_forecast = overcastForecast;", "docSyntax": "overcastForecast", "syntax": "overcastForecast"}, "parseNumber": {"version": "1.00", "tags": "", "description": "An SQF equivalent of C++ atof function. Parses the string, interpreting its content as a floating point number.", "example": "_number = parseNumber \"0.125\"; //\u00a00.125", "docSyntax": "parseNumber string", "syntax": "parseNumber <string>"}, "parseText": {"version": "1.00", "tags": "", "description": "Creates a structured text by parsing the given XML description. Do not use parseText when displaying a localized text from Stringtable.xml.", "example": "private _Stxt = parseText \"First line<img image='data\\isniper.paa'/><br/>Second line\";", "docSyntax": "parseText text", "syntax": "parseText <string>"}, "playerRespawnTime": {"version": "1.00", "tags": "", "description": "Return the player's remaining time before respawn, or -1 if it is not available (such as when the player is alive).", "example": "waitUntil {playerRespawnTime <= 0};", "docSyntax": "playerRespawnTime", "syntax": "playerRespawnTime"}, "playerSide": {"version": "1.00", "tags": "", "description": "Returns the player's side. This is valid even when the player controlled person is dead (a difference from side player).", "example": "if (side man1 == playerSide) then { hint \"man1 is on your side!\"; };", "docSyntax": "playerSide", "syntax": "playerSide"}, "playMission": {"version": "1.00", "tags": "", "description": "The mission is launched (from the main menu). Both campaign and mission are given as their directory name. If the campaign is empty, a single mission is launched. If skipBriefing is true, the intro and briefing are skipped.", "example": "playMission [\"XOutrage\",\"x05Negotiator.Noe\"];", "docSyntax": "playMission [campaign, mission, skipBriefing]", "syntax": "playMission [campaign,mission,skipBriefing]"}, "positionCameraToWorld": {"version": "1.00", "tags": "", "description": "Transforms position from camera coordinate space to world coordinate space.", "example": "_worldPos = positionCameraToWorld _cameraPos;", "docSyntax": "positionCameraToWorld cameraPos", "syntax": "positionCameraToWorld cameraPos"}, "posScreenToWorld": {"version": "1.00", "tags": "", "description": "Converts map screen coordinates into world coordinates. Unlike ctrlMapScreenToWorld, this command returns world position is format [x, y, 0], otherwise it is identical to ctrlMapScreenToWorld.", "example": "_worldCoord = _control posScreenToWorld _ScreenCoord;", "docSyntax": "map posScreenToWorld [x, y]", "syntax": "<objMap> posScreenToWorld [x,y]"}, "posWorldToScreen": {"version": "1.00", "tags": "", "description": "Converts world coordinates into map screen coordinates. This command is identical to ctrlMapWorldToScreen.", "example": "_screenCoord = _control posWorldToScreen _worldCoord;", "docSyntax": "map posWorldToScreen position", "syntax": "<objMap> posWorldToScreen position"}, "precision": {"version": "1.00", "tags": "", "description": "Return the precision of the given entity, how is the entity able to be precise when moving to given target.", "example": "if (position _this distance _dangerPos <= precision _this) then {...}; //used in formationCDanger.fsm", "docSyntax": "precision entity", "syntax": "precision entity"}, "preloadCamera": {"version": "1.00", "tags": "", "description": "Preload all textures and models around given Position to avoid visual artifacts after camera is moved. Should be used before any abrupt camera change/cut. Returns true once all data is ready. See camPreload for alternative, more flexible camera preloading.", "example": "waitUntil {preloadCamera markerPos \"cam_location_2\"};", "docSyntax": "preloadCamera position", "syntax": "preloadCamera position"}, "preloadObject": {"version": "1.00", "tags": "", "description": "Preloads all textures, materials and proxies needed to render given object. Works with both class names and objects. Returns true once all data is loaded and ready.", "example": "[] spawn { waitUntil {10 preloadObject \"SoldierW\"}; hint \"Preload finished\"; };", "docSyntax": "distance preloadObject object", "syntax": "<scalar> preloadObject <object>"}, "preloadSound": {"version": "1.00", "tags": "", "description": "Makes sure that a sound can start playing without any delay once it is needed. Command works in Arma 3, but might not be implemented in earlier Arma installments.", "example": "{ waitUntil {preloadSound _x}; } forEach getArray (missionConfigFile >> \"CfgSounds\" >> \"sounds\");", "docSyntax": "preloadSound soundName", "syntax": "preloadSound <string>"}, "preloadTitleObj": {"version": "1.00", "tags": "", "description": "Preloads data for the given resource object.", "example": "_ok = preloadTitleObj [\"BISLogo\", \"PLAIN\"]", "docSyntax": "preloadTitleObj [name, type, speed, showInMap]", "syntax": "preloadTitleObj [<string>,type,<scalar>,showInMap]"}, "preloadTitleRsc": {"version": "1.00", "tags": "", "description": "Resource title - Preload data. The resource can be defined in the Description.ext file.", "example": "_ok=preloadTitleRsc [\"BIS\", \"PLAIN\"]", "docSyntax": "preloadTitleRsc [name, type]", "syntax": "preloadTitleRsc [<string>,type]"}, "preprocessFileLineNumbers": {"version": "1.00", "tags": "", "description": "Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using /* */ and PreProcessor Commands. The preprocessor also adds a default debug entrypoint for compiler at the begining of script: #line 1 \"aFilename\"", "example": "_string = preprocessFileLineNumbers \"A3\\ui_f\\scripts\\IGUI\\RscUnitInfo.sqf\" Result is:", "docSyntax": "preprocessFileLineNumbers fileName", "syntax": "preprocessFileLineNumbers fileName"}, "processInitCommands": {"version": "1.00", "tags": "[EG] ", "description": "Process statements stored using setVehicleInit. The statements will only be executed once even if processInitCommands is called multiple times.", "example": "processInitCommands;", "docSyntax": "processInitCommands", "syntax": "processInitCommands"}, "radioVolume": {"version": "1.00", "tags": "", "description": "Returns the current radio volume (set by fadeRadio).", "example": "hint str radioVolume;", "docSyntax": "radioVolume", "syntax": "radioVolume"}, "rain": {"version": "1.00", "tags": "", "description": "Returns the current value of rain density in range 0..1", "example": "_rainLevel = rain;", "docSyntax": "rain", "syntax": "rain"}, "rank": {"version": "1.00", "tags": "[AG] ", "description": "Returns the rank of the given unit. Rank can be one of the following:", "example": "_rank = rank player;", "docSyntax": "rank unitName", "syntax": "rank <objUnit>"}, "reload": {"version": "1.00", "tags": "", "description": "Reload all weapons", "example": "if (needReload player == 1) then {reload player};", "docSyntax": "reload unitName", "syntax": "reload <objUnit>"}, "reloadEnabled": {"version": "1.00", "tags": "", "description": "Check whether magazine is reloaded whenever emptied.", "example": "private _canReload = reloadEnabled _unit1;", "docSyntax": "reloadEnabled unitName", "syntax": "reloadEnabled <objUnit>"}, "removeSwitchableUnit": {"version": "1.00", "tags": "", "description": "Remove a unit from the list of units available for Team Switch.", "example": "removeSwitchableUnit _unit1;", "docSyntax": "removeSwitchableUnit unitName", "syntax": "removeSwitchableUnit <objUnit>"}, "respawnVehicle": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets vehicle as respawnable in MP game. The vehicle will be spawned at the locality and coordinates it was prior to destruction. If respawn type is set to base respawn (type 3) and vehicle respawn marker is provided (respawn_vehicle_XXXSIDEXXX), vehicle will spawn on the marker.", "example": "car respawnVehicle [5, 3]; 'car' will respawn at the predefined marker for the side after 5 seconds. The unit will respawn 3 times.", "docSyntax": "vehicle respawnVehicle [delay, count]", "syntax": "<objVehicle> respawnVehicle [<scalar>,count]"}, "round": {"version": "1.00", "tags": "", "description": "Rounds up or down to the closest integer.", "example": "_val= round 5.25, result is 5", "docSyntax": "Number = round x", "syntax": "<scalar> = round x"}, "runInitScript": {"version": "1.00", "tags": "[EL] ", "description": "Fades in mission screen and re-executes init.sqf and init.sqs scripts. In Eden Editor the code inside the \"Init\" mission attribute is executed.", "example": "runInitScript;", "docSyntax": "runInitScript", "syntax": "runInitScript"}, "scopeName": {"version": "1.00", "tags": "", "description": "Defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands like breakOut and breakTo. Scope name should be defined only once per scope. Trying to set a different name on the scope that has already defined scope name will result in error.", "example": "scopeName \"main\"; while {true} do { scopeName \"loop1\"; while {true} do { scopeName \"loop2\"; ... }; };", "docSyntax": "scopeName name", "syntax": "scopeName <string>"}, "scriptDone": {"version": "1.00", "tags": "", "description": "Check if a script is finished running using the Script_(Handle) returned by execVM or spawn.", "example": "SQS Syntax:@scriptDone _Handle", "docSyntax": "scriptDone handle", "syntax": "scriptDone handle"}, "selectionPosition": {"version": "1.00", "tags": "[AG] ", "description": "Search for selection in the object model (first in the memory level, then in geometry LODs).", "example": "_inModelPosition = player selectionPosition \"head_hit\";", "docSyntax": "object selectionPosition selectionName", "syntax": "<object> selectionPosition selectionName"}, "selectLeader": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Select the group's leader. Group locality can be checked with local command and group ownership with groupOwner command.", "example": "group player selectLeader player;", "docSyntax": "group selectLeader unitName", "syntax": "<objGroup> selectLeader <objUnit>"}, "selectPlayer": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Move player into given unit. Some usage advices:", "example": "selectPlayer bob;", "docSyntax": "selectPlayer unitName", "syntax": "selectPlayer <objUnit>"}, "sendSimpleCommand": {"version": "1.00", "tags": "", "description": "Sends a simple command to the vehicle's driver / gunner (air vehicles ignore it). See also vehicleMoveInfo.", "example": "vehicle player sendSimpleCommand \"STOP\";", "docSyntax": "vehicleName sendSimpleCommand command", "syntax": "vehicleName sendSimpleCommand command"}, "setAperture": {"version": "1.00", "tags": "[EL] ", "description": "Sets custom camera aperture (-1 to do it automatically).", "example": "setAperture 0.3;", "docSyntax": "setAperture aperture", "syntax": "setAperture aperture"}, "setAttributes": {"version": "1.00", "tags": "", "description": "Returns a Structured Text created from the given structured text and sets attributes to the given values.", "example": "_txt = text \"Red text, right align\"; _txt setAttributes [\"color\", \"#ff0000\", \"align\", \"right\"]; hint composeText [_txt];", "docSyntax": "text setAttributes [name1, value1, name2, value2, ...]", "syntax": "<string> setAttributes [name1,value1,name2,value2,...]"}, "setCameraEffect": {"version": "1.00", "tags": "", "description": "This command is not available in Arma 3", "example": "trigger setCameraEffect [\"ZoomIn\", \"FRONT\"]", "docSyntax": "trigger setCameraEffect [name, position]", "syntax": "<objTrigger> setCameraEffect [<string>,position]"}, "setCameraInterest": {"version": "1.00", "tags": "", "description": "Set camera interest for given entity. Camera interest is by default 0. Any unit which is speaking has its camera interest raised to 50. Camera interest is used to focus camera to control depth of field in cutscenes. Combination of camera interest, unit position of the screen, unit movement, unit type, and some other properties is used to determine which unit to focus at. Higher camera interest increases the chance of the unit being focused.", "example": "_soldier setCameraInterest 50;", "docSyntax": "entity setCameraInterest interest", "syntax": "entity setCameraInterest interest"}, "setDate": {"version": "1.00", "tags": "[EL] ", "description": "Sets mission date and time. This command is fully JIP compatible (as of Arma 3 v1.93.145588). Players joining after mission start will get the current server date including the year.", "example": "setDate [1986, 2, 25, 16, 0]; //\u00a04:00pm February 25, 1986", "docSyntax": "setDate date", "syntax": "setDate date"}, "setDestination": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Set the destination for path planning of the pilot. Possible values for planningMode are:", "example": "bob setDestination [screenToWorld [0.5,0.5], \"LEADER PLANNED\", true]", "docSyntax": "object setDestination [position, planningMode, forceReplan]", "syntax": "<object> setDestination [position,planningMode,forceReplan]"}, "setDropInterval": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Set interval of emitting particles from particle source. In Arma 3 hardcoded limit of how many particles can exist at the same time is 18000. Correspondence between CfgCloudlets class param name and command param: particleSource setDropInterval interval;", "example": "_source setDropInterval 0.05;", "docSyntax": "particleSource setDropInterval interval", "syntax": "particleSource setDropInterval interval"}, "setEffectCondition": {"version": "1.00", "tags": "", "description": "The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result.", "example": "_triggerObj setEffectCondition \"thisList\";", "docSyntax": "trigger setEffectCondition statement", "syntax": "<objTrigger> setEffectCondition statement"}, "setFormationTask": {"version": "1.00", "tags": "", "description": "Set the current task of the formation member.", "docSyntax": "object setFormationTask task", "syntax": "<object> setFormationTask <objTask>"}, "setFriend": {"version": "1.00", "tags": "[SE] [EG] ", "description": "Sets how friendly side1 is with side2. For a value smaller than 0.6 it results in being enemy, otherwise it is friendly. Intended to be used on mission start. Changing value during mission can cause unexpected errors in AI behavior. See also Side relations.", "example": "west setFriend [resistance, 0];", "docSyntax": "side1 setFriend [side2 , value]", "syntax": "side1 setFriend [side2 ,<scalar>]"}, "setHideBehind": {"version": "1.00", "tags": "", "description": "Sets the data for hiding. objectWhereHide can be taken using findCover. hidePosition can be taken using getHideFrom. Command is not functional in ArmA 2.", "docSyntax": "object setHideBehind [objectWhereHide, hidePosition]", "syntax": "<object> setHideBehind [objectWhereHide,hidePosition]"}, "setLightAmbient": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Set ambient color of light. This includes surfaces that face away from the light, unlike setLightColor.", "example": "myLight setLightAmbient [0.5,0,0]; //\u00a0produces red light around the origin source", "docSyntax": "light setLightAmbient [r, g, b]", "syntax": "light setLightAmbient [r,g,b]"}, "setLightBrightness": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Set brightness of light.", "example": "myLight setLightBrightness 2;", "docSyntax": "light setLightBrightness brightness", "syntax": "light setLightBrightness brightness"}, "setLightColor": {"version": "1.00", "tags": "[AL] [EL] ", "description": "Set diffuse color of light. Illuminates surfaces that are facing the light.", "example": "myLight setLightColor [0.5,0,0]; //\u00a0produces red", "docSyntax": "light setLightColor [r, g, b]", "syntax": "light setLightColor [r,g,b]"}, "setMarkerBrush": {"version": "1.00", "tags": "[EG] ", "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.", "example": "\"Marker1\" setMarkerBrush \"DIAGGRID\";", "docSyntax": "markerName setMarkerBrush brush", "syntax": "<string> setMarkerBrush brush"}, "setMarkerDir": {"version": "1.00", "tags": "[EG] ", "description": "Sets the orientation of the marker. Angle is in degrees.", "example": "\"Marker1\" setMarkerDir 90;", "docSyntax": "markerName setMarkerDir angle", "syntax": "<string> setMarkerDir angle"}, "setMarkerShape": {"version": "1.00", "tags": "[EG] ", "description": "Selects shape (actual type) of the marker. The shape can be:", "example": "\"Marker1\" setMarkerShape \"RECTANGLE\";", "docSyntax": "markerName setMarkerShape shape", "syntax": "<string> setMarkerShape shape"}, "setMarkerText": {"version": "1.00", "tags": "[EG] ", "description": "Sets the text label of an existing marker.", "example": "\"Marker1\" setMarkerText \"You are here.\";", "docSyntax": "markerName setMarkerText text", "syntax": "<string> setMarkerText <string>"}, "setMousePosition": {"version": "1.00", "tags": "", "description": "Moves mouse pointer to specified position on the screen. x and y could be any number, but will be clipped so mouse never leaves the screen area.", "example": "setMousePosition [0.5, 0.5];", "docSyntax": "setMousePosition [x, y]", "syntax": "setMousePosition [x,y]"}, "setMusicEffect": {"version": "1.00", "tags": "", "description": "Defines the music track played on activation. Track is a subclass name of CfgMusic. In addition, \"$STOP$\" (stops the current music track).", "example": "_trigger setMusicEffect \"Track1\"", "docSyntax": "trigger setMusicEffect track", "syntax": "<objTrigger> setMusicEffect track"}, "setParticleCircle": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Updates particle source, creates particles in circle with given radius. Velocity is transformed and added to total velocity. Correspondence between CfgCloudlets class param names and command array of params: particleSource setParticleCircle [ circleRadius, circleVelocity ];", "docSyntax": "particleSource setParticleCircle [radius, velocity]", "syntax": "particleSource setParticleCircle [radius,velocity]"}, "setParticleParams": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Set parameters to particle source. Array is in format ParticleArray.", "example": "see ParticleArray", "docSyntax": "particleSource setParticleParams array", "syntax": "particleSource setParticleParams <array>"}, "setParticleRandom": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sets randomization of particle source parameters. Correspondence between CfgCloudlets class param names and command array of params: particleSource setParticleRandom [ lifeTimeVar, positionVar, moveVelocityVar, rotationVelocityVar, sizeVar, colorVar, randomDirectionPeriodVar, randomDirectionIntensityVar, angleVar, bounceOnSurfaceVar ];", "example": "_particleSource setParticleRandom [0, [0.1, 0.1, 0.1], [0, 0, 0.5], 0, 0.1, [0, 0, 0, 0], 0, 0, 45, 0];", "docSyntax": "particleSource setParticleRandom [lifeTime, position, moveVelocity, rotationVelocity, size, color, directionPeriod, directionIntensity, angle, bounceOnSurface]", "syntax": "particleSource setParticleRandom [lifeTime,position,moveVelocity,rotationVelocity,size,<scalar>,directionPeriod,directionIntensity,angle,bounceOnSurface]"}, "setPlayable": {"version": "1.00", "tags": "", "description": "Create MP role for the unit. The roles created this way are used for Join In Progress and Team Switch.", "example": "setPlayable _aPerson", "docSyntax": "setPlayable unitName", "syntax": "setPlayable <objUnit>"}, "setPosASL": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Sets the object position above sea level. Given position must be in PositionASL format.", "example": "player setPosASL [getPosASL player select 0, (getPosASL player select 1) + 10, getPosASL player select 2];", "docSyntax": "object setPosASL pos", "syntax": "<object> setPosASL <array>"}, "setRank": {"version": "1.00", "tags": "[AL] [AG] [EL] [EG] ", "description": "Sets rank of given unit. Possible values: PRIVATE, CORPORAL, SERGEANT, LIEUTENANT, CAPTAIN, MAJOR or COLONEL.", "example": "player setRank \"COLONEL\"", "docSyntax": "unitName setRank rank", "syntax": "<objUnit> setRank rank"}, "setSoundEffect": {"version": "1.00", "tags": "", "description": "Defines the different sound effects.", "example": "_trigger setSoundEffect [\"Alarm\", \"\", \"\", \"\"];", "docSyntax": "trigger setSoundEffect [sound, voice, soundEnv, soundDet]", "syntax": "<objTrigger> setSoundEffect [sound,voice,soundEnv,soundDet]"}, "setTargetAge": {"version": "1.00", "tags": "", "description": "Sets how the target is known to the other centers. They behave like the target was seen age seconds ago. Possible age values are: \"ACTUAL\", \"5 MIN\", \"10 MIN\", \"15 MIN\", \"30 MIN\", \"60 MIN\", \"120 MIN\" or \"UNKNOWN\".", "example": "player setTargetAge \"10 MIN\"", "docSyntax": "object setTargetAge age", "syntax": "<object> setTargetAge age"}, "setTitleEffect": {"version": "1.00", "tags": "", "description": "Defines the title effect via [Type, Effect, Text] where 'Type' can be", "example": "_trigger setTitleEffect [\"TEXT\", \"PLAIN DOWN\", \"Hello world.\"]", "docSyntax": "trigger setTitleEffect [type, effect, text]", "syntax": "<objTrigger> setTitleEffect [type,effect,<string>]"}, "setTriggerActivation": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Defines the trigger activation type. See ArmA:Mission Editor - Triggers for a thorough overview of triggers and its fields for activation, effects, etc. Since Arma 3 v1.67, \"ANYPLAYER\" activation can be used to detect any player.", "example": "_trigger setTriggerActivation [\"WEST\", \"EAST D\", true]", "docSyntax": "trigger setTriggerActivation [by, type, repeating]", "syntax": "<objTrigger> setTriggerActivation [by,type,repeating]"}, "setTriggerArea": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Trigger axis a, b and c (half of their x, y and z dimensions)", "example": "_trigger setTriggerArea [100, 50, 45, false];", "docSyntax": "trigger setTriggerArea [a, b, angle, isRectangle, c]", "syntax": "<objTrigger> setTriggerArea [a,b,angle,isRectangle,c]"}, "setTriggerStatements": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Defines trigger condition, activation and deactivation statements. Trigger condition has to return Boolean. true will activate the trigger, false will deactivate it (only if activation is set to repeat). thisList returns the same result as list command, which includes all entities in the trigger area that are capable of activating the trigger. Dead entities are excluded as well as crew in vehicles, vehicles themselves are included.", "example": "_trg setTriggerStatements [\"this\", \"hint 'trigger on'\", \"hint 'trigger off'\"]", "docSyntax": "trigger setTriggerStatements [condition, activation, deactivation]", "syntax": "<objTrigger> setTriggerStatements [condition,activation,deactivation]"}, "setTriggerText": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers.", "example": "trigger setTriggerText \"Call for support\";", "docSyntax": "trigger setTriggerText text", "syntax": "<objTrigger> setTriggerText <string>"}, "setTriggerTimeout": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time.", "example": "_trigger setTriggerTimeout [5, 10, 7, false];", "docSyntax": "trigger setTriggerTimeout [min, mid, max, interruptable]", "syntax": "<objTrigger> setTriggerTimeout [min,mid,max,interruptable]"}, "setTriggerType": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission):", "example": "_trigger setTriggerType \"END1\"", "docSyntax": "trigger setTriggerType action", "syntax": "<objTrigger> setTriggerType action"}, "setUnitAbility": {"version": "1.00", "tags": "", "description": "Sets skill of given unit. Unlike setSkill, setUnitAbility can set values > 1. Even though the skill command will correctly return set value, the actual unit ability will be capped to max available.", "example": "_unit setUnitAbility 1;", "docSyntax": "unit setUnitAbility value", "syntax": "<objUnit> setUnitAbility <scalar>"}, "setUnitRank": {"version": "1.00", "tags": "[AG] [EL] [EG] ", "description": "Sets rank of given unit. Possible rank values, and the associated rating that is automatically given:", "example": "player setUnitRank \"COLONEL\";", "docSyntax": "unitName setUnitRank rank", "syntax": "<objUnit> setUnitRank rank"}, "setVariable": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Set variable to given value in the variable space of given element.", "example": "_myTruck setVariable [\"myPublicVariable\", 123, true];", "docSyntax": "varspace setVariable [name, value]", "syntax": "<string|object> setVariable [<string>,<scalar>]", "returns": "void"}, "setVectorDir": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Set object's direction vector. Up vector will remain unchanged.", "example": "player setVectorDir [5,6,1];", "docSyntax": "object setVectorDir [x,y,z]", "syntax": "<object> setVectorDir [x,y,z]"}, "setVectorUp": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Set object's up vector. Direction of the object remain unchanged. Default object's vectorUp is [0,0,1]. In Multiplayer, setVectorUp must be executed on the machine where the object it applied to is local.", "example": "Turn object upside down: _obj setVectorUp [0,0,-1];", "docSyntax": "object setVectorUp [x, y, z]", "syntax": "<object> setVectorUp [x,y,z]"}, "setVehicleAmmo": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets how much ammunition (compared to a full state defined by the vehicle type) the vehicle has. Note that the ammo will be added only to local turrets. To check locality of turret use turretLocal. The value ranges from 0 to 1.", "example": "player setVehicleAmmo 0;", "docSyntax": "vehicleName setVehicleAmmo value", "syntax": "vehicleName setVehicleAmmo <scalar>"}, "setVehicleArmor": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets the armor (or health for men) state of the vehicle (a value from 0 to 1). Works like setDamage only in reverse: player setVehicleArmor 1 is the same as player setDamage 0, and player setVehicleArmor 0 is the same as player setDamage 0.97", "example": "player setVehicleArmor 0.5;", "docSyntax": "vehicleName setVehicleArmor value", "syntax": "vehicleName setVehicleArmor <scalar>"}, "setVehicleId": {"version": "1.00", "tags": "", "description": "Sets ID to vehicle. By this ID vehicle is referenced by triggers and waypoints.", "example": "player setVehicleId 1", "docSyntax": "vehicleName setVehicleId id", "syntax": "vehicleName setVehicleId <scalar>"}, "setVehicleInit": {"version": "1.00", "tags": "[EG] ", "description": "Attach a statement to a unit. The statement is propagated over the network in MP games, it can be executed by invoking processInitCommands.", "example": "_soldier3 setVehicleInit \"this allowFleeing 0\";", "docSyntax": "unitName setVehicleInit statement", "syntax": "<objUnit> setVehicleInit statement"}, "setVehicleLock": {"version": "1.00", "tags": "[AL] [EG] ", "description": "Sets vehicle lock. Possible values:", "example": "_veh1 setVehicleLock \"LOCKED\";", "docSyntax": "vehicleName setVehicleLock lockState", "syntax": "vehicleName setVehicleLock lockState"}, "setVehiclePosition": {"version": "1.00", "tags": "[AG] [EG] ", "description": "Moves the object to a given position (same as createVehicle placement algorithm). Uses either the position that's defined by the position param, or one of the marker positions from the markers array. The object is placed inside a circle with position as its center and placement as its radius. The type of placement could also be controlled with special.", "example": "player setVehiclePosition [[1000,2000], [\"Pos1\",\"Pos2\",\"Pos3\"], 0, \"CAN_COLLIDE\"]; Will place the player at either [1000,2000], or one of the three markers positions.", "docSyntax": "object setVehiclePosition [position, markers, placement, special]", "syntax": "<object> setVehiclePosition [position,markers,placement,special]"}, "setVehicleVarName": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Sets string representation of an object to a custom string. For example it is possible to return \"MyFerrari\" instead of default \"ce06b00# 164274: offroad_01_unarmed_f.p3d\" when querying object as string: hint str _offroad; //MyFerrari When a vehicle is created and named in the editor, the name becomes both the variable containing the vehicle object and the string representation of the vehicle object. vehicleVarName on the other hand is only string representation of the object. So if you want to refer to the actual object by its vehicleVarName, an extra step needed to assign the object to a variable of the same name. For example to see and refer to offroad as myFerrari: _offroad setVehicleVarName \"MyFerrari\"; MyFerrari = _offroad; In multiplayer environment setVehicleVarName has to be executed on every PC if you want the custom name to be known everywhere. If vehicle is created and named in the editor, the vehicle name will be known globally automatically.", "example": "player setVehicleVarName \"aP\"; aP = player;", "docSyntax": "object setVehicleVarName name", "syntax": "<object> setVehicleVarName <string>"}, "setWaypointBehaviour": {"version": "1.00", "tags": "[SE] [EG] ", "description": "Switches the unit behaviour when the waypoint becomes active.", "example": "[_grp, 2] setWaypointBehaviour \"AWARE\";", "docSyntax": "waypoint setWaypointBehaviour mode", "syntax": "waypoint setWaypointBehaviour mode"}, "setWaypointCombatMode": {"version": "1.00", "tags": "", "description": "The group combat mode is switched when the waypoint becomes active.", "example": "[_grp, 2] setWaypointCombatMode \"RED\";", "docSyntax": "waypoint setWaypointCombatMode mode", "syntax": "waypoint setWaypointCombatMode mode"}, "setWaypointDescription": {"version": "1.00", "tags": "", "description": "Sets the description shown in the HUD while the waypoint is active.", "example": "[_grp, 2] setWaypointDescription \"Move here.\";", "docSyntax": "waypoint setWaypointDescription text", "syntax": "waypoint setWaypointDescription <string>"}, "setWaypointFormation": {"version": "1.00", "tags": "[SE] [EG] ", "description": "Switches the group formation when the waypoint becomes active.", "example": "[_grp, 2] setWaypointFormation \"LINE\";", "docSyntax": "waypoint setWaypointFormation formation", "syntax": "waypoint setWaypointFormation formation"}, "setWaypointHousePosition": {"version": "1.00", "tags": "", "description": "For waypoints attached to a house, this defines the target buildingPos index.", "example": "[_grp, 2] setWaypointHousePosition 1;", "docSyntax": "waypoint setWaypointHousePosition pos", "syntax": "waypoint setWaypointHousePosition <array>"}, "setWaypointPosition": {"version": "1.00", "tags": "", "description": "Attempts to move given waypoint to a random position inside a circle with the given center and radius.", "example": "[_grp, 2] setWaypointPosition [position player, 0];", "docSyntax": "waypoint setWaypointPosition [center, radius]", "syntax": "waypoint setWaypointPosition [center,radius]"}, "setWaypointScript": {"version": "1.00", "tags": "", "description": "Attaches a script to a scripted waypoint. In early versions of Arma, command consisted of a script name and additional script arguments and the script had to use SQS-Syntax. The script receives the following arguments in _this variable: [group, position, target] + [the optional passed arguments]. The optional arguments are appended to the end of the arguments array.", "example": "[_grp, 2] setWaypointScript \"find.sqs player\";", "docSyntax": "waypoint setWaypointScript command", "syntax": "waypoint setWaypointScript command"}, "setWaypointSpeed": {"version": "1.00", "tags": "[SE] [EG] ", "description": "Switches the group speed mode when the waypoint becomes active.", "example": "[_grp, 2] setWaypointSpeed \"FULL\";", "docSyntax": "waypoint setWaypointSpeed mode", "syntax": "waypoint setWaypointSpeed mode"}, "setWaypointStatements": {"version": "1.00", "tags": "", "description": "The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed.", "example": "_waypoint setWaypointStatements [\"true\", \"hint 'hello'; hint 'goodbye'\"];", "docSyntax": "waypoint setWaypointStatements [condition, statement]", "syntax": "waypoint setWaypointStatements [condition,statement]"}, "setWaypointTimeout": {"version": "1.00", "tags": "", "description": "Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid).", "example": "[_grp, 2] setWaypointTimeout [5, 10, 6];", "docSyntax": "waypoint setWaypointTimeout [min, mid, max]", "syntax": "waypoint setWaypointTimeout [min,mid,max]"}, "setWaypointType": {"version": "1.00", "tags": "", "description": "Changes the waypoint type. Type can be:", "example": "_myWaypoint setWaypointType \"HOLD\";", "docSyntax": "waypoint setWaypointType type", "syntax": "waypoint setWaypointType type"}, "showWaypoint": {"version": "1.00", "tags": "", "description": "Sets the condition determining if the given waypoint is shown on the map view (for 3D HUD visibility see setWaypointVisible). Possible values are:", "example": "[_grp, 2] showWaypoint \"ALWAYS\";", "docSyntax": "waypoint showWaypoint show", "syntax": "waypoint showWaypoint show"}, "sleep": {"version": "1.00", "tags": "", "description": "Suspends code execution for given time in seconds. The sleep precision is given by a framerate, the delay given is the minimal delay expected. Must be called inside of a context which is interruptible, i.e. a script executed by execVM or spawn.", "example": "[] spawn { sleep 5; hint \"after (at least) 5 seconds...\"; };", "docSyntax": "sleep delay", "syntax": "sleep <scalar>"}, "spawn": {"version": "1.00", "tags": "", "description": "Adds given set of compiled instructions to the scheduler. Exactly when the code will be executed is unknown, it depends on how busy is the engine and how filled up is the scheduler. Therefore spawn does not wait for the supplied code to finish, instead, spawn returns a Script handle to the scheduler task. scriptDone command can be used to check the code completion. Additional arguments are passed to the code in local variable _this. Since Arma 3 v1.55 the script handle also exists inside the code in _thisScript variable. To see what spawned scripts are currently in the scheduler, use diag_activeSQFScripts command.", "example": "_handle = [] spawn {player globalChat \"Hello world!\"};", "docSyntax": "arguments spawn code", "syntax": "arguments spawn <code>", "type": "executionStatement"}, "step": {"version": "1.00", "tags": "", "description": "Optionally can set step. If you want to count down, step must be specified, and set negative. Default value is 1.", "example": "for \"_x\" from 20 to 10 step -2 do {..code..}", "docSyntax": "for step stepSize", "syntax": "for step stepSize"}, "str": {"version": "1.00", "tags": "", "description": "Converts any value into a string by placing \" and \" around the argument. Since Arma 3 v1.63.137891 this command will correctly escape all \" inside a string: // Before the fix: hint str \"string \"\" string\"; // \"string \" string\" <- invalid string call compile str \"string \"\" string\"; // ERROR // After the fix: hint str \"string \"\" string\"; // \"string \"\" string\" <- valid string call compile str \"string \"\" string\"; // OK When used on object, object debug name is returned.", "example": "_s = str (2 + 3); The value of _s is the string \"5\"", "docSyntax": "str value", "syntax": "str <scalar>"}, "supportInfo": {"version": "1.00", "tags": "", "description": "Creates a list of supported operators and type. Each field of array has the format: \"x:name\" Where x can be:", "example": "supportInfo \"b:select*\"; //\u00a0returns [\"b:ARRAY select SCALAR\",\"b:ARRAY select BOOL\",\"b:CONFIG select SCALAR\"]", "docSyntax": "supportInfo mask", "syntax": "supportInfo mask"}, "surfaceIsWater": {"version": "1.00", "tags": "", "description": "Returns whether water is at given position.", "example": "_isWater = surfaceIsWater [1000, 3000];", "docSyntax": "surfaceIsWater position", "syntax": "surfaceIsWater <array>", "returns": "bool"}, "surfaceType": {"version": "1.00", "tags": "", "description": "Returns what surface type is at the given position. For surface texture see surfaceTexture command.", "example": "private _surface = surfaceType [4500, 4500];", "docSyntax": "surfaceType position", "syntax": "surfaceType position"}, "switch": {"version": "1.00", "tags": "", "description": "Creates a switch type that can be used inside a switch-do block.", "example": "private _mySwitch = switch \"Test\"; _mySwitch do { /* Something */ };", "docSyntax": "switch condition", "syntax": "switch condition", "type": "controlStatement"}, "switchableUnits": {"version": "1.00", "tags": "[EL] ", "description": "Returns a list of playable units available for switching to. Command is relative to the client on which it is executed and will only show playable units for the same side as player's group + player himself, unless in singleplayer where playable units from all sides will be accessible via this command.", "example": "_availableUnits = switchableUnits;", "docSyntax": "switchableUnits", "syntax": "switchableUnits"}, "synchronizeWaypoint": {"version": "1.00", "tags": "", "description": "Synchronizes the waypoint with other waypoints. Each waypoint is given as an array [group, index].", "example": "[_group1, 2] synchronizeWaypoint [ [_group2, 3] ];", "docSyntax": "waypoint synchronizeWaypoint [waypoint1, waypoint2, ...]", "syntax": "waypoint synchronizeWaypoint [waypoint1,waypoint2,...]"}, "synchronizeWaypoint trigger": {"version": "1.00", "tags": "", "description": "Synchronizes a trigger with other waypoints. Each waypoint is given as an array [group, index].", "example": "_myTrigger synchronizeWaypoint [ [_group2, 3] ];", "docSyntax": "trigger synchronizeWaypoint [waypoint1, waypoint2, ...]", "syntax": "<objTrigger> synchronizeWaypoint [waypoint1,waypoint2,...]"}, "teamSwitch": {"version": "1.00", "tags": "", "description": "Invoke the Team Switch dialog (force it even when conditions are not met). There has to be at least one playable unit for team switch to work, and for this command to work in MP, respawn type in description.ext should be 5 (SIDE).", "example": "teamSwitch;", "docSyntax": "teamSwitch", "syntax": "teamSwitch"}, "teamSwitchEnabled": {"version": "1.00", "tags": "", "description": "Check if Team Switch is currently enabled. Team Switch is enabled by default.", "example": "_isTeamSwitchEnabled = teamSwitchEnabled;", "docSyntax": "teamSwitchEnabled", "syntax": "teamSwitchEnabled"}, "terminate": {"version": "1.00", "tags": "", "description": "Terminates (aborts) spawned or execVMed script.", "example": "_script = [] execVM \"script.sqf\"; sleep 5; terminate _script;", "docSyntax": "terminate scriptHandle", "syntax": "terminate scriptHandle"}, "text": {"version": "1.00", "tags": "", "description": "Creates a structured text containing the given plain text if argument is String. Use setAttributes to set additional attributes on the text. If the argument is location, returns location's text value (see Alt Syntax).", "example": "_stxt2 = text \"Hello world.\";", "docSyntax": "text string", "syntax": "<string> <string>"}, "throw": {"version": "1.00", "tags": "", "description": "Throws an exception. The exception is processed by first catch block. This command will terminate further execution of the code.", "example": "try {throw \"invalid argument\"} catch {hint str _exception};", "docSyntax": "throw expression", "syntax": "throw expression", "type": "exceptionHandling"}, "to": {"version": "1.00", "tags": "", "description": "Continue sequence of for construct. It sets the end value of the index variable", "example": "for \"_x\" from 10 to 20 do {/* Do something*/}", "docSyntax": "forType to b", "syntax": "forType to b"}, "triggerAttachObject": {"version": "1.00", "tags": "", "description": "Assigns a static object to the trigger. The activation source is changed to \"STATIC\".", "example": "_trigger triggerAttachObject 1234;", "docSyntax": "triggerName triggerAttachObject objectId", "syntax": "triggerName triggerAttachObject <scalar>"}, "triggerAttachVehicle": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Specifies the entity which will activate the selected trigger.", "example": "trigger triggerAttachVehicle [player];", "docSyntax": "triggerName triggerAttachVehicle objects", "syntax": "triggerName triggerAttachVehicle objects"}, "try": {"version": "1.00", "tags": "", "description": "Defines a try-catch structure. This sets up an exception handling block. Any thrown exception in a try block is caught in a catch block. The structured exception block has the following form: try { /* block that can throw exception */ } catch { /* block that processes the exception. Exception is described in the _exception variable */ };", "example": "try {throw \"invalid argument\"} catch {hint str _exception};", "docSyntax": "try code", "syntax": "try <code>", "type": "exceptionHandling"}, "typeName": {"version": "1.00", "tags": "", "description": "Returns the data type of an expression. The type is returned as on of the following all-uppercase strings:", "example": "_msg = \"hello\"; _result = typeName _msg; //_result will be \"STRING\"", "docSyntax": "typeName anything", "syntax": "typeName anything"}, "unassignTeam": {"version": "1.00", "tags": "[AL] ", "description": "Unassigns the unit (in the case of a vehicle its commander unit) from his team. This is equal to unit assignTeam \"MAIN\".", "example": "unassignTeam _soldier2", "docSyntax": "unassignTeam vehicleName", "syntax": "unassignTeam vehicleName"}, "unitPos": {"version": "1.00", "tags": "[AG] ", "description": "Return the unit position rules.", "example": "hint str unitPos _unit;", "docSyntax": "unitPos unit", "syntax": "unitPos <objUnit>"}, "vectorDir": {"version": "1.00", "tags": "[AG] ", "description": "Returns object's normalized direction vector in world space ([x,y,z]).", "example": "_dirVector = vectorDir _unit;", "docSyntax": "vectorDir object", "syntax": "vectorDir <object>"}, "vectorUp": {"version": "1.00", "tags": "[AG] ", "description": "Returns up vector of the given object in format Vector3D.", "example": "_objUpVector = vectorUp myObject;", "docSyntax": "vectorUp object", "syntax": "vectorUp <object>"}, "vehicles": {"version": "1.00", "tags": "[EL] ", "description": "Returns an array of all vehicles available to current client. This command returns both empty and crewed vehicles", "example": "_vehicles = vehicles;", "docSyntax": "vehicles", "syntax": "vehicles"}, "vehicleVarName": {"version": "1.00", "tags": "[AG] [EL] ", "description": "Returns the name of the variable which contains a primary editor reference to this object. This is the variable given in the Insert Unit dialog / name field, in the editor. It can be changed using setVehicleVarName.", "example": "hint vehicleVarName player;", "docSyntax": "vehicleVarName object", "syntax": "vehicleVarName <object>"}, "verifySignature": {"version": "1.00", "tags": "", "description": "Check if file is signed by any key present in game keys folders. Note: On client, it does not check against the keys accepted by server.", "example": "verifySignature \"@MyAddon\\Addons\\SomeAddon.pbo\";", "docSyntax": "Boolean = verifySignature filename", "syntax": "<bool> = verifySignature filename"}, "waitUntil": {"version": "1.00", "tags": "", "description": "Suspends execution of scheduled script until the given condition satisfied. This command will loop and call the code inside {} mostly every frame (depends on complexity of condition and overall engine load) until the code returns true. The execution of the rest of the script therefore will be suspended until waitUntil completes.", "example": "waitUntil { not alive player };", "docSyntax": "waitUntil condition", "syntax": "waitUntil condition"}, "waypointAttachObject": {"version": "1.00", "tags": "", "description": "Attaches a static object via it is numeric ID to the given waypoint.", "example": "[_grp, 2] waypointAttachObject 1234;", "docSyntax": "waypoint waypointAttachObject objectID", "syntax": "waypoint waypointAttachObject <scalar>"}, "waypointAttachVehicle": {"version": "1.00", "tags": "", "description": "Attaches a vehicle Object to the given Waypoint.", "example": "[_grp, 2] waypointAttachVehicle vehicle player;", "docSyntax": "waypoint waypointAttachVehicle vehicleName", "syntax": "waypoint waypointAttachVehicle vehicleName"}, "weaponDirection": {"version": "1.00", "tags": "[AG] ", "description": "Returns the direction that the vehicle weapon is aiming in. For addons the weapon name must be an entry in CfgWeapons.", "example": "_weaponVectorDir = player weaponDirection currentWeapon player;", "docSyntax": "vehicleName weaponDirection weaponName", "syntax": "vehicleName weaponDirection weaponName"}, "wind": {"version": "1.00", "tags": "", "description": "Returns the current wind vector (in m/s) as array [x, y, z].", "example": "_windArray = wind;", "docSyntax": "wind", "syntax": "wind"}, "worldName": {"version": "1.00", "tags": "", "description": "Return the name of the currently loaded world.", "example": "_name = worldName;", "docSyntax": "worldName", "syntax": "worldName"}, "worldToModel": {"version": "1.00", "tags": "", "description": "Converts position from world space to object model space.", "example": "_relPos = myObject worldToModel [0,0,0];", "docSyntax": "model worldToModel position", "syntax": "model worldToModel position"}, "createMarkerLocal": {"version": "1.04", "tags": "[EL] ", "description": "Creates a local marker at the given position. Marker exists only on PC that created it. The marker name has to be unique, if a marker with the given name exists, the command will be ignored. Use deleteMarkerLocal to delete local marker.", "example": "_marker = createMarkerLocal [\"Marker1\", position player];", "docSyntax": "createMarkerLocal [name, position, channel, creator]", "syntax": "createMarkerLocal [<string>,position,channel,creator]"}, "deleteMarkerLocal": {"version": "1.04", "tags": "[EL] ", "description": "Destroys the given marker.", "example": "deleteMarkerLocal \"Marker1\"", "docSyntax": "deleteMarkerLocal markerName", "syntax": "deleteMarkerLocal <string>"}, "markerDir": {"version": "1.04", "tags": "[AG] ", "description": "Get marker direction.", "example": "_mPos = markerDir \"markerOne\"", "docSyntax": "Number = markerDir markerName", "syntax": "<scalar> = markerDir <string>"}, "markerText": {"version": "1.04", "tags": "[AG] ", "description": "Get marker text.", "example": "hint format [\"Marker Text: %1\",markerText \"Marker1\"];", "docSyntax": "String = markerText markerName", "syntax": "<string> = markerText <string>"}, "setMarkerBrushLocal": {"version": "1.04", "tags": "[EL] ", "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.", "example": "\"Marker1\" setMarkerBrushLocal \"DiagGrid\";", "docSyntax": "markerName setMarkerBrushLocal brush", "syntax": "<string> setMarkerBrushLocal brush"}, "setMarkerColorLocal": {"version": "1.04", "tags": "[AG] [EL] ", "description": "Sets marker color for the given marker locally. Marker color names and their corresponding RGBA values for Arma 3 could be found in here: CfgMarkerColors_Arma_3", "example": "\"MarkerOne\" setMarkerColorLocal \"ColorBlack\";", "docSyntax": "markerName setMarkerColorLocal color", "syntax": "<string> setMarkerColorLocal <scalar>"}, "setMarkerDirLocal": {"version": "1.04", "tags": "[EL] ", "description": "Sets the orientation of the marker. Angle is in degrees.", "example": "\"Marker1\" setMarkerDirLocal 90;", "docSyntax": "markerName setMarkerDirLocal angle", "syntax": "<string> setMarkerDirLocal angle"}, "setMarkerPosLocal": {"version": "1.04", "tags": "[EL] ", "description": "Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, PositionWorld of the object is used.", "example": "\"MarkerOne\" setMarkerPosLocal getMarkerPos \"MarkerTwo\";", "docSyntax": "markerName setMarkerPosLocal pos", "syntax": "<string> setMarkerPosLocal <array>"}, "setMarkerShapeLocal": {"version": "1.04", "tags": "[EL] ", "description": "Selects shape (actual type) of the local marker. The shape can be:", "example": "\"Marker1\" setMarkerShapeLocal \"RECTANGLE\";", "docSyntax": "markerName setMarkerShapeLocal shape", "syntax": "<string> setMarkerShapeLocal shape"}, "setMarkerSizeLocal": {"version": "1.04", "tags": "[EL] ", "description": "Set marker size. Size is in format [a-axis, b-axis].", "example": "\"MarkerOne\" setMarkerSizeLocal [100, 200];", "docSyntax": "markerName setMarkerSizeLocal [a-axis, b-axis]", "syntax": "<string> setMarkerSizeLocal [a-axis,b-axis]"}, "setMarkerTextLocal": {"version": "1.04", "tags": "[EL] ", "description": "Sets the text label of an existing marker.", "example": "\"Marker1\" setMarkerTextLocal \"You are here.\";", "docSyntax": "markerName setMarkerTextLocal text", "syntax": "<string> setMarkerTextLocal <string>"}, "setMarkerTypeLocal": {"version": "1.04", "tags": "[EL] ", "description": "Sets marker type locally. Marker type is a class name in cfgMarkers.", "example": "\"MarkerOne\" setMarkerTypeLocal \"Warning\";", "docSyntax": "markerName setMarkerTypeLocal type", "syntax": "<string> setMarkerTypeLocal type"}, "setUnitPosWeak": {"version": "1.04", "tags": "[AL] [EG] ", "description": "Set unit position rules. Mode may be one of:", "example": "_soldier disableAI \"FSM\"; _soldier setUnitPosWeak \"DOWN\";", "docSyntax": "unit setUnitPosWeak mode", "syntax": "<objUnit> setUnitPosWeak mode"}, "addVehicle": {"version": "1.05", "tags": "[AL] ", "description": "Adds a specified vehicle for use by a specified AI led group.", "example": "_grp addVehicle _vehicle", "docSyntax": "groupName addVehicle vehicleName", "syntax": "groupName addVehicle vehicleName"}, "assignedVehicle": {"version": "1.05", "tags": "[AL] ", "description": "Returns the vehicle an unit is assigned to. If no vehicle is assigned objNull is returned.", "example": "_vehicle = assignedVehicle player;", "docSyntax": "assignedVehicle unit", "syntax": "assignedVehicle <objUnit>"}, "assignedVehicleRole": {"version": "1.05", "tags": "[AG] ", "description": "Returns the role a unit is assigned to within its assigned vehicle.", "example": "_RoleArray = assignedVehicleRole player;", "docSyntax": "assignedVehicleRole unitName", "syntax": "assignedVehicleRole <objUnit>"}, "ctrlMapScreenToWorld": {"version": "1.05", "tags": "", "description": "Converts map screen coordinates into world coordinates. Unlike posScreenToWorld, this command returns world position is format [x, y], otherwise it is identical to posScreenToWorld.", "example": "_worldCoord = _control ctrlMapScreenToWorld _ScreenCoord;", "docSyntax": "control ctrlMapScreenToWorld [x, y]", "syntax": "<uiControl> ctrlMapScreenToWorld [x,y]"}, "ctrlMapWorldToScreen": {"version": "1.05", "tags": "", "description": "Converts world coordinates into map screen coordinates. This command is identical to posWorldToScreen.", "example": "_screenCoord = _control ctrlMapWorldToScreen _worldCoord;", "docSyntax": "control ctrlMapWorldToScreen position", "syntax": "<uiControl> ctrlMapWorldToScreen position"}, "cutFadeOut": {"version": "1.05", "tags": "", "description": "Terminates the effect in the given layer by fading it out according to the given duration. If named layer is used and it doesn't exist, it will be allocated. For title layer see titleFadeOut.", "example": "0 cutFadeOut 2;", "docSyntax": "layer cutFadeOut duration", "syntax": "layer cutFadeOut duration"}, "difficultyEnabled": {"version": "1.05", "tags": "", "description": "\u26a0", "example": "hint str (difficultyEnabled \"armor\");", "docSyntax": "difficultyEnabled flagName", "syntax": "difficultyEnabled flagName"}, "distributionRegion": {"version": "1.05", "tags": "", "description": "Returns the numerical index for the distribution region of this copy of Armed Assault.", "example": "if (distributionRegion == 1) then { hint \"miles\"; } else { hint \"kilometres\"; };", "docSyntax": "distributionRegion", "syntax": "distributionRegion"}, "setCurrentWaypoint": {"version": "1.05", "tags": "[AL] ", "description": "Sets the currently active waypoint for a group.", "example": "_grp setCurrentWaypoint [_grp, 1];", "docSyntax": "groupName setCurrentWaypoint waypoint", "syntax": "groupName setCurrentWaypoint waypoint"}, "titleFadeOut": {"version": "1.05", "tags": "", "description": "Terminate the title effect and set duration of the fade out phase to the given time. Same as cutFadeOut but for the title layer.", "example": "titleText [\"Hi\", \"plain\"]; titleFadeOut 2;", "docSyntax": "titleFadeOut duration", "syntax": "titleFadeOut duration"}, "waypoints": {"version": "1.05", "tags": "[AG] ", "description": "Returns an array of waypoints for the specified unit/group.", "example": "waypoints player;", "docSyntax": "waypoints groupName", "syntax": "waypoints groupName"}, "isServer": {"version": "1.06", "tags": "", "description": "Returns true if the machine (executing the command) is the server in a multiplayer game or is running single player. It will return true for both dedicated and player-hosted server.", "example": "if (!isServer) exitWith {};", "docSyntax": "isServer", "syntax": "isServer"}, "joinSilent": {"version": "1.06", "tags": "[AG] [EG] ", "description": "Join all units in the array to given group silently (without radio message). To have a group member leave a group, join him with the grpNull group (e.g. [guy1] joinSilent grpNull), but beware, as brand new group is created for the leaving unit and this could result in the number of groups in a mission growing out of control.", "example": "[_unitOne, _unitTwo] joinSilent (group player);", "docSyntax": "unitArray joinSilent group", "syntax": "unitArray joinSilent <objGroup>"}, "nearTargets": {"version": "1.07", "tags": "", "description": "Returns a list of targets within the defined range. \"Targets\" are not restricted to enemy units.", "example": "player nearTargets 100;could return something like this:", "docSyntax": "unit nearTargets range", "syntax": "<objUnit> nearTargets range"}, "airportSide": {"version": "1.08", "tags": "", "description": "Gets the side of an airport, set by setAirportSide. Default side is sideUnknown.", "example": "private _airportSide = airportSide 0;", "docSyntax": "airportSide id", "syntax": "airportSide <scalar>"}, "assignToAirport": {"version": "1.08", "tags": "", "description": "\u26a0", "example": "plane1 assignToAirport 0", "docSyntax": "plane assignToAirport id", "syntax": "plane assignToAirport <scalar>"}, "attachedObject": {"version": "1.08", "tags": "", "description": "Returns the object a location is attached to. If the location is unattached, then objNull is returned.", "example": "_locAttachedObj = attachedObject myLocation;", "docSyntax": "attachedObject location", "syntax": "attachedObject location"}, "attachObject": {"version": "1.08", "tags": "", "description": "Attaches a location to the specified object. To detach a location, attach it to objNull.", "example": "myLocation attachObject player;", "docSyntax": "location attachObject object", "syntax": "location attachObject <object>"}, "clearVehicleInit": {"version": "1.08", "tags": "", "description": "Clears the object's init.", "example": "_tank1 setVehicleInit \"hint 'hi all'\"; processInitCommands; clearVehicleInit tank1", "docSyntax": "clearVehicleInit objectName", "syntax": "clearVehicleInit objectName"}, "createLocation": {"version": "1.08", "tags": "[EL] ", "description": "Creates a location of the specified class and dimensions at the specified position. Classes are defined in CfgLocationTypes. For possible location types see Location Types. For the actual name text of the location, use text and setText", "example": "_location = createLocation [\"NameVillage\" , [4035,2151,10], 100, 100];", "docSyntax": "createLocation [className, position, sizeX, sizeY]", "syntax": "createLocation [className,position,sizeX,sizeY]"}, "createMissionDisplay": {"version": "1.08", "tags": "", "description": "Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument \"root\".", "example": "_ChildDisplay = _Rootdisplay createMissionDisplay \"Tutorial\";", "docSyntax": "Display = display createMissionDisplay missionRootDirectoryString", "syntax": "<uiDisplay> = <uiDisplay> createMissionDisplay missionRootDirectoryString"}, "deleteLocation": {"version": "1.08", "tags": "", "description": "Deletes scripted location.", "example": "deleteLocation myLocation;", "docSyntax": "deleteLocation location", "syntax": "deleteLocation location"}, "drawLocation": {"version": "1.08", "tags": "", "description": "Unknown effect.", "docSyntax": "control drawLocation location", "syntax": "<uiControl> drawLocation location"}, "importance": {"version": "1.08", "tags": "", "description": "Returns a location's importance value.", "example": "_locationImportance = importance myLocation", "docSyntax": "importance location", "syntax": "importance location"}, "landAt": {"version": "1.08", "tags": "[AL] [EG] ", "description": "Order an AI airplane to land at a given airport. Id is the number to identify which map airport you want the airplane to land at. See Arma: Airport IDs for more information.", "example": "_plane1 landAt 1;", "docSyntax": "plane landAt id", "syntax": "plane landAt <scalar>"}, "lbSort": {"version": "1.08", "tags": "", "description": "Sorts listbox entries alphabetically ascending by their lbText.", "example": "lbSort _myControl;", "docSyntax": "lbSort control", "syntax": "lbSort <uiControl>"}, "lbSortByValue": {"version": "1.08", "tags": "", "description": "Sorts the ListBox entries by lbValue. The entries are sorted in ascending order. Also note that this command will mix up the entries randomly if multiple entries have the same value.", "example": "lbSortByValue _control;", "docSyntax": "lbSortByValue control", "syntax": "lbSortByValue <uiControl>"}, "locationPosition": {"version": "1.08", "tags": "", "description": "Returns the position of a location. If the location is attached to an object, that object's position is returned.", "example": "_locationPos = locationPosition myLocation;", "docSyntax": "locationPosition location", "syntax": "locationPosition location"}, "nearestLocation": {"version": "1.08", "tags": "", "description": "Return the closest location of specified class to a given position.", "example": "_nearestCity = nearestLocation [getPos player, \"nameCity\"];", "docSyntax": "nearestLocation [position, locationClass]", "syntax": "nearestLocation [position,locationClass]"}, "nearestLocations": {"version": "1.08", "tags": "", "description": "Returns an array of locations of chosen type(s) within the given radius of the given position, sorted from nearest to farthest.", "example": "_nearbyLocations = nearestLocations [position player, [\"RockArea\", \"VegetationFir\"], 100];", "docSyntax": "nearestLocations [position, [locationType1, locationType2, ...], radius, sortPosition]", "syntax": "nearestLocations [position,[locationType1,locationType2,...],radius,sortPosition]"}, "rectangular": {"version": "1.08", "tags": "", "description": "Checks if a location is rectangular (returns true) or elliptical (returns false).", "example": "_isRect = rectangular myLocation;", "docSyntax": "rectangular location", "syntax": "rectangular location"}, "setAirportSide": {"version": "1.08", "tags": "", "description": "Set owning side of the airport. ID is the number to identify which airport on the island you want to check.", "example": "0 setAirportSide east", "docSyntax": "id setAirportSide side", "syntax": "<scalar> setAirportSide <objSide>"}, "setDirection": {"version": "1.08", "tags": "", "description": "Set's the orientation of a location. It's area and map icon (if it is type uses an icon) will be rotated to this orientation.", "example": "location1 = createLocation [\"VegetationPalm\", getPos player, 200, 200]; location1 setText \"Benargee's Palm Tree\"; location1 setDirection 45;", "docSyntax": "location setDirection direction", "syntax": "location setDirection direction"}, "setImportance": {"version": "1.08", "tags": "", "description": "Sets the importance value of location.", "example": "myLocation setImportance 2;", "docSyntax": "location setImportance value", "syntax": "location setImportance <scalar>"}, "setName": {"version": "1.08", "tags": "[AG] [EL] ", "description": "Sets the name of a location or a person. In Arma 3 this can be used to set name of a person but only in single player.", "example": "myLocation setName \"My Location Name\";", "docSyntax": "object setName name", "syntax": "<object> setName <string>"}, "setPosition": {"version": "1.08", "tags": "", "description": "Sets the position of a location.", "example": "myLocation setPosition [1000,5320,10]", "docSyntax": "location setPosition pos", "syntax": "location setPosition <array>"}, "setRectangular": {"version": "1.08", "tags": "", "description": "Set the shape of a location to be either rectangular or elliptical. Locations default shape is elliptical.", "example": "myLocation setRectangular true;", "docSyntax": "location setRectangular set", "syntax": "location setRectangular set"}, "setSide": {"version": "1.08", "tags": "", "description": "Sets a location's side. The default side is Unknown.", "example": "myLocation setSide resistance", "docSyntax": "location setSide side", "syntax": "location setSide <objSide>"}, "setSize": {"version": "1.08", "tags": "", "description": "Sets the size (radius) of a location. The width is 2 * x, the height is 2 * y.", "example": "myLocation setSize [10,30]", "docSyntax": "location setSize size", "syntax": "location setSize size"}, "setText": {"version": "1.08", "tags": "", "description": "Sets the text associated with a location. This text will be displayed on the game map at the location's position.", "example": "myLocation setText \"Rahmadi Village\"", "docSyntax": "location setText text", "syntax": "location setText <string>"}, "setType": {"version": "1.08", "tags": "", "description": "Changes a location to the specified class. Location classes are defined in CfgLocationTypes.", "example": "myLocation setType \"RockArea\"", "docSyntax": "location setType name", "syntax": "location setType <string>"}, "size": {"version": "1.08", "tags": "", "description": "Returns a location's size.", "example": "_locSize = size myLocation", "docSyntax": "size location", "syntax": "size location"}, "sizeOf": {"version": "1.08", "tags": "", "description": "Returns the diameter of bounding sphere of the object of given classname in meters. Size returned is usually bigger than the biggest size of the object along any of the axes. For example if object is 10 x 4 x 5 the sizeOf value returned expected to be around 10. If you need to estimate the size of the object more precisely, use boundingBox or boundingBoxReal.", "example": "_dimension = sizeOf \"M1Abrams\"; //returns 10.7833", "docSyntax": "sizeOf classname", "syntax": "sizeOf classname"}, "type": {"version": "1.08", "tags": "", "description": "Returns a string of a Location's class name or Task's type.", "example": "_locationType = type myLocation;", "docSyntax": "type location", "syntax": "type location"}, "addPublicVariableEventHandler": {"version": "1.09", "tags": "[AG] [EL] ", "description": "This command is deprecated since the introduction of remoteExec and remoteExecCall.", "example": "\"publicThis\" addPublicVariableEventHandler { hint format [ \"%1 has been updated to: %2\", _this select 0, _this select 1 ] };", "docSyntax": "varName addPublicVariableEventHandler code", "syntax": "varName addPublicVariableEventHandler <code>"}, "setVectorDirAndUp": {"version": "1.09", "tags": "[AL] [EG] ", "description": "Sets orientation of an object.", "example": "//\u00a0set exact yaw, pitch, and roll _y = 45; _p = -80; _r = 0; BRICK setVectorDirAndUp [ [sin _y * cos _p, cos _y * cos _p, sin _p], [[sin _r, -sin _p, cos _r * cos _p], -_y] call BIS_fnc_rotateVector2D ];", "docSyntax": "vehicle setVectorDirAndUp [[x1, y1, z1], [x2, y2, z2]]", "syntax": "<objVehicle> setVectorDirAndUp [[x1,y1,z1],[x2,y2,z2]]"}, "toArray": {"version": "1.09", "tags": "", "description": "Converts the supplied String into an Array of Numbers.", "example": "hint format[\"%1\",toArray(\"Aa\u0152\")] returns \"[65,97,338]\"", "docSyntax": "toArray string", "syntax": "toArray <string>"}, "toLower": {"version": "1.09", "tags": "", "description": "Converts the supplied Unicode string to all lowercase characters. If the string doesn't have characters with codes > 255, you could benefit from faster conversion using toLowerANSI", "example": "hint toLower \"AaBb1\"; // returns \"aabb1\"", "docSyntax": "toLower string", "syntax": "toLower <string>"}, "toString": {"version": "1.09", "tags": "", "description": "Converts the supplied Array of Numbers into a String.", "example": "hint toString [65,97,338]; returns \"Aa\u0152\"", "docSyntax": "toString array", "syntax": "toString <array>"}, "toUpper": {"version": "1.09", "tags": "", "description": "Converts the supplied Unicode string to all uppercase characters. If the string doesn't have characters with codes > 255, you could benefit from faster conversion using toUpperANSI", "example": "hint toUpper \"AaBb1\"; // returns \"AABB1\"", "docSyntax": "toUpper string", "syntax": "toUpper <string>"}, "removeClothing": {"version": "1.11", "tags": "", "description": "Removes specified named clothes selections from unit.", "example": "_unit removeClothing [\"shirt\"]", "docSyntax": "unit removeClothing item", "syntax": "<objUnit> removeClothing <objItem>"}}