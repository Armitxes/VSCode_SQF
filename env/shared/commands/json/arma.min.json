{"a_:_b": {"version": "1.00", "tags": "", "description": "See switch", "example": "? (_var == _test) : hint \"_var is equal to _test!\";", "docSyntax": "a : b", "syntax": "a : b"}, "addSwitchableUnit": {"version": "1.00", "tags": "", "description": "Adds an unit to the list of units available for Team Switch. Units marked as playable in editor are automatically switchable. This command allows to add non-playable unit into array of switchableUnits and make them available for teamSwitch. Singleplayer only!", "example": "addSwitchableUnit bob;", "docSyntax": "addSwitchableUnit unit", "syntax": "addSwitchableUnit <objUnit>"}, "animationState": {"version": "1.00", "tags": "", "description": "Returns the name of a unit's current primary animation. Seems to be forced to lower case in Arma 3.", "example": "_state = animationState player;", "docSyntax": "animationState unitName", "syntax": "animationState <objUnit>"}, "assert": {"version": "1.00", "tags": "", "description": "Tests a condition and if the condition is false, displays error on screen (if -showscripterrors enabled) and logs error into .rpt file. It does not interrupt the script execution. If script was pre-processed with preprocessFileLineNumbers, it will also show/log the error line number and the file name.", "example": "assert (1 > 2);", "docSyntax": "assert condition", "syntax": "assert condition"}, "boundingBox": {"version": "1.00", "tags": "", "description": "Returns a bounding box of given object in model coordinate space, adjusted according to destruction/animation of an object. This command is rather generous on the size estimation, for more precise coordinates use boundingBoxReal.", "example": "private _box = boundingBox _abrams;", "docSyntax": "boundingBox object", "syntax": "boundingBox <object>"}, "breakOut": {"version": "1.00", "tags": "", "description": "Breaks out of the scope with given name.", "example": "scopeName \"main\"; while {true} do { scopeName \"loop1\"; while {true} do { scopeName \"loop2\"; if (condition1) then {breakTo \"main\"}; //\u00a0Breaks all scopes and return to \"main\" if (condition2) then {breakOut \"loop2\"}; //\u00a0Breaks scope named \"loop2\" sleep 1; }; sleep 1; };", "docSyntax": "breakOut name", "syntax": "breakOut <string>"}, "breakTo": {"version": "1.00", "tags": "", "description": "Breaks block to scope named name. Nil is returned. Scope name can be assigned using scopeName command.", "example": "scopeName \"main\"; while { true } do { scopeName \"loop1\"; while { true } do { scopeName \"loop2\"; if (condition1) then { breakTo \"main\" }; //\u00a0breaks all scopes and return to \"main\" if (condition2) then { breakOut \"loop2\" }; //\u00a0breaks scope named \"loop2\" sleep 1; }; sleep 1; };", "docSyntax": "breakTo name", "syntax": "breakTo <string>"}, "camCommitPrepared": {"version": "1.00", "tags": "", "description": "Smoothly conducts the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. This command is for use with camPrepareXXX commands. For the normal cam command use camCommit.", "example": "//\u00a0Create a camera object _cam = \"camera\" camCreate [5600,4800,10]; _cam camPrepareTarget player; _cam cameraEffect [\"internal\", \"BACK\"]; _cam camCommitPrepared 0; //\u00a0Smoothly move the camera to its new position in 6 seconds _cam camPreparePos [5680,4720,20]; _cam camCommitPrepared 6; waitUntil {camCommitted _cam}; //\u00a0Proceed", "docSyntax": "camera camCommitPrepared time", "syntax": "<objCamera> camCommitPrepared <scalar>"}, "cameraInterest": {"version": "1.00", "tags": "", "description": "Return camera interest for given entity, as set by setCameraInterest, or as autodetected.", "example": "camInterest = cameraInterest myUnit;", "docSyntax": "cameraInterest entity", "syntax": "cameraInterest entity"}, "cameraOn": {"version": "1.00", "tags": "", "description": "Returns the vehicle to which the camera is attached.", "example": "_object = cameraOn;", "docSyntax": "cameraOn", "syntax": "cameraOn"}, "campaignConfigFile": {"version": "1.00", "tags": "", "description": "Returns root of campaign description.ext entries hierarchy.", "example": "_config = campaignConfigFile;", "docSyntax": "campaignConfigFile", "syntax": "campaignConfigFile"}, "camPreload": {"version": "1.00", "tags": "", "description": "Preloads the scene for the prepared camera with given timeout after which preloading is aborted. Max timeout is 30 seconds. Timeout of 0 means max timeout of 30 seconds as well.", "example": "_camera camPreload 5", "docSyntax": "camera camPreload timeout", "syntax": "<objCamera> camPreload timeout"}, "camPreloaded": {"version": "1.00", "tags": "", "description": "Checks whether the camera has finished preloading.", "example": "?(camPreloaded _camera)\u00a0: exit", "docSyntax": "camPreloaded camera", "syntax": "camPreloaded <objCamera>"}, "camPrepareBank": {"version": "1.00", "tags": "", "description": "Prepares the camera bank angle.", "example": "_camera camPrepareBank -0.1", "docSyntax": "camera camPrepareBank bank", "syntax": "<objCamera> camPrepareBank bank"}, "camPrepareDir": {"version": "1.00", "tags": "", "description": "Prepares the camera heading.", "example": "_camera camPrepareDir 150", "docSyntax": "camera camPrepareDir direction", "syntax": "<objCamera> camPrepareDir direction"}, "camPrepareDive": {"version": "1.00", "tags": "", "description": "Prepares the camera dive angle.", "example": "_camera camPrepareDive -0.1", "docSyntax": "camera camPrepareDive dive", "syntax": "<objCamera> camPrepareDive dive"}, "camPrepareFocus": {"version": "1.00", "tags": "", "description": "focusRange is in format [distance,blur]. Prepares the camera focus blur. [-1,1] will reset default values (auto focusing), [-1,-1] will disable postprocessing (all is focused). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareFocus [50, 1]", "docSyntax": "camera camPrepareFocus focusRange", "syntax": "<objCamera> camPrepareFocus focusRange"}, "camPrepareFov": {"version": "1.00", "tags": "", "description": "Prepares the camera field of view (zoom). The default zoom level is 0.75, 0.01 is the nearest and 2 the furthest zoom value. The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareFov 0.1", "docSyntax": "camera camPrepareFov fieldOfView", "syntax": "<objCamera> camPrepareFov fieldOfView"}, "camPrepareFovRange": {"version": "1.00", "tags": "", "description": "Prepares the camera field of view range for auto zooming.", "example": "_camera camPrepareFovRange [0.1, 0.5]", "docSyntax": "camera camPrepareFovRange fovRange", "syntax": "<objCamera> camPrepareFovRange fovRange"}, "camPreparePos": {"version": "1.00", "tags": "", "description": "Prepares the camera position. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPreparePos getPos player", "docSyntax": "camera camPreparePos position", "syntax": "<objCamera> camPreparePos position"}, "camPrepareRelPos": {"version": "1.00", "tags": "", "description": "Prepares the camera position relative to the current position of the currect target (see camPrepareTarget). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareRelPos [10,5,-2]", "docSyntax": "camera camPrepareRelPos position", "syntax": "<objCamera> camPrepareRelPos position"}, "camPrepareTarget": {"version": "1.00", "tags": "", "description": "Prepares the camera target to a position or to a target. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareTarget getPos player;", "docSyntax": "camera camPrepareTarget position", "syntax": "<objCamera> camPrepareTarget position"}, "case": {"version": "1.00", "tags": "", "description": "This command is used inside a switch construct.", "example": "switch (_condition) do { case 1: { hint \"1\" }; case 2: { hint \"2\" }; default { hint \"default\" }; };", "docSyntax": "case b", "syntax": "case b"}, "catch": {"version": "1.00", "tags": "", "description": "Processes code when an exception is thrown in a try block. The exception caught can be found in the _exception variable.", "example": "try {throw \"invalid argument\"} catch {hint str _exception};", "docSyntax": "tryBlock catch code", "syntax": "tryBlock catch <code>"}, "ceil": {"version": "1.00", "tags": "", "description": "The ceil value of x.", "example": "ceil 5.25; //\u00a0Result is 6", "docSyntax": "ceil x", "syntax": "ceil x"}, "closeDisplay": {"version": "1.00", "tags": "", "description": "Closes given display with exit code. It does not instantly close the display but does it on next simulation cycle. Most common exit codes are:", "example": "_display closeDisplay 1;", "docSyntax": "display closeDisplay exitCode", "syntax": "<uiDisplay> closeDisplay exitCode"}, "commandFSM": {"version": "1.00", "tags": "", "description": "Orders a unit to process command defined by FSM file (via the radio).", "example": "_soldierOne commandFSM [\"move.fsm\", position player, player]", "docSyntax": "unitName commandFSM [fsm name, position, target]", "syntax": "<objUnit> commandFSM [fsm <string>,position,<object>]"}, "compile": {"version": "1.00", "tags": "", "description": "Compiles String expression into Code.", "example": "_string = \"a = a + 1\"; _code = compile _string; call _code;", "docSyntax": "compile expression", "syntax": "compile expression"}, "configFile": {"version": "1.00", "tags": "", "description": "Return root of config entries hierarchy.", "example": "_isMyClassActive = isClass (configFile >> \"CfgPatches\" >> \"MyClass\");", "docSyntax": "configFile", "syntax": "configFile"}, "configName": {"version": "1.00", "tags": "", "description": "Returns name of config entry.", "example": "_name = configName (configFile >> \"CfgVehicles\"); //\u00a0result is \"CfgVehicles\"", "docSyntax": "configName config", "syntax": "configName config"}, "config_/_name": {"version": "1.00", "tags": "", "description": "Returns config entry with given name (alias for config >> name, slightly slower but with higher precedence).", "example": "configFile / \"CfgVehicles\";", "docSyntax": "config / name", "syntax": "config / <string>"}, "config_greater_greater_name": {"version": "1.00", "tags": "", "description": "Returns config entry with given name (alias of config / name, slightly faster but with lower precedence)", "example": "configFile >> \"CfgVehicles\";", "docSyntax": "config >> name", "syntax": "config >> <string>"}, "controlNull": {"version": "1.00", "tags": "", "description": "A non-existing Control. To compare non-existent objects use isNull or isEqualTo (see examples).", "example": "if (_myCtrl isEqualTo controllNull) then { hint \"_myCtrl is null!\"; };", "docSyntax": "controlNull", "syntax": "controlNull"}, "createDisplay": {"version": "1.00", "tags": "", "description": "Creates child display of given display and loads from \"resourceName\". The notable difference between createDisplay and createDialog is that with createDisplay the player would be able to move around while the display is shown.", "example": "findDisplay 46 createDisplay \"RscCredits\";", "docSyntax": "parent createDisplay resourceName", "syntax": "parent createDisplay resourceName"}, "createMarker": {"version": "1.00", "tags": "", "description": "Creates a new map marker at the given position. The marker will be created for every connected player as well as all JIP players. The marker name has to be unique; the command will be ignored if a marker with the given name already exists.", "example": "_marker1 = createMarker [\"Marker1\", position player];", "docSyntax": "createMarker [name, position, channel, creator]", "syntax": "createMarker [<string>,position,channel,creator]"}, "createTarget": {"version": "1.00", "tags": "", "description": "Create a target.", "example": "_target = createTarget [\"targetType\", [0,0,0], 1, 1]", "docSyntax": "obj createTarget [type, position, typeAccuracy, posAccuracy]", "syntax": "<object> createTarget [type,position,typeAccuracy,posAccuracy]"}, "createVehicleLocal": {"version": "1.00", "tags": "", "description": "Creates an object of the given type. Created object is not transferred through network in MP games. netId of such vehicle in multiplayer will be \"0:0\". To disable local vehicle creation, use CfgDisabledCommands to blacklist this command. Alternatively, you can use createSimpleObject with local option enabled where applicable.", "example": "_lightsource = \"#lightpoint\" createVehicleLocal _pos;", "docSyntax": "type createVehicleLocal position", "syntax": "type createVehicleLocal position"}, "ctrlActivate": {"version": "1.00", "tags": "", "description": "Launch actions attached to given (button based) control.", "example": "ctrlActivate _control", "docSyntax": "ctrlActivate controlName", "syntax": "ctrlActivate controlName"}, "ctrlCommit": {"version": "1.00", "tags": "", "description": "Commits control animation to last specified duration.", "example": "_control ctrlCommit 2; // make animation last approx. 2 seconds", "docSyntax": "control ctrlCommit time", "syntax": "<uiControl> ctrlCommit <scalar>"}, "ctrlCommitted": {"version": "1.00", "tags": "", "description": "Check if the control animation is finished.", "example": "_done = ctrlCommitted _control", "docSyntax": "ctrlCommitted controlName", "syntax": "ctrlCommitted controlName"}, "ctrlFade": {"version": "1.00", "tags": "", "description": "Returns the current fade factor of control.", "example": "_scale = ctrlFade _control", "docSyntax": "ctrlFade controlName", "syntax": "ctrlFade controlName"}, "ctrlMapAnimAdd": {"version": "1.00", "tags": "", "description": "Adds the next frame to the map animation.", "example": "_map ctrlMapAnimAdd [1, 0.1, getMarkerPos \"anim1\"]; ctrlMapAnimCommit _map;", "docSyntax": "map ctrlMapAnimAdd [time, zoom, position]", "syntax": "<objMap> ctrlMapAnimAdd [<scalar>,<scalar>,position]"}, "ctrlMapAnimClear": {"version": "1.00", "tags": "", "description": "Clears the map animation.", "example": "ctrlMapAnimClear _ctrlMap;", "docSyntax": "ctrlMapAnimClear controlName", "syntax": "ctrlMapAnimClear controlName"}, "ctrlMapAnimCommit": {"version": "1.00", "tags": "", "description": "Plays the map animation.", "example": "Center map on player: _ctrl ctrlMapAnimAdd [0, 0.05, player]; ctrlMapAnimCommit _ctrl;", "docSyntax": "ctrlMapAnimCommit mapControl", "syntax": "ctrlMapAnimCommit mapControl"}, "ctrlMapAnimDone": {"version": "1.00", "tags": "", "description": "Checks whether the map animation has finished.", "example": "_isDone = ctrlMapAnimDone _ctrlMap;", "docSyntax": "ctrlMapAnimDone controlName", "syntax": "ctrlMapAnimDone controlName"}, "ctrlMapScale": {"version": "1.00", "tags": "", "description": "Returns the current scale of given map control.", "example": "_control = (findDisplay 12) displayCtrl 51; //Arma 3 _scale = ctrlMapScale _control; //returns number from 1 to 0.001", "docSyntax": "ctrlMapScale ctrl", "syntax": "ctrlMapScale <uiControl>"}, "ctrlParent": {"version": "1.00", "tags": "", "description": "Returns the parent Display of the given control. For parent Controls group see ctrlParentControlsGroup.", "example": "_display = ctrlParent _control", "docSyntax": "ctrlParent control", "syntax": "ctrlParent <uiControl>"}, "ctrlPosition": {"version": "1.00", "tags": "", "description": "Returns the current position of 2D control as [x, y, w, h] array. For 3D control it returns relative [x, y, z]. If the control is part of a CT_CONTROLS_GROUP, the returned position will be relative to the group's position.", "example": "_pos = ctrlPosition _control;", "docSyntax": "ctrlPosition controlName", "syntax": "ctrlPosition controlName"}, "ctrlScale": {"version": "1.00", "tags": "", "description": "Returns the current scale of the control.", "example": "_scale = ctrlScale _control;", "docSyntax": "ctrlScale control", "syntax": "ctrlScale <uiControl>"}, "ctrlSetActiveColor": {"version": "1.00", "tags": "", "description": "Sets text color of given control when control is selected.", "example": "_control ctrlSetActiveColor [1, 0, 0, 1]", "docSyntax": "control ctrlSetActiveColor color", "syntax": "<uiControl> ctrlSetActiveColor <scalar>"}, "ctrlSetBackgroundColor": {"version": "1.00", "tags": "", "description": "Sets background color of given control. Only affects:", "example": "_control ctrlSetBackgroundColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetBackgroundColor color", "syntax": "<uiControl> ctrlSetBackgroundColor <scalar>"}, "ctrlSetEventHandler": {"version": "1.00", "tags": "", "description": "\ud83d\udd56", "example": "_control ctrlSetEventHandler [\"KeyDown\", \"\"];", "docSyntax": "controlName ctrlSetEventHandler [handlerName, function]", "syntax": "controlName ctrlSetEventHandler [handlerName,function]"}, "ctrlSetFade": {"version": "1.00", "tags": "", "description": "Sets wanted transparency for control animation. Requires ctrlCommit to commit changes. To hide or show a control instantly, use ctrlShow.", "example": "_control ctrlSetFade 1; _control ctrlCommit 5;", "docSyntax": "controlName ctrlSetFade fade", "syntax": "controlName ctrlSetFade fade"}, "ctrlSetFocus": {"version": "1.00", "tags": "", "description": "Sets the input focus on given control.", "example": "ctrlSetFocus _control;", "docSyntax": "ctrlSetFocus control", "syntax": "ctrlSetFocus <uiControl>"}, "ctrlSetFont": {"version": "1.00", "tags": "", "description": "Sets the font for given control (see available fonts)", "example": "_control ctrlSetFont \"TahomaB\"", "docSyntax": "control ctrlSetFont fontName", "syntax": "<uiControl> ctrlSetFont fontName"}, "ctrlSetFontH1": {"version": "1.00", "tags": "", "description": "Sets H1 font of given HTML control.", "example": "_control ctrlSetFontH1 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH1 fontName", "syntax": "controlName ctrlSetFontH1 fontName"}, "ctrlSetFontH1B": {"version": "1.00", "tags": "", "description": "Sets H1 bold font of given HTML control.", "example": "_control ctrlSetFontH1B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH1B fontName", "syntax": "controlName ctrlSetFontH1B fontName"}, "ctrlSetFontH2": {"version": "1.00", "tags": "", "description": "Sets H2 font of given HTML control", "example": "_control ctrlSetFontH2 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH2 fontName", "syntax": "controlName ctrlSetFontH2 fontName"}, "ctrlSetFontH2B": {"version": "1.00", "tags": "", "description": "Sets H2 bold font of given HTML control.", "example": "_control ctrlSetFontH2B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH2B fontName", "syntax": "controlName ctrlSetFontH2B fontName"}, "ctrlSetFontH3": {"version": "1.00", "tags": "", "description": "Sets H3 font of given HTML control.", "example": "_control ctrlSetFontH3 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH3 fontName", "syntax": "controlName ctrlSetFontH3 fontName"}, "ctrlSetFontH3B": {"version": "1.00", "tags": "", "description": "Sets H3 bold font of given HTML control.", "example": "_control ctrlSetFontH3B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH3B fontName", "syntax": "controlName ctrlSetFontH3B fontName"}, "ctrlSetFontH4": {"version": "1.00", "tags": "", "description": "Sets H4 font of given HTML control.", "example": "_control ctrlSetFontH4 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH4 fontName", "syntax": "controlName ctrlSetFontH4 fontName"}, "ctrlSetFontH4B": {"version": "1.00", "tags": "", "description": "Sets H4 bold font of given HTML control.", "example": "_control ctrlSetFontH4B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH4B fontName", "syntax": "controlName ctrlSetFontH4B fontName"}, "ctrlSetFontH5": {"version": "1.00", "tags": "", "description": "Sets H5 font of given HTML control.", "example": "_control ctrlSetFontH5 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH5 fontName", "syntax": "controlName ctrlSetFontH5 fontName"}, "ctrlSetFontH5B": {"version": "1.00", "tags": "", "description": "Sets H5 bold font of given HTML control.", "example": "_control ctrlSetFontH5B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH5B fontName", "syntax": "controlName ctrlSetFontH5B fontName"}, "ctrlSetFontH6": {"version": "1.00", "tags": "", "description": "Sets H6 font of given HTML control.", "example": "_control ctrlSetFontH6 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH6 fontName", "syntax": "controlName ctrlSetFontH6 fontName"}, "ctrlSetFontH6B": {"version": "1.00", "tags": "", "description": "Sets H6 bold font of given HTML control.", "example": "_control ctrlSetFontH6B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH6B fontName", "syntax": "controlName ctrlSetFontH6B fontName"}, "ctrlSetFontHeight": {"version": "1.00", "tags": "", "description": "Sets the sizeEx property for most controls as follows:", "example": "_control ctrlSetFontHeight 0.05;", "docSyntax": "control ctrlSetFontHeight size", "syntax": "<uiControl> ctrlSetFontHeight size"}, "ctrlSetFontHeightH1": {"version": "1.00", "tags": "", "description": "Sets H1 font size of given HTML control.", "example": "_control ctrlSetFontHeightH1 0.05", "docSyntax": "controlName ctrlSetFontHeightH1 height", "syntax": "controlName ctrlSetFontHeightH1 height"}, "ctrlSetFontHeightH2": {"version": "1.00", "tags": "", "description": "Sets H2 font size of given HTML control.", "example": "_control ctrlSetFontHeightH2 0.05", "docSyntax": "controlName ctrlSetFontHeightH2 height", "syntax": "controlName ctrlSetFontHeightH2 height"}, "ctrlSetFontHeightH3": {"version": "1.00", "tags": "", "description": "Sets H3 font size of given HTML control.", "example": "_control ctrlSetFontHeightH3 0.05", "docSyntax": "controlName ctrlSetFontHeightH3 height", "syntax": "controlName ctrlSetFontHeightH3 height"}, "ctrlSetFontHeightH4": {"version": "1.00", "tags": "", "description": "Sets H4 font size of given HTML control.", "example": "_control ctrlSetFontHeightH4 0.05", "docSyntax": "controlName ctrlSetFontHeightH4 height", "syntax": "controlName ctrlSetFontHeightH4 height"}, "ctrlSetFontHeightH5": {"version": "1.00", "tags": "", "description": "Sets H5 font size of given HTML control.", "example": "_control ctrlSetFontHeightH5 0.05", "docSyntax": "controlName ctrlSetFontHeightH5 height", "syntax": "controlName ctrlSetFontHeightH5 height"}, "ctrlSetFontHeightH6": {"version": "1.00", "tags": "", "description": "Sets H6 font size of given HTML control.", "example": "_control ctrlSetFontHeightH6 0.05", "docSyntax": "controlName ctrlSetFontHeightH6 height", "syntax": "controlName ctrlSetFontHeightH6 height"}, "ctrlSetFontP": {"version": "1.00", "tags": "", "description": "Sets P font of given HTML control or its size.", "example": "_control ctrlSetFontP \"TahomaB\";", "docSyntax": "control ctrlSetFontP fontOrSize", "syntax": "<uiControl> ctrlSetFontP fontOrSize"}, "ctrlSetFontPB": {"version": "1.00", "tags": "", "description": "Sets P bold font of given HTML control.", "example": "_control ctrlSetFontPB \"TahomaB\"", "docSyntax": "controlName ctrlSetFontPB fontName", "syntax": "controlName ctrlSetFontPB fontName"}, "ctrlSetForegroundColor": {"version": "1.00", "tags": "", "description": "Sets foreground color of the given control.", "example": "_control ctrlSetForegroundColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetForegroundColor color", "syntax": "<uiControl> ctrlSetForegroundColor <scalar>"}, "ctrlSetPosition": {"version": "1.00", "tags": "", "description": "Sets wanted position and size for 2D control animation. Width and height are optional. ctrlCommit is required to complete the operation. For 3D control, param is relative [x, y, z] and no ctrlCommit is required as it cannot be animated. If target control is inside a CT_CONTROLS_GROUP, the position needs to be relative to it.", "example": "Move control: _control2D ctrlSetPosition [0, 0]; _control2D ctrlCommit 0;", "docSyntax": "controlName ctrlSetPosition [x, y]", "syntax": "controlName ctrlSetPosition [x,y]"}, "ctrlSetScale": {"version": "1.00", "tags": "", "description": "Sets scale of a control. Top left corner remains same. This command requires ctrlCommit.", "example": "_control ctrlSetScale 0.5;//\u00a0Makes the control 50% smaller _control ctrlCommit 0;", "docSyntax": "control ctrlSetScale scale", "syntax": "<uiControl> ctrlSetScale <scalar>"}, "ctrlSetStructuredText": {"version": "1.00", "tags": "", "description": "Set the Structured Text which will be displayed in structured text control.", "example": "_control ctrlSetStructuredText parseText \"First line<img image=data\\isniper.paa /><br />Second line\"", "docSyntax": "control ctrlSetStructuredText structuredText", "syntax": "<uiControl> ctrlSetStructuredText structuredText"}, "ctrlSetTextColor": {"version": "1.00", "tags": "", "description": "Sets text color of given control. Color is in format Color (RGBA). As of Arma 3 v1.40 this command can also be used to change fill-color of a CT_PROGRESS control.", "example": "_control ctrlSetTextColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetTextColor color", "syntax": "<uiControl> ctrlSetTextColor <scalar>"}, "ctrlSetTooltip": {"version": "1.00", "tags": "", "description": "Sets tooltip text of given control.", "example": "_control ctrlSetTooltip \"tooltip\";", "docSyntax": "control ctrlSetTooltip text", "syntax": "<uiControl> ctrlSetTooltip <string>"}, "ctrlSetTooltipColorBox": {"version": "1.00", "tags": "", "description": "Sets tooltip border color of given control.", "example": "_control ctrlSetTooltipColorBox [1, 0, 0, 1];", "docSyntax": "control ctrlSetTooltipColorBox color", "syntax": "<uiControl> ctrlSetTooltipColorBox <scalar>"}, "ctrlSetTooltipColorShade": {"version": "1.00", "tags": "", "description": "Sets tooltip background color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorShade [1, 0, 0, 1];", "docSyntax": "control ctrlSetTooltipColorShade color", "syntax": "<uiControl> ctrlSetTooltipColorShade <scalar>"}, "ctrlSetTooltipColorText": {"version": "1.00", "tags": "", "description": "Sets tooltip text color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorText [1, 0, 0, 1]", "docSyntax": "display ctrlSetTooltipColorText color", "syntax": "<uiDisplay> ctrlSetTooltipColorText <scalar>"}, "ctrlShown": {"version": "1.00", "tags": "", "description": "Returns whether given control is shown.", "example": "_bool = ctrlShown _ctrl;", "docSyntax": "ctrlShown controlName", "syntax": "ctrlShown controlName"}, "ctrlType": {"version": "1.00", "tags": "", "description": "Returns number representing the type of control, which is also defined by type property in config. For more information see Arma: GUI Configuration", "example": "_type = ctrlType _rscEdit; // 2", "docSyntax": "ctrlType control", "syntax": "ctrlType <uiControl>"}, "currentCommand": {"version": "1.00", "tags": "", "description": "Return the current command type (empty string when no command) for the commander of given vehicle (or for a given soldier). Returned value can be one of:", "example": "_command = currentCommand player;", "docSyntax": "currentCommand vehicleName", "syntax": "currentCommand vehicleName"}, "date": {"version": "1.00", "tags": "", "description": "Return the actual in-mission date and time.", "example": "//\u00a0in Arma 3 date params [\"_year\", \"_month\", \"_day\", \"_hours\", \"_minutes\"]; //\u00a0pre Arma 3 _now = date; //\u00a0[2014,10,30,2,30] a.k.a Oct. 30th, 2:30am _year = _now select 0; _month = _now select 1; _day = _now select 2; _hours = _now select 3; _minutes = _now select 4;", "docSyntax": "date", "syntax": "date"}, "default": {"version": "1.00", "tags": "", "description": "Defines a Switch Type default case - does not need a colon to define its block. See switch for more information.", "example": "switch (_condition) do { case 1: { hint \"1\" }; case 2: { hint \"2\" }; default { hint \"default\" }; //\u00a0no colon after default };", "docSyntax": "default a", "syntax": "default a"}, "deleteCenter": {"version": "1.00", "tags": "", "description": "In a nutshell, this command removes gaming Side (see createCenter). If a side has >0 Groups it cannot be deleted. Center can only be created for: east, west, resistance, civilian and sideLogic, therefore only centers from the mentioned sides can be deleted.", "example": "deleteCenter east", "docSyntax": "deleteCenter side", "syntax": "deleteCenter <objSide>"}, "deleteCollection": {"version": "1.00", "tags": "", "description": "Delete a collection. As example, used with a soldier, it'll hide the ingame model. When targetting Arma 2 1.06 or newer, use hideObject instead. This function is a relic from dynamic building destruction development. It is left only for compatibility with scripts created before Arma 2 1.06, and its functionality may be changed or removed in the future.", "example": "deleteCollection unitName;", "docSyntax": "deleteCollection object", "syntax": "deleteCollection <object>"}, "deleteTarget": {"version": "1.00", "tags": "", "description": "Delete a target.", "example": "deleteTarget target1", "docSyntax": "deleteTarget target", "syntax": "deleteTarget <object>"}, "displayCtrl": {"version": "1.00", "tags": "", "description": "Return child control with specified idc.", "example": "_displayControl = _ParentDisplay displayCtrl 101;", "docSyntax": "display displayCtrl idc", "syntax": "<uiDisplay> displayCtrl <scalar>"}, "displayNull": {"version": "1.00", "tags": "", "description": "A non-existing Display. To compare non-existent displays use isNull or isEqualTo:", "example": "!isNull displayNull; // false", "docSyntax": "displayNull", "syntax": "displayNull"}, "displaySetEventHandler": {"version": "1.00", "tags": "", "description": "Sets given event handler of given display. The return code of the provided function should indicate whether this event was handled correctly. This implies telling the engine whether it is default code should be executed. See User Interface Event Handlers for the full list of handler names.", "example": "_control displaySetEventHandler [\"KeyDown\", \"\"];", "docSyntax": "display displaySetEventHandler [handlerName, function]", "syntax": "<uiDisplay> displaySetEventHandler [handlerName,function]"}, "doFSM": {"version": "1.00", "tags": "", "description": "Orders a unit to process command defined by FSM file (silently). Unlike with execFSM where _this is passed to the FSM, the following parameters are passed when using doFSM/commandFSM:", "example": "_soldierOne doFSM [\"move.fsm\", position player, player];", "docSyntax": "unit doFSM [fsmName, position, target]", "syntax": "<objUnit> doFSM [fsmName,position,<object>]"}, "drawArrow": {"version": "1.00", "tags": "", "description": "Draws a single line arrow on the map. To draw a color filled arrow of custom shape see BIS_fnc_drawArrow", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawArrow [ player, player getRelPos [100, 0], [1,0,0,1] ]; }];", "docSyntax": "map drawArrow [from, to, color]", "syntax": "<objMap> drawArrow [from,to,<scalar>]"}, "drawEllipse": {"version": "1.00", "tags": "", "description": "Draws an ellipse on the map. Just like with marker or trigger area, negative a and b will result in hexagon.", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawEllipse [ player, 10, 10, 0, [1, 0, 0, 1], \"\" ]; _this select 0 drawEllipse [ player, -10, -10, 0, [1, 1, 1, 1], \"#(rgb,8,8,3)color(1,0.6,0,1)\" ]; _this select 0 drawEllipse [ player, -10, -10, 90, [0, 0, 1, 1], \"\" ]; }];", "docSyntax": "map drawEllipse [c, a, b, angle, color, fill]", "syntax": "<objMap> drawEllipse [c,a,b,angle,<scalar>,fill]"}, "drawIcon": {"version": "1.00", "tags": "", "description": "Draws an icon on the map. This command needs to be called every frame, preferably using the onDraw UI Event Handler. Some useful icons can be found in configfile >> \"CfgVehicleIcons\".", "example": "Red icon with text: findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawIcon [ \"iconStaticMG\", //\u00a0Custom images can also be used: getMissionPath \"\\myFolder\\myIcon.paa\" [1,0,0,1], getPos player, 24, 24, getDir player, \"Player Vehicle\", 1, 0.03, \"TahomaB\", \"right\" ] }];", "docSyntax": "map drawIcon [texture, color, position, width, height, angle, text, shadow, textSize, font, align]", "syntax": "<objMap> drawIcon [<string>,<scalar>,position,width,height,angle,<string>,shadow,textSize,font,align]"}, "drawLine": {"version": "1.00", "tags": "", "description": "Draw a line on the map. Can decrease framerate!", "example": "(findDisplay 12 displayCtrl 51) ctrlAddEventHandler [\"Draw\",\" (_this select 0) drawLine [ getPos player, [0,0,0], [0,0,1,1] ]; \"];", "docSyntax": "map drawLine [position1, position2, color]", "syntax": "<objMap> drawLine [position1,position2,<scalar>]"}, "drawRectangle": {"version": "1.00", "tags": "", "description": "Draws a rectangle on the map.", "example": "_ctrl drawRectangle [ getPos player, 20, 20, getDir player, [0,0,1,1], \"\" ];", "docSyntax": "map drawRectangle [c, a, b, angle, color, fill]", "syntax": "<objMap> drawRectangle [c,a,b,angle,<scalar>,fill]"}, "echo": {"version": "1.00", "tags": "", "description": "Sends any text into the debugger console or the logfile. This command is only present in internal version not in the retail version. Use diag_log instead!", "example": "echo \"Text in logfile\";", "docSyntax": "echo text", "syntax": "echo <string>"}, "effectiveCommander": {"version": "1.00", "tags": "", "description": "Returns the effective commander of the vehicle. Effective commander is the player whom driver AI will listen to. So if in a tank there is a gunner and a commander and AI driver, if the effectiveCommander is gunner, then gunner pressing WASD will give AI orders to move. If gunner jumps out and then enters tank again, the effectiveCommander role most likely has changed to commander that remained in tank. Also the assignment seems to work on first come first served basis.", "example": "_commander = effectiveCommander tank;", "docSyntax": "effectiveCommander vehicle", "syntax": "effectiveCommander <objVehicle>"}, "emptyPositions": {"version": "1.00", "tags": "", "description": "Returns the number of given empty positions in the vehicle.", "example": "_freeCargoAndFFVPositions = vehicle player emptyPositions \"Cargo\";", "docSyntax": "vehicle emptyPositions position", "syntax": "<objVehicle> emptyPositions position"}, "enableAttack": {"version": "1.00", "tags": "", "description": "Set if leader can issue attack commands to the soldiers in his group.", "example": "_group1 enableAttack true;", "docSyntax": "group enableAttack enable", "syntax": "<objGroup> enableAttack <bool>"}, "enableEnvironment": {"version": "1.00", "tags": "", "description": "Enable/disable environmental effects: ambient life and/or ambient sound.", "example": "enableEnvironment false; //\u00a0identical to enableEnvironment [false, false]", "docSyntax": "enableEnvironment enable", "syntax": "enableEnvironment <bool>"}, "enableReload": {"version": "1.00", "tags": "", "description": "Enable / disable reload when magazine is empty.", "example": "_vehicle enableReload false;", "docSyntax": "object enableReload enable", "syntax": "<object> enableReload <bool>"}, "enableTeamSwitch": {"version": "1.00", "tags": "", "description": "Enable / disable Team Switch. The default setting is enabled.", "example": "enableTeamSwitch true;", "docSyntax": "enableTeamSwitch enable", "syntax": "enableTeamSwitch <bool>"}, "execVM": {"version": "1.00", "tags": "", "description": "Compiles and adds an SQF script to the scheduler queue and returns script handle (see also Example 4). The script does not execute immediately upon running execVM command but with some delay depending on the VM's scripts queue and engine load.", "example": "execVM \"test.sqf\";", "docSyntax": "arguments execVM filename", "syntax": "arguments execVM filename"}, "exitWith": {"version": "1.00", "tags": "", "description": "Exits the current code scope. Often used for exiting do, for, count, forEach or the whole script.", "example": "systemChat \"start\"; private _condition = true; if (_condition) then { if (true) exitWith { systemChat \"exiting if _condition scope\"; }; systemChat \"never shown\"; }; systemChat \"exiting #1 worked\"; if (true) exitWith { systemChat \"exiting the main scope = leaving the whole script\"; }; systemChat \"never shown - the script has already ended\";", "docSyntax": "ifType exitWith code", "syntax": "ifType exitWith <code>"}, "expectedDestination": {"version": "1.00", "tags": "", "description": "Return expected destination of unit as an array.", "example": "_data = expectedDestination player;", "docSyntax": "expectedDestination person", "syntax": "expectedDestination <objUnit>"}, "exportLandscapeXYZ": {"version": "1.00", "tags": "", "description": "Exports landscape as XYZ file.", "example": "exportLandscapeXYZ \"myLandscape.txt\"", "docSyntax": "exportLandscapeXYZ filename", "syntax": "exportLandscapeXYZ filename"}, "findCover": {"version": "1.00", "tags": "", "description": "Returns the object around where the unit finds cover. The minDist, visibilityPosition and ignoreObject parameters are optional.", "example": "-", "docSyntax": "object findCover [position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]", "syntax": "<object> findCover [position,hidePosition,maxDist,minDist,visibilityPosition,ignoreObject]"}, "findDisplay": {"version": "1.00", "tags": "", "description": "Finds a display by its IDD which can either be defined in missionConfigFile (description.ext) or configFile (config.cpp)", "example": "[] spawn { waitUntil {\u00a0!isNull findDisplay 46 }; hint \"Mission Display is now available!\"; };", "docSyntax": "findDisplay idd", "syntax": "findDisplay idd"}, "findNearestEnemy": {"version": "1.00", "tags": "", "description": "Finds the nearest enemy to the specified position. Returns a null object if the object's group does not know about any enemies. This command will return nearest object that is known to the unit and is considered enemy. An empty vehicle that is part of enemy group assets (see addVehicle) can be returned as valid nearest target.", "example": "_myNearestEnemy = (units _myGroup select 0) findNearestEnemy player;", "docSyntax": "object findNearestEnemy position", "syntax": "<object> findNearestEnemy position"}, "finite": {"version": "1.00", "tags": "", "description": "Returns true if the provided number is finite (not infinite and a valid number).", "example": "finite 123; //\u00a0returns true", "docSyntax": "finite number", "syntax": "finite <scalar>"}, "floor": {"version": "1.00", "tags": "", "description": "Returns the next lowest integer in relation to the provided number.", "example": "floor 5.1; //\u00a0result is 5 floor 5.999; //\u00a0result is 5 floor -2.01; //\u00a0result is -3 floor -2.99; //\u00a0result is -3", "docSyntax": "floor num", "syntax": "floor num"}, "fog": {"version": "1.00", "tags": "", "description": "A getter for setFog. Returns the current value of the fog in range 0..1.", "example": "_foglevel = fog;", "docSyntax": "fog", "syntax": "fog"}, "fogForecast": {"version": "1.00", "tags": "", "description": "Returns the forecast fog value. A value of 0 means no fog, 1 means maximum fog.", "example": "_level = fogForecast;", "docSyntax": "fogForecast", "syntax": "fogForecast"}, "for": {"version": "1.00", "tags": "", "description": "This operator creates a For Type which is used in the for-constructs.", "example": "//\u00a0will output 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 (the to value being inclusive) for \"_i\" from 1 to 10 do { systemChat str _i; };", "docSyntax": "for arguments", "syntax": "for arguments"}, "forceSpeed": {"version": "1.00", "tags": "", "description": "Force the speed limit on given object (object will never attempt to move faster than given by forceSpeed). Use negative value to return to default behaviour.", "example": "_helicopter forceSpeed 150;", "docSyntax": "object forceSpeed speed", "syntax": "<object> forceSpeed <scalar>"}, "formationDirection": {"version": "1.00", "tags": "", "description": "Return the direction in degrees of the 'unit' watching in formation.", "example": "_degrees = formationDirection _unit", "docSyntax": "formationDirection unitName", "syntax": "formationDirection <objUnit>"}, "formationLeader": {"version": "1.00", "tags": "", "description": "Return leader of the formation.", "example": "if (formationLeader player\u00a0!= leader player) then { hint \"Formation leader is not the group leader.\"; };", "docSyntax": "formationLeader unitName", "syntax": "formationLeader <objUnit>"}, "formationMembers": {"version": "1.00", "tags": "", "description": "Return list of units (drivers) in the formation.", "example": "_drivers = formationMembers _person", "docSyntax": "formationMembers person", "syntax": "formationMembers <objUnit>"}, "formationPosition": {"version": "1.00", "tags": "", "description": "Return position of unit in the formation.", "example": "_pos = formationPosition _unit;", "docSyntax": "formationPosition unit", "syntax": "formationPosition <objUnit>"}, "formationTask": {"version": "1.00", "tags": "", "description": "Return the current task of the unit in the formation.", "example": "_currentTask = formationTask _unit;", "docSyntax": "formationTask unit", "syntax": "formationTask <objUnit>"}, "formatText": {"version": "1.00", "tags": "", "description": "Creates a Structured Text similar to format command.", "example": "hint formatText [\"Image: %1\", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "formatText [format, argument1, argument2, ...]", "syntax": "formatText [format,argument1,argument2,...]"}, "from": {"version": "1.00", "tags": "", "description": "Continue sequence of for construct. It sets the start value of the index variable.", "example": "for \"_x\" from 10 to 20 do {..code..}", "docSyntax": "for from b", "syntax": "for from b"}, "getArray": {"version": "1.00", "tags": "", "description": "Extract array from config entry.", "example": "_array = getArray (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"threat\");", "docSyntax": "getArray config", "syntax": "getArray config"}, "getHideFrom": {"version": "1.00", "tags": "", "description": "Returns the Position where object believes the enemy to be. If there is no direct line of sight between the object and the enemy, this position is extrapolated based on the last known position and speed of the enemy. A returned position of [0,0,0] implies that object does not knowAbout enemy. If enemy is null it is some position in front of the object or enemy position.", "example": "_pos = player getHideFrom _enemy;", "docSyntax": "object getHideFrom enemy", "syntax": "<object> getHideFrom enemy"}, "getNumber": {"version": "1.00", "tags": "", "description": "Extract number from config entry.", "example": "_value = getNumber (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"maxSpeed\");", "docSyntax": "getNumber config", "syntax": "getNumber config"}, "getSpeed": {"version": "1.00", "tags": "", "description": "Get the speed for the given speed mode. SpeedMode can be:", "example": "_spd = player getSpeed \"FAST\";", "docSyntax": "object getSpeed speedMode", "syntax": "<object> getSpeed speedMode"}, "getText": {"version": "1.00", "tags": "", "description": "Extracts localized text from config entry, if entry is subject to localization, otherwise returns text value. To obtain the translation key itself, see getTextRaw.", "example": "_text = getText (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"icon\"); //\u00a0\"Get in %1 as Driver\"", "docSyntax": "getText config", "syntax": "getText config"}, "getVariable": {"version": "1.00", "tags": "", "description": "Returns the value of variable in the variable space assigned to various data types. All available data types combinations:", "example": "private _variable = myTruck getVariable \"myVariable\"; //\u00a0returns nil if \"myVariable\" is not set", "docSyntax": "varspace getVariable name", "syntax": "varspace getVariable <string>"}, "halt": {"version": "1.00", "tags": "", "description": "This command was meant to break the script into debugger, however currently it does not do anything except displaying and logging the following error: Error Debugger breakpoint hit.", "example": "if (_displayAnError) then {halt};", "docSyntax": "halt", "syntax": "halt"}, "hideBehindScripted": {"version": "1.00", "tags": "", "description": "When set to true it disables the default engine hiding behavior.", "example": "_unit hideBehindScripted true;", "docSyntax": "object hideBehindScripted scriptedHideBehind", "syntax": "<object> hideBehindScripted scriptedHideBehind"}, "hideBody": {"version": "1.00", "tags": "", "description": "Hides dead body of the given unit. After a short delay, the body slowly sinks into the ground. After awhile, when group of the unit becomes grpNull, the body gets deleted and becomes objNull. If applied to alive unit, nothing happens until unit dies, then the unit's body gets hidden. If a dead unit is human player, the body is hidden but not deleted until player respawns.", "example": "hideBody player1;", "docSyntax": "hideBody unit", "syntax": "hideBody <objUnit>"}, "hierarchyObjectsCount": {"version": "1.00", "tags": "", "description": "The number of objects in hierarchy.", "example": "_number = hierarchyObjectsCount;", "docSyntax": "hierarchyObjectsCount", "syntax": "hierarchyObjectsCount"}, "htmlLoad": {"version": "1.00", "tags": "", "description": "Load HTML from file or URI using given control. File path is relative to current mission dir or an absolute path (with drive letter etc.). The command is subject to restrictions, imposed by CfgCommands class.", "example": "_control htmlLoad \"briefing.html\";", "docSyntax": "control htmlLoad filename", "syntax": "<uiControl> htmlLoad filename"}, "image": {"version": "1.00", "tags": "", "description": "Creates a structured text containing the given image. Use setAttributes to set additional attributes on the image.", "example": "hint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "image filename", "syntax": "image filename"}, "inGameUISetEventHandler": {"version": "1.00", "tags": "", "description": "Sets given event handler of in-game UI. If EH function returns true, performed action is overridden. Event handlers available are:", "example": "inGameUISetEventHandler [\"Action\", \"hint 'Lights, Camera, Action!'; true\"]; sleep 10; inGameUISetEventHandler [\"Action\", \"\"]; //\u00a0removes the \"Action\" EH", "docSyntax": "inGameUISetEventHandler [handlerName, code]", "syntax": "inGameUISetEventHandler [handlerName,<code>]"}, "inheritsFrom": {"version": "1.00", "tags": "", "description": "Returns base entry of config entry.", "example": "_base = inheritsFrom (configFile >> \"CfgVehicles\" >> \"Car\"); Result is Config entry for class \"LandVehicle\"", "docSyntax": "inheritsFrom config", "syntax": "inheritsFrom config"}, "initAmbientLife": {"version": "1.00", "tags": "", "description": "Initialises the ambient life on local client from CfgWorlds >> worldName >> AmbientA3. Has no effect on dedicated server or headless client.", "example": "initAmbientLife;", "docSyntax": "initAmbientLife", "syntax": "initAmbientLife"}, "intersect": {"version": "1.00", "tags": "", "description": "Finds named selections in object which are in specified LOD, intersected by given section of a line. Return value is in the form of [selection, distance]. Multiple returned arrays are nested within a single array. No intersection returns []. lodName could be one of the following:", "example": "[_tank, \"VIEW\"] intersect [[1500, 1500, 2], [1550, 1500, 2]];", "docSyntax": "[object, lodName] intersect [begPos, endPos]", "syntax": "[<object>,lodName] intersect [begPos,endPos]"}, "isArray": {"version": "1.00", "tags": "", "description": "Check if config entry represents array.", "example": "_ok = isArray (configFile >> \"CfgVehicles\") Result is false", "docSyntax": "isArray config", "syntax": "isArray config"}, "isClass": {"version": "1.00", "tags": "", "description": "Check if config entry represents config class.", "example": "_ok = isClass (configFile >> \"CfgVehicles\"); Result is true.", "docSyntax": "isClass config", "syntax": "isClass config"}, "isFormationLeader": {"version": "1.00", "tags": "", "description": "Returns true if the specified unit is subgroup leader.", "example": "_isLeader = isFormationLeader player;", "docSyntax": "isFormationLeader unit", "syntax": "isFormationLeader <objUnit>"}, "isHidden": {"version": "1.00", "tags": "", "description": "Returns whether a person is hidden (reached the hiding position).", "example": "_bobIsHidden = isHidden bob;", "docSyntax": "isHidden person", "syntax": "isHidden <objUnit>"}, "isHideBehindScripted": {"version": "1.00", "tags": "", "description": "Return whether the vehicle has set the hideBehindScripted to true or not.", "example": "_isHidden = isHideBehindScripted _vehicle;", "docSyntax": "isHideBehindScripted vehicle", "syntax": "isHideBehindScripted <objVehicle>"}, "isMarkedForCollection": {"version": "1.00", "tags": "", "description": "Checks whether the object is marked for weapons collection.", "example": "_marked = isMarkedForCollection _truck", "docSyntax": "isMarkedForCollection object", "syntax": "isMarkedForCollection <object>"}, "isNil": {"version": "1.00", "tags": "", "description": "Tests whether a variable is nil or undefined from its identifier, or whether the given expression evaluates to nil or Nothing.", "example": "if (isNil \"TAG_globalVariable\") then { TAG_globalVariable = 0 }; if (isNil \"_localVariable\") then { hint \"_localVariable is nil\" };", "docSyntax": "isNil variableName", "syntax": "isNil variableName"}, "isNumber": {"version": "1.00", "tags": "", "description": "Check if config entry represents number.", "example": "_ok = isNumber (configFile >> \"CfgVehicles\") Result is false", "docSyntax": "isNumber config", "syntax": "isNumber config"}, "isPlayer": {"version": "1.00", "tags": "", "description": "Checks if given person is a player. Returns true for headless clients as well.", "example": "if (isPlayer _Soldier1) then { _soldier1 setDamage 1; };", "docSyntax": "isPlayer unit", "syntax": "isPlayer <objUnit>"}, "isText": {"version": "1.00", "tags": "", "description": "Checks if config entry represents a text value.", "example": "_isText = isText (configFile >> \"CfgVehicles\") //\u00a0false", "docSyntax": "isText config", "syntax": "isText config"}, "lbIsSelected": {"version": "1.00", "tags": "", "description": "Checks whether or not given row of the given listbox is selected.", "example": "_selected = _control lbIsSelected 0;", "docSyntax": "control lbIsSelected index", "syntax": "<uiControl> lbIsSelected <scalar>"}, "lbSelection": {"version": "1.00", "tags": "", "description": "Returns Array of selected rows indices in the given listbox. If listbox is of style LB_MULTI (multi-selection) the array will contain multiple elements, otherwise only a single element. For single selection listbox one can also use lbCurSel. See also lbIsSelected, lbSetSelected", "example": "_indices = lbSelection _control;", "docSyntax": "lbSelection control", "syntax": "lbSelection <uiControl>"}, "lbSetSelected": {"version": "1.00", "tags": "", "description": "Sets the selection state of the given row of the given listbox of style LB_MULTI. The command has to be called for every row which is needed to be selected in multi-selection listbox. For single selection listbox use lbSetCurSel instead.", "example": "_control lbSetSelected [0, true];", "docSyntax": "control lbSetSelected [index, selected]", "syntax": "<uiControl> lbSetSelected [<scalar>,selected]"}, "limitSpeed": {"version": "1.00", "tags": "", "description": "Limit speed of given vehicle or person to given value (in km/h).", "example": "// Adjust \"speedLimit\" variable to change limited speed. (A3 1.24 we don't need loop for a continus effect, limitSpeed alone is enough.) _this setVariable [\"speedLimit\", 200]; _nul = _this spawn { while {canMove _this} do { _this limitSpeed (_this getVariable \"speedLimit\"); sleep 0.1; }; };", "docSyntax": "objectName limitSpeed speed", "syntax": "objectName limitSpeed <scalar>"}, "max": {"version": "1.00", "tags": "", "description": "The greater value of a and b.", "example": "3 max 2; //\u00a0Result is 3", "docSyntax": "a max b", "syntax": "a max b"}, "min": {"version": "1.00", "tags": "", "description": "The smaller of a and b.", "example": "3 min 2 //\u00a0Result is 2", "docSyntax": "a min b", "syntax": "a min b"}, "missionConfigFile": {"version": "1.00", "tags": "", "description": "Return root of mission Description.ext entries hierarchy.", "example": "for \"_i\" from 0 to (count paramsArray - 1) do { missionNamespace setVariable [configName ((missionConfigFile/\"Params\") select _i), paramsArray select _i]; };", "docSyntax": "missionConfigFile", "syntax": "missionConfigFile"}, "modelToWorld": {"version": "1.00", "tags": "", "description": "Translates relative position from object model space to world space in PositionAGL format.", "example": "_aboveAndBehindPlayer = player modelToWorld [0,-1,3];", "docSyntax": "model modelToWorld position", "syntax": "model modelToWorld position"}, "moveInTurret": {"version": "1.00", "tags": "", "description": "Moves the soldier into the vehicle's turret. (Immediately, without animation). turret path is an array of positions inside a turret, or positions inside a turret of a turret.", "example": "_soldierOne moveInTurret [_tank, [0, 0]];", "docSyntax": "unitName moveInTurret [vehicle, turretPath]", "syntax": "<objUnit> moveInTurret [<objVehicle>,turretPath]"}, "moveTarget": {"version": "1.00", "tags": "", "description": "Change information about a target.", "example": "_moved = _target moveTarget [position player, 1, 1]", "docSyntax": "target moveTarget [position, typeAccuracy, posAccuracy]", "syntax": "<object> moveTarget [position,typeAccuracy,posAccuracy]"}, "moveTo": {"version": "1.00", "tags": "", "description": "Low level command to person to move to given position.", "example": "_myAgent moveTo getPosATL player;", "docSyntax": "unit moveTo position", "syntax": "<objUnit> moveTo position"}, "moveToFailed": {"version": "1.00", "tags": "", "description": "Check if latest low level moveTo command failed.", "example": "private _hasFailed = moveToFailed _unit;", "docSyntax": "moveToFailed unit", "syntax": "moveToFailed <objUnit>"}, "nearestObjects": {"version": "1.00", "tags": "", "description": "Returns a list of nearest objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered by proximity, the closest one will be first in the array. Alternatively, you can use nearObjects command, which doesn't sort results.", "example": "nearestObjects [player, [\"Car\", \"Tank\"], 200];", "docSyntax": "nearestObjects [position, types, radius, 2Dmode]", "syntax": "nearestObjects [position,types,radius,2Dmode]"}, "nearObjects": {"version": "1.00", "tags": "", "description": "Find objects (Units, Vehicles, Dead, Map Objects) in a sphere with given radius. The first object in the returned array is not necessarily the closest one. If you need returned objects to be sorted by distance, use nearestObjects. If typeName is given, only objects of given type (or its subtype) are listed.", "example": "_list = position player nearObjects 50;", "docSyntax": "position nearObjects radius", "syntax": "position nearObjects radius"}, "needReload": {"version": "1.00", "tags": "", "description": "Return how much vehicle wants to reload its weapons.", "example": "_seriousness = needReload _vehicle;", "docSyntax": "needReload vehicle", "syntax": "needReload <objVehicle>"}, "nextWeatherChange": {"version": "1.00", "tags": "", "description": "Return the remaining time (in seconds) over which the current weather change will occur.", "example": "_seconds = nextWeatherChange;", "docSyntax": "nextWeatherChange", "syntax": "nextWeatherChange"}, "onBriefingTeamSwitch": {"version": "1.00", "tags": "", "description": "Select a sound defined in the CfgSounds of the mission to be played the first time the TeamSwitch tab is selected in the briefing.", "example": "onBriefingTeamSwitch \"TeamSwitchVoiceOver\";", "docSyntax": "onBriefingTeamSwitch soundName", "syntax": "onBriefingTeamSwitch <string>"}, "onPlayerDisconnected": {"version": "1.00", "tags": "", "description": "This command will execute attached code whenever a player is leaving an MP session. The code will receive a number of special variables:", "example": "onPlayerDisconnected {diag_log [_id, _uid, _name]};", "docSyntax": "onPlayerDisconnected code", "syntax": "onPlayerDisconnected <code>"}, "overcast": {"version": "1.00", "tags": "", "description": "Return the current overcast level. Zero is clear skies, one is maximum cloud cover.", "example": "_cloudLevel = overcast;", "docSyntax": "overcast", "syntax": "overcast"}, "overcastForecast": {"version": "1.00", "tags": "", "description": "Return the overcast forecast.", "example": "_forecast = overcastForecast;", "docSyntax": "overcastForecast", "syntax": "overcastForecast"}, "parseNumber": {"version": "1.00", "tags": "", "description": "An SQF equivalent of C++ atof function. Parses the string, interpreting its content as a floating point number.", "example": "_number = parseNumber \"0.125\"; //\u00a00.125", "docSyntax": "parseNumber string", "syntax": "parseNumber <string>"}, "playerRespawnTime": {"version": "1.00", "tags": "", "description": "Return the player's remaining time before respawn, or -1 if it is not available (such as when the player is alive).", "example": "waitUntil {playerRespawnTime <= 0};", "docSyntax": "playerRespawnTime", "syntax": "playerRespawnTime"}, "playerSide": {"version": "1.00", "tags": "", "description": "Returns the player's side. This is valid even when the player controlled person is dead (a difference from side player).", "example": "if (side man1 == playerSide) then { hint \"man1 is on your side!\"; };", "docSyntax": "playerSide", "syntax": "playerSide"}, "positionCameraToWorld": {"version": "1.00", "tags": "", "description": "Transforms position from camera coordinate space to world coordinate space. Camera axes are relative to camera orientation. x axis goes from left of the camera to right of the camera, z axis goes from underneath the camera to above the camera and y axis goes from back of the camera to where the camera is looking.", "example": "_worldPos = positionCameraToWorld _cameraPos;", "docSyntax": "positionCameraToWorld cameraPos", "syntax": "positionCameraToWorld cameraPos"}, "posScreenToWorld": {"version": "1.00", "tags": "", "description": "Converts map screen coordinates into world coordinates. Unlike ctrlMapScreenToWorld, this command returns world position is format [x, y, 0], otherwise it is identical to it.", "example": "_worldCoord = _control posScreenToWorld _ScreenCoord;", "docSyntax": "map posScreenToWorld [x, y]", "syntax": "<objMap> posScreenToWorld [x,y]"}, "posWorldToScreen": {"version": "1.00", "tags": "", "description": "Converts world coordinates into map screen coordinates. This command is identical to ctrlMapWorldToScreen.", "example": "_screenCoord = _control posWorldToScreen _worldCoord;", "docSyntax": "map posWorldToScreen position", "syntax": "<objMap> posWorldToScreen position"}, "precision": {"version": "1.00", "tags": "", "description": "Return the movement precision of the given entity, how is the entity able to be precise when moving to given target.", "example": "// used in formationCDanger.fsm if (getPosATL _this distance _dangerPos <= precision _this) then { /* ... */ };", "docSyntax": "precision entity", "syntax": "precision entity"}, "rain": {"version": "1.00", "tags": "", "description": "Returns the current value of rain density in range 0..1", "example": "_rainLevel = rain;", "docSyntax": "rain", "syntax": "rain"}, "rank": {"version": "1.00", "tags": "", "description": "Returns the rank of the given unit. Rank can be one of the following:", "example": "_rank = rank player;", "docSyntax": "rank unit", "syntax": "rank <objUnit>"}, "reload": {"version": "1.00", "tags": "", "description": "Old syntax: Reload first found muzzle that needs reloading (with some inconsistencies).", "example": "if (needReload player == 1) then { reload player };", "docSyntax": "reload unitName", "syntax": "reload <objUnit>"}, "reloadEnabled": {"version": "1.00", "tags": "", "description": "Check whether magazine is reloaded whenever emptied.", "example": "private _canReload = reloadEnabled _unit1;", "docSyntax": "reloadEnabled unitName", "syntax": "reloadEnabled <objUnit>"}, "removeSwitchableUnit": {"version": "1.00", "tags": "", "description": "Remove a unit from the list of units available for Team Switch.", "example": "removeSwitchableUnit _unit1;", "docSyntax": "removeSwitchableUnit unitName", "syntax": "removeSwitchableUnit <objUnit>"}, "round": {"version": "1.00", "tags": "", "description": "Rounds the provided value to the closest integer.", "example": "round 5.25; //\u00a0returns 5", "docSyntax": "round value", "syntax": "round <scalar>"}, "scopeName": {"version": "1.00", "tags": "", "description": "Defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands like breakOut and breakTo. Scope name should be defined only once per scope. Trying to set a different name on the scope that has already defined scope name will result in error.", "example": "scopeName \"main\"; while {true} do { scopeName \"loop1\"; while {true} do { scopeName \"loop2\"; ... }; };", "docSyntax": "scopeName name", "syntax": "scopeName <string>"}, "selectionPosition": {"version": "1.00", "tags": "", "description": "Returns selection position in model space pertaining to the current animation in render time scope. When the default syntax is used, command searches first in Memory level, then in Geometry level, FireGeometry level, LandContact level, HitPoints level and finally in ViewGeometry level and returns the first matching find. The second syntax allows to specify which one of these levels to search in instead.", "example": "_inModelPosition = player selectionPosition \"head_hit\";", "docSyntax": "object selectionPosition selectionName", "syntax": "<object> selectionPosition selectionName"}, "setAperture": {"version": "1.00", "tags": "", "description": "Sets custom eye accommodation camera aperture.", "example": "setAperture 0.3;", "docSyntax": "setAperture aperture", "syntax": "setAperture aperture"}, "setLightBrightness": {"version": "1.00", "tags": "", "description": "Set brightness of light.", "example": "myLight setLightBrightness 2;", "docSyntax": "light setLightBrightness brightness", "syntax": "light setLightBrightness brightness"}, "setMarkerShape": {"version": "1.00", "tags": "", "description": "Selects shape (actual type) of the marker.", "example": "\"Marker1\" setMarkerShape \"RECTANGLE\";", "docSyntax": "markerName setMarkerShape shape", "syntax": "<string> setMarkerShape shape"}, "setMousePosition": {"version": "1.00", "tags": "", "description": "Moves mouse pointer to specified position on the screen. x and y could be any number, but will be clipped so mouse never leaves the screen area.", "example": "setMousePosition [0.5, 0.5];", "docSyntax": "setMousePosition [x, y]", "syntax": "setMousePosition [x,y]"}, "setParticleCircle": {"version": "1.00", "tags": "", "description": "Updates particle source, creates particles in circle with given radius. Velocity is transformed and added to total velocity.", "example": "_myParticleSource setParticleCircle [3, [0,0,5]];", "docSyntax": "particleSource setParticleCircle [circleRadius, circleVelocity]", "syntax": "particleSource setParticleCircle [circleRadius,circleVelocity]"}, "setParticleParams": {"version": "1.00", "tags": "", "description": "Set parameters to particle source. Array is in format ParticleArray.", "example": "see ParticleArray", "docSyntax": "particleSource setParticleParams array", "syntax": "particleSource setParticleParams <array>"}, "setRank": {"version": "1.00", "tags": "", "description": "Sets rank of given unit. Possible values: PRIVATE, CORPORAL, SERGEANT, LIEUTENANT, CAPTAIN, MAJOR or COLONEL.", "example": "player setRank \"COLONEL\"", "docSyntax": "unitName setRank rank", "syntax": "<objUnit> setRank rank"}, "setSoundEffect": {"version": "1.00", "tags": "", "description": "Defines the different sound effects. To stop any sound, deactivate the trigger (might take up to 0.5 seconds to stop) or delete the trigger (immediate).", "example": "_trigger setSoundEffect [\"Alarm\", \"\", \"\", \"\"];", "docSyntax": "trigger setSoundEffect [sound, voice, soundEnv, soundDet]", "syntax": "<objTrigger> setSoundEffect [sound,voice,soundEnv,soundDet]"}, "setTriggerActivation": {"version": "1.00", "tags": "", "description": "Defines the trigger activation type. See ArmA:Mission Editor - Triggers for a thorough overview of triggers and its fields for activation, effects, etc. Since Arma 3 v1.67, \"ANYPLAYER\" activation can be used to detect any player.", "example": "_trigger setTriggerActivation [\"WEST\", \"EAST D\", true]", "docSyntax": "trigger setTriggerActivation [by, type, repeating]", "syntax": "<objTrigger> setTriggerActivation [by,type,repeating]"}, "setTriggerStatements": {"version": "1.00", "tags": "", "description": "Defines trigger condition, activation and deactivation statements. Trigger condition has to return Boolean. true will activate the trigger, false will deactivate it (only if activation is set to repeat). thisList returns the same result as list command, which includes all entities in the trigger area that are capable of activating the trigger. Dead entities are excluded as well as crew in vehicles, vehicles themselves are included.", "example": "_trg setTriggerStatements [\"this\", \"hint 'trigger on'\", \"hint 'trigger off'\"]", "docSyntax": "trigger setTriggerStatements [condition, activation, deactivation]", "syntax": "<objTrigger> setTriggerStatements [condition,activation,deactivation]"}, "setTriggerText": {"version": "1.00", "tags": "", "description": "Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers.", "example": "trigger setTriggerText \"Call for support\";", "docSyntax": "trigger setTriggerText text", "syntax": "<objTrigger> setTriggerText <string>"}, "setTriggerTimeout": {"version": "1.00", "tags": "", "description": "Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time.", "example": "_trigger setTriggerTimeout [5, 10, 7, false];", "docSyntax": "trigger setTriggerTimeout [min, mid, max, interruptable]", "syntax": "<objTrigger> setTriggerTimeout [min,mid,max,interruptable]"}, "setTriggerType": {"version": "1.00", "tags": "", "description": "Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission):", "example": "_trigger setTriggerType \"END1\"", "docSyntax": "trigger setTriggerType action", "syntax": "<objTrigger> setTriggerType action"}, "setVariable": {"version": "1.00", "tags": "", "description": "Set variable to given value in the variable space of given element. Can be used to broadcast variables over the network. To remove a variable, set it to nil (see Example 5).", "example": "_myTruck setVariable [\"TAG_myPublicVariable\", 123, true];", "docSyntax": "varspace setVariable [name, value, public]", "syntax": "varspace setVariable [<string>,<scalar>,public]"}, "setVehicleAmmo": {"version": "1.00", "tags": "", "description": "Sets how much ammunition (compared to a full state defined by the vehicle type) the vehicle has. Note that the ammo will be added only to local turrets. To check locality of turret use turretLocal. The value ranges from 0 to 1.", "example": "player setVehicleAmmo 0;", "docSyntax": "vehicleName setVehicleAmmo value", "syntax": "vehicleName setVehicleAmmo <scalar>"}, "setVehicleVarName": {"version": "1.00", "tags": "", "description": "Sets string representation of an object to a custom string.", "example": "private _playersCar = vehicle player; systemChat str _playersCar; //\u00a0displays e.g \"ce06b00# 164274: offroad_01_unarmed_f.p3d\" _playersCar setVehicleVarName \"MyOffroad\"; systemChat str _playersCar; //\u00a0displays \"MyOffroad\" isNil \"MyOffroad\"; //\u00a0true - the MyOffroad variable is not set MyOffroad = _playersCar; //\u00a0now it is publicVariable \"MyOffroad\"; //\u00a0broadcasts it over the network", "docSyntax": "object setVehicleVarName name", "syntax": "<object> setVehicleVarName <string>"}, "setWaypointCombatMode": {"version": "1.00", "tags": "", "description": "Changes a group's combat mode when the waypoint becomes active.", "example": "[_grp, 2] setWaypointCombatMode \"RED\";", "docSyntax": "waypoint setWaypointCombatMode mode", "syntax": "waypoint setWaypointCombatMode mode"}, "setWaypointType": {"version": "1.00", "tags": "", "description": "Sets the waypoint type of given waypoint. More details at Waypoints.", "example": "_myWaypoint setWaypointType \"HOLD\";", "docSyntax": "waypoint setWaypointType type", "syntax": "waypoint setWaypointType type"}, "showWaypoint": {"version": "1.00", "tags": "", "description": "Defines how waypoints are shown to the player in map view. For 3D HUD visibility see setWaypointVisible.", "example": "[_grp, 2] showWaypoint \"ALWAYS\";", "docSyntax": "waypoint showWaypoint show", "syntax": "waypoint showWaypoint show"}, "sleep": {"version": "1.00", "tags": "", "description": "Suspends code execution for given time in seconds. The sleep precision is given by a framerate, the delay given is the minimal delay expected. Must be called inside of a context which is interruptible, i.e. a script executed by execVM or spawn.", "example": "0 spawn { sleep 5; hint \"after (at least) 5 seconds...\"; };", "docSyntax": "sleep delay", "syntax": "sleep <scalar>"}, "step": {"version": "1.00", "tags": "", "description": "Optional step value. A countdown can be made with a negative value. If not set, the default step is 1.", "example": "for \"_i\" from 20 to 10 step -2 do { //\u00a0... };", "docSyntax": "for step stepSize", "syntax": "for step stepSize"}, "str": {"version": "1.00", "tags": "", "description": "Converts any value into a string by placing \" and \" around the argument. When used on object, object debug name is returned.", "example": "_s = str (2 + 3);//\u00a0The value of _s is the string \"5\"", "docSyntax": "str value", "syntax": "str <scalar>"}, "supportInfo": {"version": "1.00", "tags": "", "description": "Creates a list of supported operators and type. Each field of array has the format: \"x:name\" Where x can be:", "example": "supportInfo \"b:select*\"; //\u00a0returns [\"b:ARRAY select SCALAR\",\"b:ARRAY select BOOL\",\"b:CONFIG select SCALAR\"]", "docSyntax": "supportInfo mask", "syntax": "supportInfo mask"}, "switch": {"version": "1.00", "tags": "", "description": "Checks if the given parameter matches any case. If so, the code block of that case will be executed. After that the switch ends so no further cases will be checked.", "example": "switch (floor random 5) do { case 1: { hint \"one\"; }; case 2: { hint \"two\"; }; default { hint \"zero, three or four\" }; };", "docSyntax": "switch value", "syntax": "switch <scalar>"}, "switchableUnits": {"version": "1.00", "tags": "", "description": "Returns a list of playable units available for switching to", "example": "_availableUnits = switchableUnits;", "docSyntax": "switchableUnits", "syntax": "switchableUnits"}, "teamSwitch": {"version": "1.00", "tags": "", "description": "Invoke the Team Switch dialog (force it even when conditions are not met). There has to be at least one playable unit for team switch to work, and for this command to work in MP, respawn type in description.ext should be 5 (SIDE).", "example": "teamSwitch;", "docSyntax": "teamSwitch", "syntax": "teamSwitch"}, "teamSwitchEnabled": {"version": "1.00", "tags": "", "description": "Check if Team Switch is currently enabled. Team Switch is enabled by default.", "example": "_isTeamSwitchEnabled = teamSwitchEnabled;", "docSyntax": "teamSwitchEnabled", "syntax": "teamSwitchEnabled"}, "text": {"version": "1.00", "tags": "", "description": "Creates a structured text containing the given plain text if argument is String. Use setAttributes to set additional attributes on the text. If the argument is location, returns location's text value (see Alt Syntax).", "example": "_stxt2 = text \"Hello world.\";", "docSyntax": "text string", "syntax": "<string> <string>"}, "throw": {"version": "1.00", "tags": "", "description": "Throws an exception. The exception is processed by first catch block. This command will terminate further execution of the code.", "example": "try {throw \"invalid argument\"} catch {hint str _exception};", "docSyntax": "throw expression", "syntax": "throw expression"}, "to": {"version": "1.00", "tags": "", "description": "Continue sequence of for construct. It sets the end value of the index variable.", "example": "for \"_x\" from 10 to 20 do { /* something */ };", "docSyntax": "forType to b", "syntax": "forType to b"}, "triggerAttachVehicle": {"version": "1.00", "tags": "", "description": "Specifies the entity which will activate the selected trigger.", "example": "trigger triggerAttachVehicle [player];", "docSyntax": "triggerName triggerAttachVehicle objects", "syntax": "triggerName triggerAttachVehicle objects"}, "try": {"version": "1.00", "tags": "", "description": "Defines a try-catch structure. This sets up an exception handling block. Any thrown exception in a try block is caught in a catch block. The structured exception block has the following form: try { /* block that can throw exception */ } catch { /* block that processes the exception. Exception is described in the _exception variable */ };", "example": "try {throw \"invalid argument\"} catch {hint str _exception};", "docSyntax": "try code", "syntax": "try <code>"}, "typeName": {"version": "1.00", "tags": "", "description": "Returns the data type of an expression. The type is returned as on of the following all-uppercase strings:", "example": "_msg = \"hello\"; _result = typeName _msg; //_result will be \"STRING\"", "docSyntax": "typeName anything", "syntax": "typeName anything"}, "unitPos": {"version": "1.00", "tags": "", "description": "Return the unit position rules.", "example": "hint str unitPos _unit;", "docSyntax": "unitPos unit", "syntax": "unitPos <objUnit>"}, "vectorUp": {"version": "1.00", "tags": "", "description": "Returns up vector of the given object in format Vector3D.", "example": "_objUpVector = vectorUp myObject;", "docSyntax": "vectorUp object", "syntax": "vectorUp <object>"}, "vehicles": {"version": "1.00", "tags": "", "description": "Returns an array of all vehicles available to current client. This command returns both empty and crewed vehicles", "example": "_vehicles = vehicles;", "docSyntax": "vehicles", "syntax": "vehicles"}, "vehicleVarName": {"version": "1.00", "tags": "", "description": "Returns the variable name that contains a primary editor reference to this object. This is the variable given in the Insert Unit dialog / name field in the editor. It can be changed using setVehicleVarName.", "example": "hint vehicleVarName player;", "docSyntax": "vehicleVarName object", "syntax": "vehicleVarName <object>"}, "verifySignature": {"version": "1.00", "tags": "", "description": "Check if file is signed by any key present in game keys folders. On clients, it does not check against the keys accepted by server.", "example": "verifySignature \"@MyAddon\\Addons\\SomeAddon.pbo\";", "docSyntax": "verifySignature filename", "syntax": "verifySignature filename"}, "waitUntil": {"version": "1.00", "tags": "", "description": "Suspends execution of scheduled script until the given condition satisfied.", "example": "waitUntil { not alive player };", "docSyntax": "waitUntil condition", "syntax": "waitUntil condition"}, "wind": {"version": "1.00", "tags": "", "description": "Returns the current wind vector (in m/s) as array [x, y, z].", "example": "_windArray = wind;", "docSyntax": "wind", "syntax": "wind"}, "worldName": {"version": "1.00", "tags": "", "description": "Return the name of the currently loaded world.", "example": "private _name = worldName;", "docSyntax": "worldName", "syntax": "worldName"}, "worldToModel": {"version": "1.00", "tags": "", "description": "Converts position from world space to object model space.", "example": "_relPos = myObject worldToModel [0,0,0];", "docSyntax": "model worldToModel position", "syntax": "model worldToModel position"}, "createMarkerLocal": {"version": "1.04", "tags": "", "description": "Creates a local marker at the given position - the marker only exists on the machine that created it. The marker name has to be unique, if a marker with the given name exists, the command will be ignored. Use deleteMarkerLocal to delete a local marker.", "example": "_marker = createMarkerLocal [\"Marker1\", position player];", "docSyntax": "createMarkerLocal [name, position, channel, creator]", "syntax": "createMarkerLocal [<string>,position,channel,creator]"}, "deleteMarkerLocal": {"version": "1.04", "tags": "", "description": "Destroys the given marker.", "example": "deleteMarkerLocal \"Marker1\"", "docSyntax": "deleteMarkerLocal markerName", "syntax": "deleteMarkerLocal <string>"}, "markerDir": {"version": "1.04", "tags": "", "description": "Get marker direction.", "example": "_mPos = markerDir \"markerOne\"", "docSyntax": "markerDir markerName", "syntax": "markerDir <string>"}, "markerText": {"version": "1.04", "tags": "", "description": "Get marker text.", "example": "hint format [\"Marker Text: %1\",markerText \"Marker1\"];", "docSyntax": "markerText markerName", "syntax": "markerText <string>"}, "setMarkerBrushLocal": {"version": "1.04", "tags": "", "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.", "example": "\"Marker1\" setMarkerBrushLocal \"DiagGrid\";", "docSyntax": "markerName setMarkerBrushLocal brush", "syntax": "<string> setMarkerBrushLocal brush"}, "setMarkerColorLocal": {"version": "1.04", "tags": "", "description": "Sets marker color for the given marker locally. Marker color names and their corresponding RGBA values for Arma 3 could be found in here: Arma 3: CfgMarkerColors", "example": "\"MarkerOne\" setMarkerColorLocal \"ColorBlack\";", "docSyntax": "markerName setMarkerColorLocal color", "syntax": "<string> setMarkerColorLocal <scalar>"}, "setMarkerDirLocal": {"version": "1.04", "tags": "", "description": "Sets the orientation of the marker.", "example": "\"Marker1\" setMarkerDirLocal 90;", "docSyntax": "markerName setMarkerDirLocal angle", "syntax": "<string> setMarkerDirLocal angle"}, "setMarkerPosLocal": {"version": "1.04", "tags": "", "description": "Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, its getPosWorld is used.", "example": "\"MarkerOne\" setMarkerPosLocal getMarkerPos \"MarkerTwo\";", "docSyntax": "markerName setMarkerPosLocal pos", "syntax": "<string> setMarkerPosLocal <array>"}, "setMarkerShapeLocal": {"version": "1.04", "tags": "", "description": "Selects shape (actual type) of the local marker.", "example": "\"Marker1\" setMarkerShapeLocal \"RECTANGLE\";", "docSyntax": "markerName setMarkerShapeLocal shape", "syntax": "<string> setMarkerShapeLocal shape"}, "setMarkerSizeLocal": {"version": "1.04", "tags": "", "description": "Set marker size. Size is in format [a-axis, b-axis].", "example": "\"MarkerOne\" setMarkerSizeLocal [100, 200];", "docSyntax": "markerName setMarkerSizeLocal [a-axis, b-axis]", "syntax": "<string> setMarkerSizeLocal [a-axis,b-axis]"}, "setMarkerTextLocal": {"version": "1.04", "tags": "", "description": "Sets the text label of an existing marker.", "example": "\"Marker1\" setMarkerTextLocal \"You are here.\";", "docSyntax": "markerName setMarkerTextLocal text", "syntax": "<string> setMarkerTextLocal <string>"}, "setMarkerTypeLocal": {"version": "1.04", "tags": "", "description": "Sets marker type locally. Marker type is a class name in CfgMarkers.", "example": "\"MarkerOne\" setMarkerTypeLocal \"Warning\";", "docSyntax": "markerName setMarkerTypeLocal type", "syntax": "<string> setMarkerTypeLocal type"}, "setUnitPosWeak": {"version": "1.04", "tags": "", "description": "Set unit position rules. This command is the lowest level of priority for setting unit position and to be used in scripted FSM's. Priorities are:", "example": "_soldier disableAI \"FSM\"; _soldier setUnitPosWeak \"DOWN\";", "docSyntax": "unit setUnitPosWeak mode", "syntax": "<objUnit> setUnitPosWeak mode"}, "airportSide": {"version": "1.08", "tags": "", "description": "Gets the side of an airport, set by setAirportSide. Default side is sideUnknown.", "example": "private _airportSide = airportSide 0;", "docSyntax": "airportSide id", "syntax": "airportSide <scalar>"}, "assignToAirport": {"version": "1.08", "tags": "", "description": "Assigns a plane to an airport ID or object.", "example": "plane1 assignToAirport 0", "docSyntax": "plane assignToAirport id", "syntax": "plane assignToAirport <scalar>"}, "attachedObject": {"version": "1.08", "tags": "", "description": "Returns the object a location is attached to. If the location is unattached, then objNull is returned.", "example": "_locAttachedObj = attachedObject myLocation;", "docSyntax": "attachedObject location", "syntax": "attachedObject location"}, "attachObject": {"version": "1.08", "tags": "", "description": "Attaches a location to the specified object. To detach a location, attach it to objNull.", "example": "myLocation attachObject player;", "docSyntax": "location attachObject object", "syntax": "location attachObject <object>"}, "clearVehicleInit": {"version": "1.08", "tags": "", "description": "Clears the object's init.", "example": "_tank1 setVehicleInit \"hint 'hi all'\"; processInitCommands; clearVehicleInit _tank1;", "docSyntax": "clearVehicleInit objectName", "syntax": "clearVehicleInit objectName"}, "createLocation": {"version": "1.08", "tags": "", "description": "Creates a location of the specified class and dimensions at the specified position. Classes are defined in CfgLocationTypes; for possible location types see Location Types.", "example": "_location = createLocation [\"NameVillage\" , [4035,2151,10], 100, 100];", "docSyntax": "createLocation [className, position, sizeX, sizeY]", "syntax": "createLocation [className,position,sizeX,sizeY]"}, "createMissionDisplay": {"version": "1.08", "tags": "", "description": "Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument \"root\".", "example": "_ChildDisplay = _Rootdisplay createMissionDisplay \"Tutorial\";", "docSyntax": "display createMissionDisplay missionRootDirectoryString", "syntax": "<uiDisplay> createMissionDisplay missionRootDirectoryString"}, "deleteLocation": {"version": "1.08", "tags": "", "description": "Deletes scripted location.", "example": "deleteLocation myLocation;", "docSyntax": "deleteLocation location", "syntax": "deleteLocation location"}, "drawLocation": {"version": "1.08", "tags": "", "description": "Used to draw locations in 2D Editor.", "example": "-", "docSyntax": "control drawLocation location", "syntax": "<uiControl> drawLocation location"}, "importance": {"version": "1.08", "tags": "", "description": "Returns a location's importance value.", "example": "_locationImportance = importance myLocation", "docSyntax": "importance location", "syntax": "importance location"}, "landAt": {"version": "1.08", "tags": "", "description": "Order an AI airplane to land at a given airport. ID is the number to identify which map airport you want the airplane to land at. See Arma: Airport IDs for more information.", "example": "_plane1 landAt 1;", "docSyntax": "plane landAt ID", "syntax": "plane landAt <scalar>"}, "lbSort": {"version": "1.08", "tags": "", "description": "Sorts listbox entries alphabetically ascending by their lbText.", "example": "lbSort _myControl;", "docSyntax": "lbSort control", "syntax": "lbSort <uiControl>"}, "lbSortByValue": {"version": "1.08", "tags": "", "description": "Sorts the ListBox entries by lbValue. The entries are sorted in ascending order. Also note that this command will mix up the entries randomly if multiple entries have the same value. In Arma 3 use lbSortBy to avoid this problem.", "example": "lbSortByValue _control;", "docSyntax": "lbSortByValue control", "syntax": "lbSortByValue <uiControl>"}, "Location": {"version": "1.08", "tags": ""}, "locationPosition": {"version": "1.08", "tags": "", "description": "Returns the position of a location. If the location is attached to an object, that object's position is returned.", "example": "_locationPos = locationPosition myLocation;", "docSyntax": "locationPosition location", "syntax": "locationPosition location"}, "nearestLocation": {"version": "1.08", "tags": "", "description": "Return the closest location of specified class to a given position. Checked range is unlimited (i.e. covers the whole map).", "example": "_nearestCity = nearestLocation [getPos player, \"nameCity\"];", "docSyntax": "nearestLocation [position, locationClass]", "syntax": "nearestLocation [position,locationClass]"}, "nearestLocations": {"version": "1.08", "tags": "", "description": "Returns an array of locations of chosen type(s) within the given radius of the given position, sorted from nearest to farthest.", "example": "_nearbyLocations = nearestLocations [position player, [\"RockArea\", \"VegetationFir\"], 100];", "docSyntax": "nearestLocations [position, [locationType1, locationType2, ...], radius, sortPosition]", "syntax": "nearestLocations [position,[locationType1,locationType2,...],radius,sortPosition]"}, "rectangular": {"version": "1.08", "tags": "", "description": "Checks if a location is rectangular (returns true) or elliptical (returns false).", "example": "_isRect = rectangular myLocation;", "docSyntax": "rectangular location", "syntax": "rectangular location"}, "setAirportSide": {"version": "1.08", "tags": "", "description": "Set owning side of the airport. ID is the number to identify which airport on the island you want to check.", "example": "0 setAirportSide east", "docSyntax": "id setAirportSide side", "syntax": "<scalar> setAirportSide <objSide>"}, "setDirection": {"version": "1.08", "tags": "", "description": "Sets the orientation of a location. The location's area and map icon (if its type uses an icon) will be rotated to this orientation.", "example": "_location = createLocation [\"VegetationPalm\", getPos player, 200, 200]; _location setText \"Benargee's Palm Tree\"; _location setDirection 45;", "docSyntax": "location setDirection direction", "syntax": "location setDirection direction"}, "setImportance": {"version": "1.08", "tags": "", "description": "Sets the importance value of location.", "example": "myLocation setImportance 2;", "docSyntax": "location setImportance value", "syntax": "location setImportance <scalar>"}, "setName": {"version": "1.08", "tags": "", "description": "Sets the name of a location or a person. In Arma 3 this can be used to set name of a person but only in single player.", "example": "myLocation setName \"My Location Name\";", "docSyntax": "unit setName name", "syntax": "<objUnit> setName <string>"}, "setPosition": {"version": "1.08", "tags": "", "description": "Sets the position of a location.", "example": "myLocation setPosition getPosATL player;", "docSyntax": "location setPosition pos", "syntax": "location setPosition <array>"}, "setRectangular": {"version": "1.08", "tags": "", "description": "Set the shape of a location to be either rectangular or elliptical. Locations default shape is elliptical.", "example": "myLocation setRectangular true;", "docSyntax": "location setRectangular set", "syntax": "location setRectangular set"}, "setSide": {"version": "1.08", "tags": "", "description": "Sets a location's side. The default side is Unknown.", "example": "_myLocation setSide resistance;", "docSyntax": "location setSide side", "syntax": "location setSide <objSide>"}, "setSize": {"version": "1.08", "tags": "", "description": "Sets the size (radius) of a location. The width is 2 * x, the height is 2 * y.", "example": "myLocation setSize [10,30]", "docSyntax": "location setSize size", "syntax": "location setSize size"}, "setText": {"version": "1.08", "tags": "", "description": "Sets the text associated with a location. This text will be displayed on the game map at the location's position.", "example": "myLocation setText \"Rahmadi Village\"", "docSyntax": "location setText text", "syntax": "location setText <string>"}, "setType": {"version": "1.08", "tags": "", "description": "Changes a location to the specified class. Location classes are defined in CfgLocationTypes.", "example": "myLocation setType \"RockArea\"", "docSyntax": "location setType name", "syntax": "location setType <string>"}, "size": {"version": "1.08", "tags": "", "description": "Returns a location's size.", "example": "_locSize = size myLocation", "docSyntax": "size location", "syntax": "size location"}, "sizeOf": {"version": "1.08", "tags": "", "description": "Returns the diameter of bounding sphere of the object of given classname in meters. If you need to estimate the size of the object more precisely, use boundingBox or boundingBoxReal.", "example": "_dimension = sizeOf \"M1Abrams\"; //\u00a0Returns 10.7833", "docSyntax": "sizeOf classname", "syntax": "sizeOf classname"}, "type": {"version": "1.08", "tags": "", "description": "Returns a string of a Location's class name or Task's name (same as taskName).", "example": "_locationType = type myLocation;", "docSyntax": "type location", "syntax": "type location"}}