{"abs": {"version": "CMD", "tags": "", "description": "Returns absolute (positive) value of a real number.", "example": "_n = abs -3; //\u00a0Returns 3", "docSyntax": "abs x", "syntax": "abs x"}, "accTime": {"version": "CMD", "tags": "", "description": "Returns the current simulation acceleration factor.", "example": "_acc = accTime;", "docSyntax": "accTime", "syntax": "accTime"}, "acos": {"version": "CMD", "tags": "", "description": "ArcCosine of a number, result in Degrees", "example": "_degrees = acos 0.5; //\u00a0Returns 60", "docSyntax": "acos x", "syntax": "acos x"}, "action": {"version": "CMD", "tags": "", "description": "Make a unit perform an action. See Category:Actions for action names and syntaxes.", "example": "player action [\"SitDown\", player];", "docSyntax": "unit action actionArray", "syntax": "<objUnit> action actionArray"}, "actionKeys": {"version": "CMD", "tags": "", "description": "Returns Array containing dikCodes of keys, buttons and combos assigned to the given user action. Action names could be found in config class ControllerSchemes or user action names or user profile, for example:", "example": "_arrayOfNumbers = actionKeys \"ReloadMagazine\";", "docSyntax": "actionKeys userAction", "syntax": "actionKeys userAction"}, "actionKeysImages": {"version": "CMD", "tags": "", "description": "Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes or user action names.", "example": "_text = actionKeysImages \"ReloadMagazine\";", "docSyntax": "actionKeysImages userAction", "syntax": "actionKeysImages userAction"}, "actionKeysNames": {"version": "CMD", "tags": "", "description": "Returns a list of button names assigned to the given user action. Action names can be found in config class ControllerSchemes or user action names.", "example": "_list = actionKeysNames \"ReloadMagazine\"; //\u00a0\"\"\"R\"\" or \"\"XBox X\"\"\"", "docSyntax": "actionKeysNames userAction", "syntax": "actionKeysNames userAction"}, "activateAddons": {"version": "CMD", "tags": "", "description": "Activates the listed addons.", "example": "activateAddons [\"BISOFP\"];", "docSyntax": "activateAddons addonsList", "syntax": "activateAddons addonsList"}, "activateKey": {"version": "CMD", "tags": "", "description": "Activates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the Description.ext#Mission Keys chapter.", "example": "activateKey \"Mission04Key\";", "docSyntax": "activateKey keyname", "syntax": "activateKey keyname"}, "addAction": {"version": "CMD", "tags": "", "description": "Adds an entry to the action menu of an object. The action can only be activated when in proximity to the object and looking at it. Adding an action to the player makes that action available to the player at all times. For event handling of user interaction see inGameUISetEventHandler.", "example": "//\u00a0short and sweet player addAction [\"a useless action that does nothing\", {}]; player addAction [\"<t color='#FF0000'>This Useless Action Is RED</t>\", {hint \"RED\"}]; player addAction [\"Hint Hello!\", { hint format [\"Hello %1!\", name player] }]; player addAction [\"String Exec\", \"hint 'this is also compiled'\"];", "docSyntax": "object addAction [title, script, arguments, priority, showWindow, hideOnUse, shortcut, condition, positionInModel, radius, radiusView, showIn3D, available, textDefault, textToolTip]", "syntax": "<object> addAction [title,script,arguments,priority,showWindow,hideOnUse,shortcut,condition,positionInModel,radius,radiusView,showIn3D,available,textDefault,textToolTip]"}, "addEventHandler": {"version": "CMD", "tags": "", "description": "Adds an Event Handler to the given object.", "example": "this addEventHandler [\"Killed\", { params [\"_unit\", \"_killer\"]; systemChat format [\"%1 has been killed by %2.\", _unit, _killer]; }];", "docSyntax": "target addEventHandler [type, code]", "syntax": "<object> addEventHandler [type,<code>]"}, "addMagazine": {"version": "CMD", "tags": "", "description": "Adds a magazine to a person. Infantry units can only carry a specific number of magazines, once the magazine slots are filled (or uniform/vest/bagpack are full in Arma 3), any further addMagazine commands are ignored. If class of magazine does not exist, an error message is printed in .rpt:", "example": "player addMagazine \"30Rnd_556x45_STANAG\";", "docSyntax": "unitName addMagazine magazineName", "syntax": "<objUnit> addMagazine magazineName"}, "addMagazineCargo": {"version": "CMD", "tags": "", "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units. Once the magazine cargo space is filled up, any further addMagazineCargo commands are ignored.", "example": "_truck addMagazineCargo [\"M16\", 5];", "docSyntax": "vehicleName addMagazineCargo [magazineName, count]", "syntax": "vehicleName addMagazineCargo [magazineName,count]"}, "addMagazinePool": {"version": "CMD", "tags": "", "description": "Adds magazines to the magazine pool, of which the player may choose in the following mission. Available in campaigns only.", "example": "addMagazinePool [\"M16\", 20];", "docSyntax": "addMagazinePool [magazineName, count]", "syntax": "addMagazinePool [magazineName,count]"}, "addPublicVariableEventHandler": {"version": "CMD", "tags": "", "description": "This command is deprecated since the introduction of remoteExec and remoteExecCall.", "example": "\"publicThis\" addPublicVariableEventHandler { hint format [ \"%1 has been updated to: %2\", _this select 0, _this select 1 ] };", "docSyntax": "varName addPublicVariableEventHandler code", "syntax": "varName addPublicVariableEventHandler <code>"}, "addRating": {"version": "CMD", "tags": "", "description": "Add a number to the rating of a unit - negative values can be used to reduce the rating.", "example": "player addRating 2000;", "docSyntax": "unitName addRating rating", "syntax": "<objUnit> addRating rating"}, "addScore": {"version": "CMD", "tags": "", "description": "Adds a number to the score of a unit. Negative values will remove from the score.", "example": "unit addScore 10;", "docSyntax": "unit addScore score", "syntax": "<objUnit> addScore score"}, "addSwitchableUnit": {"version": "CMD", "tags": "", "description": "Adds a unit to the list of units available for Team Switch. Units marked as playable in editor are automatically switchable. This command adds non-playable unit into array of switchableUnits and makes them available for teamSwitch. Singleplayer only!", "example": "addSwitchableUnit bob;", "docSyntax": "addSwitchableUnit unit", "syntax": "addSwitchableUnit <objUnit>"}, "addVehicle": {"version": "CMD", "tags": "", "description": "Adds a specified vehicle for use by a specified AI led group.", "example": "_grp addVehicle _vehicle;", "docSyntax": "groupName addVehicle vehicleName", "syntax": "groupName addVehicle vehicleName"}, "addWaypoint": {"version": "CMD", "tags": "", "description": "Adds (or inserts when index is given) a new waypoint to a group. The waypoint is placed randomly within a circle with the given center and radius. The function returns a waypoint with format [group, index].", "example": "_wp = _grp addWaypoint [position player, 0];", "docSyntax": "groupName addWaypoint [center, radius, index, name]", "syntax": "groupName addWaypoint [center,radius,<scalar>,<string>]"}, "addWeapon": {"version": "CMD", "tags": "", "description": "Add a weapon to a unit. For a global version of this command see addWeaponGlobal. Infantry units can only carry a specific number of weapons, once the weapon slots are filled, any further addWeapon commands are ignored.", "example": "player addMagazine \"30Rnd_556x45_Stanag\"; player addWeapon \"BAF_L85A2_RIS_SUSAT\";", "docSyntax": "object addWeapon weapon", "syntax": "<object> addWeapon <string>"}, "addWeaponCargo": {"version": "CMD", "tags": "", "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units. Ignores available cargo space.", "example": "_truck addWeaponCargo [\"M16\", 5];", "docSyntax": "vehicleName addWeaponCargo [weaponName, count]", "syntax": "vehicleName addWeaponCargo [weaponName,count]"}, "addWeaponPool": {"version": "CMD", "tags": "", "description": "Add weapons to the weapon pool, of which the player may choose in the following mission. Available in campaigns only.", "example": "addWeaponPool [\"M16\",5];", "docSyntax": "addWeaponPool [weaponName, count]", "syntax": "addWeaponPool [weaponName,count]"}, "airportSide": {"version": "CMD", "tags": "", "description": "Gets the side of an airport, set by setAirportSide. Default side is sideUnknown.", "example": "private _airportSide = airportSide 0;", "docSyntax": "airportSide id", "syntax": "airportSide <scalar>"}, "alive": {"version": "CMD", "tags": "", "description": "Check if given vehicle/person/building is alive (i.e. not dead or destroyed).", "example": "SQS:", "docSyntax": "alive object", "syntax": "alive <object>"}, "allowDammage": {"version": "CMD", "tags": "", "description": "Allow or prevent an object being damaged (or injured, or killed). The command does not prevent object from taking scripted damage such as setDamage or setHit.", "example": "player allowDammage false;", "docSyntax": "object allowDammage allow", "syntax": "<object> allowDammage allow"}, "allowFleeing": {"version": "CMD", "tags": "", "description": "Sets the cowardice level (the lack of courage or bravery) of a group or unit.", "example": "_group1 allowFleeing 0;", "docSyntax": "unitOrGroup allowFleeing cowardice", "syntax": "unitOrGroup allowFleeing cowardice"}, "allowGetIn": {"version": "CMD", "tags": "", "description": "Set if the units given in the list are allowed to enter vehicles.", "example": "[_soldier1, _soldier2] allowGetIn true;", "docSyntax": "unitArray allowGetIn allow", "syntax": "unitArray allowGetIn allow"}, "ammo": {"version": "CMD", "tags": "", "description": "Check how many rounds are left in the currently loaded magazine in the given muzzle.", "example": "_count = player ammo \"M16\"; //\u00a0returns 30 in case of a full magazine", "docSyntax": "unit ammo muzzle", "syntax": "<objUnit> ammo muzzle"}, "and": {"version": "CMD", "tags": "", "description": "Returns true only if both conditions are true. In case of the alternative syntax, lazy evaluation is used - if left operand is false, evaluation of the right side is ignored.", "example": "if ((not isNull player) and (alive player) and (_enemycount == 0)) then { hint \"you win\u00a0!\"; };", "docSyntax": "a and b", "syntax": "a and b"}, "animate": {"version": "CMD", "tags": "", "description": "Activates given object animation. Animation is defined in CfgModels animations class. Class names listed in CfgVehicles AnimationSources bound to \"Proxy\" controller can also be animated with animate command (see Arma 3: createVehicle/vehicles).", "example": "_building animate [\"maindoor\", 1];", "docSyntax": "object animate [animationName, phase, speed]", "syntax": "<object> animate [animationName,phase,<scalar>]"}, "animationPhase": {"version": "CMD", "tags": "", "description": "Returns the phase of the given animation on the given object. Animation can be scripted (animate, animateSource, animateDoor) or engine driven. Animation names for an object could be found out with animationNames command. When animation is rotation, like with \"MainTurret\" for example, the output is in radians, to convert to degrees use deg command.", "example": "_building animate [\"maindoor\",1]; sleep 1; _p = _building animationPhase \"maindoor\";//\u00a0Returns 1, if the animation speed is two seconds", "docSyntax": "object animationPhase animationName", "syntax": "<object> animationPhase animationName"}, "animationState": {"version": "CMD", "tags": "", "description": "Returns the name of a unit's current primary animation. Seems to be forced to lower case in Arma 3.", "example": "_state = animationState player;", "docSyntax": "animationState unitName", "syntax": "animationState <objUnit>"}, "asin": {"version": "CMD", "tags": "", "description": "Arcsine of a number, result in Degrees.", "example": "_degrees = asin 0.5; //\u00a0Returns 30", "docSyntax": "asin x", "syntax": "asin x"}, "assert": {"version": "CMD", "tags": "", "description": "Tests a condition and if the condition is false, displays error on screen (if -showscripterrors enabled) and logs error into .rpt file. It does not interrupt the script execution. If script was pre-processed with preprocessFileLineNumbers, it will also show/log the error line number and the file name.", "example": "assert (1 > 2);", "docSyntax": "assert condition", "syntax": "assert condition"}, "assignAsCargo": {"version": "CMD", "tags": "", "description": "Assign a unit as cargo of a vehicle. Used together with orderGetIn to order a unit to get in as cargo into a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the cargo space of the vehicle.", "example": "_soldier1 assignAsCargo _truck; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsCargo vehicleName", "syntax": "<objUnit> assignAsCargo vehicleName"}, "assignAsCommander": {"version": "CMD", "tags": "", "description": "Assign a unit as commander of a vehicle. Used together with orderGetIn to order subordinate units to get in as commander of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the commander place of the vehicle.", "example": "_soldier1 assignAsCommander _tank; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsCommander vehicleName", "syntax": "<objUnit> assignAsCommander vehicleName"}, "assignAsDriver": {"version": "CMD", "tags": "", "description": "Assign a unit as driver of a vehicle. Used together with orderGetIn to order subordinate units to get in as driver of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the driver place of the vehicle.", "example": "_soldier1 assignAsDriver _tank; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsDriver vehicleName", "syntax": "<objUnit> assignAsDriver vehicleName"}, "assignAsGunner": {"version": "CMD", "tags": "", "description": "Assign a unit as gunner of a vehicle. Used together with orderGetIn to order subordinate units to get in as gunner of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the gunner place of the vehicle.", "example": "_soldier1 assignAsGunner _tank; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsGunner vehicleName", "syntax": "<objUnit> assignAsGunner vehicleName"}, "assignedTarget": {"version": "CMD", "tags": "", "description": "Returns the target assigned to an unit or the vehicle's effectiveCommander. The target can be assigned by the group/vehicle/formation leader (as player via quick command menu or \"target\" complex command menu).", "example": "_target = assignedTarget _T72;", "docSyntax": "assignedTarget vehicleName", "syntax": "assignedTarget vehicleName"}, "assignedVehicle": {"version": "CMD", "tags": "", "description": "Returns the vehicle to which a unit is assigned, usually with assignAsXXX command. If no vehicle is assigned objNull is returned.", "example": "_vehicle = assignedVehicle player;", "docSyntax": "assignedVehicle unit", "syntax": "assignedVehicle <objUnit>"}, "assignedVehicleRole": {"version": "CMD", "tags": "", "description": "Returns the role a unit is assigned to within its assigned vehicle.", "example": "_RoleArray = assignedVehicleRole player;", "docSyntax": "assignedVehicleRole unitName", "syntax": "assignedVehicleRole <objUnit>"}, "assignTeam": {"version": "CMD", "tags": "", "description": "Team", "example": "_soldier2 assignTeam \"RED\";", "docSyntax": "unit assignTeam team", "syntax": "<objUnit> assignTeam team"}, "assignToAirport": {"version": "CMD", "tags": "", "description": "Assigns a plane to an airport ID or object.", "example": "plane1 assignToAirport 0;", "docSyntax": "plane assignToAirport id", "syntax": "plane assignToAirport <scalar>"}, "atan": {"version": "CMD", "tags": "", "description": "Returns the arcus tangens.", "example": "_degrees = atan 1; //\u00a045", "docSyntax": "atan x", "syntax": "atan x"}, "atan2": {"version": "CMD", "tags": "", "description": "ArcTangent of y/x. Used to determine the angle of a vector [y,x]. Result in Degrees between -180 and 180.", "example": "_yx = [5,3]; _degrees = (_yx select 0) atan2 (_yx select 1); //\u00a059.0362", "docSyntax": "y atan2 x", "syntax": "y atan2 x"}, "atg": {"version": "CMD", "tags": "", "description": "Returns the arcus tangens.", "example": "_atanThreeFifth = atg 3/5;", "docSyntax": "atg x", "syntax": "atg x"}, "attachedObject": {"version": "CMD", "tags": "", "description": "Returns the object a location is attached to. If the location is unattached, then objNull is returned.", "example": "_locAttachedObj = attachedObject myLocation;", "docSyntax": "attachedObject location", "syntax": "attachedObject location"}, "attachObject": {"version": "CMD", "tags": "", "description": "Attaches a location to the specified object. To detach a location, attach it to objNull.", "example": "myLocation attachObject player;", "docSyntax": "location attachObject object", "syntax": "location attachObject <object>"}, "attackEnabled": {"version": "CMD", "tags": "", "description": "Return whether a group's leader can issue attack commands to soldiers under his command.", "example": "if (not attackEnabled _soldier) then { _soldier setCombatMode \"Careless\" };", "docSyntax": "attackEnabled name", "syntax": "attackEnabled <string>"}, "behaviour": {"version": "CMD", "tags": "", "description": "Returns the behaviour of the individual unit, this is why it only accepts Object as the argument. For Arma 3 behaviour explanation see Arma_3_AI_Behavior", "example": "_soldier setBehaviour \"CARELESS\"; _b = behaviour _soldier; //\u00a0returns \"CARELESS\"", "docSyntax": "behaviour unit", "syntax": "behaviour <objUnit>"}, "benchmark": {"version": "CMD", "tags": "", "description": "Returns the value of \"3D Performance\" in OFP Preferences (flashpoint.cfg). This can be used to estimate the computer performance to adapt CPU and GPU demanding settings like view distance dynamically in missions.", "example": "? (benchmark > 2000) : setViewDistance 2000", "docSyntax": "benchmark", "syntax": "benchmark"}, "boundingBox": {"version": "CMD", "tags": "", "description": "Returns a bounding box of given object in model coordinate space, adjusted according to destruction/animation of an object. This command is rather generous on the size estimation, for more precise coordinates use boundingBoxReal.", "example": "private _box = boundingBox _abrams;", "docSyntax": "boundingBox object", "syntax": "boundingBox <object>"}, "buildingPos": {"version": "CMD", "tags": "", "description": "Returns position of a given indexed position in a building.", "example": "_soldier setPosATL (_house1 buildingPos 2);", "docSyntax": "building buildingPos index", "syntax": "building buildingPos <scalar>"}, "buttonAction": {"version": "CMD", "tags": "", "description": "Returns the action assigned to a control of the currently active user dialog. Can be used for buttons and active texts. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "buttonSetAction [100, { player exec \"reply.sqs\" }] _action = buttonAction 100; //\u00a0Returns { player exec \"reply.sqs\" }", "docSyntax": "buttonAction idc", "syntax": "buttonAction <scalar>"}, "buttonSetAction": {"version": "CMD", "tags": "", "description": "\ud83d\udd56", "example": "buttonSetAction [100, \"player exec \"\"reply.sqs\"\"\"];", "docSyntax": "buttonSetAction [idc, action]", "syntax": "buttonSetAction [<scalar>,action]"}, "cadetMode": {"version": "CMD", "tags": "", "description": "Prior to Arma 3 it returns if the player is currently playing in cadet or veteran mode.", "example": "SQS Syntax:", "docSyntax": "cadetMode", "syntax": "cadetMode"}, "camCommand": {"version": "CMD", "tags": "", "description": "Executes a command on the given camera / actor object. Known commands:", "example": "_camera camCommand \"manual on\";", "docSyntax": "camera camCommand command", "syntax": "<objCamera> camCommand command"}, "camCommit": {"version": "CMD", "tags": "", "description": "Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. For camPrepareXXX commands use camCommitPrepared.", "example": "SQS Syntax:", "docSyntax": "camera camCommit time", "syntax": "<objCamera> camCommit <scalar>"}, "camCommitPrepared": {"version": "CMD", "tags": "", "description": "Smoothly conducts the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. This command is for use with camPrepareXXX commands. For the normal cam command use camCommit.", "example": "//\u00a0create a camera object _cam = \"camera\" camCreate [5600, 4800, 10]; _cam camPrepareTarget player; _cam cameraEffect [\"internal\", \"BACK\"]; _cam camCommitPrepared 0; //\u00a0smoothly move the camera to its new position in 6 seconds _cam camPreparePos [5680, 4720, 20]; _cam camCommitPrepared 6; waitUntil { camCommitted _cam }; //\u00a0proceed", "docSyntax": "camera camCommitPrepared time", "syntax": "<objCamera> camCommitPrepared <scalar>"}, "camCommitted": {"version": "CMD", "tags": "", "description": "Checks if the conduction of the last camCommit call already finished.", "example": "SQS:", "docSyntax": "camCommitted camera", "syntax": "camCommitted <objCamera>"}, "camCreate": {"version": "CMD", "tags": "", "description": "Create a camera or a seagull object on the given position. The creation happens immediately and doesn't wait for camCommit.", "example": "_cam = \"camera\" camCreate (ASLToAGL eyePos player);", "docSyntax": "type camCreate position", "syntax": "type camCreate position"}, "camDestroy": {"version": "CMD", "tags": "", "description": "Destroys camera object created with camCreate. This command doesn't need camCommit.", "example": "camDestroy _cam;", "docSyntax": "camDestroy object", "syntax": "camDestroy <object>"}, "cameraEffect": {"version": "CMD", "tags": "", "description": "Sets the given effect on the given camera. If you want to switch the screen directly to the first-person, aiming, third-person or group view of an object, use switchCamera instead. The effect type \"Terminate\" is used to exit the current camera view and switch back to the player's view. Does not need camCommit.", "example": "_cam cameraEffect [\"internal\", \"BACK\"];", "docSyntax": "camera cameraEffect [effectName, effectPosition, r2tName]", "syntax": "<objCamera> cameraEffect [effectName,effectPosition,r2tName]"}, "cameraInterest": {"version": "CMD", "tags": "", "description": "Return camera interest for given entity, as set by setCameraInterest, or as autodetected.", "example": "camInterest = cameraInterest myUnit;", "docSyntax": "cameraInterest entity", "syntax": "cameraInterest entity"}, "cameraOn": {"version": "CMD", "tags": "", "description": "Returns the vehicle to which the camera is attached. If you need the person, see focusOn.", "example": "_object = cameraOn;", "docSyntax": "cameraOn", "syntax": "cameraOn"}, "campaignConfigFile": {"version": "CMD", "tags": "", "description": "Returns root of campaign description.ext entries hierarchy.", "example": "_config = campaignConfigFile;", "docSyntax": "campaignConfigFile", "syntax": "campaignConfigFile"}, "camPreload": {"version": "CMD", "tags": "", "description": "Preloads the scene for the prepared camera with given timeout after which preloading is aborted. Max timeout is 30 seconds. Timeout of 0 means max timeout of 30 seconds as well.", "example": "_camera camPreload 5;", "docSyntax": "camera camPreload timeout", "syntax": "<objCamera> camPreload timeout"}, "camPreloaded": {"version": "CMD", "tags": "", "description": "Checks whether the camera has finished preloading.", "example": "if (camPreloaded _camera) exitWith { hint \"loaded\" };", "docSyntax": "camPreloaded camera", "syntax": "camPreloaded <objCamera>"}, "camPrepareBank": {"version": "CMD", "tags": "", "description": "Prepares the camera bank angle.", "example": "_camera camPrepareBank -0.1;", "docSyntax": "camera camPrepareBank bank", "syntax": "<objCamera> camPrepareBank bank"}, "camPrepareDir": {"version": "CMD", "tags": "", "description": "Prepares the camera heading.", "example": "_camera camPrepareDir 150;", "docSyntax": "camera camPrepareDir direction", "syntax": "<objCamera> camPrepareDir direction"}, "camPrepareDive": {"version": "CMD", "tags": "", "description": "Prepares the camera dive angle.", "example": "_camera camPrepareDive -0.1;", "docSyntax": "camera camPrepareDive dive", "syntax": "<objCamera> camPrepareDive dive"}, "camPrepareFocus": {"version": "CMD", "tags": "", "description": "focusRange is . Prepares the camera focus blur. [-1,1] will reset default values (auto focusing), [-1,-1] will disable postprocessing (all is focused). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareFocus [50, 1];", "docSyntax": "camera camPrepareFocus [distance, blur]", "syntax": "<objCamera> camPrepareFocus [<scalar>,blur]"}, "camPrepareFov": {"version": "CMD", "tags": "", "description": "Prepares the camera field of view (zoom). The default zoom level is 0.75, 0.01 is the nearest and 2 the furthest zoom value. The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareFov 0.1;", "docSyntax": "camera camPrepareFov fieldOfView", "syntax": "<objCamera> camPrepareFov fieldOfView"}, "camPrepareFovRange": {"version": "CMD", "tags": "", "description": "Prepares the camera field of view range for auto zooming.", "example": "_camera camPrepareFovRange [0.1, 0.5];", "docSyntax": "camera camPrepareFovRange fovRange", "syntax": "<objCamera> camPrepareFovRange fovRange"}, "camPreparePos": {"version": "CMD", "tags": "", "description": "Prepares the camera position. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPreparePos getPos player;", "docSyntax": "camera camPreparePos position", "syntax": "<objCamera> camPreparePos position"}, "camPrepareRelPos": {"version": "CMD", "tags": "", "description": "Prepares the camera position relative to the current position of the currect target (see camPrepareTarget). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareRelPos [10,5,-2];", "docSyntax": "camera camPrepareRelPos position", "syntax": "<objCamera> camPrepareRelPos position"}, "camPrepareTarget": {"version": "CMD", "tags": "", "description": "Prepares the camera target to a position or to a target. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareTarget getPos player;", "docSyntax": "camera camPrepareTarget position", "syntax": "<objCamera> camPrepareTarget position"}, "camSetBank": {"version": "CMD", "tags": "", "description": "Sets camera bank angle. Does not commit changes.", "example": "_camera camSetBank -0.1;", "docSyntax": "camera camSetBank bank", "syntax": "<objCamera> camSetBank bank"}, "camSetDir": {"version": "CMD", "tags": "", "description": "Sets the orientation of the given camera in the direction of the given vector. Needs camCommit.", "example": "Since Arma 3:", "docSyntax": "camera camSetDir direction", "syntax": "<objCamera> camSetDir direction"}, "camSetDive": {"version": "CMD", "tags": "", "description": "Sets camera dive angle. Does not commit changes.", "example": "_camera camSetDive -0.1;", "docSyntax": "camera camSetDive dive", "syntax": "<objCamera> camSetDive dive"}, "camSetFocus": {"version": "CMD", "tags": "", "description": "Sets camera focus range in format [distance, blur]. blur param - sets the camera focus blur. It does not automatically commit changes (see camCommit). Use [-1, -1] to disable focus completely.", "example": "_camera camSetFocus [50, 1];", "docSyntax": "camera camSetFocus focusRange", "syntax": "<objCamera> camSetFocus focusRange"}, "camSetFov": {"version": "CMD", "tags": "", "description": "Set the zoom level (Field Of View) of the given camera.", "example": "_cam camSetFov 0.75;", "docSyntax": "camera camSetFov level", "syntax": "<objCamera> camSetFov level"}, "camSetFovRange": {"version": "CMD", "tags": "", "description": "Set the zoom level (Field Of View) start and end values for automatical zooming.", "example": "_cam camSetFovRange [0.1, 0.7];", "docSyntax": "camera camSetFovRange fovRange", "syntax": "<objCamera> camSetFovRange fovRange"}, "camSetPos": {"version": "CMD", "tags": "", "description": "Sets the position of the given camera or seagull (see camCreate). It is worth mentioning that camera position can also be set with setPos, in which case it would be instant. With camSetPos it is possible to make smooth position transition in time, defined with camCommit, which is required in this case.", "example": "_cam camSetPos [2300,1000,130]; _cam camCommit 10;", "docSyntax": "camera camSetPos position", "syntax": "<objCamera> camSetPos position"}, "camSetRelPos": {"version": "CMD", "tags": "", "description": "Sets the position of the given camera relative to its target, set with camSetTarget. Needs a call to camCommit to be conducted.", "example": "_cam camSetTarget _car; _cam camSetRelPos [0,10,8];", "docSyntax": "camera camSetRelPos position", "syntax": "<objCamera> camSetRelPos position"}, "camSetTarget": {"version": "CMD", "tags": "", "description": "Set the target object or position where the given camera should point at. Needs the call of camCommit to be conducted. To reset the target use objNull.", "example": "_camera camSetTarget player;", "docSyntax": "camera camSetTarget target", "syntax": "<objCamera> camSetTarget <object>"}, "camUseNVG": {"version": "CMD", "tags": "", "description": "Set / clear using of night vision during cutscenes. This command only works with camCreate created camera that is currently the main camera for the player (see example).", "example": "camUseNVG true;", "docSyntax": "camUseNVG set", "syntax": "camUseNVG set"}, "canFire": {"version": "CMD", "tags": "", "description": "Returns true if the given vehicle is still able to fire. For the command to return true, vehicle must be alive, have weapon operator and the weapon cannot be damaged \u2265 0.9 but can be empty due to running out of ammo. If mission starts with vehicle having no ammo or setVehicleAmmo 0 command is executed on the vehicle, then canFire will always report false for it.", "example": "if (not canFire _tank) then { player sideChat \"Tank disabled!\"; };", "docSyntax": "canFire unitName", "syntax": "canFire <objUnit>"}, "canMove": {"version": "CMD", "tags": "", "description": "Returns if the given vehicle is still able to move.", "example": "if (not canMove _tank) then { player sideChat \"He's nailed on the ground! Now hurry!\"; };", "docSyntax": "canMove vehicle", "syntax": "canMove <objVehicle>"}, "canStand": {"version": "CMD", "tags": "", "description": "Returns if the given soldier is able to stand up. It only checks for the unit's legs and not its alive/dead status - it can return true for a dead unit.", "example": "SQS:", "docSyntax": "canStand unit", "syntax": "canStand <objUnit>"}, "captive": {"version": "CMD", "tags": "", "description": "Returns the captive state of the given unit (set with setCaptive). A captive unit will not be attacked by its enemies.", "example": "if (captive _general) then { removeAllWeapons _general; };", "docSyntax": "captive object", "syntax": "captive <object>"}, "ceil": {"version": "CMD", "tags": "", "description": "The ceil value of x.", "example": "ceil 5.25; //\u00a0Result is 6", "docSyntax": "ceil x", "syntax": "ceil x"}, "cheatsEnabled": {"version": "CMD", "tags": "", "description": "Checks whether cheats are enabled (whether the designers' version is running).", "example": "_enabled = cheatsEnabled;", "docSyntax": "cheatsEnabled", "syntax": "cheatsEnabled"}, "clearMagazineCargo": {"version": "CMD", "tags": "", "description": "Remove all magazines from the given vehicle's magazine cargo space.", "example": "clearMagazineCargo _truck;", "docSyntax": "clearMagazineCargo vehicleName", "syntax": "clearMagazineCargo vehicleName"}, "clearMagazinePool": {"version": "CMD", "tags": "", "description": "Removes all magazines from the magazine pool, of which the player may choose in the following missions. Available in campaigns only.", "example": "clearMagazinePool;", "docSyntax": "clearMagazinePool", "syntax": "clearMagazinePool"}, "clearRadio": {"version": "CMD", "tags": "", "description": "Clean up the content of radio protocol history.", "example": "clearRadio;", "docSyntax": "clearRadio", "syntax": "clearRadio"}, "clearVehicleInit": {"version": "CMD", "tags": "", "description": "Clears the object's init.", "example": "_tank1 setVehicleInit \"hint 'hi all'\"; processInitCommands; clearVehicleInit _tank1;", "docSyntax": "clearVehicleInit objectName", "syntax": "clearVehicleInit objectName"}, "clearWeaponCargo": {"version": "CMD", "tags": "", "description": "Remove all weapons from the given vehicle's weapon cargo space.", "example": "clearWeaponCargo _truck;", "docSyntax": "clearWeaponCargo vehicleName", "syntax": "clearWeaponCargo vehicleName"}, "clearWeaponPool": {"version": "CMD", "tags": "", "description": "Remove all weapons from the weapon pool, of which the player may choose in the following missions. Available in campaigns only.", "example": "clearWeaponPool;", "docSyntax": "clearWeaponPool", "syntax": "clearWeaponPool"}, "closeDialog": {"version": "CMD", "tags": "", "description": "Closes the currently active dialog with exit code. It does not instantly close the dialog but does it on next simulation cycle. Most common exit codes are:", "example": "closeDialog 2;", "docSyntax": "closeDialog exitcode", "syntax": "closeDialog exitcode"}, "closeDisplay": {"version": "CMD", "tags": "", "description": "Closes given display with exit code. It does not instantly close the display but does it on next simulation cycle. Most common exit codes are:", "example": "_display closeDisplay 1;", "docSyntax": "display closeDisplay exitCode", "syntax": "<uiDisplay> closeDisplay exitCode"}, "combatMode": {"version": "CMD", "tags": "", "description": "Returns the combat mode of the given AI group. See setCombatMode for more information about combat modes.", "example": "if (combatMode _grp1 == \"BLUE\") then {_grp1 setCombatMode \"GREEN\"};", "docSyntax": "combatMode group", "syntax": "combatMode <objGroup>"}, "commander": {"version": "CMD", "tags": "", "description": "In Operation Flashpoint it returns the commander of a vehicle. Since Armed Assault it returns the primary observer. The commander of a vehicle can be found with effectiveCommander.", "example": "moveOut commander _tank;", "docSyntax": "commander vehicle", "syntax": "commander <objVehicle>"}, "commandFire": {"version": "CMD", "tags": "", "description": "Order the given unit to fire on the given target (via the radio). If the target is objNull, the unit is ordered to fire on its current target (set with doTarget or commandTarget).", "example": "_ESoldier1 commandFire _WSoldier1;", "docSyntax": "unitName commandFire target", "syntax": "<objUnit> commandFire <object>"}, "commandFollow": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to follow another from his own group (via radio). It can also be used to resume unit formation after e.g doStop.", "example": "_soldier1 commandFollow _soldier2;", "docSyntax": "unit commandFollow unitLead", "syntax": "<objUnit> commandFollow unitLead"}, "commandFSM": {"version": "CMD", "tags": "", "description": "Orders a unit to process command defined by FSM file (via the radio).", "example": "_soldierOne commandFSM [\"move.fsm\", position player, player];", "docSyntax": "unitName commandFSM [fsmFile, position, target]", "syntax": "<objUnit> commandFSM [fsmFile,position,<object>]"}, "commandGetOut": {"version": "CMD", "tags": "", "description": "Orders one or multiple units to get out from the vehicle (via the radio). Same as doGetOut with latter being silent.", "example": "commandGetOut _unitOne;", "docSyntax": "commandGetOut unit(s)", "syntax": "commandGetOut <objUnit>(s)"}, "commandMove": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to move to the given location (via the radio). Exactly the same as doMove, except this command displays a radio message. The command will not put a visible waypoint marker unlike when move command is given via commanding menu.", "example": "_soldier1 commandMove getMarkerPos \"Marker1\";", "docSyntax": "unitName commandMove position", "syntax": "<objUnit> commandMove position"}, "commandStop": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to stop via radio. A stop command will never finish, the unit(s) will never be ready.", "example": "commandStop _soldier1;", "docSyntax": "commandStop target", "syntax": "commandStop <object>"}, "commandTarget": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to target the given target (via the radio). Command given to the player, puts a red square with words Target and Distance on player's HUD at target location. If player in vehicle and has radar facilities, it also adds target marker to the radar.", "example": "_ESoldier1 commandTarget _WSoldier1;", "docSyntax": "unit commandTarget target", "syntax": "<objUnit> commandTarget <object>"}, "commandWatch": {"version": "CMD", "tags": "", "description": "Orders the unit(s) to watch the given position or target (via the radio). Use objNull as the target to order a unit to stop watching a position/target.", "example": "_soldierOne commandWatch markerPos \"MarkerMoveOne\";", "docSyntax": "units commandWatch position", "syntax": "units commandWatch position"}, "comment": {"version": "CMD", "tags": "", "description": "Defines a comment. See SQF Syntax - Comments to learn more about comments.", "example": "In a preprocessed SQF script (e.g. when doing execVM \"myScript.sqf\")", "docSyntax": "comment text", "syntax": "comment <string>"}, "composeText": {"version": "CMD", "tags": "", "description": "Creates a Structured Text by joining the given structured or plain text arguments.", "example": "hint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "composeText arguments", "syntax": "composeText arguments"}, "configFile": {"version": "CMD", "tags": "", "description": "Return root of config entries hierarchy.", "example": "_isMyClassActive = isClass (configFile >> \"CfgPatches\" >> \"MyClass\");", "docSyntax": "configFile", "syntax": "configFile"}, "configName": {"version": "CMD", "tags": "", "description": "Returns name of config entry.", "example": "_name = configName (configFile >> \"CfgVehicles\"); //\u00a0result is \"CfgVehicles\"", "docSyntax": "configName config", "syntax": "configName config"}, "cos": {"version": "CMD", "tags": "", "description": "Cosine of a number, argument in degrees.", "example": "cos 60; //\u00a0returns 0.5", "docSyntax": "cos x", "syntax": "cos x"}, "countEnemy": {"version": "CMD", "tags": "", "description": "Count how many units in the array are considered enemy to the given unit.", "example": "_num = player countEnemy list _triggerOne;", "docSyntax": "unitName countEnemy arrayName", "syntax": "<objUnit> countEnemy arrayName"}, "countFriendly": {"version": "CMD", "tags": "", "description": "Count how many units in the array are considered friendly to the given unit.", "example": "_num = player countFriendly list _triggerOne;", "docSyntax": "unitName countFriendly arrayName", "syntax": "<objUnit> countFriendly arrayName"}, "countSide": {"version": "CMD", "tags": "", "description": "Returns how many units in the given array belong to given side.", "example": "_num = west countSide list _triggerOne;", "docSyntax": "side countSide array", "syntax": "<objSide> countSide <array>"}, "countType": {"version": "CMD", "tags": "", "description": "Count how many objects in the array are of given type. This command also works with parent classes like \"Air\", \"Tank\", and \"Car\". For a full class reference see Classes.", "example": "_count = \"Tank\" countType list _triggerOne;", "docSyntax": "type countType objects", "syntax": "type countType objects"}, "countUnknown": {"version": "CMD", "tags": "", "description": "Count how many units in the array are unknown to the given unit.", "example": "_num = player countUnknown list _triggerOne;", "docSyntax": "unitName countUnknown arrayName", "syntax": "<objUnit> countUnknown arrayName"}, "createCenter": {"version": "CMD", "tags": "", "description": "Instanciate a Side center. A Side center is required to be able to create groups of this side.", "example": "createCenter east;", "docSyntax": "createCenter side", "syntax": "createCenter <objSide>"}, "createDialog": {"version": "CMD", "tags": "", "description": "Creates a dialog which is defined either in the mission's description.ext, in the campaign's description.ext or in the global resource.cpp. The given name has to be the class name used in one of these files. If another dialog is already opened, the desired dialog is created as a child dialog of the one already opened.", "example": "private _ok = createDialog \"RscDisplayGame\"; if (!_ok) then { hint \"Dialog could not be opened!\" };", "docSyntax": "createDialog dialogName", "syntax": "createDialog dialogName"}, "createDisplay": {"version": "CMD", "tags": "", "description": "Creates child display of given display and loads from \"resourceName\". The notable difference between createDisplay and createDialog is that with createDisplay the player would be able to move around while the display is shown.", "example": "findDisplay 46 createDisplay \"RscCredits\";", "docSyntax": "parent createDisplay resourceName", "syntax": "parent createDisplay resourceName"}, "createGroup": {"version": "CMD", "tags": "", "description": "Creates a new Group for the given Side. Using this command if the group limit is reached will return grpNull. The new Group exists globally, but it's locality is where this command was executed.", "example": "private _group = createGroup east;", "docSyntax": "createGroup side", "syntax": "createGroup <objSide>"}, "createGuardedPoint": {"version": "CMD", "tags": "", "description": "Adds a point guarded by the given side (scripted way of adding equivalent of \"GUARDED BY\" trigger in Editor). A closest AI group in the given side with assigned \"GUARD\" waypoint will attempt to secure this guard point. The actual guarded position is determined via the following rules:", "example": "createGuardedPoint [east, [0,0], -1, vehicle player];", "docSyntax": "createGuardedPoint [side, position, objectMapID, vehicle]", "syntax": "createGuardedPoint [<objSide>,position,objectMapID,<objVehicle>]"}, "createLocation": {"version": "CMD", "tags": "", "description": "Creates a location of the specified class and dimensions at the specified position. Classes are defined in CfgLocationTypes; for possible location types see Location Types.", "example": "_location = createLocation [\"NameVillage\", [4035,2151,10], 100, 100];", "docSyntax": "createLocation [className, position, sizeX, sizeY]", "syntax": "createLocation [className,position,sizeX,sizeY]"}, "createMarker": {"version": "CMD", "tags": "", "description": "Creates a new map marker at the given position. The marker will be created for every connected player as well as all JIP players. The marker name has to be unique; the command will be ignored if a marker with the given name already exists.", "example": "_marker1 = createMarker [\"Marker1\", position player];", "docSyntax": "createMarker [name, position, channel, creator]", "syntax": "createMarker [<string>,position,channel,creator]"}, "createMarkerLocal": {"version": "CMD", "tags": "", "description": "Creates a local marker at the given position - the marker only exists on the machine that created it. The marker name has to be unique, if a marker with the given name exists, the command will be ignored. Use deleteMarkerLocal to delete a local marker.", "example": "_marker = createMarkerLocal [\"Marker1\", position player];", "docSyntax": "createMarkerLocal [name, position, channel, creator]", "syntax": "createMarkerLocal [<string>,position,channel,creator]"}, "createMine": {"version": "CMD", "tags": "", "description": "Creates a mine of the given type.", "example": "_mine = createMine [\"APERSMine\", ASLToAGL getPosASL player, [], 3];", "docSyntax": "createMine [type, position, markers, placement]", "syntax": "createMine [type,position,markers,placement]"}, "createMissionDisplay": {"version": "CMD", "tags": "", "description": "Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument \"root\".", "example": "_ChildDisplay = _Rootdisplay createMissionDisplay \"Tutorial\";", "docSyntax": "display createMissionDisplay missionRootDirectoryString", "syntax": "<uiDisplay> createMissionDisplay missionRootDirectoryString"}, "createSoundSource": {"version": "CMD", "tags": "", "description": "Creates a sound source of the given type (type is the name of the subclass of CfgVehicles which is pointing to the sound defined in CfgSFX). The actual sound object created is of type \"#dynamicsound\" and could be detected with allMissionObjects. If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The sound source is placed inside a circle with this position as its center and placement as its radius. Some of the vanilla classes pre-configured in Arma 3:", "example": "_soundSource = createSoundSource [\"LittleDog\", position player, [], 0];", "docSyntax": "createSoundSource [type, position, markers, placement]", "syntax": "createSoundSource [type,position,markers,placement]"}, "createTarget": {"version": "CMD", "tags": "", "description": "Create a target.", "example": "_target = createTarget [\"targetType\", [0,0,0], 1, 1];", "docSyntax": "obj createTarget [type, position, typeAccuracy, posAccuracy]", "syntax": "<object> createTarget [type,position,typeAccuracy,posAccuracy]"}, "createTrigger": {"version": "CMD", "tags": "", "description": "Creates a trigger of the given type and at the given position. The type must be a class name in CfgNonAIVehicles or CfgVehicles with simulation = detector. An array containing all units that have activated the trigger is available via list triggerobj. Since triggers are Objects, commands such as getPosASL, setPosASL, deleteVehicle etc. work on them.", "example": "_trg = createTrigger [\"EmptyDetector\", getPos player]; _trg setTriggerArea [5, 5, 0, false]; _trg setTriggerActivation [\"CIV\", \"PRESENT\", true]; _trg setTriggerStatements [\"this\", \"hint 'Civilian near player'\", \"hint 'no civilian near'\"];", "docSyntax": "createTrigger [type, position, makeGlobal]", "syntax": "createTrigger [type,position,makeGlobal]"}, "createUnit": {"version": "CMD", "tags": "", "description": "Create a unit of the provided CfgVehicles class.", "example": "_unit = group player createUnit [\"B_RangeMaster_F\", position player, [], 0, \"FORM\"];", "docSyntax": "group createUnit [type, position, markers, placement, special]", "syntax": "<objGroup> createUnit [type,position,markers,placement,special]"}, "createVehicle": {"version": "CMD", "tags": "", "description": "Creates an empty object of given classname type. See Arma 3: Assets / Arma 3: createVehicle/vehicles, or Category:CfgVehicles for earlier games.", "example": "_jeep = \"Jeep\" createVehicle position player;", "docSyntax": "type createVehicle position", "syntax": "type createVehicle position"}, "createVehicleLocal": {"version": "CMD", "tags": "", "description": "Creates an object of the given type. The Created object is not transferred through network in MP games. netId of such vehicle in multiplayer will be \"0:0\". To disable local vehicle creation, use CfgDisabledCommands to blacklist this command. Alternatively, you can use createSimpleObject with local option enabled where applicable.", "example": "_lightsource = \"#lightpoint\" createVehicleLocal _pos;", "docSyntax": "type createVehicleLocal position", "syntax": "type createVehicleLocal position"}, "crew": {"version": "CMD", "tags": "", "description": "Returns the crew (both dead and alive) of the given vehicle.", "example": "player in (crew _tank);", "docSyntax": "crew vehicleName", "syntax": "crew vehicleName"}, "ctrlActivate": {"version": "CMD", "tags": "", "description": "Launches action attached to given (button based) control. Command ignores control disabled state. (Example 2). Main syntax command only triggers engine-based actions (cancel or ok codes) and will not trigger button related User Interface Event Handlers or buttonAction, use the alternative syntax for this. \"ButtonClick\" UI event handler will also be triggered with the alternative syntax. Use isUIContext to distinguish between scripted activation and user activation.", "example": "ctrlActivate _control;", "docSyntax": "ctrlActivate control", "syntax": "ctrlActivate <uiControl>"}, "ctrlCommit": {"version": "CMD", "tags": "", "description": "Commits control animation to last specified duration.", "example": "_control ctrlCommit 2; //\u00a0make animation last approx. 2 seconds", "docSyntax": "control ctrlCommit time", "syntax": "<uiControl> ctrlCommit <scalar>"}, "ctrlCommitted": {"version": "CMD", "tags": "", "description": "Check if the control animation is finished.", "example": "_done = ctrlCommitted _control;", "docSyntax": "ctrlCommitted controlName", "syntax": "ctrlCommitted controlName"}, "ctrlEnable": {"version": "CMD", "tags": "", "description": "Enables or disables a control of the currently active user dialog. Disabled controls cannot be clicked onto. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "ctrlEnable [100, false];", "docSyntax": "ctrlEnable [idc, enable]", "syntax": "ctrlEnable [<scalar>,<bool>]"}, "ctrlEnabled": {"version": "CMD", "tags": "", "description": "Returns if a control on the currently active user dialog is enabled. Disabled controls cannot be focused. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "if !(ctrlEnabled 100) then { ctrlEnable [100, true]; };", "docSyntax": "ctrlEnabled idc", "syntax": "ctrlEnabled <scalar>"}, "ctrlFade": {"version": "CMD", "tags": "", "description": "Returns the current fade factor of control.", "example": "_scale = ctrlFade _control;", "docSyntax": "ctrlFade controlName", "syntax": "ctrlFade controlName"}, "ctrlMapAnimAdd": {"version": "CMD", "tags": "", "description": "Adds the next frame to the map animation.", "example": "_map ctrlMapAnimAdd [1, 0.1, getMarkerPos \"anim1\"]; ctrlMapAnimCommit _map;", "docSyntax": "map ctrlMapAnimAdd [time, zoom, position]", "syntax": "<objMap> ctrlMapAnimAdd [<scalar>,<scalar>,position]"}, "ctrlMapAnimClear": {"version": "CMD", "tags": "", "description": "Clears the map animation.", "example": "ctrlMapAnimClear _ctrlMap;", "docSyntax": "ctrlMapAnimClear controlName", "syntax": "ctrlMapAnimClear controlName"}, "ctrlMapAnimCommit": {"version": "CMD", "tags": "", "description": "Plays the map animation.", "example": "Center map on player:", "docSyntax": "ctrlMapAnimCommit mapControl", "syntax": "ctrlMapAnimCommit mapControl"}, "ctrlMapAnimDone": {"version": "CMD", "tags": "", "description": "Checks whether the map animation has finished.", "example": "_isDone = ctrlMapAnimDone _ctrlMap;", "docSyntax": "ctrlMapAnimDone controlName", "syntax": "ctrlMapAnimDone controlName"}, "ctrlMapScale": {"version": "CMD", "tags": "", "description": "Returns the current scale of given map control.", "example": "_control = (findDisplay 12) displayCtrl 51; //Arma 3 _scale = ctrlMapScale _control; //returns number from 1 to 0.001", "docSyntax": "ctrlMapScale ctrl", "syntax": "ctrlMapScale <uiControl>"}, "ctrlMapScreenToWorld": {"version": "CMD", "tags": "", "description": "Converts map screen coordinates into world coordinates. Unlike posScreenToWorld, this command returns world position is format [x, y], otherwise it is identical to posScreenToWorld.", "example": "_worldCoord = _control ctrlMapScreenToWorld _ScreenCoord;", "docSyntax": "control ctrlMapScreenToWorld [x, y]", "syntax": "<uiControl> ctrlMapScreenToWorld [x,y]"}, "ctrlMapWorldToScreen": {"version": "CMD", "tags": "", "description": "Converts world coordinates into map screen coordinates. This command is identical to posWorldToScreen.", "example": "_screenCoord = _control ctrlMapWorldToScreen _worldCoord;", "docSyntax": "control ctrlMapWorldToScreen position", "syntax": "<uiControl> ctrlMapWorldToScreen position"}, "ctrlParent": {"version": "CMD", "tags": "", "description": "Returns the parent Display of the given control. For parent Controls group see ctrlParentControlsGroup.", "example": "_display = ctrlParent _control;", "docSyntax": "ctrlParent control", "syntax": "ctrlParent <uiControl>"}, "ctrlPosition": {"version": "CMD", "tags": "", "description": "Returns the current position of 2D control as [x, y, w, h] array. For 3D control it returns relative [x, y, z].", "example": "_pos = ctrlPosition _control;", "docSyntax": "ctrlPosition controlName", "syntax": "ctrlPosition controlName"}, "ctrlScale": {"version": "CMD", "tags": "", "description": "Returns the current scale of the control.", "example": "_scale = ctrlScale _control;", "docSyntax": "ctrlScale control", "syntax": "ctrlScale <uiControl>"}, "ctrlSetActiveColor": {"version": "CMD", "tags": "", "description": "Sets text color of given control when it is selected.", "example": "_control ctrlSetActiveColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetActiveColor color", "syntax": "<uiControl> ctrlSetActiveColor <scalar>"}, "ctrlSetBackgroundColor": {"version": "CMD", "tags": "", "description": "Sets background color of given control. Only affects:", "example": "_control ctrlSetBackgroundColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetBackgroundColor color", "syntax": "<uiControl> ctrlSetBackgroundColor <scalar>"}, "ctrlSetEventHandler": {"version": "CMD", "tags": "", "description": "\ud83d\udd56", "example": "_control ctrlSetEventHandler [\"KeyDown\", \"\"];", "docSyntax": "controlName ctrlSetEventHandler [handlerName, function]", "syntax": "controlName ctrlSetEventHandler [handlerName,function]"}, "ctrlSetFade": {"version": "CMD", "tags": "", "description": "Sets wanted transparency for control animation. Requires ctrlCommit to commit changes. To hide or show a control instantly, use ctrlShow.", "example": "_control ctrlSetFade 1; _control ctrlCommit 5;", "docSyntax": "controlName ctrlSetFade fade", "syntax": "controlName ctrlSetFade fade"}, "ctrlSetFocus": {"version": "CMD", "tags": "", "description": "Sets the input focus on given control.", "example": "ctrlSetFocus _control;", "docSyntax": "ctrlSetFocus control", "syntax": "ctrlSetFocus <uiControl>"}, "ctrlSetFont": {"version": "CMD", "tags": "", "description": "Sets the font for given control (see available fonts)", "example": "_control ctrlSetFont \"TahomaB\";", "docSyntax": "control ctrlSetFont fontName", "syntax": "<uiControl> ctrlSetFont fontName"}, "ctrlSetFontH1": {"version": "CMD", "tags": "", "description": "Sets H1 font of given HTML control.", "example": "_control ctrlSetFontH1 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH1 fontName", "syntax": "controlName ctrlSetFontH1 fontName"}, "ctrlSetFontH1B": {"version": "CMD", "tags": "", "description": "Sets H1 bold font of given HTML control.", "example": "_control ctrlSetFontH1B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH1B fontName", "syntax": "controlName ctrlSetFontH1B fontName"}, "ctrlSetFontH2": {"version": "CMD", "tags": "", "description": "Sets H2 font of given HTML control", "example": "_control ctrlSetFontH2 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH2 fontName", "syntax": "controlName ctrlSetFontH2 fontName"}, "ctrlSetFontH2B": {"version": "CMD", "tags": "", "description": "Sets H2 bold font of given HTML control.", "example": "_control ctrlSetFontH2B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH2B fontName", "syntax": "controlName ctrlSetFontH2B fontName"}, "ctrlSetFontH3": {"version": "CMD", "tags": "", "description": "Sets H3 font of given HTML control.", "example": "_control ctrlSetFontH3 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH3 fontName", "syntax": "controlName ctrlSetFontH3 fontName"}, "ctrlSetFontH3B": {"version": "CMD", "tags": "", "description": "Sets H3 bold font of given HTML control.", "example": "_control ctrlSetFontH3B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH3B fontName", "syntax": "controlName ctrlSetFontH3B fontName"}, "ctrlSetFontH4": {"version": "CMD", "tags": "", "description": "Sets H4 font of given HTML control.", "example": "_control ctrlSetFontH4 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH4 fontName", "syntax": "controlName ctrlSetFontH4 fontName"}, "ctrlSetFontH4B": {"version": "CMD", "tags": "", "description": "Sets H4 bold font of given HTML control.", "example": "_control ctrlSetFontH4B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH4B fontName", "syntax": "controlName ctrlSetFontH4B fontName"}, "ctrlSetFontH5": {"version": "CMD", "tags": "", "description": "Sets H5 font of given HTML control.", "example": "_control ctrlSetFontH5 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH5 fontName", "syntax": "controlName ctrlSetFontH5 fontName"}, "ctrlSetFontH5B": {"version": "CMD", "tags": "", "description": "Sets H5 bold font of given HTML control.", "example": "_control ctrlSetFontH5B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH5B fontName", "syntax": "controlName ctrlSetFontH5B fontName"}, "ctrlSetFontH6": {"version": "CMD", "tags": "", "description": "Sets H6 font of given HTML control.", "example": "_control ctrlSetFontH6 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH6 fontName", "syntax": "controlName ctrlSetFontH6 fontName"}, "ctrlSetFontH6B": {"version": "CMD", "tags": "", "description": "Sets H6 bold font of given HTML control.", "example": "_control ctrlSetFontH6B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH6B fontName", "syntax": "controlName ctrlSetFontH6B fontName"}, "ctrlSetFontHeight": {"version": "CMD", "tags": "", "description": "Sets the sizeEx property for most controls as follows:", "example": "_control ctrlSetFontHeight 0.05;", "docSyntax": "control ctrlSetFontHeight size", "syntax": "<uiControl> ctrlSetFontHeight size"}, "ctrlSetFontHeightH1": {"version": "CMD", "tags": "", "description": "Sets H1 font size of given HTML control.", "example": "_control ctrlSetFontHeightH1 0.05;", "docSyntax": "controlName ctrlSetFontHeightH1 height", "syntax": "controlName ctrlSetFontHeightH1 height"}, "ctrlSetFontHeightH2": {"version": "CMD", "tags": "", "description": "Sets H2 font size of given HTML control.", "example": "_control ctrlSetFontHeightH2 0.05;", "docSyntax": "controlName ctrlSetFontHeightH2 height", "syntax": "controlName ctrlSetFontHeightH2 height"}, "ctrlSetFontHeightH3": {"version": "CMD", "tags": "", "description": "Sets H3 font size of given HTML control.", "example": "_control ctrlSetFontHeightH3 0.05;", "docSyntax": "controlName ctrlSetFontHeightH3 height", "syntax": "controlName ctrlSetFontHeightH3 height"}, "ctrlSetFontHeightH4": {"version": "CMD", "tags": "", "description": "Sets H4 font size of given HTML control.", "example": "_control ctrlSetFontHeightH4 0.05;", "docSyntax": "controlName ctrlSetFontHeightH4 height", "syntax": "controlName ctrlSetFontHeightH4 height"}, "ctrlSetFontHeightH5": {"version": "CMD", "tags": "", "description": "Sets H5 font size of given HTML control.", "example": "_control ctrlSetFontHeightH5 0.05;", "docSyntax": "controlName ctrlSetFontHeightH5 height", "syntax": "controlName ctrlSetFontHeightH5 height"}, "ctrlSetFontHeightH6": {"version": "CMD", "tags": "", "description": "Sets H6 font size of given HTML control.", "example": "_control ctrlSetFontHeightH6 0.05;", "docSyntax": "controlName ctrlSetFontHeightH6 height", "syntax": "controlName ctrlSetFontHeightH6 height"}, "ctrlSetFontP": {"version": "CMD", "tags": "", "description": "Sets P font of given HTML control or its size.", "example": "_control ctrlSetFontP \"TahomaB\";", "docSyntax": "control ctrlSetFontP fontOrSize", "syntax": "<uiControl> ctrlSetFontP fontOrSize"}, "ctrlSetFontPB": {"version": "CMD", "tags": "", "description": "Sets P bold font of given HTML control.", "example": "_control ctrlSetFontPB \"TahomaB\";", "docSyntax": "controlName ctrlSetFontPB fontName", "syntax": "controlName ctrlSetFontPB fontName"}, "ctrlSetForegroundColor": {"version": "CMD", "tags": "", "description": "Sets foreground color of the given control.", "example": "_control ctrlSetForegroundColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetForegroundColor color", "syntax": "<uiControl> ctrlSetForegroundColor <scalar>"}, "ctrlSetPosition": {"version": "CMD", "tags": "", "description": "Sets wanted position and size for 2D control animation. Width and height are optional. ctrlCommit is required to complete the operation. For 3D control, param is relative [x, y, z] and no ctrlCommit is required as it cannot be animated. If target control is inside a CT_CONTROLS_GROUP, the position needs to be relative to it.", "example": "Move control:", "docSyntax": "controlName ctrlSetPosition [x, y]", "syntax": "controlName ctrlSetPosition [x,y]"}, "ctrlSetScale": {"version": "CMD", "tags": "", "description": "Sets scale of a control. Top left corner remains same. This command requires ctrlCommit.", "example": "_control ctrlSetScale 0.5;//\u00a0Makes the control 50% smaller _control ctrlCommit 0;", "docSyntax": "control ctrlSetScale scale", "syntax": "<uiControl> ctrlSetScale <scalar>"}, "ctrlSetStructuredText": {"version": "CMD", "tags": "", "description": "Set the Structured Text which will be displayed in structured text control.", "example": "_control ctrlSetStructuredText parseText \"First line<img image=data\\isniper.paa /><br />Second line\"", "docSyntax": "control ctrlSetStructuredText structuredText", "syntax": "<uiControl> ctrlSetStructuredText structuredText"}, "ctrlSetText": {"version": "CMD", "tags": "", "description": "Sets the text of a control of the currently active user dialog or display. This command can be used for static texts, buttons, edit lines and active texts as well as for images, where you can use it to set the image path.", "example": "ctrlSetText [100, \"Hello world\"]; //\u00a0for Dialogs", "docSyntax": "ctrlSetText [idc, text]", "syntax": "ctrlSetText [<scalar>,<string>]"}, "ctrlSetTextColor": {"version": "CMD", "tags": "", "description": "Sets text color of given control. Color is in format Color (RGBA). As of Arma 3 v1.40 this command can also be used to change fill-color of a CT_PROGRESS control.", "example": "_control ctrlSetTextColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetTextColor color", "syntax": "<uiControl> ctrlSetTextColor <scalar>"}, "ctrlSetTextColorSecondary": {"version": "CMD", "tags": "", "description": "Sets the secondary text color of a text control.", "example": "_ctrlText ctrlSetTextColorSecondary [1, 0.5, 0.1, 0.5];", "docSyntax": "control ctrlSetTextColorSecondary color", "syntax": "<uiControl> ctrlSetTextColorSecondary <scalar>"}, "ctrlSetTextSecondary": {"version": "CMD", "tags": "", "description": "Sets the secondary text of a text control.", "example": "_ctrlText ctrlSetTextSecondary \"Hello World!\";", "docSyntax": "control ctrlSetTextSecondary text", "syntax": "<uiControl> ctrlSetTextSecondary <string>"}, "ctrlSetTooltip": {"version": "CMD", "tags": "", "description": "Sets tooltip text of given control.", "example": "_control ctrlSetTooltip \"tooltip\";", "docSyntax": "control ctrlSetTooltip text", "syntax": "<uiControl> ctrlSetTooltip <string>"}, "ctrlSetTooltipColorBox": {"version": "CMD", "tags": "", "description": "Sets tooltip border color of given control.", "example": "_control ctrlSetTooltipColorBox [1, 0, 0, 1];", "docSyntax": "control ctrlSetTooltipColorBox color", "syntax": "<uiControl> ctrlSetTooltipColorBox <scalar>"}, "ctrlSetTooltipColorShade": {"version": "CMD", "tags": "", "description": "Sets tooltip background color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorShade [1, 0, 0, 1];", "docSyntax": "control ctrlSetTooltipColorShade color", "syntax": "<uiControl> ctrlSetTooltipColorShade <scalar>"}, "ctrlSetTooltipColorText": {"version": "CMD", "tags": "", "description": "Sets tooltip text color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorText [1, 0, 0, 1];", "docSyntax": "display ctrlSetTooltipColorText color", "syntax": "<uiDisplay> ctrlSetTooltipColorText <scalar>"}, "ctrlShow": {"version": "CMD", "tags": "", "description": "Shows or hides a control. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "ctrlShow [100, false];", "docSyntax": "ctrlShow [idc, show]", "syntax": "ctrlShow [<scalar>,show]"}, "ctrlShown": {"version": "CMD", "tags": "", "description": "Returns whether given control is shown.", "example": "_bool = ctrlShown _ctrl;", "docSyntax": "ctrlShown controlName", "syntax": "ctrlShown controlName"}, "ctrlText": {"version": "CMD", "tags": "", "description": "Returns the text of a control of the currently active user dialog. This command can be used on static texts, buttons, edit lines and active texts as well as for images, where it returns the image path. Does not work on HTML control and returns empty string \"\". Since Arma 3 v2.05.147765 supported control types are:", "example": "_text = ctrlText 100;", "docSyntax": "ctrlText idc", "syntax": "ctrlText <scalar>"}, "ctrlTextSecondary": {"version": "CMD", "tags": "", "description": "Returns the secondary text of a text control.", "example": "_secondaryText = ctrlTextSecondary _ctrlText;", "docSyntax": "ctrlTextSecondary control", "syntax": "ctrlTextSecondary <uiControl>"}, "ctrlType": {"version": "CMD", "tags": "", "description": "Returns number representing the type of control, which is also defined by type property in config. For more information see Arma: GUI Configuration", "example": "_type = ctrlType _rscEdit; //\u00a02", "docSyntax": "ctrlType control", "syntax": "ctrlType <uiControl>"}, "ctrlVisible": {"version": "CMD", "tags": "", "description": "Returns if a control of the currently active user dialog is shown or not. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "_bool = ctrlVisible 100;", "docSyntax": "ctrlVisible idc", "syntax": "ctrlVisible <scalar>"}, "currentCommand": {"version": "CMD", "tags": "", "description": "Return the current command type (empty string when no command) for the commander of given vehicle (or for a given soldier). Returned value can be one of:", "example": "_command = currentCommand player;", "docSyntax": "currentCommand vehicleName", "syntax": "currentCommand vehicleName"}, "cutFadeOut": {"version": "CMD", "tags": "", "description": "Terminates the effect in the given layer by fading it out according to the given duration. If named layer is used and it doesn't exist, it will be allocated. For title layer see titleFadeOut.", "example": "0 cutFadeOut 2;", "docSyntax": "layer cutFadeOut duration", "syntax": "layer cutFadeOut duration"}, "cutObj": {"version": "CMD", "tags": "", "description": "Displays an object defined in the global config in CfgTitles.", "example": "cutObj [\"TVSet\", \"PLAIN\"]; cutObj [\"TVSet\", \"PLAIN\", 2];", "docSyntax": "cutObj [class, type, speed, showInMap, drawOverHUD]", "syntax": "cutObj [class,type,<scalar>,showInMap,drawOverHUD]"}, "cutRsc": {"version": "CMD", "tags": "", "description": "Display a resource defined in RscTitles of the mission's Description.ext, the campaign's description.ext or the global config.", "example": "cutRsc [\"binocular\", \"PLAIN\"]; cutRsc [\"binocular\", \"PLAIN\", 2]; cutRsc [\"binocular\", \"PLAIN\", 2, false];", "docSyntax": "cutRsc [class, effect, speed, showInMap, drawOverHUD]", "syntax": "cutRsc [class,effect,<scalar>,showInMap,drawOverHUD]"}, "cutText": {"version": "CMD", "tags": "", "description": "Displays a text message in the center of the screen. The text can be displayed on multiple lines by using \"\\n\" new line characters: cutText [\"line1\\nline2\\nline3\", \"PLAIN\"];", "example": "cutText [\"\", \"BLACK OUT\"]; cutText [\"Hello World!\", \"PLAIN\", 2];", "docSyntax": "cutText [text, type, speed, showInMap, isStructuredText, drawOverHUD]", "syntax": "cutText [<string>,type,<scalar>,showInMap,isStructuredText,drawOverHUD]"}, "damage": {"version": "CMD", "tags": "", "description": "Return the damage value of an object.", "example": "? damage player > 0.1 : player groupChat \"I'm hurt! Medic!\"", "docSyntax": "damage object", "syntax": "<scalar> <object>"}, "date": {"version": "CMD", "tags": "", "description": "Return the actual in-mission date and time.", "example": "//\u00a0in Arma 3 date params [\"_year\", \"_month\", \"_day\", \"_hours\", \"_minutes\"]; //\u00a0pre Arma 3 _now = date; //\u00a0[2014,10,30,2,30] a.k.a Oct. 30th, 2:30am _year = _now select 0; _month = _now select 1; _day = _now select 2; _hours = _now select 3; _minutes = _now select 4;", "docSyntax": "date", "syntax": "date"}, "dayTime": {"version": "CMD", "tags": "", "description": "Returns the current in-game time in hours. For a formatted version of time, see BIS_fnc_timeToString.", "example": "dayTime; //\u00a0returns 16.5 given it is 16:30 (4.30pm) in game", "docSyntax": "dayTime", "syntax": "dayTime"}, "debugLog": {"version": "CMD", "tags": "", "description": "Dump argument type and value to debugging output.", "example": "debugLog player;", "docSyntax": "debugLog anything", "syntax": "debugLog anything"}, "deg": {"version": "CMD", "tags": "", "description": "Converts given value in radians to degrees. 1 degree equals 0.01745 radians or pi / 180.", "example": "_degrees = deg 1; //\u00a0Returns 57.2958", "docSyntax": "deg value", "syntax": "deg <scalar>"}, "deleteCenter": {"version": "CMD", "tags": "", "description": "In a nutshell, this command removes gaming Side (see createCenter). If a side has >0 Groups it cannot be deleted. Center can only be created for: east, west, resistance, civilian and sideLogic, therefore only centers from the mentioned sides can be deleted.", "example": "deleteCenter east;", "docSyntax": "deleteCenter side", "syntax": "deleteCenter <objSide>"}, "deleteCollection": {"version": "CMD", "tags": "", "description": "Delete a collection. As example, used with a soldier, it'll hide the ingame model. When targetting Arma 2 1.06 or newer, use hideObject instead. This function is a relic from dynamic building destruction development. It is left only for compatibility with scripts created before Arma 2 1.06, and its functionality may be changed or removed in the future.", "example": "deleteCollection unitName;", "docSyntax": "deleteCollection object", "syntax": "deleteCollection <object>"}, "deleteGroup": {"version": "CMD", "tags": "", "description": "Destroys the given group - the group must be empty and local to the machine executing this command.", "example": "deleteGroup _group;", "docSyntax": "deleteGroup group", "syntax": "deleteGroup <objGroup>"}, "deleteIdentity": {"version": "CMD", "tags": "", "description": "Deletes an identity created with saveIdentity from the campaign's progress file.", "example": "_deleted = deleteIdentity \"playerIdentity\";", "docSyntax": "deleteIdentity identityName", "syntax": "deleteIdentity identityName"}, "deleteLocation": {"version": "CMD", "tags": "", "description": "Deletes scripted location.", "example": "deleteLocation myLocation;", "docSyntax": "deleteLocation location", "syntax": "deleteLocation location"}, "deleteMarker": {"version": "CMD", "tags": "", "description": "Destroys the given marker.", "example": "deleteMarker \"Marker1\";", "docSyntax": "deleteMarker name", "syntax": "deleteMarker <string>"}, "deleteMarkerLocal": {"version": "CMD", "tags": "", "description": "Destroys the given marker.", "example": "deleteMarkerLocal \"Marker1\";", "docSyntax": "deleteMarkerLocal markerName", "syntax": "deleteMarkerLocal <string>"}, "deleteStatus": {"version": "CMD", "tags": "", "description": "Deletes a status created with saveStatus from the campaign's progress file.", "example": "_deleted = deleteStatus \"playerStatus\";", "docSyntax": "deleteStatus statusName", "syntax": "deleteStatus statusName"}, "deleteTarget": {"version": "CMD", "tags": "", "description": "Delete a target.", "example": "deleteTarget target1;", "docSyntax": "deleteTarget target", "syntax": "deleteTarget <object>"}, "deleteVehicle": {"version": "CMD", "tags": "", "description": "Deletes an object. Only objects inserted in the mission editor and objects created during the game's progress can be deleted by this command. Terrain objects and players cannot be deleted.", "example": "deleteVehicle _house1;", "docSyntax": "deleteVehicle object", "syntax": "deleteVehicle <object>"}, "deleteWaypoint": {"version": "CMD", "tags": "", "description": "Removes the specified waypoint.", "example": "deleteWaypoint [_grp, 2];", "docSyntax": "deleteWaypoint [group, index]", "syntax": "deleteWaypoint [<objGroup>,<scalar>]"}, "dialog": {"version": "CMD", "tags": "", "description": "Tests whether any user dialog is open.", "example": "if (!dialog) then { createDialog \"Dialog1\"; };", "docSyntax": "dialog", "syntax": "dialog"}, "difficultyEnabled": {"version": "CMD", "tags": "", "description": "Checks specific difficulty settings of the current user. Difficulty flag names can be found in the ArmA profile file under class Difficulties/xxx/Flags (xxx being regular or veteran).", "example": "hint str (difficultyEnabled \"armor\");", "docSyntax": "difficultyEnabled flagName", "syntax": "difficultyEnabled flagName"}, "direction": {"version": "CMD", "tags": "", "description": "Returns the direction an object or a location is facing (differs from getDir in that this also works with locations).", "example": "player setDir 90; _d = direction player;//returns 90", "docSyntax": "direction object", "syntax": "direction <object>"}, "disableAI": {"version": "CMD", "tags": "", "description": "Disables parts of the AI behaviour to get a better control over the actions of a unit. If the unit changes locality, this command might need to be executed again at the new locality to maintain effect.", "example": "MyUnit disableAI \"AUTOTARGET\";", "docSyntax": "unit disableAI feature", "syntax": "<objUnit> disableAI feature"}, "disableUserInput": {"version": "CMD", "tags": "", "description": "Disables or enables the keyboard and mouse input. Usually used during cutscenes.", "example": "disableUserInput true; //\u00a0cutscene disableUserInput false;", "docSyntax": "disableUserInput state", "syntax": "disableUserInput state"}, "displayCtrl": {"version": "CMD", "tags": "", "description": "Return child control with specified idc.", "example": "_displayControl = _ParentDisplay displayCtrl 101;", "docSyntax": "display displayCtrl idc", "syntax": "<uiDisplay> displayCtrl <scalar>"}, "displaySetEventHandler": {"version": "CMD", "tags": "", "description": "Sets given event handler of given display. The return code of the provided function should indicate whether this event was handled correctly. This implies telling the engine whether it is default code should be executed. See User Interface Event Handlers for the full list of handler names.", "example": "_control displaySetEventHandler [\"KeyDown\", \"\"];", "docSyntax": "display displaySetEventHandler [handlerName, function]", "syntax": "<uiDisplay> displaySetEventHandler [handlerName,function]"}, "dissolveTeam": {"version": "CMD", "tags": "", "description": "Dissolves the given team. All members become members of the main team.", "example": "dissolveTeam \"RED\";", "docSyntax": "dissolveTeam teamColor", "syntax": "dissolveTeam teamColor"}, "distance": {"version": "CMD", "tags": "", "description": "Returns a distance in meters between Objects, Positions or Locations.", "example": "_meters = player distance _object;", "docSyntax": "param1 distance param2", "syntax": "param1 <scalar> param2"}, "distributionRegion": {"version": "CMD", "tags": "", "description": "Returns the numerical index for the distribution region of this copy of Armed Assault.", "example": "if (distributionRegion == 1) then { hint \"miles\"; } else { hint \"kilometres\"; };", "docSyntax": "distributionRegion", "syntax": "distributionRegion"}, "doFire": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to fire on the given target (without radio messages). The target is set with doTarget or commandTarget. The target can be a unit or a vehicle, but not an object.", "example": "_ESoldier1 doFire _WSoldier1;", "docSyntax": "unitName doFire target", "syntax": "<objUnit> doFire <object>"}, "doFollow": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to follow another from his own group as his formation leader (without radio messages).", "example": "_soldier1 doFollow _soldier2;", "docSyntax": "unit doFollow unitLead", "syntax": "<objUnit> doFollow unitLead"}, "doFSM": {"version": "CMD", "tags": "", "description": "Orders a unit to process command defined by FSM file (silently). Unlike with execFSM where _this is passed to the FSM, the following parameters are passed when using doFSM/commandFSM:", "example": "_soldierOne doFSM [\"move.fsm\", position player, player];", "docSyntax": "unit doFSM [fsmName, position, target]", "syntax": "<objUnit> doFSM [fsmName,position,<object>]"}, "doGetOut": {"version": "CMD", "tags": "", "description": "Orders one or multiple units to get out from the vehicle (silently). Same as commandGetOut with latter being shown via radio chat.", "example": "doGetOut _unitOne;", "docSyntax": "doGetOut units", "syntax": "doGetOut units"}, "doMove": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to move to the given position (without radio messages). Upon reaching its destination, if it is the group leader it will order the group to form around it's new position. If it is not the leader, it will immediately be ordered to return to formation by the group leader and begin moving back to the group. Use doStop to stop units returning to formation. moveToCompleted will return true when a unit issued this command reaches its destination.", "example": "_soldier1 doMove (position _officer);", "docSyntax": "unit(s) doMove position", "syntax": "<objUnit>(s) doMove position"}, "doStop": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to stop (without radio messages). The units stopped in this way will leave the groups formation. It will prevent them from moving around with their group (or formation leader), while still being able to turn around and even move to a new position if they see fit.", "example": "doStop _soldier1;", "docSyntax": "doStop unit(s)", "syntax": "doStop <objUnit>(s)"}, "doTarget": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to target the given target (without radio messages).", "example": "_ESoldier1 doTarget _WSoldier1;", "docSyntax": "unit doTarget target", "syntax": "<objUnit> doTarget <object>"}, "doWatch": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to watch the given position or target (without radio messages). Use objNull as the target to order a unit to stop watching a position/target.", "example": "_soldierOne doWatch markerPos \"MarkerMoveOne\";", "docSyntax": "unit(s) doWatch position", "syntax": "<objUnit>(s) doWatch position"}, "drawArrow": {"version": "CMD", "tags": "", "description": "Draws a single line arrow on the map. As this command needs to be called every frame, it is preferable using the onDraw UI Event Handler. To draw a color filled arrow of custom shape see BIS_fnc_drawArrow.", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawArrow [ player, player getRelPos [100, 0], [1,0,0,1] ]; }];", "docSyntax": "map drawArrow [from, to, color]", "syntax": "<objMap> drawArrow [from,to,<scalar>]"}, "drawEllipse": {"version": "CMD", "tags": "", "description": "Draws an ellipse on the map. Just like with marker or trigger area, negative a and b will result in hexagon.", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawEllipse [ player, 10, 10, 0, [1, 0, 0, 1], \"\" ]; _this select 0 drawEllipse [ player, -10, -10, 0, [1, 1, 1, 1], \"#(rgb,8,8,3)color(1,0.6,0,1)\" ]; _this select 0 drawEllipse [ player, -10, -10, 90, [0, 0, 1, 1], \"\" ]; }];", "docSyntax": "map drawEllipse [centre, a, b, angle, color, fill]", "syntax": "<objMap> drawEllipse [centre,a,b,angle,<scalar>,fill]"}, "drawIcon": {"version": "CMD", "tags": "", "description": "Draws an icon on the map. As this command needs to be called every frame, it is preferable using the onDraw UI Event Handler.", "example": "Red icon with text:", "docSyntax": "map drawIcon [texture, color, position, width, height, angle, text, shadow, textSize, font, align]", "syntax": "<objMap> drawIcon [<string>,<scalar>,position,width,height,angle,<string>,shadow,textSize,font,align]"}, "drawLine": {"version": "CMD", "tags": "", "description": "Draw a line on the map. Can decrease framerate!", "example": "(findDisplay 12 displayCtrl 51) ctrlAddEventHandler [\"Draw\", \"(_this select 0) drawLine [ player, [0,0,0], [0,0,1,1] ];\" ];", "docSyntax": "map drawLine [from, to, color]", "syntax": "<objMap> drawLine [from,to,<scalar>]"}, "drawLocation": {"version": "CMD", "tags": "", "description": "Used to draw locations in 2D Editor.", "example": "-", "docSyntax": "control drawLocation location", "syntax": "<uiControl> drawLocation location"}, "drawRectangle": {"version": "CMD", "tags": "", "description": "Draws a rectangle on the map.", "example": "_ctrl drawRectangle [ getPos player, 20, 20, getDir player, [0,0,1,1], \"\" ];", "docSyntax": "map drawRectangle [centre, halfWidth, halfHeight, angle, color, fill]", "syntax": "<objMap> drawRectangle [centre,halfWidth,halfHeight,angle,<scalar>,fill]"}, "driver": {"version": "CMD", "tags": "", "description": "Returns the driver of a vehicle.", "example": "(driver _tank) action [\"getout\", _tank];", "docSyntax": "driver vehicle", "syntax": "driver <objVehicle>"}, "drop": {"version": "CMD", "tags": "", "description": "Creates a particle effect. This command is used to create smoke, fire and similar effects. The particles are single polygons with single textures that always face the player. They can be set to dynamically change their position, size, direction, can be set to different weights and to be more or less dependent on the wind.", "example": "drop [\"cl_basic\", \"\", \"Billboard\", 1, 1, [-3.5 * (sin (direction xural)), -3.5 * (cos (direction xural)), 0], [random 0.1, random 0.1, random 0.5], 1, 0.005, 0.0042, 0.7, [0.3,3], [[0.5,0.5,0.5,0], [0.7,0.7,0.7,0.5], [0.9,0.9,0.9,0]], [0,1,0,1,0,1], 0.2, 0.2, \"\", \"\", xural];", "docSyntax": "drop parameters", "syntax": "drop parameters"}, "echo": {"version": "CMD", "tags": "", "description": "Sends any text into the debugger console or the logfile. This command is only present in internal version not in the retail version. Use diag_log instead!", "example": "echo \"Text in logfile\";", "docSyntax": "echo text", "syntax": "echo <string>"}, "effectiveCommander": {"version": "CMD", "tags": "", "description": "Returns the effective commander of the vehicle. Effective commander is the player whom driver AI will listen to. So if in a tank there is a gunner and a commander and AI driver, if the effectiveCommander is gunner, then gunner pressing WASD will give AI orders to move. If gunner jumps out and then enters tank again, the effectiveCommander role most likely has changed to commander that remained in tank. Also the assignment seems to work on first come first served basis.", "example": "_commander = effectiveCommander tank;", "docSyntax": "effectiveCommander vehicle", "syntax": "effectiveCommander <objVehicle>"}, "emptyPositions": {"version": "CMD", "tags": "", "description": "Returns the number of given empty positions in the vehicle.", "example": "_freeCargoAndFFVPositions = vehicle player emptyPositions \"Cargo\";", "docSyntax": "vehicle emptyPositions position", "syntax": "<objVehicle> emptyPositions position"}, "enableAI": {"version": "CMD", "tags": "", "description": "Enables parts of the AI behavior that was disabled by disableAI.", "example": "_soldierOne enableAI \"Move\";", "docSyntax": "unit enableAI skilltype", "syntax": "<objUnit> enableAI skilltype"}, "enableAttack": {"version": "CMD", "tags": "", "description": "Set if leader can issue attack commands to the soldiers in his group.", "example": "_group1 enableAttack true;", "docSyntax": "group enableAttack enable", "syntax": "<objGroup> enableAttack <bool>"}, "enableEndDialog": {"version": "CMD", "tags": "", "description": "Enables the execution of a custom camera sequence after the players death, coded in onPlayerKilled.sqs.", "example": "enableEndDialog;", "docSyntax": "enableEndDialog", "syntax": "enableEndDialog"}, "enableEnvironment": {"version": "CMD", "tags": "", "description": "Enable/disable environmental effects: ambient life and/or ambient sound.", "example": "enableEnvironment false; //\u00a0identical to enableEnvironment [false, false]", "docSyntax": "enableEnvironment enable", "syntax": "enableEnvironment <bool>"}, "enableRadio": {"version": "CMD", "tags": "", "description": "Enable and disable radio messages to be heard and shown in the left lower corner of the screen - the order-giving unit can still be heard direct-talking when in its vicinity. The AI will still follow orders. This command can be helpful during cutscenes.", "example": "enableRadio false; clearRadio;", "docSyntax": "enableRadio state", "syntax": "enableRadio state"}, "enableReload": {"version": "CMD", "tags": "", "description": "Enable / disable reload when magazine is empty.", "example": "_vehicle enableReload false;", "docSyntax": "object enableReload enable", "syntax": "<object> enableReload <bool>"}, "enableTeamSwitch": {"version": "CMD", "tags": "", "description": "Enable / disable Team Switch. The default setting is enabled.", "example": "enableTeamSwitch true;", "docSyntax": "enableTeamSwitch enable", "syntax": "enableTeamSwitch <bool>"}, "engineOn": {"version": "CMD", "tags": "", "description": "Activates and deactivates the engine of a vehicle.", "example": "if (!isEngineOn _jeep) then { _jeep engineOn true; };", "docSyntax": "vehicle engineOn state", "syntax": "<objVehicle> engineOn state"}, "estimatedTimeLeft": {"version": "CMD", "tags": "", "description": "Sets the estimated time left in the game that is shown in the \"Game in progress\" screen or in the master browser.", "example": "estimatedTimeLeft 600; //\u00a010 min", "docSyntax": "estimatedTimeLeft seconds", "syntax": "estimatedTimeLeft seconds"}, "exp": {"version": "CMD", "tags": "", "description": "Exponential function with the base e. Equal to e^x.", "example": "_e = exp 1; //\u00a0Returns e (2.7182...)", "docSyntax": "exp x", "syntax": "exp x"}, "expectedDestination": {"version": "CMD", "tags": "", "description": "Return expected destination of unit as an array.", "example": "_data = expectedDestination player;", "docSyntax": "expectedDestination person", "syntax": "expectedDestination <objUnit>"}, "exportLandscapeXYZ": {"version": "CMD", "tags": "", "description": "Exports landscape as XYZ file.", "example": "exportLandscapeXYZ \"myLandscape.txt\";", "docSyntax": "exportLandscapeXYZ filename", "syntax": "exportLandscapeXYZ filename"}, "fadeMusic": {"version": "CMD", "tags": "", "description": "Changes the current music volume to the given value smoothly within the given time.", "example": "5 fadeMusic 0; //\u00a0fade current music volume to 0 in 5 sec", "docSyntax": "time fadeMusic volume", "syntax": "<scalar> fadeMusic volume"}, "fadeRadio": {"version": "CMD", "tags": "", "description": "Changes the radio volume smoothly within the given time.", "example": "5 fadeRadio 0.1;", "docSyntax": "time fadeRadio volume", "syntax": "<scalar> fadeRadio volume"}, "fadeSound": {"version": "CMD", "tags": "", "description": "Changes the sound volume smoothly within the given time.", "example": "5 fadeSound 0;", "docSyntax": "time fadeSound volume", "syntax": "<scalar> fadeSound volume"}, "fillWeaponsFromPool": {"version": "CMD", "tags": "", "description": "Adds magazines from the campaign pool to the given unit, depending on his weapons. Available in campaigns only.", "example": "fillWeaponsFromPool _soldier;", "docSyntax": "fillWeaponsFromPool unit", "syntax": "fillWeaponsFromPool <objUnit>"}, "find": {"version": "CMD", "tags": "", "description": "Searches for an array element within an array or an ANSI string within an ANSI string.", "example": "[\"Apples\", \"Oranges\", \"Pears\"] find \"Oranges\"; //\u00a0returns 1", "docSyntax": "array find element", "syntax": "<array> find element"}, "findCover": {"version": "CMD", "tags": "", "description": "Returns the object around where the unit finds cover. The minDist, visibilityPosition and ignoreObject parameters are optional.", "example": "unit1 findCover [ASLToATL aimPos unit2, 30];", "docSyntax": "object findCover [position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]", "syntax": "<object> findCover [position,hidePosition,maxDist,minDist,visibilityPosition,ignoreObject]"}, "findDisplay": {"version": "CMD", "tags": "", "description": "Finds a display by its IDD which can either be defined in missionConfigFile (description.ext) or configFile (config.cpp) or by its UI On Texture's unique name (see displayUniqueName).", "example": "[] spawn { waitUntil { !isNull findDisplay 46 }; hint \"Mission Display is now available!\"; };", "docSyntax": "findDisplay idd", "syntax": "findDisplay idd"}, "findNearestEnemy": {"version": "CMD", "tags": "", "description": "Finds the nearest enemy to the specified position. Returns a null object if the object's group does not know about any enemies. This command will return nearest object that is known to the unit and is considered enemy. An empty vehicle that is part of enemy group assets (see addVehicle) can be returned as valid nearest target.", "example": "_myNearestEnemy = (units _myGroup select 0) findNearestEnemy player;", "docSyntax": "object findNearestEnemy position", "syntax": "<object> findNearestEnemy position"}, "finishMissionInit": {"version": "CMD", "tags": "", "description": "Finish world initialization before mission is launched.", "example": "finishMissionInit", "docSyntax": "finishMissionInit", "syntax": "finishMissionInit"}, "finite": {"version": "CMD", "tags": "", "description": "Returns true if the provided number is finite (not infinite and a valid number).", "example": "finite 123; //\u00a0returns true", "docSyntax": "finite number", "syntax": "finite <scalar>"}, "fire": {"version": "CMD", "tags": "", "description": "Forces a unit to fire the given weapon.", "example": "_soldier fire \"M16\";", "docSyntax": "unit fire muzzle", "syntax": "<objUnit> fire muzzle"}, "flag": {"version": "CMD", "tags": "", "description": "Returns the original flag pole of the flag the unit is carrying.", "example": "_flag = flag _soldier;", "docSyntax": "flag unit", "syntax": "<objFlag> <objUnit>"}, "flagOwner": {"version": "CMD", "tags": "", "description": "Returns the global owner of a flag. A getter for setFlagOwner. Note that owner of a flag is Object rather than Number, as how it is usually with other owner commands", "example": "_person = flagOwner _flagOne;", "docSyntax": "flagOwner flag", "syntax": "flagOwner <objFlag>"}, "fleeing": {"version": "CMD", "tags": "", "description": "Checks if a unit is fleeing.", "example": "if (fleeing soldier_1) then {player sideChat \"We have won!\"} else {player sideChat \"Keep fighting!\"};", "docSyntax": "fleeing unit", "syntax": "fleeing <objUnit>"}, "floor": {"version": "CMD", "tags": "", "description": "Returns the next lowest integer in relation to the provided number.", "example": "floor 5.1; //\u00a0result is 5 floor 5.999; //\u00a0result is 5 floor -2.01; //\u00a0result is -3 floor -2.99; //\u00a0result is -3", "docSyntax": "floor num", "syntax": "floor num"}, "flyInHeight": {"version": "CMD", "tags": "", "description": "Sets the flying altitude for aircraft relatively to the ground surface. Avoid too low altitudes, as helicopters and planes won't evade trees and obstacles on the ground. The default flying altitude is 100 meters.", "example": "_helicopter flyInHeight 40;", "docSyntax": "aircraft flyInHeight altitude", "syntax": "aircraft flyInHeight <scalar>"}, "fog": {"version": "CMD", "tags": "", "description": "A getter for setFog. Returns the current value of the fog in range 0..1.", "example": "_foglevel = fog;", "docSyntax": "fog", "syntax": "fog"}, "fogForecast": {"version": "CMD", "tags": "", "description": "Returns the forecast fog value. A value of 0 means no fog, 1 means maximum fog.", "example": "_level = fogForecast;", "docSyntax": "fogForecast", "syntax": "fogForecast"}, "forceEnd": {"version": "CMD", "tags": "", "description": "Forces mission ending (set with endMission) even if a camera effect or any another condition delays the endMission (mostly in Operation Flashpoint).", "example": "forceEnd;//\u00a0in an ending trigger to ensure no camera is delaying mission ending", "docSyntax": "forceEnd", "syntax": "forceEnd"}, "forceMap": {"version": "CMD", "tags": "", "description": "Opens non-interactive main map in background that overrides user screen. To force open interactive map use openMap command.", "example": "forceMap true;", "docSyntax": "forceMap show", "syntax": "forceMap show"}, "forceSpeed": {"version": "CMD", "tags": "", "description": "Force the speed limit on given object (object will never attempt to move faster than given by forceSpeed). Use negative value to return to default behaviour.", "example": "_helicopter forceSpeed 150;", "docSyntax": "object forceSpeed speed", "syntax": "<object> forceSpeed <scalar>"}, "format": {"version": "CMD", "tags": "", "description": "Composes a string containing other variables or other variable types. Converts any variable type to a string. If you want to convert a string back to a number, use parseNumber.", "example": "format [\"Player:%1, player's side:%2\", player, side player]; //\u00a0returns \"Player:WEST 1-1-A:1 (Username), player's side:WEST\"", "docSyntax": "format [formatString, var1, var2, ...]", "syntax": "format [formatString,var1,var2,...]"}, "formation": {"version": "CMD", "tags": "", "description": "Returns the current formation of a group.", "example": "if (formation group player == \"wedge\") then { hint \"this is the default formation\" };", "docSyntax": "formation target", "syntax": "formation <object>"}, "formationDirection": {"version": "CMD", "tags": "", "description": "Return the direction in degrees of the 'unit' watching in formation.", "example": "_degrees = formationDirection _unit;", "docSyntax": "formationDirection unitName", "syntax": "formationDirection <objUnit>"}, "formationLeader": {"version": "CMD", "tags": "", "description": "Return leader of the formation.", "example": "if (formationLeader player != leader player) then { hint \"Formation leader is not the group leader.\"; };", "docSyntax": "formationLeader unitName", "syntax": "formationLeader <objUnit>"}, "formationMembers": {"version": "CMD", "tags": "", "description": "Return list of units (drivers) in the formation.", "example": "_drivers = formationMembers _person;", "docSyntax": "formationMembers person", "syntax": "formationMembers <objUnit>"}, "formationPosition": {"version": "CMD", "tags": "", "description": "Return position of unit in the formation.", "example": "_pos = formationPosition _unit;", "docSyntax": "formationPosition unit", "syntax": "formationPosition <objUnit>"}, "formationTask": {"version": "CMD", "tags": "", "description": "Return the current task of the unit in the formation.", "example": "_currentTask = formationTask _unit;", "docSyntax": "formationTask unit", "syntax": "formationTask <objUnit>"}, "formatText": {"version": "CMD", "tags": "", "description": "Creates a Structured Text similar to format command.", "example": "hint formatText [\"Image: %1\", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "formatText [format, argument1, argument2, ...]", "syntax": "formatText [format,argument1,argument2,...]"}, "formLeader": {"version": "CMD", "tags": "", "description": "Returns the formation leader of a given unit. This is often the same as the group leader, but not always, for example in cases when a unit is ordered to follow another unit.", "example": "if (formLeader player != leader player) then { hint \"The formation leader is different to the group leader!\"; };", "docSyntax": "formLeader unitName", "syntax": "formLeader <objUnit>"}, "fuel": {"version": "CMD", "tags": "", "description": "Checks how much fuel is left in the gas tank of a vehicle.", "example": "if (fuel vehicle player == 0) then {hint \"The vehicle is out of fuel!\"};", "docSyntax": "fuel vehicle", "syntax": "fuel <objVehicle>"}, "getArray": {"version": "CMD", "tags": "", "description": "Extract array from config entry.", "example": "_array = getArray (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"threat\");", "docSyntax": "getArray config", "syntax": "getArray config"}, "getDammage": {"version": "CMD", "tags": "", "description": "Returns the object damage in the range from 0 to 1.", "example": "private _damage = getDammage player;", "docSyntax": "getDammage object", "syntax": "getDammage <object>"}, "getDir": {"version": "CMD", "tags": "", "description": "Returns the object heading in the range 0..360.", "example": "_azimuth = getDir player;", "docSyntax": "getDir object", "syntax": "getDir <object>"}, "getHideFrom": {"version": "CMD", "tags": "", "description": "Returns the Position where object believes the enemy to be. If there is no direct line of sight between the object and the enemy, this position is extrapolated based on the last known position and speed of the enemy. A returned position of [0,0,0] implies that object does not knowAbout enemy. If enemy is null it is some position in front of the object or enemy position.", "example": "_pos = player getHideFrom _enemy;", "docSyntax": "object getHideFrom enemy", "syntax": "<object> getHideFrom enemy"}, "getMarkerColor": {"version": "CMD", "tags": "", "description": "Returns marker color for given marker.", "example": "\"MarkerOne\" setMarkerColor \"ColorBlack\"; _color = getMarkerColor \"MarkerOne\"; //\u00a0returns \"ColorBlack\"", "docSyntax": "getMarkerColor markerName", "syntax": "getMarkerColor <string>"}, "getMarkerPos": {"version": "CMD", "tags": "", "description": "Returns marker position.", "example": "_mPos1 = getMarkerPos \"markerOne\";", "docSyntax": "getMarkerPos markerName", "syntax": "getMarkerPos <string>"}, "getMarkerSize": {"version": "CMD", "tags": "", "description": "Returns the size of the given marker. A getter for setMarkerSize and an alias of markerSize.", "example": "\"MarkerOne\" setMarkerSize [100,200]; _size = getMarkerSize \"MarkerOne\"; //returns [100,200]", "docSyntax": "getMarkerSize markerName", "syntax": "getMarkerSize <string>"}, "getMarkerType": {"version": "CMD", "tags": "", "description": "Gets type of marker. See CfgMarkers for a list of standard markers.", "example": "if (getMarkerType \"Marker1\" == \"\") then { hint \"Marker1 is not an icon!\" };", "docSyntax": "getMarkerType markerName", "syntax": "getMarkerType <string>"}, "getNumber": {"version": "CMD", "tags": "", "description": "Extract number from config entry.", "example": "_value = getNumber (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"maxSpeed\");", "docSyntax": "getNumber config", "syntax": "getNumber config"}, "getPos": {"version": "CMD", "tags": "", "description": "Returns object or location position. If the argument is an object, the return value is in format PositionAGLS.", "example": "hintSilent str getPos player;", "docSyntax": "getPos object", "syntax": "getPos <object>"}, "getPosASL": {"version": "CMD", "tags": "", "description": "Returns the object position height above sea level.", "example": "_AslPos = getPosASL player;", "docSyntax": "getPosASL object", "syntax": "getPosASL <object>"}, "getSpeed": {"version": "CMD", "tags": "", "description": "Get the speed for the given speed mode. SpeedMode can be:", "example": "_spd = player getSpeed \"FAST\";", "docSyntax": "object getSpeed speedMode", "syntax": "<object> getSpeed speedMode"}, "getText": {"version": "CMD", "tags": "", "description": "Extracts localized text from config entry, if entry is subject to localization, otherwise returns text value. To obtain the translation key itself, see getTextRaw.", "example": "_text = getText (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"icon\"); //\u00a0\"Get in %1 as Driver\"", "docSyntax": "getText config", "syntax": "getText config"}, "getVariable": {"version": "CMD", "tags": "", "description": "Returns the value of variable in the variable space assigned to various data types. All available data types combinations:", "example": "private _variable = myTruck getVariable \"myVariable\"; //\u00a0returns nil if \"myVariable\" is not set", "docSyntax": "varspace getVariable name", "syntax": "varspace getVariable <string>"}, "getWPPos": {"version": "CMD", "tags": "", "description": "Returns the position of a selected waypoint of a given group. Waypoints include only those which were placed in the mission editor.", "example": "[_group1, 1] setWPPos [200,600,0]; _pos = getWPPos [_group1, 1]; //\u00a0returns [200, 600, 0]", "docSyntax": "getWPPos [groupOrUnit, index]", "syntax": "getWPPos [groupOrUnit,<scalar>]"}, "glanceAt": {"version": "CMD", "tags": "", "description": "Control what the unit(s) is/are glancing at (target or Position). If target is used, it will get revealed fully. How frequently the unit(s) is/are glancing there depends on behaviour.", "example": "_someSoldier glanceAt _otherSoldier;", "docSyntax": "unit(s) glanceAt position", "syntax": "<objUnit>(s) glanceAt position"}, "globalChat": {"version": "CMD", "tags": "", "description": "Types text to the global radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne globalChat \"Show this text\";", "docSyntax": "unitName globalChat chatText", "syntax": "<objUnit> globalChat chatText"}, "globalRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the global radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne globalRadio \"messageOne\";", "docSyntax": "unit globalRadio radioName", "syntax": "<objUnit> globalRadio radioName"}, "goto": {"version": "CMD", "tags": "", "description": "Break script flow and go to given label (defined by # - NOT to be confused with SQF's hash sign!)", "example": "goto \"myLabel\" player setDamage 1 #myLabel hint \"you successfully avoided death!\"", "docSyntax": "goto label", "syntax": "goto label"}, "group": {"version": "CMD", "tags": "", "description": "Returns the group a unit is assigned to.", "example": "_playerGrp = group player;", "docSyntax": "group object", "syntax": "<objGroup> <object>"}, "groupChat": {"version": "CMD", "tags": "", "description": "Types text to the group radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne groupChat \"Show this text\";", "docSyntax": "unitName groupChat chatText", "syntax": "<objUnit> groupChat chatText"}, "groupRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the group radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol.", "example": "_soldierOne groupRadio \"messageOne\";", "docSyntax": "unit groupRadio radioName", "syntax": "<objUnit> groupRadio radioName"}, "gunner": {"version": "CMD", "tags": "", "description": "Returns the gunner of a vehicle.", "example": "gunner _tank action [\"getout\", _tank];", "docSyntax": "gunner vehicle", "syntax": "gunner <objVehicle>"}, "halt": {"version": "CMD", "tags": "", "description": "This command was meant to break the script into debugger, however currently it does not do anything except displaying and logging the following error: Error Debugger breakpoint hit.", "example": "if (_displayAnError) then {halt};", "docSyntax": "halt", "syntax": "halt"}, "handsHit": {"version": "CMD", "tags": "", "description": "Checks if a soldier's hands are hit, which results in inaccurate aiming.", "example": "? (handsHit player == 1) : player globalChat \"Ouch! Don't shoot at my hands dammit!\"", "docSyntax": "handsHit unitName", "syntax": "handsHit <objUnit>"}, "hasWeapon": {"version": "CMD", "tags": "", "description": "Checks if a unit has the given weapon in hands or on back/in holster. Weapons inside unit containers such as vest and backpack are not counted.", "example": "if !(player hasWeapon \"arifle_MX_ACO_pointer_F\") then { player addWeapon \"arifle_MX_ACO_pointer_F\" };", "docSyntax": "unitName hasWeapon weaponName", "syntax": "<objUnit> hasWeapon weaponName"}, "hideBehindScripted": {"version": "CMD", "tags": "", "description": "When set to true it disables the default engine hiding behavior.", "example": "_unit hideBehindScripted true;", "docSyntax": "object hideBehindScripted scriptedHideBehind", "syntax": "<object> hideBehindScripted scriptedHideBehind"}, "hideBody": {"version": "CMD", "tags": "", "description": "Hides dead body of the given unit. After a short delay, the body slowly sinks into the ground. After awhile, when group of the unit becomes grpNull, the body gets deleted and becomes objNull. If applied to alive unit, nothing happens until unit dies, then the unit's body gets hidden. If a dead unit is human player, the body is hidden but not deleted until player respawns.", "example": "hideBody player1;", "docSyntax": "hideBody unit", "syntax": "hideBody <objUnit>"}, "hierarchyObjectsCount": {"version": "CMD", "tags": "", "description": "The number of objects in hierarchy.", "example": "_number = hierarchyObjectsCount;", "docSyntax": "hierarchyObjectsCount", "syntax": "hierarchyObjectsCount"}, "hint": {"version": "CMD", "tags": "", "description": "Outputs a hint message to the right of the screen (left of the screen in Operation Flashpoint) with a sound (except in Armed Assault). To split message in multiple lines either use Structured Text or \\n (in lower case).", "example": "//\u00a0outputs the following: //\u00a0Press W to move forward. //\u00a0Press S to move backwards. hint \"Press W to move forward.\\nPress S to move backwards.\"", "docSyntax": "hint message", "syntax": "hint message"}, "hintC": {"version": "CMD", "tags": "", "description": "Displays a very basic message dialog in the center of the screen. Player control is taken away until \"Continue\" is pressed. The message dialog can be dragged around on the screen. After \"Continue\" has been pressed, the content of the hintC is repeated in a normal hint.", "example": "hintC \"Press W to move forward\";", "docSyntax": "hintC message", "syntax": "hintC message"}, "hintCadet": {"version": "CMD", "tags": "", "description": "Shows a text hint only when in cadetMode. The text can contain several lines. \\n is used to indicate the end of a line.", "example": "hintCadet \"Press W to move forward\";", "docSyntax": "hintCadet text", "syntax": "hintCadet <string>"}, "htmlLoad": {"version": "CMD", "tags": "", "description": "Load HTML from file or URI using given control. File path is relative to current mission dir or an absolute path (with drive letter etc.). The command is subject to restrictions, imposed by CfgCommands class.", "example": "_control htmlLoad \"briefing.html\";", "docSyntax": "control htmlLoad filename", "syntax": "<uiControl> htmlLoad filename"}, "image": {"version": "CMD", "tags": "", "description": "Creates a structured text containing the given image. Use setAttributes to set additional attributes on the image.", "example": "hint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "image filename", "syntax": "image filename"}, "importance": {"version": "CMD", "tags": "", "description": "Returns a location's importance value.", "example": "_locationImportance = importance myLocation;", "docSyntax": "importance location", "syntax": "importance location"}, "in": {"version": "CMD", "tags": "", "description": "Checks whether value is in array, unit is in vehicle, position is inside location or ANSI string is part of other ANSI string. If Unicode support is desired, see forceUnicode.", "example": "1 in [0, 1, 2]; //\u00a0true", "docSyntax": "value in array", "syntax": "<scalar> in <array>"}, "inflame": {"version": "CMD", "tags": "", "description": "Sets the state of a fireplace.", "example": "_fireplaceOne inflame true;", "docSyntax": "fireplace inflame burn", "syntax": "fireplace inflame burn"}, "inflamed": {"version": "CMD", "tags": "", "description": "Checks if fireplace is inflamed (burning) or not. To check if a unit is receiving damage from fire, use isBurning command.", "example": "_inflamed = inflamed _fireplaceOne;", "docSyntax": "inflamed fireplace", "syntax": "inflamed fireplace"}, "inGameUISetEventHandler": {"version": "CMD", "tags": "", "description": "Sets given event handler of in-game UI. If EH function returns true, performed action is overridden. Event handlers available are:", "example": "inGameUISetEventHandler [\"Action\", \"hint 'Lights, Camera, Action!'; true\"]; sleep 10; inGameUISetEventHandler [\"Action\", \"\"]; //\u00a0removes the \"Action\" EH", "docSyntax": "inGameUISetEventHandler [handlerName, code]", "syntax": "inGameUISetEventHandler [handlerName,<code>]"}, "inheritsFrom": {"version": "CMD", "tags": "", "description": "Returns base entry of config entry.", "example": "_base = inheritsFrom (configFile >> \"CfgVehicles\" >> \"Car\"); //\u00a0returns \"LandVehicle\" Config entry", "docSyntax": "inheritsFrom config", "syntax": "inheritsFrom config"}, "initAmbientLife": {"version": "CMD", "tags": "", "description": "Initialises the ambient life on local client from CfgWorlds >> worldName >> AmbientA3. Has no effect on dedicated server or headless client.", "example": "initAmbientLife;", "docSyntax": "initAmbientLife", "syntax": "initAmbientLife"}, "intersect": {"version": "CMD", "tags": "", "description": "Finds named selections in object which are in specified LOD, intersected by given section of a line. Return value is in the form of [selection, distance]. Multiple returned arrays are nested within a single array. No intersection returns []. lodName could be one of the following:", "example": "[_tank, \"VIEW\"] intersect [[1500, 1500, 2], [1550, 1500, 2]];", "docSyntax": "[object, lodName] intersect [begPos, endPos]", "syntax": "[<object>,lodName] intersect [begPos,endPos]"}, "isArray": {"version": "CMD", "tags": "", "description": "Check if config entry represents array.", "example": "_ok = isArray (configFile >> \"CfgVehicles\") //\u00a0returns false", "docSyntax": "isArray config", "syntax": "isArray config"}, "isClass": {"version": "CMD", "tags": "", "description": "Check if config entry represents config class.", "example": "_ok = isClass (configFile >> \"CfgVehicles\");", "docSyntax": "isClass config", "syntax": "isClass config"}, "isEngineOn": {"version": "CMD", "tags": "", "description": "Returns true if engine is on, false if it is off.", "example": "_carEngineIsOn = isEngineOn _carOne;", "docSyntax": "isEngineOn vehicle", "syntax": "isEngineOn <objVehicle>"}, "isFormationLeader": {"version": "CMD", "tags": "", "description": "Returns true if the specified unit is subgroup leader.", "example": "_isLeader = isFormationLeader player;", "docSyntax": "isFormationLeader unit", "syntax": "isFormationLeader <objUnit>"}, "isHidden": {"version": "CMD", "tags": "", "description": "Returns whether a person is hidden (reached the hiding position).", "example": "_bobIsHidden = isHidden bob;", "docSyntax": "isHidden person", "syntax": "isHidden <objUnit>"}, "isHideBehindScripted": {"version": "CMD", "tags": "", "description": "Return whether the vehicle has set the hideBehindScripted to true or not.", "example": "_isHidden = isHideBehindScripted _vehicle;", "docSyntax": "isHideBehindScripted vehicle", "syntax": "isHideBehindScripted <objVehicle>"}, "isKeyActive": {"version": "CMD", "tags": "", "description": "Checks whether the given key is active in the current user profile. See keys, keysLimit and doneKeys in the description.ext file of the missions.", "example": "_active = isKeyActive \"Mission04Key\";", "docSyntax": "isKeyActive keyName", "syntax": "isKeyActive keyName"}, "isKindOf": {"version": "CMD", "tags": "", "description": "Checks whether the given object or type is (a subtype) of the given type.", "example": "vehicle player isKindOf \"Tank\";", "docSyntax": "object isKindOf typeName", "syntax": "<object> isKindOf typeName"}, "isMarkedForCollection": {"version": "CMD", "tags": "", "description": "Checks whether the object is marked for weapons collection.", "example": "_marked = isMarkedForCollection _truck;", "docSyntax": "isMarkedForCollection object", "syntax": "isMarkedForCollection <object>"}, "isNil": {"version": "CMD", "tags": "", "description": "Tests whether a variable is nil or undefined from its identifier, or whether the given expression evaluates to nil or Nothing.", "example": "if (isNil \"TAG_globalVariable\") then { TAG_globalVariable = 0 }; if (isNil \"_localVariable\") then { hint \"_localVariable is nil\" };", "docSyntax": "isNil variableName", "syntax": "isNil variableName"}, "isNull": {"version": "CMD", "tags": "", "description": "Checks whether the tested item is null.", "example": "if (isNull obj) then { hint \"obj variable is defined but obj is null\"; };", "docSyntax": "isNull entity", "syntax": "isNull entity"}, "isNumber": {"version": "CMD", "tags": "", "description": "Check if config entry represents number.", "example": "_ok = isNumber (configFile >> \"CfgVehicles\");", "docSyntax": "isNumber config", "syntax": "isNumber config"}, "isPlayer": {"version": "CMD", "tags": "", "description": "Checks if given person is a player. Returns true for headless clients as well.", "example": "if (isPlayer _Soldier1) then { _soldier1 setDamage 1; };", "docSyntax": "isPlayer unit", "syntax": "isPlayer <objUnit>"}, "isServer": {"version": "CMD", "tags": "", "description": "Returns true if the machine executing the command is the server in a multiplayer game or is running single player. It will return true for both dedicated and player-hosted server. See also Multiplayer Scripting/machines.", "example": "if (!isServer) exitWith {};", "docSyntax": "isServer", "syntax": "isServer"}, "isText": {"version": "CMD", "tags": "", "description": "Checks if config entry represents a text value.", "example": "_isText = isText (configFile >> \"CfgVehicles\") //\u00a0false", "docSyntax": "isText config", "syntax": "isText config"}, "join": {"version": "CMD", "tags": "", "description": "Maximum number of", "example": "[_unitOne, _unitTwo] join player;", "docSyntax": "unitArray join group", "syntax": "unitArray join <objGroup>"}, "joinSilent": {"version": "CMD", "tags": "", "description": "Join all units in the array to given group silently (without radio message). To have a group member leave a group, join him with the grpNull group (e.g. [guy1] joinSilent grpNull), but beware, as brand new group is created for the leaving unit and this could result in the number of groups in a mission growing out of control.", "example": "[_unitOne, _unitTwo] joinSilent (group player);", "docSyntax": "unitArray joinSilent group", "syntax": "unitArray joinSilent <objGroup>"}, "keyImage": {"version": "CMD", "tags": "", "description": "Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code.", "example": "_image = keyImage 28; //\u00a0result is \"Enter\"", "docSyntax": "keyImage dikCode", "syntax": "keyImage dikCode"}, "keyName": {"version": "CMD", "tags": "", "description": "Returns the name of a button with extra quotation marks (on the keyboard, mouse or joystick) with the given code.", "example": "_name = keyName 28; //\u00a0result is \"\"\"Enter\"\"\"", "docSyntax": "keyName dikCode", "syntax": "keyName dikCode"}, "knowsAbout": {"version": "CMD", "tags": "", "description": "Checks if a group or a side knows about target.", "example": "_knowledge = player knowsAbout _target;", "docSyntax": "who knowsAbout target", "syntax": "who knowsAbout <object>"}, "land": {"version": "CMD", "tags": "", "description": "Forces a helicopter landing.", "example": "_cobraOne land \"LAND\";", "docSyntax": "helicopter land mode", "syntax": "helicopter land mode"}, "landAt": {"version": "CMD", "tags": "", "description": "Order an AI airplane to land at a given airport. ID is the number to identify which map airport you want the airplane to land at. See Arma: Airport IDs for more information.", "example": "_plane1 landAt 1;", "docSyntax": "plane landAt ID", "syntax": "plane landAt <scalar>"}, "lbAdd": {"version": "CMD", "tags": "", "description": "Adds an item with the given text to the CT_LISTBOX or CT_COMBO or CT_TOOLBOX.", "example": "_index = lbAdd [101, \"First item\"];", "docSyntax": "lbAdd [idc, text]", "syntax": "lbAdd [<scalar>,<string>]"}, "lbClear": {"version": "CMD", "tags": "", "description": "Clear all items from a CT_LISTBOX or CT_COMBO control.", "example": "lbClear 101;", "docSyntax": "lbClear idc", "syntax": "lbClear <scalar>"}, "lbColor": {"version": "CMD", "tags": "", "description": "Returns the text color of the item with the given index of the CT_LISTBOX or CT_COMBO with IDC of the topmost user dialog.", "example": "_colour = lbColor [101, 0];", "docSyntax": "lbColor [idc, index]", "syntax": "lbColor [<scalar>,<scalar>]"}, "lbColorRight": {"version": "CMD", "tags": "", "description": "Returns the text color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_colour = lbColorRight [101, 0];", "docSyntax": "lbColorRight [idc, index]", "syntax": "lbColorRight [<scalar>,<scalar>]"}, "lbCurSel": {"version": "CMD", "tags": "", "description": "Returns the index of the selected item of the CT_LISTBOX, CT_LISTNBOX, CT_COMBO or CT_TOOLBOX. For CT_LISTBOX with multi selection enabled use lbSelection.", "example": "_index = lbCurSel 101;", "docSyntax": "lbCurSel idc", "syntax": "lbCurSel <scalar>"}, "lbData": {"version": "CMD", "tags": "", "description": "Returns the data set in given index of the CT_LISTBOX or CT_COMBO.", "example": "_data = lbData [101, 0];", "docSyntax": "lbData [idc, index]", "syntax": "lbData [<scalar>,<scalar>]"}, "lbDelete": {"version": "CMD", "tags": "", "description": "Removes the item with the given index from the CT_LISTBOX, CT_COMBO or CT_TOOLBOX.", "example": "lbDelete [101, 0];", "docSyntax": "lbDelete [idc, index]", "syntax": "lbDelete [<scalar>,<scalar>]"}, "lbIsSelected": {"version": "CMD", "tags": "", "description": "Checks whether or not given row of the given listbox is selected.", "example": "_selected = _control lbIsSelected 0;", "docSyntax": "control lbIsSelected index", "syntax": "<uiControl> lbIsSelected <scalar>"}, "lbPicture": {"version": "CMD", "tags": "", "description": "Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_picture = lbPicture [101, 0];", "docSyntax": "lbPicture [idc, index]", "syntax": "lbPicture [<scalar>,<scalar>]"}, "lbPictureRight": {"version": "CMD", "tags": "", "description": "Returns the right picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_picture = lbPictureRight [101, 0];", "docSyntax": "lbPictureRight [idc, index]", "syntax": "lbPictureRight [<scalar>,<scalar>]"}, "lbSelection": {"version": "CMD", "tags": "", "description": "Returns Array of selected rows indices in the given listbox. If listbox is of style LB_MULTI (multi-selection) the array will contain multiple elements, otherwise only a single element. For single selection listbox one can also use lbCurSel. See also lbIsSelected, lbSetSelected", "example": "_indices = lbSelection _control;", "docSyntax": "lbSelection control", "syntax": "lbSelection <uiControl>"}, "lbSetColor": {"version": "CMD", "tags": "", "description": "Sets the color of the item (left) with the given index of the listbox or combobox with id idc of the topmost user Dialog to color.", "example": "lbSetColor [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetColor [idc, index, color]", "syntax": "lbSetColor [<scalar>,<scalar>,<scalar>]"}, "lbSetColorRight": {"version": "CMD", "tags": "", "description": "Sets the color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog to color.", "example": "lbSetColorRight [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetColorRight [idc, index, color]", "syntax": "lbSetColorRight [<scalar>,<scalar>,<scalar>]"}, "lbSetCurSel": {"version": "CMD", "tags": "", "description": "Selects the item with the given index in the listbox, listnbox, combobox, xcombobox, xlistbox", "example": "lbSetCurSel [101, 0];", "docSyntax": "lbSetCurSel [idc, index]", "syntax": "lbSetCurSel [<scalar>,<scalar>]"}, "lbSetData": {"version": "CMD", "tags": "", "description": "Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given data.", "example": "lbSetData [101, 1, \"#1\"];", "docSyntax": "lbSetData [idc, index, data]", "syntax": "lbSetData [<scalar>,<scalar>,data]"}, "lbSetPicture": {"version": "CMD", "tags": "", "description": "Sets the left picture in the row with given index of CT_LISTBOX or CT_COMBO. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).", "example": "lbSetPicture [101, 0, \"iskoda.paa\"];", "docSyntax": "lbSetPicture [idc, index, path]", "syntax": "lbSetPicture [<scalar>,<scalar>,path]"}, "lbSetPictureRight": {"version": "CMD", "tags": "", "description": "Sets the second (right aligned) picture in the item with the given index of the listbox or combobox with id idc of the topmost user dialog. Name is the picture name. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).", "example": "lbSetPictureRight [101, 0, \"a3\\3den\\data\\cfg3den\\history\\createcomment_ca.paa\"];", "docSyntax": "lbSetPictureRight [idc, index, path]", "syntax": "lbSetPictureRight [<scalar>,<scalar>,path]"}, "lbSetSelected": {"version": "CMD", "tags": "", "description": "Sets the selection state of the given row of the given listbox of style LB_MULTI. The command has to be called for every row which is needed to be selected in multi-selection listbox. Use negative index -1 to select/deselect all rows (since 2.12). For single selection listbox use lbSetCurSel instead.", "example": "_control lbSetSelected [0, true];", "docSyntax": "control lbSetSelected [index, selected, forceEH]", "syntax": "<uiControl> lbSetSelected [<scalar>,selected,forceEH]"}, "lbSetText": {"version": "CMD", "tags": "", "description": "Sets the text on the left side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "lbSetText [101, 0, \"iskoda\"];", "docSyntax": "lbSetText [idc, index, name]", "syntax": "lbSetText [<scalar>,<scalar>,<string>]"}, "lbSetTextRight": {"version": "CMD", "tags": "", "description": "Sets the text on the right side of the item with the given row index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_control lbSetTextRight [0, \"iskoda\"];", "docSyntax": "control lbSetTextRight [row, name]", "syntax": "<uiControl> lbSetTextRight [<scalar>,<string>]"}, "lbSetValue": {"version": "CMD", "tags": "", "description": "Sets the additional value in the row with the given index of a CT_LISTBOX or CT_COMBO control.", "example": "lbSetValue [101, 0, 1];", "docSyntax": "lbSetValue [idc, index, value]", "syntax": "lbSetValue [<scalar>,<scalar>,<scalar>]"}, "lbSize": {"version": "CMD", "tags": "", "description": "Returns the number of items in a CT_LISTBOX or CT_COMBO control. For CT_TOOLBOX size see lnbSize.", "example": "_size = lbSize 101;", "docSyntax": "lbSize idc", "syntax": "lbSize <scalar>"}, "lbSort": {"version": "CMD", "tags": "", "description": "Sorts listbox entries alphabetically ascending by their lbText.", "example": "lbSort _myControl;", "docSyntax": "lbSort control", "syntax": "lbSort <uiControl>"}, "lbSortByValue": {"version": "CMD", "tags": "", "description": "Sorts the ListBox entries by lbValue. The entries are sorted in ascending order. Also note that this command will mix up the entries randomly if multiple entries have the same value. In Arma 3 use lbSortBy to avoid this problem.", "example": "lbSortByValue _control;", "docSyntax": "lbSortByValue control", "syntax": "lbSortByValue <uiControl>"}, "lbText": {"version": "CMD", "tags": "", "description": "Returns the shown text of the item with the given index of the CT_LISTBOX or CT_COMBO.", "example": "_text = lbText [101, 0];", "docSyntax": "lbText [idc, index]", "syntax": "lbText [<scalar>,<scalar>]"}, "lbTextRight": {"version": "CMD", "tags": "", "description": "Returns the shown right text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_text = lbTextRight [101, 0];", "docSyntax": "lbTextRight [idc, index]", "syntax": "lbTextRight [<scalar>,<scalar>]"}, "lbValue": {"version": "CMD", "tags": "", "description": "Returns the additional integer value of the item with the given index of the CT_LISTBOX or CT_COMBO.", "example": "_value = lbValue [101, 0];", "docSyntax": "lbValue [idc, index]", "syntax": "lbValue [<scalar>,<scalar>]"}, "leader": {"version": "CMD", "tags": "", "description": "Returns the group leader for the given unit or group. For dead units, objNull is returned.", "example": "leader group player == leader player;", "docSyntax": "leader unitOrGroup", "syntax": "leader unitOrGroup"}, "lightAttachObject": {"version": "CMD", "tags": "", "description": "Attach light to given object at given position on object.", "example": "myLight lightAttachObject [myVehicle, [-0.5,-0.25,1]];", "docSyntax": "light lightAttachObject [object, position]", "syntax": "light lightAttachObject [<object>,position]"}, "lightDetachObject": {"version": "CMD", "tags": "", "description": "Detach light from object.", "example": "lightDetachObject _light;", "docSyntax": "lightDetachObject light", "syntax": "lightDetachObject light"}, "lightIsOn": {"version": "CMD", "tags": "", "description": "Check if lampost is on (shining).", "example": "if (lightIsOn nearestObject [player, \"StreetLamp\"] == \"ON\") then { hint \"nightime\"; };", "docSyntax": "lightIsOn lamppost", "syntax": "lightIsOn lamppost"}, "limitSpeed": {"version": "CMD", "tags": "", "description": "Limit the speed of an AI-driven vehicle or AI person to given value. It has continuous effect and AI will not break through the speed limitation until one is contacted, engaged or regrouped.", "example": "leader player limitSpeed 5; //\u00a0set to walking speed sleep 30; leader player limitSpeed -1; //\u00a0remove the limit", "docSyntax": "objectName limitSpeed speed", "syntax": "objectName limitSpeed <scalar>"}, "lineBreak": {"version": "CMD", "tags": "", "description": "Creates a structured text containing a line break.", "example": "hint composeText [\"First line\", lineBreak, \"Second line\"];", "docSyntax": "lineBreak", "syntax": "lineBreak"}, "list": {"version": "CMD", "tags": "", "description": "List of units that would activate given Trigger. It returns nothing before the simulation started, i.e. in (undelayed) init.sqf files. Returns a pointer to the trigger's list after the simulation started.", "example": "_triggerList = list _triggerOne;", "docSyntax": "list trigger", "syntax": "list <objTrigger>"}, "ln": {"version": "CMD", "tags": "", "description": "Returns the natural logarithm of x.", "example": "_nlog = ln 10;", "docSyntax": "ln x", "syntax": "ln x"}, "loadFile": {"version": "CMD", "tags": "", "description": "Returns the content of given files. If you plan to compile said string, be aware that the file should not contain comments or compile will throw an error. If there are comments, use preprocessFile/preprocessFileLineNumbers instead.", "example": "_contents = loadFile \"wantedString.txt\";", "docSyntax": "loadFile fileName", "syntax": "loadFile fileName"}, "loadIdentity": {"version": "CMD", "tags": "", "description": "Loads person's identity from Objects.sav file in campaign directory (from entry name).", "example": "_ok = player loadIdentity \"playerIdentity\";", "docSyntax": "unit loadIdentity name", "syntax": "<objUnit> loadIdentity <string>"}, "loadStatus": {"version": "CMD", "tags": "", "description": "Loads object's properties from Objects.sav file in campaign directory (from entry name).", "example": "_ok = player loadStatus \"playerState\";", "docSyntax": "object loadStatus entryName", "syntax": "<object> loadStatus entryName"}, "local": {"version": "CMD", "tags": "", "description": "Check if given unit is local on the computer in multiplayer games - see Multiplayer Scripting - Locality.", "example": "if (not local _unit) then { hint format [\"%1 is remote\", name _unit]; };", "docSyntax": "local object", "syntax": "local <object>"}, "localize": {"version": "CMD", "tags": "", "description": "Used to internationalise text messages. The provided translation key is looked up in Stringtable.xml (or Stringtable.csv).", "example": "hint localize \"STR_West\"; //\u00a0returns \"BLUFOR\" hint localize \"STR_WEST\"; //\u00a0returns \"BLUFOR\" hint localize \"STR_weSt\"; //\u00a0returns \"BLUFOR\" hint localize \"STR_NonExistentString\"; //\u00a0returns \"\" and logs \"String STR_NonExistentString not found\"", "docSyntax": "localize stringName", "syntax": "localize stringName"}, "locationPosition": {"version": "CMD", "tags": "", "description": "Returns the position of a location. If the location is attached to an object, that object's position is returned.", "example": "_locationPos = locationPosition myLocation;", "docSyntax": "locationPosition location", "syntax": "locationPosition location"}, "lock": {"version": "CMD", "tags": "", "description": "Lock vehicle (disable mounting / dismounting) for player. This command will remove user get in/get out actions but will not stop player getting into or out of vehicle via script commands (e.g moveInCargo).", "example": "_jeepOne lock true;", "docSyntax": "vehicleName lock locked", "syntax": "vehicleName lock <bool>"}, "locked": {"version": "CMD", "tags": "", "description": "Check if vehicle is locked. If it is locked, Persons cannot mount / dismount without order.", "example": "_locked = locked _jeepOne;", "docSyntax": "locked vehicle", "syntax": "<bool> <objVehicle>"}, "lockWP": {"version": "CMD", "tags": "", "description": "Disable switching to next waypoint (current waypoint will never complete while lockwp is used). Sometimes used during cut-scenes.", "example": "_groupOne lockWP true;", "docSyntax": "groupName lockWP lock", "syntax": "groupName lockWP lock"}, "log": {"version": "CMD", "tags": "", "description": "Base-10 logarithm of x.", "example": "_log = log 10;", "docSyntax": "log x", "syntax": "log x"}, "lookAt": {"version": "CMD", "tags": "", "description": "Control what the unit(s) is/are looking at (target or Position). If target is used, it will get revealed fully.", "example": "_someSoldier lookAt _otherSoldier;", "docSyntax": "unit(s) lookAt position", "syntax": "<objUnit>(s) lookAt position"}, "magazines": {"version": "CMD", "tags": "", "description": "Returns array of type names of all vehicle's magazines. When applied to a unit, the command behaves differently and will omit magazines already loaded into unit's weapons. Use currentMagazine to get this information for a currently loaded magazine.", "example": "_mags = magazines player;", "docSyntax": "magazines vehicle", "syntax": "magazines <objVehicle>"}, "mapAnimAdd": {"version": "CMD", "tags": "", "description": "Add next frame to map animation.", "example": "mapAnimAdd [1, 0.1, markerPos \"anim1\"]; mapAnimCommit;", "docSyntax": "mapAnimAdd [time, zoom, position]", "syntax": "mapAnimAdd [<scalar>,<scalar>,position]"}, "mapAnimClear": {"version": "CMD", "tags": "", "description": "Clear map animation.", "example": "mapAnimClear;", "docSyntax": "mapAnimClear", "syntax": "mapAnimClear"}, "mapAnimCommit": {"version": "CMD", "tags": "", "description": "Play map animation.", "example": "mapAnimCommit;", "docSyntax": "mapAnimCommit", "syntax": "mapAnimCommit"}, "mapAnimDone": {"version": "CMD", "tags": "", "description": "Check if map animation is finished.", "example": "private _isDone = mapAnimDone;", "docSyntax": "mapAnimDone", "syntax": "mapAnimDone"}, "markerColor": {"version": "CMD", "tags": "", "description": "Returns marker color for given marker. See also setMarkerColor.", "example": "if (markerColor \"Marker1\" == \"ColorRed\") then { hint \"Marker1 is red!\" };", "docSyntax": "markerColor markerName", "syntax": "markerColor <string>"}, "markerDir": {"version": "CMD", "tags": "", "description": "Get marker direction.", "example": "_mPos = markerDir \"markerOne\";", "docSyntax": "markerDir markerName", "syntax": "markerDir <string>"}, "markerPos": {"version": "CMD", "tags": "", "description": "Returns marker position. See also setMarkerPos.", "example": "_mPos1 = markerPos \"markerOne\";", "docSyntax": "markerPos markerName", "syntax": "markerPos <string>"}, "markerSize": {"version": "CMD", "tags": "", "description": "Returns marker size. This command is identical to getMarkerSize.", "example": "_mSize = markerSize \"Marker1\";", "docSyntax": "markerSize markerName", "syntax": "markerSize <string>"}, "markerText": {"version": "CMD", "tags": "", "description": "Get marker text.", "example": "hint format [\"Marker Text: %1\", markerText \"Marker1\"];", "docSyntax": "markerText markerName", "syntax": "markerText <string>"}, "markerType": {"version": "CMD", "tags": "", "description": "Gets type of marker. See CfgMarkers for a list of standard markers.", "example": "if (markerType \"Marker1\" == \"\") then { hint \"Marker1 is not an icon!\" };", "docSyntax": "markerType markerName", "syntax": "markerType <string>"}, "max": {"version": "CMD", "tags": "", "description": "The greater value of a and b.", "example": "3 max 2; //\u00a0Result is 3", "docSyntax": "a max b", "syntax": "a max b"}, "min": {"version": "CMD", "tags": "", "description": "The smaller of a and b.", "example": "3 min 2 //\u00a0Result is 2", "docSyntax": "a min b", "syntax": "a min b"}, "missionConfigFile": {"version": "CMD", "tags": "", "description": "Return root of mission Description.ext entries hierarchy.", "example": "for \"_i\" from 0 to (count paramsArray - 1) do { missionNamespace setVariable [configName ((missionConfigFile/\"Params\") select _i), paramsArray select _i]; };", "docSyntax": "missionConfigFile", "syntax": "missionConfigFile"}, "missionName": {"version": "CMD", "tags": "", "description": "Return currently loaded mission file (path to mission.pbo, relative to game exe).", "example": "hint format [\"You are playing mission \"\"%1\"\"\", missionName];", "docSyntax": "missionName", "syntax": "missionName"}, "missionStart": {"version": "CMD", "tags": "", "description": "Returns date and time when mission started. Because this command returns the time of the actual start of the mission, it might not be available in pre-init or init, but is guaranteed to be available in post-init when time > 0.", "example": "setDate (missionStart select [0,5]);", "docSyntax": "missionStart", "syntax": "missionStart"}, "mod": {"version": "CMD", "tags": "", "description": "Remainder of a divided by b.", "example": "_remaining = 5 mod 2; //\u00a0returns 1, as 5 divided by 2 is 2 \u00d7 2 + 1", "docSyntax": "a mod b", "syntax": "a mod b"}, "modelToWorld": {"version": "CMD", "tags": "", "description": "Translates relative position from object model space to world space in PositionAGL format.", "example": "_aboveAndBehindPlayer = player modelToWorld [0,-1,3];", "docSyntax": "model modelToWorld position", "syntax": "model modelToWorld position"}, "move": {"version": "CMD", "tags": "", "description": "Let group move to given position. Active waypoints will be ignored when command is used.", "example": "_groupOne move position player;", "docSyntax": "group move position", "syntax": "<objGroup> move position"}, "moveInCargo": {"version": "CMD", "tags": "", "description": "Moves a unit into a vehicle cargo position (immediately and without animation).", "example": "_soldierOne moveInCargo _jeepOne;", "docSyntax": "unit moveInCargo vehicle", "syntax": "<objUnit> moveInCargo <objVehicle>"}, "moveInCommander": {"version": "CMD", "tags": "", "description": "Move soldier into vehicle commander position (Immediate, no animation).", "example": "_soldierOne moveInCommander _tankOne;", "docSyntax": "unitName moveInCommander vehicle", "syntax": "<objUnit> moveInCommander <objVehicle>"}, "moveInDriver": {"version": "CMD", "tags": "", "description": "Moves soldier into vehicle driver position (immediate, no animation).", "example": "_soldierOne moveInDriver _tankOne;", "docSyntax": "unit moveInDriver vehicle", "syntax": "<objUnit> moveInDriver <objVehicle>"}, "moveInGunner": {"version": "CMD", "tags": "", "description": "Move soldier into vehicle gunner position (Immediate, no animation).", "example": "soldierOne moveInGunner tankOne;", "docSyntax": "unitName moveInGunner vehicle", "syntax": "<objUnit> moveInGunner <objVehicle>"}, "moveInTurret": {"version": "CMD", "tags": "", "description": "Moves the soldier into the vehicle's turret. (Immediately, without animation).", "example": "_soldierOne moveInTurret [_tank, [0, 0]];", "docSyntax": "unitName moveInTurret [vehicle, turretPath]", "syntax": "<objUnit> moveInTurret [<objVehicle>,turretPath]"}, "moveTarget": {"version": "CMD", "tags": "", "description": "Change information about a target.", "example": "_moved = _target moveTarget [position player, 1, 1];", "docSyntax": "target moveTarget [position, typeAccuracy, posAccuracy]", "syntax": "<object> moveTarget [position,typeAccuracy,posAccuracy]"}, "moveTo": {"version": "CMD", "tags": "", "description": "Low level command to person to move to given position.", "example": "_myAgent moveTo getPosATL player;", "docSyntax": "unit moveTo position", "syntax": "<objUnit> moveTo position"}, "moveToCompleted": {"version": "CMD", "tags": "", "description": "Check if latest low level moveTo command is finished.", "example": "_isCompleted = moveToCompleted _unit;", "docSyntax": "moveToCompleted person", "syntax": "moveToCompleted <objUnit>"}, "moveToFailed": {"version": "CMD", "tags": "", "description": "Check if latest low level moveTo command failed.", "example": "private _hasFailed = moveToFailed _unit;", "docSyntax": "moveToFailed unit", "syntax": "moveToFailed <objUnit>"}, "musicVolume": {"version": "CMD", "tags": "", "description": "Returns the current music volume (set by fadeMusic)", "example": "hint str musicVolume;", "docSyntax": "musicVolume", "syntax": "musicVolume"}, "name": {"version": "CMD", "tags": "", "description": "When argument is Object, the command returns the name given to a unit using the setIdentity instruction or selected randomly by the game engine if setIdentity has not been used on the unit. If used on vehicle, name of first crew member (in order commander, driver, gunner). If used on an object, \"Error: No unit\" is being returned.", "example": "_name = name player;", "docSyntax": "name object", "syntax": "<string> <object>"}, "nearestBuilding": {"version": "CMD", "tags": "", "description": "Finds the nearest building to a given object or position. A \"building\" is defined as an object that is of class \"House\" and contains a path LOD.", "example": "_nBuilding = nearestBuilding player;", "docSyntax": "nearestBuilding position", "syntax": "nearestBuilding position"}, "nearestLocation": {"version": "CMD", "tags": "", "description": "Return the closest location of specified class to a given position. Checked range is unlimited (i.e. covers the whole map).", "example": "_nearestCity = nearestLocation [getPos player, \"nameCity\"];", "docSyntax": "nearestLocation [position, locationType, maxDistance]", "syntax": "nearestLocation [position,locationType,maxDistance]"}, "nearestLocations": {"version": "CMD", "tags": "", "description": "Returns an array of locations of chosen type(s) within the given radius of the given position, sorted from nearest to farthest.", "example": "_nearbyLocations = nearestLocations [getPosATL player, [\"RockArea\", \"VegetationFir\"], 100];", "docSyntax": "nearestLocations [centre, locationTypes, radius, sortPosition]", "syntax": "nearestLocations [centre,locationTypes,radius,sortPosition]"}, "nearestObject": {"version": "CMD", "tags": "", "description": "Returns the nearest object of given type (or inherited classes) to given position within a sphere. Hardcoded radius is 50 meters. Unlike with nearestObjects, where distance is measured in 2D space, nearestObject will be closest object in 3D space.", "example": "_nObject = nearestObject [2345, 6789]; _nObject = nearestObject [player, \"StreetLamp\"];", "docSyntax": "nearestObject [position, type]", "syntax": "nearestObject [position,type]"}, "nearestObjects": {"version": "CMD", "tags": "", "description": "Returns a list of nearest objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered by proximity, the closest one will be first in the array. If an object is given as the center and the filter criteria applies to it, it will be the first result in the list. Alternatively, you can use nearObjects command, which doesn't sort results.", "example": "nearestObjects [player, [\"Car\", \"Tank\"], 200];", "docSyntax": "nearestObjects [position, types, radius, 2Dmode]", "syntax": "nearestObjects [position,types,radius,2Dmode]"}, "nearObjects": {"version": "CMD", "tags": "", "description": "Find objects (Units, Vehicles, Dead, Map Objects) in a sphere with given radius. The first object in the returned array is not necessarily the closest one. If you need returned objects to be sorted by distance, use nearestObjects. If typeName is given, only objects of given type (or its subtype) are listed.", "example": "_list = position player nearObjects 50;", "docSyntax": "position nearObjects radius", "syntax": "position nearObjects radius"}, "nearTargets": {"version": "CMD", "tags": "", "description": "Returns a list of targets within the defined range. \"Targets\" are not restricted to enemy units.", "example": "player nearTargets 100; //\u00a0can return e.g /* [ [[2555.33,2535.33,1.32708],\"SoldierEB\",EAST,214222,EAST 1-1-A:1], [[2550.39,2482.5,1.32696],\"SoldierWB\",WEST,0,WEST 1-1-A:2] ] */", "docSyntax": "unit nearTargets range", "syntax": "<objUnit> nearTargets range"}, "needReload": {"version": "CMD", "tags": "", "description": "Returns how much vehicle wants to reload its weapons.", "example": "_seriousness = needReload _vehicle;", "docSyntax": "needReload vehicle", "syntax": "needReload <objVehicle>"}, "nextWeatherChange": {"version": "CMD", "tags": "", "description": "Return the remaining time (in seconds) over which the current weather change will occur.", "example": "_seconds = nextWeatherChange;", "docSyntax": "nextWeatherChange", "syntax": "nextWeatherChange"}, "not": {"version": "CMD", "tags": "", "description": "not a is exactly the same as ! a.", "example": "not false; //\u00a0returns true", "docSyntax": "not a", "syntax": "not a"}, "object": {"version": "CMD", "tags": "", "description": "Returns Object with given id. Object's id can be checked in mission editor.", "example": "_object = object 1;", "docSyntax": "object id", "syntax": "<object> <scalar>"}, "objStatus": {"version": "CMD", "tags": "", "description": "Sets the status of an objective that was defined in briefing.html. Status may be one of:", "example": "\"1\" objStatus \"DONE\";", "docSyntax": "objectivenumber objStatus status", "syntax": "objectivenumber objStatus status"}, "onBriefingGear": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Gear tab is selected in the briefing.", "example": "onBriefingGear \"GearVoiceOver\";", "docSyntax": "onBriefingGear soundName", "syntax": "onBriefingGear <string>"}, "onBriefingGroup": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Group tab is selected in the briefing.", "example": "onBriefingGroup \"GroupVoiceOver\";", "docSyntax": "onBriefingGroup soundName", "syntax": "onBriefingGroup <string>"}, "onBriefingNotes": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Notes tab is selected in the briefing.", "example": "onBriefingNotes \"NotesVoiceOver\";", "docSyntax": "onBriefingNotes soundName", "syntax": "onBriefingNotes <string>"}, "onBriefingPlan": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Plan tab is selected in the briefing.", "example": "onBriefingPlan \"PlanVoiceOver\";", "docSyntax": "onBriefingPlan soundName", "syntax": "onBriefingPlan <string>"}, "onBriefingTeamSwitch": {"version": "CMD", "tags": "", "description": "Select a sound defined in the CfgSounds of the mission to be played the first time the TeamSwitch tab is selected in the briefing.", "example": "onBriefingTeamSwitch \"TeamSwitchVoiceOver\";", "docSyntax": "onBriefingTeamSwitch soundName", "syntax": "onBriefingTeamSwitch <string>"}, "onMapSingleClick": {"version": "CMD", "tags": "", "description": "Defines the action performed when user clicks in map by executing command string. The code is executed on every click, until the command is", "example": "Armed Assault: Creates a soldier unit at the position clicked:", "docSyntax": "onMapSingleClick command", "syntax": "onMapSingleClick command"}, "onPlayerConnected": {"version": "CMD", "tags": "", "description": "This command will execute the provided code on the server whenever a player connects to a multiplayer session.", "example": "onPlayerConnected \"[_id, _name] execVM 'PlayerConnected.sqf';\";", "docSyntax": "onPlayerConnected code", "syntax": "onPlayerConnected <code>"}, "onPlayerDisconnected": {"version": "CMD", "tags": "", "description": "This command will execute attached code whenever a player is leaving an MP session. The code will receive a number of special variables:", "example": "onPlayerDisconnected {diag_log [_id, _uid, _name]};", "docSyntax": "onPlayerDisconnected code", "syntax": "onPlayerDisconnected <code>"}, "or": {"version": "CMD", "tags": "", "description": "Returns true if one or both conditions are true. In case of the alternative syntax, lazy evaluation is used. That means that if left operand is true, evaluation of the right side is skipped completely.", "example": "if (_obj1 or (_enemycount == 0) or (not alive _enemyGeneral)) then { hint \"you win\u00a0!\"; };", "docSyntax": "a or b", "syntax": "a or b"}, "orderGetIn": {"version": "CMD", "tags": "", "description": "Force all units in the array to get in or out of their assigned vehicles. Units must be assigned to a vehicle before this command will do anything.", "example": "[_unitOne, _unitTwo] orderGetIn true;", "docSyntax": "unitArray orderGetIn order", "syntax": "unitArray orderGetIn <scalar>"}, "overcast": {"version": "CMD", "tags": "", "description": "Return the current overcast level. Zero is clear skies, one is maximum cloud cover.", "example": "_cloudLevel = overcast;", "docSyntax": "overcast", "syntax": "overcast"}, "overcastForecast": {"version": "CMD", "tags": "", "description": "Return the overcast forecast.", "example": "_forecast = overcastForecast;", "docSyntax": "overcastForecast", "syntax": "overcastForecast"}, "parseNumber": {"version": "CMD", "tags": "", "description": "Parses the string, interpreting its content as a floating point number.", "example": "_number = parseNumber \"0.125\"; //\u00a00.125 _number = parseNumber \"0050\"; //\u00a050 _number = parseNumber \" 42 yes\"; //\u00a042 _number = parseNumber \"3 or 4\"; //\u00a03 _number = parseNumber \"either 3 or 4\"; //\u00a00 _number = parseNumber \"0xCF\"; //\u00a00", "docSyntax": "parseNumber value", "syntax": "parseNumber <scalar>"}, "parseText": {"version": "CMD", "tags": "", "description": "Creates a structured text by parsing the given XML description. Do not use parseText when displaying a localized text from Stringtable.xml.", "example": "private _Stxt = parseText \"First line<img image='data\\isniper.paa'/><br/>Second line\";", "docSyntax": "parseText text", "syntax": "parseText <string>"}, "pi": {"version": "CMD", "tags": "", "description": "pi (180 degrees converted to Radians).", "example": "_radians = 2 * pi; //\u00a0Result is 6.2830", "docSyntax": "pi", "syntax": "pi"}, "pickWeaponPool": {"version": "CMD", "tags": "", "description": "Transfers weapons and magazines from cargo of object into the weapon pool. This is used in the campaign to transfer weapons into the next mission.", "example": "pickWeaponPool vehicle player;", "docSyntax": "pickWeaponPool object", "syntax": "pickWeaponPool <object>"}, "playerRespawnTime": {"version": "CMD", "tags": "", "description": "Return the player's remaining time before respawn, or -1 if it is not available (such as when the player is alive).", "example": "waitUntil { playerRespawnTime <= 0 };", "docSyntax": "playerRespawnTime", "syntax": "playerRespawnTime"}, "playerSide": {"version": "CMD", "tags": "", "description": "Returns the player's side. This is valid even when the player controlled person is dead (a difference from side player).", "example": "if (side man1 == playerSide) then { hint \"man1 is on your side!\"; };", "docSyntax": "playerSide", "syntax": "playerSide"}, "playersNumber": {"version": "CMD", "tags": "", "description": "Returns count of occupied role selection slots for given side. Players who claimed a slot in the lobby but did not start the mission are counted as well. If disabledAI = 0; in description.ext or Enable AI option is checked in Eden Editor, AI bots will be treated as valid players and will be counted too.", "example": "_west = playersNumber west; _east = playersNumber east; _civ = playersNumber civilian; hint format [\"West:%1 East:%2, Civ:%3\", _west, _east, _civ];", "docSyntax": "playersNumber side", "syntax": "playersNumber <objSide>"}, "playMission": {"version": "CMD", "tags": "", "description": "The mission is launched (from the main menu).", "example": "playMission [\"XOutrage\",\"x05Negotiator.Noe\"];", "docSyntax": "playMission [campaign, mission, skipBriefing]", "syntax": "playMission [campaign,mission,skipBriefing]"}, "playMove": {"version": "CMD", "tags": "", "description": "When used on a person, smooth transition to given move will be done.", "example": "soldierOne playMove \"Stand\";", "docSyntax": "unitName playMove moveName", "syntax": "<objUnit> playMove moveName"}, "playMusic": {"version": "CMD", "tags": "", "description": "Plays music defined in Description.ext's CfgMusic or config.cpp. If the musicName could not be found a message is logged into the .rpt file: Music <musicName> not found.", "example": "playMusic \"RadioAmbient1\";", "docSyntax": "playMusic musicName", "syntax": "playMusic musicName"}, "playSound": {"version": "CMD", "tags": "", "description": "Plays a sound from CfgSounds. Sound can be defined in missionConfigFile, configFile or campaignConfigFile.", "example": "playSound \"soundname\";", "docSyntax": "playSound soundName", "syntax": "playSound <string>"}, "position": {"version": "CMD", "tags": "", "description": "Returns position of an object (alias of getPos) or location (alias of locationPosition).", "example": "private _pos = position player;", "docSyntax": "position object", "syntax": "position <object>"}, "positionCameraToWorld": {"version": "CMD", "tags": "", "description": "Transforms position from camera coordinate space to world coordinate space. Camera axes are relative to camera orientation. x axis goes from left of the camera to right of the camera, z axis goes from underneath the camera to above the camera and y axis goes from back of the camera to where the camera is looking.", "example": "_worldPos = positionCameraToWorld _cameraPos;", "docSyntax": "positionCameraToWorld cameraPos", "syntax": "positionCameraToWorld cameraPos"}, "posScreenToWorld": {"version": "CMD", "tags": "", "description": "Converts map screen coordinates into world coordinates. Unlike ctrlMapScreenToWorld, this command returns world position is format [x, y, 0], otherwise it is identical to it.", "example": "_worldCoord = _control posScreenToWorld _ScreenCoord;", "docSyntax": "map posScreenToWorld [x, y]", "syntax": "<objMap> posScreenToWorld [x,y]"}, "posWorldToScreen": {"version": "CMD", "tags": "", "description": "Converts world coordinates into map screen coordinates. This command is identical to ctrlMapWorldToScreen.", "example": "_screenCoord = _control posWorldToScreen _worldCoord;", "docSyntax": "map posWorldToScreen position", "syntax": "<objMap> posWorldToScreen position"}, "precision": {"version": "CMD", "tags": "", "description": "Return the movement precision of the given entity, how is the entity able to be precise when moving to given target.", "example": "//\u00a0used in formationCDanger.fsm if (getPosATL _this distance _dangerPos <= precision _this) then { /* ... */ };", "docSyntax": "precision entity", "syntax": "precision entity"}, "preloadCamera": {"version": "CMD", "tags": "", "description": "Preload all textures and models around given Position to avoid visual artifacts after camera is moved. Should be used before any abrupt camera change/cut. Returns true once all data is ready. See camPreload for alternative, more flexible camera preloading.", "example": "waitUntil {preloadCamera markerPos \"cam_location_2\"};", "docSyntax": "preloadCamera position", "syntax": "preloadCamera position"}, "preloadObject": {"version": "CMD", "tags": "", "description": "Preloads all textures, materials and proxies needed to render given object. Works with objects and classnames - note that classnames require an object instance in the mission.", "example": "[] spawn { waitUntil { 10 preloadObject \"SoldierW\" }; hint \"Preload finished\"; };", "docSyntax": "distance preloadObject object", "syntax": "<scalar> preloadObject <object>"}, "preloadSound": {"version": "CMD", "tags": "", "description": "Makes sure that a sound can start playing without any delay once it is needed. Command works in Arma 3, but might not be implemented in earlier Arma installments.", "example": "{ waitUntil {preloadSound _x}; } forEach getArray (missionConfigFile >> \"CfgSounds\" >> \"sounds\");", "docSyntax": "preloadSound soundName", "syntax": "preloadSound <string>"}, "preloadTitleObj": {"version": "CMD", "tags": "", "description": "Preloads data for the given resource object.", "example": "_ok = preloadTitleObj [\"BISLogo\", \"PLAIN\"];", "docSyntax": "preloadTitleObj [name, type, speed, showInMap]", "syntax": "preloadTitleObj [<string>,type,<scalar>,showInMap]"}, "preloadTitleRsc": {"version": "CMD", "tags": "", "description": "Resource title - preload data. The resource can be defined in the Description.ext file.", "example": "_ok = preloadTitleRsc [\"BIS\", \"PLAIN\"];", "docSyntax": "preloadTitleRsc [name, type, speed, showInMap]", "syntax": "preloadTitleRsc [<string>,type,<scalar>,showInMap]"}, "preprocessFile": {"version": "CMD", "tags": "", "description": "Reads and processes the content of the specified file. Preprocessor is C-like, supports comments using // or /* and */ and PreProcessor Commands. Due to the hard-drive access this command executes and the lack of caching this command should not be used in time-critical script loops.", "example": "_content = preprocessFile \"myFunction.sqf\";", "docSyntax": "preprocessFile fileName", "syntax": "preprocessFile fileName"}, "preprocessFileLineNumbers": {"version": "CMD", "tags": "", "description": "Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using /* */ and PreProcessor Commands. The preprocessor also adds a default debug entrypoint for compiler at the begining of script: #line 1 \"aFilename\"", "example": "_string = preprocessFileLineNumbers \"A3\\ui_f\\scripts\\IGUI\\RscUnitInfo.sqf\"", "docSyntax": "preprocessFileLineNumbers fileName", "syntax": "preprocessFileLineNumbers fileName"}, "primaryWeapon": {"version": "CMD", "tags": "", "description": "Returns name of unit's primary weapon. This command will also return a weapon class name if the weapon is not used by the player, for example, it is on the unit's back. Use currentWeapon to get the weapon the unit is using.", "example": "_pWeap = primaryWeapon player;", "docSyntax": "primaryWeapon unit", "syntax": "primaryWeapon <objUnit>"}, "processInitCommands": {"version": "CMD", "tags": "", "description": "Process statements stored using setVehicleInit. The statements will only be executed once even if processInitCommands is called multiple times.", "example": "processInitCommands;", "docSyntax": "processInitCommands", "syntax": "processInitCommands"}, "publicVariable": {"version": "CMD", "tags": "", "description": "Reliably broadcasts missionNamespace variable and its current value to all computers (server/client).", "example": "TAG_MyPublicVariable = 0; TAG_MyPublicVariable = 1; publicVariable \"TAG_MyPublicVariable\"; //\u00a0other clients will receive the \"TAG_MyPublicVariable\" variable with a 1 value TAG_MyPublicVariable = 2; //\u00a0needs to be broadcast again - synchronisation is not automatic", "docSyntax": "publicVariable varName", "syntax": "publicVariable varName"}, "putWeaponPool": {"version": "CMD", "tags": "", "description": "Transfers weapons and magazines from weapon pool into cargo of given object. Used in campaign to transfer weapons into next mission.", "example": "putWeaponPool player;", "docSyntax": "putWeaponPool object", "syntax": "putWeaponPool <object>"}, "queryMagazinePool": {"version": "CMD", "tags": "", "description": "Return number of magazines of type name in magazine pool (used in campaign to transfer magazines into next mission).", "example": "_num = queryMagazinePool \"M16\";", "docSyntax": "queryMagazinePool name", "syntax": "queryMagazinePool <string>"}, "queryWeaponPool": {"version": "CMD", "tags": "", "description": "Return number of weapons of type name in weapon pool (used in campaign to transfer weapons into next mission).", "example": "_num = queryWeaponPool \"M16\";", "docSyntax": "queryWeaponPool name", "syntax": "queryWeaponPool <string>"}, "rad": {"version": "CMD", "tags": "", "description": "Converts given value in degrees to radians. 1 radian equals 180 degrees divided by pi.", "example": "_radians = rad 180; //\u00a0returns 3.1415 (pi)", "docSyntax": "rad value", "syntax": "rad <scalar>"}, "radioVolume": {"version": "CMD", "tags": "", "description": "Returns the current radio volume (set by fadeRadio).", "example": "hint str radioVolume;", "docSyntax": "radioVolume", "syntax": "radioVolume"}, "rain": {"version": "CMD", "tags": "", "description": "Returns the current value of rain density.", "example": "_rainLevel = rain;", "docSyntax": "rain", "syntax": "rain"}, "random": {"version": "CMD", "tags": "", "description": "Syntax\u00a02's distribution", "example": "_rNumber = random 1;", "docSyntax": "random x", "syntax": "random x"}, "rank": {"version": "CMD", "tags": "", "description": "Returns the rank of the given unit. Rank can be one of the following:", "example": "_rank = rank player;", "docSyntax": "rank unit", "syntax": "rank <objUnit>"}, "rating": {"version": "CMD", "tags": "", "description": "Check unit rating. Rating is increased for killing enemies, decreased for killing friendlies (see Rating Values). Can be changed via addRating by the mission designer. The rating of the player is displayed as the \"score\" at the end of the mission. Via Description.ext one can define how many points it takes to get a perfect score, as well as the number of stars.", "example": "_score = rating player;", "docSyntax": "rating unitName", "syntax": "rating <objUnit>"}, "rectangular": {"version": "CMD", "tags": "", "description": "Checks if a location is rectangular (returns true) or elliptical (returns false).", "example": "_isRect = rectangular myLocation;", "docSyntax": "rectangular location", "syntax": "rectangular location"}, "reload": {"version": "CMD", "tags": "", "description": "Main syntax: Reload first found muzzle that needs reloading (with some inconsistencies).", "example": "if (needReload player == 1) then { reload player };", "docSyntax": "reload unitName", "syntax": "reload <objUnit>"}, "reloadEnabled": {"version": "CMD", "tags": "", "description": "Check whether magazine is reloaded whenever emptied.", "example": "private _canReload = reloadEnabled _unit1;", "docSyntax": "reloadEnabled unitName", "syntax": "reloadEnabled <objUnit>"}, "removeAction": {"version": "CMD", "tags": "", "description": "Removes user added action with given ID. This only removes actions added with the addAction command. You cannot remove default game actions, such as reload.", "example": "player removeAction 0;", "docSyntax": "unit removeAction actionID", "syntax": "<objUnit> removeAction actionID"}, "removeAllEventHandlers": {"version": "CMD", "tags": "", "description": "Removes all event handlers of given type that were added by addEventHandler and resets event handler's creation index to 0.", "example": "player removeAllEventHandlers \"Killed\";", "docSyntax": "target removeAllEventHandlers handlerType", "syntax": "<object> removeAllEventHandlers handlerType"}, "removeAllWeapons": {"version": "CMD", "tags": "", "description": "Removes all weapons and magazines from the given unit. Does not remove items like map, compass, radio (see removeWeapon for this).", "example": "removeAllWeapons player;", "docSyntax": "removeAllWeapons unitName", "syntax": "removeAllWeapons <objUnit>"}, "removeClothing": {"version": "CMD", "tags": "", "description": "Removes specified named clothes selections from unit.", "example": "_unit removeClothing [\"shirt\"];", "docSyntax": "unit removeClothing item", "syntax": "<objUnit> removeClothing <objItem>"}, "removeEventHandler": {"version": "CMD", "tags": "", "description": "Removes a given Event Handler that was added with addEventHandler.", "example": "player removeEventHandler [\"Killed\", 0];", "docSyntax": "target removeEventHandler [type, index]", "syntax": "<object> removeEventHandler [type,<scalar>]"}, "removeMagazine": {"version": "CMD", "tags": "", "description": "Remove magazine from the unit.", "example": "player removeMagazine \"M16\";", "docSyntax": "unitName removeMagazine magazineName", "syntax": "<objUnit> removeMagazine magazineName"}, "removeMagazines": {"version": "CMD", "tags": "", "description": "Removes all magazines of given type from the unit. If magazine class does not exist, nothing happens, not even .rpt message, unlike with addMagazine command.", "example": "player removeMagazines \"30Rnd_556x45_Stanag\";", "docSyntax": "unitName removeMagazines magazineName", "syntax": "<objUnit> removeMagazines magazineName"}, "removeSwitchableUnit": {"version": "CMD", "tags": "", "description": "Remove a unit from the list of units available for Team Switch.", "example": "removeSwitchableUnit _unit1;", "docSyntax": "removeSwitchableUnit unitName", "syntax": "removeSwitchableUnit <objUnit>"}, "removeWeapon": {"version": "CMD", "tags": "", "description": "Remove weapon from a unit. The unit must be local to the computer where command is executed. For a global version of this command see removeWeaponGlobal. Note: It is possible to create invalid combinations with this command (ie, attempting to remove a weapon that a unit does not possess). When doing so, application behaviour is undefined.", "example": "player removeWeapon \"BAF_L85A2_RIS_SUSAT\";", "docSyntax": "unit removeWeapon weapon", "syntax": "<objUnit> removeWeapon <string>"}, "requiredVersion": {"version": "CMD", "tags": "", "description": "Check if version of application is available. If the current version is older than the required one, a warning message is shown and false is returned.", "example": "if !(requiredVersion \"1.09\") exitWith {};", "docSyntax": "requiredVersion version", "syntax": "requiredVersion version"}, "resize": {"version": "CMD", "tags": "", "description": "Changes the size of the given array. The command does not return new array, it resizes the source array to the desired number of elements. If the new size is bigger than the current size, the new places are filled with nil. The alternative syntax allows to fill resized positions with a given value. Array and HashMap values are copied.", "example": "_arrayNum = [0,1,2,3,4]; _arrayNum resize 2; //\u00a0_arrayNum is now [0, 1] _arrayNum resize 5; //\u00a0_arrayNum is now [0, 1, nil, nil, nil]", "docSyntax": "array resize count", "syntax": "<array> resize count"}, "respawnVehicle": {"version": "CMD", "tags": "", "description": "Sets vehicle as respawnable in MP game. The vehicle will be spawned at the locality and coordinates it was prior to destruction. If respawn type is set to base respawn (type 3) and vehicle respawn marker is provided (respawn_vehicle_XXXSIDEXXX), vehicle will spawn on the marker.", "example": "car respawnVehicle [5, 3]; //\u00a0'car' will respawn at the predefined marker for the side after 5 seconds. The unit will respawn 3 times.", "docSyntax": "vehicle respawnVehicle [delay, count]", "syntax": "<objVehicle> respawnVehicle [<scalar>,count]"}, "reveal": {"version": "CMD", "tags": "", "description": "Reveals a target to a group. If toWhom is a unit, unit's group is considered. If toWhom is a vehicle, vehicle commander's group is considered. The knowledge value will be set to the highest level any unit of the revealing side has about the revealed target. If the revealing side has no knowledge about the revealed target, the value will be set to 1.", "example": "_soldierOne reveal _soldierTwo; //\u00a0soldierOne knowsAbout information about soldierTwo is updated", "docSyntax": "toWhom reveal target", "syntax": "toWhom reveal <object>"}, "round": {"version": "CMD", "tags": "", "description": "Rounds the provided value to the closest integer.", "example": "round 5.25; //\u00a0returns 5", "docSyntax": "round value", "syntax": "round <scalar>"}, "runInitScript": {"version": "CMD", "tags": "", "description": "Fades in mission screen and re-executes init.sqf and init.sqs scripts. In Eden Editor the code inside the \"Init\" mission attribute is executed.", "example": "runInitScript;", "docSyntax": "runInitScript", "syntax": "runInitScript"}, "saveGame": {"version": "CMD", "tags": "", "description": "Autosaves the game (used for Retry). The saving is not started immediately, the request for autosave is made instead. To check the status of the request, use isSaving. The game can then be loaded from the last autosave with loadGame. Will not save if the player is null or dead.", "example": "saveGame;", "docSyntax": "saveGame", "syntax": "saveGame"}, "saveIdentity": {"version": "CMD", "tags": "", "description": "Saves units's identity to Objects.sav file in campaign directory as entry name.", "example": "_successful = player saveIdentity \"playerid\";", "docSyntax": "unit saveIdentity name", "syntax": "<objUnit> saveIdentity <string>"}, "saveStatus": {"version": "CMD", "tags": "", "description": "Saves object's properties to Objects.sav file in campaign directory as entry name.", "example": "player saveStatus \"playerstate\";", "docSyntax": "object saveStatus name", "syntax": "<object> saveStatus <string>"}, "saveVar": {"version": "CMD", "tags": "", "description": "Save variable value into the campaign space. This variable is available to all following missions in the campaign.", "example": "saveVar \"varOne\";", "docSyntax": "saveVar varname", "syntax": "saveVar varname"}, "say": {"version": "CMD", "tags": "", "description": "Make unit say given sound. The sound is defined in CfgSounds. If the unit is a person, it will also perform the corresponding lipsync effect provided an appropriate .lip file has been created for this sound.", "example": "(units player select 1) say [\"whisper1\", 5];", "docSyntax": "from say sound", "syntax": "from say sound"}, "scopeName": {"version": "CMD", "tags": "", "description": "Defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands like breakOut and breakTo. Scope name should be defined only once per scope. Trying to set a different name on the scope that has already defined scope name will result in error.", "example": "scopeName \"main\"; while {true} do { scopeName \"loop1\"; while {true} do { scopeName \"loop2\"; //\u00a0... }; };", "docSyntax": "scopeName name", "syntax": "scopeName <string>"}, "score": {"version": "CMD", "tags": "", "description": "Returns the person's score in MP.", "example": "_pScore = score player;", "docSyntax": "score unit", "syntax": "score <objUnit>"}, "scriptDone": {"version": "CMD", "tags": "", "description": "Check if a script is finished running using the Script Handle returned by execVM or spawn.", "example": "_scriptHandle = [\"arguments\"] execVM \"scriptname.sqf\"; waitUntil { scriptDone _scriptHandle };", "docSyntax": "scriptDone handle", "syntax": "scriptDone handle"}, "scudState": {"version": "CMD", "tags": "", "description": "Return the current state of given Scud launcher.", "example": "waitUntil { sleep 1; scudState _scud > 2 }; guba say \"MasterPlanCompletion\";", "docSyntax": "scudState scudName", "syntax": "scudState scudName"}, "secondaryWeapon": {"version": "CMD", "tags": "", "description": "Returns the name of a unit's secondary weapon (launcher). To detect the weapon which is currently being used by the unit use currentWeapon.", "example": "private _secondaryWeapon = secondaryWeapon player;", "docSyntax": "secondaryWeapon unit", "syntax": "secondaryWeapon <objUnit>"}, "selectionPosition": {"version": "CMD", "tags": "", "description": "Returns selection position in model space pertaining to the current animation in render time scope. When the default syntax is used, command searches first in Memory LOD, then in Geometry LOD, FireGeometry LOD, LandContact LOD, HitPoints LOD and finally in ViewGeometry LOD and returns the first matching find. The second syntax allows to specify which one of these LODs to search in instead.", "example": "_inModelPosition = player selectionPosition \"head_hit\";", "docSyntax": "object selectionPosition selectionName", "syntax": "<object> selectionPosition selectionName"}, "selectLeader": {"version": "CMD", "tags": "", "description": "Select the group's leader. Group locality can be checked with local command and group ownership with groupOwner command.", "example": "group player selectLeader player;", "docSyntax": "group selectLeader unitName", "syntax": "<objGroup> selectLeader <objUnit>"}, "selectPlayer": {"version": "CMD", "tags": "", "description": "Move player into given unit. Some usage advices:", "example": "selectPlayer bob;", "docSyntax": "selectPlayer unitName", "syntax": "selectPlayer <objUnit>"}, "selectWeapon": {"version": "CMD", "tags": "", "description": "Selects the given weapon.", "example": "_soldier1 selectWeapon \"LAWLauncher\";", "docSyntax": "unitName selectWeapon muzzleName", "syntax": "<objUnit> selectWeapon muzzleName"}, "sendSimpleCommand": {"version": "CMD", "tags": "", "description": "Sends a simple command to the vehicle's driver / gunner (air vehicles ignore it). See also vehicleMoveInfo.", "example": "vehicle player sendSimpleCommand \"STOP\";", "docSyntax": "vehicleName sendSimpleCommand command", "syntax": "vehicleName sendSimpleCommand command"}, "setAccTime": {"version": "CMD", "tags": "", "description": "Set simulation acceleration coefficient. May also be used to slow time in cutscenes.", "example": "setAccTime 0.1;", "docSyntax": "setAccTime accFactor", "syntax": "setAccTime accFactor"}, "setAirportSide": {"version": "CMD", "tags": "", "description": "Set owning side of the airport. ID is the number to identify which airport on the island you want to check.", "example": "0 setAirportSide east;", "docSyntax": "id setAirportSide side", "syntax": "<scalar> setAirportSide <objSide>"}, "setAmmoCargo": {"version": "CMD", "tags": "", "description": "Set amount of ammo resources in cargo space of a rearm vehicle. Ammo resource is used to resupply vehicles that take ammo. Soldiers use individual magazines instead. Amount: 1 is full cargo. The", "example": "_ammoTruck1 setAmmoCargo 0.5;", "docSyntax": "vehicleName setAmmoCargo ammoCargo", "syntax": "vehicleName setAmmoCargo ammoCargo"}, "setAperture": {"version": "CMD", "tags": "", "description": "Sets custom eye accommodation camera aperture.", "example": "setAperture 0.3;", "docSyntax": "setAperture aperture", "syntax": "setAperture aperture"}, "setAttributes": {"version": "CMD", "tags": "", "description": "Returns a Structured Text created from the given structured text and sets attributes to the given values.", "example": "_txt = text \"Red text, right align\"; _txt setAttributes [\"color\", \"#FF0000\", \"align\", \"right\"]; hint composeText [_txt];", "docSyntax": "text setAttributes [name1, value1, name2, value2, ...]", "syntax": "<string> setAttributes [name1,value1,name2,value2,...]"}, "setBehaviour": {"version": "CMD", "tags": "", "description": "Sets individual unit behaviour on every unit in a group.", "example": "_group1 setBehaviour \"SAFE\";", "docSyntax": "groupOrUnit setBehaviour behaviour", "syntax": "groupOrUnit setBehaviour behaviour"}, "setCameraEffect": {"version": "CMD", "tags": "", "description": "Applies an effect to the current camera of the player.", "example": "myTrigger setCameraEffect [\"ZoomIn\", \"FRONT\"];", "docSyntax": "triggerOrWaypoint setCameraEffect [type, position]", "syntax": "triggerOrWaypoint setCameraEffect [type,position]"}, "setCameraInterest": {"version": "CMD", "tags": "", "description": "Set camera interest for given entity. Camera interest is by default 0. Any unit which is speaking has its camera interest raised to 50. Camera interest is used to focus camera to control depth of field in cutscenes. Combination of camera interest, unit position of the screen, unit movement, unit type, and some other properties is used to determine which unit to focus at. Higher camera interest increases the chance of the unit being focused.", "example": "_soldier setCameraInterest 50;", "docSyntax": "entity setCameraInterest interest", "syntax": "entity setCameraInterest interest"}, "setCaptive": {"version": "CMD", "tags": "", "description": "Mark a unit as captive. If unit is a vehicle, commander is marked. A captive unit:", "example": "_soldier1 setCaptive true; side _soldier1; //\u00a0returns civilian side group _soldier1; //\u00a0returns e.g blufor", "docSyntax": "unitName setCaptive status", "syntax": "<objUnit> setCaptive status"}, "setCombatMode": {"version": "CMD", "tags": "", "description": "Sets AI group combat mode (engagement rules). For individual unit's combat mode see setUnitCombatMode. Mode may be one of the following:", "example": "_group1 setCombatMode \"BLUE\";", "docSyntax": "group setCombatMode mode", "syntax": "<objGroup> setCombatMode mode"}, "setCurrentWaypoint": {"version": "CMD", "tags": "", "description": "Sets the currently active waypoint for a group.", "example": "_grp setCurrentWaypoint [_grp, 1];", "docSyntax": "groupName setCurrentWaypoint waypoint", "syntax": "groupName setCurrentWaypoint waypoint"}, "setDamage": {"version": "CMD", "tags": "", "description": "Event Handler", "example": "_soldier1 setDamage 1;", "docSyntax": "object setDamage damage", "syntax": "<object> setDamage <scalar>"}, "setDammage": {"version": "CMD", "tags": "", "description": "Entirely identical to setDamage that was introduced to fix a typographical error in the command's name.", "example": "-", "docSyntax": "-", "syntax": "-"}, "setDate": {"version": "CMD", "tags": "", "description": "Sets mission date and time. Players joining after mission start will get the current server date including the year.", "example": "setDate [1986, 2, 25, 16, 0]; //\u00a04:00pm February 25, 1986", "docSyntax": "setDate date", "syntax": "setDate date"}, "setDestination": {"version": "CMD", "tags": "", "description": "Set the destination for path planning of the pilot. Possible values for planningMode are:", "example": "bob setDestination [screenToWorld [0.5,0.5], \"LEADER PLANNED\", true];", "docSyntax": "object setDestination [position, planningMode, forceReplan]", "syntax": "<object> setDestination [position,planningMode,forceReplan]"}, "setDir": {"version": "CMD", "tags": "", "description": "Sets object heading. Angles are measured in degrees clockwise from north; the regular range goes from 0 to 360 (0\u00b0 = N, 90\u00b0 = E, 180\u00b0 = S, 270\u00b0 = W). Negative angles represent counter-clockwise angles.", "example": "myUnit setDir 45; //\u00a0will set myUnit to face North-East", "docSyntax": "object setDir heading", "syntax": "<object> setDir heading"}, "setDirection": {"version": "CMD", "tags": "", "description": "Sets the orientation of a location. The location's area and map icon (if its type uses an icon) will be rotated to this orientation.", "example": "_location = createLocation [\"VegetationPalm\", getPos player, 200, 200]; _location setText \"Benargee's Palm Tree\"; _location setDirection 45;", "docSyntax": "location setDirection direction", "syntax": "location setDirection direction"}, "setDropInterval": {"version": "CMD", "tags": "", "description": "Set interval of emitting particles from particle source. In Arma 3 hardcoded limit of how many particles can exist at the same time is 18000. Correspondence between CfgCloudlets class param name and command param:", "example": "_source setDropInterval 0.05;", "docSyntax": "particleSource setDropInterval interval", "syntax": "particleSource setDropInterval interval"}, "setEffectCondition": {"version": "CMD", "tags": "", "description": "The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result.", "example": "_triggerObj setEffectCondition \"thisList\";", "docSyntax": "trigger setEffectCondition statement", "syntax": "<objTrigger> setEffectCondition statement"}, "setFace": {"version": "CMD", "tags": "", "description": "Set person's face. For a list of available faces, check Category:CfgIdentities.", "example": "soldier1 setFace \"WhiteHead_02\";", "docSyntax": "person setFace face", "syntax": "<objUnit> setFace face"}, "setFaceAnimation": {"version": "CMD", "tags": "", "description": "Sets facial animation phase (eye blinking).", "example": "_soldier1 setFaceAnimation 0.5;", "docSyntax": "unit setFaceAnimation blink", "syntax": "<objUnit> setFaceAnimation blink"}, "setFlagOwner": {"version": "CMD", "tags": "", "description": "Sets flag owner. When owner is set to objNull or any object other than a unit of class man or logic, flag is returned to the flagpole. A flag owned by a logic has no visual representation.", "example": "_flag1 setFlagOwner _soldier1;", "docSyntax": "flag setFlagOwner owner", "syntax": "<objFlag> setFlagOwner owner"}, "setFlagSide": {"version": "CMD", "tags": "", "description": "Sets flag Side. A flag may be taken by any unit that is enemy to the side that owns the flag. Just like with setFlagTexture, if the command executed where unit is local effect of the command will be global and JIP compatible.", "example": "_flag1 setFlagSide east;", "docSyntax": "flag setFlagSide side", "syntax": "<objFlag> setFlagSide <objSide>"}, "setFlagTexture": {"version": "CMD", "tags": "", "description": "Sets flag texture.", "example": "_flagE setFlagTexture \"\\ca\\misc\\data\\sever_vlajka.paa\";", "docSyntax": "flag setFlagTexture texture", "syntax": "<objFlag> setFlagTexture <string>"}, "setFog": {"version": "CMD", "tags": "", "description": "Smoothly change the fog over given time (in seconds). See also fogParams.", "example": "15 setFog 0.5;", "docSyntax": "time setFog fog", "syntax": "<scalar> setFog fog"}, "setFormation": {"version": "CMD", "tags": "", "description": "Set group formation.", "example": "_groupOne setFormation \"LINE\";", "docSyntax": "group setFormation formation", "syntax": "<objGroup> setFormation formation"}, "setFormationTask": {"version": "CMD", "tags": "", "description": "Set the current task of the formation member.", "example": "_unit setFormationTask \"MOVE\";", "docSyntax": "unit setFormationTask task", "syntax": "<objUnit> setFormationTask <objTask>"}, "setFormDir": {"version": "CMD", "tags": "", "description": "Sets group formation heading. Accepted heading range is 0 to 360. Formation is facing this direction unless enemy is seen. When group is moving, this value is overridden by movement direction. If the new direction is noticeably different from the old direction (approx +/- 15 degrees), units will change positions changing formationDirection.", "example": "_group1 setFormDir 180;", "docSyntax": "group setFormDir heading", "syntax": "<objGroup> setFormDir heading"}, "setFriend": {"version": "CMD", "tags": "", "description": "Sets how friendly a side is with another. The friendliness is set for one side, not for the other. See also Side Relations.", "example": "west setFriend [resistance, 0]; //\u00a0west will not like resistance from now on", "docSyntax": "side1 setFriend [side2, value]", "syntax": "side1 setFriend [side2,<scalar>]"}, "setFuel": {"version": "CMD", "tags": "", "description": "Sets fuel level.", "example": "_jeepOne setFuel 0.5;", "docSyntax": "vehicle setFuel amount", "syntax": "<objVehicle> setFuel amount"}, "setFuelCargo": {"version": "CMD", "tags": "", "description": "Sets fuel amount in cargo space of refuel vehicles. Note that the carrying capacity of each side's refuel trucks differ.", "example": "_refuelTruck setFuelCargo 0;", "docSyntax": "vehicle setFuelCargo amount", "syntax": "<objVehicle> setFuelCargo amount"}, "setGroupId": {"version": "CMD", "tags": "", "description": "Sets the group radio callsign, how it will be displayed in radio chat. Two groups on the same side cannot have the same callsign (possible on different sides) - see Example 4.", "example": "Arma 3:", "docSyntax": "group setGroupId [nameFormat, nameParam1, nameParam2, ...]", "syntax": "<objGroup> setGroupId [nameFormat,nameParam1,nameParam2,...]"}, "setHideBehind": {"version": "CMD", "tags": "", "description": "Sets the data for hiding. objectWhereHide can be taken using findCover. hidePosition can be taken using getHideFrom. Command is not functional in Arma 2.", "example": "-", "docSyntax": "object setHideBehind [objectWhereHide, hidePosition]", "syntax": "<object> setHideBehind [objectWhereHide,hidePosition]"}, "setIdentity": {"version": "CMD", "tags": "", "description": "Sets identity of a person. The identities could be defined in a custom config in Description.ext or in the main config. For a list of available main config values see CfgIdentities.", "example": "_soldier1 setIdentity \"MyLittleSoldier\";", "docSyntax": "person setIdentity identity", "syntax": "<objUnit> setIdentity identity"}, "setImportance": {"version": "CMD", "tags": "", "description": "Sets the importance value of location.", "example": "myLocation setImportance 2;", "docSyntax": "location setImportance value", "syntax": "location setImportance <scalar>"}, "setLightAmbient": {"version": "CMD", "tags": "", "description": "Set ambient color of light. This includes surfaces that face away from the light, unlike setLightColor.", "example": "myLight setLightAmbient [0.5,0,0]; //\u00a0produces red light around the origin source", "docSyntax": "light setLightAmbient color", "syntax": "light setLightAmbient <scalar>"}, "setLightBrightness": {"version": "CMD", "tags": "", "description": "Set brightness of light.", "example": "myLight setLightBrightness 2;", "docSyntax": "light setLightBrightness brightness", "syntax": "light setLightBrightness brightness"}, "setLightColor": {"version": "CMD", "tags": "", "description": "Set diffuse color of light. Illuminates surfaces that are facing the light.", "example": "myLight setLightColor [0.5,0,0]; //\u00a0produces red", "docSyntax": "light setLightColor [r, g, b]", "syntax": "light setLightColor [r,g,b]"}, "setMarkerBrush": {"version": "CMD", "tags": "", "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.", "example": "\"Marker1\" setMarkerBrush \"DIAGGRID\";", "docSyntax": "markerName setMarkerBrush brush", "syntax": "<string> setMarkerBrush brush"}, "setMarkerBrushLocal": {"version": "CMD", "tags": "", "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.", "example": "\"Marker1\" setMarkerBrushLocal \"DiagGrid\";", "docSyntax": "markerName setMarkerBrushLocal brush", "syntax": "<string> setMarkerBrushLocal brush"}, "setMarkerColor": {"version": "CMD", "tags": "", "description": "Sets marker color. Marker color names and their corresponding RGBA values for Arma 3 could be found here: Arma 3: CfgMarkerColors", "example": "\"MarkerOne\" setMarkerColor \"ColorBlack\";", "docSyntax": "markerName setMarkerColor color", "syntax": "<string> setMarkerColor <scalar>"}, "setMarkerColorLocal": {"version": "CMD", "tags": "", "description": "Sets marker color for the given marker locally. Marker color names and their corresponding RGBA values for Arma 3 could be found in here: Arma 3: CfgMarkerColors", "example": "\"MarkerOne\" setMarkerColorLocal \"ColorBlack\";", "docSyntax": "markerName setMarkerColorLocal color", "syntax": "<string> setMarkerColorLocal <scalar>"}, "setMarkerDir": {"version": "CMD", "tags": "", "description": "Sets the orientation of the marker. Angle is in degrees.", "example": "\"Marker1\" setMarkerDir 90;", "docSyntax": "markerName setMarkerDir angle", "syntax": "<string> setMarkerDir angle"}, "setMarkerDirLocal": {"version": "CMD", "tags": "", "description": "Sets the orientation of the marker.", "example": "\"Marker1\" setMarkerDirLocal 90;", "docSyntax": "markerName setMarkerDirLocal angle", "syntax": "<string> setMarkerDirLocal angle"}, "setMarkerPos": {"version": "CMD", "tags": "", "description": "Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, its getPosWorld is used.", "example": "\"MarkerOne\" setMarkerPos getMarkerPos \"MarkerTwo\";", "docSyntax": "markerName setMarkerPos pos", "syntax": "<string> setMarkerPos <array>"}, "setMarkerPosLocal": {"version": "CMD", "tags": "", "description": "Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, its getPosWorld is used.", "example": "\"MarkerOne\" setMarkerPosLocal getMarkerPos \"MarkerTwo\";", "docSyntax": "markerName setMarkerPosLocal pos", "syntax": "<string> setMarkerPosLocal <array>"}, "setMarkerShape": {"version": "CMD", "tags": "", "description": "Selects shape (actual type) of the marker.", "example": "\"Marker1\" setMarkerShape \"RECTANGLE\";", "docSyntax": "markerName setMarkerShape shape", "syntax": "<string> setMarkerShape shape"}, "setMarkerShapeLocal": {"version": "CMD", "tags": "", "description": "Selects shape (actual type) of the local marker.", "example": "\"Marker1\" setMarkerShapeLocal \"RECTANGLE\";", "docSyntax": "markerName setMarkerShapeLocal shape", "syntax": "<string> setMarkerShapeLocal shape"}, "setMarkerSize": {"version": "CMD", "tags": "", "description": "Sets the marker's size.", "example": "\"MarkerOne\" setMarkerSize [100, 200];", "docSyntax": "markerName setMarkerSize [a-axis, b-axis]", "syntax": "<string> setMarkerSize [a-axis,b-axis]"}, "setMarkerSizeLocal": {"version": "CMD", "tags": "", "description": "Set marker size.", "example": "\"MarkerOne\" setMarkerSizeLocal [100, 200];", "docSyntax": "markerName setMarkerSizeLocal [axisA, axisB]", "syntax": "<string> setMarkerSizeLocal [axisA,axisB]"}, "setMarkerText": {"version": "CMD", "tags": "", "description": "Sets the text label of an existing marker.", "example": "\"Marker1\" setMarkerText \"You are here.\";", "docSyntax": "markerName setMarkerText text", "syntax": "<string> setMarkerText <string>"}, "setMarkerTextLocal": {"version": "CMD", "tags": "", "description": "Sets the text label of an existing marker.", "example": "\"Marker1\" setMarkerTextLocal \"You are here.\";", "docSyntax": "markerName setMarkerTextLocal text", "syntax": "<string> setMarkerTextLocal <string>"}, "setMarkerType": {"version": "CMD", "tags": "", "description": "Sets marker type. Marker type is a class name from CfgMarkers.", "example": "\"MarkerOne\" setMarkerType \"Warning\";", "docSyntax": "markerName setMarkerType type", "syntax": "<string> setMarkerType type"}, "setMarkerTypeLocal": {"version": "CMD", "tags": "", "description": "Sets marker type locally. Marker type is a class name in CfgMarkers.", "example": "\"MarkerOne\" setMarkerTypeLocal \"Warning\";", "docSyntax": "markerName setMarkerTypeLocal type", "syntax": "<string> setMarkerTypeLocal type"}, "setMimic": {"version": "CMD", "tags": "", "description": "Sets person's facial expression. To set it back to default, use \"\".", "example": "_soldier1 setMimic \"hurt\";", "docSyntax": "person setMimic mimic", "syntax": "<objUnit> setMimic mimic"}, "setMousePosition": {"version": "CMD", "tags": "", "description": "Moves mouse pointer to specified position on the screen. x and y could be any number, but will be clipped so mouse never leaves the screen area.", "example": "setMousePosition [0.5, 0.5];", "docSyntax": "setMousePosition [x, y]", "syntax": "setMousePosition [x,y]"}, "setMusicEffect": {"version": "CMD", "tags": "", "description": "Defines a music track played on activation. If another track is playing already, this will stop it and start the new track. Track is a subclass name of CfgMusic. In addition, \"$STOP$\" (stops the current music track) or use playMusic \"\". When used in a trigger, the track starts on activation but does not automatically stop on deactivation.", "example": "_trigger setMusicEffect \"Track1\";", "docSyntax": "trigger setMusicEffect track", "syntax": "<objTrigger> setMusicEffect track"}, "setName": {"version": "CMD", "tags": "", "description": "Sets the name of a location or a person (person only in single player).", "example": "myLocation setName \"My Location Name\";", "docSyntax": "thing setName name", "syntax": "thing setName <string>"}, "setObjectTexture": {"version": "CMD", "tags": "", "description": "Applies given texture to object's selection. See also Procedural Textures and Retexturing with setObjectTexture.", "example": "_objectname setObjectTexture [0, \"\\pboname\\texture.paa\"]; _objectname setObjectTexture [1, \"\\pboname\\texture2.paa\"];", "docSyntax": "object setObjectTexture [selection, texture]", "syntax": "<object> setObjectTexture [selection,<string>]"}, "setOvercast": {"version": "CMD", "tags": "", "description": "Set overcast to given value smoothly during given time (in seconds). Zero time means immediate change. An overcast setting of zero means clear (sunny) weather, and one means storms and rain are very likely. Higher overcast values also result in higher wind speeds.", "example": "60 setOvercast 0.5;", "docSyntax": "time setOvercast overcast", "syntax": "<scalar> setOvercast overcast"}, "setParticleCircle": {"version": "CMD", "tags": "", "description": "Updates particle source, creates particles in circle with given radius. Velocity is transformed and added to total velocity.", "example": "_myParticleSource setParticleCircle [3, [0,0,5]];", "docSyntax": "particleSource setParticleCircle [circleRadius, circleVelocity]", "syntax": "particleSource setParticleCircle [circleRadius,circleVelocity]"}, "setParticleParams": {"version": "CMD", "tags": "", "description": "Set parameters to particle source. Array is in format ParticleArray.", "example": "see ParticleArray", "docSyntax": "particleSource setParticleParams array", "syntax": "particleSource setParticleParams <array>"}, "setParticleRandom": {"version": "CMD", "tags": "", "description": "Sets randomization of particle source parameters. Correspondence between CfgCloudlets class param names and command array of params:", "example": "_particleSource setParticleRandom [0, [0.1, 0.1, 0.1], [0, 0, 0.5], 0, 0.1, [0, 0, 0, 0], 0, 0, 45, 0];", "docSyntax": "particleSource setParticleRandom [lifeTime, position, moveVelocity, rotationVelocity, size, color, directionPeriod, directionIntensity, angle, bounceOnSurface]", "syntax": "particleSource setParticleRandom [lifeTime,position,moveVelocity,rotationVelocity,size,<scalar>,directionPeriod,directionIntensity,angle,bounceOnSurface]"}, "setPlayable": {"version": "CMD", "tags": "", "description": "Create a multiplayer role for the unit. The roles created this way are used for Join In Progress and Team Switch.", "example": "setPlayable _aPerson;", "docSyntax": "setPlayable unitName", "syntax": "setPlayable <objUnit>"}, "setPos": {"version": "CMD", "tags": "", "description": "Sets object position to format PositionAGLS (over surface). The Z value is used to calculate the nearest surface below the provided position. If the surface is close, it uses the Z position of the surface. Otherwise, Z value becomes the offset from that surface.", "example": "player setPos [getPos player select 0, getPos player select 1, (getPos player select 2) +10]; //\u00a0the same as above using set (OFP:R v1.75) _pos = getPos player; _pos set [2, _pos select 2 + 10]; player setPos _pos; //\u00a0the same as above using modelToWorld (ArmA v1.00) player setPos (player modelToWorld [0,0,10]); //\u00a0the same as above using vectorAdd (Arma 3 v1.22) player setPos (getPos player vectorAdd [0,0,10]);", "docSyntax": "object setPos pos", "syntax": "<object> setPos <array>"}, "setPosASL": {"version": "CMD", "tags": "", "description": "Sets the object position above sea level. Given position must be in PositionASL format.", "example": "player setPosASL [getPosASL player select 0, (getPosASL player select 1) + 10, getPosASL player select 2];", "docSyntax": "object setPosASL pos", "syntax": "<object> setPosASL <array>"}, "setPosition": {"version": "CMD", "tags": "", "description": "Sets the position of a location.", "example": "myLocation setPosition getPosATL player;", "docSyntax": "location setPosition pos", "syntax": "location setPosition <array>"}, "setRadioMsg": {"version": "CMD", "tags": "", "description": "Sets radio trigger menu title text (0 -> 0 -> map radio). Use \"NULL\" to disable radio slot. Use \"\" to restore default title", "example": "1 setRadioMsg \"Click meeeeeeeeee\"; //changes title of radio Alpha", "docSyntax": "index setRadioMsg text", "syntax": "<scalar> setRadioMsg <string>"}, "setRain": {"version": "CMD", "tags": "", "description": "Sets rain density smoothly over the given transition time. A transition time of zero means an immediate change. A rain density of zero is no rain, one is maximum rain. Rain is not possible when overcast is less than 0.7.", "example": "60 setRain 1;", "docSyntax": "time setRain rain", "syntax": "<scalar> setRain rain"}, "setRank": {"version": "CMD", "tags": "", "description": "Sets rank of given unit.", "example": "player setRank \"COLONEL\";", "docSyntax": "unitName setRank rank", "syntax": "<objUnit> setRank rank"}, "setRectangular": {"version": "CMD", "tags": "", "description": "Set the shape of a location to be either rectangular or elliptical. Locations default shape is elliptical.", "example": "myLocation setRectangular true;", "docSyntax": "location setRectangular set", "syntax": "location setRectangular set"}, "setRepairCargo": {"version": "CMD", "tags": "", "description": "Set amount of repair resources in cargo space of repair vehicle. Amount 1 is full cargo.", "example": "_repairTruck1 setRepairCargo 0;", "docSyntax": "vehicleName setRepairCargo amount", "syntax": "vehicleName setRepairCargo amount"}, "setSide": {"version": "CMD", "tags": "", "description": "Sets a location's side. The default side is Unknown.", "example": "_myLocation setSide resistance;", "docSyntax": "location setSide side", "syntax": "location setSide <objSide>"}, "setSize": {"version": "CMD", "tags": "", "description": "Sets the size (radius) of a location. The width is 2 * x, the height is 2 * y.", "example": "myLocation setSize [10,30];", "docSyntax": "location setSize size", "syntax": "location setSize size"}, "setSkill": {"version": "CMD", "tags": "", "description": "Sets the skill level of given unit. The value of a sub-skill is interpolated into a range defined in CfgAISkill.", "example": "_hero setSkill 1;", "docSyntax": "unit setSkill skill", "syntax": "<objUnit> setSkill skill"}, "setSoundEffect": {"version": "CMD", "tags": "", "description": "Defines the different sound effects for a trigger or a waypoint. To stop any sound, deactivate the trigger (might take up to 0.5 seconds to stop) or delete the trigger/waypoint (immediate).", "example": "_trigger setSoundEffect [\"Alarm\", \"\", \"\", \"\"];", "docSyntax": "trigger setSoundEffect [sound, voice, soundEnv, soundDet]", "syntax": "<objTrigger> setSoundEffect [sound,voice,soundEnv,soundDet]"}, "setSpeedMode": {"version": "CMD", "tags": "", "description": "Sets group speed mode. If unit is passed as param, unit's group is used. Mode may be one of:", "example": "_groupOne setSpeedMode \"LIMITED\";", "docSyntax": "groupName setSpeedMode mode", "syntax": "groupName setSpeedMode mode"}, "setTargetAge": {"version": "CMD", "tags": "", "description": "Sets how the target is known to the other centers. They behave like the target was seen age seconds ago. Possible age values are: \"ACTUAL\", \"5 MIN\", \"10 MIN\", \"15 MIN\", \"30 MIN\", \"60 MIN\", \"120 MIN\" or \"UNKNOWN\".", "example": "player setTargetAge \"10 MIN\";", "docSyntax": "object setTargetAge age", "syntax": "<object> setTargetAge age"}, "setTerrainGrid": {"version": "CMD", "tags": "", "description": "Sets the desired terrain resolution in meters.", "example": "setTerrainGrid 12.5;", "docSyntax": "setTerrainGrid grid", "syntax": "setTerrainGrid grid"}, "setText": {"version": "CMD", "tags": "", "description": "Sets the text associated with a location. This text will be displayed on the game map at the location's position.", "example": "myLocation setText \"Rahmadi Village\";", "docSyntax": "location setText text", "syntax": "location setText <string>"}, "setTitleEffect": {"version": "CMD", "tags": "", "description": "Defines the title effect to show on activation via [Type, Effect, Text] where 'Type' The title effect does not disappear on deactivation, this should be done manually if required.", "example": "_trigger setTitleEffect [\"TEXT\", \"PLAIN DOWN\", \"Hello world.\"];", "docSyntax": "triggerOrWaypoint setTitleEffect [type, effect, text]", "syntax": "triggerOrWaypoint setTitleEffect [type,effect,<string>]"}, "setTriggerActivation": {"version": "CMD", "tags": "", "description": "Defines the trigger activation type. See ArmA:Mission Editor - Triggers for a thorough overview of triggers and its fields for activation, effects, etc. Since Arma 3 v1.67, \"ANYPLAYER\" activation can be used to detect any player.", "example": "_trigger setTriggerActivation [\"WEST\", \"EAST D\", true];", "docSyntax": "trigger setTriggerActivation [by, type, repeating]", "syntax": "<objTrigger> setTriggerActivation [by,type,repeating]"}, "setTriggerArea": {"version": "CMD", "tags": "", "description": "Trigger axis a, b and c (half of their x, y and z dimensions)", "example": "_trigger setTriggerArea [100, 50, 45, false];", "docSyntax": "trigger setTriggerArea [a, b, angle, isRectangle, c]", "syntax": "<objTrigger> setTriggerArea [a,b,angle,isRectangle,c]"}, "setTriggerStatements": {"version": "CMD", "tags": "", "description": "Defines trigger condition, activation and deactivation statements. Trigger condition has to return Boolean. true will activate the trigger, false will deactivate it (only if activation is set to repeat). thisList returns the same result as list command, which includes all entities in the trigger area that are capable of activating the trigger. Dead entities are excluded as well as crew in vehicles, vehicles themselves are included.", "example": "_trg setTriggerStatements [\"this\", \"hint 'trigger on'\", \"hint 'trigger off'\"];", "docSyntax": "trigger setTriggerStatements [condition, activation, deactivation]", "syntax": "<objTrigger> setTriggerStatements [condition,activation,deactivation]"}, "setTriggerText": {"version": "CMD", "tags": "", "description": "Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers.", "example": "trigger setTriggerText \"Call for support\";", "docSyntax": "trigger setTriggerText text", "syntax": "<objTrigger> setTriggerText <string>"}, "setTriggerTimeout": {"version": "CMD", "tags": "", "description": "Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time.", "example": "_trigger setTriggerTimeout [5, 10, 7, false];", "docSyntax": "trigger setTriggerTimeout [min, mid, max, interruptable]", "syntax": "<objTrigger> setTriggerTimeout [min,mid,max,interruptable]"}, "setTriggerType": {"version": "CMD", "tags": "", "description": "Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission):", "example": "_trigger setTriggerType \"END1\";", "docSyntax": "trigger setTriggerType action", "syntax": "<objTrigger> setTriggerType action"}, "setType": {"version": "CMD", "tags": "", "description": "Changes a location to the specified class. Location classes are defined in CfgLocationTypes.", "example": "myLocation setType \"RockArea\";", "docSyntax": "location setType name", "syntax": "location setType <string>"}, "setUnitAbility": {"version": "CMD", "tags": "", "description": "Sets skill of given unit. Unlike setSkill, setUnitAbility can set values > 1. Even though the skill command will correctly return set value, the actual unit ability will be capped to max available.", "example": "_unit setUnitAbility 1;", "docSyntax": "unit setUnitAbility value", "syntax": "<objUnit> setUnitAbility <scalar>"}, "setUnitPos": {"version": "CMD", "tags": "", "description": "Set unit position rules. This command will not change the stance of the human player, even though it will change the output of unitPos command. To change player stance use playAction or playActionNow:", "example": "_soldier setUnitPos \"UP\";", "docSyntax": "unit setUnitPos mode", "syntax": "<objUnit> setUnitPos mode"}, "setUnitPosWeak": {"version": "CMD", "tags": "", "description": "Set unit position rules. This command is the lowest level of priority for setting unit position and to be used in scripted FSM's. Priorities are:", "example": "_soldier disableAI \"FSM\"; _soldier setUnitPosWeak \"DOWN\";", "docSyntax": "unit setUnitPosWeak mode", "syntax": "<objUnit> setUnitPosWeak mode"}, "setUnitRank": {"version": "CMD", "tags": "", "description": "Sets rank of given unit. Possible rank values, and the associated rating that is set (not added, the value replaces previous rating) with it:", "example": "player setUnitRank \"COLONEL\";", "docSyntax": "unitName setUnitRank rank", "syntax": "<objUnit> setUnitRank rank"}, "setVariable": {"version": "CMD", "tags": "", "description": "Set variable to given value in the variable space of given element. Can be used to broadcast variables over the network.", "example": "_myTruck setVariable [\"TAG_myPublicVariable\", 123, true];", "docSyntax": "varspace setVariable [name, value, public]", "syntax": "varspace setVariable [<string>,<scalar>,public]"}, "setVectorDir": {"version": "CMD", "tags": "", "description": "Set object's direction vector. Up vector will remain unchanged.", "example": "player setVectorDir [5,6,1];", "docSyntax": "object setVectorDir vectorDir", "syntax": "<object> setVectorDir vectorDir"}, "setVectorDirAndUp": {"version": "CMD", "tags": "", "description": "Sets orientation of an object.", "example": "//\u00a0set exact yaw, pitch, and roll _yaw = 45; _pitch = -80; _roll = 0; _myObject setVectorDirAndUp [ [sin _yaw * cos _pitch, cos _yaw * cos _pitch, sin _pitch], [[sin _roll, -sin _pitch, cos _roll * cos _pitch], -_yaw] call BIS_fnc_rotateVector2D ];", "docSyntax": "vehicle setVectorDirAndUp [vectorDir, vectorUp]", "syntax": "<objVehicle> setVectorDirAndUp [vectorDir,vectorUp]"}, "setVectorUp": {"version": "CMD", "tags": "", "description": "Set object's up vector. Direction of the object remain unchanged. Default object's vectorUp is [0,0,1].", "example": "Turn object upside down:", "docSyntax": "object setVectorUp vectorUp", "syntax": "<object> setVectorUp vectorUp"}, "setVehicleAmmo": {"version": "CMD", "tags": "", "description": "Sets how much ammunition (compared to a full state defined by the vehicle type) the vehicle has. Note that the ammo will be added only to local turrets. To check locality of turret use turretLocal. The value ranges from 0 to 1.", "example": "player setVehicleAmmo 0;", "docSyntax": "vehicleName setVehicleAmmo value", "syntax": "vehicleName setVehicleAmmo <scalar>"}, "setVehicleArmor": {"version": "CMD", "tags": "", "description": "Sets the armor (or health for men) state of the vehicle (a value from 0 to 1). Works like setDamage, but the other way around: 1 is full health - see Example 2.", "example": "player setVehicleArmor 0.5;", "docSyntax": "vehicleName setVehicleArmor value", "syntax": "vehicleName setVehicleArmor <scalar>"}, "setVehicleId": {"version": "CMD", "tags": "", "description": "Sets ID to vehicle. By this ID vehicle is referenced by triggers and waypoints.", "example": "player setVehicleId 1;", "docSyntax": "vehicleName setVehicleId id", "syntax": "vehicleName setVehicleId <scalar>"}, "setVehicleInit": {"version": "CMD", "tags": "", "description": "Attach a statement to a unit. The statement is propagated over the network in MP games, it can be executed by invoking processInitCommands.", "example": "_soldier3 setVehicleInit \"this allowFleeing 0\";", "docSyntax": "unitName setVehicleInit statement", "syntax": "<objUnit> setVehicleInit statement"}, "setVehicleLock": {"version": "CMD", "tags": "", "description": "Sets vehicle lock. Possible values:", "example": "_veh1 setVehicleLock \"LOCKED\";", "docSyntax": "vehicleName setVehicleLock lockState", "syntax": "vehicleName setVehicleLock lockState"}, "setVehiclePosition": {"version": "CMD", "tags": "", "description": "Moves the object to a given position (same as createVehicle placement algorithm). Uses either the position that's defined by the position param, or one of the marker positions from the markers array. The object is placed inside a circle with position as its center and placement as its radius. The type of placement could also be controlled with special.", "example": "//\u00a0place the player at either [1000,2000], or one of the three markers positions player setVehiclePosition [[1000,2000], [\"Pos1\",\"Pos2\",\"Pos3\"], 0, \"CAN_COLLIDE\"];", "docSyntax": "object setVehiclePosition [position, markers, placement, special]", "syntax": "<object> setVehiclePosition [position,markers,placement,special]"}, "setVehicleVarName": {"version": "CMD", "tags": "", "description": "Sets string representation of an object to a custom string.", "example": "private _playersCar = vehicle player; systemChat str _playersCar; //\u00a0displays e.g \"ce06b00# 164274: offroad_01_unarmed_f.p3d\" _playersCar setVehicleVarName \"MyOffroad\"; systemChat str _playersCar; //\u00a0displays \"MyOffroad\" isNil \"MyOffroad\"; //\u00a0true - the MyOffroad variable is not set MyOffroad = _playersCar; //\u00a0now it is publicVariable \"MyOffroad\"; //\u00a0broadcasts it over the network", "docSyntax": "object setVehicleVarName name", "syntax": "<object> setVehicleVarName <string>"}, "setVelocity": {"version": "CMD", "tags": "", "description": "Sets velocity vector of an object in m/s.", "example": "_truck1 setVelocity [20, 0, 0];", "docSyntax": "object setVelocity vector", "syntax": "<object> setVelocity vector"}, "setViewDistance": {"version": "CMD", "tags": "", "description": "Set rendering distance. Setting view distance to >= 0 resets the value to the client's options (set in Options\u00a0\u2192\u00a0Video\u00a0\u2192\u00a0General\u00a0\u2192\u00a0Visibility\u00a0\u2192\u00a0Overall).", "example": "setViewDistance 2250;", "docSyntax": "setViewDistance distance", "syntax": "setViewDistance <scalar>"}, "setWaypointBehaviour": {"version": "CMD", "tags": "", "description": "Switches the unit behaviour when the waypoint becomes active.", "example": "[_grp, 2] setWaypointBehaviour \"AWARE\";", "docSyntax": "waypoint setWaypointBehaviour mode", "syntax": "waypoint setWaypointBehaviour mode"}, "setWaypointCombatMode": {"version": "CMD", "tags": "", "description": "Changes a group's combat mode when the waypoint becomes active.", "example": "[_grp, 2] setWaypointCombatMode \"RED\";", "docSyntax": "waypoint setWaypointCombatMode mode", "syntax": "waypoint setWaypointCombatMode mode"}, "setWaypointDescription": {"version": "CMD", "tags": "", "description": "Sets the description shown in the HUD while the waypoint is active.", "example": "[_grp, 2] setWaypointDescription \"Move here.\";", "docSyntax": "waypoint setWaypointDescription text", "syntax": "waypoint setWaypointDescription <string>"}, "setWaypointFormation": {"version": "CMD", "tags": "", "description": "Switches the group formation when the waypoint becomes active.", "example": "[_grp, 2] setWaypointFormation \"LINE\";", "docSyntax": "waypoint setWaypointFormation formation", "syntax": "waypoint setWaypointFormation formation"}, "setWaypointHousePosition": {"version": "CMD", "tags": "", "description": "For waypoints attached to a house, this defines the target buildingPos index.", "example": "[_grp, 2] setWaypointHousePosition 1;", "docSyntax": "waypoint setWaypointHousePosition pos", "syntax": "waypoint setWaypointHousePosition <array>"}, "setWaypointPosition": {"version": "CMD", "tags": "", "description": "Attempts to move given waypoint to a random position inside a circle with the given center and radius. The waypoint will be placed similar to \"NONE\" attribute in setVehiclePosition, even if the radius is 0, which means it could still be off center. In order to force waypoint to the exact position, similar to \"CAN_COLLIDE\" attribute, use a negative radius (see Example 2).", "example": "[_grp, 2] setWaypointPosition [position player, 0];", "docSyntax": "waypoint setWaypointPosition [center, radius]", "syntax": "waypoint setWaypointPosition [center,radius]"}, "setWaypointScript": {"version": "CMD", "tags": "", "description": "Attaches a script to a scripted waypoint. In early versions of Arma, command consisted of a script name and additional script arguments and the script had to use SQS Syntax. The script receives the following arguments in _this variable: [group, position, target] + [the optional passed arguments]. The optional arguments are appended to the end of the arguments array.", "example": "[_grp, 2] setWaypointScript \"find.sqs player\";", "docSyntax": "waypoint setWaypointScript command", "syntax": "waypoint setWaypointScript command"}, "setWaypointSpeed": {"version": "CMD", "tags": "", "description": "Switches the group speed mode when the waypoint becomes active.", "example": "[_grp, 2] setWaypointSpeed \"FULL\";", "docSyntax": "waypoint setWaypointSpeed mode", "syntax": "waypoint setWaypointSpeed mode"}, "setWaypointStatements": {"version": "CMD", "tags": "", "description": "The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed.", "example": "_waypoint setWaypointStatements [\"true\", \"hint 'hello'; hint 'goodbye'\"];", "docSyntax": "waypoint setWaypointStatements [condition, statement]", "syntax": "waypoint setWaypointStatements [condition,statement]"}, "setWaypointTimeout": {"version": "CMD", "tags": "", "description": "Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid).", "example": "[_grp, 2] setWaypointTimeout [5, 10, 6];", "docSyntax": "waypoint setWaypointTimeout [min, mid, max]", "syntax": "waypoint setWaypointTimeout [min,mid,max]"}, "setWaypointType": {"version": "CMD", "tags": "", "description": "Sets the waypoint type of given waypoint. More details at Waypoints.", "example": "_myWaypoint setWaypointType \"HOLD\";", "docSyntax": "waypoint setWaypointType type", "syntax": "waypoint setWaypointType type"}, "setWPPos": {"version": "CMD", "tags": "", "description": "Sets waypoint position.", "example": "[_groupOne, 1] setWPPos markerPos \"MarkerOne\";", "docSyntax": "waypoint setWPPos pos", "syntax": "waypoint setWPPos <array>"}, "showCinemaBorder": {"version": "CMD", "tags": "", "description": "Forces drawing of cinema borders when using custom camera camCreate. This is normally used in cutscenes to indicate player has no control.", "example": "showCinemaBorder false;", "docSyntax": "showCinemaBorder show", "syntax": "showCinemaBorder show"}, "showCompass": {"version": "CMD", "tags": "", "description": "Shows or hides the compass on the map screen, if enabled for the mission and you possess the item. (default true)", "example": "showCompass false;", "docSyntax": "showCompass show", "syntax": "showCompass show"}, "showGPS": {"version": "CMD", "tags": "", "description": "Shows or hides the GPS receiver on the map screen, if enabled for the mission and you possess the item. (default false).", "example": "showGPS true;", "docSyntax": "showGPS show", "syntax": "showGPS show"}, "showMap": {"version": "CMD", "tags": "", "description": "Enable Map (default true)", "example": "showMap false;", "docSyntax": "showMap show", "syntax": "showMap show"}, "shownCompass": {"version": "CMD", "tags": "", "description": "Checks if client has Compass enabled in description.ext (showCompass param) or force enabled with showCompass command.", "example": "if (shownCompass) then {hint \"You have Compass enabled\"};", "docSyntax": "shownCompass", "syntax": "shownCompass"}, "shownGPS": {"version": "CMD", "tags": "", "description": "Checks if client has GPS reciever enabled in description.ext (showGPS param) or force enabled with showGPS command.", "example": "if (shownGPS) then {hint \"You have GPS reciever enabled\"};", "docSyntax": "shownGPS", "syntax": "shownGPS"}, "shownMap": {"version": "CMD", "tags": "", "description": "Checks if client has Map enabled in description.ext (showMap param) or force enabled with showMap command.", "example": "if (shownMap) then {hint \"You have Map enabled\"};", "docSyntax": "shownMap", "syntax": "shownMap"}, "shownPad": {"version": "CMD", "tags": "", "description": "Checks if client has Notepad enabled.", "example": "if (shownPad) then {hint \"You have Notepad enabled.\"};", "docSyntax": "shownPad", "syntax": "shownPad"}, "shownRadio": {"version": "CMD", "tags": "", "description": "Check if player has Radio enabled.", "example": "if (shownRadio) then {hint \"You have Radio enabled.\"};", "docSyntax": "shownRadio", "syntax": "shownRadio"}, "shownWarrant": {"version": "CMD", "tags": "", "description": "Check if player has ID card enabled. Obsolete command.", "example": "hint format [\"Your ID is %1\", [\"off\", \"on\"] select shownWarrant];", "docSyntax": "shownWarrant", "syntax": "shownWarrant"}, "shownWatch": {"version": "CMD", "tags": "", "description": "Checks if client has Watch enabled in description.ext (showWatch param) or force enabled with showWatch command.", "example": "if (shownWatch) then {hint \"You have Watch enabled\"};", "docSyntax": "shownWatch", "syntax": "shownWatch"}, "showPad": {"version": "CMD", "tags": "", "description": "Shows or hides the notebook on the map screen, if enabled for the mission. (default true). It is no longer relevant to Arma 2.", "example": "showPad false;", "docSyntax": "showPad show", "syntax": "showPad show"}, "showRadio": {"version": "CMD", "tags": "", "description": "Shows or hides the radio on the map screen, if enabled for the mission and you possess the item. (default true).", "example": "showRadio false;", "docSyntax": "showRadio show", "syntax": "showRadio show"}, "showWarrant": {"version": "CMD", "tags": "", "description": "Enable ID card.", "example": "showWarrant true;", "docSyntax": "showWarrant show", "syntax": "showWarrant show"}, "showWatch": {"version": "CMD", "tags": "", "description": "Shows or hides the watch on the map screen, if enabled for the mission and you possess the item. (default true)", "example": "showWatch false;", "docSyntax": "showWatch show", "syntax": "showWatch show"}, "showWaypoint": {"version": "CMD", "tags": "", "description": "Defines how waypoints are shown to the player in map view. For 3D HUD visibility see setWaypointVisible.", "example": "[_grp, 2] showWaypoint \"ALWAYS\";", "docSyntax": "waypoint showWaypoint show", "syntax": "waypoint showWaypoint show"}, "side": {"version": "CMD", "tags": "", "description": "Returns the side of a unit, vehicle, object or location.", "example": "if (side player == west) then { hint \"Player is on the West side\" };", "docSyntax": "side target", "syntax": "<objSide> <object>"}, "sideChat": {"version": "CMD", "tags": "", "description": "Types text to the side radio channel by the specified unit.", "example": "_soldierOne sideChat \"Show this text\";", "docSyntax": "unit sideChat chatText", "syntax": "<objUnit> sideChat chatText"}, "sideEnemy": {"version": "CMD", "tags": "", "description": "The enemy side which is used for renegades. Units of this side are hostile to everyone.", "example": "if (side player == sideEnemy) then { hint \"We've got a renegade!\"; };", "docSyntax": "sideEnemy", "syntax": "sideEnemy"}, "sideFriendly": {"version": "CMD", "tags": "", "description": "The Friendly side - friendly to all, see Side Relations.", "example": "if (side player == sideFriendly) then { hint \"I feel friendly today!\"; };", "docSyntax": "sideFriendly", "syntax": "sideFriendly"}, "sideLogic": {"version": "CMD", "tags": "", "description": "The Logic side. Side of Game Logics and Modules.", "example": "if (side _obj == sideLogic) then { hint \"It is a logic!\"; };", "docSyntax": "sideLogic", "syntax": "sideLogic"}, "sideRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the side radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne sideRadio \"messageOne\";", "docSyntax": "unit sideRadio radioName", "syntax": "<objUnit> sideRadio radioName"}, "sin": {"version": "CMD", "tags": "", "description": "Sine of x.", "example": "_sine = sin 30; //\u00a0result is 0.5", "docSyntax": "sin x", "syntax": "sin x"}, "size": {"version": "CMD", "tags": "", "description": "Returns a location's size.", "example": "_locSize = size myLocation;", "docSyntax": "size location", "syntax": "size location"}, "sizeOf": {"version": "CMD", "tags": "", "description": "Returns the diameter of bounding sphere of the object of given classname in meters. If you need to estimate the size of the object more precisely, use boundingBox or boundingBoxReal.", "example": "_dimension = sizeOf \"M1Abrams\"; //\u00a0Returns 10.7833", "docSyntax": "sizeOf classname", "syntax": "sizeOf classname"}, "skill": {"version": "CMD", "tags": "", "description": "Returns current skill of a unit, in range between 0 to 1, 1 being the highest level of skill.", "example": "_skill = skill unit1;", "docSyntax": "skill unit", "syntax": "skill <objUnit>"}, "skipTime": {"version": "CMD", "tags": "", "description": "Jumps the specified number of hours forward or backward.", "example": "skipTime 5;", "docSyntax": "skipTime duration", "syntax": "skipTime duration"}, "sleep": {"version": "CMD", "tags": "", "description": "Suspends code execution for given time in seconds. The sleep precision is given by a framerate, the delay given is the minimal delay expected. Must be called inside of a context which is interruptible, i.e. a script executed by execVM or spawn.", "example": "0 spawn { sleep 5; hint \"after (at least) 5 seconds...\"; };", "docSyntax": "sleep delay", "syntax": "sleep <scalar>"}, "sliderPosition": {"version": "CMD", "tags": "", "description": "Returns current thumb position of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.", "example": "_slidepos1 = sliderPosition 105;", "docSyntax": "sliderPosition idc", "syntax": "sliderPosition <scalar>"}, "sliderRange": {"version": "CMD", "tags": "", "description": "Returns limits of CT_SLIDER or CT_XSLIDER.", "example": "sliderRange _ctrlSlider params [\"_minValue\", \"_maxValue\"];", "docSyntax": "sliderRange idc", "syntax": "sliderRange <scalar>"}, "sliderSetPosition": {"version": "CMD", "tags": "", "description": "Sets current thumb position of CT_SLIDER or CT_XSLIDER.", "example": "_ctrlSlider sliderSetPosition 50;", "docSyntax": "sliderSetPosition [idc, pos]", "syntax": "sliderSetPosition [<scalar>,<array>]"}, "sliderSetRange": {"version": "CMD", "tags": "", "description": "Sets limits of CT_SLIDER or CT_XSLIDER.", "example": "sliderSetRange [101, 0, 100];", "docSyntax": "sliderSetRange [idc, min, max]", "syntax": "sliderSetRange [<scalar>,min,max]"}, "sliderSetSpeed": {"version": "CMD", "tags": "", "description": "Sets slider line step and page step delta amount as well as optional step amount of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.", "example": "sliderSetSpeed [101, 0.5, 2];", "docSyntax": "sliderSetSpeed [idc, line, page, step]", "syntax": "sliderSetSpeed [<scalar>,line,page,step]"}, "sliderSpeed": {"version": "CMD", "tags": "", "description": "Returns slider step value for line and page movement of CT_SLIDER or CT_XSLIDER.", "example": "sliderSpeed _ctrlSlider params [\"_min\", \"_max\"];", "docSyntax": "sliderSpeed idc", "syntax": "sliderSpeed <scalar>"}, "someAmmo": {"version": "CMD", "tags": "", "description": "Check if unit has some ammo.", "example": "? not (someAmmo _loon1) : hint \"Loon1 is out of ammo!\"", "docSyntax": "someAmmo unitName", "syntax": "someAmmo <objUnit>"}, "soundVolume": {"version": "CMD", "tags": "", "description": "Returns the current sound volume (set by fadeSound).", "example": "hint str soundVolume;", "docSyntax": "soundVolume", "syntax": "soundVolume"}, "speed": {"version": "CMD", "tags": "", "description": "Object speed (in km/h). Returns relative speed of given object along Y axis. An equivalent to: 3.6 * (velocityModelSpace _obj select 1)", "example": "if (speed _truck1 >= 100) then { hint \"You're going too fast!\" };", "docSyntax": "speed object", "syntax": "<scalar> <object>"}, "speedMode": {"version": "CMD", "tags": "", "description": "Returns speed mode of the group, which can be any of the following:", "example": "_speed = speedMode group player;", "docSyntax": "speedMode groupName", "syntax": "speedMode groupName"}, "sqrt": {"version": "CMD", "tags": "", "description": "Returns square root of x.", "example": "private _squareRoot = sqrt 9; //\u00a0returns 3", "docSyntax": "sqrt x", "syntax": "sqrt x"}, "stop": {"version": "CMD", "tags": "", "description": "Stop an AI unit from turning or moving, preventing it to follow a watched object or engage an enemy properly - although if properly aligned, the unit -will- shoot the enemy. It may still change the stance if deemed appropriate (e.g. under fire). Use disableAI to disable specific AI capabilities.", "example": "loon1 stop true;", "docSyntax": "unitName stop toggle", "syntax": "<objUnit> stop toggle"}, "stopped": {"version": "CMD", "tags": "", "description": "Check if unit is stopped by stop command.", "example": "? (stopped _loon1) : hint \"Loon1 is stopped\"", "docSyntax": "stopped unitName", "syntax": "stopped <objUnit>"}, "str": {"version": "CMD", "tags": "", "description": "Converts any value into a string, depending on its type. If an Object has a vehicleVarName, it is returned (see Example 4).", "example": "_s = str (5 + 2); //\u00a0The value of _s is the string \"7\"", "docSyntax": "str value", "syntax": "str <scalar>"}, "supportInfo": {"version": "CMD", "tags": "", "description": "Creates a list of supported operators and type. Each field of array has the format: \"x:name\" Where x can be:", "example": "supportInfo \"b:select*\"; //\u00a0returns [\"b:ARRAY select SCALAR\",\"b:ARRAY select BOOL\",\"b:CONFIG select SCALAR\"]", "docSyntax": "supportInfo mask", "syntax": "supportInfo mask"}, "surfaceIsWater": {"version": "CMD", "tags": "", "description": "Returns whether there is water at given position. In Arma 3, it also detects pond objects, but only if they are loaded in memory (normally only true if the objects are within the object view distance)", "example": "private _result = surfaceIsWater [1000, 3000];", "docSyntax": "surfaceIsWater position", "syntax": "surfaceIsWater position"}, "surfaceType": {"version": "CMD", "tags": "", "description": "Returns what surface type is at the given position. For surface texture see surfaceTexture command.", "example": "private _surface = surfaceType [4500, 4500];", "docSyntax": "surfaceType position", "syntax": "surfaceType position"}, "switchableUnits": {"version": "CMD", "tags": "", "description": "Returns a list of playable units available for switching to", "example": "_availableUnits = switchableUnits;", "docSyntax": "switchableUnits", "syntax": "switchableUnits"}, "switchCamera": {"version": "CMD", "tags": "", "description": "Switch camera to given vehicle / camera. Mode is one of:", "example": "player switchCamera \"Gunner\";", "docSyntax": "target switchCamera mode", "syntax": "<object> switchCamera mode"}, "switchLight": {"version": "CMD", "tags": "", "description": "Controls whether a lamp is lit or not.", "example": "(object 12345) switchLight \"OFF\";", "docSyntax": "lamp switchLight mode", "syntax": "lamp switchLight mode"}, "switchMove": {"version": "CMD", "tags": "", "description": "Immediately applies given animation to the unit. For a smooth transition from the current animation, use playMove.", "example": "Prone:", "docSyntax": "person switchMove moveName", "syntax": "<objUnit> switchMove moveName"}, "synchronizeWaypoint": {"version": "CMD", "tags": "", "description": "Synchronizes the trigger or the waypoint with an array of waypoints.", "example": "_myTrigger synchronizeWaypoint [[_group2, 3]];", "docSyntax": "triggerOrWaypoint synchronizeWaypoint waypoints", "syntax": "triggerOrWaypoint synchronizeWaypoint waypoints"}, "tan": {"version": "CMD", "tags": "", "description": "Tangent of x, argument in Degrees.", "example": "_tangent = tan 45;", "docSyntax": "tan x", "syntax": "tan x"}, "teamSwitch": {"version": "CMD", "tags": "", "description": "Invoke the Team Switch dialog (force it even when conditions are not met). There has to be at least one playable unit for team switch to work, and for this command to work in MP, respawn type in description.ext should be 5 (SIDE).", "example": "teamSwitch;", "docSyntax": "teamSwitch", "syntax": "teamSwitch"}, "teamSwitchEnabled": {"version": "CMD", "tags": "", "description": "Check if Team Switch is currently enabled. Team Switch is enabled by default.", "example": "_isTeamSwitchEnabled = teamSwitchEnabled;", "docSyntax": "teamSwitchEnabled", "syntax": "teamSwitchEnabled"}, "terminate": {"version": "CMD", "tags": "", "description": "Terminates (aborts) spawned or execVMed script.", "example": "_script = [] execVM \"script.sqf\"; sleep 5; terminate _script;", "docSyntax": "terminate scriptHandle", "syntax": "terminate scriptHandle"}, "text": {"version": "CMD", "tags": "", "description": "Creates a structured text containing the given plain text if argument is String. Use setAttributes to set additional attributes on the text. If the argument is location, returns location's text value (see Alt Syntax).", "example": "_stxt2 = text \"Hello world.\";", "docSyntax": "text string", "syntax": "<string> <string>"}, "textLog": {"version": "CMD", "tags": "", "description": "Dump argument value to debugging output.", "example": "textLog player;", "docSyntax": "textLog anything", "syntax": "textLog anything"}, "tg": {"version": "CMD", "tags": "", "description": "Identical to tan", "example": "_tangent = tg 45; //\u00a0Result is 1", "docSyntax": "tg x", "syntax": "tg x"}, "time": {"version": "CMD", "tags": "", "description": "Returns time elapsed since mission started (in seconds). The value is different on each client. If you need unified time, use serverTime.", "example": "private _future = time + 30; waitUntil { time >= _future }; //\u00a0continue after 30 seconds", "docSyntax": "time", "syntax": "<scalar>"}, "titleCut": {"version": "CMD", "tags": "", "description": "Displays text on screen.", "example": "titleCut [\"Hello, how are you?\",\"Plain Down\",3];", "docSyntax": "titleCut [text, type, speed]", "syntax": "titleCut [<string>,type,<scalar>]"}, "titleFadeOut": {"version": "CMD", "tags": "", "description": "Terminate the title effect and set duration of the fade out phase to the given time. Same as cutFadeOut but for the title layer.", "example": "titleText [\"Hi\", \"plain\"]; titleFadeOut 2;", "docSyntax": "titleFadeOut duration", "syntax": "titleFadeOut duration"}, "titleObj": {"version": "CMD", "tags": "", "description": "Shows object defined in global config in CfgTitles", "example": "titleObj [\"BISLogo\", \"PLAIN\"];", "docSyntax": "titleObj [class, type, speed, showInMap]", "syntax": "titleObj [class,type,<scalar>,showInMap]"}, "titleRsc": {"version": "CMD", "tags": "", "description": "Displays a resource defined in RscTitles. Also see cutRsc, with these two commands you can show two different resources at once.", "example": "titleRsc [\"BIS\", \"PLAIN\"];", "docSyntax": "titleRsc [text, type, speed, showInMap]", "syntax": "titleRsc [<string>,type,<scalar>,showInMap]"}, "titleText": {"version": "CMD", "tags": "", "description": "Displays text across the screen. If used along with cutText two different texts (in different type styles) can be shown at once. The text can be displayed on multiple lines by using \"\\n\" new line characters (see Example 3).", "example": "titleText [\"Show this text\", \"PLAIN\"];", "docSyntax": "titleText [text, type, speed, showInMap, isStructuredText]", "syntax": "titleText [<string>,type,<scalar>,showInMap,isStructuredText]"}, "toArray": {"version": "CMD", "tags": "", "description": "Converts the supplied String into an Array of Numbers. The numbers in the created array are the decimal Unicode representations of characters.", "example": "hint format [\"%1\", toArray \"Aa\u0152\"];//\u00a0Returns \"[65,97,338]\"", "docSyntax": "toArray string", "syntax": "toArray <string>"}, "toLower": {"version": "CMD", "tags": "", "description": "Converts the supplied Unicode string to all lowercase characters. If the string doesn't have characters with codes > 255, use toLowerANSI.", "example": "hint toLower \"AaBb1\"; //\u00a0returns \"aabb1\"", "docSyntax": "toLower string", "syntax": "toLower <string>"}, "toString": {"version": "CMD", "tags": "", "description": "Converts the supplied Array of Numbers into a String through Unicode characters representation conversion, or provided Code to compilable String.", "example": "hint toString [65,97,338]; //\u00a0returns \"Aa\u0152\"", "docSyntax": "toString array", "syntax": "toString <array>"}, "toUpper": {"version": "CMD", "tags": "", "description": "Converts the supplied Unicode string to all uppercase characters. If the string doesn't have characters with codes > 255, use toUpperANSI.", "example": "hint toUpper \"AaBb1\"; //\u00a0returns \"AABB1\"", "docSyntax": "toUpper string", "syntax": "toUpper <string>"}, "triggerAttachObject": {"version": "CMD", "tags": "", "description": "Assigns a static object to the trigger. The activation source is changed to \"STATIC\".", "example": "_trigger triggerAttachObject 1234;", "docSyntax": "triggerName triggerAttachObject objectId", "syntax": "triggerName triggerAttachObject <scalar>"}, "triggerAttachVehicle": {"version": "CMD", "tags": "", "description": "Specifies the entity which will activate the selected trigger.", "example": "trigger triggerAttachVehicle [player];", "docSyntax": "triggerName triggerAttachVehicle objects", "syntax": "triggerName triggerAttachVehicle objects"}, "type": {"version": "CMD", "tags": "", "description": "Returns a string of a Location's class name or Task's name (same as taskName).", "example": "_locationType = type myLocation;", "docSyntax": "type location", "syntax": "type location"}, "typeName": {"version": "CMD", "tags": "", "description": "Returns the Data Type of an expression. The type is returned as on of the following all-uppercase strings:", "example": "_msg = \"hello\"; _result = typeName _msg; //_result will be \"STRING\"", "docSyntax": "typeName anything", "syntax": "typeName anything"}, "typeOf": {"version": "CMD", "tags": "", "description": "Returns the class name of a given object.", "example": "if (typeOf vehicle player == \"B_Heli_Light_01_armed_F\") then { hint \"Player is in a AH-9 Pawnee\"; };", "docSyntax": "typeOf obj", "syntax": "typeOf <object>"}, "unassignTeam": {"version": "CMD", "tags": "", "description": "Unassigns the unit (in the case of a vehicle its commander unit) from his team. This is equal to unit assignTeam \"MAIN\".", "example": "unassignTeam _soldier2;", "docSyntax": "unassignTeam vehicleName", "syntax": "unassignTeam vehicleName"}, "unassignVehicle": {"version": "CMD", "tags": "", "description": "Unassigns individual unit from a vehicle, usually previously assigned with assignAsXXX command, i.e removes assignedVehicleRole of the unit. If the unit is currently in that vehicle, the group leader will issue an order to disembark.", "example": "unassignVehicle player;", "docSyntax": "unassignVehicle unitName", "syntax": "unassignVehicle <objUnit>"}, "unitPos": {"version": "CMD", "tags": "", "description": "Return the unit position rules.", "example": "hint str unitPos _unit;", "docSyntax": "unitPos unit", "syntax": "unitPos <objUnit>"}, "unitReady": {"version": "CMD", "tags": "", "description": "Check if the unit is ready. Unit is busy when it is given some command like move, until the command is finished.", "example": "private _it = unitReady _soldierOne;", "docSyntax": "unitReady unitName", "syntax": "unitReady <objUnit>"}, "units": {"version": "CMD", "tags": "", "description": "Returns an array with all the units in the group or unit's group, or all units belonging to a certain side.", "example": "_myUnitCount = count units player;", "docSyntax": "units type", "syntax": "units type"}, "vectorDir": {"version": "CMD", "tags": "", "description": "An object with its vectorDir, vectorUp and vectorSide (vectors not to scale)", "example": "_vecDir = vectorDir MyObject;", "docSyntax": "vectorDir object", "syntax": "vectorDir <object>"}, "vectorUp": {"version": "CMD", "tags": "", "description": "An object with its vectorDir, vectorUp and vectorSide (vectors not to scale)", "example": "_vecUp = vectorUp MyObject;", "docSyntax": "vectorUp object", "syntax": "vectorUp <object>"}, "vehicle": {"version": "CMD", "tags": "", "description": "Vehicle in which given unit is mounted. If none, unit is returned. Alternatively, use objectParent", "example": "SQS", "docSyntax": "vehicle unitName", "syntax": "<objVehicle> <objUnit>"}, "vehicleChat": {"version": "CMD", "tags": "", "description": "Types text to the vehicle radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally, see remoteExec.", "example": "vehicle player vehicleChat \"Show this text\";", "docSyntax": "vehicleName vehicleChat chatText", "syntax": "vehicleName vehicleChat chatText"}, "vehicleRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the vehicle radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne vehicleRadio \"messageOne\";", "docSyntax": "unit vehicleRadio radioName", "syntax": "<objUnit> vehicleRadio radioName"}, "vehicles": {"version": "CMD", "tags": "", "description": "Returns an array of all vehicles available to current client. This command returns both empty and crewed vehicles", "example": "_vehicles = vehicles;", "docSyntax": "vehicles", "syntax": "vehicles"}, "vehicleVarName": {"version": "CMD", "tags": "", "description": "Returns the variable name that contains a primary editor reference to this object. This is the variable given in the Insert Unit dialog / name field in the editor. It can be changed using setVehicleVarName.", "example": "hint vehicleVarName player;", "docSyntax": "vehicleVarName object", "syntax": "vehicleVarName <object>"}, "velocity": {"version": "CMD", "tags": "", "description": "Returns the velocity of the object as vector in m/s.", "example": "_vector = velocity jeep;", "docSyntax": "velocity object", "syntax": "velocity <object>"}, "verifySignature": {"version": "CMD", "tags": "", "description": "Check if file is signed by any key present in game keys folders. On clients, it does not check against the keys accepted by server.", "example": "verifySignature \"@MyAddon\\Addons\\SomeAddon.pbo\";", "docSyntax": "verifySignature filename", "syntax": "verifySignature filename"}, "waitUntil": {"version": "CMD", "tags": "", "description": "Suspends execution of scheduled script until the given condition satisfied.", "example": "waitUntil { not alive player };", "docSyntax": "waitUntil condition", "syntax": "waitUntil condition"}, "waypointAttachObject": {"version": "CMD", "tags": "", "description": "Attaches a static object via it is numeric ID to the given waypoint.", "example": "[_grp, 2] waypointAttachObject 1234;", "docSyntax": "waypoint waypointAttachObject objectID", "syntax": "waypoint waypointAttachObject <scalar>"}, "waypointAttachVehicle": {"version": "CMD", "tags": "", "description": "Attaches the Waypoint to the provided vehicle Object.", "example": "[_grp, 2] waypointAttachVehicle vehicle player;", "docSyntax": "waypoint waypointAttachVehicle vehicleName", "syntax": "waypoint waypointAttachVehicle vehicleName"}, "waypointPosition": {"version": "CMD", "tags": "", "description": "Get provided waypoint's position.", "example": "_wPos = waypointPosition [_groupOne, 1];", "docSyntax": "waypointPosition [groupOrUnit, index]", "syntax": "waypointPosition [groupOrUnit,<scalar>]"}, "waypoints": {"version": "CMD", "tags": "", "description": "Returns an array of waypoints for the specified unit/group.", "example": "waypoints player;", "docSyntax": "waypoints groupName", "syntax": "waypoints groupName"}, "weaponDirection": {"version": "CMD", "tags": "", "description": "Returns the direction that the vehicle weapon is aiming in. For addons the weapon name must be an entry in CfgWeapons.", "example": "_weaponVectorDir = player weaponDirection currentWeapon player;", "docSyntax": "vehicleName weaponDirection weaponName", "syntax": "vehicleName weaponDirection weaponName"}, "weapons": {"version": "CMD", "tags": "", "description": "Returns array of names of all unit's weapons.", "example": "_wArray = weapons player;", "docSyntax": "weapons unit", "syntax": "weapons <objUnit>"}, "wind": {"version": "CMD", "tags": "", "description": "Returns the current wind vector (in m/s) as array [x, y, z].", "example": "_windArray = wind;", "docSyntax": "wind", "syntax": "wind"}, "worldName": {"version": "CMD", "tags": "", "description": "Return the name of the currently loaded world.", "example": "private _name = worldName;", "docSyntax": "worldName", "syntax": "worldName"}, "worldToModel": {"version": "CMD", "tags": "", "description": "Converts position from world space to object model space.", "example": "_relPos = myObject worldToModel [0,0,0];", "docSyntax": "model worldToModel position", "syntax": "model worldToModel position"}}