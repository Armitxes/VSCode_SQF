{"abs": {"version": "CMD", "tags": "", "description": "Returns absolute (positive) value of a real number.", "example": "_n = abs -3; //\u00a0Returns 3", "docSyntax": "abs x", "syntax": "abs x"}, "accTime": {"version": "CMD", "tags": "", "description": "Returns the current simulation acceleration factor.", "example": "_acc = accTime;", "docSyntax": "accTime", "syntax": "accTime"}, "acos": {"version": "CMD", "tags": "", "description": "ArcCosine of a number, result in Degrees", "example": "_degrees = acos 0.5; //\u00a0Returns 60", "docSyntax": "acos x", "syntax": "acos x"}, "action": {"version": "CMD", "tags": "", "description": "Make a unit perform an action. See Category:Actions for action names and syntaxes.", "example": "player action [\"SitDown\", player];", "docSyntax": "unit action actionArray", "syntax": "<objUnit> action actionArray"}, "actionIDs": {"version": "CMD", "tags": "", "description": "Returns Array of Numbers, where numbers are IDs of all user actions added to given entity with addAction command.", "example": "_actions = actionIDs player;", "docSyntax": "actionIDs entity", "syntax": "actionIDs entity"}, "actionKeys": {"version": "CMD", "tags": "", "description": "Returns Array containing dikCodes of keys, buttons and combos assigned to the given user action. Action names could be found in config class ControllerSchemes or user action names or user profile, for example:", "example": "_arrayOfNumbers = actionKeys \"ReloadMagazine\";", "docSyntax": "actionKeys userAction", "syntax": "actionKeys userAction"}, "actionKeysEx": {"version": "CMD", "tags": "", "description": "Gives a broken down version of actionKeys return. Returns an Array containing the breakdowns of the dikCodes of keys, buttons and combos assigned to the given user action.", "example": "To retrieve the following key's data, use the property name without 'key':", "docSyntax": "actionKeysEx userAction", "syntax": "actionKeysEx userAction"}, "actionKeysImages": {"version": "CMD", "tags": "", "description": "Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes or user action names.", "example": "_text = actionKeysImages \"ReloadMagazine\";", "docSyntax": "actionKeysImages userAction", "syntax": "actionKeysImages userAction"}, "actionKeysNames": {"version": "CMD", "tags": "", "description": "Returns a list of button names assigned to the given user action. Action names can be found in config class ControllerSchemes or user action names.", "example": "_list = actionKeysNames \"ReloadMagazine\"; //\u00a0\"\"\"R\"\" or \"\"XBox X\"\"\"", "docSyntax": "actionKeysNames userAction", "syntax": "actionKeysNames userAction"}, "actionKeysNamesArray": {"version": "CMD", "tags": "", "description": "Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or user action names.", "example": "_actionList = actionKeysNamesArray \"ReloadMagazine\";", "docSyntax": "actionKeysNamesArray userAction", "syntax": "actionKeysNamesArray userAction"}, "actionName": {"version": "CMD", "tags": "", "description": "Returns localized name of action.", "example": "actionName \"ReloadMagazine\"; //\u00a0returns \"Reload\"", "docSyntax": "actionName action", "syntax": "actionName action"}, "actionParams": {"version": "CMD", "tags": "", "description": "Returns Array with params for given user action id (similar to addAction param array).", "example": "_params = player actionParams 0;", "docSyntax": "entity actionParams id", "syntax": "entity actionParams <scalar>"}, "activateAddons": {"version": "CMD", "tags": "", "description": "Activates the listed addons.", "example": "activateAddons [\"BISOFP\"];", "docSyntax": "activateAddons addonsList", "syntax": "activateAddons addonsList"}, "activatedAddons": {"version": "CMD", "tags": "", "description": "Returns a list of all activated addons.", "example": "_addons = activatedAddons;", "docSyntax": "activatedAddons", "syntax": "activatedAddons"}, "activateKey": {"version": "CMD", "tags": "", "description": "Activates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the Description.ext#Mission Keys chapter.", "example": "activateKey \"Mission04Key\";", "docSyntax": "activateKey keyname", "syntax": "activateKey keyname"}, "activeTitleEffectParams": {"version": "CMD", "tags": "", "description": "Returns type, effect, speed and map visibility of the given active title effect (see allActiveTitleEffects)", "example": "21 cutText [\"Hello World!\", \"PLAIN\", 2]; hint str activeTitleEffectParams 21; //\u00a0[\"TXT\", \"PLAIN\", 2, true]", "docSyntax": "activeTitleEffectParams layer", "syntax": "activeTitleEffectParams layer"}, "add3DENConnection": {"version": "CMD", "tags": "", "description": "Connect entities together.", "example": "add3DENConnection [\"RandomStart\", get3DENSelected \"Object\", \"marker_0\"];//\u00a0Set random start on marker \"marker_0\" for all selected objects.", "docSyntax": "add3DENConnection [type, from, to]", "syntax": "add3DENConnection [type,from,to]"}, "add3DENEventHandler": {"version": "CMD", "tags": "", "description": "Adds an Eden Editor Event Handler.", "example": "private _ehID = add3DENEventHandler [\"onUndo\", { systemChat \"Zip...\" }];", "docSyntax": "add3DENEventHandler [type, code]", "syntax": "add3DENEventHandler [type,<code>]"}, "add3DENLayer": {"version": "CMD", "tags": "", "description": "Adds an editing layer in Eden Editor.", "example": "_myLayer = -1 add3DENLayer \"Enemy Base\"; _myLayerFort = _myLayer add3DENLayer \"Fortifications\"; _myLayerPatrol = _myLayer add3DENLayer \"Patrols\";", "docSyntax": "parentLayerID add3DENLayer name", "syntax": "parentLayerID add3DENLayer <string>"}, "addAction": {"version": "CMD", "tags": "", "description": "Adds an entry to the action menu of an object. The action can only be activated when in proximity to the object and looking at it. Adding an action to the player makes that action available to the player at all times. For event handling of user interaction see inGameUISetEventHandler.", "example": "//\u00a0short and sweet player addAction [\"a useless action that does nothing\", {}]; player addAction [\"<t color='#FF0000'>This Useless Action Is RED</t>\", {hint \"RED\"}]; player addAction [\"Hint Hello!\", { hint format [\"Hello %1!\", name player] }]; player addAction [\"String Exec\", \"hint 'this is also compiled'\"];", "docSyntax": "object addAction [title, script, arguments, priority, showWindow, hideOnUse, shortcut, condition, positionInModel, radius, radiusView, showIn3D, available, textDefault, textToolTip]", "syntax": "<object> addAction [title,script,arguments,priority,showWindow,hideOnUse,shortcut,condition,positionInModel,radius,radiusView,showIn3D,available,textDefault,textToolTip]"}, "addBackpack": {"version": "CMD", "tags": "", "description": "Adds a backpack for a unit. If a unit already has a backpack, the old backpack will be placed on the ground under the unit. Items defined in the backpack's config will be added as well.", "example": "this addBackpack \"TK_RPG_Backpack_EP1\";", "docSyntax": "unit addBackpack backpackClassName", "syntax": "<objUnit> addBackpack backpackClassName"}, "addBackpackCargo": {"version": "CMD", "tags": "", "description": "Add backpack(s) to the cargo space of vehicle. Classname list of available backpacks is here. For a list of possible backpacks, see:", "example": "this addBackpackCargo [\"TK_RPG_Backpack_EP1\", 2];", "docSyntax": "vehicle addBackpackCargo [backpackClassName, count]", "syntax": "<objVehicle> addBackpackCargo [backpackClassName,count]"}, "addBackpackCargoGlobal": {"version": "CMD", "tags": "", "description": "Add backpack(s) to the cargo space of vehicle.", "example": "this addBackpackCargoGlobal [\"TK_RPG_Backpack_EP1\", 2];", "docSyntax": "vehicle addBackpackCargoGlobal [packClassName, count]", "syntax": "<objVehicle> addBackpackCargoGlobal [packClassName,count]"}, "addBackpackGlobal": {"version": "CMD", "tags": "", "description": "Adds a backpack to a unit (even non-local).", "example": "player addBackpackGlobal \"B_AssaultPack_khk\";", "docSyntax": "unit addBackpackGlobal backpack", "syntax": "<objUnit> addBackpackGlobal backpack"}, "addBinocularItem": {"version": "CMD", "tags": "", "description": "Adds weapon item, including magazine, directly to the binocular weapon. This is used for infantry weapons.", "example": "player addBinocularItem \"Laserbatteries\";", "docSyntax": "unit addBinocularItem item", "syntax": "<objUnit> addBinocularItem <objItem>"}, "addCamShake": {"version": "CMD", "tags": "", "description": "Creates the camera shaking effect, like when you are near an explosion", "example": "addCamShake [10, 2, 25]; //\u00a0Shakes the camera for 1 second", "docSyntax": "addCamShake [power, duration, frequency]", "syntax": "addCamShake [power,duration,frequency]"}, "addCuratorAddons": {"version": "CMD", "tags": "", "description": "Allow curator use of given addon.", "example": "curatorObj addCuratorAddons [\"A3_Armor_F_AMV\",\"A3_Armor_F_Panther\"];", "docSyntax": "curatorObj addCuratorAddons addons", "syntax": "<objCurator> addCuratorAddons addons"}, "addCuratorCameraArea": {"version": "CMD", "tags": "", "description": "Adds or changes curator camera area (depends on if ID is already used).", "example": "myCurator addCuratorCameraArea [3,position mySoldier,300];", "docSyntax": "curatorObj addCuratorCameraArea [cameraAreaID, position, radius]", "syntax": "<objCurator> addCuratorCameraArea [cameraAreaID,position,radius]"}, "addCuratorEditableObjects": {"version": "CMD", "tags": "", "description": "Register objects which can be edited by a curator.", "example": "MyCuratorModule addCuratorEditableObjects [[MyCar], true];", "docSyntax": "curatorObj addCuratorEditableObjects [objects, addCrew]", "syntax": "<objCurator> addCuratorEditableObjects [objects,addCrew]"}, "addCuratorEditingArea": {"version": "CMD", "tags": "", "description": "Adds or changes curator edit area (depends on if ID is already used).", "example": "myCurator addCuratorEditingArea [4, position player, 1000];", "docSyntax": "curatorObj addCuratorEditingArea [editAreaID, position, radius]", "syntax": "<objCurator> addCuratorEditingArea [editAreaID,position,radius]"}, "addCuratorPoints": {"version": "CMD", "tags": "", "description": "Adds or removes curator points. Points can be only in range from 0 to 1.", "example": "curatorModule addCuratorPoints 0.5;", "docSyntax": "curatorObj addCuratorPoints points", "syntax": "<objCurator> addCuratorPoints <scalar>"}, "addCuratorSelected": {"version": "CMD", "tags": "", "description": "Add items to the selected curator items.", "example": "addCuratorSelected [unit1, group1, [group1, waypointIndex], markerName1];", "docSyntax": "addCuratorSelected items", "syntax": "addCuratorSelected items"}, "addEditorObject": {"version": "CMD", "tags": "", "description": "Add an object to the editor and assign arguments. Create script is,called with _new equal to true. Returns the ID of the new EditorObject.,Subtype class is optional.", "example": "-", "docSyntax": "map addEditorObject [type,[name1,value1,...],subtype class]", "syntax": "<objMap> addEditorObject [type,[name1,value1,...],subtype class]"}, "addEventHandler": {"version": "CMD", "tags": "", "description": "Adds an Event Handler to the given object.", "example": "this addEventHandler [\"Killed\", { params [\"_unit\", \"_killer\"]; systemChat format [\"%1 has been killed by %2.\", _unit, _killer]; }];", "docSyntax": "target addEventHandler [type, code]", "syntax": "<object> addEventHandler [type,<code>]"}, "addForce": {"version": "CMD", "tags": "", "description": "Applies impulse force to unit or given PhysX object at given position.", "example": "Apply force [0,1000,0] defined in world space (not factoring object actual positioning) to object position [1,0,0]:", "docSyntax": "object addForce [force, position]", "syntax": "<object> addForce [force,position]"}, "addForceGeneratorRTD": {"version": "CMD", "tags": "", "description": "Adds force generator to world.", "docSyntax": "addForceGeneratorRTD parameters", "syntax": "addForceGeneratorRTD parameters"}, "addGoggles": {"version": "CMD", "tags": "", "description": "Create a new item and try to link it into goggles (glasses) slot.", "example": "player addGoggles \"G_Tactical_Clear\";", "docSyntax": "unit addGoggles type", "syntax": "<objUnit> addGoggles type"}, "addGroupIcon": {"version": "CMD", "tags": "", "description": "Adds icon to a group leader. Returns icon ID, Control icons visibility with setGroupIconsVisible.", "example": "groupName addGroupIcon [\"b_inf\", [offsetX, offsetY]];", "docSyntax": "group addGroupIcon [iconClass, offset]", "syntax": "<objGroup> addGroupIcon [iconClass,offset]"}, "addHandgunItem": {"version": "CMD", "tags": "", "description": "Adds weapon item, including magazine, directly to the handgunWeapon. This is used for infantry weapons.", "example": "player addHandgunItem \"muzzle_snds_L\";", "docSyntax": "unit addHandgunItem item", "syntax": "<objUnit> addHandgunItem <objItem>"}, "addHeadgear": {"version": "CMD", "tags": "", "description": "Creates a headgear item and tries to link it to headgear slot. If slot is occupied with another item, the item in the slot will be replaced.", "example": "player addHeadgear \"H_HelmetB\";", "docSyntax": "unit addHeadgear item", "syntax": "<objUnit> addHeadgear <objItem>"}, "addItem": {"version": "CMD", "tags": "", "description": "Creates new item and tries to add it into inventory. Inventory must have enough space to accomodate new item or command will fail.The item can also be a weapon or a magazine.", "example": "//\u00a0identical to bluforUnit linkItem \"NVGoggles\" //\u00a0addItem then assignItem makes the item go through through inventory storage and fail if storage space was missing bluforUnit addItem \"NVGoggles\"; bluforUnit assignItem \"NVGoggles\"; opforUnit addItem \"NVGoggles_OPFOR\"; opforUnit assignItem \"NVGoggles_OPFOR\"; independentUnit addItem \"NVGoggles_INDEP\"; independentUnit assignItem \"NVGoggles_INDEP\";", "docSyntax": "unit addItem item", "syntax": "<objUnit> addItem <objItem>"}, "addItemCargo": {"version": "CMD", "tags": "", "description": "Creates new items and stores them in given container. Works with items, weapons, magazines, equipment and glasses but not backpacks. In the latter case use addBackpackCargo instead. For the global variant, see addItemCargoGlobal.", "example": "supplyBox addItemCargo [\"optic_ARCO\", 10];", "docSyntax": "box addItemCargo [item, count]", "syntax": "box addItemCargo [<objItem>,count]"}, "addItemCargoGlobal": {"version": "CMD", "tags": "", "description": "Global variant of addItemCargo.", "example": "supplyBox addItemCargoGlobal [\"optic_Arco\", 10];", "docSyntax": "box addItemCargoGlobal [item, count]", "syntax": "box addItemCargoGlobal [<objItem>,count]"}, "addItemPool": {"version": "CMD", "tags": "", "description": "Adds count items of type name into the weapon pool (used in the campaign to transfer items to the next mission)", "example": "addItemPool [\"ItemGPS\", 5];", "docSyntax": "addItemPool [itemName, count]", "syntax": "addItemPool [itemName,count]"}, "addItemToBackpack": {"version": "CMD", "tags": "", "description": "Create new item and store it to soldier's backpack. The item can also be a weapon or a magazine.", "example": "player addItemToBackpack \"arifle_MXM_Hamr_pointer_F\";", "docSyntax": "unit addItemToBackpack item", "syntax": "<objUnit> addItemToBackpack <objItem>"}, "addItemToUniform": {"version": "CMD", "tags": "", "description": "Create new item and store it to soldier's uniform. The item can also be a weapon or a magazine.", "example": "player addItemToUniform \"itemGPS\";", "docSyntax": "unit addItemToUniform item", "syntax": "<objUnit> addItemToUniform <objItem>"}, "addItemToVest": {"version": "CMD", "tags": "", "description": "Create new item and store it to soldier's vest. The item can also be a weapon or a magazine.", "example": "player addItemToVest \"itemGPS\";", "docSyntax": "unit addItemToVest item", "syntax": "<objUnit> addItemToVest <objItem>"}, "addLiveStats": {"version": "CMD", "tags": "", "description": "Adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle).", "example": "player addLiveStats 10;", "docSyntax": "unit addLiveStats score", "syntax": "<objUnit> addLiveStats score"}, "addMagazine": {"version": "CMD", "tags": "", "description": "Adds a magazine to a person. Infantry units can only carry a specific number of magazines, once the magazine slots are filled (or uniform/vest/bagpack are full in Arma 3), any further addMagazine commands are ignored. If class of magazine does not exist, an error message is printed in .rpt:", "example": "player addMagazine \"30Rnd_556x45_STANAG\";", "docSyntax": "unitName addMagazine magazineName", "syntax": "<objUnit> addMagazine magazineName"}, "addMagazineAmmoCargo": {"version": "CMD", "tags": "", "description": "Adds magazines with specified ammo count to the cargo space of a vehicle or a container.", "example": "_ammobox addMagazineAmmoCargo [\"30Rnd_65x39_caseless_mag\", 2, 5];", "docSyntax": "cargospace addMagazineAmmoCargo [magazine, quantity, ammocount]", "syntax": "cargospace addMagazineAmmoCargo [<string>,quantity,ammocount]"}, "addMagazineCargo": {"version": "CMD", "tags": "", "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units. Once the magazine cargo space is filled up, any further addMagazineCargo commands are ignored.", "example": "_truck addMagazineCargo [\"M16\", 5];", "docSyntax": "vehicleName addMagazineCargo [magazineName, count]", "syntax": "vehicleName addMagazineCargo [magazineName,count]"}, "addMagazineCargoGlobal": {"version": "CMD", "tags": "", "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units. MP Synchronized", "example": "_truck addMagazineCargoGlobal [\"M16\", 5];", "docSyntax": "vehicleName addMagazineCargoGlobal [magazineName, count]", "syntax": "vehicleName addMagazineCargoGlobal [magazineName,count]"}, "addMagazineGlobal": {"version": "CMD", "tags": "", "description": "Adds magazine to a unit regardless of locality. This command can also be used to add magazine to a vehicle, like a static gun, for example.", "example": "player addMagazineGlobal \"30Rnd_65x39_caseless_mag\";", "docSyntax": "unit addMagazineGlobal magazineName", "syntax": "<objUnit> addMagazineGlobal magazineName"}, "addMagazinePool": {"version": "CMD", "tags": "", "description": "Adds magazines to the magazine pool, of which the player may choose in the following mission. Available in campaigns only.", "example": "addMagazinePool [\"M16\", 20];", "docSyntax": "addMagazinePool [magazineName, count]", "syntax": "addMagazinePool [magazineName,count]"}, "addMagazines": {"version": "CMD", "tags": "", "description": "Adds multiple magazines to the unit. For cargo containers use addMagazineCargoGlobal command.", "example": "player addMagazines [\"30Rnd_65x39_caseless_mag\", 3];", "docSyntax": "unit addMagazines [magazineName, count]", "syntax": "<objUnit> addMagazines [magazineName,count]"}, "addMagazineTurret": {"version": "CMD", "tags": "", "description": "Adds a magazine to the turret. Use turret path [-1] for driver's turret.", "example": "_tank addMagazineTurret [\"SmokeLauncherMag\", [0,0]];", "docSyntax": "vehicle addMagazineTurret [magazineName, turretPath, ammoCount]", "syntax": "<objVehicle> addMagazineTurret [magazineName,turretPath,ammoCount]"}, "addMenu": {"version": "CMD", "tags": "", "description": "Adds a new menu button. Priority is optional.", "example": "-", "docSyntax": "map addMenu [text,priority]", "syntax": "<objMap> addMenu [<string>,priority]"}, "addMenuItem": {"version": "CMD", "tags": "", "description": "Creates a new menu item. Menu can be \"file\" or \"view\",index is index,as returned from addMenu command. priority is optional and determines,where in the menu the item will reside (higher priority items first).", "example": "-", "docSyntax": "map addMenuItem [menu or index,text,command,priority]", "syntax": "<objMap> addMenuItem [menu or <scalar>,<string>,command,priority]"}, "addMissionEventHandler": {"version": "CMD", "tags": "", "description": "Adds event handler attached to the current mission and returns event handler handle. For the list of available mission event handlers see: Arma 3: Mission Event Handlers", "example": "_id = addMissionEventHandler [\"PlayerDisconnected\", { systemChat str _this }];", "docSyntax": "addMissionEventHandler [event, expression, arguments]", "syntax": "addMissionEventHandler [event,expression,arguments]"}, "addMPEventHandler": {"version": "CMD", "tags": "", "description": "Adds a multiplayer event handler (EH) to the given object and returns EH handle. See Event Handlers.", "example": "_index = player addMPEventHandler [\"MPKilled\", { _this execVM \"playerKilled.sqf\"; }];", "docSyntax": "object addMPEventHandler [type, expression]", "syntax": "<object> addMPEventHandler [type,expression]"}, "addMusicEventHandler": {"version": "CMD", "tags": "", "description": "Adds playMusic event handler. Returns id of the handler or -1 when failed. Like addMissionEventHandler, the music event handler is attached to the mission. See Arma 3: Event Handlers - Music Event Handlers.", "example": "private _ehID = addMusicEventHandler [\"MusicStart\", { hint str _this }];", "docSyntax": "addMusicEventHandler [type, function]", "syntax": "addMusicEventHandler [type,function]"}, "addonFiles": {"version": "CMD", "tags": "", "description": "Returns a list of files present in the addon.", "example": "addonFiles [\"a3\\3den\\\", \".paa\"]; /* [ \"a3\\3den\\data\\attributes\\formation\\ech_left_ca.paa\", \"a3\\3den\\data\\attributes\\formation\\stag_column_ca.paa\", \"a3\\3den\\data\\attributes\\stance\\down_ca.paa\", \"a3\\3den\\data\\cfg3den\\layer\\icondisabled_ca.paa\", \"a3\\3den\\data\\controlsgroups\\diagmousecontrol\\mouse_ca.paa\", ... ] */", "docSyntax": "addonFiles [pboPrefix, fileExtension]", "syntax": "addonFiles [pboPrefix,fileExtension]"}, "addOwnedMine": {"version": "CMD", "tags": "", "description": "Sets ownership over a remotely detonatable mine to the unit.", "example": "player addOwnedMine _superMine;", "docSyntax": "unit addOwnedMine mine", "syntax": "<objUnit> addOwnedMine mine"}, "addPlayerScores": {"version": "CMD", "tags": "", "description": "MP server only: Adds player score.", "example": "player addPlayerScores [0, 1, 0, 0, 1];", "docSyntax": "unit addPlayerScores values", "syntax": "<objUnit> addPlayerScores values"}, "addPrimaryWeaponItem": {"version": "CMD", "tags": "", "description": "Adds weapon item, including magazine, directly to the primaryWeapon. This is used for infantry weapons.", "example": "player addPrimaryWeaponItem \"muzzle_snds_H\";", "docSyntax": "unit addPrimaryWeaponItem item", "syntax": "<objUnit> addPrimaryWeaponItem <objItem>"}, "addPublicVariableEventHandler": {"version": "CMD", "tags": "", "description": "This command is deprecated since the introduction of remoteExec and remoteExecCall.", "example": "\"publicThis\" addPublicVariableEventHandler { hint format [ \"%1 has been updated to: %2\", _this select 0, _this select 1 ] };", "docSyntax": "varName addPublicVariableEventHandler code", "syntax": "varName addPublicVariableEventHandler <code>"}, "addRating": {"version": "CMD", "tags": "", "description": "Add a number to the rating of a unit - negative values can be used to reduce the rating.", "example": "player addRating 2000;", "docSyntax": "unitName addRating rating", "syntax": "<objUnit> addRating rating"}, "addResources": {"version": "CMD", "tags": "", "description": "Adds resources to a team member.", "docSyntax": "teamMember addResources [resource1, resource2, ...]", "syntax": "teamMember addResources [resource1,resource2,...]"}, "addScore": {"version": "CMD", "tags": "", "description": "Adds a number to the score of a unit. Negative values will remove from the score.", "example": "unit addScore 10;", "docSyntax": "unit addScore score", "syntax": "<objUnit> addScore score"}, "addScoreSide": {"version": "CMD", "tags": "", "description": "Adds side score. This is shown in the MP score tab as the total score. MP only.", "example": "west addScoreSide 10;", "docSyntax": "side addScoreSide value", "syntax": "<objSide> addScoreSide <scalar>"}, "addSecondaryWeaponItem": {"version": "CMD", "tags": "", "description": "Adds weapon item, including magazine, directly to the secondaryWeapon. This is used for infantry weapons.", "example": "player addSecondaryWeaponItem \"muzzle_snds_L\";", "docSyntax": "unit addSecondaryWeaponItem item", "syntax": "<objUnit> addSecondaryWeaponItem <objItem>"}, "addSwitchableUnit": {"version": "CMD", "tags": "", "description": "Adds a unit to the list of units available for Team Switch. Units marked as playable in editor are automatically switchable. This command adds non-playable unit into array of switchableUnits and makes them available for teamSwitch. Singleplayer only!", "example": "addSwitchableUnit bob;", "docSyntax": "addSwitchableUnit unit", "syntax": "addSwitchableUnit <objUnit>"}, "addTeamMember": {"version": "CMD", "tags": "", "description": "Add given member to given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.", "example": "_team addTeamMember _teamMember;", "docSyntax": "team addTeamMember member", "syntax": "team addTeamMember <objUnit>"}, "addToRemainsCollector": {"version": "CMD", "tags": "", "description": "Adds an array of vehicles/units to disposal manager for automatic wreck/body removal. The disposal manager follows wreck/body removal values set in description.ext", "example": "addToRemainsCollector [unit1, unit2, vehicle1];", "docSyntax": "addToRemainsCollector remains", "syntax": "addToRemainsCollector remains"}, "addTorque": {"version": "CMD", "tags": "", "description": "Applies torque (rotation momentum) to the center of mass of the given object. Torque force is defined as vector [x, y, z] applied in world space. If you need to define torque in model space, convert the torque vector first by vectorModelToWorld or vectorModelToWorldVisual command. The torque applied as impulse. Diagram below explain which way the object would rotate. For more information see NVIDIA docs", "example": "Apply torque [1000,0,0] to object not factoring object positioning:", "docSyntax": "object addTorque torque", "syntax": "<object> addTorque torque"}, "addUniform": {"version": "CMD", "tags": "", "description": "Create a new uniform and try to link it into uniform slot (given uniform has to be supported by allowedUniforms list of target soldier).", "example": "_unit addUniform \"U_B_CombatUniform_mcam\";", "docSyntax": "unit addUniform type", "syntax": "<objUnit> addUniform type"}, "addUserActionEventHandler": {"version": "CMD", "tags": "", "description": "Adds a user action event handler to the current mission and returns its event handler index.", "example": "private _ehId = addUserActionEventHandler [\"ReloadMagazine\", \"Activate\", { systemChat \"reloading!\"; }];", "docSyntax": "addUserActionEventHandler [keyName, event, expression]", "syntax": "addUserActionEventHandler [keyName,event,expression]"}, "addVehicle": {"version": "CMD", "tags": "", "description": "Adds a specified vehicle for use by a specified AI led group.", "example": "_grp addVehicle _vehicle;", "docSyntax": "groupName addVehicle vehicleName", "syntax": "groupName addVehicle vehicleName"}, "addVest": {"version": "CMD", "tags": "", "description": "Create a new vest and try to link it into vest slot.", "example": "player addVest \"V_TacVest_blk_POLICE\";", "docSyntax": "unit addVest type", "syntax": "<objUnit> addVest type"}, "addWaypoint": {"version": "CMD", "tags": "", "description": "Adds (or inserts when index is given) a new waypoint to a group. The waypoint is placed randomly within a circle with the given center and radius. The function returns a waypoint with format [group, index].", "example": "_wp = _grp addWaypoint [position player, 0];", "docSyntax": "groupName addWaypoint [center, radius, index, name]", "syntax": "groupName addWaypoint [center,radius,<scalar>,<string>]"}, "addWeapon": {"version": "CMD", "tags": "", "description": "Add a weapon to a unit. For a global version of this command see addWeaponGlobal. Infantry units can only carry a specific number of weapons, once the weapon slots are filled, any further addWeapon commands are ignored.", "example": "player addMagazine \"30Rnd_556x45_Stanag\"; player addWeapon \"BAF_L85A2_RIS_SUSAT\";", "docSyntax": "object addWeapon weapon", "syntax": "<object> addWeapon <string>"}, "addWeaponCargo": {"version": "CMD", "tags": "", "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units. Ignores available cargo space.", "example": "_truck addWeaponCargo [\"M16\", 5];", "docSyntax": "vehicleName addWeaponCargo [weaponName, count]", "syntax": "vehicleName addWeaponCargo [weaponName,count]"}, "addWeaponCargoGlobal": {"version": "CMD", "tags": "", "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units.", "example": "_truck addWeaponCargoGlobal [\"M16\", 5];", "docSyntax": "vehicleName addWeaponCargoGlobal [weaponName, count]", "syntax": "vehicleName addWeaponCargoGlobal [weaponName,count]"}, "addWeaponGlobal": {"version": "CMD", "tags": "", "description": "Add a weapon to a unit. Infantry units can only carry weapons in their respective slots (primary, secondary and handgun), the addWeaponGlobal command will replace the weapon currently in a slot with the added weapon if it shares the same slot. This command can link items to respective slots as well, in which case the functionality is identical to linkItem. To make sure the added weapon is loaded and ready, add the magazine first.", "example": "{ _x addMagazineGlobal \"Laserbatteries\"; _x addWeaponGlobal \"Laserdesignator\"; } forEach allUnits;", "docSyntax": "object addWeaponGlobal weapon", "syntax": "<object> addWeaponGlobal <string>"}, "addWeaponItem": {"version": "CMD", "tags": "", "description": "Adds a weapon item to the specified weapon. The item can be weapon magazine, in which case the amount of ammo and target muzzle could also be specified.", "example": "player addWeaponItem [\"arifle_MX_GL_ACO_F\", \"1Rnd_HE_Grenade_shell\"];", "docSyntax": "unit addWeaponItem [weaponName, itemName, instant]", "syntax": "<objUnit> addWeaponItem [weaponName,itemName,instant]"}, "addWeaponPool": {"version": "CMD", "tags": "", "description": "Add weapons to the weapon pool, of which the player may choose in the following mission. Available in campaigns only.", "example": "addWeaponPool [\"M16\",5];", "docSyntax": "addWeaponPool [weaponName, count]", "syntax": "addWeaponPool [weaponName,count]"}, "addWeaponTurret": {"version": "CMD", "tags": "", "description": "Adds a weapon to the turret. Use turret path [-1] for driver's turret.", "example": "_tank addWeaponTurret [\"LMG_M200\", [0,0]];", "docSyntax": "vehicle addWeaponTurret [weaponName, turretPath]", "syntax": "<objVehicle> addWeaponTurret [weaponName,turretPath]"}, "addWeaponWithAttachmentsCargo": {"version": "CMD", "tags": "", "description": "Adds a weapon into the cargo space of a vehicle / box with given attachments / magazines. Ignores available cargo space. If the weapon class has any pre-attached items (LinkedItems), they are removed and new items, supplied via command arguments, are added.", "example": "cursorObject addWeaponWithAttachmentsCargo [[\"arifle_MX_GL_F\", \"muzzle_snds_H\", \"\", \"optic_aco\", [\"30Rnd_65x39_caseless_mag\", 15], [\"3Rnd_HE_Grenade_shell\", 2], \"\"], 2];", "docSyntax": "container addWeaponWithAttachmentsCargo [weaponConfiguration, weaponsCount]", "syntax": "container addWeaponWithAttachmentsCargo [weaponConfiguration,weaponsCount]"}, "addWeaponWithAttachmentsCargoGlobal": {"version": "CMD", "tags": "", "description": "Adds a weapon into the cargo space of a vehicle / box with given attachments / magazines. Ignores available cargo space. If the weapon class has any pre-attached items (LinkedItems), they are removed and new items, supplied via command arguments, are added.", "example": "cursorObject addWeaponWithAttachmentsCargoGlobal [[\"arifle_MX_GL_F\", \"muzzle_snds_H\", \"\", \"optic_aco\", [\"30Rnd_65x39_caseless_mag\", 15], [\"3Rnd_HE_Grenade_shell\", 2], \"\"], 2];", "docSyntax": "container addWeaponWithAttachmentsCargoGlobal [weaponConfiguration, weaponsCount]", "syntax": "container addWeaponWithAttachmentsCargoGlobal [weaponConfiguration,weaponsCount]"}, "admin": {"version": "CMD", "tags": "", "description": "This is dedicated server command, which queries the admin state of any client on the network by their client (owner) id.", "example": "private _isLoggedInAdmin = admin 3 == 2;", "docSyntax": "admin ownerID", "syntax": "admin <scalar>"}, "agent": {"version": "CMD", "tags": "", "description": "Return a person for a given agent.", "example": "_obj = agent teamMember _unit;", "docSyntax": "agent teamMember", "syntax": "agent teamMember"}, "agents": {"version": "CMD", "tags": "", "description": "Return a list of agents in the current mission.", "example": "{ agent _x moveTo position player } forEach agents;", "docSyntax": "agents", "syntax": "agents"}, "AGLToASL": {"version": "CMD", "tags": "", "description": "Converts position from PositionAGL to PositionASL.", "example": "_playerPosASL = AGLToASL (player modelToWorld [0,0,0]);", "docSyntax": "AGLToASL posAGL", "syntax": "AGLToASL posAGL"}, "aimedAtTarget": {"version": "CMD", "tags": "", "description": "Returns how good the weapon of the vehicle is aimed at the target.", "example": "_aimingQuality = heli aimedAtTarget [target];", "docSyntax": "vehicle aimedAtTarget [target, weapon]", "syntax": "<objVehicle> aimedAtTarget [<object>,<string>]"}, "aimPos": {"version": "CMD", "tags": "", "description": "Returns the position of the object other units can aim to.", "example": "_aimPos = aimPos player;", "docSyntax": "aimPos unit", "syntax": "aimPos <objUnit>"}, "airDensityCurveRTD": {"version": "CMD", "tags": "", "description": "Returns array with air density data.", "example": "private _densityArray = airDensityCurveRTD;", "docSyntax": "airDensityCurveRTD", "syntax": "airDensityCurveRTD"}, "airDensityRTD": {"version": "CMD", "tags": "", "description": "Returns air density in given altitude.", "example": "_density = airDensityRTD 0; //\u00a0returns 1.22406", "docSyntax": "airDensityRTD altitude", "syntax": "airDensityRTD <scalar>"}, "airplaneThrottle": {"version": "CMD", "tags": "", "description": "Returns throttle position. Works only on player's vehicle.", "example": "private _throttle = airplaneThrottle objectParent player;", "docSyntax": "airplaneThrottle airplane", "syntax": "airplaneThrottle airplane"}, "airportSide": {"version": "CMD", "tags": "", "description": "Gets the side of an airport, set by setAirportSide. Default side is sideUnknown.", "example": "private _airportSide = airportSide 0;", "docSyntax": "airportSide id", "syntax": "airportSide <scalar>"}, "AISFinishHeal": {"version": "CMD", "tags": "", "description": "Alternative Injury Simulation (AIS) end state. Used to tell engine that script side healing is done when using \"HandleHeal\" event handler.", "example": "AISFinishHeal [_wounded, _medic, true];", "docSyntax": "AISFinishHeal [unit, healer, healerCanHeal]", "syntax": "AISFinishHeal [<objUnit>,healer,healerCanHeal]"}, "alive": {"version": "CMD", "tags": "", "description": "Check if given vehicle/person/building is alive (i.e. not dead or destroyed).", "example": "SQS:", "docSyntax": "alive object", "syntax": "alive <object>"}, "all3DENEntities": {"version": "CMD", "tags": "", "description": "Returns an array of all currently placed Eden Editor entities.", "example": "systemChat str all3DENEntities;", "docSyntax": "all3DENEntities", "syntax": "all3DENEntities"}, "allActiveTitleEffects": {"version": "CMD", "tags": "", "description": "Returns a list of all layers that have currently active title effect. Numbers equal to or greater than 0 represent cut layers, where as -1 represents title layer (see Title Effect Type). Named layers are represented by their respective index.", "example": "cutText [\"Hello World!\" ,\"PLAIN\", 2]; hint str allActiveTitleEffects; //\u00a0[0]", "docSyntax": "allActiveTitleEffects", "syntax": "allActiveTitleEffects"}, "allAddonsInfo": {"version": "CMD", "tags": "", "description": "Returns the list of all loaded addons.", "example": "allAddonsInfo /* [ [\"bin\\\",\"150301\",false,-1,\"66b6d1a87da30e0386fec881504c14a0a6025cb1\"], [\"core\\\",\"129618\",false,-1,\"49e1b8da67de848c8ea058fd8512c222ccb6d919\"], [\"Languagecore_F\\\",\"150376\",false,-1,\"2ee7b09d60f916d7e56934632f55683a14a636b7\"], [\"a3\\anims_f_aow\\\",\"149768\",false,0,\"59df21ad1fc6939c460a555b3af662f725564b37\"], [\"a3\\dubbing_radio_f_enoch\\\",\"150070\",false,1,\"5ca436c61a634fcbd28ca9480a4c8249c5b0e4bd\"], [\"a3\\armor_f_tank\\\",\"150292\",false,2,\"6d0ea8b45ff4cd316b3d6c5575def9dd048e198e\"], [\"a3\\music_f_tacops\\\",\"124064\",false,3,\"435c2b0338fe6bec7685002dca7c47778abf44ee\"], ... ] */", "docSyntax": "allAddonsInfo", "syntax": "allAddonsInfo"}, "allAirports": {"version": "CMD", "tags": "", "description": "Returns all map airports, both static and dynamic.", "example": "_airplane landAt selectRandom (allAirports select 0);", "docSyntax": "allAirports", "syntax": "allAirports"}, "allControls": {"version": "CMD", "tags": "", "description": "Returns a list of all controls for desired existing display. Returned controls also include controls from CT_CONTROLS_GROUPs.", "example": "_allCtrls = allControls findDisplay 46;", "docSyntax": "allControls display", "syntax": "allControls <uiDisplay>"}, "allCurators": {"version": "CMD", "tags": "", "description": "Returns list of all curator logic units, not the units assigned to the logic.", "example": "_allCuratorLogics = allCurators;", "docSyntax": "allCurators", "syntax": "allCurators"}, "allCutLayers": {"version": "CMD", "tags": "", "description": "Returns all named layers used by cutRsc, cutText, cutObj or cutFadeOut. The layer normally would be added on the first use of any of the aforementioned commands, however if a layer needs to be reserved it could be done like so:", "example": "private _allLayers = allCutLayers;", "docSyntax": "allCutLayers", "syntax": "allCutLayers"}, "allDead": {"version": "CMD", "tags": "", "description": "Return a list of all dead units including agents and destroyed vehicles. Dead units may be in vehicles.", "example": "{ deleteVehicle _x } forEach allDead;", "docSyntax": "allDead", "syntax": "allDead"}, "allDeadMen": {"version": "CMD", "tags": "", "description": "Return a list of dead units including agents. Dead unit might be inside vehicle.", "example": "{ deleteVehicle _x } forEach allDeadMen;", "docSyntax": "allDeadMen", "syntax": "allDeadMen"}, "allDiaryRecords": {"version": "CMD", "tags": "", "description": "Returns array with all Diary Records for the given subject available to the given person. See Diary for the explanation on the available subjects and their structure.", "example": "player allDiaryRecords \"Diary\";", "docSyntax": "person allDiaryRecords subject", "syntax": "<objUnit> allDiaryRecords <string>"}, "allDiarySubjects": {"version": "CMD", "tags": "", "description": "Returns array with all Diary subjects available to the given person. See Diary for the explanation on the available subjects and their structure.", "example": "allDiarySubjects player;", "docSyntax": "allDiarySubjects person", "syntax": "allDiarySubjects <objUnit>"}, "allDisplays": {"version": "CMD", "tags": "", "description": "Returns a list of all opened GUI displays.", "example": "private _allDisps = allDisplays;", "docSyntax": "allDisplays", "syntax": "allDisplays"}, "allEnv3DSoundSources": {"version": "CMD", "tags": "", "description": "Returns all environmental 3D sound sources (Objects) like trees and houses in camera vicinity.", "example": "private _sources = allEnv3DSoundSources;", "docSyntax": "allEnv3DSoundSources", "syntax": "allEnv3DSoundSources"}, "allGroups": {"version": "CMD", "tags": "", "description": "Return a list of all groups created on the following sides east, west, resistance/independent and civilian only. Does not contain groups of sideLogic.", "example": "{ leader _x sideChat \"Go\u00a0! Go\u00a0! Go\u00a0!\" } forEach allGroups;", "docSyntax": "allGroups", "syntax": "allGroups"}, "allLODs": {"version": "CMD", "tags": "", "description": "Returns the list of object or model LODs.", "example": "allLODs player; /* [ [0,\"1\",1,91], [1,\"2\",2,91], [2,\"3\",3,84], [3,\"4\",4,43], [4,\"5\",5,34], [5,\"VIEW_PILOT\",1100,89], [6,\"shadow(0)\",10000,80], [7,\"shadow(10)\",10010,33], [8,\"geometry\",1e+013,42], [9,\"memory\",1e+015,55], [10,\"landContact\",2e+015,0], [11,\"hitpoints\",5e+015,33], [12,\"geometryView\",6e+015,19], [13,\"geometryFire\",7e+015,57], [14,\"shadow(1000)\",11000,80], [15,\"shadow(1010)\",11010,33] ] */", "docSyntax": "allLODs objectOrModel", "syntax": "allLODs objectOrModel"}, "allMapMarkers": {"version": "CMD", "tags": "", "description": "Returns all markers in map including user placed markers (_USER_DEFINED #).", "example": "_markers = allMapMarkers;", "docSyntax": "allMapMarkers", "syntax": "allMapMarkers"}, "allMines": {"version": "CMD", "tags": "", "description": "Returns an array of all mines in the mission", "example": "hint format [\"there are %1 mines total\", count allMines];", "docSyntax": "allMines", "syntax": "allMines"}, "allMissionObjects": {"version": "CMD", "tags": "", "description": "Returns all objects of the given type that are currently present in the mission. In some cases, the entities command is a much faster alternative to this command.", "example": "_airObjects = allMissionObjects \"Air\";", "docSyntax": "allMissionObjects type", "syntax": "allMissionObjects type"}, "allObjects": {"version": "CMD", "tags": "", "description": "Returns array of requested objects as fast as the engine allows it. The objects can be requested by object type and simulation kind.", "example": "private _visitorBuildings = 1 allObjects 0;", "docSyntax": "objectType allObjects objectCollection", "syntax": "objectType allObjects objectCollection"}, "allow3DMode": {"version": "CMD", "tags": "", "description": "Allow/dissallow 3D mode.,", "example": "-", "docSyntax": "map allow3DMode bool", "syntax": "<objMap> allow3DMode <bool>"}, "allowCrewInImmobile": {"version": "CMD", "tags": "", "description": "If true, units will remain in a vehicle with broken tracks/wheels; they will still eject if the vehicle is drowning, about to explode or upside down for a while. The alternative syntax provides the ability to keep the crew in vehicle when it is upside down.", "example": "_vehicle allowCrewInImmobile true;", "docSyntax": "vehicle allowCrewInImmobile allow", "syntax": "<objVehicle> allowCrewInImmobile allow"}, "allowCuratorLogicIgnoreAreas": {"version": "CMD", "tags": "", "description": "Allows curator placing and working with modules outside of edit areas.", "example": "curatorModule allowCuratorLogicIgnoreAreas true;", "docSyntax": "curatorObj allowCuratorLogicIgnoreAreas allow", "syntax": "<objCurator> allowCuratorLogicIgnoreAreas allow"}, "allowDamage": {"version": "CMD", "tags": "", "description": "Enables / disables an entity's ability to receive damage. This command does not prevent the entity from taking scripted damage from commands such as setDamage, setHit, setHitIndex or setHitPointDamage.", "example": "player allowDamage false;", "docSyntax": "entity allowDamage allow", "syntax": "entity allowDamage allow"}, "allowDammage": {"version": "CMD", "tags": "", "description": "Allow or prevent an object being damaged (or injured, or killed). The command does not prevent object from taking scripted damage such as setDamage or setHit.", "example": "player allowDammage false;", "docSyntax": "object allowDammage allow", "syntax": "<object> allowDammage allow"}, "allowedService": {"version": "CMD", "tags": "", "description": "Returns which types of repair/refuel/rearm service are allowed. The two available types are manual, where the action is displayed to the user, and auto, where the service happens within distance. The engine default is both (manual and auto) for historic reasons.", "example": "if (allowedService _vehicle == -1) then { hint \"this is not a service vehicle!\" };", "docSyntax": "allowedService vehicle", "syntax": "allowedService <objVehicle>"}, "allowFileOperations": {"version": "CMD", "tags": "", "description": "Allow/dissallow file ops (load/save etc).", "example": "-", "docSyntax": "map allowFileOperations bool", "syntax": "<objMap> allowFileOperations <bool>"}, "allowFleeing": {"version": "CMD", "tags": "", "description": "Sets the cowardice level (the lack of courage or bravery) of a group or unit.", "example": "_group1 allowFleeing 0;", "docSyntax": "unitOrGroup allowFleeing cowardice", "syntax": "unitOrGroup allowFleeing cowardice"}, "allowGetIn": {"version": "CMD", "tags": "", "description": "Set if the units given in the list are allowed to enter vehicles.", "example": "[_soldier1, _soldier2] allowGetIn true;", "docSyntax": "unitArray allowGetIn allow", "syntax": "unitArray allowGetIn allow"}, "allowService": {"version": "CMD", "tags": "", "description": "Sets which type of repair/refuel/rearm service is allowed. The two available types are manual, where the action is displayed to the user, and auto, where the service happens within distance. The engine default is both (manual and auto) for historic reasons.", "example": "ammoTruck allowService 0;", "docSyntax": "vehicle allowService type", "syntax": "<objVehicle> allowService type"}, "allowSprint": {"version": "CMD", "tags": "", "description": "Force player to run/jog if set to false.", "example": "player allowSprint false;", "docSyntax": "unit allowSprint state", "syntax": "<objUnit> allowSprint state"}, "allPlayers": {"version": "CMD", "tags": "", "description": "Returns a list of all units controlled by connected clients. This includes:", "example": "Get human players (i.e. all players excluding Headless Clients):", "docSyntax": "allPlayers", "syntax": "allPlayers"}, "allSimpleObjects": {"version": "CMD", "tags": "", "description": "Returns array of all simple objects that belong to the listed class names. If the array of types is empty [], all simple objects are returned including those without class name.", "example": "private _boxesAndChairs = allSimpleObjects [\"Box_NATO_Equip_F\", \"Land_CampingChair_V2_F\"];", "docSyntax": "allSimpleObjects classes", "syntax": "allSimpleObjects classes"}, "allSites": {"version": "CMD", "tags": "", "description": "Return all sites in map.", "example": "_allSites = allSites;", "docSyntax": "allSites", "syntax": "allSites"}, "allTurrets": {"version": "CMD", "tags": "", "description": "Returns array of available turret paths from vehicle object.", "example": "_turretPaths = allTurrets _mySlammerUP; //\u00a0[[0],[0,0]] _turretPaths = allTurrets [_mySlammerUP, true]; //\u00a0[[0],[0,0]] <- commander turret is also an FFV turret _turretPaths = allTurrets [_mySlammerUP, false]; //\u00a00", "docSyntax": "allTurrets vehicle", "syntax": "allTurrets <objVehicle>"}, "allUnits": {"version": "CMD", "tags": "", "description": "Returns a list of all units, except agents, dead units or units waiting for respawn, outside and inside vehicles that were created on the following sides east, west, independent and civilian.", "example": "{ _x setDamage 0.5; _x groupChat \"Braaains\"; } forEach allUnits;", "docSyntax": "allUnits", "syntax": "allUnits"}, "allUnitsUAV": {"version": "CMD", "tags": "", "description": "Return a list of all UAV vehicles.", "example": "hint format [\"Number of UAV(s) on the map: %1\", count allUnitsUAV];", "docSyntax": "allUnitsUAV", "syntax": "allUnitsUAV"}, "allUsers": {"version": "CMD", "tags": "", "description": "Returns a list of player ids of all the users on an MP server.", "example": "if (isServer) then { private _allUserIDs = allUsers; for \"_i\" from 0 to (count _allUserIds - 1) do { diag_log format [\"User #%1 ID: %2\", _i + 1, _allUserIds select _i]; }; };", "docSyntax": "allUsers", "syntax": "allUsers"}, "allVariables": {"version": "CMD", "tags": "", "description": "Returns a list of all variables from the desired namespace.", "example": "_allVarsUINamespace = allVariables uiNamespace;", "docSyntax": "allVariables namespace", "syntax": "allVariables namespace"}, "ambientTemperature": {"version": "CMD", "tags": "", "description": "Returns ambient temperature on the current terrain in Celsius in format: [airTemperature, blackSurfaceTemperature, whiteSurfaceTemperature]", "example": "private _airTemp = ambientTemperature select 0;", "docSyntax": "ambientTemperature", "syntax": "ambientTemperature"}, "ammo": {"version": "CMD", "tags": "", "description": "Check how many rounds are left in the currently loaded magazine in the given muzzle.", "example": "_count = player ammo \"M16\"; //\u00a0returns 30 in case of a full magazine", "docSyntax": "unit ammo muzzle", "syntax": "<objUnit> ammo muzzle"}, "ammoOnPylon": {"version": "CMD", "tags": "", "description": "Returns ammo count on given pylon (or false on failure).", "example": "private _ammoCount = (vehicle player) ammoOnPylon \"pylon1\";", "docSyntax": "vehicle ammoOnPylon pylon", "syntax": "<objVehicle> ammoOnPylon pylon"}, "and": {"version": "CMD", "tags": "", "description": "Returns true only if both conditions are true. In case of the alternative syntax, lazy evaluation is used - if left operand is false, evaluation of the right side is ignored.", "example": "if ((not isNull player) and (alive player) and (_enemycount == 0)) then { hint \"you win\u00a0!\"; };", "docSyntax": "a and b", "syntax": "a and b"}, "angularVelocity": {"version": "CMD", "tags": "", "description": "Gets the angular velocity of the object in world space as a 3D vector. The units are in Rad/s (radians per second) and rotations are clockwise.", "example": "angularVelocity myHeli; //\u00a0[0.01, 0.03, 0.95]", "docSyntax": "angularVelocity obj", "syntax": "angularVelocity <object>"}, "angularVelocityModelSpace": {"version": "CMD", "tags": "", "description": "Gets the angular velocity of the object in model space as a 3D vector. The units are in Rad/s (radians per second) and rotations are clockwise.", "example": "hint str angularVelocityModelSpace myHeli; //\u00a0[0.01, 0.03, 0.95]", "docSyntax": "angularVelocityModelSpace obj", "syntax": "angularVelocityModelSpace <object>"}, "animate": {"version": "CMD", "tags": "", "description": "Activates given object animation. Animation is defined in CfgModels animations class. Class names listed in CfgVehicles AnimationSources bound to \"Proxy\" controller can also be animated with animate command (see Arma 3: createVehicle/vehicles).", "example": "_building animate [\"maindoor\", 1];", "docSyntax": "object animate [animationName, phase, speed]", "syntax": "<object> animate [animationName,phase,<scalar>]"}, "animateBay": {"version": "CMD", "tags": "", "description": "Forces animation of bay to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released when bay state == 1.", "example": "vehicle player animateBay [1, 0.5];", "docSyntax": "vehicle animateBay [bay, animphase, instant]", "syntax": "<objVehicle> animateBay [bay,animphase,instant]"}, "animateDoor": {"version": "CMD", "tags": "", "description": "Animates a door on a vehicle. Animation is defined in config file in CfgVehicles -> AnimationSources. Wanted animation phase is set with phase param. This command works only on animation sources with \"door\" controller. Door_L in the example below can be animated with animateDoor but not CargoRamp_Open: heli animateDoor [\"Door_L\", 1];", "example": "Taru animateDoor [\"Door_1_source\", 1];", "docSyntax": "object animateDoor [doorname, phase, instant]", "syntax": "<object> animateDoor [doorname,phase,instant]"}, "animatePylon": {"version": "CMD", "tags": "", "description": "Force animation of pylon to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released when pylon state == 1.", "example": "vehicle player animatePylon [1, 0.5];", "docSyntax": "vehicle animatePylon [pylon, animphase, instant]", "syntax": "<objVehicle> animatePylon [pylon,animphase,instant]"}, "animateSource": {"version": "CMD", "tags": "", "description": "Process an animation of the object. If animate uses class name from CfgModels Animations, animateSource uses name defined by the source property. AnimationSources can animate multiple animate Animations. AnimationSource is defined in CfgVehicles' AnimationSources (see Arma 3: createVehicle/vehicles).", "example": "house animateSource [\"Door_1_source\", 1, true];", "docSyntax": "object animateSource [source, phase, speed]", "syntax": "<object> animateSource [source,phase,<scalar>]"}, "animationNames": {"version": "CMD", "tags": "", "description": "Returns Array of Strings where elements are the names of model animations, which should theoretically be available for use with animate command. However in practice this depends on whether animation is also made available for use in scripts via config.", "example": "_names = animationNames static_AT;", "docSyntax": "animationNames object", "syntax": "animationNames <object>"}, "animationPhase": {"version": "CMD", "tags": "", "description": "Returns the phase of the given animation on the given object. Animation can be scripted (animate, animateSource, animateDoor) or engine driven. Animation names for an object could be found out with animationNames command. When animation is rotation, like with \"MainTurret\" for example, the output is in radians, to convert to degrees use deg command.", "example": "_building animate [\"maindoor\",1]; sleep 1; _p = _building animationPhase \"maindoor\";//\u00a0Returns 1, if the animation speed is two seconds", "docSyntax": "object animationPhase animationName", "syntax": "<object> animationPhase animationName"}, "animationSourcePhase": {"version": "CMD", "tags": "", "description": "Returns current animation phase of given source. Similar to animationPhase or doorPhase but designed to complement animateSource. This command could be used to obtain relative turret direction and gun elevation on a vehicle (see Example 2).", "example": "private _phase = house animationSourcePhase \"Door_1_source\";", "docSyntax": "object animationSourcePhase source", "syntax": "<object> animationSourcePhase source"}, "animationState": {"version": "CMD", "tags": "", "description": "Returns the name of a unit's current primary animation. Seems to be forced to lower case in Arma 3.", "example": "_state = animationState player;", "docSyntax": "animationState unitName", "syntax": "animationState <objUnit>"}, "apertureParams": {"version": "CMD", "tags": "", "description": "Returns current aperture parameters.", "example": "private _apertureParams = apertureParams;", "docSyntax": "apertureParams", "syntax": "apertureParams"}, "append": {"version": "CMD", "tags": "", "description": "Appends array2 to the back of array1 modifying array1. See insert for an \"appendUnique\" equivalent.", "example": "_arr = [1,2,3]; _arr append [4,5,6]; hint str _arr; //\u00a0[1,2,3,4,5,6]", "docSyntax": "array1 append array2", "syntax": "array1 append array2"}, "apply": {"version": "CMD", "tags": "", "description": "Applies the given code to each element of the given data structure and collects the results in an array.", "example": "private _arr = [1,2,3,4,5,6,7,8,9,0] apply { [1,0] select (_x % 2 == 0) }; //\u00a0[1,0,1,0,1,0,1,0,1,0]", "docSyntax": "array apply code", "syntax": "<array> apply <code>"}, "armoryPoints": {"version": "CMD", "tags": "", "description": "Returns, stored in [USERNAME].ArmaXProfile, value of armoryPoints entry. If the entry doesn't exist, it returns 0.", "example": "_points = armoryPoints;", "docSyntax": "armoryPoints", "syntax": "armoryPoints"}, "arrayIntersect": {"version": "CMD", "tags": "", "description": "Intersects two arrays returning an array of unique common elements, avoiding nil values. Using the same array as both parameters will return unique elements of that array. Intersects only the first dimension of said arrays.", "example": "_arr1 = [1,2,3,4,5,2,3,4]; _arr2 = [4,5,6,1,2,3,5,6]; hint str (_arr1 arrayIntersect _arr2); //\u00a0[4,5,1,2,3]", "docSyntax": "array1 arrayIntersect array2", "syntax": "array1 arrayIntersect array2"}, "asin": {"version": "CMD", "tags": "", "description": "Arcsine of a number, result in Degrees.", "example": "_degrees = asin 0.5; //\u00a0Returns 30", "docSyntax": "asin x", "syntax": "asin x"}, "ASLToAGL": {"version": "CMD", "tags": "", "description": "Converts position from PositionASL to PositionAGL", "example": "_playerPosAGL = ASLToAGL getPosASL player;", "docSyntax": "ASLToAGL posASL", "syntax": "ASLToAGL posASL"}, "ASLToATL": {"version": "CMD", "tags": "", "description": "Converts a position from PositionASL to PositionATL", "example": "ASLToATL getPosASL player isEqualTo getPosATL player;", "docSyntax": "ASLToATL pos", "syntax": "ASLToATL <array>"}, "assert": {"version": "CMD", "tags": "", "description": "Tests a condition and if the condition is false, displays error on screen (if -showscripterrors enabled) and logs error into .rpt file. It does not interrupt the script execution. If script was pre-processed with preprocessFileLineNumbers, it will also show/log the error line number and the file name.", "example": "assert (1 > 2);", "docSyntax": "assert condition", "syntax": "assert condition"}, "assignAsCargo": {"version": "CMD", "tags": "", "description": "Assign a unit as cargo of a vehicle. Used together with orderGetIn to order a unit to get in as cargo into a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the cargo space of the vehicle.", "example": "_soldier1 assignAsCargo _truck; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsCargo vehicleName", "syntax": "<objUnit> assignAsCargo vehicleName"}, "assignAsCargoIndex": {"version": "CMD", "tags": "", "description": "Assigns the character to a specific cargo / passenger index of the given vehicle.", "example": "player assignAsCargoIndex [myHelicopter, 1];", "docSyntax": "character assignAsCargoIndex [vehicle, index]", "syntax": "character assignAsCargoIndex [<objVehicle>,<scalar>]"}, "assignAsCommander": {"version": "CMD", "tags": "", "description": "Assign a unit as commander of a vehicle. Used together with orderGetIn to order subordinate units to get in as commander of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the commander place of the vehicle.", "example": "_soldier1 assignAsCommander _tank; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsCommander vehicleName", "syntax": "<objUnit> assignAsCommander vehicleName"}, "assignAsDriver": {"version": "CMD", "tags": "", "description": "Assign a unit as driver of a vehicle. Used together with orderGetIn to order subordinate units to get in as driver of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the driver place of the vehicle.", "example": "_soldier1 assignAsDriver _tank; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsDriver vehicleName", "syntax": "<objUnit> assignAsDriver vehicleName"}, "assignAsGunner": {"version": "CMD", "tags": "", "description": "Assign a unit as gunner of a vehicle. Used together with orderGetIn to order subordinate units to get in as gunner of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the gunner place of the vehicle.", "example": "_soldier1 assignAsGunner _tank; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsGunner vehicleName", "syntax": "<objUnit> assignAsGunner vehicleName"}, "assignAsTurret": {"version": "CMD", "tags": "", "description": "Assigns the soldier to turret.", "example": "player assignAsTurret [BIS_vehicle, [0,1]];", "docSyntax": "unit assignAsTurret [vehicle, turretPath]", "syntax": "<objUnit> assignAsTurret [<objVehicle>,turretPath]"}, "assignCurator": {"version": "CMD", "tags": "", "description": "Assign player as curator. Two players cannot act as one curator.", "example": "player assignCurator myCurator;", "docSyntax": "player assignCurator curatorObj", "syntax": "<objUnit> assignCurator <objCurator>"}, "assignedCargo": {"version": "CMD", "tags": "", "description": "Returns the list of soldiers assigned to the given vehicle as a cargo.", "example": "_list = assignedCargo _vehicleName;", "docSyntax": "assignedCargo vehicle", "syntax": "assignedCargo <objVehicle>"}, "assignedCommander": {"version": "CMD", "tags": "", "description": "Returns the soldier assigned to the given vehicle as a commander.", "example": "_commander = assignedCommander vehicleName;", "docSyntax": "assignedCommander vehicle", "syntax": "assignedCommander <objVehicle>"}, "assignedDriver": {"version": "CMD", "tags": "", "description": "Returns the soldier assigned to the given vehicle as a driver.", "example": "_driver = assignedDriver vehicleName;", "docSyntax": "assignedDriver vehicle", "syntax": "assignedDriver <objVehicle>"}, "assignedGroup": {"version": "CMD", "tags": "", "description": "Returns Group to which the given vehicle was added last with addVehicle. To update assignedGroup to the current group, run addVehicle to the current group again.", "example": "_group = assignedGroup vehicle player;", "docSyntax": "assignedGroup vehicle", "syntax": "assignedGroup <objVehicle>"}, "assignedGunner": {"version": "CMD", "tags": "", "description": "Returns the soldier assigned to the given vehicle as a gunner.", "example": "_gunner = assignedGunner vehicle player;", "docSyntax": "assignedGunner vehicle", "syntax": "assignedGunner <objVehicle>"}, "assignedItems": {"version": "CMD", "tags": "", "description": "Get array with assigned items. The resulting Array order is not guaranteed. To check availability of a particular slot item use getSlotItemName. To return stored items see items and itemsWithMagazines.", "example": "hint str assignedItems player;", "docSyntax": "assignedItems unit", "syntax": "assignedItems <objUnit>"}, "assignedTarget": {"version": "CMD", "tags": "", "description": "Returns the target assigned to an unit or the vehicle's effectiveCommander. The target can be assigned by the group/vehicle/formation leader (as player via quick command menu or \"target\" complex command menu).", "example": "_target = assignedTarget _T72;", "docSyntax": "assignedTarget vehicleName", "syntax": "assignedTarget vehicleName"}, "assignedTeam": {"version": "CMD", "tags": "", "description": "Returns the team the unit belongs to. Possible values:", "example": "_team = assignedTeam player;", "docSyntax": "assignedTeam unitName", "syntax": "assignedTeam <objUnit>"}, "assignedVehicle": {"version": "CMD", "tags": "", "description": "Returns the vehicle to which a unit is assigned, usually with assignAsXXX command. If no vehicle is assigned objNull is returned.", "example": "_vehicle = assignedVehicle player;", "docSyntax": "assignedVehicle unit", "syntax": "assignedVehicle <objUnit>"}, "assignedVehicleRole": {"version": "CMD", "tags": "", "description": "Returns the role a unit is assigned to within its assigned vehicle.", "example": "_RoleArray = assignedVehicleRole player;", "docSyntax": "assignedVehicleRole unitName", "syntax": "assignedVehicleRole <objUnit>"}, "assignedVehicles": {"version": "CMD", "tags": "", "description": "Returns all vehicles added to the given Group with addVehicle.", "example": "_vehicles = assignedVehicles group player;", "docSyntax": "assignedVehicles group", "syntax": "assignedVehicles <objGroup>"}, "assignItem": {"version": "CMD", "tags": "", "description": "Assigns existing item from inventory (uniform, vest, backpack) to a correct slot. If the slot is occupied by another item, it gets replaced. See also linkItem.", "example": "bluforUnit addItem \"NVGoggles\"; bluforUnit assignItem \"NVGoggles\"; opforUnit addItem \"NVGoggles_OPFOR\"; opforUnit assignItem \"NVGoggles_OPFOR\"; independentUnit addItem \"NVGoggles_INDEP\"; independentUnit assignItem \"NVGoggles_INDEP\";", "docSyntax": "unit assignItem item", "syntax": "<objUnit> assignItem <objItem>"}, "assignTeam": {"version": "CMD", "tags": "", "description": "Team", "example": "_soldier2 assignTeam \"RED\";", "docSyntax": "unit assignTeam team", "syntax": "<objUnit> assignTeam team"}, "assignToAirport": {"version": "CMD", "tags": "", "description": "Assigns a plane to an airport ID or object.", "example": "plane1 assignToAirport 0;", "docSyntax": "plane assignToAirport id", "syntax": "plane assignToAirport <scalar>"}, "atan": {"version": "CMD", "tags": "", "description": "Returns the arcus tangens.", "example": "_degrees = atan 1; //\u00a045", "docSyntax": "atan x", "syntax": "atan x"}, "atan2": {"version": "CMD", "tags": "", "description": "ArcTangent of y/x. Used to determine the angle of a vector [y,x]. Result in Degrees between -180 and 180.", "example": "_yx = [5,3]; _degrees = (_yx select 0) atan2 (_yx select 1); //\u00a059.0362", "docSyntax": "y atan2 x", "syntax": "y atan2 x"}, "atg": {"version": "CMD", "tags": "", "description": "Returns the arcus tangens.", "example": "_atanThreeFifth = atg 3/5;", "docSyntax": "atg x", "syntax": "atg x"}, "ATLToASL": {"version": "CMD", "tags": "", "description": "Converts a position from PositionATL to PositionASL", "example": "ATLToASL (getPosATL player) isEqualTo getPosASL player;", "docSyntax": "ATLToASL pos", "syntax": "ATLToASL <array>"}, "attachedObject": {"version": "CMD", "tags": "", "description": "Returns the object a location is attached to. If the location is unattached, then objNull is returned.", "example": "_locAttachedObj = attachedObject myLocation;", "docSyntax": "attachedObject location", "syntax": "attachedObject location"}, "attachedObjects": {"version": "CMD", "tags": "", "description": "Returns a list of objects attached to the given object.", "example": "{ detach _x; } forEach attachedObjects player;", "docSyntax": "attachedObjects obj", "syntax": "attachedObjects <object>"}, "attachedTo": {"version": "CMD", "tags": "", "description": "Returns object the given object is attached to or objNull if the given object is not attached to anything.", "example": "if (isNull attachedTo _obj1) then { hint \"_obj1 is not attached to anything.\"; };", "docSyntax": "attachedTo obj", "syntax": "attachedTo <object>"}, "attachObject": {"version": "CMD", "tags": "", "description": "Attaches a location to the specified object. To detach a location, attach it to objNull.", "example": "myLocation attachObject player;", "docSyntax": "location attachObject object", "syntax": "location attachObject <object>"}, "attachTo": {"version": "CMD", "tags": "", "description": "Attaches an object to another object.", "example": "player attachTo [car, [0, 0, 1]];", "docSyntax": "object1 attachTo [object2, offset, memPoint, followBoneRotation]", "syntax": "object1 attachTo [object2,offset,memPoint,followBoneRotation]"}, "attackEnabled": {"version": "CMD", "tags": "", "description": "Return whether a group's leader can issue attack commands to soldiers under his command.", "example": "if (not attackEnabled _soldier) then { _soldier setCombatMode \"Careless\" };", "docSyntax": "attackEnabled name", "syntax": "attackEnabled <string>"}, "awake": {"version": "CMD", "tags": "", "description": "Wakes up sleeping PhysX object or puts a PhysX object to sleep. In 2.10 this command can be used on corpses of type Man and has no effect on alive units. When unit gets killed it goes into ragdoll state for a short while, then the units get frozen and any simulation and collision is removed to save system resources. As a result, corpses do not react to their surrounding any more. Using this command will temporarily re-enable ragdoll state of a corpse to the same state it was when unit died. If this command is used in \"enable/disable\" sequence on a dead body, it gives the corpse a visible nudge (See example 3).", "example": "_object awake false;", "docSyntax": "object awake awake", "syntax": "<object> awake awake"}, "backpack": {"version": "CMD", "tags": "", "description": "Returns a class of a backpack.", "example": "_classname = backpack player;", "docSyntax": "backpack unit", "syntax": "backpack <objUnit>"}, "backpackCargo": {"version": "CMD", "tags": "", "description": "Get array with backpacks from ammo box (or any general weapon holder container).", "example": "hint str backpackCargo vehicle player;", "docSyntax": "backpackCargo box", "syntax": "backpackCargo box"}, "backpackContainer": {"version": "CMD", "tags": "", "description": "Returns a cargo container of a unit's backpack.", "example": "hint str backpackContainer player; //\u00a01a5f7900# 163944: backpack_fast.p3d", "docSyntax": "backpackContainer unit", "syntax": "backpackContainer <objUnit>"}, "backpackItems": {"version": "CMD", "tags": "", "description": "Get array with all items (of any kind, even weapons) in backpack of the given unit.", "example": "backpackItems player; //\u00a0returns e.g [\"hgun_P07_F\", \"Titan_AT\"]", "docSyntax": "backpackItems unit", "syntax": "backpackItems <objUnit>"}, "backpackMagazines": {"version": "CMD", "tags": "", "description": "Get array with all magazines from backpack of the given unit.", "example": "backpackMagazines player; //\u00a0returns e.g /* [ \"Titan AT Missile(1/1)[id/cr:16/0](2x)\" ] */", "docSyntax": "backpackMagazines unit", "syntax": "backpackMagazines <objUnit>"}, "backpacks": {"version": "CMD", "tags": "", "description": "Returns an array of all backpack names a unit has in its inventory, excluding the one it carries on the back.", "example": "private _allCarriedBackpackTypes = backpacks player + [backpack player];", "docSyntax": "backpacks unit", "syntax": "backpacks <objUnit>"}, "backpackSpaceFor": {"version": "CMD", "tags": "", "description": "Returns how much space is in backpack for given weapon or magazine", "example": "(backpackContainer player) backpackSpaceFor \"m16\"; //\u00a0[weapons, magazines]", "docSyntax": "backpack backpackSpaceFor weaponName", "syntax": "backpack backpackSpaceFor weaponName"}, "behaviour": {"version": "CMD", "tags": "", "description": "Returns the behaviour of the individual unit, this is why it only accepts Object as the argument. For Arma 3 behaviour explanation see Arma_3_AI_Behavior", "example": "_soldier setBehaviour \"CARELESS\"; _b = behaviour _soldier; //\u00a0returns \"CARELESS\"", "docSyntax": "behaviour unit", "syntax": "behaviour <objUnit>"}, "benchmark": {"version": "CMD", "tags": "", "description": "Returns the value of \"3D Performance\" in OFP Preferences (flashpoint.cfg). This can be used to estimate the computer performance to adapt CPU and GPU demanding settings like view distance dynamically in missions.", "example": "? (benchmark > 2000) : setViewDistance 2000", "docSyntax": "benchmark", "syntax": "benchmark"}, "bezierInterpolation": {"version": "CMD", "tags": "", "description": "Gets interpolated value based on B\u00e9zier curve with given control points (progress value is 0...1 for a curve that starts at pos0 and finishes at posN)", "example": "Quick demonstration that spawns some spheres around player object:", "docSyntax": "progress bezierInterpolation positions", "syntax": "progress bezierInterpolation positions"}, "binocular": {"version": "CMD", "tags": "", "description": "Returns class name of currently used binocular weapon.", "example": "_binocs = binocular player; //Rangefinder", "docSyntax": "binocular unit", "syntax": "binocular <objUnit>"}, "binocularItems": {"version": "CMD", "tags": "", "description": "Returns array with all items assigned to the binocular weapon except magazines. Use binocularMagazine command for the latter. This command is used for infantry weapons only.", "example": "binocularItems player;", "docSyntax": "binocularItems unit", "syntax": "binocularItems <objUnit>"}, "binocularMagazine": {"version": "CMD", "tags": "", "description": "Collects all loaded magazines from all binocular muzzles and returns them in Array, otherwise it returns []. This command is used for infantry weapons only.", "example": "hint str binocularMagazine player; //\u00a0[\"Laserbatteries\"]", "docSyntax": "binocularMagazine unit", "syntax": "binocularMagazine <objUnit>"}, "boundingBox": {"version": "CMD", "tags": "", "description": "Returns a bounding box of given object in model coordinate space, adjusted according to destruction/animation of an object. This command is rather generous on the size estimation, for more precise coordinates use boundingBoxReal.", "example": "private _box = boundingBox _abrams;", "docSyntax": "boundingBox object", "syntax": "boundingBox <object>"}, "boundingBoxReal": {"version": "CMD", "tags": "", "description": "Returns a raw bounding box of given object in model coordinates space. This command is similar to boundingBox but gives more precise measurements.", "example": "private _bbr = boundingBoxReal vehicle player; private _p1 = _bbr select 0; private _p2 = _bbr select 1; private _maxWidth = abs ((_p2 select 0) - (_p1 select 0)); private _maxLength = abs ((_p2 select 1) - (_p1 select 1)); private _maxHeight = abs ((_p2 select 2) - (_p1 select 2));", "docSyntax": "boundingBoxReal object", "syntax": "boundingBoxReal <object>"}, "boundingCenter": {"version": "CMD", "tags": "", "description": "Returns the position of the original (loaded) center of an object in model coordinates. Despite its name, it has nothing to do with boundingBox or boundingBoxReal, it returns offset where [0, 0, 0] was Object Builder / Oxygen 2 when model was created.", "example": "_center = boundingCenter TruckOne;", "docSyntax": "boundingCenter object", "syntax": "boundingCenter <object>"}, "brakesDisabled": {"version": "CMD", "tags": "", "description": "Returns the status of autobrake (see disableBrakes).", "example": "if !(brakesDisabled _vehicle) then { disableBrakes _vehicle; };", "docSyntax": "brakesDisabled transport", "syntax": "brakesDisabled transport"}, "break": {"version": "CMD", "tags": "", "description": "Skips all loop iterations (for, forEach, while, findIf etc).", "example": "//\u00a0prints 0, 1 and then exits for \"_i\" from 0 to 3 do { if (_i == 2) then { break }; systemChat str _i; };", "docSyntax": "break", "syntax": "break"}, "briefingName": {"version": "CMD", "tags": "", "description": "Returns the name of the current briefing/scenario name.", "example": "_name = briefingName;", "docSyntax": "briefingName", "syntax": "briefingName"}, "buildingExit": {"version": "CMD", "tags": "", "description": "Returns the given indexed exit in a building. The returned value is in format Position.", "example": "_building buildingExit 0;", "docSyntax": "building buildingExit index", "syntax": "building buildingExit <scalar>"}, "buildingPos": {"version": "CMD", "tags": "", "description": "Returns position of a given indexed position in a building.", "example": "_soldier setPosATL (_house1 buildingPos 2);", "docSyntax": "building buildingPos index", "syntax": "building buildingPos <scalar>"}, "buldozer_enableRoadDiag": {"version": "CMD", "tags": "", "description": "Enables road diagnostics in buldozer.", "example": "buldozer_enableRoadDiag true;", "docSyntax": "buldozer_enableRoadDiag enable", "syntax": "buldozer_enableRoadDiag <bool>"}, "buldozer_isEnabledRoadDiag": {"version": "CMD", "tags": "", "description": "Returns if road diagnostics are enabled in buldozer.", "example": "_isEnabled = buldozer_isEnabledRoadDiag;", "docSyntax": "buldozer_isEnabledRoadDiag", "syntax": "buldozer_isEnabledRoadDiag"}, "buldozer_loadNewRoads": {"version": "CMD", "tags": "", "description": "Generates new roads. Working only in buldozer.", "example": "_loaded = buldozer_loadNewRoads \"C:/A3/Map_Stratis/data/roads/\"", "docSyntax": "buldozer_loadNewRoads path", "syntax": "buldozer_loadNewRoads path"}, "buldozer_reloadOperMap": {"version": "CMD", "tags": "", "description": "Reload oper map visible in costMap diag tool. Working only in buldozer.", "example": "buldozer_reloadOperMap;", "docSyntax": "buldozer_reloadOperMap", "syntax": "buldozer_reloadOperMap"}, "buttonAction": {"version": "CMD", "tags": "", "description": "Returns the action assigned to a control of the currently active user dialog. Can be used for buttons and active texts. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "buttonSetAction [100, { player exec \"reply.sqs\" }] _action = buttonAction 100; //\u00a0Returns { player exec \"reply.sqs\" }", "docSyntax": "buttonAction idc", "syntax": "buttonAction <scalar>"}, "buttonSetAction": {"version": "CMD", "tags": "", "description": "\ud83d\udd56", "example": "buttonSetAction [100, \"player exec \"\"reply.sqs\"\"\"];", "docSyntax": "buttonSetAction [idc, action]", "syntax": "buttonSetAction [<scalar>,action]"}, "cadetMode": {"version": "CMD", "tags": "", "description": "Prior to Arma 3 it returns if the player is currently playing in cadet or veteran mode.", "example": "SQS Syntax:", "docSyntax": "cadetMode", "syntax": "cadetMode"}, "calculatePath": {"version": "CMD", "tags": "", "description": "Spawns an agent that will execute an AI path calculation and fire the \"PathCalculated\" event handler. The vehicle type to simulate could be one of the following presets:", "example": "calculatePath [\"car\", \"safe\", [2150.67,5778.19,0], [2184.11,5802.28,0]];", "docSyntax": "calculatePath [type, behaviour, from, to]", "syntax": "calculatePath [type,behaviour,from,to]"}, "calculatePlayerVisibilityByFriendly": {"version": "CMD", "tags": "", "description": "Sets if friendly units will calculate player's visibility or not. Default value is false.", "example": "calculatePlayerVisibilityByFriendly true;", "docSyntax": "calculatePlayerVisibilityByFriendly calculate", "syntax": "calculatePlayerVisibilityByFriendly calculate"}, "callExtension": {"version": "CMD", "tags": "", "description": "Calls custom .dll also known as Extension. The name of the extension is the name of the extension .dll without \".dll\" part (or without \"_x64.dll\" part on 64-bit Arma). For example if the file is 'myExtension.dll' the name of the extension will be \"myExtension\". For 64-bit extensions, the name of the extension doesn't need to change and is still \"myExtension\". The game will automatically look for 'myExtension_x64.dll' when you use 64-bit Arma exe.", "example": "_return = \"myExtension\" callExtension \"stringToBeParsed\";", "docSyntax": "extension callExtension function", "syntax": "extension callExtension function"}, "camCommand": {"version": "CMD", "tags": "", "description": "Executes a command on the given camera / actor object. Known commands:", "example": "_camera camCommand \"manual on\";", "docSyntax": "camera camCommand command", "syntax": "<objCamera> camCommand command"}, "camCommit": {"version": "CMD", "tags": "", "description": "Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. For camPrepareXXX commands use camCommitPrepared.", "example": "SQS Syntax:", "docSyntax": "camera camCommit time", "syntax": "<objCamera> camCommit <scalar>"}, "camCommitPrepared": {"version": "CMD", "tags": "", "description": "Smoothly conducts the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. This command is for use with camPrepareXXX commands. For the normal cam command use camCommit.", "example": "//\u00a0create a camera object _cam = \"camera\" camCreate [5600, 4800, 10]; _cam camPrepareTarget player; _cam cameraEffect [\"internal\", \"BACK\"]; _cam camCommitPrepared 0; //\u00a0smoothly move the camera to its new position in 6 seconds _cam camPreparePos [5680, 4720, 20]; _cam camCommitPrepared 6; waitUntil { camCommitted _cam }; //\u00a0proceed", "docSyntax": "camera camCommitPrepared time", "syntax": "<objCamera> camCommitPrepared <scalar>"}, "camCommitted": {"version": "CMD", "tags": "", "description": "Checks if the conduction of the last camCommit call already finished.", "example": "SQS:", "docSyntax": "camCommitted camera", "syntax": "camCommitted <objCamera>"}, "camConstuctionSetParams": {"version": "CMD", "tags": "", "description": "Sets construction camera parameters. To work with \"camconstruct\" object.", "example": "_camera camConstuctionSetParams [getPos player, 50, 20];", "docSyntax": "camera camConstuctionSetParams [position, radius, maxAboveLand]", "syntax": "<objCamera> camConstuctionSetParams [position,radius,maxAboveLand]"}, "camCreate": {"version": "CMD", "tags": "", "description": "Create a camera or a seagull object on the given position. The creation happens immediately and doesn't wait for camCommit.", "example": "_cam = \"camera\" camCreate (ASLToAGL eyePos player);", "docSyntax": "type camCreate position", "syntax": "type camCreate position"}, "camDestroy": {"version": "CMD", "tags": "", "description": "Destroys camera object created with camCreate. This command doesn't need camCommit.", "example": "camDestroy _cam;", "docSyntax": "camDestroy object", "syntax": "camDestroy <object>"}, "cameraEffect": {"version": "CMD", "tags": "", "description": "Sets the given effect on the given camera. If you want to switch the screen directly to the first-person, aiming, third-person or group view of an object, use switchCamera instead. The effect type \"Terminate\" is used to exit the current camera view and switch back to the player's view. Does not need camCommit.", "example": "_cam cameraEffect [\"internal\", \"BACK\"];", "docSyntax": "camera cameraEffect [effectName, effectPosition, r2tName]", "syntax": "<objCamera> cameraEffect [effectName,effectPosition,r2tName]"}, "cameraEffectEnableHUD": {"version": "CMD", "tags": "", "description": "Enable / disable showing of in-game UI during currently active camera effect. By default the HUD is off, which will make results of drawIcon3D invisible, for example.", "example": "cameraEffectEnableHUD true;", "docSyntax": "cameraEffectEnableHUD enable", "syntax": "cameraEffectEnableHUD <bool>"}, "cameraInterest": {"version": "CMD", "tags": "", "description": "Return camera interest for given entity, as set by setCameraInterest, or as autodetected.", "example": "camInterest = cameraInterest myUnit;", "docSyntax": "cameraInterest entity", "syntax": "cameraInterest entity"}, "cameraOn": {"version": "CMD", "tags": "", "description": "Returns the vehicle to which the camera is attached. If you need the person, see focusOn.", "example": "_object = cameraOn;", "docSyntax": "cameraOn", "syntax": "cameraOn"}, "cameraView": {"version": "CMD", "tags": "", "description": "Returns mode of active camera view. Mode is one of:", "example": "if (cameraOn == _vehicle && cameraView == \"External\") then { _vehicle switchCamera \"Internal\"; };", "docSyntax": "cameraView", "syntax": "cameraView"}, "campaignConfigFile": {"version": "CMD", "tags": "", "description": "Returns root of campaign description.ext entries hierarchy.", "example": "_config = campaignConfigFile;", "docSyntax": "campaignConfigFile", "syntax": "campaignConfigFile"}, "camPreload": {"version": "CMD", "tags": "", "description": "Preloads the scene for the prepared camera with given timeout after which preloading is aborted. Max timeout is 30 seconds. Timeout of 0 means max timeout of 30 seconds as well.", "example": "_camera camPreload 5;", "docSyntax": "camera camPreload timeout", "syntax": "<objCamera> camPreload timeout"}, "camPreloaded": {"version": "CMD", "tags": "", "description": "Checks whether the camera has finished preloading.", "example": "if (camPreloaded _camera) exitWith { hint \"loaded\" };", "docSyntax": "camPreloaded camera", "syntax": "camPreloaded <objCamera>"}, "camPrepareBank": {"version": "CMD", "tags": "", "description": "Prepares the camera bank angle.", "example": "_camera camPrepareBank -0.1;", "docSyntax": "camera camPrepareBank bank", "syntax": "<objCamera> camPrepareBank bank"}, "camPrepareDir": {"version": "CMD", "tags": "", "description": "Prepares the camera heading.", "example": "_camera camPrepareDir 150;", "docSyntax": "camera camPrepareDir direction", "syntax": "<objCamera> camPrepareDir direction"}, "camPrepareDive": {"version": "CMD", "tags": "", "description": "Prepares the camera dive angle.", "example": "_camera camPrepareDive -0.1;", "docSyntax": "camera camPrepareDive dive", "syntax": "<objCamera> camPrepareDive dive"}, "camPrepareFocus": {"version": "CMD", "tags": "", "description": "focusRange is . Prepares the camera focus blur. [-1,1] will reset default values (auto focusing), [-1,-1] will disable postprocessing (all is focused). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareFocus [50, 1];", "docSyntax": "camera camPrepareFocus [distance, blur]", "syntax": "<objCamera> camPrepareFocus [<scalar>,blur]"}, "camPrepareFov": {"version": "CMD", "tags": "", "description": "Prepares the camera field of view (zoom). The default zoom level is 0.75, 0.01 is the nearest and 2 the furthest zoom value. The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareFov 0.1;", "docSyntax": "camera camPrepareFov fieldOfView", "syntax": "<objCamera> camPrepareFov fieldOfView"}, "camPrepareFovRange": {"version": "CMD", "tags": "", "description": "Prepares the camera field of view range for auto zooming.", "example": "_camera camPrepareFovRange [0.1, 0.5];", "docSyntax": "camera camPrepareFovRange fovRange", "syntax": "<objCamera> camPrepareFovRange fovRange"}, "camPreparePos": {"version": "CMD", "tags": "", "description": "Prepares the camera position. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPreparePos getPos player;", "docSyntax": "camera camPreparePos position", "syntax": "<objCamera> camPreparePos position"}, "camPrepareRelPos": {"version": "CMD", "tags": "", "description": "Prepares the camera position relative to the current position of the currect target (see camPrepareTarget). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareRelPos [10,5,-2];", "docSyntax": "camera camPrepareRelPos position", "syntax": "<objCamera> camPrepareRelPos position"}, "camPrepareTarget": {"version": "CMD", "tags": "", "description": "Prepares the camera target to a position or to a target. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareTarget getPos player;", "docSyntax": "camera camPrepareTarget position", "syntax": "<objCamera> camPrepareTarget position"}, "camSetBank": {"version": "CMD", "tags": "", "description": "Sets camera bank angle. Does not commit changes.", "example": "_camera camSetBank -0.1;", "docSyntax": "camera camSetBank bank", "syntax": "<objCamera> camSetBank bank"}, "camSetDir": {"version": "CMD", "tags": "", "description": "Sets the orientation of the given camera in the direction of the given vector. Needs camCommit.", "example": "Since Arma 3:", "docSyntax": "camera camSetDir direction", "syntax": "<objCamera> camSetDir direction"}, "camSetDive": {"version": "CMD", "tags": "", "description": "Sets camera dive angle. Does not commit changes.", "example": "_camera camSetDive -0.1;", "docSyntax": "camera camSetDive dive", "syntax": "<objCamera> camSetDive dive"}, "camSetFocus": {"version": "CMD", "tags": "", "description": "Sets camera focus range in format [distance, blur]. blur param - sets the camera focus blur. It does not automatically commit changes (see camCommit). Use [-1, -1] to disable focus completely.", "example": "_camera camSetFocus [50, 1];", "docSyntax": "camera camSetFocus focusRange", "syntax": "<objCamera> camSetFocus focusRange"}, "camSetFov": {"version": "CMD", "tags": "", "description": "Set the zoom level (Field Of View) of the given camera.", "example": "_cam camSetFov 0.75;", "docSyntax": "camera camSetFov level", "syntax": "<objCamera> camSetFov level"}, "camSetFovRange": {"version": "CMD", "tags": "", "description": "Set the zoom level (Field Of View) start and end values for automatical zooming.", "example": "_cam camSetFovRange [0.1, 0.7];", "docSyntax": "camera camSetFovRange fovRange", "syntax": "<objCamera> camSetFovRange fovRange"}, "camSetPos": {"version": "CMD", "tags": "", "description": "Sets the position of the given camera or seagull (see camCreate). It is worth mentioning that camera position can also be set with setPos, in which case it would be instant. With camSetPos it is possible to make smooth position transition in time, defined with camCommit, which is required in this case.", "example": "_cam camSetPos [2300,1000,130]; _cam camCommit 10;", "docSyntax": "camera camSetPos position", "syntax": "<objCamera> camSetPos position"}, "camSetRelPos": {"version": "CMD", "tags": "", "description": "Sets the position of the given camera relative to its target, set with camSetTarget. Needs a call to camCommit to be conducted.", "example": "_cam camSetTarget _car; _cam camSetRelPos [0,10,8];", "docSyntax": "camera camSetRelPos position", "syntax": "<objCamera> camSetRelPos position"}, "camSetTarget": {"version": "CMD", "tags": "", "description": "Set the target object or position where the given camera should point at. Needs the call of camCommit to be conducted. To reset the target use objNull.", "example": "_camera camSetTarget player;", "docSyntax": "camera camSetTarget target", "syntax": "<objCamera> camSetTarget <object>"}, "camTarget": {"version": "CMD", "tags": "", "description": "Returns camera's target.", "example": "_someObject = camTarget _camera;", "docSyntax": "camTarget camera", "syntax": "camTarget <objCamera>"}, "camUseNVG": {"version": "CMD", "tags": "", "description": "Set / clear using of night vision during cutscenes. This command only works with camCreate created camera that is currently the main camera for the player (see example).", "example": "camUseNVG true;", "docSyntax": "camUseNVG set", "syntax": "camUseNVG set"}, "canAdd": {"version": "CMD", "tags": "", "description": "Checks if given object can be stored in inventory of given object or any inventory container (uniform, vest, backpack) of given unit. Since Arma 3 v2.09 this command will count unit storage space as whole, instead of as biggest container, when multiple items are queried.", "example": "if (player canAdd \"FirstAidKit\") then { player addItem \"FirstAidKit\"; } else { hint \"Not enough space\"; };", "docSyntax": "object canAdd item", "syntax": "<object> canAdd <objItem>"}, "canAddItemToBackpack": {"version": "CMD", "tags": "", "description": "Checks if given object can be stored into soldier's backpack.", "example": "if (player canAddItemToBackpack \"HandGrenade\") then { player addItemToBackpack _item } else { hint \"no room!\" };", "docSyntax": "unit canAddItemToBackpack item", "syntax": "<objUnit> canAddItemToBackpack <objItem>"}, "canAddItemToUniform": {"version": "CMD", "tags": "", "description": "Checks if given object can be stored into soldier's uniform.", "example": "_item = \"HandGrenade\"; _fits = player canAddItemToUniform _item; if (_fits) then { player addItemToUniform _item; } else { hint \"no room!\"; };", "docSyntax": "unit canAddItemToUniform item", "syntax": "<objUnit> canAddItemToUniform <objItem>"}, "canAddItemToVest": {"version": "CMD", "tags": "", "description": "Checks if given object can be stored into soldier's vest.", "example": "_item = \"HandGrenade\"; private _fits = player canAddItemToVest _item; if (_fits) then { player addItemToVest _item; } else { hint \"no room!\"; };", "docSyntax": "unit canAddItemToVest item", "syntax": "<objUnit> canAddItemToVest <objItem>"}, "cancelSimpleTaskDestination": {"version": "CMD", "tags": "", "description": "Cancels a simple task destination.", "example": "cancelSimpleTaskDestination myTask;", "docSyntax": "cancelSimpleTaskDestination task", "syntax": "cancelSimpleTaskDestination <objTask>"}, "canDeployWeapon": {"version": "CMD", "tags": "", "description": "Returns true if a unit's weapon can be deployed.", "example": "if (canDeployWeapon player) then { hint \"I could rest my weapon here...\" };", "docSyntax": "canDeployWeapon unit", "syntax": "canDeployWeapon <objUnit>"}, "canFire": {"version": "CMD", "tags": "", "description": "Returns true if the given vehicle is still able to fire. For the command to return true, vehicle must be alive, have weapon operator and the weapon cannot be damaged \u2265 0.9 but can be empty due to running out of ammo. If mission starts with vehicle having no ammo or setVehicleAmmo 0 command is executed on the vehicle, then canFire will always report false for it.", "example": "if (not canFire _tank) then { player sideChat \"Tank disabled!\"; };", "docSyntax": "canFire unitName", "syntax": "canFire <objUnit>"}, "canMove": {"version": "CMD", "tags": "", "description": "Returns if the given vehicle is still able to move.", "example": "if (not canMove _tank) then { player sideChat \"He's nailed on the ground! Now hurry!\"; };", "docSyntax": "canMove vehicle", "syntax": "canMove <objVehicle>"}, "canSlingLoad": {"version": "CMD", "tags": "", "description": "Returns true if setSlingLoad is possible.", "example": "_canSling = veh1 canSlingLoad veh2;", "docSyntax": "heli canSlingLoad cargo", "syntax": "heli canSlingLoad <objVehicle>"}, "canStand": {"version": "CMD", "tags": "", "description": "Returns if the given soldier is able to stand up. It only checks for the unit's legs and not its alive/dead status - it can return true for a dead unit.", "example": "SQS:", "docSyntax": "canStand unit", "syntax": "canStand <objUnit>"}, "canSuspend": {"version": "CMD", "tags": "", "description": "Returns true if sleep, uiSleep or waitUntil commands can be used in current scope. Usually when suspension is not allowed but used, for example when code is executed in unscheduled environment, the script engine would ignore any suspension command and throw error: \"Suspending not allowed in this context\". Using canSuspend command allows to detect the correct environment for the code.", "example": "onEachFrame { systemChat str canSuspend; //\u00a0false [] spawn { hint str canSuspend }; //\u00a0true onEachFrame {}; };", "docSyntax": "canSuspend", "syntax": "canSuspend"}, "canTriggerDynamicSimulation": {"version": "CMD", "tags": "", "description": "A getter for triggerDynamicSimulation", "example": "hint str canTriggerDynamicSimulation player;", "docSyntax": "canTriggerDynamicSimulation unit", "syntax": "canTriggerDynamicSimulation <objUnit>"}, "canUnloadInCombat": {"version": "CMD", "tags": "", "description": "Returns config value of `unloadInCombat` for a vehicle. Alternatively see getUnloadInCombat", "example": "if (canUnloadInCombat _vehicle) then { hint \"unload in combat is possible!\" };", "docSyntax": "canUnloadInCombat vehicle", "syntax": "canUnloadInCombat <objVehicle>"}, "canVehicleCargo": {"version": "CMD", "tags": "", "description": "Returns bool array if it is possible to load cargo inside vehicle and if possible to load cargo into empty vehicle", "example": "Blackfish with no vehicle cargo loaded", "docSyntax": "vehicle canVehicleCargo cargo", "syntax": "<objVehicle> canVehicleCargo <objVehicle>"}, "captive": {"version": "CMD", "tags": "", "description": "Returns the captive state of the given unit (set with setCaptive). A captive unit will not be attacked by its enemies.", "example": "if (captive _general) then { removeAllWeapons _general; };", "docSyntax": "captive object", "syntax": "captive <object>"}, "captiveNum": {"version": "CMD", "tags": "", "description": "Checks whether the unit is a captive. If the unit is a vehicle, its commander is checked instead.", "example": "_captivity = captiveNum _unit;", "docSyntax": "captiveNum unit", "syntax": "captiveNum <objUnit>"}, "cbChecked": {"version": "CMD", "tags": "", "description": "Returns the current state of a CT_CHECKBOX control.", "example": "_checked = cbChecked _myCheckBox;", "docSyntax": "cbChecked control", "syntax": "cbChecked <uiControl>"}, "cbSetChecked": {"version": "CMD", "tags": "", "description": "Sets the current state of a CT_CHECKBOX control. Use \"CheckedChanged\" control event handler with it.", "example": "_myCheckBox cbSetChecked true;", "docSyntax": "control cbSetChecked state", "syntax": "<uiControl> cbSetChecked state"}, "ceil": {"version": "CMD", "tags": "", "description": "The ceil value of x.", "example": "ceil 5.25; //\u00a0Result is 6", "docSyntax": "ceil x", "syntax": "ceil x"}, "channelEnabled": {"version": "CMD", "tags": "", "description": "Returns Array of Booleans in format [enabledChat, enabledVoN] for the given channel. For more information about enabling/disabling of chat channels see enableChannel.", "example": "_isGlobalChatEnabled = (channelEnabled 0) select 0; //\u00a0check if user can use text on global channel", "docSyntax": "channelEnabled channelID", "syntax": "channelEnabled channelID"}, "cheatsEnabled": {"version": "CMD", "tags": "", "description": "Checks whether cheats are enabled (whether the designers' version is running).", "example": "_enabled = cheatsEnabled;", "docSyntax": "cheatsEnabled", "syntax": "cheatsEnabled"}, "checkAIFeature": {"version": "CMD", "tags": "", "description": "Checks if the given AI feature is currently enabled.", "example": "_featureUsed = checkAIFeature \"AwareFormationSoft\";", "docSyntax": "checkAIFeature feature", "syntax": "checkAIFeature feature"}, "checkVisibility": {"version": "CMD", "tags": "", "description": "Affected by", "example": "private _canSee = [objNull, \"VIEW\"] checkVisibility [eyePos player, eyePos unit1];", "docSyntax": "[ignore, LOD, ignore2] checkVisibility [beg, end]", "syntax": "[ignore,LOD,ignore2] checkVisibility [beg,end]"}, "className": {"version": "CMD", "tags": "", "description": "Returns short name of location. For config class name, see configName", "example": "_shortName = className myLocation;", "docSyntax": "className location", "syntax": "className location"}, "clear3DENAttribute": {"version": "CMD", "tags": "", "description": "Clears the value of the given entity's attribute in Eden Editor. An attribute is identified by its property (data when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes.", "example": "0 clear3DENAttribute \"name\";", "docSyntax": "entity clear3DENAttribute attribute", "syntax": "entity clear3DENAttribute attribute"}, "clear3DENInventory": {"version": "CMD", "tags": "", "description": "Deletes inventory from mission.sqm of given units. Effect is not immediately visible, only when previewing the inventory resets to default.", "example": "clear3DENInventory get3DENSelected \"Object\";", "docSyntax": "clear3DENInventory entities", "syntax": "clear3DENInventory entities"}, "clearAllItemsFromBackpack": {"version": "CMD", "tags": "", "description": "Removes all items from backpack of a unit.", "example": "clearAllItemsFromBackpack player;", "docSyntax": "clearAllItemsFromBackpack unit", "syntax": "clearAllItemsFromBackpack <objUnit>"}, "clearBackpackCargo": {"version": "CMD", "tags": "", "description": "Removes all backpacks from ammo box (or any general weapon holder container).", "example": "clearBackpackCargo myBox;", "docSyntax": "clearBackpackCargo box", "syntax": "clearBackpackCargo box"}, "clearBackpackCargoGlobal": {"version": "CMD", "tags": "", "description": "Removes all backpacks from the vehicle cargo space. MP synchronized.", "example": "clearBackpackCargoGlobal jeepOne;", "docSyntax": "clearBackpackCargoGlobal unit", "syntax": "clearBackpackCargoGlobal <objUnit>"}, "clearForcesRTD": {"version": "CMD", "tags": "", "description": "Removes all force generators from world.", "example": "clearForcesRTD;", "docSyntax": "clearForcesRTD", "syntax": "clearForcesRTD"}, "clearGroupIcons": {"version": "CMD", "tags": "", "description": "Removes all icons from group.", "example": "clearGroupIcons (group player);", "docSyntax": "clearGroupIcons group", "syntax": "clearGroupIcons <objGroup>"}, "clearItemCargo": {"version": "CMD", "tags": "", "description": "Removes all items from ammo box (or any general weapon holder container).", "example": "clearItemCargo myBox;", "docSyntax": "clearItemCargo box", "syntax": "clearItemCargo box"}, "clearItemCargoGlobal": {"version": "CMD", "tags": "", "description": "Removes all items from ammo box (or any general weapon holder container). It also removes vests and uniforms.", "example": "clearItemCargoGlobal _ammoBox;", "docSyntax": "clearItemCargoGlobal box", "syntax": "clearItemCargoGlobal box"}, "clearItemPool": {"version": "CMD", "tags": "", "description": "Removes all items from ammo box (or any general weapon holder container)", "example": "clearItemPool jeepOne;", "docSyntax": "clearItemPool box", "syntax": "clearItemPool box"}, "clearMagazineCargo": {"version": "CMD", "tags": "", "description": "Remove all magazines from the given vehicle's magazine cargo space.", "example": "clearMagazineCargo _truck;", "docSyntax": "clearMagazineCargo vehicleName", "syntax": "clearMagazineCargo vehicleName"}, "clearMagazineCargoGlobal": {"version": "CMD", "tags": "", "description": "Removes all magazines from the vehicle cargo space. MP synchronized.", "example": "clearMagazineCargoGlobal jeepOne;", "docSyntax": "clearMagazineCargoGlobal object", "syntax": "clearMagazineCargoGlobal <object>"}, "clearMagazinePool": {"version": "CMD", "tags": "", "description": "Removes all magazines from the magazine pool, of which the player may choose in the following missions. Available in campaigns only.", "example": "clearMagazinePool;", "docSyntax": "clearMagazinePool", "syntax": "clearMagazinePool"}, "clearOverlay": {"version": "CMD", "tags": "", "description": "Clear the current overlay.", "example": "clearOverlay _map,;", "docSyntax": "clearOverlay map", "syntax": "clearOverlay <objMap>"}, "clearRadio": {"version": "CMD", "tags": "", "description": "Clean up the content of radio protocol history.", "example": "clearRadio;", "docSyntax": "clearRadio", "syntax": "clearRadio"}, "clearWeaponCargo": {"version": "CMD", "tags": "", "description": "Remove all weapons from the given vehicle's weapon cargo space.", "example": "clearWeaponCargo _truck;", "docSyntax": "clearWeaponCargo vehicleName", "syntax": "clearWeaponCargo vehicleName"}, "clearWeaponCargoGlobal": {"version": "CMD", "tags": "", "description": "Removes all weapons from the vehicle cargo space. MP synchronized.", "example": "clearWeaponCargoGlobal jeepOne;", "docSyntax": "clearWeaponCargoGlobal unit", "syntax": "clearWeaponCargoGlobal <objUnit>"}, "clearWeaponPool": {"version": "CMD", "tags": "", "description": "Remove all weapons from the weapon pool, of which the player may choose in the following missions. Available in campaigns only.", "example": "clearWeaponPool;", "docSyntax": "clearWeaponPool", "syntax": "clearWeaponPool"}, "clientOwner": {"version": "CMD", "tags": "", "description": "Returns the machine network ID of the client executing the command.", "example": "private _myNetworkId = clientOwner;", "docSyntax": "clientOwner", "syntax": "clientOwner"}, "closeDialog": {"version": "CMD", "tags": "", "description": "Closes the currently active dialog with exit code. It does not instantly close the dialog but does it on next simulation cycle. Most common exit codes are:", "example": "closeDialog 2;", "docSyntax": "closeDialog exitcode", "syntax": "closeDialog exitcode"}, "closeDisplay": {"version": "CMD", "tags": "", "description": "Closes given display with exit code. It does not instantly close the display but does it on next simulation cycle. Most common exit codes are:", "example": "_display closeDisplay 1;", "docSyntax": "display closeDisplay exitCode", "syntax": "<uiDisplay> closeDisplay exitCode"}, "closeOverlay": {"version": "CMD", "tags": "", "description": "Closes the current overlay without committing.", "example": "-", "docSyntax": "closeOverlay map", "syntax": "closeOverlay <objMap>"}, "collapseObjectTree": {"version": "CMD", "tags": "", "description": "Collapse the object tree.", "example": "collapseObjectTree _map,;", "docSyntax": "collapseObjectTree map", "syntax": "collapseObjectTree <objMap>"}, "collect3DENHistory": {"version": "CMD", "tags": "", "description": "Execute a block of code in which all Eden Editor operations will be recorded as one history step. For example creating an entity, setting its attributes and then connections would normally be recorded as three different steps. Calling them all within single collect3DENHistory block will group them together and the user will need to undo only once to revert the changes.", "example": "collect3DENHistory { _logic = create3DENEntity [\"Logic\", \"Logic\", position player]; add3DENConnection [\"Sync\", [_logic], player]; }; //\u00a0Creates a logic and connects it to player in one history step.", "docSyntax": "collect3DENHistory code", "syntax": "collect3DENHistory <code>"}, "collectiveRTD": {"version": "CMD", "tags": "", "description": "Returns the current position of a helicopter's collective pitch control.", "example": "_collective = collectiveRTD vehicle player;", "docSyntax": "collectiveRTD helicopterRTD", "syntax": "collectiveRTD helicopterRTD"}, "collisionDisabledWith": {"version": "CMD", "tags": "", "description": "Returns the object, given object has collision disabled with and whether or not returned object has also collision disabled with given object.", "example": "private _collisionInfo = collisionDisabledWith _tank;", "docSyntax": "collisionDisabledWith obj", "syntax": "collisionDisabledWith <object>"}, "combatBehaviour": {"version": "CMD", "tags": "", "description": "Returns combat behaviour of unit or group. To set unit or group behaviour see setCombatBehaviour. The behaviour is one of:", "example": "unit1 setCombatBehaviour \"CARELESS\"; combatBehaviour unit1; //\u00a0\"CARELESS\"", "docSyntax": "combatBehaviour unitOrGroup", "syntax": "combatBehaviour unitOrGroup"}, "combatMode": {"version": "CMD", "tags": "", "description": "Returns the combat mode of the given AI group. See setCombatMode for more information about combat modes.", "example": "if (combatMode _grp1 == \"BLUE\") then {_grp1 setCombatMode \"GREEN\"};", "docSyntax": "combatMode group", "syntax": "combatMode <objGroup>"}, "commandArtilleryFire": {"version": "CMD", "tags": "", "description": "Orders an artillery unit to fire a burst on the given position (via the radio).", "example": "Mortar commandArtilleryFire [[3000, 120, 1000], \"8Rnd_82mm_Mo_shells\", 3];", "docSyntax": "unit commandArtilleryFire [position, type, rounds]", "syntax": "<objUnit> commandArtilleryFire [position,type,rounds]"}, "commandChat": {"version": "CMD", "tags": "", "description": "Types text to the command radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "_soldierOne commandChat \"Show this text\";", "docSyntax": "unitName commandChat chatText", "syntax": "<objUnit> commandChat chatText"}, "commander": {"version": "CMD", "tags": "", "description": "In Operation Flashpoint it returns the commander of a vehicle. Since Armed Assault it returns the primary observer. The commander of a vehicle can be found with effectiveCommander.", "example": "moveOut commander _tank;", "docSyntax": "commander vehicle", "syntax": "commander <objVehicle>"}, "commandFire": {"version": "CMD", "tags": "", "description": "Order the given unit to fire on the given target (via the radio). If the target is objNull, the unit is ordered to fire on its current target (set with doTarget or commandTarget).", "example": "_ESoldier1 commandFire _WSoldier1;", "docSyntax": "unitName commandFire target", "syntax": "<objUnit> commandFire <object>"}, "commandFollow": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to follow another from his own group (via radio). It can also be used to resume unit formation after e.g doStop.", "example": "_soldier1 commandFollow _soldier2;", "docSyntax": "unit commandFollow unitLead", "syntax": "<objUnit> commandFollow unitLead"}, "commandFSM": {"version": "CMD", "tags": "", "description": "Orders a unit to process command defined by FSM file (via the radio).", "example": "_soldierOne commandFSM [\"move.fsm\", position player, player];", "docSyntax": "unitName commandFSM [fsmFile, position, target]", "syntax": "<objUnit> commandFSM [fsmFile,position,<object>]"}, "commandGetOut": {"version": "CMD", "tags": "", "description": "Orders one or multiple units to get out from the vehicle (via the radio). Same as doGetOut with latter being silent.", "example": "commandGetOut _unitOne;", "docSyntax": "commandGetOut unit(s)", "syntax": "commandGetOut <objUnit>(s)"}, "commandingMenu": {"version": "CMD", "tags": "", "description": "Returns the name of the topmost commanding menu or \"\" if the menu is closed. For action menu visibility check see isActionMenuVisible. See Notes for Arma 2/Arma 3 structure.", "example": "waitUntil { sleep 0.1; commandingMenu == \"RscStatus\" }; hint \"Press 4, I'm bleeding\u00a0!\";", "docSyntax": "commandingMenu", "syntax": "commandingMenu"}, "commandMove": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to move to the given location (via the radio). Exactly the same as doMove, except this command displays a radio message. The command will not put a visible waypoint marker unlike when move command is given via commanding menu.", "example": "_soldier1 commandMove getMarkerPos \"Marker1\";", "docSyntax": "unitName commandMove position", "syntax": "<objUnit> commandMove position"}, "commandRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the command radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne commandRadio \"messageOne\";", "docSyntax": "unit commandRadio radioName", "syntax": "<objUnit> commandRadio radioName"}, "commandStop": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to stop via radio. A stop command will never finish, the unit(s) will never be ready.", "example": "commandStop _soldier1;", "docSyntax": "commandStop target", "syntax": "commandStop <object>"}, "commandSuppressiveFire": {"version": "CMD", "tags": "", "description": "Orders the given unit or a group of units to suppress the given position or target (with radio messages, see doSuppressiveFire if you don't want messages).", "example": "_soldier commandSuppressiveFire [1869.508,5760.962,0.000];", "docSyntax": "unit commandSuppressiveFire target", "syntax": "<objUnit> commandSuppressiveFire <object>"}, "commandTarget": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to target the given target (via the radio). Command given to the player, puts a red square with words Target and Distance on player's HUD at target location. If player in vehicle and has radar facilities, it also adds target marker to the radar.", "example": "_ESoldier1 commandTarget _WSoldier1;", "docSyntax": "unit commandTarget target", "syntax": "<objUnit> commandTarget <object>"}, "commandWatch": {"version": "CMD", "tags": "", "description": "Orders the unit(s) to watch the given position or target (via the radio). Use objNull as the target to order a unit to stop watching a position/target.", "example": "_soldierOne commandWatch markerPos \"MarkerMoveOne\";", "docSyntax": "units commandWatch position", "syntax": "units commandWatch position"}, "comment": {"version": "CMD", "tags": "", "description": "Defines a comment. See SQF Syntax - Comments to learn more about comments.", "example": "In a preprocessed SQF script (e.g. when doing execVM \"myScript.sqf\")", "docSyntax": "comment text", "syntax": "comment <string>"}, "commitOverlay": {"version": "CMD", "tags": "", "description": "Commit the current overlay.", "example": "commitOverlay _map,;", "docSyntax": "commitOverlay map", "syntax": "commitOverlay <objMap>"}, "compatibleItems": {"version": "CMD", "tags": "", "description": "Returns all items (attachments) that can be mounted on the given weapon.", "example": "compatibleItems \"arifle_Katiba_GL_F\"; //\u00a0[\"optic_Nightstalker\",\"optic_tws\",\"optic_tws_mg\",\"optic_NVS\", ...]", "docSyntax": "compatibleItems weapon", "syntax": "compatibleItems <string>"}, "compatibleMagazines": {"version": "CMD", "tags": "", "description": "Returns all magazines that can be loaded in the given weapon.", "example": "compatibleMagazines \"arifle_Katiba_GL_F\";", "docSyntax": "compatibleMagazines weapon", "syntax": "compatibleMagazines <string>"}, "compileScript": {"version": "CMD", "tags": "", "description": "This command is an alias for compile(Final) (prefixHeader + preprocessFileLineNumbers path). See description of preprocessFileLineNumbers for more details.", "example": "compileScript [\"a3\\props_f_enoch\\military\\equipment\\scripts\\meteo.sqf\"]; //\u00a0has the same functionality as compile preprocessFileLineNumbers \"a3\\props_f_enoch\\military\\equipment\\scripts\\meteo.sqf\";", "docSyntax": "compileScript [path, final, prefixHeader]", "syntax": "compileScript [path,final,prefixHeader]"}, "completedFSM": {"version": "CMD", "tags": "", "description": "Checks whether the given FSM is completed. The FSM handle is the number returned by the execFSM command.", "example": "_completed = completedFSM _fsmHandle;", "docSyntax": "completedFSM fsmHandle", "syntax": "completedFSM fsmHandle"}, "composeText": {"version": "CMD", "tags": "", "description": "Creates a Structured Text by joining the given structured or plain text arguments.", "example": "hint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "composeText arguments", "syntax": "composeText arguments"}, "configClasses": {"version": "CMD", "tags": "", "description": "Returns an array of config entries which meet criteria in condition code. Command iterates through all available config sub classes of the given config class. Current looked at config is stored in _x variable (similar to alternative count command implementation). Condition has to return true in order for the looked at config to be added to the resulting array. Slightly faster than configProperties, but doesn't account for config properties or inherited entries.", "example": "collect all CfgVehicles configs:", "docSyntax": "condition configClasses config", "syntax": "condition configClasses config"}, "configFile": {"version": "CMD", "tags": "", "description": "Return root of config entries hierarchy.", "example": "_isMyClassActive = isClass (configFile >> \"CfgPatches\" >> \"MyClass\");", "docSyntax": "configFile", "syntax": "configFile"}, "configHierarchy": {"version": "CMD", "tags": "", "description": "Returns hierarchy of the given config class. Just like with inheritsFrom, only complete config classes are supported (before 2.14).", "example": "_hierarchy = configHierarchy (configFile >> \"CfgVehicles\" >> \"Car\"); //\u00a0[bin\\config.bin, bin\\config.bin/CfgVehicles, bin\\config.bin/CfgVehicles/Car]", "docSyntax": "configHierarchy configClass", "syntax": "configHierarchy <cfgClass>"}, "configName": {"version": "CMD", "tags": "", "description": "Returns name of config entry.", "example": "_name = configName (configFile >> \"CfgVehicles\"); //\u00a0result is \"CfgVehicles\"", "docSyntax": "configName config", "syntax": "configName config"}, "configOf": {"version": "CMD", "tags": "", "description": "Returns config path of the provided object.", "example": "configOf player; //\u00a0returns bin\\config.bin/CfgVehicles/B_W_Soldier_TL_F", "docSyntax": "configOf object", "syntax": "configOf <object>"}, "configProperties": {"version": "CMD", "tags": "", "description": "Returns an array of config entries which meet criteria in condition code. Command iterates through available classes and config properties for given config entry. If 3rd param is true the search also includes inherited properties. Current looked at config is stored in _x variable (similar to alternative count command implementation). Condition has to return true in order for the looked at property to be added to the resulting array. A bit slower than configClasses but allows to access inherited entries.", "example": "_configs = configProperties [configFile >> \"CfgVehicles\" >> \"O_Truck_02_box_F\"];", "docSyntax": "configProperties [config, condition, inherit]", "syntax": "configProperties [config,condition,inherit]"}, "configSourceAddonList": {"version": "CMD", "tags": "", "description": "Returns an array of addons (CfgPatches) in which the given config class is defined.", "example": "_addons = configSourceAddonList (configFile >> \"CfgVehicles\" >> \"Man\"); //\u00a0returns [\"A3_Data_F\", \"A3_Characters_F\", \"A3_Data_F_Curator\", \"A3_Air_F_Heli\"]", "docSyntax": "configSourceAddonList config", "syntax": "configSourceAddonList config"}, "configSourceMod": {"version": "CMD", "tags": "", "description": "Returns modDir of the mod that given config class was loaded from.", "example": "configSourceMod (configFile >> \"CfgVehicles\" >> \"Heli_Transport_04_base_F\"); //\u00a0returns \"heli\"", "docSyntax": "configSourceMod config", "syntax": "configSourceMod config"}, "configSourceModList": {"version": "CMD", "tags": "", "description": "Returns an array of mods (CfgMods) in which the given config class is defined.", "example": "_mods = configSourceModList (configFile >> \"CfgVehicles\" >> \"Man\"); hint str _mods; //\u00a0[\"A3\",\"curator\",\"heli\"]", "docSyntax": "configSourceModList config", "syntax": "configSourceModList config"}, "confirmSensorTarget": {"version": "CMD", "tags": "", "description": "Sets for which Side the entity becomes a \"confirmed hostile\" target - a target that becomes highlighted red on the sensors display.", "example": "vehicle player confirmSensorTarget [blufor, true];", "docSyntax": "vehicle confirmSensorTarget [side, isConfirmed]", "syntax": "<objVehicle> confirmSensorTarget [<objSide>,isConfirmed]"}, "connectTerminalToUAV": {"version": "CMD", "tags": "", "description": "Connect person with UAV terminal to UAV unit. UAV Terminal item needs to be assigned to GPS slot. If UAV is already connected to another terminal, this new connection will fail.", "example": "bool = player connectTerminalToUAV uav1;", "docSyntax": "person connectTerminalToUAV uav", "syntax": "<objUnit> connectTerminalToUAV uav"}, "connectToServer": {"version": "CMD", "tags": "", "description": "Connects the client to the provided server.", "example": "connectToServer [\"192.168.0.2\", 2302, \"test\"];", "docSyntax": "connectToServer [ip, port, password]", "syntax": "connectToServer [ip,port,password]"}, "controlsGroupCtrl": {"version": "CMD", "tags": "", "description": "Returns a child control with specified idc from a controls group", "example": "_control = _controlsGroup controlsGroupCtrl 101;", "docSyntax": "ctrlgrp controlsGroupCtrl idc", "syntax": "ctrlgrp controlsGroupCtrl <scalar>"}, "conversationDisabled": {"version": "CMD", "tags": "", "description": "A getter for disableConversation.", "example": "if (conversationDisabled soldier1) then { soldier1 disableConversation false };", "docSyntax": "conversationDisabled unit", "syntax": "conversationDisabled <objUnit>"}, "copyFromClipboard": {"version": "CMD", "tags": "", "description": "Return ANSI content of the (text) clipboard. If Unicode support is desired, see forceUnicode.", "example": "hint copyFromClipboard;", "docSyntax": "copyFromClipboard", "syntax": "copyFromClipboard"}, "copyToClipboard": {"version": "CMD", "tags": "", "description": "Copies ANSI text string to the clipboard. If Unicode support is desired, see forceUnicode.", "example": "copyToClipboard str _data;", "docSyntax": "copyToClipboard text", "syntax": "copyToClipboard <string>"}, "copyWaypoints": {"version": "CMD", "tags": "", "description": "Copy the chain of waypoints from source to target group. The target group will start to process waypoints from the first one.", "example": "group1 copyWaypoints group2;", "docSyntax": "groupTo copyWaypoints groupFrom", "syntax": "groupTo copyWaypoints groupFrom"}, "cos": {"version": "CMD", "tags": "", "description": "Cosine of a number, argument in degrees.", "example": "cos 60; //\u00a0returns 0.5", "docSyntax": "cos x", "syntax": "cos x"}, "countEnemy": {"version": "CMD", "tags": "", "description": "Count how many units in the array are considered enemy to the given unit.", "example": "_num = player countEnemy list _triggerOne;", "docSyntax": "unitName countEnemy arrayName", "syntax": "<objUnit> countEnemy arrayName"}, "countFriendly": {"version": "CMD", "tags": "", "description": "Count how many units in the array are considered friendly to the given unit.", "example": "_num = player countFriendly list _triggerOne;", "docSyntax": "unitName countFriendly arrayName", "syntax": "<objUnit> countFriendly arrayName"}, "countSide": {"version": "CMD", "tags": "", "description": "Returns how many units in the given array belong to given side.", "example": "_num = west countSide list _triggerOne;", "docSyntax": "side countSide array", "syntax": "<objSide> countSide <array>"}, "countType": {"version": "CMD", "tags": "", "description": "Count how many objects in the array are of given type. This command also works with parent classes like \"Air\", \"Tank\", and \"Car\". For a full class reference see Classes.", "example": "_count = \"Tank\" countType list _triggerOne;", "docSyntax": "type countType objects", "syntax": "type countType objects"}, "countUnknown": {"version": "CMD", "tags": "", "description": "Count how many units in the array are unknown to the given unit.", "example": "_num = player countUnknown list _triggerOne;", "docSyntax": "unitName countUnknown arrayName", "syntax": "<objUnit> countUnknown arrayName"}, "create3DENComposition": {"version": "CMD", "tags": "", "description": "Create new Composition. To create individual entities, use create3DENEntity.", "example": "myComposition = create3DENComposition [ configFile >> \"CfgGroups\" >> \"West\" >> \"BLU_F\" >> \"Infantry\" >> \"BUS_InfSquad\", screenToWorld [0.5, 0.5] ];", "docSyntax": "create3DENComposition [configPath, position]", "syntax": "create3DENComposition [configPath,position]"}, "create3DENEntity": {"version": "CMD", "tags": "", "description": "Create new Eden Entity. Used for creating individual entities; to create a composition (e.g., infantry squad), use create3DENComposition and to create a layer use add3DENLayer.", "example": "dude1 = create3DENEntity [\"Object\", \"B_Soldier_F\", screenToWorld [0.5, 0.5]];", "docSyntax": "create3DENEntity [mode, class, position, isEmpty]", "syntax": "create3DENEntity [mode,class,position,isEmpty]"}, "createAgent": {"version": "CMD", "tags": "", "description": "Creates an agent of the given type. An agent does not have a group or leader or the standard soldier FSM associated with it - for instance, an enemy soldier spawned as an agent has limited AI and will do nothing when fired upon - which can be useful to limit the amount of AI processing being done in a mission with very large numbers of \"AI\". Animals are also commonly created as agents.", "example": "private _agent = createAgent [\"B_Soldier_F\", getPosATL player, [], 0, \"NONE\"];", "docSyntax": "createAgent [type, position, markers, placement, special]", "syntax": "createAgent [type,position,markers,placement,special]"}, "createCenter": {"version": "CMD", "tags": "", "description": "Instanciate a Side center. A Side center is required to be able to create groups of this side.", "example": "createCenter east;", "docSyntax": "createCenter side", "syntax": "createCenter <objSide>"}, "createDialog": {"version": "CMD", "tags": "", "description": "Creates a dialog which is defined either in the mission's description.ext, in the campaign's description.ext or in the global resource.cpp. The given name has to be the class name used in one of these files. If another dialog is already opened, the desired dialog is created as a child dialog of the one already opened.", "example": "private _ok = createDialog \"RscDisplayGame\"; if (!_ok) then { hint \"Dialog could not be opened!\" };", "docSyntax": "createDialog dialogName", "syntax": "createDialog dialogName"}, "createDiaryLink": {"version": "CMD", "tags": "", "description": "Creates a link to the given diary entry.", "example": "_diaryRec1 = player createDiaryRecord [\"Diary\", [\"Record 1\", \"We can not refer to the next record because it does not exist yet.\"]]; _diaryRec2 = player createDiaryRecord [\"Diary\", [\"Record 2\", \"Go to \" + createDiaryLink [\"Diary\", _diaryRec1, \"record 1\"]]]; _diaryRec3 = player createDiaryRecord [\"Diary\", [\"Record 3\", \"Go to \" + createDiaryLink [\"Diary\", _diaryRec2, \"record 2\"]]];", "docSyntax": "createDiaryLink [subject, record, text]", "syntax": "createDiaryLink [<string>,record,<string>]"}, "createDiaryRecord": {"version": "CMD", "tags": "", "description": "Creates a Diary entry. Supported tags and their parameters: Show text", "example": "player createDiaryRecord [\"Diary\", [\"Intel\", \"Enemy base is on grid <marker name='enemyBase'>161170</marker>\"]]", "docSyntax": "player createDiaryRecord [subject, textInfo, task, taskState, showTitle]", "syntax": "<objUnit> createDiaryRecord [<string>,textInfo,<objTask>,taskState,showTitle]"}, "createDiarySubject": {"version": "CMD", "tags": "", "description": "Creates a new subject in the Diary.", "example": "_index = player createDiarySubject [\"myPage\",\"My page\"];", "docSyntax": "player createDiarySubject [subject, displayName, picture]", "syntax": "<objUnit> createDiarySubject [<string>,displayName,picture]"}, "createDisplay": {"version": "CMD", "tags": "", "description": "Creates child display of given display and loads from \"resourceName\". The notable difference between createDisplay and createDialog is that with createDisplay the player would be able to move around while the display is shown.", "example": "findDisplay 46 createDisplay \"RscCredits\";", "docSyntax": "parent createDisplay resourceName", "syntax": "parent createDisplay resourceName"}, "createGearDialog": {"version": "CMD", "tags": "", "description": "Opens gear dialog for given unit.", "example": "createGearDialog [player];", "docSyntax": "createGearDialog [unit, resource]", "syntax": "createGearDialog [<objUnit>,resource]"}, "createGroup": {"version": "CMD", "tags": "", "description": "Creates a new Group for the given Side. Using this command if the group limit is reached will return grpNull. The new Group exists globally, but it's locality is where this command was executed.", "example": "private _group = createGroup east;", "docSyntax": "createGroup side", "syntax": "createGroup <objSide>"}, "createGuardedPoint": {"version": "CMD", "tags": "", "description": "Adds a point guarded by the given side (scripted way of adding equivalent of \"GUARDED BY\" trigger in Editor). A closest AI group in the given side with assigned \"GUARD\" waypoint will attempt to secure this guard point. The actual guarded position is determined via the following rules:", "example": "createGuardedPoint [east, [0,0], -1, vehicle player];", "docSyntax": "createGuardedPoint [side, position, objectMapID, vehicle]", "syntax": "createGuardedPoint [<objSide>,position,objectMapID,<objVehicle>]"}, "createHashMap": {"version": "CMD", "tags": "", "description": "Creates a new empty HashMap.", "example": "private _myHashMap = createHashMap;", "docSyntax": "createHashMap", "syntax": "createHashMap"}, "createHashMapFromArray": {"version": "CMD", "tags": "", "description": "Creates a new HashMap and initializes it from a key-value pair array", "example": "createHashMapFromArray [[\"a\", 1], [\"b\", 2], [\"c\", 3]];", "docSyntax": "createHashMapFromArray [[key1, value1], [key2, value2]]", "syntax": "createHashMapFromArray [[key1,value1],[key2,value2]]"}, "createHashMapObject": {"version": "CMD", "tags": "", "description": "Create a HashMap with an Object-Oriented Programming behaviour.", "example": "private _declaration = [ [\"#flags\", [\"sealed\"]], [\"#create\", { hint \"Hello!\" }], [\"#clone\", { hint \"We were copied!\" }], [\"#delete\", { hint \"Goodbye\" }], [\"#str\", { \"My HashMap Object\" }], [\"Method\", { hint \"Method has been called\" }] ]; private _hashMapObject = createHashMapObject [_declaration]; //\u00a0hints \"Hello!\" _hashMapObject call [\"Method\"]; //\u00a0hints \"Method has been called\" hint str _hashMapObject; //\u00a0hints \"My HashMap Object\" private _shallowCopy = _hashMapObject; //\u00a0no hint private _deepCopy = +_hashMapObject; //\u00a0hints \"We were copied!\" //\u00a0at the end of the scope, _hashMapObject is deleted and hints \"Goodbye\"", "docSyntax": "createHashMapObject [classDefinition, constructorArguments]", "syntax": "createHashMapObject [classDefinition,constructorArguments]"}, "createLocation": {"version": "CMD", "tags": "", "description": "Creates a location of the specified class and dimensions at the specified position. Classes are defined in CfgLocationTypes; for possible location types see Location Types.", "example": "_location = createLocation [\"NameVillage\", [4035,2151,10], 100, 100];", "docSyntax": "createLocation [className, position, sizeX, sizeY]", "syntax": "createLocation [className,position,sizeX,sizeY]"}, "createMarker": {"version": "CMD", "tags": "", "description": "Creates a new map marker at the given position. The marker will be created for every connected player as well as all JIP players. The marker name has to be unique; the command will be ignored if a marker with the given name already exists.", "example": "_marker1 = createMarker [\"Marker1\", position player];", "docSyntax": "createMarker [name, position, channel, creator]", "syntax": "createMarker [<string>,position,channel,creator]"}, "createMarkerLocal": {"version": "CMD", "tags": "", "description": "Creates a local marker at the given position - the marker only exists on the machine that created it. The marker name has to be unique, if a marker with the given name exists, the command will be ignored. Use deleteMarkerLocal to delete a local marker.", "example": "_marker = createMarkerLocal [\"Marker1\", position player];", "docSyntax": "createMarkerLocal [name, position, channel, creator]", "syntax": "createMarkerLocal [<string>,position,channel,creator]"}, "createMenu": {"version": "CMD", "tags": "", "description": "Creates a previously added menu.", "example": "-", "docSyntax": "map createMenu index", "syntax": "<objMap> createMenu <scalar>"}, "createMine": {"version": "CMD", "tags": "", "description": "Creates a mine of the given type.", "example": "_mine = createMine [\"APERSMine\", ASLToAGL getPosASL player, [], 3];", "docSyntax": "createMine [type, position, markers, placement]", "syntax": "createMine [type,position,markers,placement]"}, "createMissionDisplay": {"version": "CMD", "tags": "", "description": "Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument \"root\".", "example": "_ChildDisplay = _Rootdisplay createMissionDisplay \"Tutorial\";", "docSyntax": "display createMissionDisplay missionRootDirectoryString", "syntax": "<uiDisplay> createMissionDisplay missionRootDirectoryString"}, "createMPCampaignDisplay": {"version": "CMD", "tags": "", "description": "Create a MP campaign display. The class name must be a mission collection declared in the configs; for example, configFile >> \"CfgMissions\" >> \"MPMissions\" >> \"Apex\"", "example": "findDisplay 46 createMPCampaignDisplay \"Apex\";", "docSyntax": "display createMPCampaignDisplay class", "syntax": "<uiDisplay> createMPCampaignDisplay class"}, "createSimpleObject": {"version": "CMD", "tags": "", "description": "Create object with given shape defined as path to .p3d model. Supported LODs include Geometry, Fire Geometry, Roadway, View Geometry and ShadowVolume. Supported features include collision, texturing, animation, penetration, AI spotting occlusion, and surface specific sounds (like footsteps). Unsupported features include PhysX, damage, AI pathfinding (causes walking through walls), and built-in lights.", "example": "private _pos = player getRelPos [10, 0]; private _tank = createSimpleObject [\"a3\\armor_f_beta\\apc_tracked_01\\apc_tracked_01_rcws_f.p3d\", _pos]; _tank setPos (_pos vectorAdd (getPosWorld _tank vectorDiff (_tank modelToWorld [0,0,0]))); _tank hideSelection [\"zasleh\", true]; _tank hideSelection [\"zasleh2\", true]; _tank hideSelection [\"clan\", true]; _tank animate [\"Wheel_podkoloL3\", 0.5, true]; _tank animate [\"Wheel_podkoloL6\", 0.5, true];", "docSyntax": "createSimpleObject [shapeName, positionWorld, local]", "syntax": "createSimpleObject [shapeName,positionWorld,local]"}, "createSimpleTask": {"version": "CMD", "tags": "", "description": "Creates a new Task and adds it to the Diary.", "example": "_currentTask = player createSimpleTask [\"NewTask\"];", "docSyntax": "unit createSimpleTask [name, parentTask]", "syntax": "<objUnit> createSimpleTask [<string>,parentTask]"}, "createSite": {"version": "CMD", "tags": "", "description": "Create a new site.", "example": "-", "docSyntax": "type createSite pos", "syntax": "type createSite <array>"}, "createSoundSource": {"version": "CMD", "tags": "", "description": "Creates a sound source of the given type (type is the name of the subclass of CfgVehicles which is pointing to the sound defined in CfgSFX). The actual sound object created is of type \"#dynamicsound\" and could be detected with allMissionObjects. If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The sound source is placed inside a circle with this position as its center and placement as its radius. Some of the vanilla classes pre-configured in Arma 3:", "example": "_soundSource = createSoundSource [\"LittleDog\", position player, [], 0];", "docSyntax": "createSoundSource [type, position, markers, placement]", "syntax": "createSoundSource [type,position,markers,placement]"}, "createTarget": {"version": "CMD", "tags": "", "description": "Create a target.", "example": "_target = createTarget [\"targetType\", [0,0,0], 1, 1];", "docSyntax": "obj createTarget [type, position, typeAccuracy, posAccuracy]", "syntax": "<object> createTarget [type,position,typeAccuracy,posAccuracy]"}, "createTask": {"version": "CMD", "tags": "", "description": "Create a new AI task (subtask of parentTask). Type is name of registered task type.", "docSyntax": "teamMember createTask [[type, parentTask], priority, name1, value1, ...]", "syntax": "teamMember createTask [[type,parentTask],priority,name1,value1,...]"}, "createTeam": {"version": "CMD", "tags": "", "description": "Creates a Team and names it.", "example": "_team = createTeam [\"USMC_Team\", \"Fire Team Red\"];", "docSyntax": "createTeam [type, name]", "syntax": "createTeam [type,<string>]"}, "createTrigger": {"version": "CMD", "tags": "", "description": "Creates a trigger of the given type and at the given position. The type must be a class name in CfgNonAIVehicles or CfgVehicles with simulation = detector. An array containing all units that have activated the trigger is available via list triggerobj. Since triggers are Objects, commands such as getPosASL, setPosASL, deleteVehicle etc. work on them.", "example": "_trg = createTrigger [\"EmptyDetector\", getPos player]; _trg setTriggerArea [5, 5, 0, false]; _trg setTriggerActivation [\"CIV\", \"PRESENT\", true]; _trg setTriggerStatements [\"this\", \"hint 'Civilian near player'\", \"hint 'no civilian near'\"];", "docSyntax": "createTrigger [type, position, makeGlobal]", "syntax": "createTrigger [type,position,makeGlobal]"}, "createUnit": {"version": "CMD", "tags": "", "description": "Create a unit of the provided CfgVehicles class.", "example": "_unit = group player createUnit [\"B_RangeMaster_F\", position player, [], 0, \"FORM\"];", "docSyntax": "group createUnit [type, position, markers, placement, special]", "syntax": "<objGroup> createUnit [type,position,markers,placement,special]"}, "createVehicle": {"version": "CMD", "tags": "", "description": "Creates an empty object of given classname type. See Arma 3: Assets / Arma 3: createVehicle/vehicles, or Category:CfgVehicles for earlier games.", "example": "_jeep = \"Jeep\" createVehicle position player;", "docSyntax": "type createVehicle position", "syntax": "type createVehicle position"}, "createVehicleCrew": {"version": "CMD", "tags": "", "description": "Creates vehicle crew corresponding to the provided vehicle's faction. If the vehicle is already occupied, the command will only create missing crew in the existing vehicle's group.", "example": "_veh = createVehicle [\"B_MRAP_01_F\", getMarkerPos \"createVeh\", [], 0, \"NONE\"]; createVehicleCrew _veh;", "docSyntax": "createVehicleCrew vehicle", "syntax": "createVehicleCrew <objVehicle>"}, "createVehicleLocal": {"version": "CMD", "tags": "", "description": "Creates an object of the given type. The Created object is not transferred through network in MP games. netId of such vehicle in multiplayer will be \"0:0\". To disable local vehicle creation, use CfgDisabledCommands to blacklist this command. Alternatively, you can use createSimpleObject with local option enabled where applicable.", "example": "_lightsource = \"#lightpoint\" createVehicleLocal _pos;", "docSyntax": "type createVehicleLocal position", "syntax": "type createVehicleLocal position"}, "crew": {"version": "CMD", "tags": "", "description": "Returns the crew (both dead and alive) of the given vehicle.", "example": "player in (crew _tank);", "docSyntax": "crew vehicleName", "syntax": "crew vehicleName"}, "ctAddHeader": {"version": "CMD", "tags": "", "description": "Adds a header line of controls according to the HeaderTemplate class. It returns an array containing header index and array of created controls in format:", "example": "_array = ctAddHeader _control;", "docSyntax": "ctAddHeader control", "syntax": "ctAddHeader <uiControl>"}, "ctAddRow": {"version": "CMD", "tags": "", "description": "Adds one row of controls according to the RowTemplate class. It returns an array containing row index and array of created controls in a format [<rowIndex>, [<control0>, <control1>...<control n>]].", "example": "_array = ctAddRow _control;", "docSyntax": "ctAddRow control", "syntax": "ctAddRow <uiControl>"}, "ctClear": {"version": "CMD", "tags": "", "description": "Removes all the lines from the RscControlsTable. Returns Nothing.", "example": "ctClear _control;", "docSyntax": "ctClear ctrl", "syntax": "ctClear <uiControl>"}, "ctCurSel": {"version": "CMD", "tags": "", "description": "Returns index of the selected row. Will take only rows, but not headers into account.", "example": "_curSel = ctCurSel _control;", "docSyntax": "ctCurSel ctrl", "syntax": "ctCurSel <uiControl>"}, "ctData": {"version": "CMD", "tags": "", "description": "Returns metadata associated with a particular row of a CT_CONTROLS_TABLE control.", "example": "private _data = _ctrl ctData 0;", "docSyntax": "ctrl ctData row", "syntax": "<uiControl> ctData <scalar>"}, "ctFindHeaderRows": {"version": "CMD", "tags": "", "description": "Gets array of indices of rows under this header.", "example": "private _indices = _control ctFindHeaderRows 0;", "docSyntax": "ctrl ctFindHeaderRows index", "syntax": "<uiControl> ctFindHeaderRows <scalar>"}, "ctFindRowHeader": {"version": "CMD", "tags": "", "description": "Gets index of the closest header above this row.", "example": "private _index = _control ctFindRowHeader 0;", "docSyntax": "ctrl ctFindRowHeader rowIndex", "syntax": "<uiControl> ctFindRowHeader rowIndex"}, "ctHeaderControls": {"version": "CMD", "tags": "", "description": "Returns array of controls on the header with the given index.", "example": "_array = _control ctHeaderControls 0;", "docSyntax": "ctrl ctHeaderControls index", "syntax": "<uiControl> ctHeaderControls <scalar>"}, "ctHeaderCount": {"version": "CMD", "tags": "", "description": "Returns number of headers (rows not included) in the RscControlsTable.", "example": "ctHeaderCount _control;", "docSyntax": "ctHeaderCount ctrl", "syntax": "ctHeaderCount <uiControl>"}, "ctRemoveHeaders": {"version": "CMD", "tags": "", "description": "Takes array of header indices as a parameter and removes headers with those indices. Indices of remaining headers will be recomputed.", "example": "_control ctRemoveHeaders [0, 1, 2];", "docSyntax": "ctrl ctRemoveHeaders indices", "syntax": "<uiControl> ctRemoveHeaders indices"}, "ctRemoveRows": {"version": "CMD", "tags": "", "description": "Takes array of row indices as a parameter and removes rows with those indices. Indices of remaining rows will be recomputed.", "example": "_control ctRemoveRows [0, 1, 2];", "docSyntax": "ctrl ctRemoveRows [index1, index2, ...]", "syntax": "<uiControl> ctRemoveRows [index1,index2,...]"}, "ctrlActivate": {"version": "CMD", "tags": "", "description": "Launches action attached to given (button based) control. Command ignores control disabled state. (Example 2). Main syntax command only triggers engine-based actions (cancel or ok codes) and will not trigger button related User Interface Event Handlers or buttonAction, use the alternative syntax for this. \"ButtonClick\" UI event handler will also be triggered with the alternative syntax. Use isUIContext to distinguish between scripted activation and user activation.", "example": "ctrlActivate _control;", "docSyntax": "ctrlActivate control", "syntax": "ctrlActivate <uiControl>"}, "ctrlAddEventHandler": {"version": "CMD", "tags": "", "description": "Add an event handler to the given control.", "example": "_map ctrlAddEventHandler [\"draw\", \"_this call BIS_fnc_strategicMapOpen_draw\"];", "docSyntax": "control ctrlAddEventHandler [handler, function]", "syntax": "<uiControl> ctrlAddEventHandler [handler,function]"}, "ctrlAngle": {"version": "CMD", "tags": "", "description": "Gets rotation info of a control set as ST_PICTURE. Supported control types:", "example": "ctrlAngle _control;", "docSyntax": "ctrlAngle control", "syntax": "ctrlAngle <uiControl>"}, "ctrlAnimateModel": {"version": "CMD", "tags": "", "description": "Process an animation of 3D Arma: GUI Configuration. Command uses name defined by source property and works similar like animateSource command.", "example": "_control3D ctrlAnimateModel [\"Close\", 1];", "docSyntax": "control ctrlAnimateModel [source, phase, speed]", "syntax": "<uiControl> ctrlAnimateModel [source,phase,<scalar>]"}, "ctrlAnimationPhaseModel": {"version": "CMD", "tags": "", "description": "Returns current animation phase of given source. Similar to animationSourcePhase.", "example": "private _phase = _control3D ctrlAnimationPhaseModel \"Close\";", "docSyntax": "control ctrlAnimationPhaseModel source", "syntax": "<uiControl> ctrlAnimationPhaseModel source"}, "ctrlAt": {"version": "CMD", "tags": "", "description": "Returns the control at the specified coordinates.", "example": "private _ctrl = _myDisplay ctrlAt [0.5, 0.5];", "docSyntax": "display ctrlAt [x, y]", "syntax": "<uiDisplay> ctrlAt [x,y]"}, "ctrlAutoScrollDelay": {"version": "CMD", "tags": "", "description": "Returns number of seconds auto-scroll will wait before scroll and/or rewind. -2 if scrollbar not present.", "example": "_ctrlDelay = ctrlAutoScrollDelay _ctrlGroup;", "docSyntax": "ctrlAutoScrollDelay control", "syntax": "ctrlAutoScrollDelay <uiControl>"}, "ctrlAutoScrollRewind": {"version": "CMD", "tags": "", "description": "Returns true if auto-scroll should move back to start after it reaches the end.", "example": "_ctrlRewind = ctrlAutoScrollRewind _ctrlGroup;", "docSyntax": "ctrlAutoScrollRewind control", "syntax": "ctrlAutoScrollRewind <uiControl>"}, "ctrlAutoScrollSpeed": {"version": "CMD", "tags": "", "description": "Returns number of seconds to auto-scroll one line. -1 if auto-scroll is disabled. -2 if scrollbar not present.", "example": "_ctrlSpeed = ctrlAutoScrollSpeed _ctrlGroup;", "docSyntax": "ctrlAutoScrollSpeed control", "syntax": "ctrlAutoScrollSpeed <uiControl>"}, "ctrlBackgroundColor": {"version": "CMD", "tags": "", "description": "Returns control's background color.", "example": "ctrlBackgroundColor _control;", "docSyntax": "ctrlBackgroundColor control", "syntax": "ctrlBackgroundColor <uiControl>"}, "ctrlChecked": {"version": "CMD", "tags": "", "description": "Returns the current state of given CT_CHECKBOXES control. Since Arma 3 v1.72 it is possible to query multiple checkboxes by providing checkbox index. For more information see CT_CHECKBOXES.", "example": "ctrlChecked _control;", "docSyntax": "ctrlChecked control", "syntax": "ctrlChecked <uiControl>"}, "ctrlClassName": {"version": "CMD", "tags": "", "description": "Returns the class name of a Control as it is defined in config. If you need config class of a game created Display, it is stored on display itself:", "example": "List class names of all controls present on display 46:", "docSyntax": "ctrlClassName control", "syntax": "ctrlClassName <uiControl>"}, "ctrlCommit": {"version": "CMD", "tags": "", "description": "Commits control animation to last specified duration.", "example": "_control ctrlCommit 2; //\u00a0make animation last approx. 2 seconds", "docSyntax": "control ctrlCommit time", "syntax": "<uiControl> ctrlCommit <scalar>"}, "ctrlCommitted": {"version": "CMD", "tags": "", "description": "Check if the control animation is finished.", "example": "_done = ctrlCommitted _control;", "docSyntax": "ctrlCommitted controlName", "syntax": "ctrlCommitted controlName"}, "ctrlCreate": {"version": "CMD", "tags": "", "description": "Creates a new control in the given display.", "example": "_display ctrlCreate [\"RscText\", 1234];", "docSyntax": "display ctrlCreate [class, idc, controlsGroup]", "syntax": "<uiDisplay> ctrlCreate [class,<scalar>,controlsGroup]"}, "ctrlDelete": {"version": "CMD", "tags": "", "description": "Deletes given control. The control has to be created either by script with ctrlCreate or to have deletable property in config set to 1. Use ctrlShow false and ctrlEnable false to disable controls that cannot be deleted. Returns Boolean indicating whether the deletion was successful.", "example": "ctrlDelete ((findDisplay 20000) displayCtrl 20001);", "docSyntax": "ctrlDelete control", "syntax": "ctrlDelete <uiControl>"}, "ctrlEnable": {"version": "CMD", "tags": "", "description": "Enables or disables a control of the currently active user dialog. Disabled controls cannot be clicked onto. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "ctrlEnable [100, false];", "docSyntax": "ctrlEnable [idc, enable]", "syntax": "ctrlEnable [<scalar>,<bool>]"}, "ctrlEnabled": {"version": "CMD", "tags": "", "description": "Returns if a control on the currently active user dialog is enabled. Disabled controls cannot be focused. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "if !(ctrlEnabled 100) then { ctrlEnable [100, true]; };", "docSyntax": "ctrlEnabled idc", "syntax": "ctrlEnabled <scalar>"}, "ctrlFade": {"version": "CMD", "tags": "", "description": "Returns the current fade factor of control.", "example": "_scale = ctrlFade _control;", "docSyntax": "ctrlFade controlName", "syntax": "ctrlFade controlName"}, "ctrlFontHeight": {"version": "CMD", "tags": "", "description": "Returns control's font size, usually sizeEx value (see ctrlSetFontHeight).", "example": "ctrlFontHeight _control;", "docSyntax": "ctrlFontHeight control", "syntax": "ctrlFontHeight <uiControl>"}, "ctrlForegroundColor": {"version": "CMD", "tags": "", "description": "Returns control's foreground color.", "example": "ctrlForegroundColor _control;", "docSyntax": "ctrlForegroundColor control", "syntax": "ctrlForegroundColor <uiControl>"}, "ctrlHTMLLoaded": {"version": "CMD", "tags": "", "description": "Returns true when HTML content was successfully loaded.", "example": "_control htmlLoad \"test.html\"; if (!ctrlHTMLLoaded _control) then { hint \"Loading test.html failed!\"; };", "docSyntax": "ctrlHTMLLoaded control", "syntax": "ctrlHTMLLoaded <uiControl>"}, "ctrlIDC": {"version": "CMD", "tags": "", "description": "Returns control IDC.", "example": "ctrlIDC _ctrl;", "docSyntax": "ctrlIDC control", "syntax": "ctrlIDC <uiControl>"}, "ctrlIDD": {"version": "CMD", "tags": "", "description": "Returns display IDD.", "example": "ctrlIDD findDisplay 46; //46", "docSyntax": "ctrlIDD display", "syntax": "ctrlIDD <uiDisplay>"}, "ctrlMapAnimAdd": {"version": "CMD", "tags": "", "description": "Adds the next frame to the map animation.", "example": "_map ctrlMapAnimAdd [1, 0.1, getMarkerPos \"anim1\"]; ctrlMapAnimCommit _map;", "docSyntax": "map ctrlMapAnimAdd [time, zoom, position]", "syntax": "<objMap> ctrlMapAnimAdd [<scalar>,<scalar>,position]"}, "ctrlMapAnimClear": {"version": "CMD", "tags": "", "description": "Clears the map animation.", "example": "ctrlMapAnimClear _ctrlMap;", "docSyntax": "ctrlMapAnimClear controlName", "syntax": "ctrlMapAnimClear controlName"}, "ctrlMapAnimCommit": {"version": "CMD", "tags": "", "description": "Plays the map animation.", "example": "Center map on player:", "docSyntax": "ctrlMapAnimCommit mapControl", "syntax": "ctrlMapAnimCommit mapControl"}, "ctrlMapAnimDone": {"version": "CMD", "tags": "", "description": "Checks whether the map animation has finished.", "example": "_isDone = ctrlMapAnimDone _ctrlMap;", "docSyntax": "ctrlMapAnimDone controlName", "syntax": "ctrlMapAnimDone controlName"}, "ctrlMapCursor": {"version": "CMD", "tags": "", "description": "Changes the default cursor that appears when interacting with a map control to a custom one. Use an empty string to restore the default cursor.", "example": "_map ctrlMapCursor [\"Track\", \"Arrow\"];", "docSyntax": "control ctrlMapCursor [defaultCursor, newCursor]", "syntax": "<uiControl> ctrlMapCursor [defaultCursor,newCursor]"}, "ctrlMapDir": {"version": "CMD", "tags": "", "description": "Returns the current orientation angle of the map control in degrees.", "example": "private _mapControl = findDisplay 12 displayCtrl 51; //\u00a0get the map private _dir = ctrlMapDir _mapControl; //\u00a0returns 0 as the main map does not autorotate", "docSyntax": "ctrlMapDir ctrl", "syntax": "ctrlMapDir <uiControl>"}, "ctrlMapMouseOver": {"version": "CMD", "tags": "", "description": "Returns description of map sign mouse cursor is over. Works with in-game map as well as 2D editor map in edit mode.", "example": "(uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_overFriendly\"]; _mouseover = if (count (ctrlMapMouseOver (uiNamespace getVariable \"_map\")) > 0) then { ctrlMapMouseOver (uiNamespace getVariable \"_map\") } else { [\"\"] }; if (_mouseover select 0 == \"task\" && str(_logic getVariable \"onTaskAssigned\") != str{}) then { //--- Task (uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_overMission\"]; } else { //--- Waypoint (uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_move\"]; };", "docSyntax": "ctrlMapMouseOver control", "syntax": "ctrlMapMouseOver <uiControl>"}, "ctrlMapPosition": {"version": "CMD", "tags": "", "description": "A getter for ctrlMapSetPosition. Returns map position in format [x, y, w, h]. If map is inside a Controls Group, the x and y position is relative to the Controls Group top left corner.", "example": "ctrlMapPosition _map;", "docSyntax": "ctrlMapPosition map", "syntax": "ctrlMapPosition <objMap>"}, "ctrlMapScale": {"version": "CMD", "tags": "", "description": "Returns the current scale of given map control.", "example": "_control = (findDisplay 12) displayCtrl 51; //Arma 3 _scale = ctrlMapScale _control; //returns number from 1 to 0.001", "docSyntax": "ctrlMapScale ctrl", "syntax": "ctrlMapScale <uiControl>"}, "ctrlMapScreenToWorld": {"version": "CMD", "tags": "", "description": "Converts map screen coordinates into world coordinates. Unlike posScreenToWorld, this command returns world position is format [x, y], otherwise it is identical to posScreenToWorld.", "example": "_worldCoord = _control ctrlMapScreenToWorld _ScreenCoord;", "docSyntax": "control ctrlMapScreenToWorld [x, y]", "syntax": "<uiControl> ctrlMapScreenToWorld [x,y]"}, "ctrlMapSetPosition": {"version": "CMD", "tags": "", "description": "Sets position and size of the given map control and recalculates control center. The effect is immediate and no ctrlCommit is necessary, unlike with ctrlSetPosition command.", "example": "_map ctrlMapSetPosition [0,0,1,1];", "docSyntax": "map ctrlMapSetPosition [x, y, w, h]", "syntax": "<objMap> ctrlMapSetPosition [x,y,w,h]"}, "ctrlMapWorldToScreen": {"version": "CMD", "tags": "", "description": "Converts world coordinates into map screen coordinates. This command is identical to posWorldToScreen.", "example": "_screenCoord = _control ctrlMapWorldToScreen _worldCoord;", "docSyntax": "control ctrlMapWorldToScreen position", "syntax": "<uiControl> ctrlMapWorldToScreen position"}, "ctrlModel": {"version": "CMD", "tags": "", "description": "Returns model used in 3D-Dialog.", "example": "_model = ctrlModel _control3D;", "docSyntax": "ctrlModel control", "syntax": "ctrlModel <uiControl>"}, "ctrlModelDirAndUp": {"version": "CMD", "tags": "", "description": "Returns vectorDir and vectorUp of the model used in 3D-Dialogs.", "example": "_vectorDirAndUp = ctrlModelDirAndUp _control3D;", "docSyntax": "ctrlModelDirAndUp control", "syntax": "ctrlModelDirAndUp <uiControl>"}, "ctrlModelScale": {"version": "CMD", "tags": "", "description": "Returns 3D control model scale.", "example": "_currentScale = ctrlModelScale _ctrl3D;", "docSyntax": "ctrlModelScale control", "syntax": "ctrlModelScale <uiControl>"}, "ctrlMousePosition": {"version": "CMD", "tags": "", "description": "Returns position of the mouse on the screen relative to UI Control in UI coordinates. Also works within CT_CONTROLS_GROUPs. In that case, returned position is relative to the position of the group.", "example": "private _mouseRelPos = ctrlMousePosition _ctrl;", "docSyntax": "ctrlMousePosition control", "syntax": "ctrlMousePosition <uiControl>"}, "ctrlParent": {"version": "CMD", "tags": "", "description": "Returns the parent Display of the given control. For parent Controls group see ctrlParentControlsGroup.", "example": "_display = ctrlParent _control;", "docSyntax": "ctrlParent control", "syntax": "ctrlParent <uiControl>"}, "ctrlParentControlsGroup": {"version": "CMD", "tags": "", "description": "Returns the parent control of a given child control. If the control is not part of a CT_CONTROLS_GROUP control then controlNull is returned. To return parent Display of the control use ctrlParent.", "example": "_ctrlCombo = _ctrl controlsGroupCtrl 100; //\u00a0control ctrlParentControlsGroup _ctrlCombo; //\u00a0parent control group (_ctrl)", "docSyntax": "ctrlParentControlsGroup ctrl", "syntax": "ctrlParentControlsGroup <uiControl>"}, "ctrlPosition": {"version": "CMD", "tags": "", "description": "Returns the current position of 2D control as [x, y, w, h] array. For 3D control it returns relative [x, y, z].", "example": "_pos = ctrlPosition _control;", "docSyntax": "ctrlPosition controlName", "syntax": "ctrlPosition controlName"}, "ctrlRemoveAllEventHandlers": {"version": "CMD", "tags": "", "description": "Remove all event handlers from the given control.", "example": "_ctrlButton ctrlRemoveAllEventHandlers \"ButtonDown\";", "docSyntax": "control ctrlRemoveAllEventHandlers handlerName", "syntax": "<uiControl> ctrlRemoveAllEventHandlers handlerName"}, "ctrlRemoveEventHandler": {"version": "CMD", "tags": "", "description": "Remove a given event handler from the given control.", "example": "_map ctrlRemoveEventHandler [\"Draw\", _id];", "docSyntax": "control ctrlRemoveEventHandler [type, id]", "syntax": "<uiControl> ctrlRemoveEventHandler [type,<scalar>]"}, "ctrlScale": {"version": "CMD", "tags": "", "description": "Returns the current scale of the control.", "example": "_scale = ctrlScale _control;", "docSyntax": "ctrlScale control", "syntax": "ctrlScale <uiControl>"}, "ctrlScrollValues": {"version": "CMD", "tags": "", "description": "Returns scroll values for current scrollbars in range 0...1 (-1 if not applicable) for the following controls:", "example": "private _scrollvalues = ctrlScrollValues _ctrl;", "docSyntax": "ctrlScrollValues control", "syntax": "ctrlScrollValues <uiControl>"}, "ctrlSetActiveColor": {"version": "CMD", "tags": "", "description": "Sets text color of given control when it is selected.", "example": "_control ctrlSetActiveColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetActiveColor color", "syntax": "<uiControl> ctrlSetActiveColor <scalar>"}, "ctrlSetAngle": {"version": "CMD", "tags": "", "description": "Sets the rotation of a control set as ST_PICTURE. Rotation will be done within the control boundaries, so if the X and Y are given off center, the picture may get clipped by the control boundaries. Only requires ctrlCommit when fourth parameter is set to false. Procedural textures filled controls do not rotate. Supported control types:", "example": "_control ctrlSetAngle [25, 0.5, 0.5];", "docSyntax": "control ctrlSetAngle [angle, centerX, centerY, now]", "syntax": "<uiControl> ctrlSetAngle [angle,centerX,centerY,now]"}, "ctrlSetAutoScrollDelay": {"version": "CMD", "tags": "", "description": "Sets number of second before auto-scroll starts/rewinds. Setter for ctrlAutoScrollDelay.", "example": "_ctrlGroup ctrlSetAutoScrollDelay 5;", "docSyntax": "control ctrlSetAutoScrollDelay delay", "syntax": "<uiControl> ctrlSetAutoScrollDelay <scalar>"}, "ctrlSetAutoScrollRewind": {"version": "CMD", "tags": "", "description": "Defines if scroll should rewind when auto-scroll reach end. Setter for ctrlAutoScrollRewind.", "example": "_ctrlGroup ctrlSetAutoScrollRewind true;", "docSyntax": "control ctrlSetAutoScrollRewind set", "syntax": "<uiControl> ctrlSetAutoScrollRewind set"}, "ctrlSetAutoScrollSpeed": {"version": "CMD", "tags": "", "description": "Sets number of second required to scroll to next line. If speed < 0, auto-scroll is disabled. Setter for ctrlAutoScrollSpeed.", "example": "_ctrlGroup ctrlSetAutoScrollSpeed 0.1;", "docSyntax": "control ctrlSetAutoScrollSpeed speed", "syntax": "<uiControl> ctrlSetAutoScrollSpeed <scalar>"}, "ctrlSetBackgroundColor": {"version": "CMD", "tags": "", "description": "Sets background color of given control. Only affects:", "example": "_control ctrlSetBackgroundColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetBackgroundColor color", "syntax": "<uiControl> ctrlSetBackgroundColor <scalar>"}, "ctrlSetChecked": {"version": "CMD", "tags": "", "description": "Sets checked state of a CT_CHECKBOXES control.", "example": "_control ctrlSetChecked true;", "docSyntax": "control ctrlSetChecked checked", "syntax": "<uiControl> ctrlSetChecked checked"}, "ctrlSetDisabledColor": {"version": "CMD", "tags": "", "description": "Sets the colorDisabled attribute of a control.", "example": "_control ctrlSetDisabledColor [0.5, 0.5, 0.5, 0.5];", "docSyntax": "ctrlSetDisabledColor [idc, color]", "syntax": "ctrlSetDisabledColor [<scalar>,<scalar>]"}, "ctrlSetEventHandler": {"version": "CMD", "tags": "", "description": "\ud83d\udd56", "example": "_control ctrlSetEventHandler [\"KeyDown\", \"\"];", "docSyntax": "controlName ctrlSetEventHandler [handlerName, function]", "syntax": "controlName ctrlSetEventHandler [handlerName,function]"}, "ctrlSetFade": {"version": "CMD", "tags": "", "description": "Sets wanted transparency for control animation. Requires ctrlCommit to commit changes. To hide or show a control instantly, use ctrlShow.", "example": "_control ctrlSetFade 1; _control ctrlCommit 5;", "docSyntax": "controlName ctrlSetFade fade", "syntax": "controlName ctrlSetFade fade"}, "ctrlSetFocus": {"version": "CMD", "tags": "", "description": "Sets the input focus on given control.", "example": "ctrlSetFocus _control;", "docSyntax": "ctrlSetFocus control", "syntax": "ctrlSetFocus <uiControl>"}, "ctrlSetFont": {"version": "CMD", "tags": "", "description": "Sets the font for given control (see available fonts)", "example": "_control ctrlSetFont \"TahomaB\";", "docSyntax": "control ctrlSetFont fontName", "syntax": "<uiControl> ctrlSetFont fontName"}, "ctrlSetFontH1": {"version": "CMD", "tags": "", "description": "Sets H1 font of given HTML control.", "example": "_control ctrlSetFontH1 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH1 fontName", "syntax": "controlName ctrlSetFontH1 fontName"}, "ctrlSetFontH1B": {"version": "CMD", "tags": "", "description": "Sets H1 bold font of given HTML control.", "example": "_control ctrlSetFontH1B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH1B fontName", "syntax": "controlName ctrlSetFontH1B fontName"}, "ctrlSetFontH2": {"version": "CMD", "tags": "", "description": "Sets H2 font of given HTML control", "example": "_control ctrlSetFontH2 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH2 fontName", "syntax": "controlName ctrlSetFontH2 fontName"}, "ctrlSetFontH2B": {"version": "CMD", "tags": "", "description": "Sets H2 bold font of given HTML control.", "example": "_control ctrlSetFontH2B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH2B fontName", "syntax": "controlName ctrlSetFontH2B fontName"}, "ctrlSetFontH3": {"version": "CMD", "tags": "", "description": "Sets H3 font of given HTML control.", "example": "_control ctrlSetFontH3 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH3 fontName", "syntax": "controlName ctrlSetFontH3 fontName"}, "ctrlSetFontH3B": {"version": "CMD", "tags": "", "description": "Sets H3 bold font of given HTML control.", "example": "_control ctrlSetFontH3B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH3B fontName", "syntax": "controlName ctrlSetFontH3B fontName"}, "ctrlSetFontH4": {"version": "CMD", "tags": "", "description": "Sets H4 font of given HTML control.", "example": "_control ctrlSetFontH4 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH4 fontName", "syntax": "controlName ctrlSetFontH4 fontName"}, "ctrlSetFontH4B": {"version": "CMD", "tags": "", "description": "Sets H4 bold font of given HTML control.", "example": "_control ctrlSetFontH4B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH4B fontName", "syntax": "controlName ctrlSetFontH4B fontName"}, "ctrlSetFontH5": {"version": "CMD", "tags": "", "description": "Sets H5 font of given HTML control.", "example": "_control ctrlSetFontH5 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH5 fontName", "syntax": "controlName ctrlSetFontH5 fontName"}, "ctrlSetFontH5B": {"version": "CMD", "tags": "", "description": "Sets H5 bold font of given HTML control.", "example": "_control ctrlSetFontH5B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH5B fontName", "syntax": "controlName ctrlSetFontH5B fontName"}, "ctrlSetFontH6": {"version": "CMD", "tags": "", "description": "Sets H6 font of given HTML control.", "example": "_control ctrlSetFontH6 \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH6 fontName", "syntax": "controlName ctrlSetFontH6 fontName"}, "ctrlSetFontH6B": {"version": "CMD", "tags": "", "description": "Sets H6 bold font of given HTML control.", "example": "_control ctrlSetFontH6B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH6B fontName", "syntax": "controlName ctrlSetFontH6B fontName"}, "ctrlSetFontHeight": {"version": "CMD", "tags": "", "description": "Sets the sizeEx property for most controls as follows:", "example": "_control ctrlSetFontHeight 0.05;", "docSyntax": "control ctrlSetFontHeight size", "syntax": "<uiControl> ctrlSetFontHeight size"}, "ctrlSetFontHeightH1": {"version": "CMD", "tags": "", "description": "Sets H1 font size of given HTML control.", "example": "_control ctrlSetFontHeightH1 0.05;", "docSyntax": "controlName ctrlSetFontHeightH1 height", "syntax": "controlName ctrlSetFontHeightH1 height"}, "ctrlSetFontHeightH2": {"version": "CMD", "tags": "", "description": "Sets H2 font size of given HTML control.", "example": "_control ctrlSetFontHeightH2 0.05;", "docSyntax": "controlName ctrlSetFontHeightH2 height", "syntax": "controlName ctrlSetFontHeightH2 height"}, "ctrlSetFontHeightH3": {"version": "CMD", "tags": "", "description": "Sets H3 font size of given HTML control.", "example": "_control ctrlSetFontHeightH3 0.05;", "docSyntax": "controlName ctrlSetFontHeightH3 height", "syntax": "controlName ctrlSetFontHeightH3 height"}, "ctrlSetFontHeightH4": {"version": "CMD", "tags": "", "description": "Sets H4 font size of given HTML control.", "example": "_control ctrlSetFontHeightH4 0.05;", "docSyntax": "controlName ctrlSetFontHeightH4 height", "syntax": "controlName ctrlSetFontHeightH4 height"}, "ctrlSetFontHeightH5": {"version": "CMD", "tags": "", "description": "Sets H5 font size of given HTML control.", "example": "_control ctrlSetFontHeightH5 0.05;", "docSyntax": "controlName ctrlSetFontHeightH5 height", "syntax": "controlName ctrlSetFontHeightH5 height"}, "ctrlSetFontHeightH6": {"version": "CMD", "tags": "", "description": "Sets H6 font size of given HTML control.", "example": "_control ctrlSetFontHeightH6 0.05;", "docSyntax": "controlName ctrlSetFontHeightH6 height", "syntax": "controlName ctrlSetFontHeightH6 height"}, "ctrlSetFontHeightSecondary": {"version": "CMD", "tags": "", "description": "Sets the font size of the secondary text of given control.", "example": "_control ctrlSetFontHeightSecondary 0.05;", "docSyntax": "ctrl ctrlSetFontHeightSecondary value", "syntax": "<uiControl> ctrlSetFontHeightSecondary <scalar>"}, "ctrlSetFontP": {"version": "CMD", "tags": "", "description": "Sets P font of given HTML control or its size.", "example": "_control ctrlSetFontP \"TahomaB\";", "docSyntax": "control ctrlSetFontP fontOrSize", "syntax": "<uiControl> ctrlSetFontP fontOrSize"}, "ctrlSetFontPB": {"version": "CMD", "tags": "", "description": "Sets P bold font of given HTML control.", "example": "_control ctrlSetFontPB \"TahomaB\";", "docSyntax": "controlName ctrlSetFontPB fontName", "syntax": "controlName ctrlSetFontPB fontName"}, "ctrlSetFontSecondary": {"version": "CMD", "tags": "", "description": "Sets the font size of the secondary text of given control.", "example": "_control ctrlSetFontSecondary \"TahomaB\";", "docSyntax": "ctrl ctrlSetFontSecondary fontClass", "syntax": "<uiControl> ctrlSetFontSecondary fontClass"}, "ctrlSetForegroundColor": {"version": "CMD", "tags": "", "description": "Sets foreground color of the given control.", "example": "_control ctrlSetForegroundColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetForegroundColor color", "syntax": "<uiControl> ctrlSetForegroundColor <scalar>"}, "ctrlSetModel": {"version": "CMD", "tags": "", "description": "Sets model for 3D-Dialogs (see Arma 3: createSimpleObject/objects for a p3d models' list).", "example": "_control3D ctrlSetModel \"\\a3\\Ui_f\\objects\\Compass.p3d\";", "docSyntax": "control ctrlSetModel model", "syntax": "<uiControl> ctrlSetModel model"}, "ctrlSetModelDirAndUp": {"version": "CMD", "tags": "", "description": "Sets orientation of 3D control model. It is similar to setVectorDirAndUp command for an object.", "example": "_ctrl3D ctrlSetModelDirAndUp [[0,1,0],[0,0,1]]; //default orientation", "docSyntax": "control ctrlSetModelDirAndUp dirAndUp", "syntax": "<uiControl> ctrlSetModelDirAndUp dirAndUp"}, "ctrlSetModelScale": {"version": "CMD", "tags": "", "description": "Sets 3D control model scale", "example": "_ctrl3D ctrlSetModelScale 1.5;", "docSyntax": "control ctrlSetModelScale scale", "syntax": "<uiControl> ctrlSetModelScale <scalar>"}, "ctrlSetMousePosition": {"version": "CMD", "tags": "", "description": "Similar to setMousePosition but relative to the given control.", "example": "_control ctrlSetMousePosition [0.5, 0.5];", "docSyntax": "control ctrlSetMousePosition [x, y]", "syntax": "<uiControl> ctrlSetMousePosition [x,y]"}, "ctrlSetPixelPrecision": {"version": "CMD", "tags": "", "description": "Switches mode of pixel precision (rounding) in a given control interface.", "example": "_control ctrlSetPixelPrecision 2; //\u00a0Enables pixel precision of the given control", "docSyntax": "control ctrlSetPixelPrecision mode", "syntax": "<uiControl> ctrlSetPixelPrecision mode"}, "ctrlSetPosition": {"version": "CMD", "tags": "", "description": "Sets wanted position and size for 2D control animation. Width and height are optional. ctrlCommit is required to complete the operation. For 3D control, param is relative [x, y, z] and no ctrlCommit is required as it cannot be animated. If target control is inside a CT_CONTROLS_GROUP, the position needs to be relative to it.", "example": "Move control:", "docSyntax": "controlName ctrlSetPosition [x, y]", "syntax": "controlName ctrlSetPosition [x,y]"}, "ctrlSetPositionH": {"version": "CMD", "tags": "", "description": "Sets the height of a 2D control. ctrlCommit is required to complete the operation.", "example": "_ctrl ctrlSetPositionH 0.5; _ctrl ctrlCommit 1;", "docSyntax": "control ctrlSetPositionH h", "syntax": "<uiControl> ctrlSetPositionH h"}, "ctrlSetPositionW": {"version": "CMD", "tags": "", "description": "Sets the width of a 2D control. ctrlCommit is required to complete the operation.", "example": "_ctrl ctrlSetPositionW 0.5; _ctrl ctrlCommit 1;", "docSyntax": "control ctrlSetPositionW w", "syntax": "<uiControl> ctrlSetPositionW w"}, "ctrlSetPositionX": {"version": "CMD", "tags": "", "description": "Sets horizontal position (x) of the 2D control. ctrlCommit is required to complete the operation.", "example": "_ctrl ctrlSetPositionX 0.5; _ctrl ctrlCommit 1;", "docSyntax": "control ctrlSetPositionX x", "syntax": "<uiControl> ctrlSetPositionX x"}, "ctrlSetPositionY": {"version": "CMD", "tags": "", "description": "Sets vertical position (y) of a 2D control. ctrlCommit is required to complete the operation.", "example": "_ctrl ctrlSetPositionY 0.5; _ctrl ctrlCommit 1;", "docSyntax": "control ctrlSetPositionY y", "syntax": "<uiControl> ctrlSetPositionY y"}, "ctrlSetScale": {"version": "CMD", "tags": "", "description": "Sets scale of a control. Top left corner remains same. This command requires ctrlCommit.", "example": "_control ctrlSetScale 0.5;//\u00a0Makes the control 50% smaller _control ctrlCommit 0;", "docSyntax": "control ctrlSetScale scale", "syntax": "<uiControl> ctrlSetScale <scalar>"}, "ctrlSetScrollValues": {"version": "CMD", "tags": "", "description": "Sets scroll values for current scrollbars in range 0..1 for the following controls:", "example": "_ctrlGrp ctrlSetScrollValues [-1, 0.5];", "docSyntax": "control ctrlSetScrollValues [vScrollValue, hScrollValue]", "syntax": "<uiControl> ctrlSetScrollValues [vScrollValue,hScrollValue]"}, "ctrlSetShadow": {"version": "CMD", "tags": "", "description": "Sets 'shadow' property of the control:", "example": "_control ctrlSetShadow 1;", "docSyntax": "control ctrlSetShadow shadow", "syntax": "<uiControl> ctrlSetShadow shadow"}, "ctrlSetStructuredText": {"version": "CMD", "tags": "", "description": "Set the Structured Text which will be displayed in structured text control.", "example": "_control ctrlSetStructuredText parseText \"First line<img image=data\\isniper.paa /><br />Second line\"", "docSyntax": "control ctrlSetStructuredText structuredText", "syntax": "<uiControl> ctrlSetStructuredText structuredText"}, "ctrlSetText": {"version": "CMD", "tags": "", "description": "Sets the text of a control of the currently active user dialog or display. This command can be used for static texts, buttons, edit lines and active texts as well as for images, where you can use it to set the image path.", "example": "ctrlSetText [100, \"Hello world\"]; //\u00a0for Dialogs", "docSyntax": "ctrlSetText [idc, text]", "syntax": "ctrlSetText [<scalar>,<string>]"}, "ctrlSetTextColor": {"version": "CMD", "tags": "", "description": "Sets text color of given control. Color is in format Color (RGBA). As of Arma 3 v1.40 this command can also be used to change fill-color of a CT_PROGRESS control.", "example": "_control ctrlSetTextColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetTextColor color", "syntax": "<uiControl> ctrlSetTextColor <scalar>"}, "ctrlSetTextColorSecondary": {"version": "CMD", "tags": "", "description": "Sets the secondary text color of a text control.", "example": "_ctrlText ctrlSetTextColorSecondary [1, 0.5, 0.1, 0.5];", "docSyntax": "control ctrlSetTextColorSecondary color", "syntax": "<uiControl> ctrlSetTextColorSecondary <scalar>"}, "ctrlSetTextSecondary": {"version": "CMD", "tags": "", "description": "Sets the secondary text of a text control.", "example": "_ctrlText ctrlSetTextSecondary \"Hello World!\";", "docSyntax": "control ctrlSetTextSecondary text", "syntax": "<uiControl> ctrlSetTextSecondary <string>"}, "ctrlSetTextSelection": {"version": "CMD", "tags": "", "description": "Selects length characters of edit control from the start position and places cursor at the end of selection.", "example": "_control ctrlSetTextSelection [5, 10];", "docSyntax": "control ctrlSetTextSelection [start, length]", "syntax": "<uiControl> ctrlSetTextSelection [start,length]"}, "ctrlSetTooltip": {"version": "CMD", "tags": "", "description": "Sets tooltip text of given control.", "example": "_control ctrlSetTooltip \"tooltip\";", "docSyntax": "control ctrlSetTooltip text", "syntax": "<uiControl> ctrlSetTooltip <string>"}, "ctrlSetTooltipColorBox": {"version": "CMD", "tags": "", "description": "Sets tooltip border color of given control.", "example": "_control ctrlSetTooltipColorBox [1, 0, 0, 1];", "docSyntax": "control ctrlSetTooltipColorBox color", "syntax": "<uiControl> ctrlSetTooltipColorBox <scalar>"}, "ctrlSetTooltipColorShade": {"version": "CMD", "tags": "", "description": "Sets tooltip background color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorShade [1, 0, 0, 1];", "docSyntax": "control ctrlSetTooltipColorShade color", "syntax": "<uiControl> ctrlSetTooltipColorShade <scalar>"}, "ctrlSetTooltipColorText": {"version": "CMD", "tags": "", "description": "Sets tooltip text color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorText [1, 0, 0, 1];", "docSyntax": "display ctrlSetTooltipColorText color", "syntax": "<uiDisplay> ctrlSetTooltipColorText <scalar>"}, "ctrlSetTooltipMaxWidth": {"version": "CMD", "tags": "", "description": "Set maximum width of a control's tooltip.", "example": "private _previousMaxWidth = _myControl ctrlSetTooltipMaxWidth (SafeZoneW / 2);", "docSyntax": "ctrl ctrlSetTooltipMaxWidth width", "syntax": "<uiControl> ctrlSetTooltipMaxWidth width"}, "ctrlSetURL": {"version": "CMD", "tags": "", "description": "Sets URL property of the given control subject to allowedHTMLLoadURIs[] whitelisting in CfgCommands config. Supported controls are:", "example": "_control ctrlSetURL \"http://arma3.com/\";", "docSyntax": "control ctrlSetURL URL", "syntax": "<uiControl> ctrlSetURL URL"}, "ctrlSetURLOverlayMode": {"version": "CMD", "tags": "", "description": "Sets how to handle opening of URL, default browser ot Steam overlay. Possible values:", "example": "_control ctrlSetURLOverlayMode 1;", "docSyntax": "control ctrlSetURLOverlayMode mode", "syntax": "<uiControl> ctrlSetURLOverlayMode mode"}, "ctrlShadow": {"version": "CMD", "tags": "", "description": "Returns 'shadow' property of the control (see ctrlSetShadow).", "example": "_shadow = ctrlShadow _control;", "docSyntax": "ctrlShadow control", "syntax": "ctrlShadow <uiControl>"}, "ctrlShow": {"version": "CMD", "tags": "", "description": "Shows or hides a control. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "ctrlShow [100, false];", "docSyntax": "ctrlShow [idc, show]", "syntax": "ctrlShow [<scalar>,show]"}, "ctrlShown": {"version": "CMD", "tags": "", "description": "Returns whether given control is shown.", "example": "_bool = ctrlShown _ctrl;", "docSyntax": "ctrlShown controlName", "syntax": "ctrlShown controlName"}, "ctrlStyle": {"version": "CMD", "tags": "", "description": "Returns the provided control's style. See Arma: GUI Configuration - Control Styles.", "example": "private _ctrlStyle = ctrlStyle _myControl; private _bitFlags = _ctrlStyle call BIS_fnc_bitflagsToArray; if (2 in _bitFlags) then { hint \"This control has centered text!\"; };", "docSyntax": "ctrlStyle control", "syntax": "ctrlStyle <uiControl>"}, "ctrlText": {"version": "CMD", "tags": "", "description": "Returns the text of a control of the currently active user dialog. This command can be used on static texts, buttons, edit lines and active texts as well as for images, where it returns the image path. Does not work on HTML control and returns empty string \"\". Since Arma 3 v2.05.147765 supported control types are:", "example": "_text = ctrlText 100;", "docSyntax": "ctrlText idc", "syntax": "ctrlText <scalar>"}, "ctrlTextColor": {"version": "CMD", "tags": "", "description": "Returns control's text color in Color (RGBA) format (see ctrlSetTextColor).", "example": "ctrlTextColor _control;", "docSyntax": "ctrlTextColor control", "syntax": "ctrlTextColor <uiControl>"}, "ctrlTextHeight": {"version": "CMD", "tags": "", "description": "Returns the control text height. Supported control types are:", "example": "_h = ctrlTextHeight _ctrl;", "docSyntax": "ctrlTextHeight control", "syntax": "ctrlTextHeight <uiControl>"}, "ctrlTextSecondary": {"version": "CMD", "tags": "", "description": "Returns the secondary text of a text control.", "example": "_secondaryText = ctrlTextSecondary _ctrlText;", "docSyntax": "ctrlTextSecondary control", "syntax": "ctrlTextSecondary <uiControl>"}, "ctrlTextSelection": {"version": "CMD", "tags": "", "description": "Returns edit control text selection in format [start, length, selectedText].", "example": "Selection is made from left to right:", "docSyntax": "ctrlTextSelection control", "syntax": "ctrlTextSelection <uiControl>"}, "ctrlTextWidth": {"version": "CMD", "tags": "", "description": "Returns the width of the control text including left and right margins (0.008 each). Supported control types are:", "example": "private _w = ctrlTextWidth _ctrl;", "docSyntax": "ctrlTextWidth control", "syntax": "ctrlTextWidth <uiControl>"}, "ctrlTooltip": {"version": "CMD", "tags": "", "description": "Returns the tooltip property of a button control. Getter for ctrlSetTooltip.", "example": "ctrlTooltip _control;", "docSyntax": "ctrlTooltip control", "syntax": "ctrlTooltip <uiControl>"}, "ctrlType": {"version": "CMD", "tags": "", "description": "Returns number representing the type of control, which is also defined by type property in config. For more information see Arma: GUI Configuration", "example": "_type = ctrlType _rscEdit; //\u00a02", "docSyntax": "ctrlType control", "syntax": "ctrlType <uiControl>"}, "ctrlURL": {"version": "CMD", "tags": "", "description": "Returns the URL property of a button control. Getter for ctrlSetURL.", "example": "private _ctrlUrl = ctrlURL _control; //\u00a0e.g. \"http://arma3.com/\"", "docSyntax": "ctrlURL control", "syntax": "ctrlURL <uiControl>"}, "ctrlURLOverlayMode": {"version": "CMD", "tags": "", "description": "Returns the URL overlay mode 0, 1, 2 (see ctrlSetURLOverlayMode) or -1 if something went wrong.", "example": "_mode = ctrlURLOverlayMode _control; //\u00a0e.g. 0", "docSyntax": "ctrlURLOverlayMode control", "syntax": "ctrlURLOverlayMode <uiControl>"}, "ctrlVisible": {"version": "CMD", "tags": "", "description": "Returns if a control of the currently active user dialog is shown or not. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "_bool = ctrlVisible 100;", "docSyntax": "ctrlVisible idc", "syntax": "ctrlVisible <scalar>"}, "ctRowControls": {"version": "CMD", "tags": "", "description": "Returns array of controls on the row with the given index.", "example": "_array = _control ctRowControls 0;", "docSyntax": "control ctRowControls index", "syntax": "<uiControl> ctRowControls <scalar>"}, "ctRowCount": {"version": "CMD", "tags": "", "description": "Returns number of rows (headers not included) in the RscControlsTable.", "example": "ctRowCount _control;", "docSyntax": "ctRowCount control", "syntax": "ctRowCount <uiControl>"}, "ctSetCurSel": {"version": "CMD", "tags": "", "description": "Selects the line with the given index. Will take only rows, but not headers into account. -1 deselects all. Returns Nothing.", "example": "_control ctSetCurSel 0;", "docSyntax": "control ctSetCurSel index", "syntax": "<uiControl> ctSetCurSel <scalar>"}, "ctSetData": {"version": "CMD", "tags": "", "description": "Associates metadata (string) with the row determined by the index. Returns Nothing.", "example": "_control ctSetData [0, \"Test\"];", "docSyntax": "ctrl ctSetData [index, data]", "syntax": "<uiControl> ctSetData [<scalar>,data]"}, "ctSetHeaderTemplate": {"version": "CMD", "tags": "", "description": "Takes config path to the new header template. Clears the whole RscControlsTable and sets the new header template.", "example": "_control ctSetHeaderTemplate _configPath;", "docSyntax": "control ctSetHeaderTemplate config", "syntax": "<uiControl> ctSetHeaderTemplate config"}, "ctSetRowTemplate": {"version": "CMD", "tags": "", "description": "Takes config path to the new row template. Clears the whole RscControlsTable and sets the new row template (Deleting all rows and headers is easier to implement than replacing the rows and filling them with new data. IDCs could overflow etc.).", "example": "_control ctSetRowTemplate _configPath;", "docSyntax": "control ctSetRowTemplate config", "syntax": "<uiControl> ctSetRowTemplate config"}, "ctSetValue": {"version": "CMD", "tags": "", "description": "Associates metadata (number) with the row determined by the index. Returns Nothing.", "example": "_control ctSetValue [0, 23];", "docSyntax": "control ctSetValue [index, value]", "syntax": "<uiControl> ctSetValue [<scalar>,<scalar>]"}, "ctValue": {"version": "CMD", "tags": "", "description": "Returns metadata (number) associated with a particular row of RscControlsTable.", "example": "_number = _control ctValue 0;", "docSyntax": "control ctValue index", "syntax": "<uiControl> ctValue <scalar>"}, "curatorAddons": {"version": "CMD", "tags": "", "description": "Returns list of addons allowed to given curator. The addon names are not guaranteed to be all lower case", "example": "private _addons = curatorAddons myCurator;", "docSyntax": "curatorAddons curatorObj", "syntax": "curatorAddons <objCurator>"}, "curatorCamera": {"version": "CMD", "tags": "", "description": "Returns curator camera object.", "example": "_camCurator = curatorCamera;", "docSyntax": "curatorCamera", "syntax": "curatorCamera"}, "curatorCameraArea": {"version": "CMD", "tags": "", "description": "Returns all curator camera areas.", "example": "_camArea = curatorCameraArea myCurator; //\u00a0[[8052,[4027.36,4024.89,0],250]]", "docSyntax": "curatorCameraArea curatorObj", "syntax": "curatorCameraArea <objCurator>"}, "curatorCameraAreaCeiling": {"version": "CMD", "tags": "", "description": "Returns ceiling height for curator camera.", "example": "private _height = curatorCameraAreaCeiling BIS_curatorUnit;", "docSyntax": "curatorCameraAreaCeiling curatorObj", "syntax": "curatorCameraAreaCeiling <objCurator>"}, "curatorCoef": {"version": "CMD", "tags": "", "description": "Returns current coeficient setting.", "example": "curatorModule curatorCoef \"Place\";", "docSyntax": "curatorObj curatorCoef action", "syntax": "<objCurator> curatorCoef action"}, "curatorEditableObjects": {"version": "CMD", "tags": "", "description": "Returns all editable objects which belong to a curator.", "example": "_objects = curatorEditableObjects myCurator;", "docSyntax": "curatorEditableObjects curatorObj", "syntax": "curatorEditableObjects <objCurator>"}, "curatorEditingArea": {"version": "CMD", "tags": "", "description": "Returns all curator editing areas.", "example": "_editingAreas = curatorEditingArea myCurator;", "docSyntax": "curatorEditingArea curator", "syntax": "curatorEditingArea curator"}, "curatorEditingAreaType": {"version": "CMD", "tags": "", "description": "Returns type of edit areas assigned to curator (blacklist/whitelist).", "example": "_isBlacklist = curatorEditingAreaType _curator;", "docSyntax": "curatorEditingAreaType curator", "syntax": "curatorEditingAreaType curator"}, "curatorMouseOver": {"version": "CMD", "tags": "", "description": "Returns Curator Editable Object under curator mouse pointer.", "example": "_mouseOver = curatorMouseOver; //\u00a0Possible return value: [\"OBJECT\", 3594ab00# 164218: apc_wheeled_01_cannon_f.p3d]", "docSyntax": "curatorMouseOver", "syntax": "curatorMouseOver"}, "curatorPoints": {"version": "CMD", "tags": "", "description": "Returns number of points that curator have. Points can be only in range from 0 to 1.", "example": "_points = curatorPoints myCurator;", "docSyntax": "curatorPoints curatorObj", "syntax": "curatorPoints <objCurator>"}, "curatorRegisteredObjects": {"version": "CMD", "tags": "", "description": "Returns array with all objects that has curator registered and their settings.", "example": "curatorRegisteredObjects _curatorModule;", "docSyntax": "curatorRegisteredObjects curator", "syntax": "curatorRegisteredObjects curator"}, "curatorSelected": {"version": "CMD", "tags": "", "description": "Returns list of all curator selected items.", "example": "selectedItems = curatorSelected;", "docSyntax": "curatorSelected", "syntax": "curatorSelected"}, "curatorSelectionPreset": {"version": "CMD", "tags": "", "description": "Returns list of all objects stored in the given selection preset.", "example": "private _savedItems = curatorSelectionPreset 1;", "docSyntax": "curatorSelectionPreset numkey", "syntax": "curatorSelectionPreset numkey"}, "curatorWaypointCost": {"version": "CMD", "tags": "", "description": "Return current price for placing waypoints (curator specific).", "example": "var_wpcost = curatorWaypointCost bis_curator;", "docSyntax": "curatorWaypointCost curatorObj", "syntax": "curatorWaypointCost <objCurator>"}, "current3DENOperation": {"version": "CMD", "tags": "", "description": "Returns the currently performed editing operation in Eden Editor.", "example": "if (current3DENOperation == \"MoveItems\") then { hint \"Moving things are we\"; };", "docSyntax": "current3DENOperation", "syntax": "current3DENOperation"}, "currentChannel": {"version": "CMD", "tags": "", "description": "Returns currently selected user chat channel on the UI (selected with < and > in multiplayer).", "example": "_selected = currentChannel; //\u00a03 for the Group channel", "docSyntax": "currentChannel", "syntax": "currentChannel"}, "currentCommand": {"version": "CMD", "tags": "", "description": "Return the current command type (empty string when no command) for the commander of given vehicle (or for a given soldier). Returned value can be one of:", "example": "_command = currentCommand player;", "docSyntax": "currentCommand vehicleName", "syntax": "currentCommand vehicleName"}, "currentMagazine": {"version": "CMD", "tags": "", "description": "Returns class name of currently loaded vehicle's / unit's magazine.", "example": "_magazineClass = currentMagazine player;//Example: \"30Rnd_545x39_AK\"", "docSyntax": "currentMagazine vehicle", "syntax": "currentMagazine <objVehicle>"}, "currentMagazineDetail": {"version": "CMD", "tags": "", "description": "Returns description of vehicle's currently loaded magazine, its ammo count (current/default) and its id.", "example": "_currentMagazineDetail = currentMagazineDetail player; //\u00a0\"6.5mm 30Rnd STANAG Mag(30/30)[id:0]\"", "docSyntax": "currentMagazineDetail object", "syntax": "currentMagazineDetail <object>"}, "currentMagazineDetailTurret": {"version": "CMD", "tags": "", "description": "Returns the class name of currently used magazine on specified turret. Use turret path [-1] for driver's turret. Note that a turret is not loaded until unit enters it, so this command will return \"\".", "example": "_magazineDetail = MBT_Kuma currentMagazineDetailTurret [0];", "docSyntax": "vehicle currentMagazineDetailTurret turretPath", "syntax": "<objVehicle> currentMagazineDetailTurret turretPath"}, "currentMagazineTurret": {"version": "CMD", "tags": "", "description": "Returns the name of the type of the currently using magazine on specified turret. Use turret path [-1] for driver's turret. Note that a turret is not loaded until unit enters it, so this command will return \"\".", "example": "_magazine = MBT_Kuma currentMagazineTurret [0];", "docSyntax": "vehicle currentMagazineTurret turretPath", "syntax": "<objVehicle> currentMagazineTurret turretPath"}, "currentMuzzle": {"version": "CMD", "tags": "", "description": "Returns a unit's current weapon muzzle. Does not work on vehicles.", "example": "_muzzle = currentMuzzle player;", "docSyntax": "currentMuzzle unit", "syntax": "currentMuzzle <objUnit>"}, "currentNamespace": {"version": "CMD", "tags": "", "description": "Returns the current global namespace the script runs in.", "example": "if (currentNamespace isEqualTo uiNamespace) then { hint \"This is uiNamespace\" };", "docSyntax": "currentNamespace", "syntax": "currentNamespace"}, "currentPilot": {"version": "CMD", "tags": "", "description": "Returns the person piloting the vehicle. If co-pilot is piloting, co-pilot is returned. If you need current pilot of a UAV or UGV, see UAVControl command.", "example": "if (currentPilot _vehicle != driver _vehicle) then { hint \"The pilot is not piloting!\"; };", "docSyntax": "currentPilot vehicle", "syntax": "currentPilot <objVehicle>"}, "currentTask": {"version": "CMD", "tags": "", "description": "Return current task of given person.", "example": "_currTask = currentTask player;", "docSyntax": "currentTask person", "syntax": "currentTask <objUnit>"}, "currentTasks": {"version": "CMD", "tags": "", "description": "Returns array with all uncompleted tasks for the given agent. getVariable could be used on Task to get the following special local variables from the task:", "example": "currentTasks teamMember _agent;", "docSyntax": "currentTasks teamMember", "syntax": "currentTasks teamMember"}, "currentThrowable": {"version": "CMD", "tags": "", "description": "Returns currently selected throwable (and the muzzle it is loaded into), which will be launched if the user presses G.", "example": "currentThrowable player; //\u00a0[\"SmokeShellGreen\", \"SmokeShellGreenMuzzle\", [1.00002e+007, 0]]", "docSyntax": "currentThrowable unit", "syntax": "currentThrowable <objUnit>"}, "currentVisionMode": {"version": "CMD", "tags": "", "description": "Returns current vision mode of unit's weapon. Vision mode could be one of:", "example": "_visionMode = currentVisionMode gunner _tank;", "docSyntax": "currentVisionMode entity", "syntax": "currentVisionMode entity"}, "currentWaypoint": {"version": "CMD", "tags": "", "description": "Returns the index of the current waypoint contrary to misleading name. To determine the validity of the index, compare it to the waypoints count. If all waypoints are completed, then the index is 1 greater than the last valid index. If there are no waypoints, then the index is 0. By default, a group has 1 waypoint at their starting position, which is considered completed and so the currentWaypoint is 1.", "example": "_index = currentWaypoint group player;", "docSyntax": "currentWaypoint groupName", "syntax": "currentWaypoint groupName"}, "currentWeapon": {"version": "CMD", "tags": "", "description": "Return the name of the currently selected weapon (on the primary turret for vehicles).", "example": "_weaponClass = currentWeapon (vehicle player);//Example: \"M16A2GL\"", "docSyntax": "currentWeapon vehicle", "syntax": "currentWeapon <objVehicle>"}, "currentWeaponMode": {"version": "CMD", "tags": "", "description": "Returns current weapon mode of unit's weapon. Result can be: \"Single\", \"Burst\", \"FullAuto\", \"manual\", \"player\"", "example": "_weaponMode = currentWeaponMode player;", "docSyntax": "currentWeaponMode gunner", "syntax": "currentWeaponMode gunner"}, "currentWeaponTurret": {"version": "CMD", "tags": "", "description": "Returns the name of the currently selected weapon on specified turret. Use turret path [-1] for driver's turret.", "example": "_weapon = MBT_Kuma currentWeaponTurret [0];", "docSyntax": "vehicle currentWeaponTurret turretPath", "syntax": "<objVehicle> currentWeaponTurret turretPath"}, "currentZeroing": {"version": "CMD", "tags": "", "description": "Returns current zeroing.", "example": "private _zeroing = currentZeroing player;", "docSyntax": "currentZeroing object", "syntax": "currentZeroing <object>"}, "customChat": {"version": "CMD", "tags": "", "description": "Sends the chat message to the custom radio channel. The radio channel needs to be created on the server before hand, with radioChannelCreate command.", "example": "_unit customChat [1, \"Hi, I am a custom chat message\"];", "docSyntax": "unit customChat [customChannelID, message]", "syntax": "<objUnit> customChat [customChannelID,message]"}, "customRadio": {"version": "CMD", "tags": "", "description": "Sends the message to the custom radio channel. The message is defined in the description.ext file or radio protocol.", "example": "_soldierOne customRadio [1, \"WordEnemy\"];", "docSyntax": "unit customRadio [customChannelID, message]", "syntax": "<objUnit> customRadio [customChannelID,message]"}, "customWaypointPosition": {"version": "CMD", "tags": "", "description": "Returns player's custom waypoint (\u21e7 Shift + ) position.", "example": "if (customWaypointPosition isNotEqualTo []) then { hint format [\"You are %1m away from your custom waypoint.\", round (player distance customWaypointPosition)]; };", "docSyntax": "customWaypointPosition", "syntax": "customWaypointPosition"}, "cutFadeOut": {"version": "CMD", "tags": "", "description": "Terminates the effect in the given layer by fading it out according to the given duration. If named layer is used and it doesn't exist, it will be allocated. For title layer see titleFadeOut.", "example": "0 cutFadeOut 2;", "docSyntax": "layer cutFadeOut duration", "syntax": "layer cutFadeOut duration"}, "cutObj": {"version": "CMD", "tags": "", "description": "Displays an object defined in the global config in CfgTitles.", "example": "cutObj [\"TVSet\", \"PLAIN\"]; cutObj [\"TVSet\", \"PLAIN\", 2];", "docSyntax": "cutObj [class, type, speed, showInMap, drawOverHUD]", "syntax": "cutObj [class,type,<scalar>,showInMap,drawOverHUD]"}, "cutRsc": {"version": "CMD", "tags": "", "description": "Display a resource defined in RscTitles of the mission's Description.ext, the campaign's description.ext or the global config.", "example": "cutRsc [\"binocular\", \"PLAIN\"]; cutRsc [\"binocular\", \"PLAIN\", 2]; cutRsc [\"binocular\", \"PLAIN\", 2, false];", "docSyntax": "cutRsc [class, effect, speed, showInMap, drawOverHUD]", "syntax": "cutRsc [class,effect,<scalar>,showInMap,drawOverHUD]"}, "cutText": {"version": "CMD", "tags": "", "description": "Displays a text message in the center of the screen. The text can be displayed on multiple lines by using \"\\n\" new line characters: cutText [\"line1\\nline2\\nline3\", \"PLAIN\"];", "example": "cutText [\"\", \"BLACK OUT\"]; cutText [\"Hello World!\", \"PLAIN\", 2];", "docSyntax": "cutText [text, type, speed, showInMap, isStructuredText, drawOverHUD]", "syntax": "cutText [<string>,type,<scalar>,showInMap,isStructuredText,drawOverHUD]"}, "damage": {"version": "CMD", "tags": "", "description": "Return the damage value of an object.", "example": "? damage player > 0.1 : player groupChat \"I'm hurt! Medic!\"", "docSyntax": "damage object", "syntax": "<scalar> <object>"}, "date": {"version": "CMD", "tags": "", "description": "Return the actual in-mission date and time.", "example": "//\u00a0in Arma 3 date params [\"_year\", \"_month\", \"_day\", \"_hours\", \"_minutes\"]; //\u00a0pre Arma 3 _now = date; //\u00a0[2014,10,30,2,30] a.k.a Oct. 30th, 2:30am _year = _now select 0; _month = _now select 1; _day = _now select 2; _hours = _now select 3; _minutes = _now select 4;", "docSyntax": "date", "syntax": "date"}, "dateToNumber": {"version": "CMD", "tags": "", "description": "Convert a date to a float number, based on Jan 1st 00:00:00 = 0 and Dec 31st 23:59:59 = 1. The same day and time in leap year will be different after 28th of February and 23:59 on 31st of December will be 1.00274.", "example": "_float = dateToNumber [2035,7,6,12,0]; //\u00a00.510959", "docSyntax": "dateToNumber date", "syntax": "dateToNumber date"}, "dayTime": {"version": "CMD", "tags": "", "description": "Returns the current in-game time in hours. For a formatted version of time, see BIS_fnc_timeToString.", "example": "dayTime; //\u00a0returns 16.5 given it is 16:30 (4.30pm) in game", "docSyntax": "dayTime", "syntax": "dayTime"}, "deActivateKey": {"version": "CMD", "tags": "", "description": "Deactivates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the description.ext file of the missions.", "example": "deActivateKey \"Mission04Key\";", "docSyntax": "deActivateKey keyname", "syntax": "deActivateKey keyname"}, "debriefingText": {"version": "CMD", "tags": "", "description": "Returns debriefing text of provided end.", "example": "_deathText = debriefingText \"endDeath\";", "docSyntax": "debriefingText end", "syntax": "debriefingText end"}, "debugFSM": {"version": "CMD", "tags": "", "description": "Dump (something about FSM) to debugging output. This command is (assumed to be) non-functional in the retail version.", "example": "-", "docSyntax": "FSMhandle debugFSM true", "syntax": "FSMhandle debugFSM <bool>"}, "debugLog": {"version": "CMD", "tags": "", "description": "Dump argument type and value to debugging output.", "example": "debugLog player;", "docSyntax": "debugLog anything", "syntax": "debugLog anything"}, "decayGraphValues": {"version": "CMD", "tags": "", "description": "Multiplies graph values by the given coefficient. The corresponding lower bound value is used instead if the product is smaller than the bound.", "example": "decayGraphValues [[1,2,3,4,5], [1,4,9,16,25], 0.3]; //\u00a0returns [1,2,3,4.8,7.5]", "docSyntax": "decayGraphValues [lowerBoundValues, graphValues, coef]", "syntax": "decayGraphValues [lowerBoundValues,graphValues,<scalar>]"}, "deg": {"version": "CMD", "tags": "", "description": "Converts given value in radians to degrees. 1 degree equals 0.01745 radians or pi / 180.", "example": "_degrees = deg 1; //\u00a0Returns 57.2958", "docSyntax": "deg value", "syntax": "deg <scalar>"}, "delete3DENEntities": {"version": "CMD", "tags": "", "description": "Delete given entities in Eden Editor.", "example": "delete3DENEntities (all3DENEntities select 0); //\u00a0Removes all objects", "docSyntax": "delete3DENEntities entities", "syntax": "delete3DENEntities entities"}, "deleteAt": {"version": "CMD", "tags": "", "description": "Removes array element at the given index and returns removed element (modifies the original array, just like resize or set).", "example": "_arr = [1,2,3]; _rem = _arr deleteAt 1; hint str [_rem, _arr]; //\u00a0[2, [1, 3]]", "docSyntax": "array deleteAt index", "syntax": "<array> deleteAt <scalar>"}, "deleteCenter": {"version": "CMD", "tags": "", "description": "In a nutshell, this command removes gaming Side (see createCenter). If a side has >0 Groups it cannot be deleted. Center can only be created for: east, west, resistance, civilian and sideLogic, therefore only centers from the mentioned sides can be deleted.", "example": "deleteCenter east;", "docSyntax": "deleteCenter side", "syntax": "deleteCenter <objSide>"}, "deleteCollection": {"version": "CMD", "tags": "", "description": "Delete a collection. As example, used with a soldier, it'll hide the ingame model. When targetting Arma 2 1.06 or newer, use hideObject instead. This function is a relic from dynamic building destruction development. It is left only for compatibility with scripts created before Arma 2 1.06, and its functionality may be changed or removed in the future.", "example": "deleteCollection unitName;", "docSyntax": "deleteCollection object", "syntax": "deleteCollection <object>"}, "deleteEditorObject": {"version": "CMD", "tags": "", "description": "Delete the editor object. Requires all editor object links to be removed prior.", "example": "-", "docSyntax": "map deleteEditorObject object", "syntax": "<objMap> deleteEditorObject <object>"}, "deleteGroup": {"version": "CMD", "tags": "", "description": "Destroys the given group - the group must be empty and local to the machine executing this command.", "example": "deleteGroup _group;", "docSyntax": "deleteGroup group", "syntax": "deleteGroup <objGroup>"}, "deleteGroupWhenEmpty": {"version": "CMD", "tags": "", "description": "Marks given group for auto-deletion when group is empty. true will mark the group for auto-deletion once empty, false will simply unmark the group that was marked previously.", "example": "_group deleteGroupWhenEmpty true;", "docSyntax": "group deleteGroupWhenEmpty delete", "syntax": "<objGroup> deleteGroupWhenEmpty delete"}, "deleteIdentity": {"version": "CMD", "tags": "", "description": "Deletes an identity created with saveIdentity from the campaign's progress file.", "example": "_deleted = deleteIdentity \"playerIdentity\";", "docSyntax": "deleteIdentity identityName", "syntax": "deleteIdentity identityName"}, "deleteLocation": {"version": "CMD", "tags": "", "description": "Deletes scripted location.", "example": "deleteLocation myLocation;", "docSyntax": "deleteLocation location", "syntax": "deleteLocation location"}, "deleteMarker": {"version": "CMD", "tags": "", "description": "Destroys the given marker.", "example": "deleteMarker \"Marker1\";", "docSyntax": "deleteMarker name", "syntax": "deleteMarker <string>"}, "deleteMarkerLocal": {"version": "CMD", "tags": "", "description": "Destroys the given marker.", "example": "deleteMarkerLocal \"Marker1\";", "docSyntax": "deleteMarkerLocal markerName", "syntax": "deleteMarkerLocal <string>"}, "deleteRange": {"version": "CMD", "tags": "", "description": "Removes a range of array elements from the given array. Modifies the original array, just like resize or set.", "example": "_arr = [1,2,3,4,5,6]; _arr deleteRange [1,4]; hint str _arr; //\u00a0[1,6]", "docSyntax": "array deleteRange [from, count]", "syntax": "<array> deleteRange [from,count]"}, "deleteResources": {"version": "CMD", "tags": "", "description": "Delete (unregister) resources of the team member. Resources are deleted in the order they were added. Case insensitive.", "example": "teamMember _agent deleteResources [\"Legs\"];", "docSyntax": "teamMember deleteResources resources", "syntax": "teamMember deleteResources resources"}, "deleteSite": {"version": "CMD", "tags": "", "description": "Removes the site.", "example": "-", "docSyntax": "deleteSite site", "syntax": "deleteSite site"}, "deleteStatus": {"version": "CMD", "tags": "", "description": "Deletes a status created with saveStatus from the campaign's progress file.", "example": "_deleted = deleteStatus \"playerStatus\";", "docSyntax": "deleteStatus statusName", "syntax": "deleteStatus statusName"}, "deleteTarget": {"version": "CMD", "tags": "", "description": "Delete a target.", "example": "deleteTarget target1;", "docSyntax": "deleteTarget target", "syntax": "deleteTarget <object>"}, "deleteTeam": {"version": "CMD", "tags": "", "description": "Destroy given team.", "example": "deleteTeam _team;", "docSyntax": "deleteTeam team", "syntax": "deleteTeam team"}, "deleteVehicle": {"version": "CMD", "tags": "", "description": "Deletes an object. Only objects inserted in the mission editor and objects created during the game's progress can be deleted by this command. Terrain objects and players cannot be deleted.", "example": "deleteVehicle _house1;", "docSyntax": "deleteVehicle object", "syntax": "deleteVehicle <object>"}, "deleteVehicleCrew": {"version": "CMD", "tags": "", "description": "Deletes a member of or the whole crew of a vehicle. Human players cannot be deleted.", "example": "//\u00a0delete when knowing the vehicle _helicopter deleteVehicleCrew driver _helicopter; //\u00a0delete when only knowing the unit //\u00a0vehicle _soldier deleteVehicleCrew _soldier; // may return the unit itself when used on dead crew objectParent _soldier deleteVehicleCrew _soldier; //\u00a0faster and always returns the vehicle", "docSyntax": "vehicle deleteVehicleCrew unit", "syntax": "<objVehicle> deleteVehicleCrew <objUnit>"}, "deleteWaypoint": {"version": "CMD", "tags": "", "description": "Removes the specified waypoint.", "example": "deleteWaypoint [_grp, 2];", "docSyntax": "deleteWaypoint [group, index]", "syntax": "deleteWaypoint [<objGroup>,<scalar>]"}, "detach": {"version": "CMD", "tags": "", "description": "Detaches previously attached with attachTo object.", "example": "obj1 attachTo [player]; detach obj1;", "docSyntax": "detach object", "syntax": "detach <object>"}, "detectedMines": {"version": "CMD", "tags": "", "description": "Returns an array of all mines detected by a given side", "example": "detectedMines west;", "docSyntax": "detectedMines side", "syntax": "detectedMines <objSide>"}, "diag_activeMissionFSMs": {"version": "CMD", "tags": "", "description": "Returns array with active Mission FSMs. To see number of all scripts currently in the scheduler use diag_activeScripts.", "example": "{ systemChat str _x } forEach diag_activeMissionFSMs;", "docSyntax": "diag_activeMissionFSMs", "syntax": "diag_activeMissionFSMs"}, "diag_activeScripts": {"version": "CMD", "tags": "", "description": "Returns 4 element array with numbers of currently running scripts in format: [spawn-ed, execVM-ed, exec-ed, execFSM-ed]", "example": "hint str diag_activeScripts; //[0,0,0,1]", "docSyntax": "diag_activeScripts", "syntax": "diag_activeScripts"}, "diag_activeSQFScripts": {"version": "CMD", "tags": "", "description": "Returns information about active SQF scripts. To see number of all scripts currently in the scheduler use diag_activeScripts.", "example": "[] spawn { hint str diag_activeSQFScripts; }; //\u00a0displays [[\"<spawn> hint str diag_activeSQFScripts;\", \"\", true, 1]]", "docSyntax": "diag_activeSQFScripts", "syntax": "diag_activeSQFScripts"}, "diag_activeSQSScripts": {"version": "CMD", "tags": "", "description": "Returns array with active SQSs. To see number of all scripts currently in the scheduler use diag_activeScripts.", "example": "{ systemChat str _x } forEach diag_activeSQSScripts;", "docSyntax": "diag_activeSQSScripts", "syntax": "diag_activeSQSScripts"}, "diag_allMissionEventHandlers": {"version": "CMD", "tags": "", "description": "Returns an array with all mission event handlers.", "example": "diag_allMissionEventHandlers; /* returns: [ \"Ended\",0, \"SelectedActionPerformed\",0, \"SelectedRotorLibActionPerformed\",0, \"SelectedActionChanged\",0, \"SelectedRotorLibActionChanged\",0, \"ControlsShifted\",0, \"Draw3D\",1, \"Loaded\",0, \"HandleDisconnect\",0, \"EntityRespawned\",0, \"EntityKilled\",0, \"MapSingleClick\",0, \"HCGroupSelectionChanged\",0, \"CommandModeChanged\",0, \"PlayerConnected\",0, \"PlayerDisconnected\",0, \"TeamSwitch\",0, \"GroupIconClick\",0, \"GroupIconOverEnter\",0, \"GroupIconOverLeave\",0, \"EachFrame\",0, \"PreloadStarted\",0, \"PreloadFinished\",0, \"Map\",0, \"PlayerViewChanged\",0, \"BuildingChanged\",0, \"MPEnded\",0, \"HandleAccTime\",0, \"ExtensionCallback\",0 ] */", "docSyntax": "diag_allMissionEventHandlers", "syntax": "diag_allMissionEventHandlers"}, "diag_captureFrame": {"version": "CMD", "tags": "", "description": "This command starts counting frames from the moment it is executed and when the count reaches the number passed as param, the current frame is captured and captured data UI dialog appears, similar to diag_captureSlowFrame. This can also be executed on a dedicated Server and because a Server has no UI it will behave like diag_captureFrameToFile.", "example": "diag_captureFrame 1; //\u00a0capture the first frame after command execution", "docSyntax": "diag_captureFrame frame", "syntax": "diag_captureFrame frame"}, "diag_captureFrameToFile": {"version": "CMD", "tags": "", "description": "This command starts counting frames from the moment it is executed and when the count reaches the number passed as param, the current frame is captured and written to a log file in the same directory as the .rpt file.", "example": "diag_captureFrameToFile 1; //capture the first frame after command execution", "docSyntax": "diag_captureFrameToFile frame", "syntax": "diag_captureFrameToFile frame"}, "diag_captureSlowFrame": {"version": "CMD", "tags": "", "description": "Opens \"capture frame\" dialog if current frame exceeds set threshold in seconds. One can indicate to either capture duration of a specific profiling selection or the total duration of the frame. The selection names can be obtained by expanding the profiling tree. Clicking on a tree item will highlight the item on the graph and vice versa. The GUI also provides method of copying of the displayed data to clipboard. Some of the selections:", "example": "diag_captureSlowFrame [\"total\", 0.003];", "docSyntax": "diag_captureSlowFrame [section, threshold]", "syntax": "diag_captureSlowFrame [section,threshold]"}, "diag_codePerformance": {"version": "CMD", "tags": "", "description": "Attempts to run given code with given arguments given number of cycles in unscheduled environment and returns average time it took to run the code as well as actual number of executions performed. The command will return as soon as possible if the tested code is slow and the duration of the command exceeds 1 second. Engine alternative to BIS_fnc_codePerformance.", "example": "private _result = diag_codePerformance [{ private _a = 123; }, 0, 10000];", "docSyntax": "diag_codePerformance [code, arguments, cycles]", "syntax": "diag_codePerformance [<code>,arguments,cycles]"}, "diag_deltaTime": {"version": "CMD", "tags": "", "description": "Returns the duration of the previous frame in seconds", "example": "private _frameTime = diag_deltaTime;", "docSyntax": "diag_deltaTime", "syntax": "diag_deltaTime"}, "diag_drawMode": {"version": "CMD", "tags": "", "description": "Activates a debug visualisation.", "example": "diag_drawMode \"FireGeometry\"; sleep 5; diag_drawMode \"Normal\";", "docSyntax": "diag_drawMode type", "syntax": "diag_drawMode type"}, "diag_dumpCalltraceToLog": {"version": "CMD", "tags": "", "description": "Dumps current callstack/calltrace to RPT.", "example": "diag_dumpCalltraceToLog; /* outputs: Callstack:\" 14:17:06 \" [] L1 ()\" 14:17:06 \" [] L25 (A3\\functions_f\\Debug\\fn_debugConsoleExec.sqf)\" 14:17:06 \" _this:[{st = 15 / 0;}]\" 14:17:06 \" [] L0 ()\" 14:17:06 \" [] L25 (A3\\functions_f\\Debug\\fn_debugConsoleExec.sqf)\" 14:17:06 \" _x:any\" 14:17:06 \" [] L1 ()\" 14:17:06 \" _this:[]\" 14:17:06 \"CALLSTACK END;;; */", "docSyntax": "diag_dumpCalltraceToLog", "syntax": "diag_dumpCalltraceToLog"}, "diag_dumpScriptAssembly": {"version": "CMD", "tags": "", "description": "Dump script assembly.", "example": "diag_dumpScriptAssembly BIS_fnc_taskCreate;", "docSyntax": "diag_dumpScriptAssembly code", "syntax": "diag_dumpScriptAssembly <code>"}, "diag_dumpTerrainSynth": {"version": "CMD", "tags": "", "description": "Returns OutsideTerrain's current world's values.", "example": "private _terrainSynth = diag_dumpTerrainSynth;", "docSyntax": "diag_dumpTerrainSynth", "syntax": "diag_dumpTerrainSynth"}, "diag_dynamicSimulationEnd": {"version": "CMD", "tags": "", "description": "Ends dynamic simulation data gathering and writes collected data into given (txt) file. The file is saved in the Arma 3 installation folder.", "example": "diag_dynamicSimulationEnd \"dynSimDebugData\"; //\u00a0creates a file called \"dynSimDebugData_runtimelog.txt\"", "docSyntax": "diag_dynamicSimulationEnd file", "syntax": "diag_dynamicSimulationEnd file"}, "diag_dynamicSimulationStart": {"version": "CMD", "tags": "", "description": "Starts gathering Arma 3: Dynamic Simulation diagnostic data.", "example": "diag_dynamicSimulationStart;", "docSyntax": "diag_dynamicSimulationStart", "syntax": "diag_dynamicSimulationStart"}, "diag_enable": {"version": "CMD", "tags": "", "description": "Toggles various diagnostics.", "example": "\"All\" diag_enable true;", "docSyntax": "mode diag_enable state", "syntax": "mode diag_enable state"}, "diag_enabled": {"version": "CMD", "tags": "", "description": "Checks whether specific diagnostic mode is activated.", "example": "\"Animation\" diag_enable true; diag_enabled \"Animation\"; //\u00a0returns true", "docSyntax": "diag_enabled mode", "syntax": "diag_enabled mode"}, "diag_exportConfig": {"version": "CMD", "tags": "", "description": "Exports given config into file of given path.", "example": "export an All-in-One config:", "docSyntax": "diag_exportConfig [path, config]", "syntax": "diag_exportConfig [path,config]"}, "diag_exportTerrainSVG": {"version": "CMD", "tags": "", "description": "Highly detailed map of Stratis", "example": "diag_exportTerrainSVG [\"C:\\Users\\USERNAME\\Desktop\\Stratis_Map.svg\", true, true, true, true, true, false]; //\u00a0replace USERNAME with your username!", "docSyntax": "diag_exportTerrainSVG [filePath, drawLocationNames, drawGrid, drawCountlines, drawTreeObjects, drawMountainHeightpoints, simpleRoads]", "syntax": "diag_exportTerrainSVG [filePath,drawLocationNames,drawGrid,drawCountlines,drawTreeObjects,drawMountainHeightpoints,simpleRoads]"}, "diag_fps": {"version": "CMD", "tags": "", "description": "Returns average framerate calculated over last 16 frames.", "example": "diag_log diag_fps;", "docSyntax": "diag_fps", "syntax": "diag_fps"}, "diag_fpsMin": {"version": "CMD", "tags": "", "description": "Returns minimal framerate. Calculated from the longest frame over last 16 frames.", "example": "_minfps = diag_fpsMin;", "docSyntax": "diag_fpsMin", "syntax": "diag_fpsMin"}, "diag_frameNo": {"version": "CMD", "tags": "", "description": "Returns number of frame currently displayed.", "example": "_currFrameNo = diag_frameNo;", "docSyntax": "diag_frameNo", "syntax": "diag_frameNo"}, "diag_getTerrainGrid": {"version": "CMD", "tags": "", "description": "Returns terrain cell size (size of each grid cell in the Heightmap).", "example": "private _terrainGrid = diag_getTerrainGrid;", "docSyntax": "diag_getTerrainGrid", "syntax": "diag_getTerrainGrid"}, "diag_getTerrainHeight": {"version": "CMD", "tags": "", "description": "Returns terrain height at the specified location.", "example": "private _h = diag_getTerrainHeight position player;", "docSyntax": "diag_getTerrainHeight positionWorld", "syntax": "diag_getTerrainHeight positionWorld"}, "diag_getTerrainSegmentOffset": {"version": "CMD", "tags": "", "description": "Returns the terrain segment. It is basically the same as:", "example": "private _segmentOffset = diag_getTerrainSegmentOffset getPosWorld player;", "docSyntax": "diag_getTerrainSegmentOffset worldPos", "syntax": "diag_getTerrainSegmentOffset worldPos"}, "diag_lightNewLoad": {"version": "CMD", "tags": "", "description": "Allows loading of lighting config during the gameplay (effectively changing the current scene lighting). Filename path can be either absolute or relative. The file must contain only the class LightingNew, which should contain lighting configuration.", "example": "diag_lightNewLoad \"o:\\lighting.txt\";", "docSyntax": "diag_lightNewLoad path", "syntax": "diag_lightNewLoad path"}, "diag_list": {"version": "CMD", "tags": "", "description": "Returns an array of all diagnostic modes available in the game.", "example": "diag_list \"toggle\";", "docSyntax": "diag_list mode", "syntax": "diag_list mode"}, "diag_localized": {"version": "CMD", "tags": "", "description": "Returns array with all localized keys from the given stringtable or the array of all stringtables names if empty string \"\" is given. Common stringtables are: \"Global\", \"Mission\", \"Campaign\".", "example": "private _randomKey = selectRandom diag_localized \"Global\"; hint format [\"Key: %1\\nValue: %2\", _randomKey, localize _randomKey];", "docSyntax": "diag_localized stringtable", "syntax": "diag_localized stringtable"}, "diag_log": {"version": "CMD", "tags": "", "description": "Dumps the argument's value to the report file. Each call creates a new line in the file.", "example": "diag_log time;", "docSyntax": "diag_log output", "syntax": "diag_log output"}, "diag_mergeConfigFile": {"version": "CMD", "tags": "", "description": "Updates config without restarting. Attributes and classes can not be deleted unless delete is used. Changes to the config are applied to all new entities, a mission restart is not necessarily required. Spawning the vehicle again or switching weapons works too. Since 1.70 CfgAmmo should be mergeable as well.", "example": "diag_mergeConfigFile [\"O:\\Arma3\\A3\\Stuff_F\\config.cpp\"]", "docSyntax": "diag_mergeConfigFile [path, userdir]", "syntax": "diag_mergeConfigFile [path,userdir]"}, "diag_recordTurretLimits": {"version": "CMD", "tags": "", "description": "Start recording tool for creating turret aiming limits.", "example": "diag_recordTurretLimits true;", "docSyntax": "diag_recordTurretLimits section", "syntax": "diag_recordTurretLimits section"}, "diag_resetShapes": {"version": "CMD", "tags": "", "description": "Reload models on-the-fly without the need of restarting the game. Changes applied by diag_resetShapes are applied to all new entities so restart of mission is not necessarily required - spawning vehicle again or changing back forth weapon should usually do the trick. It works only with -filePatching in combination with local data. Command will reload only models present in local data.", "example": "diag_resetShapes;", "docSyntax": "diag_resetShapes", "syntax": "diag_resetShapes"}, "diag_scope": {"version": "CMD", "tags": "", "description": "Returns script scope depth. When script is directly executed by the engine or a new script is added to the scheduler, the scope depth is 0. The examples of such execution are event handlers, spawn, etc. isNil Code will also create a parent scope. Any use of call and such will stack execution creating child scopes and increasing scope depth.", "example": "[] spawn { systemChat str diag_scope; //\u00a00 call { call { systemChat str diag_scope; //\u00a02 isNil { systemChat str diag_scope; //\u00a00 call { systemChat str diag_scope; //\u00a01 }; }; }; }; };", "docSyntax": "diag_scope", "syntax": "diag_scope"}, "diag_setLightNew": {"version": "CMD", "tags": "", "description": "Overrides currently used scene lighting. The operand is config that is placed as a string (not file). The changes may not be applied immediately, but can be forced by the call of simulWeatherSync.", "example": "diag_setLightNew \"sunOrMoon = 1; diffuse[] = { 0, 0, 0, 0 }; diffuseCloud[] = { 0, 0, 0, 0 }; ambient[] = { 0, 0, 0, 0 }; ... \";", "docSyntax": "diag_setLightNew config", "syntax": "diag_setLightNew config"}, "diag_setTerrainHeight": {"version": "CMD", "tags": "", "description": "Changes the terrain height of the cell in which given position lies. This command is only available with Arma 3: Diagnostics Exe.", "example": "private _fnc_flattenTerrain = { params [\"_start\", \"_a\", \"_b\", \"_h\"]; for \"_xStep\" from 0 to _a do { for \"_yStep\" from 0 to _b do { _start vectorAdd [_xStep, _yStep, 0] diag_setTerrainHeight _h; }; }; }; private _desiredTerrainHeight = 150; [getPosWorld player, 50, 50, _desiredTerrainHeight] spawn _fnc_flattenTerrain;", "docSyntax": "position diag_setTerrainHeight height", "syntax": "position diag_setTerrainHeight height"}, "diag_stacktrace": {"version": "CMD", "tags": "", "description": "Returns an array containing the function name, line number, scope name and all local variables in form of a hashmap.", "example": "private _testvar = 1; private _testother = 2; call { _testvar = 3; if (_testvar == 3) then { _myVariable = 4; hint str diag_stacktrace; }; }; /* [ [\"\", 3, \"\", [[\"_this\", []], [\"_testother\", 2], [\"_testvar\", 3]]], [\"\", 6, \"\", []], [\"\", 8, \"\", \"_myvariable\", 4] ] */", "docSyntax": "diag_stacktrace", "syntax": "diag_stacktrace"}, "diag_tickTime": {"version": "CMD", "tags": "", "description": "Real time in seconds spent from the start of the game. On Windows the command uses timeGetTime.", "example": "//\u00a0Measure execution time of a script _start = diag_tickTime; //\u00a0code _stop = diag_tickTime; diag_log format [\"%1\",_stop - _start];", "docSyntax": "diag_tickTime", "syntax": "diag_tickTime"}, "diag_toggle": {"version": "CMD", "tags": "", "description": "Toggles various diagnostics.", "example": "diag_toggle \"Animation\"; //\u00a0enable diag_toggle \"Animation\"; //\u00a0disable", "docSyntax": "diag_toggle mode", "syntax": "diag_toggle mode"}, "dialog": {"version": "CMD", "tags": "", "description": "Tests whether any user dialog is open.", "example": "if (!dialog) then { createDialog \"Dialog1\"; };", "docSyntax": "dialog", "syntax": "dialog"}, "diaryRecordNull": {"version": "CMD", "tags": "", "description": "A non-existent Diary Record. To compare non-existent objects use isNull or isEqualTo:", "example": "isNull diaryRecordNull; //\u00a0true", "docSyntax": "diaryRecordNull", "syntax": "diaryRecordNull"}, "diarySubjectExists": {"version": "CMD", "tags": "", "description": "Checks whether given subject is present in the Diary of given player.", "example": "_exists = player diarySubjectExists \"subjectName\";", "docSyntax": "player diarySubjectExists name", "syntax": "<objUnit> diarySubjectExists <string>"}, "didJIP": {"version": "CMD", "tags": "", "description": "Checks if the current client Joined In Progress.", "example": "clientDidJIP = didJIP;", "docSyntax": "didJIP", "syntax": "didJIP"}, "didJIPOwner": {"version": "CMD", "tags": "", "description": "Checks if the current owner of supplied Object Joined In Progress. Returns false on clients.", "example": "_ownerDidJip = didJIPOwner tank;", "docSyntax": "didJIPOwner object", "syntax": "didJIPOwner <object>"}, "difficulty": {"version": "CMD", "tags": "", "description": "Returns high-level selected difficulty mode. Returned value will be: 0 (Recruit), 1 (Regular), 2 (Veteran) or 3 (Elite)", "example": "value = difficulty;", "docSyntax": "difficulty", "syntax": "difficulty"}, "difficultyEnabled": {"version": "CMD", "tags": "", "description": "Checks specific difficulty settings of the current user. Difficulty flag names can be found in the ArmA profile file under class Difficulties/xxx/Flags (xxx being regular or veteran).", "example": "hint str (difficultyEnabled \"armor\");", "docSyntax": "difficultyEnabled flagName", "syntax": "difficultyEnabled flagName"}, "difficultyEnabledRTD": {"version": "CMD", "tags": "", "description": "Returns true if Advanced Flight Model is enabled. Forcing of rotorlib simulation could be done with mission param forceRotorLibSimulation.", "example": "_rtdOn = difficultyEnabledRTD;", "docSyntax": "difficultyEnabledRTD", "syntax": "difficultyEnabledRTD"}, "difficultyOption": {"version": "CMD", "tags": "", "description": "Checks specific difficulty settings of the current user. Difficulty flag names can be found in the CfgDifficultyPresets config class or in ArmA profile file under class DifficultyPresets/xxx/Options (xxx being Recruit, Regular or Veteran). This command replaces difficultyEnabled as many options have multiple values and former command only provided Boolean return.", "example": "hint str (difficultyOption \"friendlyTags\");", "docSyntax": "difficultyOption optionName", "syntax": "difficultyOption optionName"}, "direction": {"version": "CMD", "tags": "", "description": "Returns the direction an object or a location is facing (differs from getDir in that this also works with locations).", "example": "player setDir 90; _d = direction player;//returns 90", "docSyntax": "direction object", "syntax": "direction <object>"}, "directionStabilizationEnabled": {"version": "CMD", "tags": "", "description": "Get state of direction stabilization. This command returns true if the current optic mode of the selected turret has direction stabilization configured in config (directionStabilized) and if it is also not disabled by enableDirectionStabilization.", "example": "uav directionStabilizationEnabled [0];", "docSyntax": "vehicle directionStabilizationEnabled turretPath", "syntax": "<objVehicle> directionStabilizationEnabled turretPath"}, "directSay": {"version": "CMD", "tags": "", "description": "Sends given audio message to the direct channel. Command operates just like xxxxRadio commands, but the sound is played over direct channel and is independent of fadeSound. The message is defined in CfgRadio in the description.ext file or config radio protocol or a kbAddTopic. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "player directSay configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\"));", "docSyntax": "unit directSay radioName", "syntax": "<objUnit> directSay radioName"}, "disableAI": {"version": "CMD", "tags": "", "description": "Disables parts of the AI behaviour to get a better control over the actions of a unit. If the unit changes locality, this command might need to be executed again at the new locality to maintain effect.", "example": "MyUnit disableAI \"AUTOTARGET\";", "docSyntax": "unit disableAI feature", "syntax": "<objUnit> disableAI feature"}, "disableBrakes": {"version": "CMD", "tags": "", "description": "Disables autobrake, which is engaged when vehicle is stationary and stops wheels from rotating freely when vehicle is pushed.", "example": "myCar disableBrakes true;", "docSyntax": "transport disableBrakes disable", "syntax": "transport disableBrakes disable"}, "disableCollisionWith": {"version": "CMD", "tags": "", "description": "Disable collision between provided objects. The collision is always disabled for both objects in the arguments.", "example": "player disableCollisionWith myWall;", "docSyntax": "vehicle1 disableCollisionWith vehicle2", "syntax": "vehicle1 disableCollisionWith vehicle2"}, "disableConversation": {"version": "CMD", "tags": "", "description": "In theory disables the ability to talk to other people. In actuality, if true is given, the command increases unit's kbTell IsSpeaking status by 1, thus stopping unit from having a conversation. If false is given, the command decreases unit's kbTell IsSpeaking status by 1. The unit \"is speaking\" if IsSpeaking > 0.", "example": "player disableConversation true;", "docSyntax": "unitName disableConversation disable", "syntax": "<objUnit> disableConversation disable"}, "disableDebriefingStats": {"version": "CMD", "tags": "", "description": "Disable debriefing score table.", "example": "disableDebriefingStats;", "docSyntax": "disableDebriefingStats", "syntax": "disableDebriefingStats"}, "disableMapIndicators": {"version": "CMD", "tags": "", "description": "Command allows suppressing visualization of FRIENDLY, ENEMY, MINES and/or PING map indicators from difficulty setting EXTENDED MAP CONTENT.", "example": "Disable visualization of friendly and enemy units:", "docSyntax": "disableMapIndicators [disableFriendly, disableEnemy, disableMines, disablePing]", "syntax": "disableMapIndicators [disableFriendly,disableEnemy,disableMines,disablePing]"}, "disableNVGEquipment": {"version": "CMD", "tags": "", "description": "Enables or disables transport NV (Night Vision). To disable TI (Thermal Imaging) use disableTIEquipment.", "example": "myTank disableNVGEquipment true;", "docSyntax": "vehicle disableNVGEquipment state", "syntax": "<objVehicle> disableNVGEquipment state"}, "disableRemoteSensors": {"version": "CMD", "tags": "", "description": "This command will halt raycasting calculations (on the local machine only) for all groups which don't contain any local entities. Units, that are not in a group with at least one local member, will not check visibility of other units. This will cause, that remote units will not have updated knowsAbout and it will save some CPU time. If a group contains a single local entity then calculations will still be performed for the entire group.", "example": "disableRemoteSensors true;", "docSyntax": "disableRemoteSensors state", "syntax": "disableRemoteSensors state"}, "disableSerialization": {"version": "CMD", "tags": "", "description": "Disable saving of script containing this command. After this, the script can work with data types which do not support serialization (UI types).", "example": "disableSerialization; private _display = findDisplay 46;", "docSyntax": "disableSerialization", "syntax": "disableSerialization"}, "disableTIEquipment": {"version": "CMD", "tags": "", "description": "Disables TI (Thermal Imaging) equipment for given vehicle.", "example": "vehicle player disableTIEquipment true;", "docSyntax": "vehicle disableTIEquipment state", "syntax": "<objVehicle> disableTIEquipment state"}, "disableUAVConnectability": {"version": "CMD", "tags": "", "description": "Disables unit's AV terminal(s) connecting to UAV.", "example": "myUnit disableUAVConnectability [myUav, true];", "docSyntax": "object disableUAVConnectability [uav, checkAllItems]", "syntax": "<object> disableUAVConnectability [uav,checkAllItems]"}, "disableUserInput": {"version": "CMD", "tags": "", "description": "Disables or enables the keyboard and mouse input. Usually used during cutscenes.", "example": "disableUserInput true; //\u00a0cutscene disableUserInput false;", "docSyntax": "disableUserInput state", "syntax": "disableUserInput state"}, "displayAddEventHandler": {"version": "CMD", "tags": "", "description": "Adds an event handler to the given display. See User Interface Event Handlers for the full list of event names. If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp.", "example": "moduleName_keyDownEHId = findDisplay 46 displayAddEventHandler [\"KeyDown\", \"hint str _this;\"];", "docSyntax": "display displayAddEventHandler [eventName, code]", "syntax": "<uiDisplay> displayAddEventHandler [eventName,<code>]"}, "displayChild": {"version": "CMD", "tags": "", "description": "Returns child display of the given display.", "example": "_display = displayChild findDisplay 313; //\u00a0display #46", "docSyntax": "displayChild display", "syntax": "displayChild <uiDisplay>"}, "displayCtrl": {"version": "CMD", "tags": "", "description": "Return child control with specified idc.", "example": "_displayControl = _ParentDisplay displayCtrl 101;", "docSyntax": "display displayCtrl idc", "syntax": "<uiDisplay> displayCtrl <scalar>"}, "displayParent": {"version": "CMD", "tags": "", "description": "Returns parent display of the given display.", "example": "_display = displayParent findDisplay 49; //\u00a0Display #46", "docSyntax": "displayParent display", "syntax": "displayParent <uiDisplay>"}, "displayRemoveAllEventHandlers": {"version": "CMD", "tags": "", "description": "Remove all event handlers from the given display.", "example": "findDisplay 46 displayRemoveAllEventHandlers \"KeyDown\";", "docSyntax": "display displayRemoveAllEventHandlers eventName", "syntax": "<uiDisplay> displayRemoveAllEventHandlers eventName"}, "displayRemoveEventHandler": {"version": "CMD", "tags": "", "description": "Remove a given event handler from the given display.", "example": "findDisplay 46 displayRemoveEventHandler [\"keyDown\",5];", "docSyntax": "display displayRemoveEventHandler [handlerType, id]", "syntax": "<uiDisplay> displayRemoveEventHandler [handlerType,<scalar>]"}, "displaySetEventHandler": {"version": "CMD", "tags": "", "description": "Sets given event handler of given display. The return code of the provided function should indicate whether this event was handled correctly. This implies telling the engine whether it is default code should be executed. See User Interface Event Handlers for the full list of handler names.", "example": "_control displaySetEventHandler [\"KeyDown\", \"\"];", "docSyntax": "display displaySetEventHandler [handlerName, function]", "syntax": "<uiDisplay> displaySetEventHandler [handlerName,function]"}, "displayUniqueName": {"version": "CMD", "tags": "", "description": "Get the provided display's UI On Texture unique name.", "example": "private _displayName = displayUniqueName _myDisplay;", "docSyntax": "displayUniqueName display", "syntax": "displayUniqueName <uiDisplay>"}, "displayUpdate": {"version": "CMD", "tags": "", "description": "Set the provided display to update its UI On Texture render.", "example": "displayUpdate _myDisplay;", "docSyntax": "displayUpdate display", "syntax": "displayUpdate <uiDisplay>"}, "dissolveTeam": {"version": "CMD", "tags": "", "description": "Dissolves the given team. All members become members of the main team.", "example": "dissolveTeam \"RED\";", "docSyntax": "dissolveTeam teamColor", "syntax": "dissolveTeam teamColor"}, "distance": {"version": "CMD", "tags": "", "description": "Returns a distance in meters between Objects, Positions or Locations.", "example": "_meters = player distance _object;", "docSyntax": "param1 distance param2", "syntax": "param1 <scalar> param2"}, "distance2D": {"version": "CMD", "tags": "", "description": "Returns a 2D distance (distance projected to X,Y plane) in meters between Objects and/or Positions.", "example": "_meters = player distance2D heli;", "docSyntax": "from distance2D to", "syntax": "from distance2D to"}, "distanceSqr": {"version": "CMD", "tags": "", "description": "Computes the squared distance between two objects or positions. This command is faster than distance by saving a square root operation, useful for mass-checking distance without the need of the distance value itself.", "example": "private _distanceSquared = 5 * 5; if (player distanceSqr leader player < _distanceSquared) then //\u00a0similar to player distance leader player < 5 { hint \"You are less than 5m from the leader!\"; };", "docSyntax": "var1 distanceSqr var2", "syntax": "var1 distanceSqr var2"}, "distributionRegion": {"version": "CMD", "tags": "", "description": "Returns the numerical index for the distribution region of this copy of Armed Assault.", "example": "if (distributionRegion == 1) then { hint \"miles\"; } else { hint \"kilometres\"; };", "docSyntax": "distributionRegion", "syntax": "distributionRegion"}, "do3DENAction": {"version": "CMD", "tags": "", "description": "Performs given Eden Editor action.", "example": "do3DENAction \"MissionSave\";", "docSyntax": "do3DENAction action", "syntax": "do3DENAction action"}, "doArtilleryFire": {"version": "CMD", "tags": "", "description": "Orders an artillery unit to fire a burst on the given position (silently).", "example": "Mortar doArtilleryFire [[3000, 120, 1000], \"8Rnd_82mm_Mo_shells\", 3];", "docSyntax": "unit doArtilleryFire [position, type, rounds]", "syntax": "<objUnit> doArtilleryFire [position,type,rounds]"}, "doFire": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to fire on the given target (without radio messages). The target is set with doTarget or commandTarget. The target can be a unit or a vehicle, but not an object.", "example": "_ESoldier1 doFire _WSoldier1;", "docSyntax": "unitName doFire target", "syntax": "<objUnit> doFire <object>"}, "doFollow": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to follow another from his own group as his formation leader (without radio messages).", "example": "_soldier1 doFollow _soldier2;", "docSyntax": "unit doFollow unitLead", "syntax": "<objUnit> doFollow unitLead"}, "doFSM": {"version": "CMD", "tags": "", "description": "Orders a unit to process command defined by FSM file (silently). Unlike with execFSM where _this is passed to the FSM, the following parameters are passed when using doFSM/commandFSM:", "example": "_soldierOne doFSM [\"move.fsm\", position player, player];", "docSyntax": "unit doFSM [fsmName, position, target]", "syntax": "<objUnit> doFSM [fsmName,position,<object>]"}, "doGetOut": {"version": "CMD", "tags": "", "description": "Orders one or multiple units to get out from the vehicle (silently). Same as commandGetOut with latter being shown via radio chat.", "example": "doGetOut _unitOne;", "docSyntax": "doGetOut units", "syntax": "doGetOut units"}, "doMove": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to move to the given position (without radio messages). Upon reaching its destination, if it is the group leader it will order the group to form around it's new position. If it is not the leader, it will immediately be ordered to return to formation by the group leader and begin moving back to the group. Use doStop to stop units returning to formation. moveToCompleted will return true when a unit issued this command reaches its destination.", "example": "_soldier1 doMove (position _officer);", "docSyntax": "unit(s) doMove position", "syntax": "<objUnit>(s) doMove position"}, "doorPhase": {"version": "CMD", "tags": "", "description": "Return animation phase of door on vehicle.", "example": "_phase = heli doorPhase \"door_L\";", "docSyntax": "object doorPhase door", "syntax": "<object> doorPhase door"}, "doStop": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to stop (without radio messages). The units stopped in this way will leave the groups formation. It will prevent them from moving around with their group (or formation leader), while still being able to turn around and even move to a new position if they see fit.", "example": "doStop _soldier1;", "docSyntax": "doStop unit(s)", "syntax": "doStop <objUnit>(s)"}, "doSuppressiveFire": {"version": "CMD", "tags": "", "description": "Orders the given unit or a group of units to suppress the given position or target (without radio messages, see commandSuppressiveFire is you need messages).", "example": "_soldier doSuppressiveFire [1869.508,5760.962,0.000];", "docSyntax": "unit doSuppressiveFire target", "syntax": "<objUnit> doSuppressiveFire <object>"}, "doTarget": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to target the given target (without radio messages).", "example": "_ESoldier1 doTarget _WSoldier1;", "docSyntax": "unit doTarget target", "syntax": "<objUnit> doTarget <object>"}, "doWatch": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to watch the given position or target (without radio messages). Use objNull as the target to order a unit to stop watching a position/target.", "example": "_soldierOne doWatch markerPos \"MarkerMoveOne\";", "docSyntax": "unit(s) doWatch position", "syntax": "<objUnit>(s) doWatch position"}, "drawArrow": {"version": "CMD", "tags": "", "description": "Draws a single line arrow on the map. As this command needs to be called every frame, it is preferable using the onDraw UI Event Handler. To draw a color filled arrow of custom shape see BIS_fnc_drawArrow.", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawArrow [ player, player getRelPos [100, 0], [1,0,0,1] ]; }];", "docSyntax": "map drawArrow [from, to, color]", "syntax": "<objMap> drawArrow [from,to,<scalar>]"}, "drawEllipse": {"version": "CMD", "tags": "", "description": "Draws an ellipse on the map. Just like with marker or trigger area, negative a and b will result in hexagon.", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawEllipse [ player, 10, 10, 0, [1, 0, 0, 1], \"\" ]; _this select 0 drawEllipse [ player, -10, -10, 0, [1, 1, 1, 1], \"#(rgb,8,8,3)color(1,0.6,0,1)\" ]; _this select 0 drawEllipse [ player, -10, -10, 90, [0, 0, 1, 1], \"\" ]; }];", "docSyntax": "map drawEllipse [centre, a, b, angle, color, fill]", "syntax": "<objMap> drawEllipse [centre,a,b,angle,<scalar>,fill]"}, "drawIcon": {"version": "CMD", "tags": "", "description": "Draws an icon on the map. As this command needs to be called every frame, it is preferable using the onDraw UI Event Handler.", "example": "Red icon with text:", "docSyntax": "map drawIcon [texture, color, position, width, height, angle, text, shadow, textSize, font, align]", "syntax": "<objMap> drawIcon [<string>,<scalar>,position,width,height,angle,<string>,shadow,textSize,font,align]"}, "drawIcon3D": {"version": "CMD", "tags": "", "description": "Draws an icon at the given position in the game world. This command has to be executed every frame. Use the Draw3D Mission Event Handler (which is executed every frame if the user can see the icon).", "example": "Icon and text:", "docSyntax": "drawIcon3D [texture, color, position, width, height, angle, text, shadow, textSize, font, textAlign, drawSideArrows, offsetX, offsetY]", "syntax": "drawIcon3D [<string>,<scalar>,position,width,height,angle,<string>,shadow,textSize,font,textAlign,drawSideArrows,offsetX,offsetY]"}, "drawLaser": {"version": "CMD", "tags": "", "description": "Draws a laserbeam and a lightpoint at the impact location of the laser.", "example": "Give the player a laser eye:", "docSyntax": "drawLaser [position, direction, beamColor, dotColor, dotSize, beamThickness, beamMaxLength, isIR]", "syntax": "drawLaser [position,direction,beamColor,dotColor,dotSize,beamThickness,beamMaxLength,isIR]"}, "drawLine": {"version": "CMD", "tags": "", "description": "Draw a line on the map. Can decrease framerate!", "example": "(findDisplay 12 displayCtrl 51) ctrlAddEventHandler [\"Draw\", \"(_this select 0) drawLine [ player, [0,0,0], [0,0,1,1] ];\" ];", "docSyntax": "map drawLine [from, to, color]", "syntax": "<objMap> drawLine [from,to,<scalar>]"}, "drawLine3D": {"version": "CMD", "tags": "", "description": "Draws a line of a given colour between two 3D positions in the current frame. To be used mostly in a \"Draw3D\" mission event handler.", "example": "onEachFrame { drawLine3D [getPos player, getPos cursorTarget, [1,1,1,1]]; };", "docSyntax": "drawLine3D [start, end, color]", "syntax": "drawLine3D [start,end,<scalar>]"}, "drawLink": {"version": "CMD", "tags": "", "description": "The editor will draw a line between the two specified editor objects. Line type can be LINE or ARROW.", "example": "-", "docSyntax": "map drawLink [from,to,param type,line type,color]", "syntax": "<objMap> drawLink [from,to,param type,line type,<scalar>]"}, "drawLocation": {"version": "CMD", "tags": "", "description": "Used to draw locations in 2D Editor.", "example": "-", "docSyntax": "control drawLocation location", "syntax": "<uiControl> drawLocation location"}, "drawPolygon": {"version": "CMD", "tags": "", "description": "Draws given polygon on the given map control with given color. The polygon must consist of at least 3 points. Unlike with other draw* commands and due to complexity, this command does not support filling of the polygon with color. Use drawTriangle command to construct and fill polygon shape as a workaround.", "example": "test_polygon = []; for \"_i\" from 1 to 12 do { test_polygon pushBack (player getPos [10 + random 100, 360 / _i]); }; findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { params [\"_control\"]; _control drawPolygon [test_polygon, [0,0,1,1]]; }];", "docSyntax": "map drawPolygon [polygon, color]", "syntax": "<objMap> drawPolygon [polygon,<scalar>]"}, "drawRectangle": {"version": "CMD", "tags": "", "description": "Draws a rectangle on the map.", "example": "_ctrl drawRectangle [ getPos player, 20, 20, getDir player, [0,0,1,1], \"\" ];", "docSyntax": "map drawRectangle [centre, halfWidth, halfHeight, angle, color, fill]", "syntax": "<objMap> drawRectangle [centre,halfWidth,halfHeight,angle,<scalar>,fill]"}, "drawTriangle": {"version": "CMD", "tags": "", "description": "Draws one to multiple triangles on the map.", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawTriangle [ [ //\u00a0triangle 1 start player getRelPos [100, 0], player getRelPos [100, -135], player getRelPos [100, 135] //\u00a0triangle 1 end ], [1,0,0,0.5], \"#(rgb,1,1,1)color(1,1,1,1)\" ]; }];", "docSyntax": "map drawTriangle [vertices, color, fill]", "syntax": "<objMap> drawTriangle [vertices,<scalar>,fill]"}, "driver": {"version": "CMD", "tags": "", "description": "Returns the driver of a vehicle.", "example": "(driver _tank) action [\"getout\", _tank];", "docSyntax": "driver vehicle", "syntax": "driver <objVehicle>"}, "drop": {"version": "CMD", "tags": "", "description": "Creates a particle effect. This command is used to create smoke, fire and similar effects. The particles are single polygons with single textures that always face the player. They can be set to dynamically change their position, size, direction, can be set to different weights and to be more or less dependent on the wind.", "example": "drop [\"cl_basic\", \"\", \"Billboard\", 1, 1, [-3.5 * (sin (direction xural)), -3.5 * (cos (direction xural)), 0], [random 0.1, random 0.1, random 0.5], 1, 0.005, 0.0042, 0.7, [0.3,3], [[0.5,0.5,0.5,0], [0.7,0.7,0.7,0.5], [0.9,0.9,0.9,0]], [0,1,0,1,0,1], 0.2, 0.2, \"\", \"\", xural];", "docSyntax": "drop parameters", "syntax": "drop parameters"}, "dynamicSimulationDistance": {"version": "CMD", "tags": "", "description": "A getter for setDynamicSimulationDistance.", "example": "hint str dynamicSimulationDistance \"Prop\";", "docSyntax": "dynamicSimulationDistance category", "syntax": "dynamicSimulationDistance category"}, "dynamicSimulationDistanceCoef": {"version": "CMD", "tags": "", "description": "A getter for setDynamicSimulationDistanceCoef", "example": "hint str dynamicSimulationDistanceCoef \"IsMoving\";", "docSyntax": "dynamicSimulationDistanceCoef class", "syntax": "dynamicSimulationDistanceCoef class"}, "dynamicSimulationEnabled": {"version": "CMD", "tags": "", "description": "A getter for enableDynamicSimulation.", "example": "hint str dynamicSimulationEnabled _myObject;", "docSyntax": "dynamicSimulationEnabled object", "syntax": "dynamicSimulationEnabled <object>"}, "dynamicSimulationSystemEnabled": {"version": "CMD", "tags": "", "description": "A getter for enableDynamicSimulationSystem", "example": "hint str dynamicSimulationSystemEnabled;", "docSyntax": "dynamicSimulationSystemEnabled", "syntax": "dynamicSimulationSystemEnabled"}, "echo": {"version": "CMD", "tags": "", "description": "Sends any text into the debugger console or the logfile. This command is only present in internal version not in the retail version. Use diag_log instead!", "example": "echo \"Text in logfile\";", "docSyntax": "echo text", "syntax": "echo <string>"}, "edit3DENMissionAttributes": {"version": "CMD", "tags": "", "description": "Open a window with scenario attribute in given section.", "example": "edit3DENMissionAttributes \"Multiplayer\";", "docSyntax": "edit3DENMissionAttributes section", "syntax": "edit3DENMissionAttributes section"}, "editObject": {"version": "CMD", "tags": "", "description": "Show the edit object dialog for the given object.", "example": "-", "docSyntax": "map editObject object", "syntax": "<objMap> editObject <object>"}, "editorSetEventHandler": {"version": "CMD", "tags": "", "description": "Sets given event handler of given editor.", "example": "_map editorSetEventHandler [\"SelectObject\",\"\"];", "docSyntax": "map editorSetEventHandler [handler name,function]", "syntax": "<objMap> editorSetEventHandler [handler <string>,function]"}, "effectiveCommander": {"version": "CMD", "tags": "", "description": "Returns the effective commander of the vehicle. Effective commander is the player whom driver AI will listen to. So if in a tank there is a gunner and a commander and AI driver, if the effectiveCommander is gunner, then gunner pressing WASD will give AI orders to move. If gunner jumps out and then enters tank again, the effectiveCommander role most likely has changed to commander that remained in tank. Also the assignment seems to work on first come first served basis.", "example": "_commander = effectiveCommander tank;", "docSyntax": "effectiveCommander vehicle", "syntax": "effectiveCommander <objVehicle>"}, "elevatePeriscope": {"version": "CMD", "tags": "", "description": "Elevates periscope of a vehicle. Vehicles in Arma 3 which are compatible with this tech are Strider, remote laser designators, the robot arm on Eddie, etc. Please note that SDV submarine has a different periscope, which is just an animated selection and could be raised and lowered with animate command.", "example": "_eddie elevatePeriscope [[0], 0.75, 0.1];", "docSyntax": "vehicle elevatePeriscope [turret, elevation, speed, blockUserInput]", "syntax": "<objVehicle> elevatePeriscope [turret,elevation,<scalar>,blockUserInput]"}, "emptyPositions": {"version": "CMD", "tags": "", "description": "Returns the number of given empty positions in the vehicle.", "example": "_freeCargoAndFFVPositions = vehicle player emptyPositions \"Cargo\";", "docSyntax": "vehicle emptyPositions position", "syntax": "<objVehicle> emptyPositions position"}, "enableAI": {"version": "CMD", "tags": "", "description": "Enables parts of the AI behavior that was disabled by disableAI.", "example": "_soldierOne enableAI \"Move\";", "docSyntax": "unit enableAI skilltype", "syntax": "<objUnit> enableAI skilltype"}, "enableAIFeature": {"version": "CMD", "tags": "", "description": "Enables/disables given AI feature.", "example": "\"AwareFormationSoft\" enableAIFeature true;", "docSyntax": "feature enableAIFeature enable", "syntax": "feature enableAIFeature <bool>"}, "enableAimPrecision": {"version": "CMD", "tags": "", "description": "Set whether animation's aim precision affects weapon sway.", "example": "player enableAimPrecision false;", "docSyntax": "unit enableAimPrecision enable", "syntax": "<objUnit> enableAimPrecision <bool>"}, "enableAttack": {"version": "CMD", "tags": "", "description": "Set if leader can issue attack commands to the soldiers in his group.", "example": "_group1 enableAttack true;", "docSyntax": "group enableAttack enable", "syntax": "<objGroup> enableAttack <bool>"}, "enableAudioFeature": {"version": "CMD", "tags": "", "description": "Enable or disable an audio feature. Available features are \"lowpass\" and \"building_interior\".", "example": "_prevState = enableAudioFeature [\"lowpass\", true];", "docSyntax": "enableAudioFeature [feature, enable]", "syntax": "enableAudioFeature [feature,<bool>]"}, "enableAutoStartUpRTD": {"version": "CMD", "tags": "", "description": "Toggle availability of the automated helicopter start-up and shutdown sequences.", "example": "myHelicopterRTD enableAutoStartUpRTD true;", "docSyntax": "helicopterRTD enableAutoStartUpRTD enable", "syntax": "helicopterRTD enableAutoStartUpRTD <bool>"}, "enableAutoTrimRTD": {"version": "CMD", "tags": "", "description": "Toggle auto-trim for RTD helicopters.", "example": "myHelicopterRTD enableAutoTrimRTD true;", "docSyntax": "helicopterRTD enableAutoTrimRTD enable", "syntax": "helicopterRTD enableAutoTrimRTD <bool>"}, "enableCamShake": {"version": "CMD", "tags": "", "description": "Allows camera shake effects via addCamShake. If set to false, then a currently active shake effect will stop immediately. By default, shake effects are enabled, but once they have been disabled by this command, they will have to be enabled first, in order to be visible.", "example": "enableCamShake false;", "docSyntax": "enableCamShake value", "syntax": "enableCamShake <scalar>"}, "enableCaustics": {"version": "CMD", "tags": "", "description": "Enable/disable caustics drawing.", "example": "enableCaustics true;", "docSyntax": "enableCaustics bool", "syntax": "enableCaustics <bool>"}, "enableChannel": {"version": "CMD", "tags": "", "description": "Enables/disables UI functionality which is responsible for sending text or voice chat to the given chat channel.", "example": "0 enableChannel false; //\u00a0disable user ability to send voice and text on global channel", "docSyntax": "channelID enableChannel enable", "syntax": "channelID enableChannel <bool>"}, "enableCollisionWith": {"version": "CMD", "tags": "", "description": "Cancels the effects of disableCollisionWith. The collision is always enabled for both objects in the arguments, i.e. vehicle1 with vehicle2 and vehicle2 with vehicle1", "example": "[_veh1, _veh2] remoteExecCall [\"enableCollisionWith\", 0, _veh1];", "docSyntax": "vehicle1 enableCollisionWith vehicle2", "syntax": "vehicle1 enableCollisionWith vehicle2"}, "enableCopilot": {"version": "CMD", "tags": "", "description": "Enables copilot actions, toggles availability of the actions related to copilots, such as taking over controls, suspending controls, etc. This command triggers the \"ControlsShifted\" event handler.", "example": "if (!isCopilotEnabled myHeli) then { myHeli enableCopilot true; };", "docSyntax": "vehicle enableCopilot enable", "syntax": "<objVehicle> enableCopilot <bool>"}, "enableDebriefingStats": {"version": "CMD", "tags": "", "description": "Enable debriefing score table.", "example": "enableDebriefingStats [0.1, 0.1, 0.8, 0.8];", "docSyntax": "enableDebriefingStats [left, top, width, height]", "syntax": "enableDebriefingStats [left,top,width,height]"}, "enableDiagLegend": {"version": "CMD", "tags": "", "description": "Enable or disable the legend for diagnostics. Internal dev only!", "example": "enableDiagLegend false;", "docSyntax": "enableDiagLegend enable", "syntax": "enableDiagLegend <bool>"}, "enableDirectionStabilization": {"version": "CMD", "tags": "", "description": "Enables / disables direction stabilization of turrets. This command only has an effect if the current optic mode of the selected turret has directionStabilized configured in config.", "example": "uav enableDirectionStabilization [false, [0]]; //\u00a0Disable direction stabilization for the first turret", "docSyntax": "vehicle enableDirectionStabilization [enabled, turretPath]", "syntax": "<objVehicle> enableDirectionStabilization [<bool>,turretPath]"}, "enableDynamicSimulation": {"version": "CMD", "tags": "", "description": "Enables or disables Arma 3: Dynamic Simulation for given non AI object.", "example": "_myObject enableDynamicSimulation true;", "docSyntax": "object enableDynamicSimulation enable", "syntax": "<object> enableDynamicSimulation <bool>"}, "enableDynamicSimulationSystem": {"version": "CMD", "tags": "", "description": "Enables or disables the whole Arma 3: Dynamic Simulation system", "example": "enableDynamicSimulationSystem true;", "docSyntax": "enableDynamicSimulationSystem enable", "syntax": "enableDynamicSimulationSystem <bool>"}, "enableEndDialog": {"version": "CMD", "tags": "", "description": "Enables the execution of a custom camera sequence after the players death, coded in onPlayerKilled.sqs.", "example": "enableEndDialog;", "docSyntax": "enableEndDialog", "syntax": "enableEndDialog"}, "enableEngineArtillery": {"version": "CMD", "tags": "", "description": "Enable/disable the artillery engine. This allows the user to use the artillery computer on mortar/artillery, and for AI to use it for indirect fire.", "example": "enableEngineArtillery false;", "docSyntax": "enableEngineArtillery enabled", "syntax": "enableEngineArtillery <bool>"}, "enableEnvironment": {"version": "CMD", "tags": "", "description": "Enable/disable environmental effects: ambient life and/or ambient sound.", "example": "enableEnvironment false; //\u00a0identical to enableEnvironment [false, false]", "docSyntax": "enableEnvironment enable", "syntax": "enableEnvironment <bool>"}, "enableFatigue": {"version": "CMD", "tags": "", "description": "Enables/Disables the person's fatigue.", "example": "player enableFatigue false;", "docSyntax": "unit enableFatigue enable", "syntax": "<objUnit> enableFatigue <bool>"}, "enableGunLights": {"version": "CMD", "tags": "", "description": "Toggles the target group's gun light(s).", "example": "_group enableGunLights false;", "docSyntax": "target enableGunLights state", "syntax": "<object> enableGunLights state"}, "enableInfoPanelComponent": {"version": "CMD", "tags": "", "description": "Controls availability of component to given object info panel.", "example": "//\u00a0enables slingload assistant on player's vehicle right panel at driver position [vehicle player, [-1]] enableInfoPanelComponent [\"VehicleSystemsDisplayManagerComponentRight\", \"SlingLoadDisplay\", true];", "docSyntax": "unit enableInfoPanelComponent [panelID, componentClassOrType, enable]", "syntax": "<objUnit> enableInfoPanelComponent [panelID,componentClassOrType,<bool>]"}, "enableIRLasers": {"version": "CMD", "tags": "", "description": "Allows the AI to use IR lasers. Units should be in \"Combat\" behaviour.", "example": "group player enableIRLasers true;", "docSyntax": "unitOrGroup enableIRLasers value", "syntax": "unitOrGroup enableIRLasers <scalar>"}, "enableMimics": {"version": "CMD", "tags": "", "description": "Enables/disables mimics on a given unit.", "example": "cursorTarget enableMimics false;", "docSyntax": "unit enableMimics enabled", "syntax": "<objUnit> enableMimics <bool>"}, "enablePersonTurret": {"version": "CMD", "tags": "", "description": "Enables or disables firing from a vehicle cargo position. To get the turret path use assignedVehicleRole or getCargoIndex command.", "example": "heli enablePersonTurret [[1], true];", "docSyntax": "vehicle enablePersonTurret [turretPath, enable]", "syntax": "<objVehicle> enablePersonTurret [turretPath,<bool>]"}, "enableRadio": {"version": "CMD", "tags": "", "description": "Enable and disable radio messages to be heard and shown in the left lower corner of the screen - the order-giving unit can still be heard direct-talking when in its vicinity. The AI will still follow orders. This command can be helpful during cutscenes.", "example": "enableRadio false; clearRadio;", "docSyntax": "enableRadio state", "syntax": "enableRadio state"}, "enableReload": {"version": "CMD", "tags": "", "description": "Enable / disable reload when magazine is empty.", "example": "_vehicle enableReload false;", "docSyntax": "object enableReload enable", "syntax": "<object> enableReload <bool>"}, "enableRopeAttach": {"version": "CMD", "tags": "", "description": "Enables or disables the ability to be attached to a rope end for the given entity.", "example": "vehicle player enableRopeAttach false;", "docSyntax": "entity enableRopeAttach enable", "syntax": "entity enableRopeAttach <bool>"}, "enableSatNormalOnDetail": {"version": "CMD", "tags": "", "description": "Enables/Disables satellite normal map or detail maps.", "example": "enableSatNormalOnDetail true;", "docSyntax": "enableSatNormalOnDetail state", "syntax": "enableSatNormalOnDetail state"}, "enableSaving": {"version": "CMD", "tags": "", "description": "Enable / disable saving of the game with an optional autosave.", "example": "enableSaving false; //\u00a0saving disabled, does autosave - same as [false, true] enableSaving true; //\u00a0saving enabled, does not autosave - same as [true, false] enableSaving [false, false]; //\u00a0saving disabled, does not autosave enableSaving [false, true]; //\u00a0saving disabled, does autosave enableSaving [true, false]; //\u00a0saving enabled, doesn't autosave enableSaving [true, true]; //\u00a0saving enabled, does autosave", "docSyntax": "enableSaving enable", "syntax": "enableSaving <bool>"}, "enableSentences": {"version": "CMD", "tags": "", "description": "Enables radio transmissions to be heard and seen on screen. It does not affect KBTell conversations.", "example": "enableSentences false;", "docSyntax": "enableSentences enable", "syntax": "enableSentences <bool>"}, "enableSimulation": {"version": "CMD", "tags": "", "description": "Enables / disables simulation for the given entity, e.g its animation and physics; it will still be able to take damage and report enemies. This command will affect entity simulation only locally. For a global and JIP enabled alternative, see enableSimulationGlobal.", "example": "player enableSimulation false;", "docSyntax": "entity enableSimulation state", "syntax": "entity enableSimulation state"}, "enableSimulationGlobal": {"version": "CMD", "tags": "", "description": "Enable or disable simulation for given entity, globally. Has the same effect as enableSimulation when used in singleplayer.", "example": "_myObject enableSimulationGlobal false;", "docSyntax": "entity enableSimulationGlobal enable", "syntax": "entity enableSimulationGlobal <bool>"}, "enableStamina": {"version": "CMD", "tags": "", "description": "Enable/disable stamina system", "example": "player enableStamina true;", "docSyntax": "unit enableStamina enabled", "syntax": "<objUnit> enableStamina <bool>"}, "enableStressDamage": {"version": "CMD", "tags": "", "description": "Toggles stress damage in Advanced Flight Model, which otherwise could be manually toggles in game setting: Options > Game > Helicopter Flight Model > Advanced > Stress Damage.", "example": "if (difficultyEnabledRTD) then { enableStressDamage true };", "docSyntax": "enableStressDamage state", "syntax": "enableStressDamage state"}, "enableTeamSwitch": {"version": "CMD", "tags": "", "description": "Enable / disable Team Switch. The default setting is enabled.", "example": "enableTeamSwitch true;", "docSyntax": "enableTeamSwitch enable", "syntax": "enableTeamSwitch <bool>"}, "enableTraffic": {"version": "CMD", "tags": "", "description": "Enable ambient traffic.", "example": "enableTraffic true;", "docSyntax": "enableTraffic enable", "syntax": "enableTraffic <bool>"}, "enableUAVConnectability": {"version": "CMD", "tags": "", "description": "Enables unit's AV terminal(s) connecting to UAV.", "example": "unit enableUAVConnectability [uav, true];", "docSyntax": "object enableUAVConnectability [uav, checkAllItems]", "syntax": "<object> enableUAVConnectability [uav,checkAllItems]"}, "enableUAVWaypoints": {"version": "CMD", "tags": "", "description": "Enables/disables the option for player to set waypoints for UAV in AV terminal.", "example": "_uav enableUAVWaypoints false; hint str waypointsEnabledUAV _uav; //\u00a0returns false", "docSyntax": "uav enableUAVWaypoints enable", "syntax": "uav enableUAVWaypoints <bool>"}, "enableVehicleCargo": {"version": "CMD", "tags": "", "description": "Enable/disable option to transport other vehicles (if configured) or be transported.", "example": "vehicle enableVehicleCargo true;", "docSyntax": "vehicle enableVehicleCargo enable", "syntax": "<objVehicle> enableVehicleCargo <bool>"}, "enableVehicleSensor": {"version": "CMD", "tags": "", "description": "Enable/disable given sensor", "example": "vehicle player enableVehicleSensor [\"PassiveRadarSensorComponent\", false]; //\u00a0disables passive radar", "docSyntax": "vehicle enableVehicleSensor [componentName, enabled]", "syntax": "<objVehicle> enableVehicleSensor [componentName,<bool>]"}, "enableWeaponDisassembly": {"version": "CMD", "tags": "", "description": "Enables or disables disassembly of static weapons. Could be applied to local player, to another unit or to static weapon directly.", "example": "enableWeaponDisassembly false;", "docSyntax": "enableWeaponDisassembly enable", "syntax": "enableWeaponDisassembly <bool>"}, "endl": {"version": "CMD", "tags": "", "description": "Creates a string containing a line break, similar to lineBreak for text. The name is inspired by c++ std::endl (end line). The command returns \"\\r\\n\", which contains control characters rather than printable characters:", "example": "diag_log (\"line1\" + endl + \"line2\");", "docSyntax": "endl", "syntax": "endl"}, "endLoadingScreen": {"version": "CMD", "tags": "", "description": "Finishes loading screen started by startLoadingScreen.", "example": "startLoadingScreen [\"Loading My Mission\"]; //\u00a0code progressLoadingScreen 0.5; //\u00a0code endLoadingScreen;", "docSyntax": "endLoadingScreen", "syntax": "endLoadingScreen"}, "endMission": {"version": "CMD", "tags": "", "description": "Finish the mission. Mission saves are deleted. Use failMission if they should not be.", "example": "endMission \"END1\";", "docSyntax": "endMission endType", "syntax": "endMission endType"}, "engineOn": {"version": "CMD", "tags": "", "description": "Activates and deactivates the engine of a vehicle.", "example": "if (!isEngineOn _jeep) then { _jeep engineOn true; };", "docSyntax": "vehicle engineOn state", "syntax": "<objVehicle> engineOn state"}, "enginesIsOnRTD": {"version": "CMD", "tags": "", "description": "Returns which engines are producing some work.", "example": "_enginesTaru = enginesIsOnRTD _taru; //\u00a0returns [true, true]", "docSyntax": "enginesIsOnRTD RTD_helicopter", "syntax": "enginesIsOnRTD RTD_helicopter"}, "enginesPowerRTD": {"version": "CMD", "tags": "", "description": "Returns power produced by engines in Watts.", "example": "_array = enginesPowerRTD vehicle player;", "docSyntax": "enginesPowerRTD RTD_helicopter", "syntax": "enginesPowerRTD RTD_helicopter"}, "enginesRpmRTD": {"version": "CMD", "tags": "", "description": "Returns all engines RPM.", "example": "enginesRpmRTD RTD_helicopter params [\"_RPMEngine1\",\"_RPMEngine2\"];", "docSyntax": "enginesRpmRTD RTD_helicopter", "syntax": "enginesRpmRTD RTD_helicopter"}, "enginesTorqueRTD": {"version": "CMD", "tags": "", "description": "Torque produced by engines in N\u00b7m (Newton \u00d7 meter).", "example": "_UH80_E1 = (enginesTorqueRTD _UH80) select 0; //\u00a0engine 1 Torque _UH80_E2 = (enginesTorqueRTD _UH80) select 1; //\u00a0engine 2 Torque", "docSyntax": "enginesTorqueRTD RTD_helicopter", "syntax": "enginesTorqueRTD RTD_helicopter"}, "entities": {"version": "CMD", "tags": "", "description": "Returns a list of all alive and dead entities of the given type or deriving from the given type. Units in vehicles are ignored with the primary syntax.", "example": "_allcars = entities \"Car\";", "docSyntax": "entities type", "syntax": "entities type"}, "environmentEnabled": {"version": "CMD", "tags": "", "description": "Returns status of enableEnvironment command", "example": "private _enabled = environmentEnabled;", "docSyntax": "environmentEnabled", "syntax": "environmentEnabled"}, "environmentVolume": {"version": "CMD", "tags": "", "description": "Returns the current environment volume (set by fadeEnvironment)", "example": "hint str environmentVolume;", "docSyntax": "environmentVolume", "syntax": "environmentVolume"}, "equipmentDisabled": {"version": "CMD", "tags": "", "description": "Returns current state for NVG and TI equipment availability.", "example": "equipmentDisabled tank1 params [\"_nvg\", \"_ti\"];", "docSyntax": "equipmentDisabled vehicle", "syntax": "equipmentDisabled <objVehicle>"}, "estimatedEndServerTime": {"version": "CMD", "tags": "", "description": "Estimated end of MP game in seconds converted to serverTime.", "example": "Estimated minutes left:", "docSyntax": "estimatedEndServerTime", "syntax": "estimatedEndServerTime"}, "estimatedTimeLeft": {"version": "CMD", "tags": "", "description": "Sets the estimated time left in the game that is shown in the \"Game in progress\" screen or in the master browser.", "example": "estimatedTimeLeft 600; //\u00a010 min", "docSyntax": "estimatedTimeLeft seconds", "syntax": "estimatedTimeLeft seconds"}, "evalObjectArgument": {"version": "CMD", "tags": "", "description": "Return argument in mission editor of a given object.", "example": "//\u00a0returns string \"[1009.0351, 1319.4928]\" (findDisplay 128 displayCtrl 51) getObjectArgument [\"_unit_1\", \"POSITION\"] //\u00a0returns array [1009.0351, 1319.4928] (findDisplay 128 displayCtrl 51) evalObjectArgument [\"_unit_1\", \"POSITION\"]", "docSyntax": "map evalObjectArgument [object, argument]", "syntax": "<objMap> evalObjectArgument [<object>,argument]"}, "everyBackpack": {"version": "CMD", "tags": "", "description": "Returns array of backpacks stored in given crate or vehicle. Used for accessing backpack content of a backpack on ground.", "example": "everyBackpack cursorTarget;", "docSyntax": "everyBackpack box", "syntax": "everyBackpack box"}, "everyContainer": {"version": "CMD", "tags": "", "description": "Returns array of all containers (uniforms, vests, backpacks) stored in given crate or vehicle. Used for accessing containers content stored in ammo box or ground holder.", "example": "everyContainer cursorTarget; /* returns e.g [ [\"V_PlateCarrier1_rgr\",2bc06b00# 163955: dummyweapon.p3d], [\"U_B_CombatUniform_mcam\",2bc07900# 163954: dummyweapon.p3d] ] */", "docSyntax": "everyContainer object", "syntax": "everyContainer <object>"}, "execEditorScript": {"version": "CMD", "tags": "", "description": "Execute an editor script for the specified object.", "example": "_map execEditorScript [\"_team_1\",\"create\"];", "docSyntax": "map execEditorScript [object,script]", "syntax": "<objMap> execEditorScript [<object>,script]"}, "exp": {"version": "CMD", "tags": "", "description": "Exponential function with the base e. Equal to e^x.", "example": "_e = exp 1; //\u00a0Returns e (2.7182...)", "docSyntax": "exp x", "syntax": "exp x"}, "expectedDestination": {"version": "CMD", "tags": "", "description": "Return expected destination of unit as an array.", "example": "_data = expectedDestination player;", "docSyntax": "expectedDestination person", "syntax": "expectedDestination <objUnit>"}, "exportJIPMessages": {"version": "CMD", "tags": "", "description": "Export list of JIP to a file.", "example": "exportJIPMessages \"myFileNameWithoutExtension\";", "docSyntax": "exportJIPMessages fileName", "syntax": "exportJIPMessages fileName"}, "exportLandscapeXYZ": {"version": "CMD", "tags": "", "description": "Exports landscape as XYZ file.", "example": "exportLandscapeXYZ \"myLandscape.txt\";", "docSyntax": "exportLandscapeXYZ filename", "syntax": "exportLandscapeXYZ filename"}, "eyeDirection": {"version": "CMD", "tags": "", "description": "Returns the direction object is watching (eyes, or a vehicle primary observer).", "example": "Can = \"Land_Can_V3_F\" createVehicle position player; onEachFrame { Can setPosASL [ (eyePos player select 0) + (eyeDirection player select 0), (eyePos player select 1) + (eyeDirection player select 1), (eyePos player select 2) + (eyeDirection player select 2) ] };", "docSyntax": "eyeDirection unit", "syntax": "eyeDirection <objUnit>"}, "eyePos": {"version": "CMD", "tags": "", "description": "Returns the object's eyes / main turret position.", "example": "_eyesPos = eyePos player;", "docSyntax": "eyePos object", "syntax": "eyePos <object>"}, "face": {"version": "CMD", "tags": "", "description": "Returns the face of a person.", "example": "face player;", "docSyntax": "face person", "syntax": "face <objUnit>"}, "faction": {"version": "CMD", "tags": "", "description": "Gets unit faction. Factions were introduced in Arma 2 and are defined under CfgFactionClasses.", "example": "private _playerFaction = faction player;", "docSyntax": "faction unitName", "syntax": "faction <objUnit>"}, "fadeEnvironment": {"version": "CMD", "tags": "", "description": "Changes the master environment volume smoothly within the given time and is different from enableEnvironment global mute option. The default volume is 1.", "example": "5 fadeEnvironment 0.1;", "docSyntax": "time fadeEnvironment volume", "syntax": "<scalar> fadeEnvironment volume"}, "fadeMusic": {"version": "CMD", "tags": "", "description": "Changes the current music volume to the given value smoothly within the given time.", "example": "5 fadeMusic 0; //\u00a0fade current music volume to 0 in 5 sec", "docSyntax": "time fadeMusic volume", "syntax": "<scalar> fadeMusic volume"}, "fadeRadio": {"version": "CMD", "tags": "", "description": "Changes the radio volume smoothly within the given time.", "example": "5 fadeRadio 0.1;", "docSyntax": "time fadeRadio volume", "syntax": "<scalar> fadeRadio volume"}, "fadeSound": {"version": "CMD", "tags": "", "description": "Changes the sound volume smoothly within the given time.", "example": "5 fadeSound 0;", "docSyntax": "time fadeSound volume", "syntax": "<scalar> fadeSound volume"}, "fadeSpeech": {"version": "CMD", "tags": "", "description": "Changes the master speech volume smoothly within the given time. The default volume is 1.0. Some of the sounds that play through speech channel are:", "example": "5 fadeSpeech 0.1;", "docSyntax": "time fadeSpeech volume", "syntax": "<scalar> fadeSpeech volume"}, "failMission": {"version": "CMD", "tags": "", "description": "Finish the mission. If the server is set to run persistent mission, failMission will not end the mission when last player gets kicked to the lobby. Use endMission to end the mission. The end type can be:", "example": "failMission \"LOSER\";", "docSyntax": "failMission endtype", "syntax": "failMission endtype"}, "fileExists": {"version": "CMD", "tags": "", "description": "Checks if file on given path exists. Uses same path resolve code as loadFile.", "example": "fileExists \"\\a3\\mySuperPath\\bestFileEver.paa\"; //\u00a0returns false", "docSyntax": "fileExists path", "syntax": "fileExists path"}, "fillWeaponsFromPool": {"version": "CMD", "tags": "", "description": "Adds magazines from the campaign pool to the given unit, depending on his weapons. Available in campaigns only.", "example": "fillWeaponsFromPool _soldier;", "docSyntax": "fillWeaponsFromPool unit", "syntax": "fillWeaponsFromPool <objUnit>"}, "find": {"version": "CMD", "tags": "", "description": "Searches for an array element within an array or an ANSI string within an ANSI string.", "example": "[\"Apples\", \"Oranges\", \"Pears\"] find \"Oranges\"; //\u00a0returns 1", "docSyntax": "array find element", "syntax": "<array> find element"}, "findAny": {"version": "CMD", "tags": "", "description": "Returns the zero-based index of the first element in array A that also exists in array B. If no common elements exist it returns -1.", "example": "[0,1,2,3,4] findAny [2,4,6,8]; //\u00a0returns 2", "docSyntax": "searchIn findAny toFind", "syntax": "searchIn findAny toFind"}, "findCover": {"version": "CMD", "tags": "", "description": "Returns the object around where the unit finds cover. The minDist, visibilityPosition and ignoreObject parameters are optional.", "example": "unit1 findCover [ASLToATL aimPos unit2, 30];", "docSyntax": "object findCover [position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]", "syntax": "<object> findCover [position,hidePosition,maxDist,minDist,visibilityPosition,ignoreObject]"}, "findDisplay": {"version": "CMD", "tags": "", "description": "Finds a display by its IDD which can either be defined in missionConfigFile (description.ext) or configFile (config.cpp) or by its UI On Texture's unique name (see displayUniqueName).", "example": "[] spawn { waitUntil { !isNull findDisplay 46 }; hint \"Mission Display is now available!\"; };", "docSyntax": "findDisplay idd", "syntax": "findDisplay idd"}, "findEditorObject": {"version": "CMD", "tags": "", "description": "Return object that matches the provided reference.", "example": "-", "docSyntax": "map findEditorObject value", "syntax": "<objMap> findEditorObject <scalar>"}, "findEmptyPosition": {"version": "CMD", "tags": "", "description": "Searches for an empty area around the specified position, starting from the center looking for an empty areaRadius and looks as far away as areaRadius + maxDistance. This command ignores moving objects present within the search area. The search area can be preloaded with findEmptyPositionReady command.", "example": "_position = getPosASL player findEmptyPosition [0, 100];", "docSyntax": "center findEmptyPosition [areaRadius, maxDistance, vehicleType]", "syntax": "center findEmptyPosition [areaRadius,maxDistance,vehicleType]"}, "findEmptyPositionReady": {"version": "CMD", "tags": "", "description": "Preloads area to be used with findEmptyPosition command and returns true when area is ready. The size of the area preloaded is from center - radius - maxDistance to center + radius + maxDistance", "example": "Preload aread within 500m:", "docSyntax": "center findEmptyPositionReady [radius, maxDistance]", "syntax": "center findEmptyPositionReady [radius,maxDistance]"}, "findIf": {"version": "CMD", "tags": "", "description": "Searches for an element within array for which the code evaluates to true. Returns the zero-based index on success or -1 if not found.", "example": "[unit1, unit2, unit3] findIf {not alive _x}; //\u00a0return index of the first dead unit)", "docSyntax": "array findIf code", "syntax": "<array> findIf <code>"}, "findNearestEnemy": {"version": "CMD", "tags": "", "description": "Finds the nearest enemy to the specified position. Returns a null object if the object's group does not know about any enemies. This command will return nearest object that is known to the unit and is considered enemy. An empty vehicle that is part of enemy group assets (see addVehicle) can be returned as valid nearest target.", "example": "_myNearestEnemy = (units _myGroup select 0) findNearestEnemy player;", "docSyntax": "object findNearestEnemy position", "syntax": "<object> findNearestEnemy position"}, "finishMissionInit": {"version": "CMD", "tags": "", "description": "Finish world initialization before mission is launched.", "example": "finishMissionInit", "docSyntax": "finishMissionInit", "syntax": "finishMissionInit"}, "finite": {"version": "CMD", "tags": "", "description": "Returns true if the provided number is finite (not infinite and a valid number).", "example": "finite 123; //\u00a0returns true", "docSyntax": "finite number", "syntax": "finite <scalar>"}, "fire": {"version": "CMD", "tags": "", "description": "Forces a unit to fire the given weapon.", "example": "_soldier fire \"M16\";", "docSyntax": "unit fire muzzle", "syntax": "<objUnit> fire muzzle"}, "fireAtTarget": {"version": "CMD", "tags": "", "description": "Remotely forces a unit to fire the given weapon. See also BIS_fnc_fire.", "example": "_handle = this fireAtTarget [groundtarget1, \"HellfireLauncher\"];", "docSyntax": "sourceVehicle fireAtTarget [targetVehicle, weaponMuzzleName]", "syntax": "sourceVehicle fireAtTarget [targetVehicle,weaponMuzzleName]"}, "firstBackpack": {"version": "CMD", "tags": "", "description": "Returns the first stored backpack.", "example": "myVariable = firstBackpack myBox;", "docSyntax": "firstBackpack box", "syntax": "firstBackpack box"}, "flag": {"version": "CMD", "tags": "", "description": "Returns the original flag pole of the flag the unit is carrying.", "example": "_flag = flag _soldier;", "docSyntax": "flag unit", "syntax": "<objFlag> <objUnit>"}, "flagAnimationPhase": {"version": "CMD", "tags": "", "description": "Returns flag position on the flag pole.", "example": "flagAnimationPhase _flag1;", "docSyntax": "flagAnimationPhase flag", "syntax": "flagAnimationPhase <objFlag>"}, "flagOwner": {"version": "CMD", "tags": "", "description": "Returns the global owner of a flag. A getter for setFlagOwner. Note that owner of a flag is Object rather than Number, as how it is usually with other owner commands", "example": "_person = flagOwner _flagOne;", "docSyntax": "flagOwner flag", "syntax": "flagOwner <objFlag>"}, "flagSide": {"version": "CMD", "tags": "", "description": "Returns Side of the local instance of the flag. A getter for setFlagSide.", "example": "_flagSide = flagSide flag;", "docSyntax": "flagSide flag", "syntax": "flagSide <objFlag>"}, "flagTexture": {"version": "CMD", "tags": "", "description": "Returns texture of the local instance of the flag. A getter for setFlagTexture. It will not return flag textures applied using forceFlagTexture, use getForcedFlagTexture for that.", "example": "_flagTexture = flagTexture _flag1;", "docSyntax": "flagTexture flagCarrier", "syntax": "flagTexture flagCarrier"}, "flatten": {"version": "CMD", "tags": "", "description": "Flattens an array.", "example": "flatten [1, [2], [[3]], [[[4]]]]; //\u00a0returns [1, 2, 3, 4]", "docSyntax": "flatten array", "syntax": "flatten <array>"}, "fleeing": {"version": "CMD", "tags": "", "description": "Checks if a unit is fleeing.", "example": "if (fleeing soldier_1) then {player sideChat \"We have won!\"} else {player sideChat \"Keep fighting!\"};", "docSyntax": "fleeing unit", "syntax": "fleeing <objUnit>"}, "floor": {"version": "CMD", "tags": "", "description": "Returns the next lowest integer in relation to the provided number.", "example": "floor 5.1; //\u00a0result is 5 floor 5.999; //\u00a0result is 5 floor -2.01; //\u00a0result is -3 floor -2.99; //\u00a0result is -3", "docSyntax": "floor num", "syntax": "floor num"}, "flyInHeight": {"version": "CMD", "tags": "", "description": "Sets the flying altitude for aircraft relatively to the ground surface. Avoid too low altitudes, as helicopters and planes won't evade trees and obstacles on the ground. The default flying altitude is 100 meters.", "example": "_helicopter flyInHeight 40;", "docSyntax": "aircraft flyInHeight altitude", "syntax": "aircraft flyInHeight <scalar>"}, "flyInHeightASL": {"version": "CMD", "tags": "", "description": "Sets the minimal ASL height. Final height is flyInHeight max flyInHeightASL - the higher altitude has priority.", "example": "cobraOne flyInHeightASL [200, 100, 400];", "docSyntax": "aircraft flyInHeightASL [standardAltitude, combatAltitude, stealthAltitude]", "syntax": "aircraft flyInHeightASL [standardAltitude,combatAltitude,stealthAltitude]"}, "focusedCtrl": {"version": "CMD", "tags": "", "description": "Returns display's focused control.", "example": "private _focusedCtrl = focusedCtrl findDisplay 12;", "docSyntax": "focusedCtrl display", "syntax": "focusedCtrl <uiDisplay>"}, "focusOn": {"version": "CMD", "tags": "", "description": "Returns the person the camera is focused on. If you need the vehicle, see cameraOn.", "example": "private _currentlyControlledUnit = focusOn;", "docSyntax": "focusOn", "syntax": "focusOn"}, "fog": {"version": "CMD", "tags": "", "description": "A getter for setFog. Returns the current value of the fog in range 0..1.", "example": "_foglevel = fog;", "docSyntax": "fog", "syntax": "fog"}, "fogForecast": {"version": "CMD", "tags": "", "description": "Returns the forecast fog value. A value of 0 means no fog, 1 means maximum fog.", "example": "_level = fogForecast;", "docSyntax": "fogForecast", "syntax": "fogForecast"}, "fogParams": {"version": "CMD", "tags": "", "description": "A getter for setFog (Alt Syntax). Returns extended params for the fog", "example": "private _fog = fogParams;", "docSyntax": "fogParams", "syntax": "fogParams"}, "forceAddUniform": {"version": "CMD", "tags": "", "description": "Create a new uniform and hard link it into slot (without any restrictions).", "example": "_unit forceAddUniform \"U_B_CombatUniform_mcam\";", "docSyntax": "unit forceAddUniform type", "syntax": "<objUnit> forceAddUniform type"}, "forceAtPositionRTD": {"version": "CMD", "tags": "", "description": "Adds force generator to world.", "example": "forceAtPositionRTD;", "docSyntax": "forceAtPositionRTD position", "syntax": "forceAtPositionRTD position"}, "forceCadetDifficulty": {"version": "CMD", "tags": "", "description": "Forces showCadetHints and showCadetWP global Cadet Arma 3 difficulty, returns previous settings.", "example": "private _previousSettings = forceCadetDifficulty [true, false];", "docSyntax": "forceCadetDifficulty [showCadetHints, showCadetWP]", "syntax": "forceCadetDifficulty [showCadetHints,showCadetWP]"}, "forcedMap": {"version": "CMD", "tags": "", "description": "Returns if map was forced by using forceMap command or openMap command with force option", "example": "_forceMapForced = forcedMap select 0; _openMapForced = forcedMap select 1;", "docSyntax": "forcedMap", "syntax": "forcedMap"}, "forceEnd": {"version": "CMD", "tags": "", "description": "Forces mission ending (set with endMission) even if a camera effect or any another condition delays the endMission (mostly in Operation Flashpoint).", "example": "forceEnd;//\u00a0in an ending trigger to ensure no camera is delaying mission ending", "docSyntax": "forceEnd", "syntax": "forceEnd"}, "forceFlagTexture": {"version": "CMD", "tags": "", "description": "Forces a flag texture onto a flag carrier (unit, vehicle or flag pole). No flag holder is required. If \"\" is used as texture, the texture is removed. This will override regularly owned flags. This type of flag texture cannot be retrieved using flagTexture, but getForcedFlagTexture.", "example": "player forceFlagTexture \"\\A3\\Data_F\\Flags\\Flag_red_CO.paa\";", "docSyntax": "object forceFlagTexture texture", "syntax": "<object> forceFlagTexture <string>"}, "forceFollowRoad": {"version": "CMD", "tags": "", "description": "Forces the vehicle to stay on road.", "example": "car forceFollowRoad true;", "docSyntax": "vehicle forceFollowRoad state", "syntax": "<objVehicle> forceFollowRoad state"}, "forceGeneratorRTD": {"version": "CMD", "tags": "", "description": "Adds force generator to world.", "example": "forceGeneratorRTD 2;", "docSyntax": "forceGeneratorRTD index", "syntax": "forceGeneratorRTD <scalar>"}, "forceMap": {"version": "CMD", "tags": "", "description": "Opens non-interactive main map in background that overrides user screen. To force open interactive map use openMap command.", "example": "forceMap true;", "docSyntax": "forceMap show", "syntax": "forceMap show"}, "forceRespawn": {"version": "CMD", "tags": "", "description": "Forces the unit to respawn. The effect is as if the player pressed the RESPAWN button in the game pause menu; the unit is killed but there is no \"X was killed\" message and no score adjustment.", "example": "forceRespawn player;", "docSyntax": "forceRespawn unit", "syntax": "forceRespawn <objUnit>"}, "forceSpeed": {"version": "CMD", "tags": "", "description": "Force the speed limit on given object (object will never attempt to move faster than given by forceSpeed). Use negative value to return to default behaviour.", "example": "_helicopter forceSpeed 150;", "docSyntax": "object forceSpeed speed", "syntax": "<object> forceSpeed <scalar>"}, "forceUnicode": {"version": "CMD", "tags": "", "description": "List of the commands that work with forceUnicode:", "example": "copyToClipboard \"\u0434\"; //\u00a0copies \"\u00d0\u00b4\" to clipboard forceUnicode 1; copyToClipboard \"\u0434\"; //\u00a0copies \"\u0434\" to clipboard", "docSyntax": "forceUnicode mode", "syntax": "forceUnicode mode"}, "forceWalk": {"version": "CMD", "tags": "", "description": "Forces unit to walk even if run or sprint is selected.", "example": "player forceWalk true;", "docSyntax": "unit forceWalk value", "syntax": "<objUnit> forceWalk <scalar>"}, "forceWeaponFire": {"version": "CMD", "tags": "", "description": "The unit will be forced to fire weapon from the given muzzle. The weapon will not fire if firemode passed as parameter is not supported by the given muzzle. The muzzle could belong to a vehicle weapon and unit in this case will be the unit operating this weapon. Doesnt't seem to work for units in FFV positions. Works on player. See also: BIS_fnc_fire", "example": "_unit forceWeaponFire [\"arifle_MX_F\", \"Single\"]; _unit forceWeaponFire [\"hgun_ACPC2_F\", \"hgun_ACPC2_F\"]; _unit forceWeaponFire [\"HandGrenadeMuzzle\",\"HandGrenadeMuzzle\"]; _unit forceWeaponFire [\"MiniGrenadeMuzzle\",\"MiniGrenadeMuzzle\"]; _unit forceWeaponFire [\"HandGrenade_Stone\",\"HandGrenade_Stone\"]; _unit forceWeaponFire [\"SmokeShellMuzzle\",\"SmokeShellMuzzle\"]; _unit forceWeaponFire [\"ChemlightGreenMuzzle\",\"ChemlightGreenMuzzle\"]; _unit forceWeaponFire [\"IRGrenade\",\"IRGrenade\"]; _unit forceWeaponFire [\"Laserdesignator\",\"Laserdesignator\"];", "docSyntax": "unit forceWeaponFire [muzzle, firemode]", "syntax": "<objUnit> forceWeaponFire [muzzle,firemode]"}, "forceWeatherChange": {"version": "CMD", "tags": "", "description": "Forcibly applies previously set weather settings. Skips smooth transitions. This might cause lag.", "example": "0 setOvercast 1; 0 setRain 1; forceWeatherChange; //\u00a0Force immediate change overriding smooth transitions", "docSyntax": "forceWeatherChange", "syntax": "forceWeatherChange"}, "forgetTarget": {"version": "CMD", "tags": "", "description": "Resets the info a group has about a target, forcing knowsAbout value to 0.", "example": "soldier1 forgetTarget soldier2;", "docSyntax": "group forgetTarget target", "syntax": "<objGroup> forgetTarget <object>"}, "format": {"version": "CMD", "tags": "", "description": "Composes a string containing other variables or other variable types. Converts any variable type to a string. If you want to convert a string back to a number, use parseNumber.", "example": "format [\"Player:%1, player's side:%2\", player, side player]; //\u00a0returns \"Player:WEST 1-1-A:1 (Username), player's side:WEST\"", "docSyntax": "format [formatString, var1, var2, ...]", "syntax": "format [formatString,var1,var2,...]"}, "formation": {"version": "CMD", "tags": "", "description": "Returns the current formation of a group.", "example": "if (formation group player == \"wedge\") then { hint \"this is the default formation\" };", "docSyntax": "formation target", "syntax": "formation <object>"}, "formationDirection": {"version": "CMD", "tags": "", "description": "Return the direction in degrees of the 'unit' watching in formation.", "example": "_degrees = formationDirection _unit;", "docSyntax": "formationDirection unitName", "syntax": "formationDirection <objUnit>"}, "formationLeader": {"version": "CMD", "tags": "", "description": "Return leader of the formation.", "example": "if (formationLeader player != leader player) then { hint \"Formation leader is not the group leader.\"; };", "docSyntax": "formationLeader unitName", "syntax": "formationLeader <objUnit>"}, "formationMembers": {"version": "CMD", "tags": "", "description": "Return list of units (drivers) in the formation.", "example": "_drivers = formationMembers _person;", "docSyntax": "formationMembers person", "syntax": "formationMembers <objUnit>"}, "formationPosition": {"version": "CMD", "tags": "", "description": "Return position of unit in the formation.", "example": "_pos = formationPosition _unit;", "docSyntax": "formationPosition unit", "syntax": "formationPosition <objUnit>"}, "formationTask": {"version": "CMD", "tags": "", "description": "Return the current task of the unit in the formation.", "example": "_currentTask = formationTask _unit;", "docSyntax": "formationTask unit", "syntax": "formationTask <objUnit>"}, "formatText": {"version": "CMD", "tags": "", "description": "Creates a Structured Text similar to format command.", "example": "hint formatText [\"Image: %1\", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "formatText [format, argument1, argument2, ...]", "syntax": "formatText [format,argument1,argument2,...]"}, "formLeader": {"version": "CMD", "tags": "", "description": "Returns the formation leader of a given unit. This is often the same as the group leader, but not always, for example in cases when a unit is ordered to follow another unit.", "example": "if (formLeader player != leader player) then { hint \"The formation leader is different to the group leader!\"; };", "docSyntax": "formLeader unitName", "syntax": "formLeader <objUnit>"}, "freeLook": {"version": "CMD", "tags": "", "description": "Returns if freelook is active on the current machine's controlled character.", "example": "if freeLook then { systemChat \"Quit looking around, soldier!\"; };", "docSyntax": "freeLook", "syntax": "freeLook"}, "fromEditor": {"version": "CMD", "tags": "", "description": "Return if given team was inserted directly from mission editor.", "example": "_fromEditor = fromEditor _member;", "docSyntax": "fromEditor teamMember", "syntax": "fromEditor teamMember"}, "fuel": {"version": "CMD", "tags": "", "description": "Checks how much fuel is left in the gas tank of a vehicle.", "example": "if (fuel vehicle player == 0) then {hint \"The vehicle is out of fuel!\"};", "docSyntax": "fuel vehicle", "syntax": "fuel <objVehicle>"}, "fullCrew": {"version": "CMD", "tags": "", "description": "Returns an array with all crew inside given vehicle, with or without empty seats.", "example": "_list = fullCrew vehicle player; /* returns for example (on an armed WY-55 Hellcat): [ [R Alpha 1-1:1, \"driver\", -1, [], false, R Alpha 1-1:1, \"$STR_POSITION_DRIVER\"], [R Alpha 1-1:2, \"turret\", -1, [0], false, R Alpha 1-1:2, \"$STR_A3_COPILOT\"] ] */", "docSyntax": "fullCrew vehicle", "syntax": "fullCrew <objVehicle>"}, "gearIDCAmmoCount": {"version": "CMD", "tags": "", "description": "Returns ammo count of assigned magazine.", "example": "ammo = gearIDCAmmoCount _control;", "docSyntax": "gearIDCAmmoCount idc", "syntax": "gearIDCAmmoCount <scalar>"}, "gearSlotAmmoCount": {"version": "CMD", "tags": "", "description": "Returns ammo count of assigned magazine.", "example": "ammo = gearSlotAmmoCount _control;", "docSyntax": "gearSlotAmmoCount control", "syntax": "gearSlotAmmoCount <uiControl>"}, "gearSlotData": {"version": "CMD", "tags": "", "description": "Returns gear slot item name.", "example": "gearSlotData _myControl;", "docSyntax": "gearSlotData control", "syntax": "gearSlotData <uiControl>"}, "gestureState": {"version": "CMD", "tags": "", "description": "Returns the name of a unit's current gesture. Seems to be forced to lower case in Arma 3.", "example": "private _state = gestureState player;", "docSyntax": "gestureState unitName", "syntax": "gestureState <objUnit>"}, "get3DENActionState": {"version": "CMD", "tags": "", "description": "Returns state of given Eden Editor action.", "example": "if (get3DENActionState \"ToggleMap\" == 1) then {systemChat \"Editor map is open!\"};", "docSyntax": "get3DENActionState action", "syntax": "get3DENActionState action"}, "get3DENAttribute": {"version": "CMD", "tags": "", "description": "Returns the value of the given entity's attribute in Eden Editor.", "example": "//\u00a0returns variable name of the object under cursor systemChat str ((get3DENMouseOver select 1) get3DENAttribute \"name\");", "docSyntax": "entity get3DENAttribute attribute", "syntax": "entity get3DENAttribute attribute"}, "get3DENAttributes": {"version": "CMD", "tags": "", "description": "Retrieve all attributes and their values of the specified (optional) category.", "docSyntax": "entity get3DENAttributes category", "syntax": "entity get3DENAttributes category"}, "get3DENCamera": {"version": "CMD", "tags": "", "description": "Returns the camera Object used by the Eden Editor.", "example": "//\u00a0set exact yaw, pitch, and roll _y = 45; _p = -80; _r = 0; get3DENCamera setVectorDirAndUp [ [sin _y * cos _p,cos _y * cos _p,sin _p], [[sin _r,-sin _p,cos _r * cos _p],-_y] call BIS_fnc_rotateVector2D ];", "docSyntax": "get3DENCamera", "syntax": "get3DENCamera"}, "get3DENConnections": {"version": "CMD", "tags": "", "description": "Returns all connections currently present on an entity.", "example": "get3DENConnections _trigger; //\u00a0Can return [[\"WaypointActivation\",[B Alpha 4-5,0]]]", "docSyntax": "get3DENConnections entity", "syntax": "get3DENConnections entity"}, "get3DENEntity": {"version": "CMD", "tags": "", "description": "Returns Eden Entity based on its Eden ID.", "example": "myEntity = get3DENEntity 1;", "docSyntax": "get3DENEntity ID", "syntax": "get3DENEntity <scalar>"}, "get3DENEntityID": {"version": "CMD", "tags": "", "description": "Returns unique index of an Eden Entity. This number remains the same even after saving and loading the scenario.", "example": "myID = get3DENEntityID player;", "docSyntax": "get3DENEntityID entity", "syntax": "get3DENEntityID entity"}, "get3DENGrid": {"version": "CMD", "tags": "", "description": "Returns the grid increment for the given transformation type.", "example": "_currentIncrement = get3DENGrid \"t\";", "docSyntax": "get3DENGrid type", "syntax": "get3DENGrid type"}, "get3DENIconsVisible": {"version": "CMD", "tags": "", "description": "Gets visibility state of Eden Editor icons.", "example": "if (get3DENIconsVisible select 0) then {hint \"Icons are visible in the map.\";};", "docSyntax": "get3DENIconsVisible", "syntax": "get3DENIconsVisible"}, "get3DENLayer": {"version": "CMD", "tags": "", "description": "Returns the provided entity's layer ID.", "example": "hint format [\"Entity %1 is in layer %2\", typeOf _entity, get3DENLayer _entity];", "docSyntax": "get3DENLayer edenEntity", "syntax": "get3DENLayer edenEntity"}, "get3DENLayerEntities": {"version": "CMD", "tags": "", "description": "Return all entities and sub-layer in Eden Entity layer. In order to get all layer entities during a scenario use getMissionLayerEntities.", "example": "_myLayer = -1 add3DENLayer \"CTRG\"; player set3DENLayer _myLayer; _entities = get3DENLayerEntities _myLayer;", "docSyntax": "get3DENLayerEntities layerID", "syntax": "get3DENLayerEntities layerID"}, "get3DENLinesVisible": {"version": "CMD", "tags": "", "description": "Get visibility state of Eden Editor lines.", "example": "if (get3DENLinesVisible select 0) then { hint \"Lines are visible in the map.\"; };", "docSyntax": "get3DENLinesVisible", "syntax": "get3DENLinesVisible"}, "get3DENMissionAttribute": {"version": "CMD", "tags": "", "description": "Return value of scenario attribute. For a list of all available mission attributes see Mission Attributes.", "example": "systemChat str (\"Multiplayer\" get3DENMissionAttribute \"respawn\");", "docSyntax": "section get3DENMissionAttribute class", "syntax": "section get3DENMissionAttribute class"}, "get3DENMissionAttributes": {"version": "CMD", "tags": "", "description": "Retrieve all attributes and their values from the specified section/category (category is optional).", "example": "private _result = \"Multiplayer\" get3DENMissionAttributes \"\";", "docSyntax": "section get3DENMissionAttributes category", "syntax": "section get3DENMissionAttributes category"}, "get3DENMouseOver": {"version": "CMD", "tags": "", "description": "Returns the Eden Entity the mouse is hovering over in Eden Editor.", "example": "systemChat str get3DENMouseOver; //\u00a0returns e.g [\"Object\", B Alpha 1-1:1]", "docSyntax": "get3DENMouseOver", "syntax": "get3DENMouseOver"}, "get3DENParent": {"version": "CMD", "tags": "", "description": "Obtain the provided entity's parent.", "example": "private _parent = get3DENParent _myObject;", "docSyntax": "get3DENParent entity", "syntax": "get3DENParent entity"}, "get3DENSelected": {"version": "CMD", "tags": "", "description": "Returns an array of all selected Eden Editor Entities of the given type.", "example": "get3DENSelected \"\"; /* [ [B Alpha 2-1:1], // objects [B Alpha 2-1], // groups [164494: <no shape>], // triggers [<No center> Charlie 1-2:4], // logic B Alpha 2-1,0, // waypoints [\"Hotel_Whiskey\"] // markers ] */", "docSyntax": "get3DENSelected type", "syntax": "get3DENSelected type"}, "getAimingCoef": {"version": "CMD", "tags": "", "description": "Get current aiming coefficient (higher ~ less precise, default is 1)", "example": "_coef = getAimingCoef player", "docSyntax": "getAimingCoef unit", "syntax": "getAimingCoef <objUnit>"}, "getAllEnv3DSoundControllers": {"version": "CMD", "tags": "", "description": "Returns an array containing the names and values of environmental 2D sound controllers, variables that can be used in simple expressions when configuring sounds.", "example": "getAllEnv3DSoundControllers _thatTreeOverThere; /* returns e.g [ [\"rain\",0], [\"night\",0], [\"wind\",0.161588], ... ] */", "docSyntax": "getAllEnv3DSoundControllers object", "syntax": "getAllEnv3DSoundControllers <object>"}, "getAllEnvSoundControllers": {"version": "CMD", "tags": "", "description": "Returns an array containing the names and values of environmental 2D sound controllers, variables that can be used in simple expressions when configuring sounds.", "example": "getAllEnvSoundControllers position player; /* returns e.g [ [\"rain\",0], [\"night\",0], [\"windy\",0.161588], ... ] */", "docSyntax": "getAllEnvSoundControllers position", "syntax": "getAllEnvSoundControllers position"}, "getAllHitPointsDamage": {"version": "CMD", "tags": "", "description": "Returns 3 arrays for easy cross reference: 1st - array of hit point names, 2nd - array of hit selection names, 3rd - array of damage values. All values in all arrays are ordered accordingly to hit part index for convenience and for use in setHitIndex and getHitIndex. Levels of damage are:", "example": "getAllHitPointsDamage player; //[ //[\"hitface\",\"hitneck\",\"hithead\",\"hitpelvis\",\"hitabdomen\",\"hitdiaphragm\",\"hitchest\",\"hitbody\",\"hitarms\",\"hithands\",\"hitlegs\",\"incapacitated\"], //[\"face_hub\",\"neck\",\"head\",\"pelvis\",\"spine1\",\"spine2\",\"spine3\",\"body\",\"arms\",\"hands\",\"legs\",\"body\"], //[0,0,0,0,0,0,0,0,0,0,0,0] //]", "docSyntax": "getAllHitPointsDamage entity", "syntax": "getAllHitPointsDamage entity"}, "getAllOwnedMines": {"version": "CMD", "tags": "", "description": "Gets all mine objects this unit has ownership over.", "example": "_mines = getAllOwnedMines player;", "docSyntax": "getAllOwnedMines unit", "syntax": "getAllOwnedMines <objUnit>"}, "getAllPylonsInfo": {"version": "CMD", "tags": "", "description": "Return an array with the vehicle's all pylons info.", "example": "getAllPylonsInfo vehicle player; /* Executed on an Mi-48 Kajman: [ [1,\"PylonLeft1\",[0],\"PylonRack_4Rnd_LG_scalpel\",4,\"0:10000646\"], [2,\"PylonLeft2\",[0],\"PylonRack_19Rnd_Rocket_Skyfire\",19,\"0:10000648\"], [3,\"PylonRight2\",[0],\"PylonRack_19Rnd_Rocket_Skyfire\",19,\"0:10000649\"], [4,\"PylonRight1\",[0],\"PylonRack_4Rnd_LG_scalpel\",4,\"0:10000650\"] ] */", "docSyntax": "getAllPylonsInfo vehicle", "syntax": "getAllPylonsInfo <objVehicle>"}, "getAllSoundControllers": {"version": "CMD", "tags": "", "description": "Returns an array containing names and values of the sound controllers that can be used in simple expressions when configuring sounds.", "example": "getAllSoundControllers vehicle player; /* returns e.g [ [\"rpm\",0], [\"randomizer\",0.874332], [\"speed\",0], [\"thrust\",0], ... ] */", "docSyntax": "getAllSoundControllers vehicle", "syntax": "getAllSoundControllers <objVehicle>"}, "getAllUnitTraits": {"version": "CMD", "tags": "", "description": "Returns unit traits (native or set by setUnitTrait).", "example": "/* Could return something like this: [ [\"Medic\", false], [\"Engineer\", false], [\"ExplosiveSpecialist\", false], [\"UavHacker\", false], [\"CamouflageCoef\", 1], [\"AudibleCoef\", 1], [\"LoadCoef\", 1], [\"test\", \"custom\"] ] */ private _playerTraits = getAllUnitTraits player;", "docSyntax": "getAllUnitTraits unit", "syntax": "getAllUnitTraits <objUnit>"}, "getAmmoCargo": {"version": "CMD", "tags": "", "description": "Returns the amount (1 is full) of ammo resources in the cargo space of a rearm vehicle.", "example": "value = getAmmoCargo myVehicleName;", "docSyntax": "getAmmoCargo vehicle", "syntax": "getAmmoCargo <objVehicle>"}, "getAnimAimPrecision": {"version": "CMD", "tags": "", "description": "Returns aim precision for current animation", "example": "private _aimPrecision = getAnimAimPrecision player;", "docSyntax": "getAnimAimPrecision unit", "syntax": "getAnimAimPrecision <objUnit>"}, "getAnimSpeedCoef": {"version": "CMD", "tags": "", "description": "Get coefficient for animation speed.", "example": "if (getAnimSpeedCoef player > 1) then { hint \"Speedy Gonzales!\" };", "docSyntax": "getAnimSpeedCoef unit", "syntax": "getAnimSpeedCoef <objUnit>"}, "getArray": {"version": "CMD", "tags": "", "description": "Extract array from config entry.", "example": "_array = getArray (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"threat\");", "docSyntax": "getArray config", "syntax": "getArray config"}, "getArtilleryAmmo": {"version": "CMD", "tags": "", "description": "Get list of all available magazines of artillery units on the list. Command returns only unique magazine types and doesn't contain any information about which unit has which magazine.", "example": "if (\"8Rnd_82mm_Mo_Flare_white\" in getArtilleryAmmo [ _mortar1, _mortar2, _mortar3, _mortar4 ]) then { hint \"Sir, we have white flares, Sir!\"; };", "docSyntax": "getArtilleryAmmo artilleryList", "syntax": "getArtilleryAmmo artilleryList"}, "getArtilleryComputerSettings": {"version": "CMD", "tags": "", "description": "Returns settings from artillery computer currently opened by player.", "example": "hint str getArtilleryComputerSettings; //[\"Semi (medium)\",\"HE Mortar Shells\",0]", "docSyntax": "getArtilleryComputerSettings", "syntax": "getArtilleryComputerSettings"}, "getArtilleryETA": {"version": "CMD", "tags": "", "description": "Returns ETA to the target in seconds for given artillery unit based on target position and used magazine, -1 if target can't be hit.", "example": "_mortar getArtilleryETA [getPos _target, getArtilleryAmmo [_mortar] select 0];", "docSyntax": "unit getArtilleryETA [targetPosition, magazineType]", "syntax": "<objUnit> getArtilleryETA [targetPosition,magazineType]"}, "getAssetDLCInfo": {"version": "CMD", "tags": "", "description": "Returns DLC information about given object or model.", "example": "getAssetDLCInfo player;", "docSyntax": "getAssetDLCInfo asset", "syntax": "getAssetDLCInfo asset"}, "getAssignedCuratorLogic": {"version": "CMD", "tags": "", "description": "Returns curator logic to which given player has access.", "example": "(getAssignedCuratorLogic player) removeCuratorEditableObjects [allDead, true];", "docSyntax": "getAssignedCuratorLogic player", "syntax": "getAssignedCuratorLogic <objUnit>"}, "getAssignedCuratorUnit": {"version": "CMD", "tags": "", "description": "Returns unit assigned to curator logic.", "example": "_curatorUnit = getAssignedCuratorUnit (allCurators select 0); _curatorUnit joinAs [createGroup civilian, 0];", "docSyntax": "getAssignedCuratorUnit curatorObj", "syntax": "getAssignedCuratorUnit <objCurator>"}, "getAttackTarget": {"version": "CMD", "tags": "", "description": "Returns the target given unit is engaging.", "example": "private _unitsTarget = getAttackTarget _unit;", "docSyntax": "getAttackTarget unit", "syntax": "getAttackTarget <objUnit>"}, "getAudioOptionVolumes": {"version": "CMD", "tags": "", "description": "Returns profile audio volumes.", "example": "getAudioOptionVolumes params [\"_effects\", \"_music\", \"_radio\", \"_von\", \"_ui\", \"_map\"];", "docSyntax": "getAudioOptionVolumes", "syntax": "getAudioOptionVolumes"}, "getBackpackCargo": {"version": "CMD", "tags": "", "description": "Returns all backpack types and count from the cargo space.", "example": "_content = getBackpackCargo carName;", "docSyntax": "getBackpackCargo object", "syntax": "getBackpackCargo <object>"}, "getBleedingRemaining": {"version": "CMD", "tags": "", "description": "Returns how many seconds injured unit will continue leaving blood trail. If unit damage is < 0.1, the return value is 0 and unit doesn't leave any blood trail. Use setBleedingRemaining to set different remaining time.", "example": "_bleedingRemaining = getBleedingRemaining _unit;", "docSyntax": "getBleedingRemaining unit", "syntax": "getBleedingRemaining <objUnit>"}, "getBurningValue": {"version": "CMD", "tags": "", "description": "Returns how much the unit is exposed to fire damage.", "example": "private _fireDamage = getBurningValue player;", "docSyntax": "getBurningValue unit", "syntax": "getBurningValue <objUnit>"}, "getCalculatePlayerVisibilityByFriendly": {"version": "CMD", "tags": "", "description": "Returns true if visibility of player by friendly units is calculated.", "example": "if (!getCalculatePlayerVisibilityByFriendly) then { calculatePlayerVisibilityByFriendly true; };", "docSyntax": "getCalculatePlayerVisibilityByFriendly", "syntax": "getCalculatePlayerVisibilityByFriendly"}, "getCameraViewDirection": {"version": "CMD", "tags": "", "description": "Returns the direction unit is looking in render time scope. While for AI the origin for the view direction vector can be taken from eyePos unit, for human player the origin should be taken from player camera position positionCameraToWorld [0,0,0]", "example": "Draw AI eye direction (green), weapon direction (red) and camera direction (blue) in 3D:", "docSyntax": "getCameraViewDirection unit", "syntax": "getCameraViewDirection <objUnit>"}, "getCargoIndex": {"version": "CMD", "tags": "", "description": "Returns index of the unit in cargo. -1 if not in cargo.", "example": "player moveInCargo heli; hint str (heli getCargoIndex player);", "docSyntax": "vehicle getCargoIndex unit", "syntax": "<objVehicle> getCargoIndex <objUnit>"}, "getCenterOfMass": {"version": "CMD", "tags": "", "description": "Returns center of mass of an object.", "example": "_com = getCenterOfMass _myCar;", "docSyntax": "getCenterOfMass object", "syntax": "getCenterOfMass <object>"}, "getClientState": {"version": "CMD", "tags": "", "description": "Returns client state in network game. Works on both, client and dedicated server. The following states are possible:", "example": "_state = getClientState;", "docSyntax": "getClientState", "syntax": "getClientState"}, "getClientStateNumber": {"version": "CMD", "tags": "", "description": "Returns client state in network game. Works on both, client and dedicated server. The following states are possible:", "example": "_state = getClientStateNumber;", "docSyntax": "getClientStateNumber", "syntax": "getClientStateNumber"}, "getCompatiblePylonMagazines": {"version": "CMD", "tags": "", "description": "Get array of compatible pylon magazines", "example": "//\u00a0returns array of arrays containing all compatible magazines vehicle player getCompatiblePylonMagazines 0;", "docSyntax": "vehicle getCompatiblePylonMagazines pylon", "syntax": "<objVehicle> getCompatiblePylonMagazines pylon"}, "getConnectedUAV": {"version": "CMD", "tags": "", "description": "Returns UAV/UGV vehicle if person has connection to some UAV. To return the AI unit which player controls, see getConnectedUAVUnit.", "example": "getConnectedUAV player;", "docSyntax": "getConnectedUAV person", "syntax": "getConnectedUAV <objUnit>"}, "getConnectedUAVUnit": {"version": "CMD", "tags": "", "description": "Returns UAV/UGV AI unit, which player is controlling. To return UAV vehicle, see getConnectedUAV", "example": "private _playersDrone = getConnectedUAVUnit player;", "docSyntax": "getConnectedUAVUnit person", "syntax": "getConnectedUAVUnit <objUnit>"}, "getContainerMaxLoad": {"version": "CMD", "tags": "", "description": "Returns max load value of given uniform, vest or backpack container. For other types of containers, use maxLoad command", "example": "_maxLoadUniform = getContainerMaxLoad uniform player; _maxLoadVest = getContainerMaxLoad vest player; _maxLoadBackpack = getContainerMaxLoad backpack player;", "docSyntax": "getContainerMaxLoad containerClass", "syntax": "getContainerMaxLoad containerClass"}, "getCorpse": {"version": "CMD", "tags": "", "description": "Returns the corpse associated with given weaponholder. When unit is killed and had a weapon, the weapon is placed inside \"WeaponHolderSimulated\" and dropped together with the unit. This command returns the dead body associated with this weaponholder.", "example": "systemChat str getCorpse cursorObject;", "docSyntax": "getCorpse weaponholder", "syntax": "getCorpse weaponholder"}, "getCruiseControl": {"version": "CMD", "tags": "", "description": "Returns cruise control settings set with setCruiseControl command.", "example": "getCruiseControl vehicle player params [\"_speedLimit\", \"_cruiseControlActive\"];", "docSyntax": "getCruiseControl vehicle", "syntax": "getCruiseControl <objVehicle>"}, "getCursorObjectParams": {"version": "CMD", "tags": "", "description": "Returns object and named selections under cursor and distance to object's surface (to the point cursor points at). If object surface is further away than 50 meters, selections are always an empty array and distance is 1e10 (10^10).", "example": "hint str getCursorObjectParams;", "docSyntax": "getCursorObjectParams", "syntax": "getCursorObjectParams"}, "getCustomAimCoef": {"version": "CMD", "tags": "", "description": "Returns aimPrecision from animation state with custom value that will directly affects weapon sway size and speed.", "example": "_coef = getCustomAimCoef player;", "docSyntax": "getCustomAimCoef unit", "syntax": "getCustomAimCoef <objUnit>"}, "getCustomSoundController": {"version": "CMD", "tags": "", "description": "Returns current value set to the controller (see setCustomSoundController).", "example": "getCustomSoundController [vehicle player, \"CustomSoundController1\"];", "docSyntax": "getCustomSoundController [vehicle, controller]", "syntax": "getCustomSoundController [<objVehicle>,controller]"}, "getCustomSoundControllerCount": {"version": "CMD", "tags": "", "description": "Returns current number of custom sound controllers supported by the engine for the given vehicle (currently 32)", "example": "getCustomSoundControllerCount vehicle player;", "docSyntax": "getCustomSoundControllerCount vehicle", "syntax": "getCustomSoundControllerCount <objVehicle>"}, "getDammage": {"version": "CMD", "tags": "", "description": "Returns the object damage in the range from 0 to 1.", "example": "private _damage = getDammage player;", "docSyntax": "getDammage object", "syntax": "getDammage <object>"}, "getDebriefingText": {"version": "CMD", "tags": "", "description": "A getter for setDebriefingText.", "example": "private _debriefingTextDeath = getDebriefingText \"endDeath\";", "docSyntax": "getDebriefingText end", "syntax": "getDebriefingText end"}, "getDescription": {"version": "CMD", "tags": "", "description": "Returns the string representation of unit as an four slots array.", "example": "getDescription player; //\u00a0UAV Operator //\u00a0returns [\"B_soldier_UAV_F\", \"Combat Fatigues (MTP)\", \"Carrier Special Rig (Green)\", \"B_UAV_01_backpack_F\"]", "docSyntax": "getDescription unit", "syntax": "getDescription <objUnit>"}, "getDir": {"version": "CMD", "tags": "", "description": "Returns the object heading in the range 0..360.", "example": "_azimuth = getDir player;", "docSyntax": "getDir object", "syntax": "getDir <object>"}, "getDirVisual": {"version": "CMD", "tags": "", "description": "Returns object's heading in the range from 0 to 360 in render time scope.", "example": "_dir = getDirVisual player;", "docSyntax": "getDirVisual object", "syntax": "getDirVisual <object>"}, "getDiverState": {"version": "CMD", "tags": "", "description": "Returns true when object is in diver state - e.g when the unit would put diving goggles on.", "example": "private _gogglesOn = getDiverState player;", "docSyntax": "getDiverState unit", "syntax": "getDiverState <objUnit>"}, "getDLCAssetsUsage": {"version": "CMD", "tags": "", "description": "Returns an array of the DLC usage times.", "example": "_dlcAssetsUsageInfo = getDLCAssetsUsage;", "docSyntax": "getDLCAssetsUsage", "syntax": "getDLCAssetsUsage"}, "getDLCAssetsUsageByName": {"version": "CMD", "tags": "", "description": "Returns an array with the session and global time the asset has been used.", "example": "_dlcAssetUsage = getDLCAssetsUsageByName \"C_IDAP_Heli_Transport_02_F\";", "docSyntax": "getDLCAssetsUsageByName assetName", "syntax": "getDLCAssetsUsageByName assetName"}, "getDLCs": {"version": "CMD", "tags": "", "description": "Returns array of app IDs of DLCs.", "example": "_ownedDLCs = getDLCs 1;", "docSyntax": "getDLCs filter", "syntax": "getDLCs filter"}, "getDLCUsageTime": {"version": "CMD", "tags": "", "description": "Returns total time the assets of the given DLC have been used. See Arma 3 DLCs & Expansions for a list of DLCs and ids.", "example": "private _kartsUsage = getDLCUsageTime 288520;", "docSyntax": "getDLCUsageTime appId", "syntax": "getDLCUsageTime appId"}, "getEditorCamera": {"version": "CMD", "tags": "", "description": "Fetches a reference to the mission editor camera.", "example": "-", "docSyntax": "getEditorCamera map", "syntax": "getEditorCamera <objMap>"}, "getEditorMode": {"version": "CMD", "tags": "", "description": "Returns the current mode of the editor.", "example": "-", "docSyntax": "getEditorMode map", "syntax": "getEditorMode <objMap>"}, "getEditorObjectScope": {"version": "CMD", "tags": "", "description": "Returns the editor object scope of the specified editor object.", "example": "-", "docSyntax": "map getEditorObjectScope object", "syntax": "<objMap> getEditorObjectScope <object>"}, "getElevationOffset": {"version": "CMD", "tags": "", "description": "Returns the map elevation offset from [map]/config.cpp. Returns 0 if there is no elevationOffset defined in the config of the current world.", "example": "_offset = getElevationOffset;", "docSyntax": "getElevationOffset", "syntax": "getElevationOffset"}, "getEngineTargetRPMRTD": {"version": "CMD", "tags": "", "description": "Returns RPM of all engines.", "example": "private _rpm = getEngineTargetRPMRTD _helicopter;", "docSyntax": "getEngineTargetRPMRTD helicopter", "syntax": "getEngineTargetRPMRTD helicopter"}, "getEnv3DSoundController": {"version": "CMD", "tags": "", "description": "Returns value of the specified 3D controller, see getAllEnv3DSoundControllers.", "example": "_thatTreeOverThere getEnv3DSoundController \"rainDrops\"; //\u00a0returns 1", "docSyntax": "object getEnv3DSoundController controller", "syntax": "<object> getEnv3DSoundController controller"}, "getEnvSoundController": {"version": "CMD", "tags": "", "description": "Returns value of the specified controller, see getAllEnvSoundControllers", "example": "position player getEnvSoundController \"trees\"; //0.3333", "docSyntax": "position getEnvSoundController controller", "syntax": "position getEnvSoundController controller"}, "getEventHandlerInfo": {"version": "CMD", "tags": "", "description": "Queries given event handler's information.", "example": "private _info = player getEventHandlerInfo [\"MPKilled\", 1]; //\u00a0object EH", "docSyntax": "oper getEventHandlerInfo [type, id]", "syntax": "oper getEventHandlerInfo [type,<scalar>]"}, "getFatigue": {"version": "CMD", "tags": "", "description": "Returns fatigue of given unit.", "example": "value = getFatigue player;", "docSyntax": "getFatigue unit", "syntax": "getFatigue <objUnit>"}, "getFieldManualStartPage": {"version": "CMD", "tags": "", "description": "Returns array of the starting topic and hint the given field manual should display.", "example": "getFieldManualStartPage (findDisplay 46); //\u00a0returns [\"\", \"\"]", "docSyntax": "getFieldManualStartPage display", "syntax": "getFieldManualStartPage <uiDisplay>"}, "getForcedFlagTexture": {"version": "CMD", "tags": "", "description": "A getter for forceFlagTexture. Forced texture is different from your normal flag texture, which can be retrieved with flagTexture", "example": "getForcedFlagTexture player;", "docSyntax": "getForcedFlagTexture object", "syntax": "getForcedFlagTexture <object>"}, "getForcedSpeed": {"version": "CMD", "tags": "", "description": "Returns forced speed set with forceSpeed or -1 if not set.", "example": "_spd = getForcedSpeed _heli;", "docSyntax": "getForcedSpeed entity", "syntax": "getForcedSpeed entity"}, "getFriend": {"version": "CMD", "tags": "", "description": "Returns if sides are friendly or hostile. For a value smaller than 0.6 it results in being enemy, otherwise it is friendly. See also Side Relations.", "example": "value = west getFriend east;", "docSyntax": "side1 getFriend side2", "syntax": "side1 getFriend side2"}, "getFSMVariable": {"version": "CMD", "tags": "", "description": "Return the value of variable in the variable space of given FSM. The FSM handle is the number returned by the execFSM command.", "example": "_handle getFSMVariable \"_foo\";", "docSyntax": "FSMhandle getFSMVariable name", "syntax": "FSMhandle getFSMVariable <string>"}, "getFuelCargo": {"version": "CMD", "tags": "", "description": "Returns the fuel amount (1 is full) in the cargo space of a refueling vehicle.", "example": "value = getFuelCargo myVehicleName;", "docSyntax": "getFuelCargo vehicle", "syntax": "getFuelCargo <objVehicle>"}, "getFuelConsumptionCoef": {"version": "CMD", "tags": "", "description": "Returns the fuel consumption coefficient, which is a multiplier of the fuel consumption rate in config.", "example": "if (getFuelConsumptionCoef myCar > 1) then { hint \"You should have a mechanic look at your engine!\" }", "docSyntax": "getFuelConsumptionCoef vehicle", "syntax": "getFuelConsumptionCoef <objVehicle>"}, "getGraphValues": {"version": "CMD", "tags": "", "description": "Generate graph y - coordinates of all input values within specific x and y range.", "example": "private _minX = 0; private _maxX = 10; private _minY = 0; private _maxY = 100; private _count = 11; private _random = 0; getGraphValues [ [_minX, _maxX, _minY, _maxY, _count, _random], 0, 5, 1, 10, 2, 100, 3, 50, 4, 30, 5, 100, 6, 10, 7, 50, 8, 75, 9, 100, 10, 100 ]; /* returns [[0.05, 0.1, 1, 0.5, 0.3, 1, 0.1, 0.5, 0.75, 1, 1], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]] supposedly [array of 1-based Y values, array of X values] */", "docSyntax": "getGraphValues [[graphMinX, graphMaxX, graphMinY, graphMaxY, valueCount, randomOffset], x1, y1, x2, y2, ...]", "syntax": "getGraphValues [[graphMinX,graphMaxX,graphMinY,graphMaxY,valueCount,randomOffset],x1,y1,x2,y2,...]"}, "getGroupIcon": {"version": "CMD", "tags": "", "description": "Get group icon properties.", "example": "_grpIconId = _group getVariable \"BIS_MARTA_ICON_TYPE\"; _grpIcon = _group getGroupIcon _grpIconId;", "docSyntax": "group getGroupIcon id", "syntax": "<objGroup> getGroupIcon <scalar>"}, "getGroupIconParams": {"version": "CMD", "tags": "", "description": "Returns group icons params used for command bar drawing such as color, text, scale, visibility, waypoint visibility, waypoint color.", "example": "_iconParams = getGroupIconParams group player;", "docSyntax": "getGroupIconParams group", "syntax": "getGroupIconParams <objGroup>"}, "getGroupIcons": {"version": "CMD", "tags": "", "description": "Returns all group icons. [id,icon,[offsetx,offsety],[..],..]", "docSyntax": "getGroupIcons group", "syntax": "getGroupIcons <objGroup>"}, "getHideFrom": {"version": "CMD", "tags": "", "description": "Returns the Position where object believes the enemy to be. If there is no direct line of sight between the object and the enemy, this position is extrapolated based on the last known position and speed of the enemy. A returned position of [0,0,0] implies that object does not knowAbout enemy. If enemy is null it is some position in front of the object or enemy position.", "example": "_pos = player getHideFrom _enemy;", "docSyntax": "object getHideFrom enemy", "syntax": "<object> getHideFrom enemy"}, "getHit": {"version": "CMD", "tags": "", "description": "Returns selection damage. Same as getHitPointDamage, only the argument is selection part instead of hit point.", "example": "hint str (player getHit \"head\");", "docSyntax": "vehicle getHit selection", "syntax": "<objVehicle> getHit selection"}, "getHitIndex": {"version": "CMD", "tags": "", "description": "Return current level of damage for a specific Hit Point (specified by its hit part index). All hit points can be obtained with getAllHitPointsDamage command.", "example": "vehicle player getHitIndex 3;", "docSyntax": "vehicle getHitIndex hitPartIndex", "syntax": "<objVehicle> getHitIndex hitPartIndex"}, "getHitPointDamage": {"version": "CMD", "tags": "", "description": "Return current level of damage in range 0..1 for a specific Hit Point (specified by its config class). If you need to get damage of a selection instead of hit point, use getHit.", "example": "vehicle player getHitPointDamage \"hitEngine\";", "docSyntax": "vehicle getHitPointDamage hitPointName", "syntax": "<objVehicle> getHitPointDamage hitPointName"}, "getItemCargo": {"version": "CMD", "tags": "", "description": "Returns all items names and count from ammo box (or any general weapon holder container).", "example": "hint str getItemCargo cursorTarget;", "docSyntax": "getItemCargo box", "syntax": "getItemCargo box"}, "getLighting": {"version": "CMD", "tags": "", "description": "Gets general environment's light settings.", "example": "getLighting; //\u00a0returns [[0.646753,0.781818,1],28526.2,[-0.0167152,0.211598,-0.977214],0]", "docSyntax": "getLighting", "syntax": "getLighting"}, "getLightingAt": {"version": "CMD", "tags": "", "description": "Gets provided object's lighting information.", "example": "getLightingAt player; //\u00a0returns [[1,1,1], 0.5, [0,0,0], 0]", "docSyntax": "getLightingAt obj", "syntax": "getLightingAt <object>"}, "getLoadedModsInfo": {"version": "CMD", "tags": "", "description": "Returns information about all loaded modifications.", "example": "private _loadedMods = getLoadedModsInfo; /* [ [\"dummy\",\"dummy\",false,false,\"NOT FOUND\",\"\",\"\",\"0\"], [\"CUP Units DEV Version r710 (r710-r710 UNITSSVN) (12|Jun|2020)\",\"@[DEV] CUP Units\",false,false,\"GAME DIR\",\"f3fb8a4c62443ac799c7c0e00f645b1f32cf1376\",\"c96577b4\",0], [\"CUP Weapons DEV Version r1486 (r1481-r1486 WEAPONSSVN) (12|Jun|2020)\",\"@[DEV] CUP Weapons\",false,false,\"GAME DIR\",\"6dbd7c052ce2ae68803e10f6a3653d0b046881d8\",\"bb1c4965\",0], [\"Community Base Addons v3.15.1\",\"@CBA_A3\",false,false,\"GAME DIR\",\"33eef5c0ed583d1222319460b184090513193287\",\"131bbb64\",0], [\"Arma 3 Contact (Platform)\",\"enoch\",true,true,\"GAME DIR\",\"4298e892077aec33be6b68730a974400a3c3a636\",\"43e900ae\",\"1021790\"], [\"Arma 3 Tanks\",\"tank\",true,true,\"GAME DIR\",\"c47d45d7ce1261e0a0d1c4ed9517611eae6ebf9f\",\"1aec74ec\",\"798390\"], [\"Arma 3 Tac-Ops\",\"tacops\",true,true,\"GAME DIR\",\"808cc67221feadc288c856395cac28b908966eee\",\"441362c6\",\"744950\"], [\"Arma 3 Laws of War\",\"orange\",true,true,\"GAME DIR\",\"aa86785568206ae1e7becaa09eb673ee645d971f\",\"4729aa84\",\"571710\"], [\"Arma 3 Malden\",\"argo\",true,true,\"GAME DIR\",\"db6d4d06a3ad28207da665e8c34bbd8adf191019\",\"61001811\",\"639600\"], [\"Arma 3 Jets\",\"jets\",true,true,\"GAME DIR\",\"8e8e1f9275e37cc90c0f2a8a6901dd2a3e81a29a\",\"fc8366ee\",\"601670\"], [\"Arma 3 Apex\",\"expansion\",true,true,\"GAME DIR\",\"48f32952612dbb6ca972790c17c9920797073233\",\"fc4aed7f\",\"395180\"], [\"Arma 3 Marksmen\",\"mark\",true,true,\"GAME DIR\",\"85c7f2284f8b0271bfafecd96c49230ce0515861\",\"534e5baa\",\"332350\"], [\"Arma 3 Helicopters\",\"heli\",true,true,\"GAME DIR\",\"dae29688657dbc9057f9eb83179a3ad21d3a689d\",\"e7165098\",\"304380\"], [\"Arma 3 Karts\",\"kart\",true,true,\"GAME DIR\",\"eae9e0b218e7a8e8e906477ee1a5e8e3d5298f18\",\"8240ae3f\",\"288520\"], [\"Arma 3 Zeus\",\"curator\",true,true,\"GAME DIR\",\"2310c5c95a558253c7286d93f5a2a810fbf9b620\",\"8af0db5d\",\"275700\"], [\"Arma 3\",\"A3\",true,true,\"NOT FOUND\",\"\",\"\",\"0\"] ] */", "docSyntax": "getLoadedModsInfo", "syntax": "getLoadedModsInfo"}, "getMagazineCargo": {"version": "CMD", "tags": "", "description": "Returns all magazines types and count from the cargo space", "example": "_content = getMagazineCargo carName;", "docSyntax": "getMagazineCargo object", "syntax": "getMagazineCargo <object>"}, "getMarkerColor": {"version": "CMD", "tags": "", "description": "Returns marker color for given marker.", "example": "\"MarkerOne\" setMarkerColor \"ColorBlack\"; _color = getMarkerColor \"MarkerOne\"; //\u00a0returns \"ColorBlack\"", "docSyntax": "getMarkerColor markerName", "syntax": "getMarkerColor <string>"}, "getMarkerPos": {"version": "CMD", "tags": "", "description": "Returns marker position.", "example": "_mPos1 = getMarkerPos \"markerOne\";", "docSyntax": "getMarkerPos markerName", "syntax": "getMarkerPos <string>"}, "getMarkerSize": {"version": "CMD", "tags": "", "description": "Returns the size of the given marker. A getter for setMarkerSize and an alias of markerSize.", "example": "\"MarkerOne\" setMarkerSize [100,200]; _size = getMarkerSize \"MarkerOne\"; //returns [100,200]", "docSyntax": "getMarkerSize markerName", "syntax": "getMarkerSize <string>"}, "getMarkerType": {"version": "CMD", "tags": "", "description": "Gets type of marker. See CfgMarkers for a list of standard markers.", "example": "if (getMarkerType \"Marker1\" == \"\") then { hint \"Marker1 is not an icon!\" };", "docSyntax": "getMarkerType markerName", "syntax": "getMarkerType <string>"}, "getMass": {"version": "CMD", "tags": "", "description": "Returns mass of a PhysX object.", "example": "_mass = getMass _myCar;", "docSyntax": "getMass object", "syntax": "getMass <object>"}, "getMissionConfig": {"version": "CMD", "tags": "", "description": "Returns Config entry for the given scenario attribute from the 1st tier. The attribute can be config class or config property. If it is defined in multiple places, the command checks them in the following order:", "example": "_header = getMissionConfig \"Header\";", "docSyntax": "getMissionConfig attribute", "syntax": "getMissionConfig attribute"}, "getMissionConfigValue": {"version": "CMD", "tags": "", "description": "Returns value of the given scenario attribute from the 1st tier. Since only config properties have values, the attribute should be config property. If it is not found or config class is given, the return is nil. If the attribute defined in multiple places, the command checks them in the following order:", "example": "_respawnDelay = getMissionConfigValue [\"respawnDelay\",0];", "docSyntax": "getMissionConfigValue attribute", "syntax": "getMissionConfigValue attribute"}, "getMissionDLCs": {"version": "CMD", "tags": "", "description": "Returns list of DLCs that are used in the mission.", "example": "_usedDLCs = getMissionDLCs; //\u00a0returns e.g [\"Orange\",\"Enoch\",\"Expansion\",\"Heli\",\"Contact\",\"Mark\",\"Argo\",\"Jets\"]", "docSyntax": "getMissionDLCs", "syntax": "getMissionDLCs"}, "getMissionLayerEntities": {"version": "CMD", "tags": "", "description": "Returns all entities within the specific Eden Editor layer and its sub-layers. To be used when the scenario is running, not in the editor workspace. Useful to disable/enable whole parts of the scenario if layers are used during mission design.", "example": "private _base = getMissionLayerEntities \"Base\";", "docSyntax": "getMissionLayerEntities layerName", "syntax": "getMissionLayerEntities layerName"}, "getMissionLayers": {"version": "CMD", "tags": "", "description": "Returns a list of all layers created in Eden Editor. Designed to be used during a scenario. Default layers (BLUFOR, OPFOR...) are not returned.", "example": "getMissionLayers; //\u00a0[\"Electronics\",\"Camp Endurance\",\"UGV Workstation\",\"Comments\",\"Extraction Air\",\"Comments\",\"Extraction Ground\",\"Extraction\",\"test\"]", "docSyntax": "getMissionLayers", "syntax": "getMissionLayers"}, "getMissionPath": {"version": "CMD", "tags": "", "description": "Returns mission root plus the filename in a form of filepath to be used with commands requiring absolute path such as playSound3D, drawIcon3D, createSimpleObject, etc. Any leading \"\\\" in the filename will be stripped as the mission root includes one already.", "example": "//\u00a0returns e.g \"C:\\Users\\Username\\Documents\\Arma 3\\missions\\MissionName.Altis\\icons\\myIcon.paa\" private _path = getMissionPath \"icons\\myIcon.paa\"; private _path = getMissionPath \"\\icons\\myIcon.paa\"; //\u00a0leading \\ is also fine", "docSyntax": "getMissionPath filename", "syntax": "getMissionPath filename"}, "getModelInfo": {"version": "CMD", "tags": "", "description": "Returns object's model info. Model path is suitable for use with createSimpleObject command. Since Arma 3 v2.08.148608 the command also returns placing point of the model in model coordinates. Placing point is always in format [0,0,z].", "example": "_modelInfo = getModelInfo player; //\u00a0[\"b_soldier_03.p3d\", \"a3\\characters_f\\blufor\\b_soldier_03.p3d\", true, [0,0,0]]", "docSyntax": "getModelInfo object", "syntax": "getModelInfo <object>"}, "getMousePosition": {"version": "CMD", "tags": "", "description": "Returns mouse position in UI coordinates.", "example": "getMousePosition params [\"_mouseX\", \"_mouseY\"];", "docSyntax": "getMousePosition", "syntax": "getMousePosition"}, "getMusicPlayedTime": {"version": "CMD", "tags": "", "description": "Returns elapsed time in seconds for currently playing music track.", "example": "playMusic [\"LeadTrack06_F_Tank\", 0]; onEachFrame {hintSilent str getMusicPlayedTime};", "docSyntax": "getMusicPlayedTime", "syntax": "getMusicPlayedTime"}, "getNumber": {"version": "CMD", "tags": "", "description": "Extract number from config entry.", "example": "_value = getNumber (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"maxSpeed\");", "docSyntax": "getNumber config", "syntax": "getNumber config"}, "getObjectArgument": {"version": "CMD", "tags": "", "description": "Return name of object argument in mission editor.", "example": "//\u00a0returns string \"[1009.0351, 1319.4928]\" (findDisplay 128 displayCtrl 51) getObjectArgument [\"_unit_1\", \"POSITION\"] //\u00a0returns array [1009.0351, 1319.4928] (findDisplay 128 displayCtrl 51) evalObjectArgument [\"_unit_1\", \"POSITION\"]", "docSyntax": "map getObjectArgument [object, argument]", "syntax": "<objMap> getObjectArgument [<object>,argument]"}, "getObjectChildren": {"version": "CMD", "tags": "", "description": "Return a list of all the children of the specified object.", "example": "-", "docSyntax": "map getObjectChildren object", "syntax": "<objMap> getObjectChildren <object>"}, "getObjectDLC": {"version": "CMD", "tags": "", "description": "Returns appID of the DLC the object belongs to or nil if object is vanilla.", "example": "_appID = getObjectDLC cursorTarget; if (!isNil \"_appID\") then { hint format [\"This object belongs to DLC with id: %1\", _appID]; } else { hint \"This object is vanilla\"; };", "docSyntax": "getObjectDLC obj", "syntax": "getObjectDLC <object>"}, "getObjectFOV": {"version": "CMD", "tags": "", "description": "Returns Field of View of the given object in radians. Static objects return default value, which is 1. FOV of objNull is 0. Object FOV is indirectly connected with optics magnification or player view zoom, the narrower the angle the greater the zoom.", "example": "private _objFOV = getObjectFOV player;", "docSyntax": "getObjectFOV object", "syntax": "getObjectFOV <object>"}, "getObjectID": {"version": "CMD", "tags": "", "description": "Returns Visitor ID of the given object. Visitor IDs of static map objects can change if map is in development and updated with new static objects.", "example": "getObjectID _tree;", "docSyntax": "getObjectID object", "syntax": "getObjectID <object>"}, "getObjectMaterials": {"version": "CMD", "tags": "", "description": "Gets all custom materials associated with the object.", "example": "_materials = getObjectMaterials car;", "docSyntax": "getObjectMaterials obj", "syntax": "getObjectMaterials <object>"}, "getObjectProxy": {"version": "CMD", "tags": "", "description": "Return the proxy object associated with the given editor object.", "example": "(findDisplay 128 displayCtrl 51) getObjectProxy \"_unit_1\" //\u00a0returns the object 'B 1-1-A:1 (Sean Johnson)'", "docSyntax": "map getObjectProxy object", "syntax": "<objMap> getObjectProxy <object>"}, "getObjectScale": {"version": "CMD", "tags": "", "description": "Returns the render scale of an object relative to the original model.", "example": "private _objectScale = getObjectScale MyObject; if (_objectScale == 1) exitWith { systemChat \"Original scale\"; }; if (_objectScale > 1) then { systemChat \"Scaled up\"; } else { systemChat \"Scaled down\"; };", "docSyntax": "getObjectScale object", "syntax": "getObjectScale <object>"}, "getObjectTextures": {"version": "CMD", "tags": "", "description": "Gets all custom textures (hiddenSelectionsTextures) associated with the object.", "example": "_textures = getObjectTextures player;", "docSyntax": "getObjectTextures obj", "syntax": "getObjectTextures <object>"}, "getObjectType": {"version": "CMD", "tags": "", "description": "Returns object type as a number:", "example": "_objType = getObjectType player;", "docSyntax": "getObjectType object", "syntax": "getObjectType <object>"}, "getObjectViewDistance": {"version": "CMD", "tags": "", "description": "Gets the values of rendering distances of objects and shadows.", "example": "_arr = getObjectViewDistance;", "docSyntax": "getObjectViewDistance", "syntax": "getObjectViewDistance"}, "getOpticsMode": {"version": "CMD", "tags": "", "description": "Returns the class name of the current optic mode of the current weapon.", "example": "player getOpticsMode 0; //\u00a0get current weapon's optic mode player getOpticsMode 1; //\u00a0get primary weapon's optic mode player getOpticsMode 2; //\u00a0get launcher's optic mode player getOpticsMode 3; //\u00a0get handgun's optic mode", "docSyntax": "unit getOpticsMode slot", "syntax": "<objUnit> getOpticsMode slot"}, "getOrDefaultCall": {"version": "CMD", "tags": "", "description": "Retrieves a value from the HashMap for the given 'key', executes given 'code' if key was not found and returns result. Additionally sets key to the code result value if 'set' is true.", "example": "_hashmap getOrDefaultCall [123, { systemChat \"The key 123 does not exist and will be created and assigned 345\"; 345 }, true];", "docSyntax": "hashMap getOrDefaultCall [key, code, set]", "syntax": "hashMap getOrDefaultCall [key,<code>,set]"}, "getOxygenRemaining": {"version": "CMD", "tags": "", "description": "Returns amount of remaining oxygen.", "example": "_oxygen = getOxygenRemaining player;", "docSyntax": "getOxygenRemaining unit", "syntax": "getOxygenRemaining <objUnit>"}, "getPersonUsedDLCs": {"version": "CMD", "tags": "", "description": "Returns a list of all DLCs objects the unit is currently using. For example if a unit is inside a vehicle from DLC, it will return the code of that DLC.", "example": "_objects = getPersonUsedDLCs player;", "docSyntax": "getPersonUsedDLCs unit", "syntax": "getPersonUsedDLCs <objUnit>"}, "getPilotCameraDirection": {"version": "CMD", "tags": "", "description": "Returns model space vector of the object airplane or helicopter pilotCamera .", "example": "_pilotCamVector = getPilotCameraDirection vehicle player;", "docSyntax": "getPilotCameraDirection object", "syntax": "getPilotCameraDirection <object>"}, "getPilotCameraOpticsMode": {"version": "CMD", "tags": "", "description": "Returns the optics mode index (zoom) for the pilotCamera", "example": "getPilotCameraOpticsMode vehicle player", "docSyntax": "getPilotCameraOpticsMode object", "syntax": "getPilotCameraOpticsMode <object>"}, "getPilotCameraPosition": {"version": "CMD", "tags": "", "description": "Returns model space coordinates of the object airplane or helicopter pilotCamera.", "example": "_pilotCamPos = getPilotCameraPosition vehicle player;", "docSyntax": "getPilotCameraPosition object", "syntax": "getPilotCameraPosition <object>"}, "getPilotCameraRotation": {"version": "CMD", "tags": "", "description": "Returns rotation (relative to the centered camera position) of the object airplane or helicopter pilotCamera .", "example": "_pilotCamRot = getPilotCameraRotation vehicle player;", "docSyntax": "getPilotCameraRotation object", "syntax": "getPilotCameraRotation <object>"}, "getPilotCameraTarget": {"version": "CMD", "tags": "", "description": "Returns the target of the object airplane or helicopter pilotCamera tracking.", "example": "getPilotCameraTarget vehicle player params [\"_pilotCamTracking\", \"_pilotCamTargetPos\", \"_pilotCamTarget\"];", "docSyntax": "getPilotCameraTarget object", "syntax": "getPilotCameraTarget <object>"}, "getPiPViewDistance": {"version": "CMD", "tags": "", "description": "Get the set PiP (Picture-in-Picture) view distance (that can be set by setPiPViewDistance).", "example": "private _pipViewDistance = getPiPViewDistance;", "docSyntax": "getPiPViewDistance", "syntax": "getPiPViewDistance"}, "getPlateNumber": {"version": "CMD", "tags": "", "description": "Get the license plates from any vehicle which has plates configured.", "example": "if (getPlateNumber vehicle player != \"H4X0RZ\") then { hint \"u no 1337 bro\" };", "docSyntax": "getPlateNumber vehicle", "syntax": "getPlateNumber <objVehicle>"}, "getPlayerChannel": {"version": "CMD", "tags": "", "description": "Returns channel number for given player, provided that player is speaking, otherwise -1. Having mic on is not enough, player has to make a sound. There are several limitations to this command:", "example": "private _channelID = getPlayerChannel player;", "docSyntax": "getPlayerChannel player", "syntax": "getPlayerChannel <objUnit>"}, "getPlayerID": {"version": "CMD", "tags": "", "description": "Returns user DirectPlay ID, which can be used with getUserInfo, and is found in allMapMarkers results and in some mission event handlers such as PlayerConnected.", "example": "getPlayerID player;", "docSyntax": "getPlayerID unit", "syntax": "getPlayerID <objUnit>"}, "getPlayerScores": {"version": "CMD", "tags": "", "description": "In MP: Returns the unit's table of scores (infantry kills, soft vehicle kills, armor kills, air kills, deaths, total score).", "example": "getPlayerScores BIS_player1;", "docSyntax": "getPlayerScores unitName", "syntax": "getPlayerScores <objUnit>"}, "getPlayerUID": {"version": "CMD", "tags": "", "description": "Return a UniqueID of the given unit (player).", "example": "private _uid = getPlayerUID player;", "docSyntax": "getPlayerUID unit", "syntax": "getPlayerUID <objUnit>"}, "getPlayerVoNVolume": {"version": "CMD", "tags": "", "description": "Gets provided player's Voice over Network (VoN) volume.", "example": "private _volume = getPlayerVoNVolume (units player select 1);", "docSyntax": "getPlayerVoNVolume unit", "syntax": "getPlayerVoNVolume <objUnit>"}, "getPos": {"version": "CMD", "tags": "", "description": "Returns object or location position. If the argument is an object, the return value is in format PositionAGLS.", "example": "hintSilent str getPos player;", "docSyntax": "getPos object", "syntax": "getPos <object>"}, "getPosASL": {"version": "CMD", "tags": "", "description": "Returns the object position height above sea level.", "example": "_AslPos = getPosASL player;", "docSyntax": "getPosASL object", "syntax": "getPosASL <object>"}, "getPosASLVisual": {"version": "CMD", "tags": "", "description": "Returns an object's rendered ASL position (z value above sea level) in render time scope.", "example": "private _playerRenderedPosASL = getPosASLVisual player;", "docSyntax": "getPosASLVisual object", "syntax": "getPosASLVisual <object>"}, "getPosASLW": {"version": "CMD", "tags": "", "description": "Returns the object position height above water surface (waves and pond objects included).", "example": "_pos = getPosASLW _diver;", "docSyntax": "getPosASLW obj", "syntax": "getPosASLW <object>"}, "getPosATL": {"version": "CMD", "tags": "", "description": "Returns the position of an object relative to the terrain.", "example": "_objPosition = getPosATL player;", "docSyntax": "getPosATL object", "syntax": "getPosATL <object>"}, "getPosATLVisual": {"version": "CMD", "tags": "", "description": "Returns an object's rendered ATL position (z value above ground) in render time scope.", "example": "_playerRenderedPosATL = getPosATLVisual player;", "docSyntax": "getPosATLVisual object", "syntax": "getPosATLVisual <object>"}, "getPosVisual": {"version": "CMD", "tags": "", "description": "Returns an object's AGLS position in render time scope. Alias of visiblePosition.", "example": "_playerRenderedPos = getPosVisual player;", "docSyntax": "getPosVisual object", "syntax": "getPosVisual <object>"}, "getPosWorld": {"version": "CMD", "tags": "", "description": "Returns the provided object's model centre position ([0,0,0]) in PositionASL, rather than the transformed boundingCenter or LandContact vertices.", "example": "_obj setPosWorld getPosWorld _obj;", "docSyntax": "getPosWorld object", "syntax": "getPosWorld <object>"}, "getPosWorldVisual": {"version": "CMD", "tags": "", "description": "Returns the provided object's, model centre position in render version in format PositionASL, rather than transformed boundingCenter or LandContact vertices.", "example": "_obj setPosWorld getPosWorldVisual _obj;", "docSyntax": "getPosWorldVisual object", "syntax": "getPosWorldVisual <object>"}, "getPylonMagazines": {"version": "CMD", "tags": "", "description": "Return array of magazines on pylons.", "example": "getPylonMagazines vehicle player;", "docSyntax": "getPylonMagazines vehicle", "syntax": "getPylonMagazines <objVehicle>"}, "getRelDir": {"version": "CMD", "tags": "", "description": "Returns direction, which is relative to object's current direction, from given object to another object or position in the range from 0 to 360, the equivalent of BIS_fnc_relativeDirTo. Taking the current direction of the object into account.", "example": "_reldir = player getRelDir tank;", "docSyntax": "object getRelDir position", "syntax": "<object> getRelDir position"}, "getRelPos": {"version": "CMD", "tags": "", "description": "Returns position that is given distance and relative direction away from original object. The alternative syntax available from Arma 3 v 2.14, returns the position offset of the attached object. If the animated memory point is used for attachment, the offset is calculated in render scope.", "example": "Find position 100 metres away at player's 3 o'clock:", "docSyntax": "object getRelPos [distance, direction]", "syntax": "<object> getRelPos [<scalar>,direction]"}, "getRemoteSensorsDisabled": {"version": "CMD", "tags": "", "description": "Get status of disabled raycasts for remote entities. See disableRemoteSensors for detailed description.", "example": "_status = getRemoteSensorsDisabled;", "docSyntax": "getRemoteSensorsDisabled", "syntax": "getRemoteSensorsDisabled"}, "getRepairCargo": {"version": "CMD", "tags": "", "description": "Returns the amount (1 is full) of repair resources in the cargo space of a repair vehicle.", "example": "value = getRepairCargo vehicleName;", "docSyntax": "getRepairCargo vehicle", "syntax": "getRepairCargo <objVehicle>"}, "getResolution": {"version": "CMD", "tags": "", "description": "Returns an array containing all information about current client screen resolution.", "example": "private _res = getResolution;", "docSyntax": "getResolution", "syntax": "getResolution"}, "getRoadInfo": {"version": "CMD", "tags": "", "description": "Returns road piece information.", "example": "private _info = getRoadInfo _road; _info params [\"_mapType\", \"_width\", \"_isPedestrian\", \"_texture\", \"_textureEnd\", \"_material\", \"_begPos\", \"_endPos\", \"_isBridge\"]; private _roadDirection = _begPos getDir _endPos;", "docSyntax": "getRoadInfo road", "syntax": "getRoadInfo road"}, "getRotorBrakeRTD": {"version": "CMD", "tags": "", "description": "Returns if rotor break is on.", "example": "_isOn = getRotorBrakeRTD _heli;", "docSyntax": "getRotorBrakeRTD helicopter", "syntax": "getRotorBrakeRTD helicopter"}, "getSensorTargets": {"version": "CMD", "tags": "", "description": "Returns vehicle sensors' potential targets.", "example": "private _radarTargets = getSensorTargets vehicle player; /* returns e.g [ [O Alpha 1-3:1, \"air\", \"unknown\", [\"ir\", \"activeradar\", \"visual\"]], [17750112040# 163957: apc_tracked_01_aa_f.p3d, \"ground\", \"unknown\", [\"datalink\"]] ] */", "docSyntax": "getSensorTargets vehicle", "syntax": "getSensorTargets <objVehicle>"}, "getSensorThreats": {"version": "CMD", "tags": "", "description": "Returns vehicle sensors' threats.", "example": "private _dangers = getSensorThreats vehicle player; /* returns e.g [ [164230: titan_missile_atl_fly.p3d, \"missile\", \"visual\"], [164233: titan_missile_atl_fly.p3d, \"threatmissile\", \"radar\"] ] */", "docSyntax": "getSensorThreats vehicle", "syntax": "getSensorThreats <objVehicle>"}, "getShadowDistance": {"version": "CMD", "tags": "", "description": "Gets the shadows rendering distance.", "example": "_value = getShadowDistance;", "docSyntax": "getShadowDistance", "syntax": "getShadowDistance"}, "getShotParents": {"version": "CMD", "tags": "", "description": "Returns shot information for the given projectile. If shot was fired by a soldier on foot or in FFV position in vehicle, the soldier is returned for the vehicle.", "example": "_shotParents = getShotParents myProjectile;", "docSyntax": "getShotParents projectile", "syntax": "getShotParents projectile"}, "getSlingLoad": {"version": "CMD", "tags": "", "description": "Return object which is sling loaded by vehicle", "example": "_cargo = getSlingLoad heli1;", "docSyntax": "getSlingLoad vehicle", "syntax": "getSlingLoad <objVehicle>"}, "getSlotItemName": {"version": "CMD", "tags": "", "description": "Returns the name of assigned item in given slot or the empty string.", "example": "hint (player getSlotItemName 610);", "docSyntax": "unit getSlotItemName slot", "syntax": "<objUnit> getSlotItemName slot"}, "getSoundController": {"version": "CMD", "tags": "", "description": "Returns value of the given sound controller.", "example": "vehicle player getSoundController \"rpm\"; //600", "docSyntax": "vehicle getSoundController controller", "syntax": "<objVehicle> getSoundController controller"}, "getSoundControllerResult": {"version": "CMD", "tags": "", "description": "Returns the calculated value of simple expression defined in config. Config could be any config entry, even mission config entry. It is more important that the vehicle is a transport and not any object. If the expression contains sound controllers, the controller values will be taken from the given vehicle.", "example": "_result = (vehicle player) getSoundControllerResult (configFile >> \"cfgVehicles\" >> typeOf (vehicle player) >> \"sounds\" >> \"idle_ext\" >> \"volume\");", "docSyntax": "vehicle getSoundControllerResult config", "syntax": "<objVehicle> getSoundControllerResult config"}, "getSpeed": {"version": "CMD", "tags": "", "description": "Get the speed for the given speed mode. SpeedMode can be:", "example": "_spd = player getSpeed \"FAST\";", "docSyntax": "object getSpeed speedMode", "syntax": "<object> getSpeed speedMode"}, "getStamina": {"version": "CMD", "tags": "", "description": "Get current stamina (~ seconds until depletion)", "example": "getStamina player;", "docSyntax": "getStamina unit", "syntax": "getStamina <objUnit>"}, "getStatValue": {"version": "CMD", "tags": "", "description": "Returns value of the given stat.", "example": "getStatValue \"ExpWarlockDown\"; //\u00a0Checks if the \"Warlock Down\" Achivement was already aquired", "docSyntax": "getStatValue name", "syntax": "getStatValue <string>"}, "getSteamFriendsServers": {"version": "CMD", "tags": "", "description": "Returns servers information of Steam friends currently playing the game.", "example": "getSteamFriendsServers; //\u00a0returns e.g [[\"127.42.33.8:2302\", \"MyFriend\"], [\"127.84.66.16:4604\", \"My Best Friend\"]]", "docSyntax": "getSteamFriendsServers", "syntax": "getSteamFriendsServers"}, "getSubtitleOptions": {"version": "CMD", "tags": "", "description": "Returns subtitles settings.", "example": "private _subtitleSettings = getSubtitleOptions;", "docSyntax": "getSubtitleOptions", "syntax": "getSubtitleOptions"}, "getSuppression": {"version": "CMD", "tags": "", "description": "Gets the suppression value for the given unit. Returns varying Number between 0 and 1, or -1 if suppression is disabled (disableAI \"SUPPRESSION\") or the suppression value is not available. Suppression is not calculated for player entities and is always 0, unless it is set with setSuppression. In this case the return value is the set value. Before Arma 3 v1.92 this command could return nil.", "example": "getSuppression AI_unit_1;", "docSyntax": "getSuppression unit", "syntax": "getSuppression <objUnit>"}, "getTerrainGrid": {"version": "CMD", "tags": "", "description": "A getter for setTerrainGrid, returns the current terrain grid.", "example": "_terrainGrid = getTerrainGrid;", "docSyntax": "getTerrainGrid", "syntax": "getTerrainGrid"}, "getTerrainHeight": {"version": "CMD", "tags": "", "description": "Returns terrain height at the specified location.", "example": "private _gridCellHeight = getTerrainHeight getPosWorld player;", "docSyntax": "getTerrainHeight positionWorld", "syntax": "getTerrainHeight positionWorld"}, "getTerrainHeightASL": {"version": "CMD", "tags": "", "description": "Returns the terrain height above the sea for the given position.", "example": "_height = getTerrainHeightASL (getPosATL player);", "docSyntax": "getTerrainHeightASL position", "syntax": "getTerrainHeightASL position"}, "getTerrainInfo": {"version": "CMD", "tags": "", "description": "Returns the terrain heightmap information, as well as sea level offset (due to tides, if available).", "example": "private _terrainInfo = getTerrainInfo; //\u00a0Stratis: [32,256,4,2048,0]; Altis: [30,1024,7.5,4096,0]", "docSyntax": "getTerrainInfo", "syntax": "getTerrainInfo"}, "getText": {"version": "CMD", "tags": "", "description": "Extracts localized text from config entry, if entry is subject to localization, otherwise returns text value. To obtain the translation key itself, see getTextRaw.", "example": "_text = getText (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"icon\"); //\u00a0\"Get in %1 as Driver\"", "docSyntax": "getText config", "syntax": "getText config"}, "getTextRaw": {"version": "CMD", "tags": "", "description": "Returns raw text from config entry. If entry is subject to localization, the translation key is returned. To obtain the localized text, see getText.", "example": "private _text = getText (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"displayName\"); //\u00a0\"Get in %1 as Driver\" private _rawText = getTextRaw (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"displayName\"); //\u00a0\"$STR_ACTION_GETIN_DRIVER\" private _localized = localize _text; //\u00a0\"Get in %1 as Driver\" _localized == _text; //\u00a0true", "docSyntax": "getTextRaw config", "syntax": "getTextRaw config"}, "getTextureInfo": {"version": "CMD", "tags": "", "description": "Return texture information - resolution in pixels (mipmap level 0) and average colour. Multiply the pixel values by pixelW and pixelH to get screen coordinates.", "example": "getTextureInfo \"a3\\characters_f\\blufor\\data\\clothing1_co.paa\"; //\u00a0[2048, 2048, [0.458824, 0.427451, 0.34902, 1]]", "docSyntax": "getTextureInfo texture", "syntax": "getTextureInfo <string>"}, "getTextWidth": {"version": "CMD", "tags": "", "description": "Returns estimated width of the text based on font type and size. Similar to ctrlTextWidth but does not require a control and can be used to estimate text width for any control including buttons. Result does not include left and right margins (hardcoded at 0.008 each).", "example": "_textWidth = \"Hello World\" getTextWidth [\"PuristaMedium\", 0.03];", "docSyntax": "text getTextWidth [font, size]", "syntax": "<string> getTextWidth [font,size]"}, "getTIParameters": {"version": "CMD", "tags": "", "description": "Returns all Thermal Imaging parameters.", "example": "if (getTIParameters get \"OutputRangeStart\" == 0.1) then { hint \"default Start\" };", "docSyntax": "getTIParameters", "syntax": "getTIParameters"}, "getTotalDLCUsageTime": {"version": "CMD", "tags": "", "description": "Returns total DLC usage time in this game session", "example": "_dlcTime = getTotalDLCUsageTime;", "docSyntax": "getTotalDLCUsageTime", "syntax": "getTotalDLCUsageTime"}, "getTowParent": {"version": "CMD", "tags": "", "description": "Get the vehicle towing the provided one.", "example": "private _towParent = getTowParent _towedvehicle;", "docSyntax": "getTowParent towedVehicle", "syntax": "getTowParent towedVehicle"}, "getTrimOffsetRTD": {"version": "CMD", "tags": "", "description": "Returns controls trim offset.", "example": "_array = getTrimOffsetRTD vehicle player;", "docSyntax": "getTrimOffsetRTD RTD_helicopter", "syntax": "getTrimOffsetRTD RTD_helicopter"}, "getTurretLimits": {"version": "CMD", "tags": "", "description": "Returns the rotation and elevation limits for the given turret.", "example": "private _turretLimits = m2 getTurretLimits [0]; _turretLimits params [\"_minTurn\", \"_maxTurn\", \"_minElev\", \"_maxElev\", \"_overridden\"];", "docSyntax": "vehicle getTurretLimits turret", "syntax": "<objVehicle> getTurretLimits turret"}, "getTurretOpticsMode": {"version": "CMD", "tags": "", "description": "Get the current optics mode of the optics in the turret occupied by the specified unit. The alternative syntax allows a vehicle and turret path to be specified without needing a unit.", "example": "getTurretOpticsMode player;", "docSyntax": "getTurretOpticsMode obj", "syntax": "getTurretOpticsMode <object>"}, "getUnitFreefallInfo": {"version": "CMD", "tags": "", "description": "Returns a unit's freefall information.", "example": "getUnitFreefallInfo player;", "docSyntax": "getUnitFreefallInfo unit", "syntax": "getUnitFreefallInfo <objUnit>"}, "getUnitLoadout": {"version": "CMD", "tags": "", "description": "Returns a Unit Loadout Array with all assigned items, weapons, containers and their stored items.", "example": "getUnitLoadout player;", "docSyntax": "getUnitLoadout unit", "syntax": "getUnitLoadout <objUnit>"}, "getUnitTrait": {"version": "CMD", "tags": "", "description": "Gets the current value of a trait of the given unit.", "example": "player getUnitTrait \"Medic\";", "docSyntax": "unit getUnitTrait skillName", "syntax": "<objUnit> getUnitTrait <string>"}, "getUnloadInCombat": {"version": "CMD", "tags": "", "description": "A getter for setUnloadInCombat. To return global config value see canUnloadInCombat", "example": "getUnloadInCombat _vehicle params [\"_cargo\", \"_turrets\"];", "docSyntax": "getUnloadInCombat vehicle", "syntax": "getUnloadInCombat <objVehicle>"}, "getUserInfo": {"version": "CMD", "tags": "", "description": "Returns extended information about given server user.", "example": "private _randomUserInfo = getUserInfo selectRandom allUsers;", "docSyntax": "getUserInfo playerID", "syntax": "getUserInfo playerID"}, "getUserMFDText": {"version": "CMD", "tags": "", "description": "Returns array of user text variables used in MFD.", "example": "getUserMFDText _vehicle;", "docSyntax": "getUserMFDText vehicle", "syntax": "getUserMFDText <objVehicle>"}, "getUserMFDValue": {"version": "CMD", "tags": "", "description": "Returns array of user text variables used in MFD.", "example": "getUserMFDValue vehicle player; //\u00a0user0 in MFD will return 1", "docSyntax": "getUserMFDValue vehicle", "syntax": "getUserMFDValue <objVehicle>"}, "getVariable": {"version": "CMD", "tags": "", "description": "Returns the value of variable in the variable space assigned to various data types. All available data types combinations:", "example": "private _variable = myTruck getVariable \"myVariable\"; //\u00a0returns nil if \"myVariable\" is not set", "docSyntax": "varspace getVariable name", "syntax": "varspace getVariable <string>"}, "getVehicleCargo": {"version": "CMD", "tags": "", "description": "Get a list of vehicles loaded as cargo inside this vehicle. The returned array is in the order the cargo vehicles were added to containing vehicle.", "example": "_vehicleCargo = getVehicleCargo blackfish; //\u00a0returns [] if empty", "docSyntax": "getVehicleCargo storingVehicle", "syntax": "getVehicleCargo storingVehicle"}, "getVehicleTIPars": {"version": "CMD", "tags": "", "description": "Returns TI parameters of a vehicle.", "example": "getVehicleTIPars _veh;", "docSyntax": "getVehicleTIPars vehicle", "syntax": "getVehicleTIPars <objVehicle>"}, "getVideoOptions": {"version": "CMD", "tags": "", "description": "Obtain the current system's video settings.", "example": "private _videoOptions = getVideoOptions; /* [ [\"aspectRatioName\", \"Auto (Stretch)\"], [\"brightness\", 1], [\"cloudQualityName\", \"VeryLow\"], [\"displayModeName\", \"Window\"], [\"dynLightsCount\", 4], [\"dynLightsQualityName\", \"VeryLow\"], [\"gamma\", 1], [\"guiScale\", 0.55], [\"guiScaleName\", \"Small\"], [\"hdrQuality\", 16], [\"hdrQualityName\", \"Normal\"], [\"monitorResolution\", [0, 0, 2304, 1440]], // presence not guaranteed [\"objQualityName\", \"VeryLow\"], [\"ppHazeQualityName\",\"Low\"], [\"objectVisibility\", 800], [\"overallPresetName\", \"VeryLow\"], [\"overallVisibility\", 1000], [\"particleQualityName\", \"Low\"], [\"pipQuality\", 512], [\"pipQualityName\", \"VeryLow\"], [\"pipVisibility\", 835], [\"ppBloom\", 0], [\"ppBrightness\", 1], [\"ppCausticsQualityName\", \"Disabled\"], [\"ppColorPresetName\", \"Default\"], [\"ppContrast\", 1], [\"ppDOF\", 0], [\"ppFSAA\", 1] [\"ppPPAAQualityName\", \"Disabled\"], [\"ppRadialBlur\", 0], [\"ppRotationBlur\", 0], [\"ppSSAOQualityName\", \"Disabled\"], [\"ppSaturation\", 1], [\"ppSharpenFilter\", 0], [\"refreshRate\", 60], [\"samplingPercentage\", 100], [\"shadowQualityName\", \"Low\"], [\"shadowVisibility\", 100], [\"terrainQuality\", 25], [\"terrainQualityName\", \"Low\"], [\"texQualityName\", \"VeryLow\"], [\"vramInfo\", [\"5.8 GiB\", \"7.9 GiB\", \"0 B\", \"231 MiB\", \"5.5 GiB\"]], // presence not guaranteed [\"vsync\", false], [\"waterReflectionQualityName\", \"Disabled\"] ];*/", "docSyntax": "getVideoOptions", "syntax": "getVideoOptions"}, "getWaterFillPercentage": {"version": "CMD", "tags": "", "description": "Get an object's water filling.", "example": "if (getWaterFillPercentage _myCar > 0) then { hint \"My feet are wet.\"; };", "docSyntax": "getWaterFillPercentage obj", "syntax": "getWaterFillPercentage <object>"}, "getWaterLeakiness": {"version": "CMD", "tags": "", "description": "Get an object's water intake ratio when immersed.", "example": "if (getWaterLeakiness _myCar > 0) then { hint \"don't go in the water with it!\"; };", "docSyntax": "getWaterLeakiness obj", "syntax": "getWaterLeakiness <object>"}, "getWeaponCargo": {"version": "CMD", "tags": "", "description": "Returns all weapons types and count from the cargo space", "example": "_content = getWeaponCargo carName;", "docSyntax": "getWeaponCargo object", "syntax": "getWeaponCargo <object>"}, "getWeaponSway": {"version": "CMD", "tags": "", "description": "Returns current size of weapon sway of a given unit, in radians.", "example": "_sway = getWeaponSway player;", "docSyntax": "getWeaponSway unit", "syntax": "getWeaponSway <objUnit>"}, "getWingsOrientationRTD": {"version": "CMD", "tags": "", "description": "Returns orientation of horizontal stabilizers.", "example": "_orientation = getWingsOrientationRTD myHelicopter;", "docSyntax": "getWingsOrientationRTD RTD_helicopter", "syntax": "getWingsOrientationRTD RTD_helicopter"}, "getWingsPositionRTD": {"version": "CMD", "tags": "", "description": "Returns position of stabilizers.", "example": "_position = getWingsPositionRTD myHelicopter;", "docSyntax": "getWingsPositionRTD RTD_helicopter", "syntax": "getWingsPositionRTD RTD_helicopter"}, "getWPPos": {"version": "CMD", "tags": "", "description": "Returns the position of a selected waypoint of a given group. Waypoints include only those which were placed in the mission editor.", "example": "[_group1, 1] setWPPos [200,600,0]; _pos = getWPPos [_group1, 1]; //\u00a0returns [200, 600, 0]", "docSyntax": "getWPPos [groupOrUnit, index]", "syntax": "getWPPos [groupOrUnit,<scalar>]"}, "glanceAt": {"version": "CMD", "tags": "", "description": "Control what the unit(s) is/are glancing at (target or Position). If target is used, it will get revealed fully. How frequently the unit(s) is/are glancing there depends on behaviour.", "example": "_someSoldier glanceAt _otherSoldier;", "docSyntax": "unit(s) glanceAt position", "syntax": "<objUnit>(s) glanceAt position"}, "globalChat": {"version": "CMD", "tags": "", "description": "Types text to the global radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne globalChat \"Show this text\";", "docSyntax": "unitName globalChat chatText", "syntax": "<objUnit> globalChat chatText"}, "globalRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the global radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne globalRadio \"messageOne\";", "docSyntax": "unit globalRadio radioName", "syntax": "<objUnit> globalRadio radioName"}, "goggles": {"version": "CMD", "tags": "", "description": "Returns name of currently used goggles (for NVGoggles use hmd).", "example": "_goggles = goggles assaultDiver; //G_Diving", "docSyntax": "goggles unit", "syntax": "goggles <objUnit>"}, "goto": {"version": "CMD", "tags": "", "description": "Break script flow and go to given label (defined by # - NOT to be confused with SQF's hash sign!)", "example": "goto \"myLabel\" player setDamage 1 #myLabel hint \"you successfully avoided death!\"", "docSyntax": "goto label", "syntax": "goto label"}, "group": {"version": "CMD", "tags": "", "description": "Returns the group a unit is assigned to.", "example": "_playerGrp = group player;", "docSyntax": "group object", "syntax": "<objGroup> <object>"}, "groupChat": {"version": "CMD", "tags": "", "description": "Types text to the group radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne groupChat \"Show this text\";", "docSyntax": "unitName groupChat chatText", "syntax": "<objUnit> groupChat chatText"}, "groupFromNetId": {"version": "CMD", "tags": "", "description": "Get group with given unique ID. For objects use objectFromNetId. As this command is MP only, you can use BIS_fnc_groupFromNetId, which extends the use to SP as well.", "example": "_group = groupFromNetId \"4:45\";", "docSyntax": "groupFromNetId id", "syntax": "groupFromNetId <scalar>"}, "groupIconSelectable": {"version": "CMD", "tags": "", "description": "Returns whether or not group icons raise onGroupIconClick, onGroupIconOverEnter and onGroupIconOverLeave events.", "example": "hint str groupIconSelectable;", "docSyntax": "groupIconSelectable", "syntax": "groupIconSelectable"}, "groupIconsVisible": {"version": "CMD", "tags": "", "description": "Returns array with group icons visibility. A getter for setGroupIconsVisible", "example": "hint str groupIconsVisible;", "docSyntax": "groupIconsVisible", "syntax": "groupIconsVisible"}, "groupId": {"version": "CMD", "tags": "", "description": "Returns a group's name or a unit's group ID number.", "example": "_name = groupId group player; //\u00a0e.g \"B Alpha 1-1\"", "docSyntax": "groupId group", "syntax": "groupId <objGroup>"}, "groupOwner": {"version": "CMD", "tags": "", "description": "Returns the machine network ID of the client to which the group is local. This command only works when called from the server. When called from a client, it always returns 0.", "example": "_clientID = groupOwner _someGroup;", "docSyntax": "groupOwner group", "syntax": "groupOwner <objGroup>"}, "groupRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the group radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol.", "example": "_soldierOne groupRadio \"messageOne\";", "docSyntax": "unit groupRadio radioName", "syntax": "<objUnit> groupRadio radioName"}, "groups": {"version": "CMD", "tags": "", "description": "Returns an array with all groups of given side.", "example": "private _allBluforGroups = groups blufor; //\u00a0equivalent of allGroups select { side _x == blufor };", "docSyntax": "groups side", "syntax": "groups <objSide>"}, "groupSelectedUnits": {"version": "CMD", "tags": "", "description": "Returns selected units in source group for normal commanding mode (individual units). For the High Command equivalent, see hcSelected.", "example": "_selectedUnits = groupSelectedUnits player;", "docSyntax": "groupSelectedUnits unit", "syntax": "groupSelectedUnits <objUnit>"}, "groupSelectUnit": {"version": "CMD", "tags": "", "description": "Selects a unit from player's group. If player is the leader, the effect of this command is similar to player pressing F1, F2, F3 etc to highlight units in his squad, after which the unit command menu is shown. If leader is AI, player will get usual communication menu to interact with the leader.", "example": "After leaving menu, deselect all units (command menu is not opened \u2192 no selection)", "docSyntax": "player groupSelectUnit [unit, select]", "syntax": "<objUnit> groupSelectUnit [<objUnit>,select]"}, "gunner": {"version": "CMD", "tags": "", "description": "Returns the gunner of a vehicle.", "example": "gunner _tank action [\"getout\", _tank];", "docSyntax": "gunner vehicle", "syntax": "gunner <objVehicle>"}, "gusts": {"version": "CMD", "tags": "", "description": "Return the current gusts value. Scale is 0 to 1.", "example": "_gustsValue = gusts;", "docSyntax": "gusts", "syntax": "gusts"}, "halt": {"version": "CMD", "tags": "", "description": "This command was meant to break the script into debugger, however currently it does not do anything except displaying and logging the following error: Error Debugger breakpoint hit.", "example": "if (_displayAnError) then {halt};", "docSyntax": "halt", "syntax": "halt"}, "handgunItems": {"version": "CMD", "tags": "", "description": "Returns array with all items assigned to the handgunWeapon except magazines. Use handgunMagazine command for the latter. This command is used for infantry weapons only.", "example": "handgunItems player; /* [ \"muzzle_snds_L\", // silencer \"\", // laser \"\", // optics \"\" // bipod ] */", "docSyntax": "handgunItems unit", "syntax": "handgunItems <objUnit>"}, "handgunMagazine": {"version": "CMD", "tags": "", "description": "Collects all loaded magazines from all handgunWeapon muzzles and returns them in Array, otherwise it returns []. This command is used for infantry weapons only.", "example": "hint str handgunMagazine player; //\u00a0[\"16Rnd_9x21_Mag\"]", "docSyntax": "handgunMagazine unit", "syntax": "handgunMagazine <objUnit>"}, "handgunWeapon": {"version": "CMD", "tags": "", "description": "Returns the name of a unit's handgun (an empty string if there is none).", "example": "hint handgunWeapon player; //\"hgun_P07_F\"", "docSyntax": "handgunWeapon unit", "syntax": "handgunWeapon <objUnit>"}, "handsHit": {"version": "CMD", "tags": "", "description": "Checks if a soldier's hands are hit, which results in inaccurate aiming.", "example": "? (handsHit player == 1) : player globalChat \"Ouch! Don't shoot at my hands dammit!\"", "docSyntax": "handsHit unitName", "syntax": "handsHit <objUnit>"}, "hashValue": {"version": "CMD", "tags": "", "description": "Processes provided value's hash, and encodes it using Base64. The hash algorithm is FNV-1A 64bit.", "example": "private _valueHash = hashValue \"Hello There\";", "docSyntax": "hashValue value", "syntax": "hashValue <scalar>"}, "hasInterface": {"version": "CMD", "tags": "", "description": "Returns true if the computer has an interface (a real player). False for a dedicated server or for a headless client.", "example": "_isHC = !(hasInterface || isDedicated);", "docSyntax": "hasInterface", "syntax": "hasInterface"}, "hasPilotCamera": {"version": "CMD", "tags": "", "description": "Returns true if the object airplane or helicopter has a pilotCamera.", "example": "hasPilotCamera vehicle player;", "docSyntax": "hasPilotCamera object", "syntax": "hasPilotCamera <object>"}, "hasWeapon": {"version": "CMD", "tags": "", "description": "Checks if a unit has the given weapon in hands or on back/in holster. Weapons inside unit containers such as vest and backpack are not counted.", "example": "if !(player hasWeapon \"arifle_MX_ACO_pointer_F\") then { player addWeapon \"arifle_MX_ACO_pointer_F\" };", "docSyntax": "unitName hasWeapon weaponName", "syntax": "<objUnit> hasWeapon weaponName"}, "hcAllGroups": {"version": "CMD", "tags": "", "description": "Returns selected groups in high command.", "example": "hcAllGroups player;", "docSyntax": "hcAllGroups unit", "syntax": "hcAllGroups <objUnit>"}, "hcGroupParams": {"version": "CMD", "tags": "", "description": "Returns parameters describing group in high command bar. Return value is array in format [groupName, teamName] or [] if error. Possible values for team name:", "example": "player hcGroupParams someGroup;", "docSyntax": "unit hcGroupParams group", "syntax": "<objUnit> hcGroupParams <objGroup>"}, "hcLeader": {"version": "CMD", "tags": "", "description": "Returns group's high command commander.", "example": "_leader = hcLeader groupName;", "docSyntax": "hcLeader group", "syntax": "hcLeader <objGroup>"}, "hcRemoveAllGroups": {"version": "CMD", "tags": "", "description": "Remove all groups from unit's high command bar.", "example": "hcRemoveAllGroups player;", "docSyntax": "hcRemoveAllGroups unit", "syntax": "hcRemoveAllGroups <objUnit>"}, "hcRemoveGroup": {"version": "CMD", "tags": "", "description": "Removes group from unit's high command bar.", "example": "player hcRemoveGroup BIS_group;", "docSyntax": "unit hcRemoveGroup group", "syntax": "<objUnit> hcRemoveGroup <objGroup>"}, "hcSelected": {"version": "CMD", "tags": "", "description": "Returns selected groups in high command.", "example": "array = hcSelected unit;", "docSyntax": "hcSelected unit", "syntax": "hcSelected <objUnit>"}, "hcSelectGroup": {"version": "CMD", "tags": "", "description": "Select given group in high command bar.", "example": "player hcSelectGroup [group_1,group_2];", "docSyntax": "unit hcSelectGroup array", "syntax": "<objUnit> hcSelectGroup <array>"}, "hcSetGroup": {"version": "CMD", "tags": "", "description": "Add group to unit's high command bar.", "example": "unit hcSetGroup [group, \"HQ\", \"teamred\"];", "docSyntax": "unit hcSetGroup [group, groupName, team]", "syntax": "<objUnit> hcSetGroup [<objGroup>,groupName,team]"}, "hcShowBar": {"version": "CMD", "tags": "", "description": "Shows or hides high command bar. There must be some groups under HC command to show HC bar.", "example": "hcShowBar true;", "docSyntax": "hcShowBar bool", "syntax": "hcShowBar <bool>"}, "hcShownBar": {"version": "CMD", "tags": "", "description": "Return whether the High Command bar is shown/active.", "example": "if (hcShownBar) then { hint \"HC bar is active\"; };", "docSyntax": "hcShownBar", "syntax": "hcShownBar"}, "headgear": {"version": "CMD", "tags": "", "description": "Returns headgear of unit.", "example": "hint headgear player; //H_HelmetB", "docSyntax": "headgear unit", "syntax": "headgear <objUnit>"}, "hideBody": {"version": "CMD", "tags": "", "description": "Hides dead body of the given unit. After a short delay, the body slowly sinks into the ground. After awhile, when group of the unit becomes grpNull, the body gets deleted and becomes objNull. If applied to alive unit, nothing happens until unit dies, then the unit's body gets hidden. If a dead unit is human player, the body is hidden but not deleted until player respawns.", "example": "hideBody player1;", "docSyntax": "hideBody unit", "syntax": "hideBody <objUnit>"}, "hideObject": {"version": "CMD", "tags": "", "description": "Hide entity. Can be used on soldiers and vehicles, also on static objects.", "example": "hideObject unitName;", "docSyntax": "hideObject object", "syntax": "hideObject <object>"}, "hideObjectGlobal": {"version": "CMD", "tags": "", "description": "This command is designed for MP. Hides object on all connected clients as well as JIP. Can be used on static objects. In singleplayer this command behaves just like hideObject.", "example": "hideObjectGlobal myObject; //\u00a0hides myObject hideObjectGlobal nearestBuilding [2500, 2500, 0];", "docSyntax": "hideObjectGlobal object", "syntax": "hideObjectGlobal <object>"}, "hideSelection": {"version": "CMD", "tags": "", "description": "Hides or shows the simple object's provided selection.", "example": "_simpleObject hideSelection [\"some_selection\", true];", "docSyntax": "object hideSelection [selection, hidden]", "syntax": "<object> hideSelection [selection,hidden]"}, "hierarchyObjectsCount": {"version": "CMD", "tags": "", "description": "The number of objects in hierarchy.", "example": "_number = hierarchyObjectsCount;", "docSyntax": "hierarchyObjectsCount", "syntax": "hierarchyObjectsCount"}, "hint": {"version": "CMD", "tags": "", "description": "Outputs a hint message to the right of the screen (left of the screen in Operation Flashpoint) with a sound (except in Armed Assault). To split message in multiple lines either use Structured Text or \\n (in lower case).", "example": "//\u00a0outputs the following: //\u00a0Press W to move forward. //\u00a0Press S to move backwards. hint \"Press W to move forward.\\nPress S to move backwards.\"", "docSyntax": "hint message", "syntax": "hint message"}, "hintC": {"version": "CMD", "tags": "", "description": "Displays a very basic message dialog in the center of the screen. Player control is taken away until \"Continue\" is pressed. The message dialog can be dragged around on the screen. After \"Continue\" has been pressed, the content of the hintC is repeated in a normal hint.", "example": "hintC \"Press W to move forward\";", "docSyntax": "hintC message", "syntax": "hintC message"}, "hintCadet": {"version": "CMD", "tags": "", "description": "Shows a text hint only when in cadetMode. The text can contain several lines. \\n is used to indicate the end of a line.", "example": "hintCadet \"Press W to move forward\";", "docSyntax": "hintCadet text", "syntax": "hintCadet <string>"}, "hintSilent": {"version": "CMD", "tags": "", "description": "Same as hint, but without a sound.", "example": "hintSilent format [\"Hello, %1!\", name player];", "docSyntax": "hintSilent text", "syntax": "hintSilent <string>"}, "hmd": {"version": "CMD", "tags": "", "description": "Returns class name of currently used Head Mounted Display. Returns an empty string if the slot is empty.", "example": "_nvgs = hmd player; //NVGoggles", "docSyntax": "hmd unit", "syntax": "hmd <objUnit>"}, "hostMission": {"version": "CMD", "tags": "", "description": "Host the multiplayer mission defined in the config class and opens the lobby with the scenario loaded. Must be called in UI action from a dialog.", "example": "hostMission [configFile >> \"CfgMissions\" >> \"MPMissions\" >> _scenarioClassName, _currentlyActiveDisplay];", "docSyntax": "hostMission [configEntry, activeDisplay]", "syntax": "hostMission [configEntry,activeDisplay]"}, "htmlLoad": {"version": "CMD", "tags": "", "description": "Load HTML from file or URI using given control. File path is relative to current mission dir or an absolute path (with drive letter etc.). The command is subject to restrictions, imposed by CfgCommands class.", "example": "_control htmlLoad \"briefing.html\";", "docSyntax": "control htmlLoad filename", "syntax": "<uiControl> htmlLoad filename"}, "HUDMovementLevels": {"version": "CMD", "tags": "", "description": "Returns movement borders for HUD [min speed, max speed, min alt, max alt, min dir, max dir, position[x,y,z] or target]", "example": "HUDMovementLevels; //\u00a0returns e.g [0,0,0,0,0,0,[0,0,0]]", "docSyntax": "HUDMovementLevels", "syntax": "HUDMovementLevels"}, "humidity": {"version": "CMD", "tags": "", "description": "Returns the current humidity value. 0 is no humidity and 1 is 100% humidity. Humidity value quickly changes from 0 to 1 when rain starts, then slowly changes from 1 to 0 when rain stops.", "example": "currentHumidity = humidity;", "docSyntax": "humidity", "syntax": "humidity"}, "ignore3DENHistory": {"version": "CMD", "tags": "", "description": "Ignores all history steps created by executing the given code.", "example": "ignore3DENHistory { create3DENEntity [\"Object\", \"B_Soldier_F\", screenToWorld [0.5, 0.5]]; //\u00a0no Ctrl+Z available for this operation };", "docSyntax": "ignore3DENHistory code", "syntax": "ignore3DENHistory <code>"}, "image": {"version": "CMD", "tags": "", "description": "Creates a structured text containing the given image. Use setAttributes to set additional attributes on the image.", "example": "hint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "image filename", "syntax": "image filename"}, "importAllGroups": {"version": "CMD", "tags": "", "description": "Imports all groups into the RTE.", "example": "-", "docSyntax": "importAllGroups map", "syntax": "importAllGroups <objMap>"}, "importance": {"version": "CMD", "tags": "", "description": "Returns a location's importance value.", "example": "_locationImportance = importance myLocation;", "docSyntax": "importance location", "syntax": "importance location"}, "in": {"version": "CMD", "tags": "", "description": "Checks whether value is in array, unit is in vehicle, position is inside location or ANSI string is part of other ANSI string. If Unicode support is desired, see forceUnicode.", "example": "1 in [0, 1, 2]; //\u00a0true", "docSyntax": "value in array", "syntax": "<scalar> in <array>"}, "inArea": {"version": "CMD", "tags": "", "description": "Checks whether given position or object is inside given area. Use inAreaArray to check multiple positions/objects within area.", "example": "_playerIsInside = player inArea _myTrigger;", "docSyntax": "position inArea area", "syntax": "position inArea area"}, "inAreaArray": {"version": "CMD", "tags": "", "description": "Returns given list of Objects and/or Positions that are in the given area, area defined by a trigger, marker, location or array.", "example": "vehicles inAreaArray myTrigger;", "docSyntax": "positions inAreaArray area", "syntax": "positions inAreaArray area"}, "inAreaArrayIndexes": {"version": "CMD", "tags": "", "description": "Returns positions' indices that are within the provided area.", "example": "private _players = call BIS_fnc_listPlayers; private _indices = _players inAreaArrayIndexes _marker; { private _player = _players select _x; [\"You are in the marker!\"] remoteExec [\"hint\", _player]; } forEach _indices;", "docSyntax": "positions inAreaArrayIndexes area", "syntax": "positions inAreaArrayIndexes area"}, "incapacitatedState": {"version": "CMD", "tags": "", "description": "Returns the incapacitated sub-state of the given unit, when the lifeState of the unit is \"INCAPACITATED\". Could be one of:", "example": "_result = incapacitatedState player;", "docSyntax": "incapacitatedState person", "syntax": "incapacitatedState <objUnit>"}, "inflame": {"version": "CMD", "tags": "", "description": "Sets the state of a fireplace.", "example": "_fireplaceOne inflame true;", "docSyntax": "fireplace inflame burn", "syntax": "fireplace inflame burn"}, "inflamed": {"version": "CMD", "tags": "", "description": "Checks if fireplace is inflamed (burning) or not. To check if a unit is receiving damage from fire, use isBurning command.", "example": "_inflamed = inflamed _fireplaceOne;", "docSyntax": "inflamed fireplace", "syntax": "inflamed fireplace"}, "infoPanel": {"version": "CMD", "tags": "", "description": "Returns information about what is currently displayed on given player's info panel.", "example": "infoPanel \"left\" params [\"_componentClass\", \"_componentType\"];", "docSyntax": "infoPanel infoPanelId", "syntax": "infoPanel infoPanelId"}, "infoPanelComponentEnabled": {"version": "CMD", "tags": "", "description": "Controls availability of component to given object info panel.", "example": "//\u00a0returns true if specific component \"SensorDisplay\" is enabled on player vehicle's left panel _state = [vehicle player, [-1]] infoPanelComponentEnabled [\"VehicleSystemsDisplayManagerComponentLeft\", \"SensorDisplay\"];", "docSyntax": "unit infoPanelComponentEnabled [panelID, componentClassOrType]", "syntax": "<objUnit> infoPanelComponentEnabled [panelID,componentClassOrType]"}, "infoPanelComponents": {"version": "CMD", "tags": "", "description": "Returns array of all components available to given object info panel.", "example": "//\u00a0returns array of all components configured for _helicopter pilot seat private _componentsData = [_helicopter, [-1]] infoPanelComponents \"left\";", "docSyntax": "unit infoPanelComponents panelID", "syntax": "<objUnit> infoPanelComponents panelID"}, "infoPanels": {"version": "CMD", "tags": "", "description": "Returns array all info panels configured for given object or object and turret path.", "example": "infoPanels [vehicle player, [0]];", "docSyntax": "infoPanels unit", "syntax": "infoPanels <objUnit>"}, "inGameUISetEventHandler": {"version": "CMD", "tags": "", "description": "Sets given event handler of in-game UI. If EH function returns true, performed action is overridden. Event handlers available are:", "example": "inGameUISetEventHandler [\"Action\", \"hint 'Lights, Camera, Action!'; true\"]; sleep 10; inGameUISetEventHandler [\"Action\", \"\"]; //\u00a0removes the \"Action\" EH", "docSyntax": "inGameUISetEventHandler [handlerName, code]", "syntax": "inGameUISetEventHandler [handlerName,<code>]"}, "inheritsFrom": {"version": "CMD", "tags": "", "description": "Returns base entry of config entry.", "example": "_base = inheritsFrom (configFile >> \"CfgVehicles\" >> \"Car\"); //\u00a0returns \"LandVehicle\" Config entry", "docSyntax": "inheritsFrom config", "syntax": "inheritsFrom config"}, "initAmbientLife": {"version": "CMD", "tags": "", "description": "Initialises the ambient life on local client from CfgWorlds >> worldName >> AmbientA3. Has no effect on dedicated server or headless client.", "example": "initAmbientLife;", "docSyntax": "initAmbientLife", "syntax": "initAmbientLife"}, "inPolygon": {"version": "CMD", "tags": "", "description": "Checks whether position is inside given polygon. The polygon is only checked in 2 dimensions, i.e. the value of Z is ignored.", "example": "private _isInside = [100, 100, 0] inPolygon [[0, 0, 0], [1000, 1000, 0], [1000, 0, 0]];", "docSyntax": "position inPolygon polygon", "syntax": "position inPolygon polygon"}, "inputAction": {"version": "CMD", "tags": "", "description": "Return the state of input devices mapped to given input action.", "example": "inputAction \"leanLeft\";", "docSyntax": "inputAction name", "syntax": "inputAction <string>"}, "inputController": {"version": "CMD", "tags": "", "description": "Returns the state of controller inputs. The controller is a standard XBOX controller which is selected with Windows XBOX controller scheme. The input can be:", "example": "State of the fire trigger:", "docSyntax": "inputController input", "syntax": "inputController input"}, "inputMouse": {"version": "CMD", "tags": "", "description": "Returns the state of mouse button action, alone or in combination with key presses. For more information on codes and combos see Arma_3:_Modded_Keybinding and DIK_KeyCodes but here are some examples of how codes could be hand constructed:", "example": "State of the RMB:", "docSyntax": "inputMouse button", "syntax": "inputMouse button"}, "inRangeOfArtillery": {"version": "CMD", "tags": "", "description": "Returns true if all given units are able to fire at given position with given magazineType.", "example": "_isInRange = getMarkerPos \"myTarget\" inRangeOfArtillery [[myArty], \"32Rnd_155mm_Mo_shells\"];", "docSyntax": "pos inRangeOfArtillery [units, magazineType]", "syntax": "<array> inRangeOfArtillery [units,magazineType]"}, "insertEditorObject": {"version": "CMD", "tags": "", "description": "Insert an object to the editor and assign arguments. Create script is,not called. Returns the ID of the new EditorObject. Subtype class is,optional.", "example": "-", "docSyntax": "map insertEditorObject [type,value,[name1,value1,...],subtype class]", "syntax": "<objMap> insertEditorObject [type,<scalar>,[name1,value1,...],subtype class]"}, "insideBuilding": {"version": "CMD", "tags": "", "description": "Returns how much a man is inside a building. The value is the same as normally returned by weapons/ammo sound controller \"interior\". It is possible to modify an individual object to use sound interior with enableAudioFeature.", "example": "private _isFullyInside = insideBuilding player == 1;", "docSyntax": "insideBuilding man", "syntax": "insideBuilding man"}, "intersect": {"version": "CMD", "tags": "", "description": "Finds named selections in object which are in specified LOD, intersected by given section of a line. Return value is in the form of [selection, distance]. Multiple returned arrays are nested within a single array. No intersection returns []. lodName could be one of the following:", "example": "[_tank, \"VIEW\"] intersect [[1500, 1500, 2], [1550, 1500, 2]];", "docSyntax": "[object, lodName] intersect [begPos, endPos]", "syntax": "[<object>,lodName] intersect [begPos,endPos]"}, "is3DEN": {"version": "CMD", "tags": "", "description": "Returns true if the Eden Editor is currently being used.", "example": "if is3DEN then {systemChat \"Welcome to Eden Editor!\"};", "docSyntax": "is3DEN", "syntax": "is3DEN"}, "is3DENMultiplayer": {"version": "CMD", "tags": "", "description": "Returns true if the Eden Editor is in multiplayer mode.", "example": "if is3DENMultiplayer then {systemChat \"You are hosting a test server!\"};", "docSyntax": "is3DENMultiplayer", "syntax": "is3DENMultiplayer"}, "is3DENPreview": {"version": "CMD", "tags": "", "description": "Returns true if the Eden Editor is currently in mission preview mode, single player or multiplayer. (see also is3DEN, is3DENMultiplayer)", "example": "if is3DENPreview then { systemChat \"Welcome to Eden Editor Preview!\" };", "docSyntax": "is3DENPreview", "syntax": "is3DENPreview"}, "isAbleToBreathe": {"version": "CMD", "tags": "", "description": "If unit is diving and doesn't have a re-breather, it returns false. Diving means the unit's head is underwater. If unit is underwater and has a re-breather, the command returns true.", "example": "_canBreath = isAbleToBreathe player;", "docSyntax": "isAbleToBreathe unit", "syntax": "isAbleToBreathe <objUnit>"}, "isActionMenuVisible": {"version": "CMD", "tags": "", "description": "Returns true if scroll menu is visible.", "example": "if (isActionMenuVisible) then { hint \"Scroll menu is opened\" };", "docSyntax": "isActionMenuVisible", "syntax": "isActionMenuVisible"}, "isAgent": {"version": "CMD", "tags": "", "description": "Check if team member is an agent.", "example": "isAgent teamMember _unit;", "docSyntax": "isAgent teamMember", "syntax": "isAgent teamMember"}, "isAimPrecisionEnabled": {"version": "CMD", "tags": "", "description": "Returns true if procedural aiming precision affects weapon sway.", "example": "_isAffected = isAimPrecisionEnabled player;", "docSyntax": "isAimPrecisionEnabled unit", "syntax": "isAimPrecisionEnabled <objUnit>"}, "isAISteeringComponentEnabled": {"version": "CMD", "tags": "", "description": "Returns whether the AI steering component feature is enabled for the specified vehicle.", "example": "isAISteeringComponentEnabled myTank;", "docSyntax": "isAISteeringComponentEnabled vehicle", "syntax": "isAISteeringComponentEnabled <objVehicle>"}, "isAllowedCrewInImmobile": {"version": "CMD", "tags": "", "description": "Whether or not units can be in a vehicle with broken tracks/wheels.", "example": "if !(isAllowedCrewInImmobile _tank) then { _tank allowCrewInImmobile true; };", "docSyntax": "isAllowedCrewInImmobile vehicle", "syntax": "isAllowedCrewInImmobile <objVehicle>"}, "isArray": {"version": "CMD", "tags": "", "description": "Check if config entry represents array.", "example": "_ok = isArray (configFile >> \"CfgVehicles\") //\u00a0returns false", "docSyntax": "isArray config", "syntax": "isArray config"}, "isAutoHoverOn": {"version": "CMD", "tags": "", "description": "Return true if vehicle has enabled auto hover. (always returns false if the vehicle can't set auto hover)", "example": "_isOn = isAutoHoverOn vehicle player;", "docSyntax": "isAutoHoverOn vehicle", "syntax": "isAutoHoverOn <objVehicle>"}, "isAutonomous": {"version": "CMD", "tags": "", "description": "Returns whether the UAV is in autonomous mode or not.", "example": "private _isAutonomous = isAutonomous uav;", "docSyntax": "isAutonomous uav", "syntax": "isAutonomous uav"}, "isAutoStartUpEnabledRTD": {"version": "CMD", "tags": "", "description": "Returns state of automatic start up action.", "example": "_state = isAutoStartUpEnabledRTD _myHelicopter;", "docSyntax": "isAutoStartUpEnabledRTD helicopter", "syntax": "isAutoStartUpEnabledRTD helicopter"}, "isAutotest": {"version": "CMD", "tags": "", "description": "Returns true if game was started with autotest parameter", "example": "_bool = isAutotest;", "docSyntax": "isAutotest", "syntax": "isAutotest"}, "isAutoTrimOnRTD": {"version": "CMD", "tags": "", "description": "Returns state of auto trim functionality.", "example": "_state = isAutoTrimOnRTD _myHelicopter;", "docSyntax": "isAutoTrimOnRTD helicopter", "syntax": "isAutoTrimOnRTD helicopter"}, "isAwake": {"version": "CMD", "tags": "", "description": "Returns resting state of a PhysX (EPE) object. Some EPE objects are deliberately put to sleep by the engine to save resources. This command returns true when object is simulating and false when it is put to sleep. With units of type Man the behaviour is slightly different. As units never get put to sleep, the command outputs ragdoll state of a unit instead. There are 6 states for the output of the command:", "example": "private _isAwake = isAwake _object;", "docSyntax": "isAwake object", "syntax": "isAwake <object>"}, "isBleeding": {"version": "CMD", "tags": "", "description": "Returns whether the unit is bleeding.", "example": "if (isBleeding player) then { player groupChat \"I'm bleeding!!\"; };", "docSyntax": "isBleeding unit", "syntax": "isBleeding <objUnit>"}, "isBurning": {"version": "CMD", "tags": "", "description": "Returns whether the unit is burning. This returns true only if unit is damaged by nearby fire, it does not check whether a fireplace is burning, use inflamed command for that.", "example": "if (isBurning player) then { player groupChat \"I'm burning!!\"; };", "docSyntax": "isBurning unit", "syntax": "isBurning <objUnit>"}, "isClass": {"version": "CMD", "tags": "", "description": "Check if config entry represents config class.", "example": "_ok = isClass (configFile >> \"CfgVehicles\");", "docSyntax": "isClass config", "syntax": "isClass config"}, "isCollisionLightOn": {"version": "CMD", "tags": "", "description": "Returns true if vehicle collision lights are on otherwise false.", "example": "_collisionLightOn = isCollisionLightOn heli;", "docSyntax": "isCollisionLightOn vehicle", "syntax": "isCollisionLightOn <objVehicle>"}, "isCopilotEnabled": {"version": "CMD", "tags": "", "description": "Returns true if copilots actions are enabled.", "example": "if (!isCopilotEnabled myHeli) then { myHeli enableCopilot true; };", "docSyntax": "isCopilotEnabled vehicle", "syntax": "isCopilotEnabled <objVehicle>"}, "isDamageAllowed": {"version": "CMD", "tags": "", "description": "A getter for allowDamage command. The command indicates if damage is allowed at current locality, hence local effect of the command. For complete solution for being able to tell whether or not an object can be damaged at current locality see Example 1.", "example": "private _canBeDamaged = local _obj && isDamageAllowed _obj;", "docSyntax": "isDamageAllowed object", "syntax": "isDamageAllowed <object>"}, "isDedicated": {"version": "CMD", "tags": "", "description": "Returns true if the machine executing the command is a dedicated multiplayer server. Returns false in single player.", "example": "if (isDedicated) then { diag_log \"Dedicated Server on the run\u00a0!\"; };", "docSyntax": "isDedicated", "syntax": "isDedicated"}, "isDLCAvailable": {"version": "CMD", "tags": "", "description": "Returns true if the DLC (CDLC included) is marked as available on Steam. Official and Creator DLC appIds can be found on Arma 3: DLCs & Expansions and Arma 3: CDLCs pages.", "example": "private _karts = 288520; isDLCAvailable _karts; //\u00a0returns true", "docSyntax": "isDLCAvailable appId", "syntax": "isDLCAvailable appId"}, "isEngineOn": {"version": "CMD", "tags": "", "description": "Returns true if engine is on, false if it is off.", "example": "_carEngineIsOn = isEngineOn _carOne;", "docSyntax": "isEngineOn vehicle", "syntax": "isEngineOn <objVehicle>"}, "isEqualRef": {"version": "CMD", "tags": "", "description": "Compares two values by reference, returns true if equal.", "example": "_arr1 = [1,[2,[3]]]; _arr2 = _arr1; _arr1 isEqualTo _arr2; //\u00a0true _arr1 isEqualRef _arr2; //\u00a0true _arr2 = +_arr1; //\u00a0array copy _arr1 isEqualTo _arr2; //\u00a0true _arr1 isEqualRef _arr2; //\u00a0false", "docSyntax": "val1 isEqualRef val2", "syntax": "val1 isEqualRef val2"}, "isEqualTo": {"version": "CMD", "tags": "", "description": "Performs strict comparison between var1 and var2 and returns true if equal, otherwise false. Strict means that it would check that both arguments are of the same data type and then compare the values.", "example": "_arr1 = [1, [2, [3]]]; _arr2 = [1, [2, [3]]]; if (_arr1 isEqualTo _arr2) then { hint \"Arrays match!\" };", "docSyntax": "val1 isEqualTo val2", "syntax": "val1 isEqualTo val2"}, "isEqualType": {"version": "CMD", "tags": "", "description": "Compares two values' types. A much faster alternative to typeName a == typeName b.", "example": "private _var = [1,2,3]; _var isEqualType 0; //\u00a0false _var isEqualType []; //\u00a0true", "docSyntax": "val1 isEqualType val2", "syntax": "val1 isEqualType val2"}, "isEqualTypeAll": {"version": "CMD", "tags": "", "description": "Compares types of all elements of an array to the type of a single value. Since Arma 3 v2.09.149634 no additional check is needed to make sure the first argument is an Array.", "example": "_arr = [1,2,3,4,5,6,7,8,9,0]; _arr isEqualTypeAll \"\"; //\u00a0false _arr isEqualTypeAll 0; //\u00a0true", "docSyntax": "arr isEqualTypeAll val", "syntax": "arr isEqualTypeAll val"}, "isEqualTypeAny": {"version": "CMD", "tags": "", "description": "Compares type of given value to every type in the given array and if match is found, true is returned.", "example": "_var = [1, 2, 3]; _var isEqualTypeAny [0, \"\", objNull]; //false _var isEqualTypeAny [0, \"\", objNull, []]; //true", "docSyntax": "val isEqualTypeAny types", "syntax": "val isEqualTypeAny types"}, "isEqualTypeArray": {"version": "CMD", "tags": "", "description": "Compares types of all elements of one array to types of all elements of another array. Since Arma 3 v2.09.149634 no additional check is needed to make sure the first argument is an Array.", "example": "_arr = [1,true,\"three\"]; _arr isEqualTypeArray [0,objNull,\"\"]; //\u00a0false _arr isEqualTypeArray [0,false,\"\"]; //\u00a0true", "docSyntax": "arr1 isEqualTypeArray arr2", "syntax": "arr1 isEqualTypeArray arr2"}, "isEqualTypeParams": {"version": "CMD", "tags": "", "description": "Compares types of all elements of input array to types of all elements of template array. Similar to isEqualTypeArray however this command is designed for fast validation of functions params, so there are differences:", "example": "//\u00a0These all return true [1,2,player,\"10\"] isEqualTypeParams [0,0,objNull,\"\"]; [1,2,player,\"10\",true] isEqualTypeParams [0,0,nil,\"\"]; [1,2,getPos player,\"10\",true] isEqualTypeParams [0,0,nil,\"\"];", "docSyntax": "input isEqualTypeParams template", "syntax": "input isEqualTypeParams template"}, "isFilePatchingEnabled": {"version": "CMD", "tags": "", "description": "Returns true if file patching is enabled otherwise false", "example": "_state = isFilePatchingEnabled;", "docSyntax": "isFilePatchingEnabled", "syntax": "isFilePatchingEnabled"}, "isFinal": {"version": "CMD", "tags": "", "description": "Checks if Code or a variable was compiled final with compileFinal.", "example": "private _myCode = compileFinal \"a = a + 1\"; systemChat format [\"isFinal \"\"_myCode\"\": %1\", isFinal \"_myCode\"]; //\u00a0true systemChat format [\"isFinal _myCode: %1\", isFinal _myCode]; //\u00a0true systemChat format [\"isFinal some code: %1\", isFinal { hint \"Hello there\" }]; //\u00a0false private _myArray1 = list _myTrigger; systemChat format [\"isFinal _myArray1: %1\", isFinal _myArray1]; //\u00a0true private _myArray2 = [1, 2, 3]; systemChat format [\"isFinal _myArray2: %1\", isFinal _myArray2]; //\u00a0false private _myHashMap = compileFinal createHashMap; systemChat format [\"isFinal _myHashMap: %1\", isFinal _myHashMap]; //\u00a0true", "docSyntax": "isFinal variable", "syntax": "isFinal variable"}, "isFlashlightOn": {"version": "CMD", "tags": "", "description": "Returns true if there is a linked and enabled flashlight on a given weapon.", "example": "player isFlashlightOn (currentWeapon player);", "docSyntax": "unit isFlashlightOn weapon", "syntax": "<objUnit> isFlashlightOn <string>"}, "isFlatEmpty": {"version": "CMD", "tags": "", "description": "Checks given position against given filter params. Filter includes checks for:", "example": "Check if player position is over land:", "docSyntax": "position isFlatEmpty [minDistance, mode, maxGradient, maxGradientRadius, overLandOrWater, shoreLine, ignoreObject]", "syntax": "position isFlatEmpty [minDistance,mode,maxGradient,maxGradientRadius,overLandOrWater,shoreLine,ignoreObject]"}, "isForcedWalk": {"version": "CMD", "tags": "", "description": "Returns true if player is forced to walk with forceWalk.", "example": "_bool = isForcedWalk player;", "docSyntax": "isForcedWalk unitName", "syntax": "isForcedWalk <objUnit>"}, "isFormationLeader": {"version": "CMD", "tags": "", "description": "Returns true if the specified unit is subgroup leader.", "example": "_isLeader = isFormationLeader player;", "docSyntax": "isFormationLeader unit", "syntax": "isFormationLeader <objUnit>"}, "isGameFocused": {"version": "CMD", "tags": "", "description": "Returns the state of game focus changed by pressing ALT + \u21b9 Tab or similar action.", "example": "if (!isGameFocused) then { endMission \"End\" };", "docSyntax": "isGameFocused", "syntax": "isGameFocused"}, "isGamePaused": {"version": "CMD", "tags": "", "description": "Returns the state of game simulation. Simulation can get paused by pressing Alt + \u21b9 Tab or a system dialog opening (e.g. Esc menu). Simulation will not get paused if -noPause startup parameter is used.", "example": "onEachFrame { if (isGamePaused) exitWith {}; //\u00a0...do stuff };", "docSyntax": "isGamePaused", "syntax": "isGamePaused"}, "isGroupDeletedWhenEmpty": {"version": "CMD", "tags": "", "description": "Checks if the given group marked for auto-deletion when empty. See deleteGroupWhenEmpty.", "example": "_isMarked = isGroupDeletedWhenEmpty _group;", "docSyntax": "isGroupDeletedWhenEmpty group", "syntax": "isGroupDeletedWhenEmpty <objGroup>"}, "isHidden": {"version": "CMD", "tags": "", "description": "Returns whether a person is hidden (reached the hiding position).", "example": "_bobIsHidden = isHidden bob;", "docSyntax": "isHidden person", "syntax": "isHidden <objUnit>"}, "isInRemainsCollector": {"version": "CMD", "tags": "", "description": "Checks if unit or vehicle is queued for disposal after death.", "example": "if (isInRemainsCollector unit1) then {hint \"unit1 is queued for disposal\"};", "docSyntax": "isInRemainsCollector remain", "syntax": "isInRemainsCollector remain"}, "isInstructorFigureEnabled": {"version": "CMD", "tags": "", "description": "Returns the status of INSTRUCTOR FIGURE setting in UI (OPTIONS >> GAME >> GENERAL >> INSTRUCTOR FIGURE).", "example": "hint str isInstructorFigureEnabled;", "docSyntax": "isInstructorFigureEnabled", "syntax": "isInstructorFigureEnabled"}, "isIRLaserOn": {"version": "CMD", "tags": "", "description": "Returns true if there is a linked and enabled IR on the given weapon.", "example": "player isIRLaserOn currentWeapon player;", "docSyntax": "unit isIRLaserOn weapon", "syntax": "<objUnit> isIRLaserOn <string>"}, "isKeyActive": {"version": "CMD", "tags": "", "description": "Checks whether the given key is active in the current user profile. See keys, keysLimit and doneKeys in the description.ext file of the missions.", "example": "_active = isKeyActive \"Mission04Key\";", "docSyntax": "isKeyActive keyName", "syntax": "isKeyActive keyName"}, "isKindOf": {"version": "CMD", "tags": "", "description": "Checks whether the given object or type is (a subtype) of the given type.", "example": "vehicle player isKindOf \"Tank\";", "docSyntax": "object isKindOf typeName", "syntax": "<object> isKindOf typeName"}, "isLaserOn": {"version": "CMD", "tags": "", "description": "Returns true if the vehicle has its laser turned on. Not to be confused with isIRLaserOn which is for units. Main syntax is for primary gunner turret.", "example": "if (isLaserOn _vehicle) then { hint \"target ready\" };", "docSyntax": "isLaserOn entity", "syntax": "isLaserOn entity"}, "isLightOn": {"version": "CMD", "tags": "", "description": "Returns true if vehicle headlights are on otherwise false.", "example": "_headlightsOn = isLightOn vehicle player;", "docSyntax": "isLightOn vehicle", "syntax": "isLightOn <objVehicle>"}, "isLocalized": {"version": "CMD", "tags": "", "description": "Checks whether given stringName is localized.", "example": "if (isLocalized \"STR_USRACT_ADJUST\") then { hint localize \"STR_USRACT_ADJUST\"; } else { hint \"STR_USRACT_ADJUST\"; diag_log \"ToDo: STR_USRACT_ADJUST is not localized\"; };", "docSyntax": "isLocalized stringName", "syntax": "isLocalized stringName"}, "isManualFire": {"version": "CMD", "tags": "", "description": "Returns true if manual fire is on. Manual fire could either be selected in vehicle action menu (if available) or with action \"ManualFire\" and \"ManualFireCancel\". Always returns false for a soldier.", "example": "_bool = isManualFire vehicle player;", "docSyntax": "isManualFire vehicleName", "syntax": "isManualFire vehicleName"}, "isMarkedForCollection": {"version": "CMD", "tags": "", "description": "Checks whether the object is marked for weapons collection.", "example": "_marked = isMarkedForCollection _truck;", "docSyntax": "isMarkedForCollection object", "syntax": "isMarkedForCollection <object>"}, "isMissionProfileNamespaceLoaded": {"version": "CMD", "tags": "", "description": "The missionProfileNamespace variables are loaded at the start of a mission, before 'init.sqf' is executed. If the file with saved variables for current mission exists in user profile and is loaded, the command returns true. It also will return true after the first execution of saveMissionProfileNamespace command, which also creates the file.", "example": "private _isLoaded = isMissionProfileNamespaceLoaded;", "docSyntax": "isMissionProfileNamespaceLoaded", "syntax": "isMissionProfileNamespaceLoaded"}, "isMultiplayer": {"version": "CMD", "tags": "", "description": "Return true if multiPlayer.", "example": "if (isMultiplayer) then { //\u00a0...block }", "docSyntax": "isMultiplayer", "syntax": "isMultiplayer"}, "isMultiplayerSolo": {"version": "CMD", "tags": "", "description": "Returns true when playing a game in solo multiplayer (for example Apex coop campaign PLAY SOLO option).", "example": "_state = isMultiplayerSolo;", "docSyntax": "isMultiplayerSolo", "syntax": "isMultiplayerSolo"}, "isNil": {"version": "CMD", "tags": "", "description": "Tests whether a variable is nil or undefined from its identifier, or whether the given expression evaluates to nil or Nothing.", "example": "if (isNil \"TAG_globalVariable\") then { TAG_globalVariable = 0 }; if (isNil \"_localVariable\") then { hint \"_localVariable is nil\" };", "docSyntax": "isNil variableName", "syntax": "isNil variableName"}, "isNotEqualRef": {"version": "CMD", "tags": "", "description": "Compares two values by reference, returns true if not equal.", "example": "_arr1 = [1,[2,[3]]]; _arr2 = _arr1; _arr1 isEqualTo _arr2; //\u00a0true _arr1 isNotEqualRef _arr2; //\u00a0false _arr2 = +_arr1; //\u00a0array copy _arr1 isEqualTo _arr2; //\u00a0true _arr1 isNotEqualRef _arr2; //\u00a0true", "docSyntax": "val1 isNotEqualRef val2", "syntax": "val1 isNotEqualRef val2"}, "isNotEqualTo": {"version": "CMD", "tags": "", "description": "Performs strict comparison between var1 and var2 and returns false if equal, otherwise true.", "example": "private _true = 0 isNotEqualTo 1;", "docSyntax": "val1 isNotEqualTo val2", "syntax": "val1 isNotEqualTo val2"}, "isNull": {"version": "CMD", "tags": "", "description": "Checks whether the tested item is null.", "example": "if (isNull obj) then { hint \"obj variable is defined but obj is null\"; };", "docSyntax": "isNull entity", "syntax": "isNull entity"}, "isNumber": {"version": "CMD", "tags": "", "description": "Check if config entry represents number.", "example": "_ok = isNumber (configFile >> \"CfgVehicles\");", "docSyntax": "isNumber config", "syntax": "isNumber config"}, "isObjectHidden": {"version": "CMD", "tags": "", "description": "Checks visibility of a given object on the local machine.", "example": "_bobIsHidden = isObjectHidden bob;", "docSyntax": "isObjectHidden object", "syntax": "isObjectHidden <object>"}, "isObjectRTD": {"version": "CMD", "tags": "", "description": "Returns true if RTD model is loaded.", "example": "_heliRTD = isObjectRTD vehicle player;", "docSyntax": "isObjectRTD helicopter", "syntax": "isObjectRTD helicopter"}, "isOnRoad": {"version": "CMD", "tags": "", "description": "Checks if given position is inside road segment. Same as roadAt, only return is boolean instead of road object.", "example": "_objOnRoad = isOnRoad player;", "docSyntax": "isOnRoad position", "syntax": "isOnRoad position"}, "isPiPEnabled": {"version": "CMD", "tags": "", "description": "Returns whether Picture-In-Picture video option (Render to Texture) is enabled or not.", "example": "private _PiPState = isPiPEnabled;", "docSyntax": "isPiPEnabled", "syntax": "isPiPEnabled"}, "isPlayer": {"version": "CMD", "tags": "", "description": "Checks if given person is a player. Returns true for headless clients as well.", "example": "if (isPlayer _Soldier1) then { _soldier1 setDamage 1; };", "docSyntax": "isPlayer unit", "syntax": "isPlayer <objUnit>"}, "isRealTime": {"version": "CMD", "tags": "", "description": "Returns true if the mission editor is operating in real time mode.", "example": "_isRealTime = isRealTime _map;", "docSyntax": "isRealTime map", "syntax": "isRealTime <objMap>"}, "isRemoteControlling": {"version": "CMD", "tags": "", "description": "Returns true if the given player is remote-controlling a unit.", "example": "if (isRemoteControlling player) then { hint format [\"You are controlling %1\", remoteControlled player]; } else { hint \"Why not remote-control something?\"; };", "docSyntax": "isRemoteControlling person", "syntax": "isRemoteControlling <objUnit>"}, "isRemoteExecuted": {"version": "CMD", "tags": "", "description": "Returns true if the code context is being remote executed by remoteExec or remoteExecCall. In SP always returns false. See also isRemoteExecutedJIP", "example": "private _remoteExecuted = isRemoteExecuted;", "docSyntax": "isRemoteExecuted", "syntax": "isRemoteExecuted"}, "isRemoteExecutedJIP": {"version": "CMD", "tags": "", "description": "Returns true if the code context is being remote executed from the JIP queue by remoteExec or remoteExecCall (when JIP param was set). It is a subset of isRemoteExecuted:", "example": "_remoteExecutedJIP = isRemoteExecutedJIP;", "docSyntax": "isRemoteExecutedJIP", "syntax": "isRemoteExecutedJIP"}, "isSaving": {"version": "CMD", "tags": "", "description": "Returns the status of autosave request, made when saveGame command is executed. When request is made, the command immediately returns true. The engine then handles the saving and when it is done, the command returns false.", "example": "[] spawn { saveGame; waitUntil { !isSaving }; systemChat \"Game Saving Is Done!\"; };", "docSyntax": "isSaving", "syntax": "isSaving"}, "isSensorTargetConfirmed": {"version": "CMD", "tags": "", "description": "Returns if given unit is confirmed target for given side.", "example": "private _enemyConfirmed = _possibleEnemy isSensorTargetConfirmed opfor;", "docSyntax": "unit isSensorTargetConfirmed side", "syntax": "<objUnit> isSensorTargetConfirmed <objSide>"}, "isServer": {"version": "CMD", "tags": "", "description": "Returns true if the machine executing the command is the server in a multiplayer game or is running single player. It will return true for both dedicated and player-hosted server. See also Multiplayer Scripting/machines.", "example": "if (!isServer) exitWith {};", "docSyntax": "isServer", "syntax": "isServer"}, "isShowing3DIcons": {"version": "CMD", "tags": "", "description": "Returns true if the editor is set to draw 3D icons.", "example": "-", "docSyntax": "isShowing3DIcons map", "syntax": "isShowing3DIcons <objMap>"}, "isSimpleObject": {"version": "CMD", "tags": "", "description": "Returns true if given object is simple object", "example": "_isSimple = isSimpleObject _obj1;", "docSyntax": "isSimpleObject object", "syntax": "isSimpleObject <object>"}, "isSprintAllowed": {"version": "CMD", "tags": "", "description": "Returns true if player is allowed to sprint", "example": "if (not isSprintAllowed player) then { hint \"no running in the corridors!\" };", "docSyntax": "isSprintAllowed unit", "syntax": "isSprintAllowed <objUnit>"}, "isStaminaEnabled": {"version": "CMD", "tags": "", "description": "Check if stamina depletion is enabled.", "example": "if (isStaminaEnabled player) then { hint \"You can get exhausted.\" };", "docSyntax": "isStaminaEnabled unit", "syntax": "isStaminaEnabled <objUnit>"}, "isSteamMission": {"version": "CMD", "tags": "", "description": "Returns true if the current mission is a Steam Workshop mission.", "example": "if (isSteamMission) then { hint \"Thank you for subscribing to my mission on Steam!\"; } else { hint \"Thank you for downloading my mission off the Internet!\"; };", "docSyntax": "isSteamMission", "syntax": "isSteamMission"}, "isSteamOverlayEnabled": {"version": "CMD", "tags": "", "description": "Returns true if Steam overlay is enabled, otherwise false.", "example": "_overlayEnabled = isSteamOverlayEnabled;", "docSyntax": "isSteamOverlayEnabled", "syntax": "isSteamOverlayEnabled"}, "isStreamFriendlyUIEnabled": {"version": "CMD", "tags": "", "description": "Returns the status of STREAM FRIENDLY UI setting in UI (OPTIONS >> GAME >> GENERAL >> STREAM FRIENDLY UI).", "example": "hint str isStreamFriendlyUIEnabled;", "docSyntax": "isStreamFriendlyUIEnabled", "syntax": "isStreamFriendlyUIEnabled"}, "isStressDamageEnabled": {"version": "CMD", "tags": "", "description": "Returns true if stress damage is enabled in the game settings. A getter for enableStressDamage.", "example": "_settingEnabled = isStressDamageEnabled;", "docSyntax": "isStressDamageEnabled", "syntax": "isStressDamageEnabled"}, "isText": {"version": "CMD", "tags": "", "description": "Checks if config entry represents a text value.", "example": "_isText = isText (configFile >> \"CfgVehicles\") //\u00a0false", "docSyntax": "isText config", "syntax": "isText config"}, "isThrowable": {"version": "CMD", "tags": "", "description": "Returns true if the given magazine is a throwable.", "example": "isThrowable \"HandGrenade\"; //\u00a0true", "docSyntax": "isThrowable magazine", "syntax": "isThrowable <string>"}, "isTouchingGround": {"version": "CMD", "tags": "", "description": "Returns true if object is touching the ground.", "example": "if (isTouchingGround player) then { hint \"Terraferma!\" };", "docSyntax": "isTouchingGround object", "syntax": "isTouchingGround <object>"}, "isTurnedOut": {"version": "CMD", "tags": "", "description": "Returns true if given unit is turned out, otherwise false. The output changes to true after unit finished turning out, however will change to false almost immediately after unit is ordered to turn in.", "example": "_commanderOut = isTurnedOut (tank turretUnit [0,0]);", "docSyntax": "isTurnedOut unit", "syntax": "isTurnedOut <objUnit>"}, "isTutHintsEnabled": {"version": "CMD", "tags": "", "description": "Returns the status of TUTORIAL HINTS setting in UI (OPTIONS >> GAME >> GENERAL >> TUTORIAL HINTS).", "example": "hint str isTutHintsEnabled;", "docSyntax": "isTutHintsEnabled", "syntax": "isTutHintsEnabled"}, "isUAVConnectable": {"version": "CMD", "tags": "", "description": "Returns true if UAV is connectable by AV terminal(s).", "example": "private _canConnect = myUnit isUAVConnectable [myUav, true];", "docSyntax": "object isUAVConnectable [uav, checkAllItems]", "syntax": "<object> isUAVConnectable [uav,checkAllItems]"}, "isUAVConnected": {"version": "CMD", "tags": "", "description": "Returns true if UAV is connected to some terminal.", "example": "_isConnected = isUAVConnected cursorTarget;", "docSyntax": "isUAVConnected uav", "syntax": "isUAVConnected uav"}, "isUIContext": {"version": "CMD", "tags": "", "description": "Returns true if the script originated from some UI control event, for example from \"onButtonDown\" EH. Exists within parent scope and immediate child scopes.", "example": "if (isUIContext) then { hint \"UI control event\" };", "docSyntax": "isUIContext", "syntax": "isUIContext"}, "isUniformAllowed": {"version": "CMD", "tags": "", "description": "Check whether given uniform can be dressed by target soldier.", "example": "_canUse = _unit isUniformAllowed \"U_B_CombatUniform_mcam\";", "docSyntax": "unit isUniformAllowed type", "syntax": "<objUnit> isUniformAllowed type"}, "isUsingAISteeringComponent": {"version": "CMD", "tags": "", "description": "Returns whether the AI steering component setting is enabled globally.", "example": "if (isUsingAISteeringComponent) then { useAISteeringComponent false; };", "docSyntax": "isUsingAISteeringComponent", "syntax": "isUsingAISteeringComponent"}, "isVehicleCargo": {"version": "CMD", "tags": "", "description": "Despite a misleading name, returns the vehicle that is transporting given vehicle in cargo. If the given vehicle is not in vehicle cargo, objNull is returned.", "example": "Blackfish with given variable name blackfish, with a vehicle inside called quad", "docSyntax": "isVehicleCargo cargo", "syntax": "isVehicleCargo <objVehicle>"}, "isVehicleRadarOn": {"version": "CMD", "tags": "", "description": "Returns true if vehicle has active sensors on.", "example": "isVehicleRadarOn vehicle player; //\u00a0returns true if radar is turned on", "docSyntax": "isVehicleRadarOn vehicle", "syntax": "isVehicleRadarOn <objVehicle>"}, "isVehicleSensorEnabled": {"version": "CMD", "tags": "", "description": "Returns class name (to identify list based on component name) and info if given sensor is enabled.", "example": "vehicle player isVehicleSensorEnabled \"PassiveRadarSensorComponent\"; //\u00a0\"PassiveRadarSensorComponent\", true", "docSyntax": "vehicle isVehicleSensorEnabled componentName", "syntax": "<objVehicle> isVehicleSensorEnabled componentName"}, "isWalking": {"version": "CMD", "tags": "", "description": "Returns true if walk is toggled (default W+S in Arma 3).", "example": "_bool = isWalking player;", "docSyntax": "isWalking unitName", "syntax": "isWalking <objUnit>"}, "isWeaponDeployed": {"version": "CMD", "tags": "", "description": "Returns true if weapon is currently deployed.", "example": "_dep = isWeaponDeployed player;", "docSyntax": "isWeaponDeployed unit", "syntax": "isWeaponDeployed <objUnit>"}, "isWeaponRested": {"version": "CMD", "tags": "", "description": "Returns true if weapon is currently rested.", "example": "_rest = isWeaponRested player;", "docSyntax": "isWeaponRested unit", "syntax": "isWeaponRested <objUnit>"}, "itemCargo": {"version": "CMD", "tags": "", "description": "Get array with items from ammo box (or any general weapon holder container).", "example": "hint str itemCargo vestContainer player;", "docSyntax": "itemCargo object", "syntax": "itemCargo <object>"}, "items": {"version": "CMD", "tags": "", "description": "Returns an array of names of all unit's stored items, including weapons but excluding magazines (see itemsWithMagazines) and assignedItems.", "example": "_itemsPlayer = items player;", "docSyntax": "items unit", "syntax": "items <objUnit>"}, "itemsWithMagazines": {"version": "CMD", "tags": "", "description": "Returns combined array including all unit's stored items and all unit's stored magazines and all unit's stored weapons. Loaded magazines such as currentMagazine, primaryWeaponMagazine, secondaryWeaponMagazine, handgunMagazine, binocularMagazine as well as assignedItems are excluded.", "example": "private _res1 = itemsWithMagazines player; //\u00a0... is essentially the same as ... private _res2 = items player + magazines player;", "docSyntax": "itemsWithMagazines unit", "syntax": "itemsWithMagazines <objUnit>"}, "join": {"version": "CMD", "tags": "", "description": "Maximum number of", "example": "[_unitOne, _unitTwo] join player;", "docSyntax": "unitArray join group", "syntax": "unitArray join <objGroup>"}, "joinAs": {"version": "CMD", "tags": "", "description": "Joins the unit to the given group, if position id is available, this one is used.", "example": "player joinAs [_group, 4];", "docSyntax": "unit joinAs [group, id]", "syntax": "<objUnit> joinAs [<objGroup>,<scalar>]"}, "joinAsSilent": {"version": "CMD", "tags": "", "description": "Joins the unit to the given group, if position id is available, this one is used. Avoid any radio communication related to joining.", "example": "player joinAsSilent [_group, 4];", "docSyntax": "unit joinAsSilent [group, id]", "syntax": "<objUnit> joinAsSilent [<objGroup>,<scalar>]"}, "joinSilent": {"version": "CMD", "tags": "", "description": "Join all units in the array to given group silently (without radio message). To have a group member leave a group, join him with the grpNull group (e.g. [guy1] joinSilent grpNull), but beware, as brand new group is created for the leaving unit and this could result in the number of groups in a mission growing out of control.", "example": "[_unitOne, _unitTwo] joinSilent (group player);", "docSyntax": "unitArray joinSilent group", "syntax": "unitArray joinSilent <objGroup>"}, "joinString": {"version": "CMD", "tags": "", "description": "Joins array into String with provided separator. Array can be of mixed types, all elements will be converted to String prior to joining, but the fastest operation is on the array of Strings.", "example": "_str = \"- This, is a sample string.\" splitString \"-,. \"; //\u00a0[\"This\",\"is\",\"a\",\"sample\",\"string\"] _str joinString \" \"; //\u00a0\"This is a sample string\"", "docSyntax": "array joinString separator", "syntax": "<array> joinString separator"}, "kbAddDatabase": {"version": "CMD", "tags": "", "description": "Register knowledge base database to given person. See Conversations for more details.", "example": "_hasBeenAdded = _unit kbAddDatabase \"chat.txt\";", "docSyntax": "person kbAddDatabase fileName", "syntax": "<objUnit> kbAddDatabase fileName"}, "kbAddDatabaseTargets": {"version": "CMD", "tags": "", "description": "Register target list knowledge base database to given person. See Conversations for more details.", "example": "_hasBeenAdded = _unit kbAddDatabaseTargets \"chat.txt\";", "docSyntax": "person kbAddDatabaseTargets fileName", "syntax": "<objUnit> kbAddDatabaseTargets fileName"}, "kbAddTopic": {"version": "CMD", "tags": "", "description": "Register conversation topic to given person. See Conversations for more details.", "example": "player kbAddTopic [\"myTest\", \"myTest.bikb\", \"myTest.fsm\", compile preprocessFileLineNumbers \"myTest.sqf\"];", "docSyntax": "person kbAddTopic [topicName, conversationFile, fsmFile, eventHandler]", "syntax": "<objUnit> kbAddTopic [topicName,conversationFile,fsmFile,eventHandler]"}, "kbHasTopic": {"version": "CMD", "tags": "", "description": "Check if conversation topic was registered to given person. See Conversations for more details.", "example": "_obiHasTopic = player kbHasTopic \"helloThereGeneralK\";", "docSyntax": "person kbHasTopic topicName", "syntax": "<objUnit> kbHasTopic topicName"}, "kbReact": {"version": "CMD", "tags": "", "description": "Pass a non-verbal communication to the receiver. This command does as if the sentence was said and triggers the reaction scripts (AI FSM or player's conversation EH). See Conversations for more details.", "example": "//\u00a0will trigger AS IF unit1 said the sentence (via kbTell) //\u00a0unit2's FSM will react accordingly. unit1 kbReact [unit2, \"topicName\", \"speech1\"];", "docSyntax": "person kbReact [receiver, topicName, sentenceID, argumentArray1, argumentArray2, ...]", "syntax": "<objUnit> kbReact [receiver,topicName,sentenceID,argumentArray1,argumentArray2,...]"}, "kbRemoveTopic": {"version": "CMD", "tags": "", "description": "Unregister conversation topic from given person. See Conversations for more details.", "example": "_unit1 kbRemoveTopic \"howsTheWeather\";", "docSyntax": "person kbRemoveTopic topicName", "syntax": "<objUnit> kbRemoveTopic topicName"}, "kbTell": {"version": "CMD", "tags": "", "description": "Make the person tell to the receiver the sentence. See Conversations for more details.", "example": "player kbTell [BIS_HQ, \"myTopic\", \"playerSentence1\"];", "docSyntax": "person kbTell [receiver, topicName, sentenceClass, argumentArray1, argumentArray2, ..., forceRadio]", "syntax": "<objUnit> kbTell [receiver,topicName,sentenceClass,argumentArray1,argumentArray2,...,forceRadio]"}, "kbWasSaid": {"version": "CMD", "tags": "", "description": "Check if given item was said by person to someone. See Conversations for more details.", "example": "player kbWasSaid [otherUnit, \"myTopic\", \"mySentenceID\", 3];", "docSyntax": "person kbWasSaid [receiver, topic, sentenceID, maxAge]", "syntax": "<objUnit> kbWasSaid [receiver,topic,sentenceID,maxAge]"}, "keyImage": {"version": "CMD", "tags": "", "description": "Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code.", "example": "_image = keyImage 28; //\u00a0result is \"Enter\"", "docSyntax": "keyImage dikCode", "syntax": "keyImage dikCode"}, "keyName": {"version": "CMD", "tags": "", "description": "Returns the name of a button with extra quotation marks (on the keyboard, mouse or joystick) with the given code.", "example": "_name = keyName 28; //\u00a0result is \"\"\"Enter\"\"\"", "docSyntax": "keyName dikCode", "syntax": "keyName dikCode"}, "keys": {"version": "CMD", "tags": "", "description": "Retrieves a list of all keys in a HashMap.", "example": "keys _myHashMap;", "docSyntax": "keys hashMap", "syntax": "keys hashMap"}, "knowsAbout": {"version": "CMD", "tags": "", "description": "Checks if a group or a side knows about target.", "example": "_knowledge = player knowsAbout _target;", "docSyntax": "who knowsAbout target", "syntax": "who knowsAbout <object>"}, "land": {"version": "CMD", "tags": "", "description": "Forces a helicopter landing.", "example": "_cobraOne land \"LAND\";", "docSyntax": "helicopter land mode", "syntax": "helicopter land mode"}, "landAt": {"version": "CMD", "tags": "", "description": "Order an AI airplane to land at a given airport. ID is the number to identify which map airport you want the airplane to land at. See Arma: Airport IDs for more information.", "example": "_plane1 landAt 1;", "docSyntax": "plane landAt ID", "syntax": "plane landAt <scalar>"}, "landResult": {"version": "CMD", "tags": "", "description": "Return the result of helicopter landing position searching (performed, after land command).", "example": "_result = landResult BIS_heli;", "docSyntax": "landResult helicopter", "syntax": "landResult helicopter"}, "language": {"version": "CMD", "tags": "", "description": "Returns current game language.", "example": "_myLanguage = language; //\u00a0will return \"English\" if game language is set to English", "docSyntax": "language", "syntax": "language"}, "laserTarget": {"version": "CMD", "tags": "", "description": "Returns the laser target object created by given unit (vehicle or soldier) when using a laser targeting device. The main syntax targets the primary gunner turret.", "example": "private _target = laserTarget gunner heli;", "docSyntax": "laserTarget entity", "syntax": "laserTarget entity"}, "lbAdd": {"version": "CMD", "tags": "", "description": "Adds an item with the given text to the CT_LISTBOX or CT_COMBO or CT_TOOLBOX.", "example": "_index = lbAdd [101, \"First item\"];", "docSyntax": "lbAdd [idc, text]", "syntax": "lbAdd [<scalar>,<string>]"}, "lbClear": {"version": "CMD", "tags": "", "description": "Clear all items from a CT_LISTBOX or CT_COMBO control.", "example": "lbClear 101;", "docSyntax": "lbClear idc", "syntax": "lbClear <scalar>"}, "lbColor": {"version": "CMD", "tags": "", "description": "Returns the text color of the item with the given index of the CT_LISTBOX or CT_COMBO with IDC of the topmost user dialog.", "example": "_colour = lbColor [101, 0];", "docSyntax": "lbColor [idc, index]", "syntax": "lbColor [<scalar>,<scalar>]"}, "lbColorRight": {"version": "CMD", "tags": "", "description": "Returns the text color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_colour = lbColorRight [101, 0];", "docSyntax": "lbColorRight [idc, index]", "syntax": "lbColorRight [<scalar>,<scalar>]"}, "lbCurSel": {"version": "CMD", "tags": "", "description": "Returns the index of the selected item of the CT_LISTBOX, CT_LISTNBOX, CT_COMBO or CT_TOOLBOX. For CT_LISTBOX with multi selection enabled use lbSelection.", "example": "_index = lbCurSel 101;", "docSyntax": "lbCurSel idc", "syntax": "lbCurSel <scalar>"}, "lbData": {"version": "CMD", "tags": "", "description": "Returns the data set in given index of the CT_LISTBOX or CT_COMBO.", "example": "_data = lbData [101, 0];", "docSyntax": "lbData [idc, index]", "syntax": "lbData [<scalar>,<scalar>]"}, "lbDelete": {"version": "CMD", "tags": "", "description": "Removes the item with the given index from the CT_LISTBOX, CT_COMBO or CT_TOOLBOX.", "example": "lbDelete [101, 0];", "docSyntax": "lbDelete [idc, index]", "syntax": "lbDelete [<scalar>,<scalar>]"}, "lbIsSelected": {"version": "CMD", "tags": "", "description": "Checks whether or not given row of the given listbox is selected.", "example": "_selected = _control lbIsSelected 0;", "docSyntax": "control lbIsSelected index", "syntax": "<uiControl> lbIsSelected <scalar>"}, "lbPicture": {"version": "CMD", "tags": "", "description": "Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_picture = lbPicture [101, 0];", "docSyntax": "lbPicture [idc, index]", "syntax": "lbPicture [<scalar>,<scalar>]"}, "lbPictureRight": {"version": "CMD", "tags": "", "description": "Returns the right picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_picture = lbPictureRight [101, 0];", "docSyntax": "lbPictureRight [idc, index]", "syntax": "lbPictureRight [<scalar>,<scalar>]"}, "lbSelection": {"version": "CMD", "tags": "", "description": "Returns Array of selected rows indices in the given listbox. If listbox is of style LB_MULTI (multi-selection) the array will contain multiple elements, otherwise only a single element. For single selection listbox one can also use lbCurSel. See also lbIsSelected, lbSetSelected", "example": "_indices = lbSelection _control;", "docSyntax": "lbSelection control", "syntax": "lbSelection <uiControl>"}, "lbSetColor": {"version": "CMD", "tags": "", "description": "Sets the color of the item (left) with the given index of the listbox or combobox with id idc of the topmost user Dialog to color.", "example": "lbSetColor [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetColor [idc, index, color]", "syntax": "lbSetColor [<scalar>,<scalar>,<scalar>]"}, "lbSetColorRight": {"version": "CMD", "tags": "", "description": "Sets the color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog to color.", "example": "lbSetColorRight [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetColorRight [idc, index, color]", "syntax": "lbSetColorRight [<scalar>,<scalar>,<scalar>]"}, "lbSetCurSel": {"version": "CMD", "tags": "", "description": "Selects the item with the given index in the listbox, listnbox, combobox, xcombobox, xlistbox", "example": "lbSetCurSel [101, 0];", "docSyntax": "lbSetCurSel [idc, index]", "syntax": "lbSetCurSel [<scalar>,<scalar>]"}, "lbSetData": {"version": "CMD", "tags": "", "description": "Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given data.", "example": "lbSetData [101, 1, \"#1\"];", "docSyntax": "lbSetData [idc, index, data]", "syntax": "lbSetData [<scalar>,<scalar>,data]"}, "lbSetPicture": {"version": "CMD", "tags": "", "description": "Sets the left picture in the row with given index of CT_LISTBOX or CT_COMBO. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).", "example": "lbSetPicture [101, 0, \"iskoda.paa\"];", "docSyntax": "lbSetPicture [idc, index, path]", "syntax": "lbSetPicture [<scalar>,<scalar>,path]"}, "lbSetPictureColor": {"version": "CMD", "tags": "", "description": "Sets the color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color (RGBA). Color which consists from only zeros means disable this override.", "example": "lbSetPictureColor [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetPictureColor [idc, index, color]", "syntax": "lbSetPictureColor [<scalar>,<scalar>,<scalar>]"}, "lbSetPictureColorDisabled": {"version": "CMD", "tags": "", "description": "Sets the disabled color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color (RGBA). Color which consists from only zeros means disable this override.", "example": "lbSetPictureColorDisabled [101, 0, [1, 1, 1, 0.25]];", "docSyntax": "lbSetPictureColorDisabled [idc, index, color]", "syntax": "lbSetPictureColorDisabled [<scalar>,<scalar>,<scalar>]"}, "lbSetPictureColorSelected": {"version": "CMD", "tags": "", "description": "Sets the selected color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color (RGBA). Color which consists from only zeros means disable this override.", "example": "lbSetPictureColorSelected [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetPictureColorSelected [idc, index, color]", "syntax": "lbSetPictureColorSelected [<scalar>,<scalar>,<scalar>]"}, "lbSetPictureRight": {"version": "CMD", "tags": "", "description": "Sets the second (right aligned) picture in the item with the given index of the listbox or combobox with id idc of the topmost user dialog. Name is the picture name. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).", "example": "lbSetPictureRight [101, 0, \"a3\\3den\\data\\cfg3den\\history\\createcomment_ca.paa\"];", "docSyntax": "lbSetPictureRight [idc, index, path]", "syntax": "lbSetPictureRight [<scalar>,<scalar>,path]"}, "lbSetPictureRightColor": {"version": "CMD", "tags": "", "description": "Sets the color of the second (right aligned) picture of the given index of the listbox with id idc of the topmost user dialog to the given color. Color which consists from only zeros means disable this override.", "example": "lbSetPictureRightColor [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetPictureRightColor [idc, index, color]", "syntax": "lbSetPictureRightColor [<scalar>,<scalar>,<scalar>]"}, "lbSetPictureRightColorDisabled": {"version": "CMD", "tags": "", "description": "Sets the disabled color of second (right aligned) picture of the item with the given index of the listbox with id idc of the topmost user dialog to the given color. Color which consists from only zeros means disable this override.", "example": "lbSetPictureRightColorDisabled [101, 0, [1, 1, 1, 0.25]];", "docSyntax": "lbSetPictureRightColorDisabled [idc, index, color]", "syntax": "lbSetPictureRightColorDisabled [<scalar>,<scalar>,<scalar>]"}, "lbSetPictureRightColorSelected": {"version": "CMD", "tags": "", "description": "Sets the selected color of the second (right aligned) picture of the item with the given index of the listbox with id idc of the topmost user dialog to the given color. Color which consists from only zeros means disable this override.", "example": "lbSetPictureRightColorSelected [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetPictureRightColorSelected [idc, index, color]", "syntax": "lbSetPictureRightColorSelected [<scalar>,<scalar>,<scalar>]"}, "lbSetSelectColor": {"version": "CMD", "tags": "", "description": "Sets the select color of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to color.", "example": "lbSetSelectColor [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetSelectColor [idc, index, color]", "syntax": "lbSetSelectColor [<scalar>,<scalar>,<scalar>]"}, "lbSetSelectColorRight": {"version": "CMD", "tags": "", "description": "Sets the select color of the of the secondary text (right aligned) of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to color.", "example": "lbSetSelectColorRight [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetSelectColorRight [idc, index, color]", "syntax": "lbSetSelectColorRight [<scalar>,<scalar>,<scalar>]"}, "lbSetSelected": {"version": "CMD", "tags": "", "description": "Sets the selection state of the given row of the given listbox of style LB_MULTI. The command has to be called for every row which is needed to be selected in multi-selection listbox. Use negative index -1 to select/deselect all rows (since 2.12). For single selection listbox use lbSetCurSel instead.", "example": "_control lbSetSelected [0, true];", "docSyntax": "control lbSetSelected [index, selected, forceEH]", "syntax": "<uiControl> lbSetSelected [<scalar>,selected,forceEH]"}, "lbSetText": {"version": "CMD", "tags": "", "description": "Sets the text on the left side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "lbSetText [101, 0, \"iskoda\"];", "docSyntax": "lbSetText [idc, index, name]", "syntax": "lbSetText [<scalar>,<scalar>,<string>]"}, "lbSetTextRight": {"version": "CMD", "tags": "", "description": "Sets the text on the right side of the item with the given row index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_control lbSetTextRight [0, \"iskoda\"];", "docSyntax": "control lbSetTextRight [row, name]", "syntax": "<uiControl> lbSetTextRight [<scalar>,<string>]"}, "lbSetTooltip": {"version": "CMD", "tags": "", "description": "Sets tooltip for item with given index of the listbox or combobox with id idc of the topmost user dialog to the given data.", "example": "lbSetTooltip [101, 1, \"tooltip\"];", "docSyntax": "lbSetTooltip [idc, index, tooltip]", "syntax": "lbSetTooltip [<scalar>,<scalar>,tooltip]"}, "lbSetValue": {"version": "CMD", "tags": "", "description": "Sets the additional value in the row with the given index of a CT_LISTBOX or CT_COMBO control.", "example": "lbSetValue [101, 0, 1];", "docSyntax": "lbSetValue [idc, index, value]", "syntax": "lbSetValue [<scalar>,<scalar>,<scalar>]"}, "lbSize": {"version": "CMD", "tags": "", "description": "Returns the number of items in a CT_LISTBOX or CT_COMBO control. For CT_TOOLBOX size see lnbSize.", "example": "_size = lbSize 101;", "docSyntax": "lbSize idc", "syntax": "lbSize <scalar>"}, "lbSort": {"version": "CMD", "tags": "", "description": "Sorts listbox entries alphabetically ascending by their lbText.", "example": "lbSort _myControl;", "docSyntax": "lbSort control", "syntax": "lbSort <uiControl>"}, "lbSortBy": {"version": "CMD", "tags": "", "description": "Sorts given ListBox by either lbText, lbValue or lbData in normal or reversed order, using case-sensitive or case-insensitive comparison. This command supports UNICODE characters. When sorting by \"VALUE\", the rows with the same lbValue will additionally be sorted by lbText in the order specified by `reversedOrder` flag, text specified by `useTextRight` flag and case-sensitivity specified by `caseSensitive` flag.", "example": "with uiNamespace do { private _lb = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscListBox\", -1]; _lb ctrlSetPosition [0,0,1,1]; _lb ctrlCommit 0; lbClear _lb; { _lb lbAdd (_x select 0); _lb lbSetValue [_forEachIndex, _x select 1]; } forEach [[\"\u0412\",1], [\"\u042f\",0], [\"\u0411\",1], [\"\u042e\",0], [\"\u0410\",1]]; _lb lbSortBy [\"VALUE\", false, false]; };", "docSyntax": "controlOrIDC lbSortBy [sortByType, reversedOrder, caseSensitive, useTextRight, unicodeOff]", "syntax": "controlOrIDC lbSortBy [sortByType,reversedOrder,caseSensitive,useTextRight,unicodeOff]"}, "lbSortByValue": {"version": "CMD", "tags": "", "description": "Sorts the ListBox entries by lbValue. The entries are sorted in ascending order. Also note that this command will mix up the entries randomly if multiple entries have the same value. In Arma 3 use lbSortBy to avoid this problem.", "example": "lbSortByValue _control;", "docSyntax": "lbSortByValue control", "syntax": "lbSortByValue <uiControl>"}, "lbText": {"version": "CMD", "tags": "", "description": "Returns the shown text of the item with the given index of the CT_LISTBOX or CT_COMBO.", "example": "_text = lbText [101, 0];", "docSyntax": "lbText [idc, index]", "syntax": "lbText [<scalar>,<scalar>]"}, "lbTextRight": {"version": "CMD", "tags": "", "description": "Returns the shown right text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_text = lbTextRight [101, 0];", "docSyntax": "lbTextRight [idc, index]", "syntax": "lbTextRight [<scalar>,<scalar>]"}, "lbTooltip": {"version": "CMD", "tags": "", "description": "Returns tooltip for ListBox, ComboBox and Toolbox", "example": "lbTooltip [1, 1];", "docSyntax": "lbTooltip [idc, index]", "syntax": "lbTooltip [<scalar>,<scalar>]"}, "lbValue": {"version": "CMD", "tags": "", "description": "Returns the additional integer value of the item with the given index of the CT_LISTBOX or CT_COMBO.", "example": "_value = lbValue [101, 0];", "docSyntax": "lbValue [idc, index]", "syntax": "lbValue [<scalar>,<scalar>]"}, "leader": {"version": "CMD", "tags": "", "description": "Returns the group leader for the given unit or group. For dead units, objNull is returned.", "example": "leader group player == leader player;", "docSyntax": "leader unitOrGroup", "syntax": "leader unitOrGroup"}, "leaderboardDeInit": {"version": "CMD", "tags": "", "description": "Deletes internal class for the leaderboard with given name. Returns true if the board has been found and deinitialized.", "example": "leaderboardDeInit \"TT01\";", "docSyntax": "leaderboardDeInit boardName", "syntax": "leaderboardDeInit <string>"}, "leaderboardGetRows": {"version": "CMD", "tags": "", "description": "Returns values for the given leaderboard; this can be called after the one of the row request function has been called and successfully finished!", "example": "leaderboardGetRows \"TT01\";", "docSyntax": "leaderboardGetRows boardName", "syntax": "leaderboardGetRows <string>"}, "leaderboardInit": {"version": "CMD", "tags": "", "description": "Initialize the leaderboard structure for board with given name. Returns true if board is already initialized.", "example": "leaderboardInit \"TT01\";", "docSyntax": "leaderboardInit boardName", "syntax": "leaderboardInit <string>"}, "leaderboardRequestRowsFriends": {"version": "CMD", "tags": "", "description": "Requests given leaderboard to download friends rows from the given leaderboard", "example": "leaderboardRequestRowsFriends \"TT01\";", "docSyntax": "leaderboardRequestRowsFriends boardName", "syntax": "leaderboardRequestRowsFriends <string>"}, "leaderboardRequestRowsGlobal": {"version": "CMD", "tags": "", "description": "Requests given leaderboard to download values from global table.", "example": "_isGettingValues = leaderboardRequestRowsGlobal [\"TT01\", 0, 10];", "docSyntax": "leaderboardRequestRowsGlobal [leaderboard, offset, rows]", "syntax": "leaderboardRequestRowsGlobal [leaderboard,offset,rows]"}, "leaderboardRequestRowsGlobalAroundUser": {"version": "CMD", "tags": "", "description": "Requests given leaderboard to download values around the user position in the table.", "example": "_isGettingValues = leaderboardRequestRowsGlobalAroundUser [\"TT01\", -5, 10];", "docSyntax": "leaderboardRequestRowsGlobalAroundUser [leaderboard, offset, rows]", "syntax": "leaderboardRequestRowsGlobalAroundUser [leaderboard,offset,rows]"}, "leaderboardsRequestUploadScore": {"version": "CMD", "tags": "", "description": "Starts async. operation to upload score to board with given name, value always overwrite the current value in the board. The board has to be initialized before the call.", "example": "leaderboardsRequestUploadScore [\"TT01\", 1234, [5,6,7,8]];", "docSyntax": "leaderboardsRequestUploadScore [boardName, score, details]", "syntax": "leaderboardsRequestUploadScore [<string>,score,details]"}, "leaderboardsRequestUploadScoreKeepBest": {"version": "CMD", "tags": "", "description": "Starts async. operation to upload score to board with given name, value is only stored to board if it is better than one already in the board. The board has to be initialised before the call.", "example": "leaderboardsRequestUploadScoreKeepBest [\"TT01\", 1234, [5,6,7,8]];", "docSyntax": "leaderboardsRequestUploadScoreKeepBest [boardName, score, details]", "syntax": "leaderboardsRequestUploadScoreKeepBest [<string>,score,details]"}, "leaderboardState": {"version": "CMD", "tags": "", "description": "Returns the state of the board with the given name.", "example": "leaderboardState \"TT01\";", "docSyntax": "leaderboardState boardname", "syntax": "leaderboardState <string>"}, "leaveVehicle": {"version": "CMD", "tags": "", "description": "Ceases the using of the vehicle by a group and unassigns vehicle from the group. If the argument is a single unit, the vehicle will be unassigned from unit's group. After vehicle is unassigned from the group, each individual crew member then unassigned from the vehicle.", "example": "_unit leaveVehicle _vehicle;", "docSyntax": "group leaveVehicle vehicle", "syntax": "<objGroup> leaveVehicle <objVehicle>"}, "libraryCredits": {"version": "CMD", "tags": "", "description": "Returns the credits for the libraries used by the game.", "example": "hint str libraryCredits; //\u00a0as of Arma 2 OA 1.62.95208 /* [ [ \"Botan\", \"1999-2012 Jack Lloyd, 2001 Peter J Jones, 2004-2007 Justin Karneges, 2004 Vaclav Ovsik, 2005 Matthew Gregan, 2005-2006 Matt Johnston, 2006 Luca Piccarreta, 2007 Yves Jerschow, 2007-2008 FlexSecure GmbH, 2007-2008 Technische Universitat Darmstadt, 2007-2008 Falko Strenzke, 2007-2008 Martin Doering, 2007 Manuel Hartl, 2007 Christoph Ludwig, 2007 Patrick Sona, 2010 Olivier de Gaalon\" ], [ \"rapidjson\", \"2011 Milo Yip\" ], [ \"libcurl\", \"Copyright (c) 1996 - 2012, Daniel Stenberg\" ], [ \"GameSpy\", \"2009 GameSpy Industries, Inc.\" ], [ \"Theora\", \"2002-2009 by the Xiph.Org Foundation http://www.xiph.org/\" ], [ \"OggVorbis\", \"1994-2002 by the Xiph.Org Foundation http://www.xiph.org/\" ], [ \"Intel JPEG Library\", \"1998 Intel Corporation\" ], [ \"Matrix Template Library\", \"2001-2005 The Trustees of Indiana University\" ], [ \"Matrix Template Library\", \"1998-2001 University of Notre Dame\" ], [ \"Speex\", \"2002-2006 Jean-Marc Valin\" ], [ \"LZO Professional\", \"1996-2011 Markus Franz Xaver Johannes Oberhumer\" ], [ \"NVIDIA FXAA by TIMOTHY LOTTES\", \"2010, 2011 NVIDIA CORPORATION\" ], [ \"Jimenez's MLAA\", \"2012 2011 by Jorge Jimenez, Belen Masia, Jose I. Echevarria, Fernando Navarro and Diego Gutierrez\" ] ] */", "docSyntax": "libraryCredits", "syntax": "libraryCredits"}, "libraryDisclaimers": {"version": "CMD", "tags": "", "description": "Returns the library disclaimers.", "example": "hint str libraryDisclaimers; /* returns, in Arma 2:OA 1.62.95208: [\"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"] */", "docSyntax": "libraryDisclaimers", "syntax": "libraryDisclaimers"}, "lifeState": {"version": "CMD", "tags": "", "description": "Returns the life state of the given unit.", "example": "private _lifeState = lifeState player;", "docSyntax": "lifeState unit", "syntax": "lifeState <objUnit>"}, "lightAttachObject": {"version": "CMD", "tags": "", "description": "Attach light to given object at given position on object.", "example": "myLight lightAttachObject [myVehicle, [-0.5,-0.25,1]];", "docSyntax": "light lightAttachObject [object, position]", "syntax": "light lightAttachObject [<object>,position]"}, "lightDetachObject": {"version": "CMD", "tags": "", "description": "Detach light from object.", "example": "lightDetachObject _light;", "docSyntax": "lightDetachObject light", "syntax": "lightDetachObject light"}, "lightIsOn": {"version": "CMD", "tags": "", "description": "Check if lampost is on (shining).", "example": "if (lightIsOn nearestObject [player, \"StreetLamp\"] == \"ON\") then { hint \"nightime\"; };", "docSyntax": "lightIsOn lamppost", "syntax": "lightIsOn lamppost"}, "lightnings": {"version": "CMD", "tags": "", "description": "Return the current lightnings value.", "example": "Get the current lightnings value:", "docSyntax": "lightnings", "syntax": "lightnings"}, "limitSpeed": {"version": "CMD", "tags": "", "description": "Limit the speed of an AI-driven vehicle or AI person to given value. It has continuous effect and AI will not break through the speed limitation until one is contacted, engaged or regrouped.", "example": "leader player limitSpeed 5; //\u00a0set to walking speed sleep 30; leader player limitSpeed -1; //\u00a0remove the limit", "docSyntax": "objectName limitSpeed speed", "syntax": "objectName limitSpeed <scalar>"}, "linearConversion": {"version": "CMD", "tags": "", "description": "Converts given value from given \"from\" range to wanted \"to\" range. If clipping is set to true, the resulting value is guaranteed to be within \"to\" range no matter what.", "example": "//\u00a0Say given range is 0 to 1 and wanted range is 0 to 100 (percent calculation). Given value 0.55 then will be 55 linearConversion [0, 1, 0.55, 0, 100]; //\u00a0but if given value is 1.1 it will return 110 linearConversion [0, 1, 1.1, 0, 100, false]; //\u00a0or if clipping is true it will return 100 linearConversion [0, 1, 1.1, 0, 100, true];", "docSyntax": "linearConversion [minFrom, maxFrom, value, minTo, maxTo, clip]", "syntax": "linearConversion [minFrom,maxFrom,<scalar>,minTo,maxTo,clip]"}, "lineBreak": {"version": "CMD", "tags": "", "description": "Creates a structured text containing a line break.", "example": "hint composeText [\"First line\", lineBreak, \"Second line\"];", "docSyntax": "lineBreak", "syntax": "lineBreak"}, "lineIntersects": {"version": "CMD", "tags": "", "description": "Checks for object intersection with a virtual line between two positions.", "example": "private _hasStraightLineToChopper = lineIntersects [eyePos player, aimPos chopper, player, chopper];", "docSyntax": "lineIntersects [begPos, endPos, objIgnore1, objIgnore2]", "syntax": "lineIntersects [begPos,endPos,objIgnore1,objIgnore2]"}, "lineIntersectsObjs": {"version": "CMD", "tags": "", "description": "Returns a list of objects intersected by the line from begPos to endPos.", "example": "Sto = []; Fn = { { Sto set [_foreachindex,lineIntersectsObjs [(eyePos player),(ATLToASL screenToWorld [0.5,0.5]),objNull,objNull,false,_x]]; } forEach [1,2,4,8,16,32]; hintSilent format [\" ONLY_WATER: %1, NEAREST_CONTACT: %2, ONLY_STATIC: %3, ONLY_DYNAMIC: %4, FIRST_CONTACT: %5, ALL_OBJECTS: %6\", Sto select 0,Sto select 1,Sto select 2,Sto select 3,Sto select 4,Sto select 5]; }; [\"sample_id\",\"onEachFrame\",\"Fn\"] call BIS_fnc_addStackedEventHandler; //Example display objects' array in the middle of the screen sorted by 6 flags", "docSyntax": "lineIntersectsObjs [begPos, endPos, ignoreObj1, ignoreObj2, sortByDistance, flags]", "syntax": "lineIntersectsObjs [begPos,endPos,ignoreObj1,ignoreObj2,sortByDistance,flags]"}, "lineIntersectsSurfaces": {"version": "CMD", "tags": "", "description": "Returns a list of intersections with surfaces and ground from begPosASL to endPosASL. Doesn't return intersection with sea surface. Works underwater, unlike lineIntersects. Hardcoded max distance: 5000m.", "example": "_intersections = lineIntersectsSurfaces [eyePos player, aimPos chopper, player, chopper, true, -1];", "docSyntax": "lineIntersectsSurfaces [begPosASL, endPosASL, ignoreObj1, ignoreObj2, sortMode, maxResults, LOD1, LOD2, returnUnique]", "syntax": "lineIntersectsSurfaces [begPosASL,endPosASL,ignoreObj1,ignoreObj2,sortMode,maxResults,LOD1,LOD2,returnUnique]"}, "lineIntersectsWith": {"version": "CMD", "tags": "", "description": "Returns objects intersecting with the virtual line from begPos to endPos. By default, the resulting array of intersecting objects is unsorted (see sortByDistance).", "example": "_objects = lineIntersectsWith [eyePos player, AGLToASL screenToWorld [0.5, 0.5]];", "docSyntax": "lineIntersectsWith [begPos, endPos, objIgnore1, objIgnore2, sortByDistance]", "syntax": "lineIntersectsWith [begPos,endPos,objIgnore1,objIgnore2,sortByDistance]"}, "linkItem": {"version": "CMD", "tags": "", "description": "Create and assign item to the correct slot. If there is an item in the targeted slot, it gets replaced. See also assignItem.", "example": "bluforUnit linkItem \"NVGoggles\"; opforUnit linkItem \"NVGoggles_OPFOR\"; independentUnit linkItem \"NVGoggles_INDEP\";", "docSyntax": "unit linkItem item", "syntax": "<objUnit> linkItem <objItem>"}, "list": {"version": "CMD", "tags": "", "description": "List of units that would activate given Trigger. It returns nothing before the simulation started, i.e. in (undelayed) init.sqf files. Returns a pointer to the trigger's list after the simulation started.", "example": "_triggerList = list _triggerOne;", "docSyntax": "list trigger", "syntax": "list <objTrigger>"}, "listObjects": {"version": "CMD", "tags": "", "description": "Return the list of all objects of given type.", "example": "-", "docSyntax": "map listObjects type", "syntax": "<objMap> listObjects type"}, "listRemoteTargets": {"version": "CMD", "tags": "", "description": "Return list of datalink targets and time for which they will be/were known.", "example": "listRemoteTargets opfor;", "docSyntax": "listRemoteTargets side", "syntax": "listRemoteTargets <objSide>"}, "listVehicleSensors": {"version": "CMD", "tags": "", "description": "Returns an array of the sensors in the given vehicle's config (configFile >> \"CfgVehicles\" >> vehicle >> \"Components\" >> \"SensorsManagerComponent\" >> \"Components\").", "example": "private _sensors = listVehicleSensors _v44blackfish; hint str _sensors; /* e.g for a V44 Blackfish: [ [\"IRSensorComponent\", \"IRSensorComponent\"], [\"VisualSensorComponent\", \"VisualSensorComponent\"], [\"ActiveRadarSensorComponent\", \"ActiveRadarSensorComponent\"], [\"PassiveRadarSensorComponent\", \"PassiveRadarSensorComponent\"], [\"LaserSensorComponent\", \"LaserSensorComponent\"], [\"NVSensorComponent\", \"NVSensorComponent\"] ] */", "docSyntax": "listVehicleSensors vehicle", "syntax": "listVehicleSensors <objVehicle>"}, "ln": {"version": "CMD", "tags": "", "description": "Returns the natural logarithm of x.", "example": "_nlog = ln 10;", "docSyntax": "ln x", "syntax": "ln x"}, "lnbAddArray": {"version": "CMD", "tags": "", "description": "Adds list of rows of strings.", "example": "lnbAddArray [ 102, [ [ [\"#1\"], [1], [\"#1\"] ], [ [\"#2\"], [2], [\"#2\"] ] ] ];", "docSyntax": "lnbAddArray [idc, arrayOfTextAndValues]", "syntax": "lnbAddArray [<scalar>,arrayOfTextAndValues]"}, "lnbAddColumn": {"version": "CMD", "tags": "", "description": "Adds a column at given position.", "example": "_ctrl lnbAddColumn 0.8;", "docSyntax": "control lnbAddColumn position", "syntax": "<uiControl> lnbAddColumn position"}, "lnbAddRow": {"version": "CMD", "tags": "", "description": "Adds a row of strings.", "example": "lnbAddRow [1, [\"COL1\", \"COL2\"]];", "docSyntax": "lnbAddRow [idc, data]", "syntax": "lnbAddRow [<scalar>,data]"}, "lnbClear": {"version": "CMD", "tags": "", "description": "Clears all items in the given listbox or combobox.", "example": "lnbClear _ctrl;", "docSyntax": "lnbClear idc", "syntax": "lnbClear <scalar>"}, "lnbColor": {"version": "CMD", "tags": "", "description": "Returns the text color of the item with the given position of the 2D listbox. The color is returned in format Color (RGBA).", "example": "_ctrl lnbColor [0,0];", "docSyntax": "lnbColor [idc, [row, column]]", "syntax": "lnbColor [<scalar>,[<scalar>,<scalar>]]"}, "lnbColorRight": {"version": "CMD", "tags": "", "description": "Returns the right color of given row.", "example": "private _result = _control lnbColorRight [0, 0];", "docSyntax": "lnbColorRight [idc, [row, column]]", "syntax": "lnbColorRight [<scalar>,[<scalar>,<scalar>]]"}, "lnbCurSelRow": {"version": "CMD", "tags": "", "description": "Returns the index of the selected row id 2D listbox.", "example": "lnbCurSelRow _ctrl;", "docSyntax": "lnbCurSelRow idc", "syntax": "lnbCurSelRow <scalar>"}, "lnbData": {"version": "CMD", "tags": "", "description": "Returns the additional text (invisible) in an item with the given position of the 2D listbox.", "example": "_ctrl lnbData [lnbCurSelRow _ctrl,0]; //\u00a0\"#1\"", "docSyntax": "lnbData [idc, [row, column]]", "syntax": "lnbData [<scalar>,[<scalar>,<scalar>]]"}, "lnbDeleteColumn": {"version": "CMD", "tags": "", "description": "Removes column with given index from ListNBox control.", "example": "_ctrl lnbDeleteColumn 1;", "docSyntax": "lnbDeleteColumn [idc, index]", "syntax": "lnbDeleteColumn [<scalar>,<scalar>]"}, "lnbDeleteRow": {"version": "CMD", "tags": "", "description": "Removes row with the given index from the given listbox or combobox.", "example": "_ctrl lnbDeleteRow 1;", "docSyntax": "_ctrl lnbDeleteRow row", "syntax": "_ctrl lnbDeleteRow <scalar>"}, "lnbGetColumnsPosition": {"version": "CMD", "tags": "", "description": "Returns relative screen X of ListNBox control columns position [0.1,0.3,0.6...]. Use lnbSetColumnsPos to set positions.", "example": "lnbGetColumnsPosition _ctrl;", "docSyntax": "lnbGetColumnsPosition _ctrl", "syntax": "lnbGetColumnsPosition _ctrl"}, "lnbPicture": {"version": "CMD", "tags": "", "description": "Returns the picture name or path of the item with the given position of the 2D listbox.", "example": "lnbPicture [200, [1, 1]];", "docSyntax": "lnbPicture [idc, [row, column]]", "syntax": "lnbPicture [<scalar>,[<scalar>,<scalar>]]"}, "lnbPictureRight": {"version": "CMD", "tags": "", "description": "Returns the right picture of given row. The column parameter does not matter.", "example": "_path = _control lnbPictureRight [0, 0];", "docSyntax": "lnbPictureRight [idc, [row, column]]", "syntax": "lnbPictureRight [<scalar>,[<scalar>,<scalar>]]"}, "lnbSetColor": {"version": "CMD", "tags": "", "description": "Sets the color of the item with the given position of the 2D listbox. Color is in format Color (RGBA).", "example": "_ctrl lnbSetColor [[0,0], [1,0,0,1]];", "docSyntax": "lnbSetColor [idc, [row, column], color]", "syntax": "lnbSetColor [<scalar>,[<scalar>,<scalar>],<scalar>]"}, "lnbSetColorRight": {"version": "CMD", "tags": "", "description": "Sets the right color.", "example": "_control lnbSetColorRight [[0, 0], [1,1,1,0.5]];", "docSyntax": "lnbSetColorRight [idc, [row, column], color]", "syntax": "lnbSetColorRight [<scalar>,[<scalar>,<scalar>],<scalar>]"}, "lnbSetColumnsPos": {"version": "CMD", "tags": "", "description": "Sets relative screen X for ListNBox control columns positions. Setter for lnbGetColumnsPosition.", "example": "lnbSetColumnsPos [101, [0.1,0.5,0.7]];", "docSyntax": "lnbSetColumnsPos [idc, positions]", "syntax": "lnbSetColumnsPos [<scalar>,positions]"}, "lnbSetCurSelRow": {"version": "CMD", "tags": "", "description": "Selects the row with the given index of the 2D listbox.", "example": "disableSerialization; _ctrl = (findDisplay 300) displayCtrl 304; _ctrl lnbSetCurSelRow 1;", "docSyntax": "lnbSetCurSelRow [idc, index]", "syntax": "lnbSetCurSelRow [<scalar>,<scalar>]"}, "lnbSetData": {"version": "CMD", "tags": "", "description": "Sets the additional text (invisible) on the item with the given position of the 2D listbox.", "example": "lnbSetData [123, [0,0],\"#1\"];", "docSyntax": "lnbSetData [idc, [row, column], data]", "syntax": "lnbSetData [<scalar>,[<scalar>,<scalar>],data]"}, "lnbSetPicture": {"version": "CMD", "tags": "", "description": "Sets the picture in the item with the given position of the 2D listbox.The picture is searched in the mission, directory, the dtaExt subdirectory of the campaign directory, and the dtaExt directory and the data bank (or directory).", "example": "lnbSetPicture [1, [0, 0], \"Picture\"];", "docSyntax": "lnbSetPicture [idc, [row, column], picturePathOrName]", "syntax": "lnbSetPicture [<scalar>,[<scalar>,<scalar>],picturePathOrName]"}, "lnbSetPictureColor": {"version": "CMD", "tags": "", "description": "Sets the cell picture's colour.", "example": "lnbSetPictureColor [1492, [1,0], [0,0.75,0.3,0.5]];", "docSyntax": "lnbSetPictureColor [idc, [row, column], colour]", "syntax": "lnbSetPictureColor [<scalar>,[<scalar>,<scalar>],colour]"}, "lnbSetPictureColorRight": {"version": "CMD", "tags": "", "description": "Sets color of the right picture in a CT_LISTNBOX.", "example": "_control lnbSetPictureColorRight [[0, 0], [1,1,1,0.5]];", "docSyntax": "lnbSetPictureColorRight [idc, [row, column], color]", "syntax": "lnbSetPictureColorRight [<scalar>,[<scalar>,<scalar>],<scalar>]"}, "lnbSetPictureColorSelected": {"version": "CMD", "tags": "", "description": "Sets the cell picture's colour on cell selection.", "example": "lnbSetPictureColorSelected [1492, [1,0], [0,0.75,0.3,0.5]];", "docSyntax": "lnbSetPictureColorSelected [idc, [row, column], colour]", "syntax": "lnbSetPictureColorSelected [<scalar>,[<scalar>,<scalar>],colour]"}, "lnbSetPictureColorSelectedRight": {"version": "CMD", "tags": "", "description": "Sets the color of the right picture when it is selected.", "example": "_control lnbSetPictureColorSelectedRight [[0, 0], [1,1,1,0.5]];", "docSyntax": "lnbSetPictureColorSelectedRight [idc, [row, column], color]", "syntax": "lnbSetPictureColorSelectedRight [<scalar>,[<scalar>,<scalar>],<scalar>]"}, "lnbSetPictureRight": {"version": "CMD", "tags": "", "description": "Sets the cell's right-picture. The picture is set to the end of the row, the column parameter does not matter.", "example": "lnbSetPictureRight [1, [0, 0], \"Picture.paa\"];", "docSyntax": "lnbSetPictureRight [idc, [row, column], path]", "syntax": "lnbSetPictureRight [<scalar>,[<scalar>,<scalar>],path]"}, "lnbSetText": {"version": "CMD", "tags": "", "description": "Sets the text in the item with the given position of the 2D listbox.", "example": "lnbSetText [101, [0,1], \"#1\"];", "docSyntax": "lnbSetText [idc, [row, column], data]", "syntax": "lnbSetText [<scalar>,[<scalar>,<scalar>],data]"}, "lnbSetTextRight": {"version": "CMD", "tags": "", "description": "Sets cell's right-aligned text. Does not replace cell's text.", "example": "lnbSetTextRight [1492, [1,0], \"right text\"];", "docSyntax": "lnbSetTextRight [idc, [row, column], text]", "syntax": "lnbSetTextRight [<scalar>,[<scalar>,<scalar>],<string>]"}, "lnbSetTooltip": {"version": "CMD", "tags": "", "description": "Sets tooltip on the item with the given row and column of CT_LISTNBOX.", "example": "lnbSetTooltip [1234, [1,0], \"tip\"];", "docSyntax": "lnbSetTooltip [idc, [row, column], text]", "syntax": "lnbSetTooltip [<scalar>,[<scalar>,<scalar>],<string>]"}, "lnbSetValue": {"version": "CMD", "tags": "", "description": "Sets the additional integer value in the item with the position index of the 2D listbox.", "example": "_ctrl lnbSetValue [[0,0],1];", "docSyntax": "lnbSetValue [idc, [row, column], value]", "syntax": "lnbSetValue [<scalar>,[<scalar>,<scalar>],<scalar>]"}, "lnbSize": {"version": "CMD", "tags": "", "description": "Returns size of CT_LISTNBOX. This command supports CT_TOOLBOX control since Arma 3 v2.06. For CT_COMBO or CT_LISTBOX see lbSize.", "example": "lnbSize _control;", "docSyntax": "lnbSize controlOrIDC", "syntax": "lnbSize controlOrIDC"}, "lnbSort": {"version": "CMD", "tags": "", "description": "Sorts given multicolumn listbox by lnbText in given column in ascending or descending order.", "example": "lnbSort [1800, 1, false];", "docSyntax": "lnbSort [idc, column, reversed]", "syntax": "lnbSort [<scalar>,<scalar>,reversed]"}, "lnbSortBy": {"version": "CMD", "tags": "", "description": "Sorts given multi-column ListNBox in the given column by either lnbText, lnbValue or lnbData in normal or reversed order, using case-sensitive or case-insensitive comparison. Unlike the older lnbSortXXX commands, this command supports UNICODE characters out of the box.", "example": "with uiNamespace do { private _column = 1; private _lnb = findDisplay 46 createDisplay \"RscDisplayEmpty\" ctrlCreate [\"RscListNBox\", -1]; _lnb ctrlSetPosition [0,0,1,1]; _lnb ctrlCommit 0; lnbClear _lnb; { _lnb lnbAddRow [format [\"Row %1\", _forEachIndex], _x select 0]; _lnb lnbSetValue [[_forEachIndex, _column], _x select 1]; } forEach [[\"\u0412\",1], [\"\u042f\",0], [\"\u0411\",1], [\"\u042e\",0], [\"\u0410\",1]]; [_lnb, _column] lnbSortBy [\"VALUE\", true, false]; };", "docSyntax": "[controlOrIDC, column] lnbSortBy [sortByType, reversedOrder, caseSensitive, useTextRight, unicodeOff]", "syntax": "[controlOrIDC,<scalar>] lnbSortBy [sortByType,reversedOrder,caseSensitive,useTextRight,unicodeOff]"}, "lnbSortByValue": {"version": "CMD", "tags": "", "description": "Sorts given multicolumn listbox by lnbValue in given column in ascending or descending order.", "example": "lnbSortByValue [1800, 1, false];", "docSyntax": "lnbSortByValue [idc, column, reversed]", "syntax": "lnbSortByValue [<scalar>,<scalar>,reversed]"}, "lnbText": {"version": "CMD", "tags": "", "description": "Returns the shown text in the item with the given position of the given 2D listbox.", "example": "_text = _ctrl lnbText [0,0];", "docSyntax": "control lnbText [row, column]", "syntax": "<uiControl> lnbText [<scalar>,<scalar>]"}, "lnbTextRight": {"version": "CMD", "tags": "", "description": "Returns CT_LISTNBOX's right aligned cell text.", "example": "_text = _control lnbTextRight [0, 0];", "docSyntax": "lnbTextRight [idc, [row, column]]", "syntax": "lnbTextRight [<scalar>,[<scalar>,<scalar>]]"}, "lnbValue": {"version": "CMD", "tags": "", "description": "Returns the additional integer value in the item with the given position of the 2D listbox.", "example": "_ctrl lnbValue [0,0]; //\u00a01, default is 0 if value is String set by lnbSetValue", "docSyntax": "lnbValue [idc, [row, column]]", "syntax": "lnbValue [<scalar>,[<scalar>,<scalar>]]"}, "load": {"version": "CMD", "tags": "", "description": "Returns the percentage of fullness of a unit's cargo. Output is usually in range 0..1, but can be higher after using certain scripting commands (like addWeaponWithAttachmentsCargoGlobal) which ignore load values when adding items.", "example": "load player;", "docSyntax": "load unit", "syntax": "load <objUnit>"}, "load3DENScenario": {"version": "CMD", "tags": "", "description": "Load the provided scenario or an empty scenario in the provided world.", "example": "load3DENScenario \"MyMission.VR\";", "docSyntax": "load3DENScenario scenarioOrWorld", "syntax": "load3DENScenario scenarioOrWorld"}, "loadAbs": {"version": "CMD", "tags": "", "description": "Returns current sum of mass from items stored in all unit's containers, linked items and weapons.", "example": "Player weight:", "docSyntax": "loadAbs unit", "syntax": "loadAbs <objUnit>"}, "loadBackpack": {"version": "CMD", "tags": "", "description": "Returns current percentage of mass from items stored in a backpack relative to the maximum capacity of the backpack.", "example": "private _myVariable = loadBackpack myUnit;", "docSyntax": "loadBackpack unit", "syntax": "loadBackpack <objUnit>"}, "loadConfig": {"version": "CMD", "tags": "", "description": "Loads the given file as a Config, allowing easy processing of the config file contents using commands such as configClasses, configProperties, >>, etc. It can load .rvmat, .bisurf, .cpp, .bin, .sqm, and description.ext files (both binarized and unbinarized configs are supported).", "example": "private _cfg = loadConfig \"a3\\data_f\\default_super.rvmat\"; //\u00a0note: very slow! ~0.1200 ms on tested system getText (_cfg >> \"Stage2\" >> \"uvSource\");", "docSyntax": "loadConfig path", "syntax": "loadConfig path"}, "loadCuratorSelectionPreset": {"version": "CMD", "tags": "", "description": "Load the given selection preset to the current selection of the curator.", "example": "loadCuratorSelectionPreset 1;", "docSyntax": "loadCuratorSelectionPreset numkey", "syntax": "loadCuratorSelectionPreset numkey"}, "loadFile": {"version": "CMD", "tags": "", "description": "Returns the content of given files. If you plan to compile said string, be aware that the file should not contain comments or compile will throw an error. If there are comments, use preprocessFile/preprocessFileLineNumbers instead.", "example": "_contents = loadFile \"wantedString.txt\";", "docSyntax": "loadFile fileName", "syntax": "loadFile fileName"}, "loadGame": {"version": "CMD", "tags": "", "description": "Loads game from the last autosave made with saveGame. If no autosave exists, restarts the mission. When used in campaign it will also deduct 1 life, defined in:", "example": "loadGame;", "docSyntax": "loadGame", "syntax": "loadGame"}, "loadIdentity": {"version": "CMD", "tags": "", "description": "Loads person's identity from Objects.sav file in campaign directory (from entry name).", "example": "_ok = player loadIdentity \"playerIdentity\";", "docSyntax": "unit loadIdentity name", "syntax": "<objUnit> loadIdentity <string>"}, "loadMagazine": {"version": "CMD", "tags": "", "description": "Initiates the loading action on given weapon of the turret of a transport. So the new magazine is not available instantly, yet according to the reloadTime.", "example": "vehicle player loadMagazine [[0], \"m256\", \"20Rnd_120mmHE_M1A2\"];", "docSyntax": "transport loadMagazine [turretPath, weaponName, magazineName]", "syntax": "transport loadMagazine [turretPath,weaponName,magazineName]"}, "loadOverlay": {"version": "CMD", "tags": "", "description": "Creates the load overlay dialog for the specified type of overlay.", "example": "-", "docSyntax": "map loadOverlay config", "syntax": "<objMap> loadOverlay config"}, "loadStatus": {"version": "CMD", "tags": "", "description": "Loads object's properties from Objects.sav file in campaign directory (from entry name).", "example": "_ok = player loadStatus \"playerState\";", "docSyntax": "object loadStatus entryName", "syntax": "<object> loadStatus entryName"}, "loadUniform": {"version": "CMD", "tags": "", "description": "Returns current percentage of mass from items stored in a uniform relative to the maximum capacity of the uniform.", "example": "private _weight = loadUniform player;", "docSyntax": "loadUniform unit", "syntax": "loadUniform <objUnit>"}, "loadVest": {"version": "CMD", "tags": "", "description": "Returns current percentage of mass from items stored in a vest relative to the maximum capacity of the vest.", "example": "_weight = loadVest player;", "docSyntax": "loadVest unit", "syntax": "loadVest <objUnit>"}, "local": {"version": "CMD", "tags": "", "description": "Check if given unit is local on the computer in multiplayer games - see Multiplayer Scripting - Locality.", "example": "if (not local _unit) then { hint format [\"%1 is remote\", name _unit]; };", "docSyntax": "local object", "syntax": "local <object>"}, "localize": {"version": "CMD", "tags": "", "description": "Used to internationalise text messages. The provided translation key is looked up in Stringtable.xml (or Stringtable.csv).", "example": "hint localize \"STR_West\"; //\u00a0returns \"BLUFOR\" hint localize \"STR_WEST\"; //\u00a0returns \"BLUFOR\" hint localize \"STR_weSt\"; //\u00a0returns \"BLUFOR\" hint localize \"STR_NonExistentString\"; //\u00a0returns \"\" and logs \"String STR_NonExistentString not found\"", "docSyntax": "localize stringName", "syntax": "localize stringName"}, "localNamespace": {"version": "CMD", "tags": "", "description": "Returns local Namespace attached to the mission. Has the same lifetime as missionNamespace but variables cannot be broadcasted out of or into this namespace in multiplayer and will not be serialized when game is saved. UI variables can be safely stored in this namespace. Use allVariables command to save the variables elsewhere if required.", "example": "localNamespace setVariable [\"abc\", 123];", "docSyntax": "localNamespace", "syntax": "localNamespace"}, "locationPosition": {"version": "CMD", "tags": "", "description": "Returns the position of a location. If the location is attached to an object, that object's position is returned.", "example": "_locationPos = locationPosition myLocation;", "docSyntax": "locationPosition location", "syntax": "locationPosition location"}, "lock": {"version": "CMD", "tags": "", "description": "Lock vehicle (disable mounting / dismounting) for player. This command will remove user get in/get out actions but will not stop player getting into or out of vehicle via script commands (e.g moveInCargo).", "example": "_jeepOne lock true;", "docSyntax": "vehicleName lock locked", "syntax": "vehicleName lock <bool>"}, "lockCameraTo": {"version": "CMD", "tags": "", "description": "Lock/Unlock stabilized camera to target. Works only on turrets which have optic mode selected with direction stabilization enabled.", "example": "uav lockCameraTo [vehicle, [0,0]];", "docSyntax": "vehicle lockCameraTo [target, turretPath]", "syntax": "<objVehicle> lockCameraTo [<object>,turretPath]"}, "lockCargo": {"version": "CMD", "tags": "", "description": "Lock all cargo positions of a vehicle or lock by index. This command will remove user \"get in\" action (not get out) but will also stop player getting into vehicle via script commands (e.g moveInCargo) unlike lock command.", "example": "vehicleName lockCargo true;", "docSyntax": "vehicle lockCargo lock", "syntax": "<objVehicle> lockCargo lock"}, "lockDriver": {"version": "CMD", "tags": "", "description": "Lock the driver position of the vehicle. This command must be executed where vehicle is local. This command will remove user get in action (not get out) but will also stop player getting into vehicle via script commands unlike lock command", "example": "vehicleName lockDriver true;", "docSyntax": "vehicle lockDriver lock", "syntax": "<objVehicle> lockDriver lock"}, "locked": {"version": "CMD", "tags": "", "description": "Check if vehicle is locked. If it is locked, Persons cannot mount / dismount without order.", "example": "_locked = locked _jeepOne;", "docSyntax": "locked vehicle", "syntax": "<bool> <objVehicle>"}, "lockedCameraTo": {"version": "CMD", "tags": "", "description": "Return the turret lock target.", "example": "vehicle player lockedCameraTo [];", "docSyntax": "vehicle lockedCameraTo turretPath", "syntax": "<objVehicle> lockedCameraTo turretPath"}, "lockedCargo": {"version": "CMD", "tags": "", "description": "Check whether cargo position of the vehicle is locked.", "example": "_result = vehicleName lockedCargo 0;", "docSyntax": "vehicle lockedCargo cargoIndex", "syntax": "<objVehicle> lockedCargo cargoIndex"}, "lockedDriver": {"version": "CMD", "tags": "", "description": "Check whether driver position of the vehicle turret is locked.", "example": "_driverLocked = lockedDriver vehicle player;", "docSyntax": "lockedDriver vehicle", "syntax": "lockedDriver <objVehicle>"}, "lockedInventory": {"version": "CMD", "tags": "", "description": "Get a vehicle's inventory lock state. Can also be used on a unit's backback (see lockInventory).", "example": "private _isInventoryLocked = lockedInventory vehicle player;", "docSyntax": "lockedInventory vehicle", "syntax": "lockedInventory <objVehicle>"}, "lockedTurret": {"version": "CMD", "tags": "", "description": "Check whether gunner position of the vehicle turret is locked.", "example": "_locked = tank lockedTurret [0];", "docSyntax": "vehicle lockedTurret turretPath", "syntax": "<objVehicle> lockedTurret turretPath"}, "lockIdentity": {"version": "CMD", "tags": "", "description": "Locks the identity of a person. This will disable default identity.", "example": "_success = lockIdentity player;", "docSyntax": "lockIdentity unit", "syntax": "lockIdentity <objUnit>"}, "lockInventory": {"version": "CMD", "tags": "", "description": "Lock or unlock a vehicle's inventory access. This command can also lock backpack a unit is wearing to prevent access by a third party. If set to true (locked), the inventory cannot be accessed via hotkey or action menu.", "example": "vehicle player lockInventory true;", "docSyntax": "vehicle lockInventory lock", "syntax": "<objVehicle> lockInventory lock"}, "lockTurret": {"version": "CMD", "tags": "", "description": "Lock the gunner position of the vehicle turret. This command will remove user \"get in\" action (not \"get out\") but will also stop player getting into vehicle via script commands unlike lock command.", "example": "vehicleName lockTurret [[0,0], true];", "docSyntax": "vehicle lockTurret [turretPath, lock]", "syntax": "<objVehicle> lockTurret [turretPath,lock]"}, "lockWP": {"version": "CMD", "tags": "", "description": "Disable switching to next waypoint (current waypoint will never complete while lockwp is used). Sometimes used during cut-scenes.", "example": "_groupOne lockWP true;", "docSyntax": "groupName lockWP lock", "syntax": "groupName lockWP lock"}, "log": {"version": "CMD", "tags": "", "description": "Base-10 logarithm of x.", "example": "_log = log 10;", "docSyntax": "log x", "syntax": "log x"}, "logEntities": {"version": "CMD", "tags": "", "description": "Creates a log file containing the list of all game entities in scene.", "example": "logEntities;", "docSyntax": "logEntities", "syntax": "logEntities"}, "logNetwork": {"version": "CMD", "tags": "", "description": "Registers new log file recording a network traffic and returns handle of the log. The log file is saved inside the Arma 3 root folder.", "example": "_handle = logNetwork [\"myLog.txt\", [\"\"]];", "docSyntax": "logNetwork logFile", "syntax": "logNetwork logFile"}, "logNetworkTerminate": {"version": "CMD", "tags": "", "description": "Terminates a network log file started with logNetwork with the given handle", "example": "logNetworkTerminate _someHandle;", "docSyntax": "logNetworkTerminate handle", "syntax": "logNetworkTerminate handle"}, "lookAt": {"version": "CMD", "tags": "", "description": "Control what the unit(s) is/are looking at (target or Position). If target is used, it will get revealed fully.", "example": "_someSoldier lookAt _otherSoldier;", "docSyntax": "unit(s) lookAt position", "syntax": "<objUnit>(s) lookAt position"}, "lookAtPos": {"version": "CMD", "tags": "", "description": "Point the camera and center the map on the position.", "example": "findDisplay 12 lookAtPos [0,0,0];", "docSyntax": "map lookAtPos position", "syntax": "<objMap> lookAtPos position"}, "magazineCargo": {"version": "CMD", "tags": "", "description": "Get array with magazines from ammo box (or any general weapon holder container).", "example": "hint str magazineCargo uniformContainer cursorTarget;", "docSyntax": "magazineCargo object", "syntax": "magazineCargo <object>"}, "magazines": {"version": "CMD", "tags": "", "description": "Returns array of type names of all vehicle's magazines. When applied to a unit, the command behaves differently and will omit magazines already loaded into unit's weapons. Use currentMagazine to get this information for a currently loaded magazine.", "example": "_mags = magazines player;", "docSyntax": "magazines vehicle", "syntax": "magazines <objVehicle>"}, "magazinesAllTurrets": {"version": "CMD", "tags": "", "description": "Returns all magazines (including empty) from all vehicle turrets (including driver turret [-1]) and their ammo counts. Since Arma 3 v2.08.148327 it is possible to exclude person turrets from returned results.", "example": "_mags = magazinesAllTurrets vehicle player;", "docSyntax": "magazinesAllTurrets vehicle", "syntax": "magazinesAllTurrets <objVehicle>"}, "magazinesAmmo": {"version": "CMD", "tags": "", "description": "Returns all vehicle's magazines and their ammo count (also works on supply boxes). When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use magazinesAmmoFull to return all magazines.", "example": "_magazinesAmmo = magazinesAmmo player; /* [ [\"30Rnd_65x39_caseless_mag\",30], [\"30Rnd_65x39_caseless_mag\",30], [\"16Rnd_9x21_Mag\",16], [\"SmokeShellGreen\",1], [\"Chemlight_green\",1], [\"HandGrenade\",1] ] */", "docSyntax": "magazinesAmmo vehicle", "syntax": "magazinesAmmo <objVehicle>"}, "magazinesAmmoCargo": {"version": "CMD", "tags": "", "description": "Returns an array of subarrays with the type names and ammo left of all the vehicle's cargo or container magazines.", "example": "magazinesAmmoCargo vehicle player;", "docSyntax": "magazinesAmmoCargo vehicle", "syntax": "magazinesAmmoCargo <objVehicle>"}, "magazinesAmmoFull": {"version": "CMD", "tags": "", "description": "Returns array of arrays of all unit's or vehicle's magazines with extended information about them. The magazines returned are for primary gunner. If you need magazines for all turrets, see magazinesAllTurrets.", "example": "toFixed 0; magazinesAmmoFull player; /* [ [\"30Rnd_65x39_caseless_mag\",30,false,-1,\"Uniform\",10000003,0], [\"Chemlight_green\",1,true,0,\"ChemlightGreenMuzzle\",10000016,0], [\"30Rnd_65x39_caseless_mag\",30,false,-1,\"Vest\",10000008,0], [\"30Rnd_65x39_caseless_mag\",30,false,-1,\"Vest\",10000009,0], [\"30Rnd_65x39_caseless_mag\",30,false,-1,\"Vest\",10000010,0], [\"HandGrenade\",1,true,0,\"HandGrenadeMuzzle\",10000018,0], [\"HandGrenade\",1,false,-1,\"Vest\",10000019,0], [\"30Rnd_65x39_caseless_mag\",30,true,1,\"arifle_MX_ACO_pointer_F\",10000001,0], [\"16Rnd_9x21_Mag\",16,true,2,\"hgun_P07_F\",10000011,0] ] */", "docSyntax": "magazinesAmmoFull entity", "syntax": "magazinesAmmoFull entity"}, "magazinesDetail": {"version": "CMD", "tags": "", "description": "Returns an array of strings with description of all vehicle's magazines, their ammo count (current/default) and their ids for the primary gunner. When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use currentMagazineDetail to get this information for a currently loaded magazine.", "example": "_magazinesDetail = magazinesDetail player; /* [ \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000003/0]\", \"Chemlight (Green)(1/1)[id/cr:10000020/0]\", \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000012/0]\", \"RGO Grenade(1/1)[id/cr:10000016/0]\", \"RGO Grenade(1/1)[id/cr:10000017/0]\", \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000070/0]\", \"PCML Missile(1/1)[id/cr:10000072/0]\", \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000001/0]\", \"9 mm 16Rnd Mag(16/16)[id/cr:10000013/0]\" ] */", "docSyntax": "magazinesDetail vehicle", "syntax": "magazinesDetail <objVehicle>"}, "magazinesDetailBackpack": {"version": "CMD", "tags": "", "description": "Returns an array with the type names of all the unit's backpack magazines.", "example": "magazinesDetailBackpack player; /* [ \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000011/2]\", \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000012/2]\", \"Chemlight (Green)(1/1)[id/cr:10000027/2]\", \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000013/2]\", \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000014/2]\", \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000015/2]\", \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000016/2]\", \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000017/2]\", \"9 mm 16Rnd Mag(16/16)[id/cr:10000019/2]\", \"9 mm 16Rnd Mag(16/16)[id/cr:10000020/2]\", \"RGO Grenade(1/1)[id/cr:10000021/2]\", \"RGO Grenade(1/1)[id/cr:10000022/2]\", \"IR Grenade [NATO](1/1)[id/cr:10000023/2]\", \"IR Grenade [NATO](1/1)[id/cr:10000024/2]\", \"Smoke Grenade (White)(1/1)[id/cr:10000025/2]\", \"Smoke Grenade (Green)(1/1)[id/cr:10000026/2]\", \"Chemlight (Green)(1/1)[id/cr:10000028/2]\" ] */", "docSyntax": "magazinesDetailBackpack unit", "syntax": "magazinesDetailBackpack <objUnit>"}, "magazinesDetailUniform": {"version": "CMD", "tags": "", "description": "Returns an array with the type names of all the unit's uniform magazines.", "example": "magazinesDetailUniform player; /* [ \"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000003/0]\", \"Chemlight (Green)(1/1)[id/cr:10000020/0]\" ] */", "docSyntax": "magazinesDetailUniform unit", "syntax": "magazinesDetailUniform <objUnit>"}, "magazinesDetailVest": {"version": "CMD", "tags": "", "description": "Returns an array with the type names of all the unit's vest magazines.", "example": "magazinesDetailVest player; /* [ [\"6.5 mm 30Rnd Sand Mag(30/30)[id/cr:10000012/0]\", \"RGO Grenade(1/1)[id/cr:10000016/0]\", \"RGO Grenade(1/1)[id/cr:10000017/0]\"] ] */", "docSyntax": "magazinesDetailVest unit", "syntax": "magazinesDetailVest <objUnit>"}, "magazinesTurret": {"version": "CMD", "tags": "", "description": "Returns all magazines of given turret. Use turret path [-1] for driver's turret. Alternatively, use magazinesAllTurrets.", "example": "_mags = vehicle player magazinesTurret [0, 0];", "docSyntax": "vehicle magazinesTurret turretPath", "syntax": "<objVehicle> magazinesTurret turretPath"}, "magazineTurretAmmo": {"version": "CMD", "tags": "", "description": "Returns ammo count of given type from given turret", "example": "vehicle player magazineTurretAmmo [\"cls\", [0]];", "docSyntax": "vehicle magazineTurretAmmo [magazineClass, turretPath]", "syntax": "<objVehicle> magazineTurretAmmo [magazineClass,turretPath]"}, "mapAnimAdd": {"version": "CMD", "tags": "", "description": "Add next frame to map animation.", "example": "mapAnimAdd [1, 0.1, markerPos \"anim1\"]; mapAnimCommit;", "docSyntax": "mapAnimAdd [time, zoom, position]", "syntax": "mapAnimAdd [<scalar>,<scalar>,position]"}, "mapAnimClear": {"version": "CMD", "tags": "", "description": "Clear map animation.", "example": "mapAnimClear;", "docSyntax": "mapAnimClear", "syntax": "mapAnimClear"}, "mapAnimCommit": {"version": "CMD", "tags": "", "description": "Play map animation.", "example": "mapAnimCommit;", "docSyntax": "mapAnimCommit", "syntax": "mapAnimCommit"}, "mapAnimDone": {"version": "CMD", "tags": "", "description": "Check if map animation is finished.", "example": "private _isDone = mapAnimDone;", "docSyntax": "mapAnimDone", "syntax": "mapAnimDone"}, "mapCenterOnCamera": {"version": "CMD", "tags": "", "description": "ctrl mapCenterOnCamera enable syntax enables/disables continuous centering of the main map type control on the camera position. Needs to be executed once.", "example": "//\u00a0--- Minimap update ((uiNamespace getVariable \"BIS_UAV_DISPLAY\") displayCtrl 112410) mapCenterOnCamera true;", "docSyntax": "mainmap mapCenterOnCamera enable", "syntax": "mainmap mapCenterOnCamera <bool>"}, "mapGridPosition": {"version": "CMD", "tags": "", "description": "Returns the map grid position of an object or position.", "example": "_gridPos = mapGridPosition player;", "docSyntax": "mapGridPosition param", "syntax": "mapGridPosition param"}, "markAsFinishedOnSteam": {"version": "CMD", "tags": "", "description": "Marks current mission as finished on Steam. Returns true if Steam query is successfully started or false otherwise.", "example": "markAsFinishedOnSteam; endMission \"END1\";", "docSyntax": "markAsFinishedOnSteam", "syntax": "markAsFinishedOnSteam"}, "markerAlpha": {"version": "CMD", "tags": "", "description": "Gets the marker alpha. See setMarkerAlpha.", "example": "AlphaMarker = markerAlpha \"myMarker\";", "docSyntax": "markerAlpha markerName", "syntax": "markerAlpha <string>"}, "markerBrush": {"version": "CMD", "tags": "", "description": "Gets the marker brush. See setMarkerBrush.", "example": "if (markerBrush \"Marker1\" == \"Solid\") then { hint \"Marker1 is solid!\" };", "docSyntax": "markerBrush name", "syntax": "markerBrush <string>"}, "markerChannel": {"version": "CMD", "tags": "", "description": "Returns the channel that a marker belongs to.", "example": "markerChannel \"marker_1\";", "docSyntax": "markerChannel marker", "syntax": "markerChannel marker"}, "markerColor": {"version": "CMD", "tags": "", "description": "Returns marker color for given marker. See also setMarkerColor.", "example": "if (markerColor \"Marker1\" == \"ColorRed\") then { hint \"Marker1 is red!\" };", "docSyntax": "markerColor markerName", "syntax": "markerColor <string>"}, "markerDir": {"version": "CMD", "tags": "", "description": "Get marker direction.", "example": "_mPos = markerDir \"markerOne\";", "docSyntax": "markerDir markerName", "syntax": "markerDir <string>"}, "markerDrawPriority": {"version": "CMD", "tags": "", "description": "Returns marker draw priority.", "example": "markerDrawPriority \"MarkerOne\"", "docSyntax": "markerDrawPriority markerName", "syntax": "markerDrawPriority <string>"}, "markerPolyline": {"version": "CMD", "tags": "", "description": "Returns a polyline marker's path data.", "example": "markerPolyline \"_USER_DEFINED #0/0/1\"; //\u00a0returns your first polyline's data in Singleplayer", "docSyntax": "markerPolyline marker", "syntax": "markerPolyline marker"}, "markerPos": {"version": "CMD", "tags": "", "description": "Returns marker position. See also setMarkerPos.", "example": "_mPos1 = markerPos \"markerOne\";", "docSyntax": "markerPos markerName", "syntax": "markerPos <string>"}, "markerShadow": {"version": "CMD", "tags": "", "description": "Returns if the marker is drawn with shadow enabled.", "example": "private _shadowEnabled = markerShadow _myMarker;", "docSyntax": "markerShadow marker", "syntax": "markerShadow marker"}, "markerShape": {"version": "CMD", "tags": "", "description": "Returns the shape of given marker.", "example": "if (markerShape \"Marker1\" == \"RECTANGLE\") then {hint \"Marker1 is a rectangle!\"};", "docSyntax": "markerShape name", "syntax": "markerShape <string>"}, "markerSize": {"version": "CMD", "tags": "", "description": "Returns marker size. This command is identical to getMarkerSize.", "example": "_mSize = markerSize \"Marker1\";", "docSyntax": "markerSize markerName", "syntax": "markerSize <string>"}, "markerText": {"version": "CMD", "tags": "", "description": "Get marker text.", "example": "hint format [\"Marker Text: %1\", markerText \"Marker1\"];", "docSyntax": "markerText markerName", "syntax": "markerText <string>"}, "markerType": {"version": "CMD", "tags": "", "description": "Gets type of marker. See CfgMarkers for a list of standard markers.", "example": "if (markerType \"Marker1\" == \"\") then { hint \"Marker1 is not an icon!\" };", "docSyntax": "markerType markerName", "syntax": "markerType <string>"}, "matrixMultiply": {"version": "CMD", "tags": "", "description": "Returns resulting matrix from the multiplication of two matrices. First matrix must be of the size n \u00d7 k, while the second must be of the size k \u00d7 m, i.e columns matrix1 == rows matrix2. The resulting matrix will be of the size n \u00d7 m. If the shapes do not match, empty array [] will be returned.", "example": "[ [2], [2] ] matrixMultiply [ [3] ] /* returns [ [6], [6] ] */", "docSyntax": "matrix1 matrixMultiply matrix2", "syntax": "matrix1 matrixMultiply matrix2"}, "matrixTranspose": {"version": "CMD", "tags": "", "description": "Matrix transposition", "example": "matrixTranspose [ [1,2,3], [3,1,2], [2,3,1] ]; /* returns [ [1,3,2], [2,1,3], [3,2,1] ] */", "docSyntax": "matrixTranspose matrix", "syntax": "matrixTranspose matrix"}, "max": {"version": "CMD", "tags": "", "description": "The greater value of a and b.", "example": "3 max 2; //\u00a0Result is 3", "docSyntax": "a max b", "syntax": "a max b"}, "maxLoad": {"version": "CMD", "tags": "", "description": "Returns maximum load limit for a unit, uniform/vest/backpack containers, vehicle cargo, supply boxes and weapon holders.", "example": "private _maxLoad = maxLoad _yaMum;", "docSyntax": "maxLoad container", "syntax": "maxLoad container"}, "members": {"version": "CMD", "tags": "", "description": "Return a list of members in given team.", "example": "_members = members _team;", "docSyntax": "members team", "syntax": "members team"}, "menuAction": {"version": "CMD", "tags": "", "description": "Returns action stored in item on given path in CT_MENU_STRIP control.", "example": "menuAction [120, [1, 0]];", "docSyntax": "menuAction [idc, path]", "syntax": "menuAction [<scalar>,path]"}, "menuAdd": {"version": "CMD", "tags": "", "description": "Adds new submenu entry into item on given path.", "example": "findDisplay 313 displayCtrl 120 menuAdd [[], \"Custom Tools\"]; //\u00a0Add new entry at the top level to the menu strip in Eden Editor", "docSyntax": "menuAdd [idc, path, text]", "syntax": "menuAdd [<scalar>,path,<string>]"}, "menuChecked": {"version": "CMD", "tags": "", "description": "Returns if item on given path is checked or not.", "example": "private _isChecked = findDisplay 313 displayCtrl 120 menuChecked [0, 1];", "docSyntax": "menuChecked [idc, path]", "syntax": "menuChecked [<scalar>,path]"}, "menuClear": {"version": "CMD", "tags": "", "description": "Removes all entries from given menu strip.", "example": "menuClear (findDisplay 313 displayCtrl 120); //\u00a0removes all entries from Eden Editor. Restart the editor to reset the menu.", "docSyntax": "menuClear idc", "syntax": "menuClear <scalar>"}, "menuCollapse": {"version": "CMD", "tags": "", "description": "Collapses item on given path and all its children.", "example": "findDisplay 313 displayCtrl 120 menuCollapse [0];", "docSyntax": "menuCollapse [idc, path]", "syntax": "menuCollapse [<scalar>,path]"}, "menuData": {"version": "CMD", "tags": "", "description": "Returns data stored in menu entry on given path.", "example": "//\u00a0Create an entry which will return its data once clicked private _ctrlMenuStrip = findDisplay 313 displayCtrl 120; private _indexMain = _ctrlMenuStrip menuAdd [[], \"Custom Tools\"]; private _indexData = _ctrlMenuStrip menuAdd [[_indexMain],\"This entry will print its data to system chat when clicked\"]; _ctrlMenuStrip menuSetData [[_indexMain,_indexData], \"[objNull,'Some String',true]\"]; _ctrlMenuStrip menuSetAction [[_indexMain,_indexData], \"systemChat (findDisplay 313 displayCtrl 120 menuData (menuHover (findDisplay 313 displayCtrl 120)));\"];", "docSyntax": "menuData [idc, path]", "syntax": "menuData [<scalar>,path]"}, "menuDelete": {"version": "CMD", "tags": "", "description": "Deletes menu entry on given path.", "example": "(findDisplay 313 displayCtrl 120) menuDelete [1]; //\u00a0removes the second entry from Eden Editor menu strip. Restart Eden Editor to reset the menu.", "docSyntax": "menuDelete [idc,path]", "syntax": "menuDelete [<scalar>,path]"}, "menuEnable": {"version": "CMD", "tags": "", "description": "Enables or disables menu entry on given path.", "example": "findDisplay 313 displayCtrl 120 menuEnable [0];", "docSyntax": "menuEnable [idc, path, enable]", "syntax": "menuEnable [<scalar>,path,<bool>]"}, "menuEnabled": {"version": "CMD", "tags": "", "description": "Returns if menu entry on given path is enabled or not.", "example": "_isEnabled = findDisplay 313 displayCtrl 120 menuEnabled [0];", "docSyntax": "menuEnabled [idc, path]", "syntax": "menuEnabled [<scalar>,path]"}, "menuExpand": {"version": "CMD", "tags": "", "description": "Expands given menu entry on given path and all its parents so entry is visible.", "example": "findDisplay 313 displayCtrl 120 menuExpand [0, 1];", "docSyntax": "menuExpand [idc, path]", "syntax": "menuExpand [<scalar>,path]"}, "menuHover": {"version": "CMD", "tags": "", "description": "Returns path to menu entry mouse is currently hovering over.", "example": "private _path = menuHover (findDisplay 313 displayCtrl 120);", "docSyntax": "menuHover idc", "syntax": "menuHover <scalar>"}, "menuPicture": {"version": "CMD", "tags": "", "description": "Returns picture set into item on given path.", "example": "private _picturePath = (findDisplay 313 displayCtrl 120) menuPicture [0, 1];", "docSyntax": "menuPicture [idc, path]", "syntax": "menuPicture [<scalar>,path]"}, "menuSetAction": {"version": "CMD", "tags": "", "description": "Sets new action into menu entry on given path.", "example": "findDisplay 313 displayCtrl 120 menuSetAction [[0, 1], \"systemChat 'Hello World!'\"];", "docSyntax": "menuSetAction [idc, path, action]", "syntax": "menuSetAction [<scalar>,path,action]"}, "menuSetCheck": {"version": "CMD", "tags": "", "description": "Sets item on given path to be checked or not. By default menu strip entries are not checkable. Once this command was executed, an entry can become checked and unchecked. If an entry is checked is indicated by a tick to the left of the entry's text. Setting an entry to be checkable will overwrite set picture with menuSetPicture.", "example": "findDisplay 313 displayCtrl 120 menuSetCheck [[0,1], true];", "docSyntax": "menuSetCheck [idc, path, checked]", "syntax": "menuSetCheck [<scalar>,path,checked]"}, "menuSetData": {"version": "CMD", "tags": "", "description": "Sets data into menu entry on given path.", "example": "findDisplay 313 displayCtrl 120 menuSetData [[0, 1], \"[true, player, 'Hello World!', 1337]\"];", "docSyntax": "menuSetData [idc, path, data]", "syntax": "menuSetData [<scalar>,path,data]"}, "menuSetPicture": {"version": "CMD", "tags": "", "description": "Sets new picture into menu entry on given path. The picture will be replaced by a tick if the entry was set to checkable with menuSetCheck.", "example": "findDisplay 313 displayCtrl 120 menuSetPicture [[0, 1], \"\\a3\\modules_f\\data\\iconunlock_ca.paa\"];", "docSyntax": "menuSetPicture [idc, path, picture]", "syntax": "menuSetPicture [<scalar>,path,picture]"}, "menuSetShortcut": {"version": "CMD", "tags": "", "description": "Sets shortcut of given menu strip entry.", "example": "_ctrlMenuStrip menuSetShortcut [[0,0], 2048 + 0x16]; //\u00a0ALT + U", "docSyntax": "menuSetShortcut [idc, path, shortcut]", "syntax": "menuSetShortcut [<scalar>,path,shortcut]"}, "menuSetText": {"version": "CMD", "tags": "", "description": "Sets text of given menu strip entry.", "example": "_ctrlMenuStrip menuSetText [[0,0,1], \"Hello World!\"];", "docSyntax": "menuSetText [idc, path, text]", "syntax": "menuSetText [<scalar>,path,<string>]"}, "menuSetURL": {"version": "CMD", "tags": "", "description": "Sets weblink (URL) of given menu strip entry, subject to allowedHTMLLoadURIs[] whitelisting in CfgCommands config.", "example": "_ctrlMenuStrip menuSetURL [[0,0,1], \"https://arma3.com/\"];", "docSyntax": "menuSetURL [idc, path, link]", "syntax": "menuSetURL [<scalar>,path,link]"}, "menuSetValue": {"version": "CMD", "tags": "", "description": "Sets new value into menu entry on given path.", "example": "findDisplay 313 displayCtrl 120 menuSetValue [[0, 1], 1337];", "docSyntax": "menuSetValue [idc, path, value]", "syntax": "menuSetValue [<scalar>,path,<scalar>]"}, "menuShortcut": {"version": "CMD", "tags": "", "description": "Returns shortcut related to menu entry on given path in form of a bitflag. To get the shortcut text use menuShortcutText.", "example": "findDisplay 313 displayCtrl 120 menuShortcut [0, 1];", "docSyntax": "menuShortcut [idc, path]", "syntax": "menuShortcut [<scalar>,path]"}, "menuShortcutText": {"version": "CMD", "tags": "", "description": "Returns a string containing shortcut text for menu item on the given path.", "example": "findDisplay 313 displayCtrl 120 menuShortcutText [1, 8]; //\u00a0returns \"#\"", "docSyntax": "menuShortcutText [idc, path]", "syntax": "menuShortcutText [<scalar>,path]"}, "menuSize": {"version": "CMD", "tags": "", "description": "Returns how many sub entries is in item on given path.", "example": "findDisplay 313 displayCtrl 120 menuSize [];", "docSyntax": "menuSize [idc, path]", "syntax": "menuSize [<scalar>,path]"}, "menuSort": {"version": "CMD", "tags": "", "description": "Sorts subentries of item on given path by their text.", "example": "findDisplay 313 displayCtrl 120 menuSort [[], true];", "docSyntax": "menuSort [idc, path, sortOrder]", "syntax": "menuSort [<scalar>,path,sortOrder]"}, "menuText": {"version": "CMD", "tags": "", "description": "Returns current text set in menu entry on given path.", "example": "_ctrlMenuStrip menuText [1];", "docSyntax": "menuText [idc, path]", "syntax": "menuText [<scalar>,path]"}, "menuURL": {"version": "CMD", "tags": "", "description": "Returns current URL set in entry on given path.", "example": "findDisplay 313 displayCtrl 120 menuURL [7, 0]; //\u00a0returns \"https://community.bistudio.com/wiki/Eden_Editor\"", "docSyntax": "menuURL [idc, path]", "syntax": "menuURL [<scalar>,path]"}, "menuValue": {"version": "CMD", "tags": "", "description": "Returns current value set in menu entry on given path.", "docSyntax": "menuValue [idc, path]", "syntax": "menuValue [<scalar>,path]"}, "merge": {"version": "CMD", "tags": "", "description": "Merges two HashMaps.", "example": "_hashMap merge _otherHashMap;", "docSyntax": "hashMap1 merge hashMap2", "syntax": "hashMap1 merge hashMap2"}, "min": {"version": "CMD", "tags": "", "description": "The smaller of a and b.", "example": "3 min 2 //\u00a0Result is 2", "docSyntax": "a min b", "syntax": "a min b"}, "mineActive": {"version": "CMD", "tags": "", "description": "Checks if the given mine is active.", "example": "if (mineActive _mine) then {hint \"BOOM!\"};", "docSyntax": "mineActive obj", "syntax": "mineActive <object>"}, "mineDetectedBy": {"version": "CMD", "tags": "", "description": "Returns true if mine has been detected by a given side", "example": "(allMines select 0) mineDetectedBy west;", "docSyntax": "mine mineDetectedBy faction", "syntax": "mine mineDetectedBy faction"}, "missileTarget": {"version": "CMD", "tags": "", "description": "Returns a guided missile's target.", "example": "missileTarget missile1;", "docSyntax": "missileTarget munition", "syntax": "missileTarget munition"}, "missileTargetPos": {"version": "CMD", "tags": "", "description": "Returns a guided missile's target position.", "example": "private _targetDistance = vehicle player distance missileTargetPos missile1;", "docSyntax": "missileTargetPos munition", "syntax": "missileTargetPos munition"}, "missionConfigFile": {"version": "CMD", "tags": "", "description": "Return root of mission Description.ext entries hierarchy.", "example": "for \"_i\" from 0 to (count paramsArray - 1) do { missionNamespace setVariable [configName ((missionConfigFile/\"Params\") select _i), paramsArray select _i]; };", "docSyntax": "missionConfigFile", "syntax": "missionConfigFile"}, "missionDifficulty": {"version": "CMD", "tags": "", "description": "Return difficulty that has been forced for this mission, returns -1 if difficulty is not forced and it is used one from player's options.", "example": "private _number = missionDifficulty;", "docSyntax": "missionDifficulty", "syntax": "missionDifficulty"}, "missionEnd": {"version": "CMD", "tags": "", "description": "Returns mission end type and how it was ended or an empty array [] is mission was not ended.", "example": "private _endInfo = missionEnd;", "docSyntax": "missionEnd", "syntax": "missionEnd"}, "missionName": {"version": "CMD", "tags": "", "description": "Return currently loaded mission file (path to mission.pbo, relative to game exe).", "example": "hint format [\"You are playing mission \"\"%1\"\"\", missionName];", "docSyntax": "missionName", "syntax": "missionName"}, "missionNameSource": {"version": "CMD", "tags": "", "description": "Return workshop-compatible currently loaded mission file (path to mission.pbo, relative to game exe).", "example": "hint format [\"You are playing mission \"\"%1\"\"\", missionNameSource];", "docSyntax": "missionNameSource", "syntax": "missionNameSource"}, "missionNamespace": {"version": "CMD", "tags": "", "description": "Returns the global namespace attached to mission.", "example": "missionNamespace setVariable [\"StringVariable\", \"myString\"]; //\u00a0same as: StringVariable = \"myString\"; _myStringValue = missionNamespace getVariable \"StringVariable\"; hint _myStringValue; //\u00a0hints \"myString\"", "docSyntax": "missionNamespace", "syntax": "missionNamespace"}, "missionProfileNamespace": {"version": "CMD", "tags": "", "description": "This namespace has the same lifetime as profileNamespace but is also connected to the mission it is saved from. See saveMissionProfileNamespace for more details.", "example": "private _currentMissionProfileNamespace = missionProfileNamespace;", "docSyntax": "missionProfileNamespace", "syntax": "missionProfileNamespace"}, "missionStart": {"version": "CMD", "tags": "", "description": "Returns date and time when mission started. Because this command returns the time of the actual start of the mission, it might not be available in pre-init or init, but is guaranteed to be available in post-init when time > 0.", "example": "setDate (missionStart select [0,5]);", "docSyntax": "missionStart", "syntax": "missionStart"}, "missionVersion": {"version": "CMD", "tags": "", "description": "Returns the version of the current mission.", "example": "_version = missionVersion;", "docSyntax": "missionVersion", "syntax": "missionVersion"}, "mod": {"version": "CMD", "tags": "", "description": "Remainder of a divided by b.", "example": "_remaining = 5 mod 2; //\u00a0returns 1, as 5 divided by 2 is 2 \u00d7 2 + 1", "docSyntax": "a mod b", "syntax": "a mod b"}, "modelToWorld": {"version": "CMD", "tags": "", "description": "Translates relative position from object model space to world space in PositionAGL format.", "example": "_aboveAndBehindPlayer = player modelToWorld [0,-1,3];", "docSyntax": "model modelToWorld position", "syntax": "model modelToWorld position"}, "modelToWorldVisual": {"version": "CMD", "tags": "", "description": "Converts position from object model space to world space in render time scope. For ASL version see modelToWorldVisualWorld.", "example": "_aboveAndBehindPlayer = player modelToWorldVisual [0,-1,3];", "docSyntax": "object modelToWorldVisual modelPos", "syntax": "<object> modelToWorldVisual modelPos"}, "modelToWorldVisualWorld": {"version": "CMD", "tags": "", "description": "Converts position from object model space to world space in render time scope. For the PositionAGL version see modelToWorldVisual.", "example": "player modelToWorldVisualWorld [0,1,0];", "docSyntax": "obj modelToWorldVisualWorld modelPos", "syntax": "<object> modelToWorldVisualWorld modelPos"}, "modelToWorldWorld": {"version": "CMD", "tags": "", "description": "Converts position from object model space to world space in PositionASL format from the object's centre position.", "example": "private _playersFrontWorld = player modelToWorldWorld [0,1,0];", "docSyntax": "obj modelToWorldWorld modelPos", "syntax": "<object> modelToWorldWorld modelPos"}, "modParams": {"version": "CMD", "tags": "", "description": "Returns list of mod parameters according to given options, values are in same order as the given options.", "example": "_data = modParams [\"Kart\", [\"name\", \"logo\", \"picture\"]];", "docSyntax": "modParams [modClass, options]", "syntax": "modParams [modClass,options]"}, "moonIntensity": {"version": "CMD", "tags": "", "description": "Returns the intensity of the moon's brightness in range 0...1.", "example": "_intensity = moonIntensity;", "docSyntax": "moonIntensity", "syntax": "moonIntensity"}, "moonPhase": {"version": "CMD", "tags": "", "description": "Returns the phase of the in-game Moon on the given date. According to this command, the fullest Moon in Arma 3 at midnight is on setDate [4804, 7, 13, 0, 0];. Use the Moon Phase Utility to find out a scenario date with desired moon.", "example": "private _currentMoonPhase = moonPhase date;", "docSyntax": "moonPhase date", "syntax": "moonPhase date"}, "morale": {"version": "CMD", "tags": "", "description": "Get the provided unit's current morale level.", "example": "hint format [\"Leader's morale: %1\", morale leader player];", "docSyntax": "morale unit", "syntax": "morale <objUnit>"}, "move": {"version": "CMD", "tags": "", "description": "Let group move to given position. Active waypoints will be ignored when command is used.", "example": "_groupOne move position player;", "docSyntax": "group move position", "syntax": "<objGroup> move position"}, "move3DENCamera": {"version": "CMD", "tags": "", "description": "Moves the Eden Editor camera.", "example": "move3DENCamera [getPosASL player, true];", "docSyntax": "move3DENCamera [position, useOffset]", "syntax": "move3DENCamera [position,useOffset]"}, "moveInAny": {"version": "CMD", "tags": "", "description": "Moves unit to the first available seat in the specified vehicle. The order of priorities is the same order used in squad command when you order subordinates to get in vehicle to any position and is the same order used in Zeus when you drag units to a vehicle.", "example": "player moveInAny tank;", "docSyntax": "unit moveInAny vehicle", "syntax": "<objUnit> moveInAny <objVehicle>"}, "moveInCargo": {"version": "CMD", "tags": "", "description": "Moves a unit into a vehicle cargo position (immediately and without animation).", "example": "_soldierOne moveInCargo _jeepOne;", "docSyntax": "unit moveInCargo vehicle", "syntax": "<objUnit> moveInCargo <objVehicle>"}, "moveInCommander": {"version": "CMD", "tags": "", "description": "Move soldier into vehicle commander position (Immediate, no animation).", "example": "_soldierOne moveInCommander _tankOne;", "docSyntax": "unitName moveInCommander vehicle", "syntax": "<objUnit> moveInCommander <objVehicle>"}, "moveInDriver": {"version": "CMD", "tags": "", "description": "Moves soldier into vehicle driver position (immediate, no animation).", "example": "_soldierOne moveInDriver _tankOne;", "docSyntax": "unit moveInDriver vehicle", "syntax": "<objUnit> moveInDriver <objVehicle>"}, "moveInGunner": {"version": "CMD", "tags": "", "description": "Move soldier into vehicle gunner position (Immediate, no animation).", "example": "soldierOne moveInGunner tankOne;", "docSyntax": "unitName moveInGunner vehicle", "syntax": "<objUnit> moveInGunner <objVehicle>"}, "moveInTurret": {"version": "CMD", "tags": "", "description": "Moves the soldier into the vehicle's turret. (Immediately, without animation).", "example": "_soldierOne moveInTurret [_tank, [0, 0]];", "docSyntax": "unitName moveInTurret [vehicle, turretPath]", "syntax": "<objUnit> moveInTurret [<objVehicle>,turretPath]"}, "moveObjectToEnd": {"version": "CMD", "tags": "", "description": "Shifts an editor object to the end of the objects array. This means,that the object will be drawn last (after all other objects).", "example": "-", "docSyntax": "map moveObjectToEnd object", "syntax": "<objMap> moveObjectToEnd <object>"}, "moveOut": {"version": "CMD", "tags": "", "description": "Moves the soldier out of the vehicle.", "example": "{ if (lifeState _x == \"UNCONSCIOUS\") then { moveOut _x } } forEach crew cursorTarget;", "docSyntax": "moveOut soldier", "syntax": "moveOut soldier"}, "moveTarget": {"version": "CMD", "tags": "", "description": "Change information about a target.", "example": "_moved = _target moveTarget [position player, 1, 1];", "docSyntax": "target moveTarget [position, typeAccuracy, posAccuracy]", "syntax": "<object> moveTarget [position,typeAccuracy,posAccuracy]"}, "moveTime": {"version": "CMD", "tags": "", "description": "Returns the current time of the most important RTM animation currently being played on the soldier.", "example": "moveTime player;", "docSyntax": "moveTime soldier", "syntax": "moveTime soldier"}, "moveTo": {"version": "CMD", "tags": "", "description": "Low level command to person to move to given position.", "example": "_myAgent moveTo getPosATL player;", "docSyntax": "unit moveTo position", "syntax": "<objUnit> moveTo position"}, "moveToCompleted": {"version": "CMD", "tags": "", "description": "Check if latest low level moveTo command is finished.", "example": "_isCompleted = moveToCompleted _unit;", "docSyntax": "moveToCompleted person", "syntax": "moveToCompleted <objUnit>"}, "moveToFailed": {"version": "CMD", "tags": "", "description": "Check if latest low level moveTo command failed.", "example": "private _hasFailed = moveToFailed _unit;", "docSyntax": "moveToFailed unit", "syntax": "moveToFailed <objUnit>"}, "musicVolume": {"version": "CMD", "tags": "", "description": "Returns the current music volume (set by fadeMusic)", "example": "hint str musicVolume;", "docSyntax": "musicVolume", "syntax": "musicVolume"}, "name": {"version": "CMD", "tags": "", "description": "When argument is Object, the command returns the name given to a unit using the setIdentity instruction or selected randomly by the game engine if setIdentity has not been used on the unit. If used on vehicle, name of first crew member (in order commander, driver, gunner). If used on an object, \"Error: No unit\" is being returned.", "example": "_name = name player;", "docSyntax": "name object", "syntax": "<string> <object>"}, "namedProperties": {"version": "CMD", "tags": "", "description": "Returns a list of named properties on Geometry LOD.", "example": "private _properties = namedProperties _object; //\u00a0[[\"sbsource\",\"shadowvolume\"],[\"prefershadowvolume\",\"1\"],[\"reversed\",\"1\"],[\"buoyancy\",\"1\"]]", "docSyntax": "namedProperties object", "syntax": "namedProperties <object>"}, "nameSound": {"version": "CMD", "tags": "", "description": "Returns the nameSound of a person.", "example": "nameSound player;", "docSyntax": "nameSound person", "syntax": "nameSound <objUnit>"}, "nearEntities": {"version": "CMD", "tags": "", "description": "Finds entities inside a sphere with the given radius. If the alternative syntax is used, only entities of given types or subtypes are listed. Entities returned are not sorted by distance. This command doesn't return dead entities or entities inside vehicles. If you need to return those, use entities command.", "example": "_list = player nearEntities 20; _list = ASLToAGL getPosASL player nearEntities 50; _list = player nearEntities [\"Man\", 1000]; _list = ASLToAGL getPosASL player nearEntities [\"LaserTarget\", 3000]; _list = player nearEntities [[\"Car\", \"Motorcycle\", \"Tank\"], 50]; _list = ASLToAGL getPosASL player nearEntities [[\"Man\", \"Air\", \"Car\", \"Motorcycle\", \"Tank\"], 200];", "docSyntax": "position nearEntities radius", "syntax": "position nearEntities radius"}, "nearestBuilding": {"version": "CMD", "tags": "", "description": "Finds the nearest building to a given object or position. A \"building\" is defined as an object that is of class \"House\" and contains a path LOD.", "example": "_nBuilding = nearestBuilding player;", "docSyntax": "nearestBuilding position", "syntax": "nearestBuilding position"}, "nearestLocation": {"version": "CMD", "tags": "", "description": "Return the closest location of specified class to a given position. Checked range is unlimited (i.e. covers the whole map).", "example": "_nearestCity = nearestLocation [getPos player, \"nameCity\"];", "docSyntax": "nearestLocation [position, locationType, maxDistance]", "syntax": "nearestLocation [position,locationType,maxDistance]"}, "nearestLocations": {"version": "CMD", "tags": "", "description": "Returns an array of locations of chosen type(s) within the given radius of the given position, sorted from nearest to farthest.", "example": "_nearbyLocations = nearestLocations [getPosATL player, [\"RockArea\", \"VegetationFir\"], 100];", "docSyntax": "nearestLocations [centre, locationTypes, radius, sortPosition]", "syntax": "nearestLocations [centre,locationTypes,radius,sortPosition]"}, "nearestLocationWithDubbing": {"version": "CMD", "tags": "", "description": "Find the nearest location having a non-empty speech.", "example": "_location = nearestLocationWithDubbing player;", "docSyntax": "nearestLocationWithDubbing position", "syntax": "nearestLocationWithDubbing position"}, "nearestMines": {"version": "CMD", "tags": "", "description": "Returns a list of nearest mines of the given types to the given position or object, within the specified distance. If more than one mine are found they will be ordered by proximity by default, the closest one will be first in the array. The sorting can be turned off.", "example": "nearestMines [player, [\"MineBase\"], 20];", "docSyntax": "nearestMines [position, types, radius, sort, 2Dmode]", "syntax": "nearestMines [position,types,radius,sort,2Dmode]"}, "nearestObject": {"version": "CMD", "tags": "", "description": "Returns the nearest object of given type (or inherited classes) to given position within a sphere. Hardcoded radius is 50 meters. Unlike with nearestObjects, where distance is measured in 2D space, nearestObject will be closest object in 3D space.", "example": "_nObject = nearestObject [2345, 6789]; _nObject = nearestObject [player, \"StreetLamp\"];", "docSyntax": "nearestObject [position, type]", "syntax": "nearestObject [position,type]"}, "nearestObjects": {"version": "CMD", "tags": "", "description": "Returns a list of nearest objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered by proximity, the closest one will be first in the array. If an object is given as the center and the filter criteria applies to it, it will be the first result in the list. Alternatively, you can use nearObjects command, which doesn't sort results.", "example": "nearestObjects [player, [\"Car\", \"Tank\"], 200];", "docSyntax": "nearestObjects [position, types, radius, 2Dmode]", "syntax": "nearestObjects [position,types,radius,2Dmode]"}, "nearestTerrainObjects": {"version": "CMD", "tags": "", "description": "Returns a list of nearest terrain objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered according to 3D distance to the object (i.e. the closest one will be first in the array). In contrast to nearestObjects this command returns terrain placed objects like trees, rocks and buildings which don't necessarily need an associated config class.", "example": "nearestTerrainObjects [player, [\"Tree\", \"Bush\"], 200];", "docSyntax": "nearestTerrainObjects [position, types, radius, sort, 2Dmode]", "syntax": "nearestTerrainObjects [position,types,radius,sort,2Dmode]"}, "nearObjects": {"version": "CMD", "tags": "", "description": "Find objects (Units, Vehicles, Dead, Map Objects) in a sphere with given radius. The first object in the returned array is not necessarily the closest one. If you need returned objects to be sorted by distance, use nearestObjects. If typeName is given, only objects of given type (or its subtype) are listed.", "example": "_list = position player nearObjects 50;", "docSyntax": "position nearObjects radius", "syntax": "position nearObjects radius"}, "nearObjectsReady": {"version": "CMD", "tags": "", "description": "Check whether all data are loaded to nearObjects will return in reasonable time.", "example": "_twnpos nearObjectsReady 500; //from ALICE", "docSyntax": "position nearObjectsReady radius", "syntax": "position nearObjectsReady radius"}, "nearRoads": {"version": "CMD", "tags": "", "description": "Find the road segments within the circle of given radius.", "example": "_list = player nearRoads 50;", "docSyntax": "pos nearRoads radius", "syntax": "<array> nearRoads radius"}, "nearSupplies": {"version": "CMD", "tags": "", "description": "Find supplies (weapon holders, ammo crates, fuel feeds, other units) in the sphere with given radius.", "example": "_list = player nearSupplies 50;", "docSyntax": "origin nearSupplies radius", "syntax": "origin nearSupplies radius"}, "nearTargets": {"version": "CMD", "tags": "", "description": "Returns a list of targets within the defined range. \"Targets\" are not restricted to enemy units.", "example": "player nearTargets 100; //\u00a0can return e.g /* [ [[2555.33,2535.33,1.32708],\"SoldierEB\",EAST,214222,EAST 1-1-A:1], [[2550.39,2482.5,1.32696],\"SoldierWB\",WEST,0,WEST 1-1-A:2] ] */", "docSyntax": "unit nearTargets range", "syntax": "<objUnit> nearTargets range"}, "needReload": {"version": "CMD", "tags": "", "description": "Returns how much vehicle wants to reload its weapons.", "example": "_seriousness = needReload _vehicle;", "docSyntax": "needReload vehicle", "syntax": "needReload <objVehicle>"}, "needService": {"version": "CMD", "tags": "", "description": "Returns array with how much vehicle needs repairing, refueling and rearming.", "example": "needService tank params [\"_needRepair\", \"_needRefuel\", \"_needRearm\"];", "docSyntax": "needService vehicle", "syntax": "needService <objVehicle>"}, "netId": {"version": "CMD", "tags": "", "description": "Unique ID of object or group. As this command is MP only, you can use BIS_fnc_netId, which extends the use to SP as well. See also: BIS_fnc_objectVar", "example": "_playerNetId = netId player;", "docSyntax": "netId var", "syntax": "netId var"}, "newOverlay": {"version": "CMD", "tags": "", "description": "Creates the new overlay dialog for the specified type of overlay.", "example": "-", "docSyntax": "map newOverlay config", "syntax": "<objMap> newOverlay config"}, "nextMenuItemIndex": {"version": "CMD", "tags": "", "description": "Returns the next available menu item index.", "example": "-", "docSyntax": "nextMenuItemIndex map", "syntax": "nextMenuItemIndex <objMap>"}, "nextWeatherChange": {"version": "CMD", "tags": "", "description": "Return the remaining time (in seconds) over which the current weather change will occur.", "example": "_seconds = nextWeatherChange;", "docSyntax": "nextWeatherChange", "syntax": "nextWeatherChange"}, "nMenuItems": {"version": "CMD", "tags": "", "description": "Returns the total number of user-added menu items belonging to the given menu.", "example": "-", "docSyntax": "map nMenuItems menuName", "syntax": "<objMap> nMenuItems menuName"}, "not": {"version": "CMD", "tags": "", "description": "not a is exactly the same as ! a.", "example": "not false; //\u00a0returns true", "docSyntax": "not a", "syntax": "not a"}, "numberOfEnginesRTD": {"version": "CMD", "tags": "", "description": "Returns the number of engines a helicopter has.", "example": "_engineCount = numberOfEnginesRTD vehicle player;", "docSyntax": "numberOfEnginesRTD helicopterRTD", "syntax": "numberOfEnginesRTD helicopterRTD"}, "numberToDate": {"version": "CMD", "tags": "", "description": "Convert float number to a date.", "example": "setDate numberToDate [2008, 0.5324]; //\u00a0sets date to [2008,7,13,7,49]", "docSyntax": "numberToDate [year, time]", "syntax": "numberToDate [year,<scalar>]"}, "objectCurators": {"version": "CMD", "tags": "", "description": "Returns array with all curators which can edit given object.", "example": "_curatorsThatcanEdit = objectCurators BIS_Tank;", "docSyntax": "objectCurators obj", "syntax": "objectCurators <object>"}, "objectFromNetId": {"version": "CMD", "tags": "", "description": "Get object with given unique ID. If object is a group use groupFromNetId. As this command is MP only, you can use BIS_fnc_objectFromNetId, which extends the use to SP as well.", "example": "objectFromNetId \"2:3\"", "docSyntax": "objectFromNetId id", "syntax": "objectFromNetId <scalar>"}, "objectParent": {"version": "CMD", "tags": "", "description": "Returns the parent of an object if said object is a proxy.", "example": "_isOnFoot = isNull objectParent player; //\u00a0check if the player is on foot _isCommander = player isEqualTo commander objectParent player; //\u00a0check if the player is in a vehicle and is its commander _holder = objectParent _myBackpack; //\u00a0return: //\u00a0- the weapon holder of a dropped backpack //\u00a0- the cargo space of a vehicle holding this backpack //\u00a0- the dead unit holding the backpack //\u00a0works for a backpack, a vest or a uniform _isDeployed = isNull objectParent _deployableStaticMG; //\u00a0true if deployed, false if in a backpack _ropeParent = objectParent _ropeSegment; //\u00a0since Arma 3 v2.12", "docSyntax": "objectParent object", "syntax": "objectParent <object>"}, "objStatus": {"version": "CMD", "tags": "", "description": "Sets the status of an objective that was defined in briefing.html. Status may be one of:", "example": "\"1\" objStatus \"DONE\";", "docSyntax": "objectivenumber objStatus status", "syntax": "objectivenumber objStatus status"}, "onBriefingGroup": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Group tab is selected in the briefing.", "example": "onBriefingGroup \"GroupVoiceOver\";", "docSyntax": "onBriefingGroup soundName", "syntax": "onBriefingGroup <string>"}, "onBriefingNotes": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Notes tab is selected in the briefing.", "example": "onBriefingNotes \"NotesVoiceOver\";", "docSyntax": "onBriefingNotes soundName", "syntax": "onBriefingNotes <string>"}, "onBriefingPlan": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Plan tab is selected in the briefing.", "example": "onBriefingPlan \"PlanVoiceOver\";", "docSyntax": "onBriefingPlan soundName", "syntax": "onBriefingPlan <string>"}, "onBriefingTeamSwitch": {"version": "CMD", "tags": "", "description": "Select a sound defined in the CfgSounds of the mission to be played the first time the TeamSwitch tab is selected in the briefing.", "example": "onBriefingTeamSwitch \"TeamSwitchVoiceOver\";", "docSyntax": "onBriefingTeamSwitch soundName", "syntax": "onBriefingTeamSwitch <string>"}, "onCommandModeChanged": {"version": "CMD", "tags": "", "description": "Defines code performed when hc command mode changes either because of (Left Ctrl + Space) shortcut or hcShowBar scripting command. Groups hc mode must contain at least one group for this command to work (see High Command). Attached code receives _isHighCommand boolean.", "example": "//Examples in-use can be found in: //ca\\modules\\HC\\data\\scripts\\HC_GUI.sqf //A3\\modules_f\\HC\\data\\scripts\\HC_GUI.sqf", "docSyntax": "onCommandModeChanged code", "syntax": "onCommandModeChanged <code>"}, "onDoubleClick": {"version": "CMD", "tags": "", "description": "Defines an action performed when the user double clicks on the map. Command receives:,_pos array position,_units array selected units,_shift,_alt bool key state", "example": "-", "docSyntax": "map onDoubleClick command", "syntax": "<objMap> onDoubleClick command"}, "onEachFrame": {"version": "CMD", "tags": "", "description": "Runs given statement every frame in an unscheduled environment.", "example": "onEachFrame { hintSilent str getPosWorld player }; //\u00a0hints position every frame", "docSyntax": "onEachFrame statement", "syntax": "onEachFrame statement"}, "onGroupIconClick": {"version": "CMD", "tags": "", "description": "Defines an action performed when player clicked on group marker (3D or in a map). The code executed once. This EH, unlike onGroupIconOverEnter and onGroupIconOverLeave, has one more param which returns 1 if RMB was pressed, 0 otherwise.", "example": "onGroupIconClick { //\u00a0passed values for _this are: params [\"_is3D\", \"_group\", \"_wpID\", \"_posX\", \"_posY\", \"_shift\", \"_ctrl\", \"_alt\"]; //\u00a0before Arma 3 _is3D = _this select 0; _group = _this select 1; _wpID = _this select 2; _RMB = _this select 3; _posx = _this select 4; _posy = _this select 5; _shift = _this select 6; _ctrl = _this select 7; _alt = _this select 8; _message = format [\"____ Info ____\"]; {_message = _message + format [\"\\n %1\", _x]} forEach _this; hint _message; };", "docSyntax": "onGroupIconClick command", "syntax": "onGroupIconClick command"}, "onGroupIconOverEnter": {"version": "CMD", "tags": "", "description": "Defines an action performed when player moves pointer over group marker (3D or in a map). The code will execute continuously while pointer is over icon.", "example": "onGroupIconOverEnter { //\u00a0passed values for _this are: params [\"_is3D\", \"_group\", \"_wpID\", \"_posX\", \"_posY\", \"_shift\", \"_ctrl\", \"_alt\"]; //\u00a0before Arma 3 _is3D = _this select 0; _group = _this select 1; _wpID = _this select 2; _posx = _this select 3; _posy = _this select 4; _shift = _this select 5; _ctrl = _this select 6; _alt = _this select 7; _message = format [\"____ Info ____\"]; {_message = _message + format [\"\\n %1\",_x]} forEach _this; hint _message; };", "docSyntax": "onGroupIconOverEnter command", "syntax": "onGroupIconOverEnter command"}, "onGroupIconOverLeave": {"version": "CMD", "tags": "", "description": "Defines an action performed when pointer, previously positioned over icon, is moved away from it (3D or in a map). The code is executed once.", "example": "onGroupIconOverLeave { //\u00a0passed values for _this are: params [\"_is3D\", \"_group\", \"_wpID\", \"_posX\", \"_posY\", \"_shift\", \"_ctrl\", \"_alt\"]; //\u00a0before Arma 3 _is3D = _this select 0; _group = _this select 1; _wpID = _this select 2; _posx = _this select 3; _posy = _this select 4; _shift = _this select 5; _ctrl = _this select 6; _alt = _this select 7; _message = format [\"____ Info ____\"]; { _message = _message + format [\"\\n %1\",_x] } forEach _this; hint _message; };", "docSyntax": "onGroupIconOverLeave command", "syntax": "onGroupIconOverLeave command"}, "onHCGroupSelectionChanged": {"version": "CMD", "tags": "", "description": "Defines an action performed when high command group selection has been changed.", "example": "onHCGroupSelectionChanged { if (_isSelected) then { hint format [\"Group %1 has been selected.\", _group]; } else { hint format [\"Group %1 has been deselected.\", _group]; }; };", "docSyntax": "onHCGroupSelectionChanged code", "syntax": "onHCGroupSelectionChanged <code>"}, "onMapSingleClick": {"version": "CMD", "tags": "", "description": "Defines the action performed when user clicks in map by executing command string. The code is executed on every click, until the command is", "example": "Armed Assault: Creates a soldier unit at the position clicked:", "docSyntax": "onMapSingleClick command", "syntax": "onMapSingleClick command"}, "onPlayerConnected": {"version": "CMD", "tags": "", "description": "This command will execute the provided code on the server whenever a player connects to a multiplayer session.", "example": "onPlayerConnected \"[_id, _name] execVM 'PlayerConnected.sqf';\";", "docSyntax": "onPlayerConnected code", "syntax": "onPlayerConnected <code>"}, "onPlayerDisconnected": {"version": "CMD", "tags": "", "description": "This command will execute attached code whenever a player is leaving an MP session. The code will receive a number of special variables:", "example": "onPlayerDisconnected {diag_log [_id, _uid, _name]};", "docSyntax": "onPlayerDisconnected code", "syntax": "onPlayerDisconnected <code>"}, "onPreloadFinished": {"version": "CMD", "tags": "", "description": "Defines an action performed after the preload screen finished. Preload event occurs after briefing screen on mission start.", "example": "onPreloadFinished {TAG_ReceivingScreenDone = true};", "docSyntax": "onPreloadFinished command", "syntax": "onPreloadFinished command"}, "onPreloadStarted": {"version": "CMD", "tags": "", "description": "Defines an action performed just before the preload screen started. Preload event occurs after briefing screen on mission start.", "example": "onPreloadStarted {diag_log \"preload started\"};", "docSyntax": "onPreloadStarted command", "syntax": "onPreloadStarted command"}, "onShowNewObject": {"version": "CMD", "tags": "", "description": "Defines an action performed when the user right clicks on the map and,selects New Object. Set to empty for default behavior. Command receives:,_pos array position,", "example": "-", "docSyntax": "map onShowNewObject command", "syntax": "<objMap> onShowNewObject command"}, "onTeamSwitch": {"version": "CMD", "tags": "", "description": "Defines an action performed when the team switch is finished. Commandset receives the following special variables: _from object previous unit, _to object current unit. Consecutive use of onTeamSwitch command will overwrite previously set commandset.", "example": "onTeamSwitch { [_from, _to] execVM \"myTeamSwitchScript.sqf\"; };", "docSyntax": "onTeamSwitch commandset", "syntax": "onTeamSwitch commandset"}, "openCuratorInterface": {"version": "CMD", "tags": "", "description": "Force opens curator interface.", "example": "Open interface:", "docSyntax": "openCuratorInterface", "syntax": "openCuratorInterface"}, "openDLCPage": {"version": "CMD", "tags": "", "description": "Opens a Steam page of the app with given appId. Only works for known appId (game + linked DLCs)", "example": "openDLCPage 288520", "docSyntax": "openDLCPage dlcID", "syntax": "openDLCPage dlcID"}, "openGPS": {"version": "CMD", "tags": "", "description": "Opens or closes minimap if player has \"ItemGPS\" linked in inventory and \"MinimapDisplayComponent\" is not disabled with enableInfoPanelComponent. Returns true on success. If more than one minimap is open (see infoPanels, infoPanel) each call to the command will close only 1 minimap. Visibility of minimap can be checked with visibleGPS command.", "example": "player linkItem \"ItemGPS\"; private _success = openGPS true;", "docSyntax": "openGPS open", "syntax": "openGPS open"}, "openMap": {"version": "CMD", "tags": "", "description": "Opens or closes in-game map.", "example": "openMap [true, false]; //\u00a0opens map normally openMap [false, false]; //\u00a0closes an opened map normally openMap [true, true]; //\u00a0force opens map and keeps it open (the user cannot close it on their own) openMap [false, true]; //\u00a0since Arma 3 2.06: prevents map from opening, closes open map and forces it to stay close (the user cannot open it on their own)", "docSyntax": "openMap show", "syntax": "openMap show"}, "openSteamApp": {"version": "CMD", "tags": "", "description": "Opens a Steam application, returns false if it was not possible to run the application.", "example": "openSteamApp 553228;", "docSyntax": "openSteamApp appID", "syntax": "openSteamApp appID"}, "openYoutubeVideo": {"version": "CMD", "tags": "", "description": "Opens Steam overlay with given YT video. Video URL is the end part of the YT URL, starting with watch?v=.... If the user has Steam overlay disabled, the command will display appropriate message to the user and return false.", "example": "//\u00a0open http://www.youtube.com/watch?v=UBIAbm7Rt78 _isOpened = openYoutubeVideo \"watch?v=UBIAbm7Rt78\";", "docSyntax": "openYoutubeVideo youTubeUrl", "syntax": "openYoutubeVideo youTubeUrl"}, "or": {"version": "CMD", "tags": "", "description": "Returns true if one or both conditions are true. In case of the alternative syntax, lazy evaluation is used. That means that if left operand is true, evaluation of the right side is skipped completely.", "example": "if (_obj1 or (_enemycount == 0) or (not alive _enemyGeneral)) then { hint \"you win\u00a0!\"; };", "docSyntax": "a or b", "syntax": "a or b"}, "orderGetIn": {"version": "CMD", "tags": "", "description": "Force all units in the array to get in or out of their assigned vehicles. Units must be assigned to a vehicle before this command will do anything.", "example": "[_unitOne, _unitTwo] orderGetIn true;", "docSyntax": "unitArray orderGetIn order", "syntax": "unitArray orderGetIn <scalar>"}, "overcast": {"version": "CMD", "tags": "", "description": "Return the current overcast level. Zero is clear skies, one is maximum cloud cover.", "example": "_cloudLevel = overcast;", "docSyntax": "overcast", "syntax": "overcast"}, "overcastForecast": {"version": "CMD", "tags": "", "description": "Return the overcast forecast.", "example": "_forecast = overcastForecast;", "docSyntax": "overcastForecast", "syntax": "overcastForecast"}, "owner": {"version": "CMD", "tags": "", "description": "On server machine, returns the machine network ID of the client to which the object is local. Otherwise returns 0. For use on clients clientOwner command is available. To find out the owner of a Group, use groupOwner.", "example": "_clientID = owner _someobject;", "docSyntax": "owner object", "syntax": "owner <object>"}, "param": {"version": "CMD", "tags": "", "description": "Extracts a single value with given index from input argument, similar to BIS_fnc_param. When used without argument, as shown in main syntax, internal variable _this, which is usually available inside functions and event handlers, is used as argument. If input argument is not an array, it will be converted to 1 element array.", "example": "[1, 2, 3] call { private _one = param [0, 1]; private _two = param [1, 2]; private _three = param [2, 3]; //\u00a0... };", "docSyntax": "param [index, defaultValue, expectedDataTypes, expectedArrayCount]", "syntax": "param [<scalar>,defaultValue,expectedDataTypes,expectedArrayCount]"}, "params": {"version": "CMD", "tags": "", "description": "Parses input argument into array of private variables. When used without argument, as shown in main syntax, internal variable _this, which is usually available inside functions and event handlers, is used as argument.", "example": "[1, 2, 3] call { private [\"_one\", \"_two\", \"_three\"]; _one = _this select 0; _two = _this select 1; _three = _this select 2; //\u00a0... }; //\u00a0Same as above, only using params [1, 2, 3] call { params [\"_one\", \"_two\", \"_three\"]; //\u00a0... };", "docSyntax": "params [element1, element2, ...]", "syntax": "<any> [element1,element2,...]"}, "parseNumber": {"version": "CMD", "tags": "", "description": "Parses the string, interpreting its content as a floating point number.", "example": "_number = parseNumber \"0.125\"; //\u00a00.125 _number = parseNumber \"0050\"; //\u00a050 _number = parseNumber \" 42 yes\"; //\u00a042 _number = parseNumber \"3 or 4\"; //\u00a03 _number = parseNumber \"either 3 or 4\"; //\u00a00 _number = parseNumber \"0xCF\"; //\u00a00", "docSyntax": "parseNumber value", "syntax": "parseNumber <scalar>"}, "parseSimpleArray": {"version": "CMD", "tags": "", "description": "Converts given, formatted as simple array, String into a valid Array. Simple array is array consisting of Numbers, Strings, Booleans and Arrays of all of the above. This command is almost 4\u00d7 faster than similar uncached call compile method. And because call compile is not required, it is also more secure and primarily intended for use with callExtension to parse the String output into Array.", "example": "private _arr = parseSimpleArray \"[1,2,3]\";", "docSyntax": "parseSimpleArray stringArray", "syntax": "parseSimpleArray stringArray"}, "parseText": {"version": "CMD", "tags": "", "description": "Creates a structured text by parsing the given XML description. Do not use parseText when displaying a localized text from Stringtable.xml.", "example": "private _Stxt = parseText \"First line<img image='data\\isniper.paa'/><br/>Second line\";", "docSyntax": "parseText text", "syntax": "parseText <string>"}, "parsingNamespace": {"version": "CMD", "tags": "", "description": "Returns the global namespace attached to config parser.", "example": "parsingNamespace setVariable [\"var1\", 101.23124]; _profVar1 = parsingNamespace getVariable \"var1\";", "docSyntax": "parsingNamespace", "syntax": "parsingNamespace"}, "particlesQuality": {"version": "CMD", "tags": "", "description": "Returns current user settings for particles quality (configure->video->general->particles). 0-low, 1-normal, 2-high", "example": "_currentQuality = particlesQuality;", "docSyntax": "particlesQuality", "syntax": "particlesQuality"}, "periscopeElevation": {"version": "CMD", "tags": "", "description": "Returns current periscope elevation value, see also elevatePeriscope.", "example": "_eddie periscopeElevation [0] params [\"_elevation\", \"_isLocked\"];", "docSyntax": "vehicle periscopeElevation turretPath", "syntax": "<objVehicle> periscopeElevation turretPath"}, "pi": {"version": "CMD", "tags": "", "description": "pi (180 degrees converted to Radians).", "example": "_radians = 2 * pi; //\u00a0Result is 6.2830", "docSyntax": "pi", "syntax": "pi"}, "pickWeaponPool": {"version": "CMD", "tags": "", "description": "Transfers weapons and magazines from cargo of object into the weapon pool. This is used in the campaign to transfer weapons into the next mission.", "example": "pickWeaponPool vehicle player;", "docSyntax": "pickWeaponPool object", "syntax": "pickWeaponPool <object>"}, "pitch": {"version": "CMD", "tags": "", "description": "Returns the pitch of a persons voice.", "example": "pitch player;", "docSyntax": "pitch person", "syntax": "pitch <objUnit>"}, "pixelGrid": {"version": "CMD", "tags": "", "description": "Returns grid size based on screen resolution, UI size and configs: uiScaleFactor, uiScaleMaxGrids.", "example": "_gridHeight = pixelH * pixelGrid;", "docSyntax": "pixelGrid", "syntax": "pixelGrid"}, "pixelGridBase": {"version": "CMD", "tags": "", "description": "Returns grid size based on screen resolution.", "example": "_gridBaseHeight = pixelH * pixelGridBase;", "docSyntax": "pixelGridBase", "syntax": "pixelGridBase"}, "pixelGridNoUIScale": {"version": "CMD", "tags": "", "description": "Returns grid size based on screen resolution and configs: uiScaleFactor, uiScaleMaxGrids. As mentioned in the name of this command, the user interface scale is ignored.", "example": "_gridHeightNoUIScale = pixelH * pixelGridNoUIScale;", "docSyntax": "pixelGridNoUIScale", "syntax": "pixelGridNoUIScale"}, "pixelH": {"version": "CMD", "tags": "", "description": "Returns the height of one pixel for current resolution.", "example": "_pixelHeight = pixelH;", "docSyntax": "pixelH", "syntax": "pixelH"}, "pixelW": {"version": "CMD", "tags": "", "description": "Returns width of one pixel for current resolution.", "example": "_pixelWidth = pixelW;", "docSyntax": "pixelW", "syntax": "pixelW"}, "playableSlotsNumber": {"version": "CMD", "tags": "", "description": "Returns the number of available slots in mission per side (both empty and taken).", "example": "_maxBluforPlayers = playableSlotsNumber blufor;", "docSyntax": "playableSlotsNumber side", "syntax": "playableSlotsNumber <objSide>"}, "playableUnits": {"version": "CMD", "tags": "", "description": "Returns a list of playable units in a multiplayer game (occupied by both AI or players), created on the following sides east/opfor, west/blufor, resistance/independent and civilian only. Does not contain units of sideLogic.", "example": "{ _x groupChat \"I'm a playable unit.\"; } forEach playableUnits;", "docSyntax": "playableUnits", "syntax": "playableUnits"}, "playAction": {"version": "CMD", "tags": "", "description": "When used on a person, a smooth transition to the given action will be initiated.", "example": "soldierOne playAction \"SitDown\";", "docSyntax": "soldier playAction action", "syntax": "soldier playAction action"}, "playActionNow": {"version": "CMD", "tags": "", "description": "When used on a person, a smooth transition to the given action will be initiated, but all previous playAction are discarded.", "example": "soldierOne playActionNow \"SitDown\";", "docSyntax": "soldier playActionNow action", "syntax": "soldier playActionNow action"}, "playerRespawnTime": {"version": "CMD", "tags": "", "description": "Return the player's remaining time before respawn, or -1 if it is not available (such as when the player is alive).", "example": "waitUntil { playerRespawnTime <= 0 };", "docSyntax": "playerRespawnTime", "syntax": "playerRespawnTime"}, "playerSide": {"version": "CMD", "tags": "", "description": "Returns the player's side. This is valid even when the player controlled person is dead (a difference from side player).", "example": "if (side man1 == playerSide) then { hint \"man1 is on your side!\"; };", "docSyntax": "playerSide", "syntax": "playerSide"}, "playersNumber": {"version": "CMD", "tags": "", "description": "Returns count of occupied role selection slots for given side. Players who claimed a slot in the lobby but did not start the mission are counted as well. If disabledAI = 0; in description.ext or Enable AI option is checked in Eden Editor, AI bots will be treated as valid players and will be counted too.", "example": "_west = playersNumber west; _east = playersNumber east; _civ = playersNumber civilian; hint format [\"West:%1 East:%2, Civ:%3\", _west, _east, _civ];", "docSyntax": "playersNumber side", "syntax": "playersNumber <objSide>"}, "playerTargetLock": {"version": "CMD", "tags": "", "description": "Get the local player's current locked target (with weapons that can lock on).", "example": "playerTargetLock params [\"_target\", \"_lock\", \"_cfg\"]; if (_lock == 1) then { hint format [\"%1 locked %2\", getText (_cfg >> \"displayName\"), getText (configOf _target >> \"displayName\")]; };", "docSyntax": "playerTargetLock", "syntax": "playerTargetLock"}, "playGesture": {"version": "CMD", "tags": "", "description": "When used on a person,a smooth transition to the given move will be initiated. Command doesn't seem to be functional", "example": "soldierOne playGesture \"Wave\";", "docSyntax": "soldier playGesture moveName", "syntax": "soldier playGesture moveName"}, "playMission": {"version": "CMD", "tags": "", "description": "The mission is launched (from the main menu).", "example": "playMission [\"XOutrage\",\"x05Negotiator.Noe\"];", "docSyntax": "playMission [campaign, mission, skipBriefing]", "syntax": "playMission [campaign,mission,skipBriefing]"}, "playMove": {"version": "CMD", "tags": "", "description": "When used on a person, smooth transition to given move will be done.", "example": "soldierOne playMove \"Stand\";", "docSyntax": "unitName playMove moveName", "syntax": "<objUnit> playMove moveName"}, "playMoveNow": {"version": "CMD", "tags": "", "description": "When used on a person,a smooth transition to the given move will be initiated, but all previous playMove are discarded.", "example": "player playMoveNow \"AmovPercMevaSlowWrflDf\";", "docSyntax": "soldier playMoveNow moveName", "syntax": "soldier playMoveNow moveName"}, "playMusic": {"version": "CMD", "tags": "", "description": "Plays music defined in Description.ext's CfgMusic or config.cpp. If the musicName could not be found a message is logged into the .rpt file: Music <musicName> not found.", "example": "playMusic \"RadioAmbient1\";", "docSyntax": "playMusic musicName", "syntax": "playMusic musicName"}, "playScriptedMission": {"version": "CMD", "tags": "", "description": "Load the given world, launch an empty mission, and execute the given expression. If provided, config can reference to the config entry, replacing Description.ext for this mission.", "example": "playScriptedMission [ \"desert_e\", { execVM \"\\ca\\missions_e\\data\\scenes\\credits1\\init.sqf\"; }, configFile / \"CfgMissions\" / \"Cutscenes\" / \"Credits\" ];", "docSyntax": "playScriptedMission [world, expression, config, ignoreChildWindow]", "syntax": "playScriptedMission [world,expression,config,ignoreChildWindow]"}, "playSound": {"version": "CMD", "tags": "", "description": "Plays a sound from CfgSounds. Sound can be defined in missionConfigFile, configFile or campaignConfigFile.", "example": "playSound \"soundname\";", "docSyntax": "playSound soundName", "syntax": "playSound <string>"}, "playSound3D": {"version": "CMD", "tags": "", "description": "Plays positional sound with given filename on every computer on network.", "example": "playSound3D [\"A3\\Sounds_F\\sfx\\blip1.wss\", player];", "docSyntax": "playSound3D [filename, soundSource, isInside, soundPosition, volume, soundPitch, distance, offset, local]", "syntax": "playSound3D [filename,soundSource,isInside,soundPosition,volume,soundPitch,<scalar>,offset,local]"}, "playSoundUI": {"version": "CMD", "tags": "", "description": "Plays given CfgSounds sound or a sound file given by file path through a dedicated UI sound channel unaffected by the global mixer volumes. If the file path is given, the leading slash will be ignored.", "example": "playSoundUI [\"Alarm\", 0.5, 0.5];", "docSyntax": "playSoundUI [sound, volume, soundPitch, isEffect, offset]", "syntax": "playSoundUI [sound,volume,soundPitch,isEffect,offset]"}, "pose": {"version": "CMD", "tags": "", "description": "Returns the pose of the given unit.", "example": "if (pose player == \"SurfaceSwimming\") then { hint \"How's water?\" };", "docSyntax": "pose unit", "syntax": "pose <objUnit>"}, "position": {"version": "CMD", "tags": "", "description": "Returns position of an object (alias of getPos) or location (alias of locationPosition).", "example": "private _pos = position player;", "docSyntax": "position object", "syntax": "position <object>"}, "positionCameraToWorld": {"version": "CMD", "tags": "", "description": "Transforms position from camera coordinate space to world coordinate space. Camera axes are relative to camera orientation. x axis goes from left of the camera to right of the camera, z axis goes from underneath the camera to above the camera and y axis goes from back of the camera to where the camera is looking.", "example": "_worldPos = positionCameraToWorld _cameraPos;", "docSyntax": "positionCameraToWorld cameraPos", "syntax": "positionCameraToWorld cameraPos"}, "posScreenToWorld": {"version": "CMD", "tags": "", "description": "Converts map screen coordinates into world coordinates. Unlike ctrlMapScreenToWorld, this command returns world position is format [x, y, 0], otherwise it is identical to it.", "example": "_worldCoord = _control posScreenToWorld _ScreenCoord;", "docSyntax": "map posScreenToWorld [x, y]", "syntax": "<objMap> posScreenToWorld [x,y]"}, "posWorldToScreen": {"version": "CMD", "tags": "", "description": "Converts world coordinates into map screen coordinates. This command is identical to ctrlMapWorldToScreen.", "example": "_screenCoord = _control posWorldToScreen _worldCoord;", "docSyntax": "map posWorldToScreen position", "syntax": "<objMap> posWorldToScreen position"}, "ppEffectAdjust": {"version": "CMD", "tags": "", "description": "Set post process effect parameters.", "example": "\"colorCorrections\" ppEffectAdjust [1, 1, -0.01, [0, 0, 0, 0], [1.5, 1, 1.2, 0.6], [0.199, 0.587, 0.114, 0]];", "docSyntax": "effect ppEffectAdjust settings", "syntax": "effect ppEffectAdjust settings"}, "ppEffectCommit": {"version": "CMD", "tags": "", "description": "Commit post process effect in given time.", "example": "\"colorCorrection\" ppEffectCommit 3;", "docSyntax": "effect ppEffectCommit commit", "syntax": "effect ppEffectCommit commit"}, "ppEffectCommitted": {"version": "CMD", "tags": "", "description": "Check whether given post process effect is committed.", "example": "ppEffectCommitted \"colorCorrection\";", "docSyntax": "ppEffectCommitted effect", "syntax": "ppEffectCommitted effect"}, "ppEffectCreate": {"version": "CMD", "tags": "", "description": "Creates Post Process Effects specified by effect name and priority.", "example": "_ppGrain = ppEffectCreate [\"filmGrain\", 2005];", "docSyntax": "ppEffectCreate [name, priority]", "syntax": "ppEffectCreate [<string>,priority]"}, "ppEffectDestroy": {"version": "CMD", "tags": "", "description": "Destroy Post Process Effects given by handle or array of handles.", "example": "ppEffectDestroy _hndl;", "docSyntax": "ppEffectDestroy effect", "syntax": "ppEffectDestroy effect"}, "ppEffectEnable": {"version": "CMD", "tags": "", "description": "Enable / disable Post Process Effects", "example": "\"colorCorrections\" ppEffectEnable true;", "docSyntax": "effect ppEffectEnable enable", "syntax": "effect ppEffectEnable <bool>"}, "ppEffectEnabled": {"version": "CMD", "tags": "", "description": "Checks whether given post process effect is enabled", "example": "_enabled = ppEffectEnabled _hndl;", "docSyntax": "ppEffectEnabled effect", "syntax": "ppEffectEnabled effect"}, "ppEffectForceInNVG": {"version": "CMD", "tags": "", "description": "Forces use of Post Process Effects in NVG.", "example": "_ppGrain ppEffectForceInNVG true;", "docSyntax": "ppHandle ppEffectForceInNVG force", "syntax": "ppHandle ppEffectForceInNVG force"}, "precision": {"version": "CMD", "tags": "", "description": "Return the movement precision of the given entity, how is the entity able to be precise when moving to given target.", "example": "//\u00a0used in formationCDanger.fsm if (getPosATL _this distance _dangerPos <= precision _this) then { /* ... */ };", "docSyntax": "precision entity", "syntax": "precision entity"}, "preloadCamera": {"version": "CMD", "tags": "", "description": "Preload all textures and models around given Position to avoid visual artifacts after camera is moved. Should be used before any abrupt camera change/cut. Returns true once all data is ready. See camPreload for alternative, more flexible camera preloading.", "example": "waitUntil {preloadCamera markerPos \"cam_location_2\"};", "docSyntax": "preloadCamera position", "syntax": "preloadCamera position"}, "preloadObject": {"version": "CMD", "tags": "", "description": "Preloads all textures, materials and proxies needed to render given object. Works with objects and classnames - note that classnames require an object instance in the mission.", "example": "[] spawn { waitUntil { 10 preloadObject \"SoldierW\" }; hint \"Preload finished\"; };", "docSyntax": "distance preloadObject object", "syntax": "<scalar> preloadObject <object>"}, "preloadSound": {"version": "CMD", "tags": "", "description": "Makes sure that a sound can start playing without any delay once it is needed. Command works in Arma 3, but might not be implemented in earlier Arma installments.", "example": "{ waitUntil {preloadSound _x}; } forEach getArray (missionConfigFile >> \"CfgSounds\" >> \"sounds\");", "docSyntax": "preloadSound soundName", "syntax": "preloadSound <string>"}, "preloadTitleObj": {"version": "CMD", "tags": "", "description": "Preloads data for the given resource object.", "example": "_ok = preloadTitleObj [\"BISLogo\", \"PLAIN\"];", "docSyntax": "preloadTitleObj [name, type, speed, showInMap]", "syntax": "preloadTitleObj [<string>,type,<scalar>,showInMap]"}, "preloadTitleRsc": {"version": "CMD", "tags": "", "description": "Resource title - preload data. The resource can be defined in the Description.ext file.", "example": "_ok = preloadTitleRsc [\"BIS\", \"PLAIN\"];", "docSyntax": "preloadTitleRsc [name, type, speed, showInMap]", "syntax": "preloadTitleRsc [<string>,type,<scalar>,showInMap]"}, "preprocessFile": {"version": "CMD", "tags": "", "description": "Reads and processes the content of the specified file. Preprocessor is C-like, supports comments using // or /* and */ and PreProcessor Commands. Due to the hard-drive access this command executes and the lack of caching this command should not be used in time-critical script loops.", "example": "_content = preprocessFile \"myFunction.sqf\";", "docSyntax": "preprocessFile fileName", "syntax": "preprocessFile fileName"}, "preprocessFileLineNumbers": {"version": "CMD", "tags": "", "description": "Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using /* */ and PreProcessor Commands. The preprocessor also adds a default debug entrypoint for compiler at the begining of script: #line 1 \"aFilename\"", "example": "_string = preprocessFileLineNumbers \"A3\\ui_f\\scripts\\IGUI\\RscUnitInfo.sqf\"", "docSyntax": "preprocessFileLineNumbers fileName", "syntax": "preprocessFileLineNumbers fileName"}, "primaryWeapon": {"version": "CMD", "tags": "", "description": "Returns name of unit's primary weapon. This command will also return a weapon class name if the weapon is not used by the player, for example, it is on the unit's back. Use currentWeapon to get the weapon the unit is using.", "example": "_pWeap = primaryWeapon player;", "docSyntax": "primaryWeapon unit", "syntax": "primaryWeapon <objUnit>"}, "primaryWeaponItems": {"version": "CMD", "tags": "", "description": "Returns array with all items assigned to the primaryWeapon except magazines. Use primaryWeaponMagazine command for the latter. This command is used for infantry weapons only.", "example": "primaryWeaponItems player; /* [ \"muzzle_snds_H\", // silencer \"acc_pointer_IR\", // laser \"optic_Aco\", // optics \"bipod_01_F_blk\" // bipod ] */", "docSyntax": "primaryWeaponItems unit", "syntax": "primaryWeaponItems <objUnit>"}, "primaryWeaponMagazine": {"version": "CMD", "tags": "", "description": "Collects all loaded magazines from all primaryWeapon muzzles and returns them in Array, otherwise it returns []. This command is used for infantry weapons only.", "example": "hint str primaryWeaponMagazine player; //[\"30Rnd_65x39_caseless_mag\"]", "docSyntax": "primaryWeaponMagazine unit", "syntax": "primaryWeaponMagazine <objUnit>"}, "priority": {"version": "CMD", "tags": "", "description": "Return the priority of the task.", "example": "_prioTsk01 = priority task01;", "docSyntax": "priority task", "syntax": "priority <objTask>"}, "processDiaryLink": {"version": "CMD", "tags": "", "description": "Opens the Diary screen on the subject/record specified by link. To get a valid link format, use createDiaryLink.", "example": "processDiaryLink createDiaryLink [\"Tasks\", (simpleTasks player) select 0, \"\"]; //\u00a0Select a task in the Task menu", "docSyntax": "processDiaryLink link", "syntax": "processDiaryLink link"}, "productVersion": {"version": "CMD", "tags": "", "description": "Returns the product's friendly name, identifier, version and build number.", "example": "hint str productVersion; //\u00a0would return [\"Arma 2 OA\", \"arma2oa\", 162, 95208] on Arma 2 OA 1.62.95208", "docSyntax": "productVersion", "syntax": "productVersion"}, "profileName": {"version": "CMD", "tags": "", "description": "Returns currently chosen user profile name. For Steam profile name see profileNameSteam.", "example": "_myInGameProfileName = profileName;", "docSyntax": "profileName", "syntax": "profileName"}, "profileNamespace": {"version": "CMD", "tags": "", "description": "Returns the global namespace attached to the active user profile. Use setVariable and getVariable to save and load data to and from this Namespace. A variable can be deleted by setting its value to nil. By default the variables set in this namespace will exist while the game is running, and variables are saved persistently when the game is closed. Saving can also be forced by using saveProfileNamespace to prevent data loss on e.g game crash.", "example": "profileNamespace setVariable [\"TAG_kills\", 10000]; //\u00a0somewhere else in the code _kills = profileNamespace getVariable [\"TAG_kills\", 0];", "docSyntax": "profileNamespace", "syntax": "profileNamespace"}, "profileNameSteam": {"version": "CMD", "tags": "", "description": "Returns name of the current Steam profile. For currently chosen user profile name see profileName", "example": "_mySteamProfileName = profileNameSteam;", "docSyntax": "profileNameSteam", "syntax": "profileNameSteam"}, "progressLoadingScreen": {"version": "CMD", "tags": "", "description": "If loading screen is shown, sets progress bar to the given value (interval is from 0 to 1])", "example": "startLoadingScreen [\"Loading My Mission\"]; // //\u00a0batch of code // progressLoadingScreen 0.25; // //\u00a0batch of code // progressLoadingScreen 0.50; // //\u00a0batch of code // progressLoadingScreen 0.95; // //\u00a0batch of code // endLoadingScreen;", "docSyntax": "progressLoadingScreen progress", "syntax": "progressLoadingScreen progress"}, "progressPosition": {"version": "CMD", "tags": "", "description": "Returns the current position in the progress bar.", "example": "_progress = progressPosition _control;", "docSyntax": "progressPosition control", "syntax": "progressPosition <uiControl>"}, "progressSetPosition": {"version": "CMD", "tags": "", "description": "Sets progress position of a progress bar.", "example": "_control progressSetPosition 0.5;", "docSyntax": "control progressSetPosition progress", "syntax": "<uiControl> progressSetPosition progress"}, "publicVariable": {"version": "CMD", "tags": "", "description": "Reliably broadcasts missionNamespace variable and its current value to all computers (server/client).", "example": "TAG_MyPublicVariable = 0; TAG_MyPublicVariable = 1; publicVariable \"TAG_MyPublicVariable\"; //\u00a0other clients will receive the \"TAG_MyPublicVariable\" variable with a 1 value TAG_MyPublicVariable = 2; //\u00a0needs to be broadcast again - synchronisation is not automatic", "docSyntax": "publicVariable varName", "syntax": "publicVariable varName"}, "publicVariableClient": {"version": "CMD", "tags": "", "description": "Send the variable value to the client computer - same limitations regarding variable type as publicVariable. The Client ID is the temporary ID given to a connected client for that session. You can find out this ID with the owner command (using it on a player's character, for example, will give you that players client ID).", "example": "3 publicVariableClient \"CTFscoreOne\";", "docSyntax": "clientID publicVariableClient varName", "syntax": "clientID publicVariableClient varName"}, "publicVariableServer": {"version": "CMD", "tags": "", "description": "Send the variable value to the server - same limitations regarding variable type as publicVariable.", "example": "publicVariableServer \"CTFscoreOne\";", "docSyntax": "publicVariableServer varName", "syntax": "publicVariableServer varName"}, "pushBack": {"version": "CMD", "tags": "", "description": "Insert an element to the back of the given array. This command modifies the original array. (see also: pushBackUnique)", "example": "_arr = [1,2,3]; _arr pushBack 4; hint str _arr; //[1,2,3,4]", "docSyntax": "array pushBack element", "syntax": "<array> pushBack element"}, "pushBackUnique": {"version": "CMD", "tags": "", "description": "Adds element to the back of the given array but only if it is unique to the array. The index of the added element is returned upon success, otherwise -1. This command modifies the original array.", "example": "_arr = [1,2,3]; _index = _arr pushBackUnique 3; hint str [_index, _arr]; //\u00a0[-1,[1,2,3]]", "docSyntax": "array pushBackUnique element", "syntax": "<array> pushBackUnique element"}, "putWeaponPool": {"version": "CMD", "tags": "", "description": "Transfers weapons and magazines from weapon pool into cargo of given object. Used in campaign to transfer weapons into next mission.", "example": "putWeaponPool player;", "docSyntax": "putWeaponPool object", "syntax": "putWeaponPool <object>"}, "queryItemsPool": {"version": "CMD", "tags": "", "description": "Returns the number of items of type in the weapon pool (used in campaigns to transfer weapons to the next mission).", "example": "private _amountOfFAKgiven = queryItemsPool \"FirstAidKit\";", "docSyntax": "queryItemsPool name", "syntax": "queryItemsPool <string>"}, "queryMagazinePool": {"version": "CMD", "tags": "", "description": "Return number of magazines of type name in magazine pool (used in campaign to transfer magazines into next mission).", "example": "_num = queryMagazinePool \"M16\";", "docSyntax": "queryMagazinePool name", "syntax": "queryMagazinePool <string>"}, "queryWeaponPool": {"version": "CMD", "tags": "", "description": "Return number of weapons of type name in weapon pool (used in campaign to transfer weapons into next mission).", "example": "_num = queryWeaponPool \"M16\";", "docSyntax": "queryWeaponPool name", "syntax": "queryWeaponPool <string>"}, "rad": {"version": "CMD", "tags": "", "description": "Converts given value in degrees to radians. 1 radian equals 180 degrees divided by pi.", "example": "_radians = rad 180; //\u00a0returns 3.1415 (pi)", "docSyntax": "rad value", "syntax": "rad <scalar>"}, "radioChannelAdd": {"version": "CMD", "tags": "", "description": "Add the units to the custom channel.", "example": "2 radioChannelAdd [player, unit1];", "docSyntax": "customChannelID radioChannelAdd units", "syntax": "customChannelID radioChannelAdd units"}, "radioChannelCreate": {"version": "CMD", "tags": "", "description": "Create a custom radio channel with the given color, label, call sign and registered characters. The custom channel ID returned can be used to manipulate the created channel later. There are 10 slots for custom radio channels which would correspond to channels 6-15 (see getPlayerChannel). The command will find an unused index in this range and create it when found.", "example": "_channelID = radioChannelCreate [[0.96, 0.34, 0.13, 0.8], \"Q-dance Radio\", \"%UNIT_NAME\", [player1, player2]];", "docSyntax": "radioChannelCreate [color, label, callSign, units, sentenceType]", "syntax": "radioChannelCreate [<scalar>,label,callSign,units,sentenceType]"}, "radioChannelInfo": {"version": "CMD", "tags": "", "description": "Obtains custom radio channel's details, set by radioChannelCreate.", "example": "private _channelID = radioChannelCreate [[1, 0, 0.5, 0.8], \"Q-dance Radio\", \"%UNIT_NAME\", [u1, u2], false]; radioChannelInfo _channelID; //\u00a0returns [[1,0,0.5,0.8], \"Q-dance Radio\", \"%UNIT_NAME\", [u1, u2], false, true]", "docSyntax": "radioChannelInfo customChannelID", "syntax": "radioChannelInfo customChannelID"}, "radioChannelRemove": {"version": "CMD", "tags": "", "description": "Remove the units from the custom radio channel.", "example": "3 radioChannelRemove [blufor_unit_1, blufor_unit_2];", "docSyntax": "customChannelID radioChannelRemove units", "syntax": "customChannelID radioChannelRemove units"}, "radioChannelSetCallSign": {"version": "CMD", "tags": "", "description": "Set the custom radio channel's call sign. Available special parameters:", "example": "4 radioChannelSetCallSign \"%UNIT_NAME\";", "docSyntax": "customChannelID radioChannelSetCallSign callSign", "syntax": "customChannelID radioChannelSetCallSign callSign"}, "radioChannelSetLabel": {"version": "CMD", "tags": "", "description": "Set the custom radio channel's label.", "example": "5 radioChannelSetLabel \"Q-dance Radio\";", "docSyntax": "customChannelID radioChannelSetLabel label", "syntax": "customChannelID radioChannelSetLabel label"}, "radioEnabled": {"version": "CMD", "tags": "", "description": "A getter for enableRadio.", "example": "if (radioEnabled) then { enableRadio false };", "docSyntax": "radioEnabled", "syntax": "radioEnabled"}, "radioVolume": {"version": "CMD", "tags": "", "description": "Returns the current radio volume (set by fadeRadio).", "example": "hint str radioVolume;", "docSyntax": "radioVolume", "syntax": "radioVolume"}, "rain": {"version": "CMD", "tags": "", "description": "Returns the current value of rain density.", "example": "_rainLevel = rain;", "docSyntax": "rain", "syntax": "rain"}, "rainbow": {"version": "CMD", "tags": "", "description": "Returns the current rainbow intensity.", "example": "private _intensity = rainbow;", "docSyntax": "rainbow", "syntax": "rainbow"}, "rainParams": {"version": "CMD", "tags": "", "description": "Returns currently set RainParticles params, custom or default.", "example": "private _rainParams = rainParams;", "docSyntax": "rainParams", "syntax": "rainParams"}, "random": {"version": "CMD", "tags": "", "description": "Syntax\u00a02's distribution", "example": "_rNumber = random 1;", "docSyntax": "random x", "syntax": "random x"}, "rank": {"version": "CMD", "tags": "", "description": "Returns the rank of the given unit. Rank can be one of the following:", "example": "_rank = rank player;", "docSyntax": "rank unit", "syntax": "rank <objUnit>"}, "rankId": {"version": "CMD", "tags": "", "description": "Return the rank of the given unit for comparison. Value may be:", "example": "_myIdRank = rankId player;", "docSyntax": "rankId unit", "syntax": "rankId <objUnit>"}, "rating": {"version": "CMD", "tags": "", "description": "Check unit rating. Rating is increased for killing enemies, decreased for killing friendlies (see Rating Values). Can be changed via addRating by the mission designer. The rating of the player is displayed as the \"score\" at the end of the mission. Via Description.ext one can define how many points it takes to get a perfect score, as well as the number of stars.", "example": "_score = rating player;", "docSyntax": "rating unitName", "syntax": "rating <objUnit>"}, "rectangular": {"version": "CMD", "tags": "", "description": "Checks if a location is rectangular (returns true) or elliptical (returns false).", "example": "_isRect = rectangular myLocation;", "docSyntax": "rectangular location", "syntax": "rectangular location"}, "regexFind": {"version": "CMD", "tags": "", "description": "Searches in a string with a regular expression.", "example": "\"wooKie boOkie cookie\" regexFind [\".ookie/gio\"]; //\u00a0[[[\"wooKie\", 0]], \"boOkie\", 7, \"cookie\", 14]", "docSyntax": "haystack regexFind [pattern, startOffset]", "syntax": "haystack regexFind [pattern,startOffset]"}, "regexMatch": {"version": "CMD", "tags": "", "description": "Returns whether the haystack matches the pattern.", "example": "\"I'm a coOkIe clicker\" regexMatch \".*cookie.*\"; //\u00a0true", "docSyntax": "haystack regexMatch pattern", "syntax": "haystack regexMatch pattern"}, "regexReplace": {"version": "CMD", "tags": "", "description": "Searches given haystack with given pattern and replaces all matches with given replaceString.", "example": "\"wookie boOkie cookie\" regexReplace [\".oo/gio\", \"[$']\"]; //\u00a0\"[kie boOkie cookie]kie [kie cookie]kie [kie]kie\"", "docSyntax": "haystack regexReplace [pattern, replaceString]", "syntax": "haystack regexReplace [pattern,replaceString]"}, "registeredTasks": {"version": "CMD", "tags": "", "description": "Returns array with all registered task types for the given agent. The values are the names set in CfgTasks classes name property. The same names are used for unregisterTask", "example": "tasklist = registeredTasks teamMember _agent;", "docSyntax": "registeredTasks teamMember", "syntax": "registeredTasks teamMember"}, "registerTask": {"version": "CMD", "tags": "", "description": "Registers a new task type. Parameters are defined in the given config class (subclass of CfgTasks)", "example": "teamMember _agent registerTask \"MyTask\";", "docSyntax": "teamMember registerTask entryName", "syntax": "teamMember registerTask entryName"}, "reload": {"version": "CMD", "tags": "", "description": "Main syntax: Reload first found muzzle that needs reloading (with some inconsistencies).", "example": "if (needReload player == 1) then { reload player };", "docSyntax": "reload unitName", "syntax": "reload <objUnit>"}, "reloadEnabled": {"version": "CMD", "tags": "", "description": "Check whether magazine is reloaded whenever emptied.", "example": "private _canReload = reloadEnabled _unit1;", "docSyntax": "reloadEnabled unitName", "syntax": "reloadEnabled <objUnit>"}, "remoteControl": {"version": "CMD", "tags": "", "description": "Switches on remote control of the unit. The command was GAGlobal prior to 2.14). For more info see Remote Control Tutorial. If the drone is remote it will get transferred to the player's PC.", "example": "Set player remote control of driver:", "docSyntax": "who remoteControl whom", "syntax": "who remoteControl whom"}, "remoteControlled": {"version": "CMD", "tags": "", "description": "Returns the player controlling the given unit if the argument is the unit, or the unit controlled by the player if the argument is the player.", "example": "private _controllingPlayer = remoteControlled _dronePilot;", "docSyntax": "remoteControlled unitOrPlayer", "syntax": "remoteControlled unitOrPlayer"}, "remoteExec": {"version": "CMD", "tags": "", "description": "Asks the server to execute the given function or script command on the given target machine(s).", "example": "How to write remoteExec/remoteExecCall: hint \"Hello\"; //\u00a0becomes [\"Hello\"] remoteExec [\"hint\"]; \"Hello\" remoteExec [\"hint\"]; //\u00a0alternatively unit1 setFace \"Miller\"; //\u00a0becomes [unit1, \"Miller\"] remoteExec [\"setFace\"]; cutRsc [\"\", \"BLACK OUT\"]; //\u00a0becomes [[\"\", \"BLACK OUT\"]] remoteExec [\"cutRsc\"]; //\u00a0double brackets are needed as the unary command takes an array //\u00a0functions, however, do not need double squared brackets [\"line 1\", \"line 2\"] spawn BIS_fnc_infoText; //\u00a0becomes [\"line 1\", \"line 2\"] remoteExec [\"BIS_fnc_infoText\"];", "docSyntax": "params remoteExec [order, targets, JIP]", "syntax": "<any> remoteExec [<scalar>,targets,JIP]"}, "remoteExecCall": {"version": "CMD", "tags": "", "description": "Unscheduled version of remoteExec. The only difference between remoteExec and remoteExecCall is that remoteExecCall will run functions in unscheduled environment.", "example": "[\"hello\"] remoteExec [\"hint\"]; //\u00a0runs unscheduled [\"hello\"] remoteExecCall [\"hint\"]; //\u00a0no difference at all", "docSyntax": "see remoteExec", "syntax": "see remoteExec"}, "remoteExecutedOwner": {"version": "CMD", "tags": "", "description": "Returns the machine network ID of the client that initiated Remote Execution.", "example": "private _callerRE = remoteExecutedOwner;", "docSyntax": "remoteExecutedOwner", "syntax": "remoteExecutedOwner"}, "remove3DENConnection": {"version": "CMD", "tags": "", "description": "Removes connection between entities.", "example": "remove3DENConnection [\"RandomStart\", get3DENSelected \"Object\", \"marker_0\"];//\u00a0Remove random start on marker \"marker_0\" from all selected objects.", "docSyntax": "remove3DENConnection [type, from, to]", "syntax": "remove3DENConnection [type,from,to]"}, "remove3DENEventHandler": {"version": "CMD", "tags": "", "description": "Removes Eden Editor event handler of given type and ID.", "example": "eh = add3DENEventHandler [\"onUndo\",{systemChat \"Zip...\"}]; remove3DENEventHandler [\"onUndo\",eh];", "docSyntax": "remove3DENEventHandler [type,id]", "syntax": "remove3DENEventHandler [type,<scalar>]"}, "remove3DENLayer": {"version": "CMD", "tags": "", "description": "Remove Eden Editor editing layer.", "example": "private _myLayer = -1 add3DENLayer \"Enemy Base\"; remove3DENLayer _myLayer;", "docSyntax": "remove3DENLayer layerID", "syntax": "remove3DENLayer layerID"}, "removeAction": {"version": "CMD", "tags": "", "description": "Removes user added action with given ID. This only removes actions added with the addAction command. You cannot remove default game actions, such as reload.", "example": "player removeAction 0;", "docSyntax": "unit removeAction actionID", "syntax": "<objUnit> removeAction actionID"}, "removeAll3DENEventHandlers": {"version": "CMD", "tags": "", "description": "Removes all Eden Editor event handlers of given type.", "example": "removeAll3DENEventHandlers \"onUndo\";", "docSyntax": "removeAll3DENEventHandlers type", "syntax": "removeAll3DENEventHandlers type"}, "removeAllActions": {"version": "CMD", "tags": "", "description": "Removes all unit's user added actions.", "example": "removeAllActions player;", "docSyntax": "removeAllActions obj", "syntax": "removeAllActions <object>"}, "removeAllAssignedItems": {"version": "CMD", "tags": "", "description": "Unassigns and deletes all linked items from inventory. The commands operates on assignedItems array, which does not include goggles or headgear but includes binoculars, which is a weapon.", "example": "removeAllAssignedItems player;", "docSyntax": "removeAllAssignedItems unit", "syntax": "removeAllAssignedItems <objUnit>"}, "removeAllBinocularItems": {"version": "CMD", "tags": "", "description": "Removes all items from binocular weapon, except magazine.", "example": "removeAllBinocularItems player;", "docSyntax": "removeAllBinocularItems unit", "syntax": "removeAllBinocularItems <objUnit>"}, "removeAllContainers": {"version": "CMD", "tags": "", "description": "Removes all containers (vest, uniform, backpack) from the provided unit.", "example": "removeAllContainers player;", "docSyntax": "removeAllContainers unit", "syntax": "removeAllContainers <objUnit>"}, "removeAllCuratorAddons": {"version": "CMD", "tags": "", "description": "Restrict access to all addons for given curator.", "example": "removeAllCuratorAddons myCurator;", "docSyntax": "removeAllCuratorAddons curatorObj", "syntax": "removeAllCuratorAddons <objCurator>"}, "removeAllCuratorCameraAreas": {"version": "CMD", "tags": "", "description": "Delete all curator camera areas.", "example": "removeAllCuratorCameraAreas myCurator;", "docSyntax": "removeAllCuratorCameraAreas curatorObj", "syntax": "removeAllCuratorCameraAreas <objCurator>"}, "removeAllCuratorEditingAreas": {"version": "CMD", "tags": "", "description": "Delete all curator edit areas.", "example": "removeAllCuratorEditingAreas myCurator;", "docSyntax": "removeAllCuratorEditingAreas curatorObj", "syntax": "removeAllCuratorEditingAreas <objCurator>"}, "removeAllEventHandlers": {"version": "CMD", "tags": "", "description": "Removes all event handlers of given type that were added by addEventHandler and resets event handler's creation index to 0.", "example": "player removeAllEventHandlers \"Killed\";", "docSyntax": "target removeAllEventHandlers handlerType", "syntax": "<object> removeAllEventHandlers handlerType"}, "removeAllHandgunItems": {"version": "CMD", "tags": "", "description": "Removes all items from handgunWeapon, except magazine.", "example": "removeAllHandgunItems player;", "docSyntax": "removeAllHandgunItems unit", "syntax": "removeAllHandgunItems <objUnit>"}, "removeAllItems": {"version": "CMD", "tags": "", "description": "Removes all special items from the unit.", "example": "removeAllItems unitName;", "docSyntax": "removeAllItems unit", "syntax": "removeAllItems <objUnit>"}, "removeAllItemsWithMagazines": {"version": "CMD", "tags": "", "description": "Removes all itemsWithMagazines from the uniform, vest and backpack. Command essentially clears all unit's containers.", "example": "removeAllItemsWithMagazines player;", "docSyntax": "removeAllItemsWithMagazines unit", "syntax": "removeAllItemsWithMagazines <objUnit>"}, "removeAllMissionEventHandlers": {"version": "CMD", "tags": "", "description": "Removes all mission event handlers of the given type which were added by addMissionEventHandler.", "example": "removeAllMissionEventHandlers \"Loaded\";", "docSyntax": "removeAllMissionEventHandlers type", "syntax": "removeAllMissionEventHandlers type"}, "removeAllMPEventHandlers": {"version": "CMD", "tags": "", "description": "Removes all MP event handlers of the given type which were added by addMPEventHandler. Command needs to be executed only on one PC for MP event handler to be removed globally.", "example": "player removeAllMPEventHandlers \"MPKilled\";", "docSyntax": "objectName removeAllMPEventHandlers event", "syntax": "objectName removeAllMPEventHandlers event"}, "removeAllMusicEventHandlers": {"version": "CMD", "tags": "", "description": "Removes all music track event handlers of given type.", "example": "removeAllMusicEventHandlers \"MusicStart\";", "docSyntax": "removeAllMusicEventHandlers type", "syntax": "removeAllMusicEventHandlers type"}, "removeAllOwnedMines": {"version": "CMD", "tags": "", "description": "Removes ownership of all owned mines/explosive devices of the given unit", "example": "removeAllOwnedMines player;", "docSyntax": "removeAllOwnedMines unit", "syntax": "removeAllOwnedMines <objUnit>"}, "removeAllPrimaryWeaponItems": {"version": "CMD", "tags": "", "description": "Removes all items from primaryWeapon, except magazine.", "example": "removeAllPrimaryWeaponItems player;", "docSyntax": "removeAllPrimaryWeaponItems unit", "syntax": "removeAllPrimaryWeaponItems <objUnit>"}, "removeAllSecondaryWeaponItems": {"version": "CMD", "tags": "", "description": "Removes all items from secondaryWeapon, except magazine.", "example": "removeAllSecondaryWeaponItems player;", "docSyntax": "removeAllSecondaryWeaponItems unit", "syntax": "removeAllSecondaryWeaponItems <objUnit>"}, "removeAllUserActionEventHandlers": {"version": "CMD", "tags": "", "description": "Removes all UserAction event handlers of the given type which were added by addUserActionEventHandler.", "example": "removeAllUserActionEventHandlers [\"Reload\", \"Activate\"];", "docSyntax": "removeAllUserActionEventHandlers [keyName, eventType]", "syntax": "removeAllUserActionEventHandlers [keyName,eventType]"}, "removeAllWeapons": {"version": "CMD", "tags": "", "description": "Removes all weapons and magazines from the given unit. Does not remove items like map, compass, radio (see removeWeapon for this).", "example": "removeAllWeapons player;", "docSyntax": "removeAllWeapons unitName", "syntax": "removeAllWeapons <objUnit>"}, "removeBackpack": {"version": "CMD", "tags": "", "description": "Removes unit's backpack", "example": "removeBackpack this;", "docSyntax": "removeBackpack unit", "syntax": "removeBackpack <objUnit>"}, "removeBackpackGlobal": {"version": "CMD", "tags": "", "description": "Removes backpack from a unit. (even non-local)", "example": "removeBackpackGlobal player;", "docSyntax": "removeBackpackGlobal unit", "syntax": "removeBackpackGlobal <objUnit>"}, "removeBinocularItem": {"version": "CMD", "tags": "", "description": "Removes given weapon item, including magazine, from the binocular weapon.", "example": "player removeBinocularItem \"Laserbatteries\";", "docSyntax": "unit removeBinocularItem item", "syntax": "<objUnit> removeBinocularItem <objItem>"}, "removeCuratorAddons": {"version": "CMD", "tags": "", "description": "Restrict curator use of given addons.", "example": "curatorModule removeCuratorAddons [addon1, addon2];", "docSyntax": "curatorObj removeCuratorAddons addons", "syntax": "<objCurator> removeCuratorAddons addons"}, "removeCuratorCameraArea": {"version": "CMD", "tags": "", "description": "Removes curator camera area.", "example": "myCurator removeCuratorCameraArea 3;", "docSyntax": "curatorObj removeCuratorCameraArea cameraAreaID", "syntax": "<objCurator> removeCuratorCameraArea cameraAreaID"}, "removeCuratorEditableObjects": {"version": "CMD", "tags": "", "description": "Unregister objects which can be edited by a curator.", "example": "curatorModule removeCuratorEditableObjects [[cursorTarget], true];", "docSyntax": "curatorObj removeCuratorEditableObjects [[objects], removeCrew]", "syntax": "<objCurator> removeCuratorEditableObjects [[objects],removeCrew]"}, "removeCuratorEditingArea": {"version": "CMD", "tags": "", "description": "Removes editing area for given curator.", "example": "myCurator removeCuratorEditingArea 3;", "docSyntax": "curatorObj removeCuratorEditingArea editAreaID", "syntax": "<objCurator> removeCuratorEditingArea editAreaID"}, "removeDiaryRecord": {"version": "CMD", "tags": "", "description": "Remove a log record.", "example": "private _diaryRecord = player createDiaryRecord [\"Diary\", [\"Subject\", \"Text\"]]; //\u00a0... player removeDiaryRecord [\"Diary\", _diaryRecord];", "docSyntax": "unit removeDiaryRecord [subject, diaryRecord]", "syntax": "<objUnit> removeDiaryRecord [<string>,diaryRecord]"}, "removeDiarySubject": {"version": "CMD", "tags": "", "description": "Removes a page and all its subjects from the Diary.", "example": "player removeDiarySubject \"myPage\";", "docSyntax": "player removeDiarySubject diaryPage", "syntax": "<objUnit> removeDiarySubject diaryPage"}, "removeDrawIcon": {"version": "CMD", "tags": "", "description": "Removes an icon for an editor object.", "example": "-", "docSyntax": "map removeDrawIcon [object,string identifier]", "syntax": "<objMap> removeDrawIcon [<object>,<string> identifier]"}, "removeDrawLinks": {"version": "CMD", "tags": "", "description": "Remove all drawn links for the given editor object for the given editor,object type. Pass an empty string as param type to remove all draw,links for an object.", "example": "-", "docSyntax": "map removeDrawLinks [from,param type]", "syntax": "<objMap> removeDrawLinks [from,param type]"}, "removeEventHandler": {"version": "CMD", "tags": "", "description": "Removes a given Event Handler that was added with addEventHandler.", "example": "player removeEventHandler [\"Killed\", 0];", "docSyntax": "target removeEventHandler [type, index]", "syntax": "<object> removeEventHandler [type,<scalar>]"}, "removeFromRemainsCollector": {"version": "CMD", "tags": "", "description": "Removes vehicles/units from the garbage collector, so they do not get deleted automatically; added earlier with addToRemainsCollector.", "example": "removeFromRemainsCollector [unit1, unit2, vehicle1];", "docSyntax": "removeFromRemainsCollector remains", "syntax": "removeFromRemainsCollector remains"}, "removeGoggles": {"version": "CMD", "tags": "", "description": "Removes goggles from unit (diver goggles for example). This command does not remove NVGoggles. Use unassignItem and removeItem or just unlinkItem for latter.", "example": "removeGoggles assaultDiver;", "docSyntax": "removeGoggles unit", "syntax": "removeGoggles <objUnit>"}, "removeGroupIcon": {"version": "CMD", "tags": "", "description": "Remove icon with given ID from group.", "example": "_target removeGroupIcon (_target getvariable \"hc_attackicon\");", "docSyntax": "group removeGroupIcon iconID", "syntax": "<objGroup> removeGroupIcon iconID"}, "removeHandgunItem": {"version": "CMD", "tags": "", "description": "Removes given weapon item, including magazine, from the handgunWeapon", "example": "player removeHandgunItem \"muzzle_snds_L\";", "docSyntax": "unit removeHandgunItem item", "syntax": "<objUnit> removeHandgunItem <objItem>"}, "removeHeadgear": {"version": "CMD", "tags": "", "description": "Removes headgear from a unit. If unit has no headgear command quietly fails.", "example": "removeHeadgear player;", "docSyntax": "removeHeadgear unit", "syntax": "removeHeadgear <objUnit>"}, "removeItem": {"version": "CMD", "tags": "", "description": "Removes item from the inventory.", "example": "bluforUnit unassignItem \"NVGoggles\"; bluforUnit removeItem \"NVGoggles\"; opforUnit unassignItem \"NVGoggles_OPFOR\"; opforUnit removeItem \"NVGoggles_OPFOR\"; independentUnit unassignItem \"NVGoggles_INDEP\"; independentUnit removeItem \"NVGoggles_INDEP\";", "docSyntax": "unit removeItem item", "syntax": "<objUnit> removeItem <objItem>"}, "removeItemFromBackpack": {"version": "CMD", "tags": "", "description": "Removes item from soldier's backpack.", "example": "player removeItemFromBackpack \"itemGPS\";", "docSyntax": "unit removeItemFromBackpack item", "syntax": "<objUnit> removeItemFromBackpack <objItem>"}, "removeItemFromUniform": {"version": "CMD", "tags": "", "description": "Removes item from soldier's uniform. Can be used with magazines and weapons too.", "example": "player removeItemFromUniform \"FirstAidKit\";", "docSyntax": "unit removeItemFromUniform item", "syntax": "<objUnit> removeItemFromUniform <objItem>"}, "removeItemFromVest": {"version": "CMD", "tags": "", "description": "Removes item from soldier's vest.", "example": "player removeItemFromVest \"itemWatch\";", "docSyntax": "unit removeItemFromVest item", "syntax": "<objUnit> removeItemFromVest <objItem>"}, "removeItems": {"version": "CMD", "tags": "", "description": "Removes all items with given class name from the inventory.", "example": "player removeItems \"FirstAidKit\";", "docSyntax": "unit removeItems item", "syntax": "<objUnit> removeItems <objItem>"}, "removeMagazine": {"version": "CMD", "tags": "", "description": "Remove magazine from the unit.", "example": "player removeMagazine \"M16\";", "docSyntax": "unitName removeMagazine magazineName", "syntax": "<objUnit> removeMagazine magazineName"}, "removeMagazineGlobal": {"version": "CMD", "tags": "", "description": "Removes the magazine from the unit.", "example": "player removeMagazineGlobal \"30Rnd_65x39_caseless_mag\";", "docSyntax": "unit removeMagazineGlobal magazineName", "syntax": "<objUnit> removeMagazineGlobal magazineName"}, "removeMagazines": {"version": "CMD", "tags": "", "description": "Removes all magazines of given type from the unit. If magazine class does not exist, nothing happens, not even .rpt message, unlike with addMagazine command.", "example": "player removeMagazines \"30Rnd_556x45_Stanag\";", "docSyntax": "unitName removeMagazines magazineName", "syntax": "<objUnit> removeMagazines magazineName"}, "removeMagazinesTurret": {"version": "CMD", "tags": "", "description": "Removes all magazines of the given type from given vehicle. Use turret path [-1] for driver's turret.", "example": "vehicle player removeMagazinesTurret [\"60rnd_cmflaremagazine\",[-1]];", "docSyntax": "vehicle removeMagazinesTurret [magazineName, turretPath]", "syntax": "<objVehicle> removeMagazinesTurret [magazineName,turretPath]"}, "removeMagazineTurret": {"version": "CMD", "tags": "", "description": "Removes the magazine from the turret. Use turret path [-1] for driver's turret. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined.", "example": "vehicle player removeMagazineTurret [\"60rnd_cmflaremagazine\",[-1]];", "docSyntax": "vehicle removeMagazineTurret [magazineName, turretPath]", "syntax": "<objVehicle> removeMagazineTurret [magazineName,turretPath]"}, "removeMenuItem": {"version": "CMD", "tags": "", "description": "Removes a previously added menu item.", "example": "-", "docSyntax": "map removeMenuItem index", "syntax": "<objMap> removeMenuItem <scalar>"}, "removeMissionEventHandler": {"version": "CMD", "tags": "", "description": "Removes mission event handler added by addMissionEventHandler.", "example": "private _eventHandlerId = addMissionEventHandler [\"Ended\", { diag_log \"mission complete\"; }]; //\u00a0... removeMissionEventHandler [\"Ended\", _eventHandlerId];", "docSyntax": "removeMissionEventHandler [type, index]", "syntax": "removeMissionEventHandler [type,<scalar>]"}, "removeMPEventHandler": {"version": "CMD", "tags": "", "description": "Removes MP event handler added by addMPEventHandler.", "example": "player removeMPEventHandler [\"MPKilled\", 0];", "docSyntax": "unitName removeMPEventHandler [event, index]", "syntax": "<objUnit> removeMPEventHandler [event,<scalar>]"}, "removeMusicEventHandler": {"version": "CMD", "tags": "", "description": "Removes specified music track event handler. See Arma 3: Event Handlers - Music Event Handlers.", "example": "removeMusicEventHandler [\"MusicStart\", 12];", "docSyntax": "removeMusicEventHandler [type, id]", "syntax": "removeMusicEventHandler [type,<scalar>]"}, "removeOwnedMine": {"version": "CMD", "tags": "", "description": "Removes ownership over a remotely detonatable mine from the unit.", "example": "player removeOwnedMine SuperMine;", "docSyntax": "unit removeOwnedMine mine", "syntax": "<objUnit> removeOwnedMine mine"}, "removePrimaryWeaponItem": {"version": "CMD", "tags": "", "description": "Removes given weapon item, including magazine, from the primaryWeapon.", "example": "player removePrimaryWeaponItem \"acc_flashlight\";", "docSyntax": "unit removePrimaryWeaponItem item", "syntax": "<objUnit> removePrimaryWeaponItem <objItem>"}, "removeSecondaryWeaponItem": {"version": "CMD", "tags": "", "description": "Removes given weapon item, including magazine, from the secondaryWeapon.", "example": "player removeSecondaryWeaponItem (secondaryWeaponItems player select 0);", "docSyntax": "unit removeSecondaryWeaponItem item", "syntax": "<objUnit> removeSecondaryWeaponItem <objItem>"}, "removeSimpleTask": {"version": "CMD", "tags": "", "description": "Remove a simple task from the list of simple tasks.", "example": "player removeSimpleTask _tskKillSpongebob;", "docSyntax": "person removeSimpleTask task", "syntax": "<objUnit> removeSimpleTask <objTask>"}, "removeSwitchableUnit": {"version": "CMD", "tags": "", "description": "Remove a unit from the list of units available for Team Switch.", "example": "removeSwitchableUnit _unit1;", "docSyntax": "removeSwitchableUnit unitName", "syntax": "removeSwitchableUnit <objUnit>"}, "removeTeamMember": {"version": "CMD", "tags": "", "description": "Remove given member from given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.", "example": "_team removeTeamMember _teamMember;", "docSyntax": "team removeTeamMember member", "syntax": "team removeTeamMember <objUnit>"}, "removeUniform": {"version": "CMD", "tags": "", "description": "Removes uniform from unit.", "example": "removeUniform player;", "docSyntax": "removeUniform unit", "syntax": "removeUniform <objUnit>"}, "removeUserActionEventHandler": {"version": "CMD", "tags": "", "description": "Removes a UserAction event handler. For a list of available UserAction event handlers, see: Arma 3: Mission Event Handlers.", "example": "removeUserActionEventHandler [\"Reload\", \"Activate\", _reloadUAEH];", "docSyntax": "removeUserActionEventHandler [keyName, event, index]", "syntax": "removeUserActionEventHandler [keyName,event,<scalar>]"}, "removeVest": {"version": "CMD", "tags": "", "description": "Removes vest from unit.", "example": "removeVest player;", "docSyntax": "removeVest unit", "syntax": "removeVest <objUnit>"}, "removeWeapon": {"version": "CMD", "tags": "", "description": "Remove weapon from a unit. The unit must be local to the computer where command is executed. For a global version of this command see removeWeaponGlobal. Note: It is possible to create invalid combinations with this command (ie, attempting to remove a weapon that a unit does not possess). When doing so, application behaviour is undefined.", "example": "player removeWeapon \"BAF_L85A2_RIS_SUSAT\";", "docSyntax": "unit removeWeapon weapon", "syntax": "<objUnit> removeWeapon <string>"}, "removeWeaponAttachmentCargo": {"version": "CMD", "tags": "", "description": "Remove attachment linked to a weapon from the vehicle cargo space.", "example": "rearmTruckOne removeWeaponAttachmentCargo [weaponID, creatorID, \"attachment\"];", "docSyntax": "object removeWeaponAttachmentCargo [weaponID,creatorID,attachment]", "syntax": "<object> removeWeaponAttachmentCargo [weaponID,creatorID,attachment]"}, "removeWeaponCargo": {"version": "CMD", "tags": "", "description": "Remove weapon from the vehicle cargo space.", "example": "rearmTruckOne removeWeaponCargo [19, 1];", "docSyntax": "object removeWeaponCargo [weaponID,creatorID]", "syntax": "<object> removeWeaponCargo [weaponID,creatorID]"}, "removeWeaponGlobal": {"version": "CMD", "tags": "", "description": "Remove a weapon from a unit. An attempt to remove a weapon, which is not in unit's possession, is simply ignored.", "example": "{ _x removeWeaponGlobal \"Laserdesignator\"; } forEach allUnits;", "docSyntax": "unit removeWeaponGlobal weapon", "syntax": "<objUnit> removeWeaponGlobal <string>"}, "removeWeaponTurret": {"version": "CMD", "tags": "", "description": "Removes weapon from the turret. Use turret path [-1] for driver's turret.", "example": "_tank removeWeaponTurret [\"LMG_M200\", [0,0]];", "docSyntax": "vehicle removeWeaponTurret [weaponName, turretPath]", "syntax": "<objVehicle> removeWeaponTurret [weaponName,turretPath]"}, "reportRemoteTarget": {"version": "CMD", "tags": "", "description": "Shares the target vehicle via datalink to the Side center for a given time.", "example": "blufor reportRemoteTarget [vehicle player, 60];", "docSyntax": "side reportRemoteTarget [target, time]", "syntax": "<objSide> reportRemoteTarget [<object>,<scalar>]"}, "requiredVersion": {"version": "CMD", "tags": "", "description": "Check if version of application is available. If the current version is older than the required one, a warning message is shown and false is returned.", "example": "if !(requiredVersion \"1.09\") exitWith {};", "docSyntax": "requiredVersion version", "syntax": "requiredVersion version"}, "resetCamShake": {"version": "CMD", "tags": "", "description": "Stops any ongoing camera shake effects. Does not prevent new effects from being created. To disallow new effects altogether, enableCamShake should be used.", "example": "resetCamShake;", "docSyntax": "resetCamShake", "syntax": "resetCamShake"}, "resetSubgroupDirection": {"version": "CMD", "tags": "", "description": "Sets formation direction of a group relative to current direction of the group leader. The group units will change their positions to form new formation if new formation direction is different (approx +/- 15 degrees). Does the same as:", "example": "resetSubgroupDirection myUnit;", "docSyntax": "resetSubgroupDirection unit", "syntax": "resetSubgroupDirection <objUnit>"}, "resize": {"version": "CMD", "tags": "", "description": "Changes the size of the given array. The command does not return new array, it resizes the source array to the desired number of elements. If the new size is bigger than the current size, the new places are filled with nil. The alternative syntax allows to fill resized positions with a given value. Array and HashMap values are copied.", "example": "_arrayNum = [0,1,2,3,4]; _arrayNum resize 2; //\u00a0_arrayNum is now [0, 1] _arrayNum resize 5; //\u00a0_arrayNum is now [0, 1, nil, nil, nil]", "docSyntax": "array resize count", "syntax": "<array> resize count"}, "resources": {"version": "CMD", "tags": "", "description": "Returns the resources of a team member. Results are local to the PC on which command was executed.", "example": "resources teamMember _unit;", "docSyntax": "resources member", "syntax": "resources <objUnit>"}, "respawnVehicle": {"version": "CMD", "tags": "", "description": "Sets vehicle as respawnable in MP game. The vehicle will be spawned at the locality and coordinates it was prior to destruction. If respawn type is set to base respawn (type 3) and vehicle respawn marker is provided (respawn_vehicle_XXXSIDEXXX), vehicle will spawn on the marker.", "example": "car respawnVehicle [5, 3]; //\u00a0'car' will respawn at the predefined marker for the side after 5 seconds. The unit will respawn 3 times.", "docSyntax": "vehicle respawnVehicle [delay, count]", "syntax": "<objVehicle> respawnVehicle [<scalar>,count]"}, "restartEditorCamera": {"version": "CMD", "tags": "", "description": "Restarts the mission editor camera (if it was deleted by a script,for example).", "example": "-", "docSyntax": "restartEditorCamera map", "syntax": "restartEditorCamera <objMap>"}, "reveal": {"version": "CMD", "tags": "", "description": "Reveals a target to a group. If toWhom is a unit, unit's group is considered. If toWhom is a vehicle, vehicle commander's group is considered. The knowledge value will be set to the highest level any unit of the revealing side has about the revealed target. If the revealing side has no knowledge about the revealed target, the value will be set to 1.", "example": "_soldierOne reveal _soldierTwo; //\u00a0soldierOne knowsAbout information about soldierTwo is updated", "docSyntax": "toWhom reveal target", "syntax": "toWhom reveal <object>"}, "revealMine": {"version": "CMD", "tags": "", "description": "Sets given mine as known to the side. (Knowledge about a mine is always shared across all units in a side.)", "example": "west revealMine _mine;", "docSyntax": "side revealMine mine", "syntax": "<objSide> revealMine mine"}, "reverse": {"version": "CMD", "tags": "", "description": "Reverses given array by reference (modifies the original array, just like resize). The alternative syntax can be used to reverse a ANSI string. If Unicode support is desired, see forceUnicode.", "example": "_arr = [1,2,3]; reverse _arr; hint str _arr; //\u00a0[3,2,1]", "docSyntax": "reverse array", "syntax": "reverse <array>"}, "reversedMouseY": {"version": "CMD", "tags": "", "description": "Returns true if mouse vertical axe is inverted.", "example": "if (reversedMouseY) then { hint \"Dude!\" };", "docSyntax": "reversedMouseY", "syntax": "reversedMouseY"}, "roadAt": {"version": "CMD", "tags": "", "description": "Returns a road segment containing given position, objNull otherwise. Same as isOnRoad only returns the actual road object instead of boolean.", "example": "_road = roadAt ASLToAGL getPosASL player;", "docSyntax": "roadAt position", "syntax": "roadAt position"}, "roadsConnectedTo": {"version": "CMD", "tags": "", "description": "Find the road segments connected to the given road segment.", "example": "_road = (player nearRoads 50) select 0; _connectedRoads = roadsConnectedTo _road;", "docSyntax": "roadsConnectedTo roadSegment", "syntax": "roadsConnectedTo roadSegment"}, "roleDescription": {"version": "CMD", "tags": "", "description": "Returns unit description set in the editor and visible on role selection screen in multiplayer.", "example": "_playerRole = roleDescription player;", "docSyntax": "roleDescription unit", "syntax": "roleDescription <objUnit>"}, "ropeAttachedObjects": {"version": "CMD", "tags": "", "description": "Returns an array of all entities that are attached to the transport with ropes. This command is the opposite of ropeAttachedTo.", "example": "_cargoArray = ropeAttachedObjects heli1;", "docSyntax": "ropeAttachedObjects ropesOwner", "syntax": "ropeAttachedObjects ropesOwner"}, "ropeAttachedTo": {"version": "CMD", "tags": "", "description": "Returns the owner of the first rope - the transport to which other entities are attached with ropes. This command is the opposite of ropeAttachedObjects. To return all owners see ropesAttachedTo.", "example": "_heli = ropeAttachedTo veh1;", "docSyntax": "ropeAttachedTo cargo", "syntax": "ropeAttachedTo <objVehicle>"}, "ropeAttachEnabled": {"version": "CMD", "tags": "", "description": "Returns true if entity can be attached to a rope end.", "example": "ropeAttachEnabled veh1;", "docSyntax": "ropeAttachEnabled entity", "syntax": "ropeAttachEnabled entity"}, "ropeAttachTo": {"version": "CMD", "tags": "", "description": "Attaches entity to the rope end with optional offset. For detach operation use ropeDetach.", "example": "[veh1, [0,0,0], [0,0,-1]] ropeAttachTo (ropes heli1 select 0);", "docSyntax": "[entity, toPoint, ropeEndDownVector] ropeAttachTo rope", "syntax": "[entity,toPoint,ropeEndDownVector] ropeAttachTo rope"}, "ropeCreate": {"version": "CMD", "tags": "", "description": "Creates a rope.", "example": "myRope = ropeCreate [vehicle player, \"fastrope0\", 10, 10, true];", "docSyntax": "ropeCreate [fromObject, fromPoint, toObject, toPoint, segments, length]", "syntax": "ropeCreate [fromObject,fromPoint,toObject,toPoint,segments,length]"}, "ropeCut": {"version": "CMD", "tags": "", "description": "Cuts the given rope to the specified length. If some entity was attached to the end of the rope, it will be detached. The rope remains attached to its parent transport and if the length is set to 0 or even negative does not get destroyed. Use ropeDestroy to remove it completely.", "example": "ropeCut [ropes heli1 select 0, 5];", "docSyntax": "ropeCut [rope, length]", "syntax": "ropeCut [rope,length]"}, "ropeDestroy": {"version": "CMD", "tags": "", "description": "Destroys the given rope. If the rope is attached to a vehicle, it will be detached and then destroyed.", "example": "ropeDestroy myRope;", "docSyntax": "ropeDestroy rope", "syntax": "ropeDestroy rope"}, "ropeDetach": {"version": "CMD", "tags": "", "description": "Detaches attached object from rope (i.e. detaches rope end from attached to it entity). See ropeAttachTo for attach operation.", "example": "vehicle player ropeDetach myRope;", "docSyntax": "attachedObject ropeDetach rope", "syntax": "attachedObject ropeDetach rope"}, "ropeEndPosition": {"version": "CMD", "tags": "", "description": "Returns start and end positions for the given rope. If command fails, empty array [] is returned.", "example": "_ends = ropeEndPosition (ropes heli1 select 0); _start = _ends select 0; _end = _ends select 1;", "docSyntax": "ropeEndPosition rope", "syntax": "ropeEndPosition rope"}, "ropeLength": {"version": "CMD", "tags": "", "description": "Return rope length in meters (set by ropeCreate, ropeCut, ropeUnwind).", "example": "_length = ropeLength (ropes heli1 select 0);", "docSyntax": "ropeLength rope", "syntax": "ropeLength rope"}, "ropes": {"version": "CMD", "tags": "", "description": "Returns all ropes attached to a ropes owner transport vehicle.", "example": "hint str (ropes vehicle player);", "docSyntax": "ropes ropesOwner", "syntax": "ropes ropesOwner"}, "ropesAttachedTo": {"version": "CMD", "tags": "", "description": "Returns the owners of all ropes attached to the cargo - the transports to which other entities are attached with ropes. This command returns Array of Objects instead of a single Object as with ropeAttachedTo.", "example": "r1 = ropeCreate [car1, [0,0,0], car3, [0,0,0], 10]; r2 = ropeCreate [car2, [0,0,0], car3, [0,0,0], 10]; ropesAttachedTo car3; //\u00a0[car1,car2]", "docSyntax": "ropesAttachedTo cargo", "syntax": "ropesAttachedTo <objVehicle>"}, "ropeSegments": {"version": "CMD", "tags": "", "description": "Returns provided rope's segments. To return the rope parent from a rope segment, use objectParent (Since Arma 3 2.12)", "example": "private _segments = ropeSegments _myRope;", "docSyntax": "ropeSegments rope", "syntax": "ropeSegments rope"}, "ropeUnwind": {"version": "CMD", "tags": "", "description": "Increases or decreases the rope length by the given amount. Use relative parameter for changing rope length +/- from current length.", "example": "ropeUnwind [ropes heli1 select 0, 3, 10]; //\u00a0set rope length to 10m at 3m/s", "docSyntax": "ropeUnwind [rope, speed, length, relative]", "syntax": "ropeUnwind [rope,<scalar>,length,relative]"}, "ropeUnwound": {"version": "CMD", "tags": "", "description": "Returns false if rope length changing animation is in progress. Returns true if animation is done.", "example": "waitUntil { ropeUnwound (ropes heli1 select 0) }; hint \"Unwinding Complete\";", "docSyntax": "ropeUnwound rope", "syntax": "ropeUnwound rope"}, "rotorsForcesRTD": {"version": "CMD", "tags": "", "description": "Returns force produced by rotors.", "example": "_rotorForces = rotorsForcesRTD _taru; //\u00a0Returns [[-465.981,351.941,45960.5],[-469.079,397.451,46933.3]]", "docSyntax": "rotorsForcesRTD helicopter", "syntax": "rotorsForcesRTD helicopter"}, "rotorsRpmRTD": {"version": "CMD", "tags": "", "description": "Returns rotors RPM.", "example": "_mh9_main = (rotorsRpmRTD _MH9) select 0;//main rotor _mh9_tail = (rotorsRpmRTD _MH9) select 1;//tail rotor", "docSyntax": "rotorsRpmRTD RTD_helicopter", "syntax": "rotorsRpmRTD RTD_helicopter"}, "round": {"version": "CMD", "tags": "", "description": "Rounds the provided value to the closest integer.", "example": "round 5.25; //\u00a0returns 5", "docSyntax": "round value", "syntax": "round <scalar>"}, "runInitScript": {"version": "CMD", "tags": "", "description": "Fades in mission screen and re-executes init.sqf and init.sqs scripts. In Eden Editor the code inside the \"Init\" mission attribute is executed.", "example": "runInitScript;", "docSyntax": "runInitScript", "syntax": "runInitScript"}, "safeZoneH": {"version": "CMD", "tags": "", "description": "Returns the height of the screen in screen measurement units. Taken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the Y axis, the value will be positive but resulting Y will end up beyond the bottom border. Therefore in order to calculate Y of the bottom screen border, the length of safeZoneY must be subtracted from safeZoneH, but because it is negative, it must be added instead.", "example": "_screenHeight = safeZoneH;", "docSyntax": "safeZoneH", "syntax": "safeZoneH"}, "safeZoneW": {"version": "CMD", "tags": "", "description": "Returns the width of the screen in screen measurement units. Taken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the X axis, the value will be positive but resulting X will end up beyond the right border. Therefore in order to calculate X of the right screen border, the length of safeZoneX must be subtracted from safeZoneW, but because it is negative, it must be added instead.", "example": "_screenWidth = safeZoneW;", "docSyntax": "safeZoneW", "syntax": "safeZoneW"}, "safeZoneWAbs": {"version": "CMD", "tags": "", "description": "Returns absolute safeZoneW including all monitors.", "example": "_szW = safeZoneWAbs;", "docSyntax": "safeZoneWAbs", "syntax": "safeZoneWAbs"}, "safeZoneX": {"version": "CMD", "tags": "", "description": "Returns the X of the left border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the left border of the screen. Since it is going in opposite way of the X axis,", "example": "_screenLeftBorderX = safeZoneX; //\u00a0returns a float value < 0", "docSyntax": "safeZoneX", "syntax": "safeZoneX"}, "safeZoneXAbs": {"version": "CMD", "tags": "", "description": "Returns absolute safeZoneX including all monitors.", "example": "_szX = safeZoneXAbs;", "docSyntax": "safeZoneXAbs", "syntax": "safeZoneXAbs"}, "safeZoneY": {"version": "CMD", "tags": "", "description": "Returns the Y of the top border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the top border of the screen. Since it is going in opposite way of the Y axis,", "example": "_screenTopBorderY = safeZoneY; //\u00a0returns a float value < 0", "docSyntax": "safeZoneY", "syntax": "safeZoneY"}, "save3DENInventory": {"version": "CMD", "tags": "", "description": "Saves the current state of entities' inventory to the Mission.sqm.", "example": "save3DENInventory [_soldier1, _soldier2];", "docSyntax": "save3DENInventory entities", "syntax": "save3DENInventory entities"}, "saveGame": {"version": "CMD", "tags": "", "description": "Autosaves the game (used for Retry). The saving is not started immediately, the request for autosave is made instead. To check the status of the request, use isSaving. The game can then be loaded from the last autosave with loadGame. Will not save if the player is null or dead.", "example": "saveGame;", "docSyntax": "saveGame", "syntax": "saveGame"}, "saveIdentity": {"version": "CMD", "tags": "", "description": "Saves units's identity to Objects.sav file in campaign directory as entry name.", "example": "_successful = player saveIdentity \"playerid\";", "docSyntax": "unit saveIdentity name", "syntax": "<objUnit> saveIdentity <string>"}, "saveJoysticks": {"version": "CMD", "tags": "", "description": "Saves joysticks key mappings into the joysticks.cfg file. Engine add these joysticks to the Joystick Scheme mapping dialog in options controls section.", "example": "saveJoysticks;", "docSyntax": "saveJoysticks", "syntax": "saveJoysticks"}, "saveMissionProfileNamespace": {"version": "CMD", "tags": "", "description": "missionProfileNamespace provides long term storage solution for mission variables. When this namespace has variables set with setVariable and is saved, the variables are saved into missionName.vars file into current soldier profileName folder. Next time when the same mission is loaded by the client with the same soldier profile, the saved variables can be read normally with getVariable command. This way each mission maker can create persistent data that is both mission and soldier profile specific. This is default behaviour. The file is only created when save operation is invoked with this command.", "example": "saveMissionProfileNamespace;", "docSyntax": "saveMissionProfileNamespace", "syntax": "saveMissionProfileNamespace"}, "saveOverlay": {"version": "CMD", "tags": "", "description": "Save the current overlay.", "example": "saveOverlay _map;", "docSyntax": "saveOverlay map", "syntax": "saveOverlay <objMap>"}, "saveProfileNamespace": {"version": "CMD", "tags": "", "description": "Saves all variables stored in profileNamespace to the active Profile.", "example": "profileNamespace setVariable [\"TAG_lastPlayerLocation\", getPosASL player]; saveProfileNamespace;//\u00a0Optional since namespace is saved when game is closed", "docSyntax": "saveProfileNamespace", "syntax": "saveProfileNamespace"}, "saveStatus": {"version": "CMD", "tags": "", "description": "Saves object's properties to Objects.sav file in campaign directory as entry name.", "example": "player saveStatus \"playerstate\";", "docSyntax": "object saveStatus name", "syntax": "<object> saveStatus <string>"}, "saveVar": {"version": "CMD", "tags": "", "description": "Save variable value into the campaign space. This variable is available to all following missions in the campaign.", "example": "saveVar \"varOne\";", "docSyntax": "saveVar varname", "syntax": "saveVar varname"}, "savingEnabled": {"version": "CMD", "tags": "", "description": "Check if saving the game is enabled.", "example": "if (savingEnabled) then { hint \"Saving is enabled!\"; };", "docSyntax": "savingEnabled", "syntax": "savingEnabled"}, "say": {"version": "CMD", "tags": "", "description": "Make unit say given sound. The sound is defined in CfgSounds. If the unit is a person, it will also perform the corresponding lipsync effect provided an appropriate .lip file has been created for this sound.", "example": "(units player select 1) say [\"whisper1\", 5];", "docSyntax": "from say sound", "syntax": "from say sound"}, "say2D": {"version": "CMD", "tags": "", "description": "Plays given sound in 2D.", "example": "player say2D \"HelloThere\";", "docSyntax": "from say2D sound", "syntax": "from say2D sound"}, "say3D": {"version": "CMD", "tags": "", "description": "Lets an object say given sound in 3D space. This allows broadcasting of positional music or sound from a source, without having to script a fade sound or music command. Compare this with say2D which will always play a sound at the location of the player after he has been in the vicinity of a broadcasting sound. Sound is defined in \"CfgSounds\" of the Description.ext or main config.", "example": "All possible combinations:", "docSyntax": "from say3D sound", "syntax": "from say3D sound"}, "scopeName": {"version": "CMD", "tags": "", "description": "Defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands like breakOut and breakTo. Scope name should be defined only once per scope. Trying to set a different name on the scope that has already defined scope name will result in error.", "example": "scopeName \"main\"; while {true} do { scopeName \"loop1\"; while {true} do { scopeName \"loop2\"; //\u00a0... }; };", "docSyntax": "scopeName name", "syntax": "scopeName <string>"}, "score": {"version": "CMD", "tags": "", "description": "Returns the person's score in MP.", "example": "_pScore = score player;", "docSyntax": "score unit", "syntax": "score <objUnit>"}, "scoreSide": {"version": "CMD", "tags": "", "description": "Returns score for the given side. MP Only.", "example": "_number = scoreSide west;", "docSyntax": "scoreSide side", "syntax": "scoreSide <objSide>"}, "screenshot": {"version": "CMD", "tags": "", "description": "Captures a screenshot and stores it to given filename.", "example": "screenshot \"\";", "docSyntax": "screenshot filename", "syntax": "screenshot filename"}, "screenToWorld": {"version": "CMD", "tags": "", "description": "Returns the position on landscape (PositionAGL) corresponding to the given point on screen (in UI coordinates).", "example": "_wPos = screenToWorld [0.5, 0.5];", "docSyntax": "screenToWorld screen", "syntax": "screenToWorld screen"}, "scriptDone": {"version": "CMD", "tags": "", "description": "Check if a script is finished running using the Script Handle returned by execVM or spawn.", "example": "_scriptHandle = [\"arguments\"] execVM \"scriptname.sqf\"; waitUntil { scriptDone _scriptHandle };", "docSyntax": "scriptDone handle", "syntax": "scriptDone handle"}, "scriptName": {"version": "CMD", "tags": "", "description": "Assign a user friendly name to the VM script this command is executed from.", "example": "scriptName \"leetScript.sqf\";", "docSyntax": "scriptName name", "syntax": "scriptName <string>"}, "scudState": {"version": "CMD", "tags": "", "description": "Return the current state of given Scud launcher.", "example": "waitUntil { sleep 1; scudState _scud > 2 }; guba say \"MasterPlanCompletion\";", "docSyntax": "scudState scudName", "syntax": "scudState scudName"}, "secondaryWeapon": {"version": "CMD", "tags": "", "description": "Returns the name of a unit's secondary weapon (launcher). To detect the weapon which is currently being used by the unit use currentWeapon.", "example": "private _secondaryWeapon = secondaryWeapon player;", "docSyntax": "secondaryWeapon unit", "syntax": "secondaryWeapon <objUnit>"}, "secondaryWeaponItems": {"version": "CMD", "tags": "", "description": "Returns array with all items assigned to the secondaryWeapon except magazines. Use secondaryWeaponMagazine command for the latter. This command is used for infantry weapons only.", "example": "secondaryWeaponItems player; //[\"\",\"\",\"\",\"\"]", "docSyntax": "secondaryWeaponItems unit", "syntax": "secondaryWeaponItems <objUnit>"}, "secondaryWeaponMagazine": {"version": "CMD", "tags": "", "description": "Collects all loaded magazines from all secondaryWeapon muzzles and returns them in Array, otherwise it returns []. This command is used for infantry weapons only.", "example": "hint str secondaryWeaponMagazine player; //[\"NLAW_F\"]", "docSyntax": "secondaryWeaponMagazine unit", "syntax": "secondaryWeaponMagazine <objUnit>"}, "selectBestPlaces": {"version": "CMD", "tags": "", "description": "Find the places with the maximum value of expression in the given area. Places can be on water. Results are sorted by value. Search pattern is randomised every command execution.", "example": "myPlaces = selectBestPlaces [position player, 50, \"meadow + 2*hills\", 1, 5];", "docSyntax": "selectBestPlaces [position, radius, expression, precision, sourcesCount]", "syntax": "selectBestPlaces [position,radius,expression,precision,sourcesCount]"}, "selectDiarySubject": {"version": "CMD", "tags": "", "description": "Selects a subject page in the diary. The subject page is selected but the command does not open the map by default, which could be opened with openMap if necessary.", "example": "openMap true; player selectDiarySubject \"Diary\";", "docSyntax": "player selectDiarySubject subject", "syntax": "<objUnit> selectDiarySubject <string>"}, "selectedEditorObjects": {"version": "CMD", "tags": "", "description": "Returns a list of currently selected editor objects.", "example": "_selObjects = selectedEditorObjects _map; //\u00a0result can be: [\"_vehicle_0\",\"_vehicle_9\",\"_vehicle_11\"]", "docSyntax": "selectedEditorObjects map", "syntax": "selectedEditorObjects <objMap>"}, "selectEditorObject": {"version": "CMD", "tags": "", "description": "Select an editor object. Does not un-select previously selected objects.", "example": "-", "docSyntax": "map selectEditorObject object", "syntax": "<objMap> selectEditorObject <object>"}, "selectionNames": {"version": "CMD", "tags": "", "description": "Returns the list of model selections. When using default syntax, the named selections are returned from the first LOD only (LOD index 0).", "example": "private _result = \"Land_i_House_Small_02_V3_F\" createVehicle _pos; selectionNames _house; /* [ \"door_1\",\"door_2\",\"damt_1\",\"door_handle_1\",\"door_handle_2\",\"glass_1_hide\",\"glass_2_hide\",\"glass_3_hide\", \"glass_1_unhide\",\"glass_2_unhide\",\"glass_3_unhide\",\"glass_4_hide\",\"glass_4_unhide\" ] */", "docSyntax": "selectionNames object", "syntax": "selectionNames <object>"}, "selectionPosition": {"version": "CMD", "tags": "", "description": "Returns selection position in model space pertaining to the current animation in render time scope. When the default syntax is used, command searches first in Memory LOD, then in Geometry LOD, FireGeometry LOD, LandContact LOD, HitPoints LOD and finally in ViewGeometry LOD and returns the first matching find. The second syntax allows to specify which one of these LODs to search in instead.", "example": "_inModelPosition = player selectionPosition \"head_hit\";", "docSyntax": "object selectionPosition selectionName", "syntax": "<object> selectionPosition selectionName"}, "selectionVectorDirAndUp": {"version": "CMD", "tags": "", "description": "Searches for selection in the object model's LOD level, and returns the Direction and Up vectors in model space.", "example": "vehicle player selectionVectorDirAndUp [\"drivewheel_axis\", \"FireGeometry\"] params [\"_axisVectorDir\", \"_axisVectorUp\"];", "docSyntax": "object selectionVectorDirAndUp [selectionName, LOD]", "syntax": "<object> selectionVectorDirAndUp [selectionName,LOD]"}, "selectLeader": {"version": "CMD", "tags": "", "description": "Select the group's leader. Group locality can be checked with local command and group ownership with groupOwner command.", "example": "group player selectLeader player;", "docSyntax": "group selectLeader unitName", "syntax": "<objGroup> selectLeader <objUnit>"}, "selectMax": {"version": "CMD", "tags": "", "description": "Returns the array element with maximum numerical value. Engine solution to BIS_fnc_greatestNum and BIS_fnc_findExtreme. Therefore it is expected that supplied array consists of Numbers only. Booleans however are also supported and will be evaluated as Numbers: true - 1, false - 0. nil value treated as 0.", "example": "_max = selectMax [1,2,3,4,5]; //5", "docSyntax": "selectMax array", "syntax": "selectMax <array>"}, "selectMin": {"version": "CMD", "tags": "", "description": "Returns the array element with minimum numerical value. Engine solution to BIS_fnc_lowestNum and BIS_fnc_findExtreme. Therefore it is expected that supplied array consists of Numbers only. Booleans however are also supported and will be evaluated as Numbers: true - 1, false - 0. nil value treated as 0.", "example": "_min = selectMin [1,2,3,4,5]; //1", "docSyntax": "selectMin array", "syntax": "selectMin <array>"}, "selectNoPlayer": {"version": "CMD", "tags": "", "description": "Switches player to no unit, makes player return objNull.", "example": "Single player:", "docSyntax": "selectNoPlayer", "syntax": "selectNoPlayer"}, "selectPlayer": {"version": "CMD", "tags": "", "description": "Move player into given unit. Some usage advices:", "example": "selectPlayer bob;", "docSyntax": "selectPlayer unitName", "syntax": "selectPlayer <objUnit>"}, "selectRandom": {"version": "CMD", "tags": "", "description": "Returns a random element from the given array. Engine solution to BIS_fnc_selectRandom", "example": "_randomElement = selectRandom [1,2,3,4,5];", "docSyntax": "selectRandom array", "syntax": "selectRandom <array>"}, "selectRandomWeighted": {"version": "CMD", "tags": "", "description": "Returns a random element from the given array according to assigned weights. Engine solution to BIS_fnc_selectRandomWeighted. A few notes:", "example": "private _randomWeightedElement = selectRandomWeighted [1,0.1,2,0.2,3,1.3,4,2.4,5,7.5];", "docSyntax": "selectRandomWeighted valuesAndWeights", "syntax": "selectRandomWeighted valuesAndWeights"}, "selectThrowable": {"version": "CMD", "tags": "", "description": "Selects current throwable, which will be launched if the user presses G.", "example": "player selectThrowable \"SmokeShellGreen\";", "docSyntax": "unit selectThrowable throwable", "syntax": "<objUnit> selectThrowable throwable"}, "selectWeapon": {"version": "CMD", "tags": "", "description": "Selects the given weapon.", "example": "_soldier1 selectWeapon \"LAWLauncher\";", "docSyntax": "unitName selectWeapon muzzleName", "syntax": "<objUnit> selectWeapon muzzleName"}, "selectWeaponTurret": {"version": "CMD", "tags": "", "description": "Selects the given weapon on the specified turret. Use turret path [-1] for the driver's turret.", "example": "MBT_Kuma selectWeaponTurret [\"LMG_coax\",[0]];", "docSyntax": "vehicle selectWeaponTurret [weapon, turretPath, muzzle, firemode]", "syntax": "<objVehicle> selectWeaponTurret [<string>,turretPath,muzzle,firemode]"}, "sendAUMessage": {"version": "CMD", "tags": "", "description": "Send the command to the list of clients.", "example": "sendAUMessage [[dpnid1, dpnid2], \"ConnectTo: 192.168.1.66\"];", "docSyntax": "sendAUMessage [clientList, command]", "syntax": "sendAUMessage [clientList,command]"}, "sendSimpleCommand": {"version": "CMD", "tags": "", "description": "Sends a simple command to the vehicle's driver / gunner (air vehicles ignore it). See also vehicleMoveInfo.", "example": "vehicle player sendSimpleCommand \"STOP\";", "docSyntax": "vehicleName sendSimpleCommand command", "syntax": "vehicleName sendSimpleCommand command"}, "sendTask": {"version": "CMD", "tags": "", "description": "Create a new AI task (subtask of parentTask). Type is name of registered task type.", "docSyntax": "sender sendTask [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...]", "syntax": "sender sendTask [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...]"}, "sendTaskResult": {"version": "CMD", "tags": "", "description": "Send a result of the task to the task sender.", "docSyntax": "task sendTaskResult [state,result,sentence]", "syntax": "<objTask> sendTaskResult [state,result,sentence]"}, "sendUDPMessage": {"version": "CMD", "tags": "", "description": "Send message to given address using UDP protocol. Returns false if the message has not been delivered", "example": "_bool = sendUDPMessage [\"192.168.0.1\", 2302, \"Here goes you message...\"];", "docSyntax": "sendUDPMessage [ip, port, message]", "syntax": "sendUDPMessage [ip,port,message]"}, "sentencesEnabled": {"version": "CMD", "tags": "", "description": "A getter for enableSentences.", "example": "if (sentencesEnabled) then { hint \"sentences are enabled; changing that now\"; enableSentences false; };", "docSyntax": "sentencesEnabled", "syntax": "sentencesEnabled"}, "serverCommand": {"version": "CMD", "tags": "", "description": "Executes the given server command.", "example": "serverCommand \"#logout\";", "docSyntax": "serverCommand command", "syntax": "serverCommand command"}, "serverCommandAvailable": {"version": "CMD", "tags": "", "description": "Returns true if given serverCommand is available on current machine, false if not.", "example": "_can = serverCommandAvailable \"#kick\";", "docSyntax": "serverCommandAvailable command", "syntax": "serverCommandAvailable command"}, "serverCommandExecutable": {"version": "CMD", "tags": "", "description": "Returns true if the serverCommand can be performed on the machine and in this exact environment, otherwise false. serverCommand can be executed only from User Interface Event Handlers, and this command also checks if that's the case.", "example": "_canKick = serverCommandAvailable \"#kick\";", "docSyntax": "serverCommandExecutable command", "syntax": "serverCommandExecutable command"}, "serverName": {"version": "CMD", "tags": "", "description": "Returns name of the hosting server in MP, \"\" in SP.", "example": "hint format [\"Welcome to the %1 server!\", serverName];", "docSyntax": "serverName", "syntax": "serverName"}, "serverNamespace": {"version": "CMD", "tags": "", "description": "Returns server's namespace. This namespace is only available on the server for the server's uptime duration (same as uiNamespace). Server event handlers, which are available in server config, all use this namespace.", "example": "private _serverVars = allVariables serverNamespace;", "docSyntax": "serverNamespace", "syntax": "serverNamespace"}, "serverTime": {"version": "CMD", "tags": "", "description": "Returns the time since last server restart, synced to all clients in MP. The syncing is happening every 5 minutes, but you can force the next sync earlier by executing estimatedTimeLeft command. The time returned is also different to the time returned by time and diag_tickTime commands on server. Returns 0 in SP.", "example": "hint format [\"Synced server time\u00a0: %1\", serverTime];", "docSyntax": "serverTime", "syntax": "serverTime"}, "set3DENAttribute": {"version": "CMD", "tags": "", "description": "Sets one of entity attributes. For the list of all attributes with their properties see Setting Attributes.", "example": "player set3DENAttribute [\"allowDamage\", false]; //\u00a0Mark player as invincible", "docSyntax": "entity set3DENAttribute [class, value]", "syntax": "entity set3DENAttribute [class,<scalar>]"}, "set3DENAttributes": {"version": "CMD", "tags": "", "description": "Set entity attributes. An attribute is identified by its property (data when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes.", "example": "//\u00a0Set all selected objects as playable set3DENAttributes [[get3DENSelected \"Object\", \"ControlMP\", true]];", "docSyntax": "set3DENAttributes [[entities1, class1, value1], [entities2, class2, value2], ...]", "syntax": "set3DENAttributes [[entities1,class1,value1],[entities2,class2,value2],...]"}, "set3DENGrid": {"version": "CMD", "tags": "", "description": "Sets the grid increment for the given transformation type.", "example": "set3DENGrid [\"t\",100]; //\u00a0100m movement increment", "docSyntax": "set3DENGrid [type, value]", "syntax": "set3DENGrid [type,<scalar>]"}, "set3DENIconsVisible": {"version": "CMD", "tags": "", "description": "Toggle visibility of Eden Editor icons.", "example": "set3DENIconsVisible [false, false]; //\u00a0Hide all icons", "docSyntax": "set3DENIconsVisible [showMap, showScene]", "syntax": "set3DENIconsVisible [showMap,showScene]"}, "set3DENLayer": {"version": "CMD", "tags": "", "description": "Set layer for Eden Entity.", "example": "_myLayer = -1 add3DENLayer \"CTRG\"; player set3DENLayer _myLayer;", "docSyntax": "entity set3DENLayer layerID", "syntax": "entity set3DENLayer layerID"}, "set3DENLinesVisible": {"version": "CMD", "tags": "", "description": "Toggle visibility of Eden Editor lines.", "example": "set3DENLinesVisible [false, false];//\u00a0Hide all lines", "docSyntax": "set3DENLinesVisible [showMap, showScene]", "syntax": "set3DENLinesVisible [showMap,showScene]"}, "set3DENLogicType": {"version": "CMD", "tags": "", "description": "Sets the new type of Logic object(s). For other objects use set3DENObjectType.", "example": "[get3DENSelected \"logic\" select 0] set3DENLogicType \"MiscOR_F\";", "docSyntax": "objects set3DENLogicType classname", "syntax": "objects set3DENLogicType classname"}, "set3DENMissionAttribute": {"version": "CMD", "tags": "", "description": "Set scenario attribute. An attribute is identified by its property (data when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes.", "example": "\"Multiplayer\" set3DENMissionAttribute [\"respawn\", 3]; //\u00a0Set respawn type to 3", "docSyntax": "section set3DENMissionAttribute [class, value]", "syntax": "section set3DENMissionAttribute [class,<scalar>]"}, "set3DENMissionAttributes": {"version": "CMD", "tags": "", "description": "Set scenario attributes. An attribute is identified by its property (data when it is an engine-driven attribute) value in config. For the list of all attributes with their properties, see Mission Attributes.", "example": "//\u00a0set respawn type to 3 and respawn delay to 10 seconds set3DENMissionAttributes [[\"Multiplayer\", \"respawn\", 3], [\"Multiplayer\", \"respawnDelay\", 10]];", "docSyntax": "set3DENMissionAttributes [[section1, class1, value1], ...]", "syntax": "set3DENMissionAttributes [[section1,class1,value1],...]"}, "set3DENModelsVisible": {"version": "CMD", "tags": "", "description": "Enables or disables trigger area visibility.", "example": "set3DENModelsVisible [true, true];", "docSyntax": "set3DENModelsVisible [map, scene]", "syntax": "set3DENModelsVisible [<objMap>,scene]"}, "set3DENObjectType": {"version": "CMD", "tags": "", "description": "Sets the classname of one or more given Eden Editor objects. For Logic objects use set3DENLogicType.", "example": "[get3DENMouseOver select 1] set3DENObjectType \"B_crew_F\"; //\u00a0turns object under cursor into a blufor crewman", "docSyntax": "objects set3DENObjectType classname", "syntax": "objects set3DENObjectType classname"}, "set3DENSelected": {"version": "CMD", "tags": "", "description": "Changes selection in Eden Editor to what is inside entities array.", "example": "set3DENSelected [0,5,3,6,7,12];", "docSyntax": "set3DENSelected entities", "syntax": "set3DENSelected entities"}, "setAccTime": {"version": "CMD", "tags": "", "description": "Set simulation acceleration coefficient. May also be used to slow time in cutscenes.", "example": "setAccTime 0.1;", "docSyntax": "setAccTime accFactor", "syntax": "setAccTime accFactor"}, "setActualCollectiveRTD": {"version": "CMD", "tags": "", "description": "Sets the collective pitch control to a specific position, regardless of input devices (until those are changed).", "example": "myHelicopterRTD setActualCollectiveRTD 0.7;", "docSyntax": "helicopterRTD setActualCollectiveRTD value", "syntax": "helicopterRTD setActualCollectiveRTD <scalar>"}, "setAirplaneThrottle": {"version": "CMD", "tags": "", "description": "Sets a wanted throttle position - works only on player's vehicle.", "example": "vehicle player setAirplaneThrottle 0.5;", "docSyntax": "airplane setAirplaneThrottle value", "syntax": "airplane setAirplaneThrottle <scalar>"}, "setAirportSide": {"version": "CMD", "tags": "", "description": "Set owning side of the airport. ID is the number to identify which airport on the island you want to check.", "example": "0 setAirportSide east;", "docSyntax": "id setAirportSide side", "syntax": "<scalar> setAirportSide <objSide>"}, "setAmmo": {"version": "CMD", "tags": "", "description": "Sets custom ammo count in the currently loaded magazine of the specified weapon or muzzle.", "example": "Set player's handgun magazine ammo count to 10 rounds:", "docSyntax": "unit setAmmo [weaponOrMuzzle, count]", "syntax": "<objUnit> setAmmo [weaponOrMuzzle,count]"}, "setAmmoCargo": {"version": "CMD", "tags": "", "description": "Set amount of ammo resources in cargo space of a rearm vehicle. Ammo resource is used to resupply vehicles that take ammo. Soldiers use individual magazines instead. Amount: 1 is full cargo. The", "example": "_ammoTruck1 setAmmoCargo 0.5;", "docSyntax": "vehicleName setAmmoCargo ammoCargo", "syntax": "vehicleName setAmmoCargo ammoCargo"}, "setAmmoOnPylon": {"version": "CMD", "tags": "", "description": "Set count of ammo in magazine on pylon (supports pylon name since Arma 3 v1.94)", "example": "vehicle player setAmmoOnPylon [1, 12];", "docSyntax": "vehicle setAmmoOnPylon [pylon, ammocount]", "syntax": "<objVehicle> setAmmoOnPylon [pylon,ammocount]"}, "setAngularVelocity": {"version": "CMD", "tags": "", "description": "Sets the angular velocity of the object in world space as a 3D vector. The units are in Rad/s and rotations are clockwise.", "example": "myHeli setAngularVelocity [0,0,1]; //\u00a0will cause the helicopter to spin around a vertical line passing through its center", "docSyntax": "obj setAngularVelocity vector", "syntax": "<object> setAngularVelocity vector"}, "setAngularVelocityModelSpace": {"version": "CMD", "tags": "", "description": "Sets the angular velocity of the object in model space as a 3D vector. The units are in Rad/s and rotations are clockwise.", "example": "myHeli setAngularVelocityModelSpace [0,0,1]; //\u00a0will cause the helicopter to spin around its main rotor shaft", "docSyntax": "obj setAngularVelocityModelSpace vector", "syntax": "<object> setAngularVelocityModelSpace vector"}, "setAnimSpeedCoef": {"version": "CMD", "tags": "", "description": "Sets a coefficient for animation speed (0.5 will play animations half the speed, 2 twice the speed).", "example": "player setAnimSpeedCoef 0.75;", "docSyntax": "unit setAnimSpeedCoef coef", "syntax": "<objUnit> setAnimSpeedCoef <scalar>"}, "setAperture": {"version": "CMD", "tags": "", "description": "Sets custom eye accommodation camera aperture.", "example": "setAperture 0.3;", "docSyntax": "setAperture aperture", "syntax": "setAperture aperture"}, "setApertureNew": {"version": "CMD", "tags": "", "description": "Sets custom camera aperture when HDR is enabled. Provided values should be set such as minimum &lte; standard &lte; maximum.", "example": "setApertureNew [0.1, 0.2, 0.3, 1]; setApertureNew [-1]; //\u00a0reset to default", "docSyntax": "setApertureNew [minimum, standard, maximum, luminance]", "syntax": "setApertureNew [minimum,standard,maximum,luminance]"}, "setArmoryPoints": {"version": "CMD", "tags": "", "description": "Stores passed number into [USERNAME].ArmaXProfile file, where it assigns it as a value to armoryPoints entry. If entry doesn't exist, it is created.", "example": "setArmoryPoints (armoryPoints + 20);", "docSyntax": "setArmoryPoints points", "syntax": "setArmoryPoints <scalar>"}, "setAttributes": {"version": "CMD", "tags": "", "description": "Returns a Structured Text created from the given structured text and sets attributes to the given values.", "example": "_txt = text \"Red text, right align\"; _txt setAttributes [\"color\", \"#FF0000\", \"align\", \"right\"]; hint composeText [_txt];", "docSyntax": "text setAttributes [name1, value1, name2, value2, ...]", "syntax": "<string> setAttributes [name1,value1,name2,value2,...]"}, "setAutonomous": {"version": "CMD", "tags": "", "description": "Sets UAV autonomous mode.", "example": "uav setAutonomous true;", "docSyntax": "uav setAutonomous bool", "syntax": "uav setAutonomous <bool>"}, "setBehaviour": {"version": "CMD", "tags": "", "description": "Sets individual unit behaviour on every unit in a group.", "example": "_group1 setBehaviour \"SAFE\";", "docSyntax": "groupOrUnit setBehaviour behaviour", "syntax": "groupOrUnit setBehaviour behaviour"}, "setBehaviourStrong": {"version": "CMD", "tags": "", "description": "Sets individual unit behaviour on every unit in a group and additionally tries to force this behaviour to the unit's group. Alternatively see setCombatBehaviour.", "example": "_group1 setBehaviourStrong \"SAFE\";", "docSyntax": "groupName setBehaviourStrong behaviour", "syntax": "groupName setBehaviourStrong behaviour"}, "setBleedingRemaining": {"version": "CMD", "tags": "", "description": "Sets for how many seconds injured unit leaves blood trail. The unit damage must be >= 0.1 for this command to have an effect, otherwise, the getBleedingRemaining will return 0 and no blood trail is left behind.", "example": "_unit setBleedingRemaining 60;", "docSyntax": "unit setBleedingRemaining time", "syntax": "<objUnit> setBleedingRemaining <scalar>"}, "setBrakesRTD": {"version": "CMD", "tags": "", "description": "Enable landing gear wheel brakes for a helicopter.", "example": "myHelicopterRTD setBrakesRTD [1, 3];", "docSyntax": "helicopterRTD setBrakesRTD [value, wheelIndex]", "syntax": "helicopterRTD setBrakesRTD [<scalar>,wheelIndex]"}, "setCameraInterest": {"version": "CMD", "tags": "", "description": "Set camera interest for given entity. Camera interest is by default 0. Any unit which is speaking has its camera interest raised to 50. Camera interest is used to focus camera to control depth of field in cutscenes. Combination of camera interest, unit position of the screen, unit movement, unit type, and some other properties is used to determine which unit to focus at. Higher camera interest increases the chance of the unit being focused.", "example": "_soldier setCameraInterest 50;", "docSyntax": "entity setCameraInterest interest", "syntax": "entity setCameraInterest interest"}, "setCamShakeDefParams": {"version": "CMD", "tags": "", "description": "Sets camera shake default parameters.", "example": "setCamShakeDefParams [1, 2, 3, 4, 5, .5, .5];", "docSyntax": "setCamShakeDefParams [power, duration, frequency, minSpeed, minMass, caliberCoefHit, vehicleCoef]", "syntax": "setCamShakeDefParams [power,duration,frequency,minSpeed,minMass,caliberCoefHit,vehicleCoef]"}, "setCamShakeParams": {"version": "CMD", "tags": "", "description": "Sets camera shake parameters. Will not have any effect until shake is started via addCamShake.", "example": "setCamShakeParams [0.1, 1, 1, 1, true];", "docSyntax": "setCamShakeParams [posCoef, vertCoef, horzCoef, bankCoef, interpolation]", "syntax": "setCamShakeParams [posCoef,vertCoef,horzCoef,bankCoef,interpolation]"}, "setCamUseTI": {"version": "CMD", "tags": "", "description": "Sets thermal vision mode for currently used camera. This command only works with camCreate created camera that is currently the main camera for the player (see Example 2).", "example": "true setCamUseTI 1;", "docSyntax": "state setCamUseTI modeIndex", "syntax": "state setCamUseTI modeIndex"}, "setCaptive": {"version": "CMD", "tags": "", "description": "Mark a unit as captive. If unit is a vehicle, commander is marked. A captive unit:", "example": "_soldier1 setCaptive true; side _soldier1; //\u00a0returns civilian side group _soldier1; //\u00a0returns e.g blufor", "docSyntax": "unitName setCaptive status", "syntax": "<objUnit> setCaptive status"}, "setCenterOfMass": {"version": "CMD", "tags": "", "description": "Changes the center of mass of an object smoothly during the given time (in seconds). A time of zero (or using the alternative syntax) means an immediate change.", "example": "myObject setCenterOfMass [[0,-1,0], 0.5];", "docSyntax": "myObject setCenterOfMass [centerOfMass, time]", "syntax": "myObject setCenterOfMass [centerOfMass,<scalar>]"}, "setCollisionLight": {"version": "CMD", "tags": "", "description": "Switches collision lights of a vehicle on/off.", "example": "heli setCollisionLight true;", "docSyntax": "vehicle setCollisionLight set", "syntax": "<objVehicle> setCollisionLight set"}, "setCombatBehaviour": {"version": "CMD", "tags": "", "description": "Sets an individual unit entity behaviour (main syntax) or a group entity behaviour (alternative syntax). The group in this case is a Group entity and not a simple collection of units. To retrieve unit or group behaviour see combatBehaviour. The behaviour is one of:", "example": "unit1 setCombatBehaviour \"SAFE\";", "docSyntax": "unit setCombatBehaviour behaviour", "syntax": "<objUnit> setCombatBehaviour behaviour"}, "setCombatMode": {"version": "CMD", "tags": "", "description": "Sets AI group combat mode (engagement rules). For individual unit's combat mode see setUnitCombatMode. Mode may be one of the following:", "example": "_group1 setCombatMode \"BLUE\";", "docSyntax": "group setCombatMode mode", "syntax": "<objGroup> setCombatMode mode"}, "setCompassOscillation": {"version": "CMD", "tags": "", "description": "This command sets random heading on the player's compass (both in map and in 3D view) with given frequency, which is also randomised.", "example": "Set compass to oscillate every second within -90/+90 degrees:", "docSyntax": "setCompassOscillation [angle, frequencyMin, frequencyMax]", "syntax": "setCompassOscillation [angle,frequencyMin,frequencyMax]"}, "setConvoySeparation": {"version": "CMD", "tags": "", "description": "Sets the distance to keep to the vehicle which is in front.", "example": "vehicle setConvoySeparation 20;", "docSyntax": "vehicle setConvoySeparation distance", "syntax": "<objVehicle> setConvoySeparation <scalar>"}, "setCruiseControl": {"version": "CMD", "tags": "", "description": "Limits or sets local player-controlled vehicle's speed through cruise control.", "example": "vehicle player setCruiseControl [50, true]; //\u00a0sets cruise control to 50 km/h", "docSyntax": "vehicle setCruiseControl [speed, autoThrust]", "syntax": "<objVehicle> setCruiseControl [<scalar>,autoThrust]"}, "setCuratorCameraAreaCeiling": {"version": "CMD", "tags": "", "description": "Sets maximal (ATL) height to which curator camera can move.", "example": "myCurator setCuratorCameraAreaCeiling 50;", "docSyntax": "curatorObj setCuratorCameraAreaCeiling height", "syntax": "<objCurator> setCuratorCameraAreaCeiling height"}, "setCuratorCoef": {"version": "CMD", "tags": "", "description": "Sets coef for some action (coef have to be bigger than -1 000 000, anything lower is considered as disabled action).", "example": "curatorModule setCuratorCoef [\"Place\", 1];", "docSyntax": "curatorObj setCuratorCoef [action, coef]", "syntax": "<objCurator> setCuratorCoef [action,<scalar>]"}, "setCuratorEditingAreaType": {"version": "CMD", "tags": "", "description": "Set whether curator can edit in all editing areas (true) or outside of them (false).", "example": "curatorModule setCuratorEditingAreaType true;", "docSyntax": "curatorObj setCuratorEditingAreaType bool", "syntax": "<objCurator> setCuratorEditingAreaType <bool>"}, "setCuratorSelected": {"version": "CMD", "tags": "", "description": "Clear and set the curator selected items. Leave the items array empty to clear curator selection.", "example": "setCuratorSelected [unit1, group1, [group1, waypointIndex], markerName1];", "docSyntax": "setCuratorSelected items", "syntax": "setCuratorSelected items"}, "setCuratorSelectionPreset": {"version": "CMD", "tags": "", "description": "Set the list of objects in the given selection preset. Only Object is supported in selection presets, unlike curatorSelected which also returns the selected Group, Waypoint, and Marker String", "example": "1 setCuratorSelectionPreset [object1, object2];", "docSyntax": "numkey setCuratorSelectionPreset objects", "syntax": "numkey setCuratorSelectionPreset objects"}, "setCuratorWaypointCost": {"version": "CMD", "tags": "", "description": "Sets cost of waypoints (used for placing, editing and deleting).", "example": "myCurator setCuratorWaypointCost 0.1;", "docSyntax": "curatorObj setCuratorWaypointCost cost", "syntax": "<objCurator> setCuratorWaypointCost cost"}, "setCurrentChannel": {"version": "CMD", "tags": "", "description": "Sets given channel as current chat channel. Scripted way of selecting desired channel on the UI. The given channel may be disabled (see enableChannel), this is why this command returns boolean, true on success or false on failure.", "example": "_isDirectSelected = setCurrentChannel 5; //\u00a0sets Direct channel as current active", "docSyntax": "setCurrentChannel channelID", "syntax": "setCurrentChannel channelID"}, "setCurrentTask": {"version": "CMD", "tags": "", "description": "Set the task as a current task of the person.", "example": "player setCurrentTask tskKillSpongebob;", "docSyntax": "object setCurrentTask task", "syntax": "<object> setCurrentTask <objTask>"}, "setCurrentWaypoint": {"version": "CMD", "tags": "", "description": "Sets the currently active waypoint for a group.", "example": "_grp setCurrentWaypoint [_grp, 1];", "docSyntax": "groupName setCurrentWaypoint waypoint", "syntax": "groupName setCurrentWaypoint waypoint"}, "setCustomAimCoef": {"version": "CMD", "tags": "", "description": "Set custom aim precision coefficient for weapon sway", "example": "player setCustomAimCoef 3;", "docSyntax": "unit setCustomAimCoef coef", "syntax": "<objUnit> setCustomAimCoef <scalar>"}, "setCustomMissionData": {"version": "CMD", "tags": "", "description": "Defines custom mission text that is sent to Arma 3 Analytics.", "example": "setCustomMissionData [\"someData\", \"someMoreData\"];", "docSyntax": "setCustomMissionData data", "syntax": "setCustomMissionData data"}, "setCustomSoundController": {"version": "CMD", "tags": "", "description": "Sets value of the specified custom sound controller to be used in simple expressions in config. Returns true if value was set to the controller, false if command fails, for example if vehicle is not a transport or controller name is not recognised.", "example": "Change value of CustomSoundController1 to 12", "docSyntax": "setCustomSoundController [vehicle, controller, value]", "syntax": "setCustomSoundController [<objVehicle>,controller,<scalar>]"}, "setCustomWeightRTD": {"version": "CMD", "tags": "", "description": "Add virtual custom weight to a helicopter's center of gravity. This can be used to simulate added internal payload for specific scenarios, and affects the flight model.", "example": "myHelicopterRTD setCustomWeightRTD 120;", "docSyntax": "helicopterRTD setCustomWeightRTD weight", "syntax": "helicopterRTD setCustomWeightRTD weight"}, "setDamage": {"version": "CMD", "tags": "", "description": "Event Handler", "example": "_soldier1 setDamage 1;", "docSyntax": "object setDamage damage", "syntax": "<object> setDamage <scalar>"}, "setDammage": {"version": "CMD", "tags": "", "description": "Entirely identical to setDamage that was introduced to fix a typographical error in the command's name.", "example": "-", "docSyntax": "-", "syntax": "-"}, "setDate": {"version": "CMD", "tags": "", "description": "Sets mission date and time. Players joining after mission start will get the current server date including the year.", "example": "setDate [1986, 2, 25, 16, 0]; //\u00a04:00pm February 25, 1986", "docSyntax": "setDate date", "syntax": "setDate date"}, "setDebriefingText": {"version": "CMD", "tags": "", "description": "Sets debriefing title, text, subtitle, picture and background for a mission ending. The end type could be the engine-defined (\"CONTINUE\", \"KILLED\", \"LOSER\", \"END1\", \"END2\", \"END3\", \"END4\", \"END5\", \"END6\"), config-defined (see CfgDebriefing) or, with an alternative syntax of this command, any String. Given texts will be used to replace the corresponding texts on the debriefing screen.", "example": "_currentObjective = (taskDescription (currentTask player)) select 2; \"endDeath\" setDebriefingText [\"You Lose\",\"All of your men were killed while assaulting the \" + _currentObjective];", "docSyntax": "endType setDebriefingText [title, description]", "syntax": "endType setDebriefingText [title,description]"}, "setDefaultCamera": {"version": "CMD", "tags": "", "description": "Sets the position and direction for the camera used after camera is set on no object (log out view when leaving MP game for example)", "example": "setDefaultCamera [[5000, 5000, 200], [1, 1, -1]];", "docSyntax": "setDefaultCamera [position, direction]", "syntax": "setDefaultCamera [position,direction]"}, "setDestination": {"version": "CMD", "tags": "", "description": "Set the destination for path planning of the pilot. Possible values for planningMode are:", "example": "bob setDestination [screenToWorld [0.5,0.5], \"LEADER PLANNED\", true];", "docSyntax": "object setDestination [position, planningMode, forceReplan]", "syntax": "<object> setDestination [position,planningMode,forceReplan]"}, "setDetailMapBlendPars": {"version": "CMD", "tags": "", "description": "Sets the detail texture map blend pars. Allows for smooth transition between detailed and undetailed terrain texture at distance.", "example": "setDetailMapBlendPars [20, 50];", "docSyntax": "setDetailMapBlendPars [fullDetail, noDetail]", "syntax": "setDetailMapBlendPars [fullDetail,noDetail]"}, "setDiaryRecordText": {"version": "CMD", "tags": "", "description": "Set text of a log record.", "example": "player setDiaryRecordText [[\"diary\", _diaryRec], [\"Kill all enemies.\", \"The enemies are the bad guys. Kill them because you are the good guy.\"]];", "docSyntax": "unit setDiaryRecordText [[subject, diaryRecord], [title, text, icon]]", "syntax": "<objUnit> setDiaryRecordText [[<string>,diaryRecord],[title,<string>,icon]]"}, "setDiarySubjectPicture": {"version": "CMD", "tags": "", "description": "Sets a picture to be displayed on the right of the Diary subject. The picture can also be set during custom Diary subject creation, but this command also allows to change icon for the fixed subjects, like \"Tasks\", \"Diary\", \"Units\", \"Players\" and \"Statistics\".", "example": "player setDiarySubjectPicture [\"Diary\", \"\\A3\\ui_f\\data\\map\\markers\\nato\\o_mech_inf.paa\"];", "docSyntax": "unit setDiarySubjectPicture [subject, picture]", "syntax": "<objUnit> setDiarySubjectPicture [<string>,picture]"}, "setDir": {"version": "CMD", "tags": "", "description": "Sets object heading. Angles are measured in degrees clockwise from north; the regular range goes from 0 to 360 (0\u00b0 = N, 90\u00b0 = E, 180\u00b0 = S, 270\u00b0 = W). Negative angles represent counter-clockwise angles.", "example": "myUnit setDir 45; //\u00a0will set myUnit to face North-East", "docSyntax": "object setDir heading", "syntax": "<object> setDir heading"}, "setDirection": {"version": "CMD", "tags": "", "description": "Sets the orientation of a location. The location's area and map icon (if its type uses an icon) will be rotated to this orientation.", "example": "_location = createLocation [\"VegetationPalm\", getPos player, 200, 200]; _location setText \"Benargee's Palm Tree\"; _location setDirection 45;", "docSyntax": "location setDirection direction", "syntax": "location setDirection direction"}, "setDrawIcon": {"version": "CMD", "tags": "", "description": "Set the icon to be shown in 2D editor for the specified editor object. If maintain size is false,icon will not scale depending on the scale,of the map. If maintain size is a number,the icon will maintain size,if map scale is below that number. is3D,show line and priority are,optional.", "example": "-", "docSyntax": "map setDrawIcon [object,texture,color,offset,width,height,maintain size?,angle,string identifier,shadow,is3D,draw line?,priority]", "syntax": "<objMap> setDrawIcon [<object>,<string>,<scalar>,offset,width,height,maintain size?,angle,<string> identifier,shadow,is3D,draw line?,priority]"}, "setDriveOnPath": {"version": "CMD", "tags": "", "description": "Sets the path to follow for AI driver. Note that unitReady will return true even if AI is still driving through the points.", "example": "myVehicle setDriveOnPath [getMarkerPos \"wp1\", getMarkerPos \"wp2\"];", "docSyntax": "vehicleName setDriveOnPath points", "syntax": "vehicleName setDriveOnPath <scalar>"}, "setDropInterval": {"version": "CMD", "tags": "", "description": "Set interval of emitting particles from particle source. In Arma 3 hardcoded limit of how many particles can exist at the same time is 18000. Correspondence between CfgCloudlets class param name and command param:", "example": "_source setDropInterval 0.05;", "docSyntax": "particleSource setDropInterval interval", "syntax": "particleSource setDropInterval interval"}, "setDynamicSimulationDistance": {"version": "CMD", "tags": "", "description": "Sets activation distance of Arma 3: Dynamic Simulation for given category.", "example": "\"Group\" setDynamicSimulationDistance 1000;", "docSyntax": "category setDynamicSimulationDistance distance", "syntax": "category setDynamicSimulationDistance <scalar>"}, "setDynamicSimulationDistanceCoef": {"version": "CMD", "tags": "", "description": "Sets activation distance multiplier of Arma 3: Dynamic Simulation for the given class", "example": "\"IsMoving\" setDynamicSimulationDistanceCoef 3;", "docSyntax": "class setDynamicSimulationDistanceCoef multiplier", "syntax": "class setDynamicSimulationDistanceCoef multiplier"}, "setEditorMode": {"version": "CMD", "tags": "", "description": "Sets map mode to MAP,3D or PREVIEW.", "example": "-", "docSyntax": "map setEditorMode mode", "syntax": "<objMap> setEditorMode mode"}, "setEditorObjectScope": {"version": "CMD", "tags": "", "description": "This command defines the level of access a user has to editor objects. \"objects\" is an array of either Editor Objects (eg [\"_unit_0\"]) or actual Game Objects (eg [player]). If the array is empty then the command will automatically parse all editor objects. \"editorType\" is the editor type to effect (eg \"unit\", \"vehicle\", \"center\") or \"\" for all types. \"condition\" is an executable string that must evaluate to true or false. If true, the scope of the evaluated editor object will be modified. \"_x\" can be used in the string as reference to the ingame representation of the currently processed array member. \"scope\" is one of \"HIDE\", \"VIEW\", \"SELECT\", \"LINKTO\", \"LINKFROM\", \"ALLNODRAG\", \"ALLNOTREE\", \"ALLNOCOPY\", \"ALLNOSELECT\" or \"ALL\". \"subordinatesAlso\" is a boolean value. If true then subordinates in the editor will be assigned the same scope as the parent.", "example": "_map setEditorObjectScope [[],\"vehicle\", \"side effectiveCommander _x\u00a0!= side player\", \"HIDE\", false];", "docSyntax": "map setEditorObjectScope [objects, editorType, condition, scope, subordinatesAlso]", "syntax": "<objMap> setEditorObjectScope [objects,editorType,condition,scope,subordinatesAlso]"}, "setEffectCondition": {"version": "CMD", "tags": "", "description": "The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result.", "example": "_triggerObj setEffectCondition \"thisList\";", "docSyntax": "trigger setEffectCondition statement", "syntax": "<objTrigger> setEffectCondition statement"}, "setEffectiveCommander": {"version": "CMD", "tags": "", "description": "Sets effectiveCommander of the given vehicle. Effective commander is the person who commands the vehicle, i.e. gives commands to the driver. Every time a person gets in or out of a vehicle, effective commander eligibility is recalculated by the engine based on the current crew. Use this command to force desired effective commander.", "example": "vehicle player setEffectiveCommander player;", "docSyntax": "vehicle setEffectiveCommander person", "syntax": "<objVehicle> setEffectiveCommander <objUnit>"}, "setEngineRpmRTD": {"version": "CMD", "tags": "", "description": "Sets the RPM of given engines.", "example": "myHelicopter setEngineRpmRTD [1337, -1];", "docSyntax": "helicopter setEngineRpmRTD [rpm, engineIndex]", "syntax": "helicopter setEngineRpmRTD [rpm,engineIndex]"}, "setFace": {"version": "CMD", "tags": "", "description": "Set person's face. For a list of available faces, check Category:CfgIdentities.", "example": "soldier1 setFace \"WhiteHead_02\";", "docSyntax": "person setFace face", "syntax": "<objUnit> setFace face"}, "setFaceAnimation": {"version": "CMD", "tags": "", "description": "Sets facial animation phase (eye blinking).", "example": "_soldier1 setFaceAnimation 0.5;", "docSyntax": "unit setFaceAnimation blink", "syntax": "<objUnit> setFaceAnimation blink"}, "setFatigue": {"version": "CMD", "tags": "", "description": "Sets the person's fatigue, from 0 to 1.", "example": "player setFatigue 1;", "docSyntax": "unit setFatigue value", "syntax": "<objUnit> setFatigue <scalar>"}, "setFeatureType": {"version": "CMD", "tags": "", "description": "Enable/disable object as a feature/landmark. Possible feature types:", "example": "Set a building to be always rendered:", "docSyntax": "object setFeatureType type", "syntax": "<object> setFeatureType type"}, "setFlagAnimationPhase": {"version": "CMD", "tags": "", "description": "Sets flag position on the flag pole. To animate flag use BIS_fnc_animateFlag.", "example": "_flag1 setFlagAnimationPhase 0.5;", "docSyntax": "flag setFlagAnimationPhase phase", "syntax": "<objFlag> setFlagAnimationPhase phase"}, "setFlagOwner": {"version": "CMD", "tags": "", "description": "Sets flag owner. When owner is set to objNull or any object other than a unit of class man or logic, flag is returned to the flagpole. A flag owned by a logic has no visual representation.", "example": "_flag1 setFlagOwner _soldier1;", "docSyntax": "flag setFlagOwner owner", "syntax": "<objFlag> setFlagOwner owner"}, "setFlagSide": {"version": "CMD", "tags": "", "description": "Sets flag Side. A flag may be taken by any unit that is enemy to the side that owns the flag. Just like with setFlagTexture, if the command executed where unit is local effect of the command will be global and JIP compatible.", "example": "_flag1 setFlagSide east;", "docSyntax": "flag setFlagSide side", "syntax": "<objFlag> setFlagSide <objSide>"}, "setFlagTexture": {"version": "CMD", "tags": "", "description": "Sets flag texture.", "example": "_flagE setFlagTexture \"\\ca\\misc\\data\\sever_vlajka.paa\";", "docSyntax": "flag setFlagTexture texture", "syntax": "<objFlag> setFlagTexture <string>"}, "setFog": {"version": "CMD", "tags": "", "description": "Smoothly change the fog over given time (in seconds). See also fogParams.", "example": "15 setFog 0.5;", "docSyntax": "time setFog fog", "syntax": "<scalar> setFog fog"}, "setForceGeneratorRTD": {"version": "CMD", "tags": "", "description": "This article is a Stub. You can help BI Community Wiki by expanding it.", "example": "something1 setForceGeneratorRTD something2;", "docSyntax": "value setForceGeneratorRTD arr", "syntax": "<scalar> setForceGeneratorRTD arr"}, "setFormation": {"version": "CMD", "tags": "", "description": "Set group formation.", "example": "_groupOne setFormation \"LINE\";", "docSyntax": "group setFormation formation", "syntax": "<objGroup> setFormation formation"}, "setFormationTask": {"version": "CMD", "tags": "", "description": "Set the current task of the formation member.", "example": "_unit setFormationTask \"MOVE\";", "docSyntax": "unit setFormationTask task", "syntax": "<objUnit> setFormationTask <objTask>"}, "setFormDir": {"version": "CMD", "tags": "", "description": "Sets group formation heading. Accepted heading range is 0 to 360. Formation is facing this direction unless enemy is seen. When group is moving, this value is overridden by movement direction. If the new direction is noticeably different from the old direction (approx +/- 15 degrees), units will change positions changing formationDirection.", "example": "_group1 setFormDir 180;", "docSyntax": "group setFormDir heading", "syntax": "<objGroup> setFormDir heading"}, "setFriend": {"version": "CMD", "tags": "", "description": "Sets how friendly a side is with another. The friendliness is set for one side, not for the other. See also Side Relations.", "example": "west setFriend [resistance, 0]; //\u00a0west will not like resistance from now on", "docSyntax": "side1 setFriend [side2, value]", "syntax": "side1 setFriend [side2,<scalar>]"}, "setFromEditor": {"version": "CMD", "tags": "", "description": "Set if given team member was inserted directly from editor.", "example": "_teamMember setFromEditor true;", "docSyntax": "teamMember setFromEditor fromEditor", "syntax": "teamMember setFromEditor fromEditor"}, "setFSMVariable": {"version": "CMD", "tags": "", "description": "Set variable to given value in the variable space of given FSM.", "example": "_handle = execFSM \"test.fsm\"; _handle setFSMVariable [\"_foo\", 23]; //\u00a0sets variable _foo in the FSM to 23", "docSyntax": "handle setFSMVariable [name, value]", "syntax": "handle setFSMVariable [<string>,<scalar>]"}, "setFuel": {"version": "CMD", "tags": "", "description": "Sets fuel level.", "example": "_jeepOne setFuel 0.5;", "docSyntax": "vehicle setFuel amount", "syntax": "<objVehicle> setFuel amount"}, "setFuelCargo": {"version": "CMD", "tags": "", "description": "Sets fuel amount in cargo space of refuel vehicles. Note that the carrying capacity of each side's refuel trucks differ.", "example": "_refuelTruck setFuelCargo 0;", "docSyntax": "vehicle setFuelCargo amount", "syntax": "<objVehicle> setFuelCargo amount"}, "setFuelConsumptionCoef": {"version": "CMD", "tags": "", "description": "Sets the fuel consumption coefficient, which is a multiplier of the fuel consumption rate in config. It doesn't affect fuel leakage or refueling.", "example": "myTank setFuelConsumptionCoef 10; //\u00a0consume 10x more fuel than default", "docSyntax": "vehicle setFuelConsumptionCoef coef", "syntax": "<objVehicle> setFuelConsumptionCoef <scalar>"}, "setGroupIcon": {"version": "CMD", "tags": "", "description": "Sets group icon properties.", "example": "_target setGroupIcon [_icon, \"hc_selectedEnemy\"]; _target setGroupIcon [_icon, \"flag\"]; _group setGroupIcon [_icon, _iconsClass, _offset];", "docSyntax": "group setGroupIcon [id, icon, offset]", "syntax": "<objGroup> setGroupIcon [<scalar>,icon,offset]"}, "setGroupIconParams": {"version": "CMD", "tags": "", "description": "Set group icons parameters.", "example": "_grp setGroupIconParams [[0.9,0,0,1], \"The Group\", 1.25, false];", "docSyntax": "group setGroupIconParams properties", "syntax": "<objGroup> setGroupIconParams properties"}, "setGroupIconsSelectable": {"version": "CMD", "tags": "", "description": "Sets if group icons raise onGroupIconClick, onGroupIconOverEnter and onGroupIconOverLeave events.", "example": "setGroupIconsSelectable true;", "docSyntax": "setGroupIconsSelectable selectable", "syntax": "setGroupIconsSelectable selectable"}, "setGroupIconsVisible": {"version": "CMD", "tags": "", "description": "Sets if group icons added with addGroupIcon are visible on map and in the HUD.", "example": "setGroupIconsVisible [true, true]; (group player) addGroupIcon [\"b_inf\", [0, 0]];", "docSyntax": "setGroupIconsVisible [showOnMap, showOnHUD]", "syntax": "setGroupIconsVisible [showOnMap,showOnHUD]"}, "setGroupId": {"version": "CMD", "tags": "", "description": "Sets the group radio callsign, how it will be displayed in radio chat. Two groups on the same side cannot have the same callsign (possible on different sides) - see Example 4.", "example": "Arma 3:", "docSyntax": "group setGroupId [nameFormat, nameParam1, nameParam2, ...]", "syntax": "<objGroup> setGroupId [nameFormat,nameParam1,nameParam2,...]"}, "setGroupIdGlobal": {"version": "CMD", "tags": "", "description": "A global equivalent of setGroupId.", "example": "group player setGroupIdGlobal [\"PAPA BEAR\"]; hint groupId group player; //\u00a0\"PAPA BEAR\"", "docSyntax": "group setGroupIdGlobal [format, keyword1, keyword2, ...]", "syntax": "<objGroup> setGroupIdGlobal [format,keyword1,keyword2,...]"}, "setGroupOwner": {"version": "CMD", "tags": "", "description": "Changes the ownership of a group (and all its units) to a given client. The group leader must not be a player. This command only works when called from the server. Returns true if locality was changed. For agents use setOwner command.", "example": "_localityChanged = _someGroup setGroupOwner (owner _playerObject);", "docSyntax": "group setGroupOwner clientID", "syntax": "<objGroup> setGroupOwner clientID"}, "setGusts": {"version": "CMD", "tags": "", "description": "Changes the gusts value smoothly during the given time (in seconds). A time of zero means there will be an immediate change. Value is 0 to 1.", "example": "60 setGusts 0.75;", "docSyntax": "time setGusts value", "syntax": "<scalar> setGusts <scalar>"}, "setHideBehind": {"version": "CMD", "tags": "", "description": "Sets the data for hiding. objectWhereHide can be taken using findCover. hidePosition can be taken using getHideFrom. Command is not functional in Arma 2.", "example": "-", "docSyntax": "object setHideBehind [objectWhereHide, hidePosition]", "syntax": "<object> setHideBehind [objectWhereHide,hidePosition]"}, "setHit": {"version": "CMD", "tags": "", "description": "Event Handler", "example": "vehicle player setHit [\"motor\", 1];", "docSyntax": "object setHit [part, damage, useEffects, killer, instigator]", "syntax": "<object> setHit [part,<scalar>,useEffects,<objUnit>,instigator]"}, "setHitIndex": {"version": "CMD", "tags": "", "description": "Sets the current level of damage for a specific Hit Point. All hit points can be obtained with getAllHitPointsDamage command.", "example": "vehicle player setHitIndex [1, 1];", "docSyntax": "vehicle setHitIndex [hitPartIndex, damage, useEffects, killer, instigator]", "syntax": "<objVehicle> setHitIndex [hitPartIndex,<scalar>,useEffects,<objUnit>,instigator]"}, "setHitPointDamage": {"version": "CMD", "tags": "", "description": "Event Handler", "example": "vehicle player setHitPointDamage [\"hitEngine2\", 1.0];", "docSyntax": "vehicle setHitPointDamage [hitPointName, damage, useEffects, killer, instigator]", "syntax": "<objVehicle> setHitPointDamage [hitPointName,<scalar>,useEffects,<objUnit>,instigator]"}, "setHorizonParallaxCoef": {"version": "CMD", "tags": "", "description": "Sets coef used to shift horizon position based on camera height (use 0 to disable shifting).", "example": "setHorizonParallaxCoef 1;", "docSyntax": "setHorizonParallaxCoef coef", "syntax": "setHorizonParallaxCoef <scalar>"}, "setHUDMovementLevels": {"version": "CMD", "tags": "", "description": "Set min/max movement borders displayed in HUD gauges. Use -1 to skip some value.", "example": "setHUDMovementLevels [20, 30, -1, -1, 0.23, 2.1, [0,0,0]];", "docSyntax": "setHUDMovementLevels [minSpeed, maxSpeed, minAlt, maxAlt, minDir, maxDir, targetOrPosition]", "syntax": "setHUDMovementLevels [minSpeed,maxSpeed,minAlt,maxAlt,minDir,maxDir,targetOrPosition]"}, "setHumidity": {"version": "CMD", "tags": "", "description": "Sets surface humidity. Affects how footsteps sound (dry / wet). humidity is increasing when raining and decreasing when not raining. Exception is if the rain is set with 'snow' flag, then humidity is not updated.", "example": "setHumidity 1;", "docSyntax": "setHumidity humidity", "syntax": "setHumidity humidity"}, "setIdentity": {"version": "CMD", "tags": "", "description": "Sets identity of a person. The identities could be defined in a custom config in Description.ext or in the main config. For a list of available main config values see CfgIdentities.", "example": "_soldier1 setIdentity \"MyLittleSoldier\";", "docSyntax": "person setIdentity identity", "syntax": "<objUnit> setIdentity identity"}, "setImportance": {"version": "CMD", "tags": "", "description": "Sets the importance value of location.", "example": "myLocation setImportance 2;", "docSyntax": "location setImportance value", "syntax": "location setImportance <scalar>"}, "setInfoPanel": {"version": "CMD", "tags": "", "description": "Opens given component or first component of given component type on specified info panel.", "example": "//\u00a0opens slingload assistant on right panel private _result = setInfoPanel [\"VehicleSystemsDisplayManagerComponentRight\", \"SlingLoadDisplayComponent\"]; if (!_result) then { hint \"could not open the slingload assistant, sorry\" };", "docSyntax": "setInfoPanel [infoPanelId, componentClassOrType]", "syntax": "setInfoPanel [infoPanelId,componentClassOrType]"}, "setLeader": {"version": "CMD", "tags": "", "description": "\u26a0", "docSyntax": "team setLeader leader", "syntax": "team setLeader leader"}, "setLightAmbient": {"version": "CMD", "tags": "", "description": "Set ambient color of light. This includes surfaces that face away from the light, unlike setLightColor.", "example": "myLight setLightAmbient [0.5,0,0]; //\u00a0produces red light around the origin source", "docSyntax": "light setLightAmbient color", "syntax": "light setLightAmbient <scalar>"}, "setLightAttenuation": {"version": "CMD", "tags": "", "description": "Sets attenuation of light. Standard method of attenuation (1 / (constant + linear*dist + quadratic*dist*dist)). start param represents distance where the attenuation starts to take effects (dist = distance - start).", "example": "myLight setLightAttenuation [2, 4, 4, 0, 9, 10];", "docSyntax": "light setLightAttenuation [start, constant, linear, quadratic, hardlimitstart, hardlimitend]", "syntax": "light setLightAttenuation [start,constant,linear,quadratic,hardlimitstart,hardlimitend]"}, "setLightBrightness": {"version": "CMD", "tags": "", "description": "Set brightness of light.", "example": "myLight setLightBrightness 2;", "docSyntax": "light setLightBrightness brightness", "syntax": "light setLightBrightness brightness"}, "setLightColor": {"version": "CMD", "tags": "", "description": "Set diffuse color of light. Illuminates surfaces that are facing the light.", "example": "myLight setLightColor [0.5,0,0]; //\u00a0produces red", "docSyntax": "light setLightColor [r, g, b]", "syntax": "light setLightColor [r,g,b]"}, "setLightConePars": {"version": "CMD", "tags": "", "description": "Sets the lightpoint (directional light #lightreflector)'s cone params.", "example": "_light setLightConePars [90, 45, 1];", "docSyntax": "lightReflector setLightConePars [outerAngle, innerAngle, fadeCoef]", "syntax": "lightReflector setLightConePars [outerAngle,innerAngle,fadeCoef]"}, "setLightDayLight": {"version": "CMD", "tags": "", "description": "Sets if light can be used during the day.", "example": "myLight setLightDayLight true;", "docSyntax": "light setLightDayLight bool", "syntax": "light setLightDayLight <bool>"}, "setLightFlareMaxDistance": {"version": "CMD", "tags": "", "description": "Sets max distance where the flare is visible.", "example": "myLight setLightFlareMaxDistance 500;", "docSyntax": "light setLightFlareMaxDistance distance", "syntax": "light setLightFlareMaxDistance <scalar>"}, "setLightFlareSize": {"version": "CMD", "tags": "", "description": "Sets relative size of the flare for the light.", "example": "myLight setLightFlareSize 5;", "docSyntax": "light setLightFlareSize size", "syntax": "light setLightFlareSize size"}, "setLightIntensity": {"version": "CMD", "tags": "", "description": "Sets intensity of light.", "example": "myLight setLightIntensity 4;", "docSyntax": "light setLightIntensity value", "syntax": "light setLightIntensity <scalar>"}, "setLightIR": {"version": "CMD", "tags": "", "description": "Sets lightpoint in infrared range.", "example": "myLight setLightIR true; //\u00a0visible with NVG only!", "docSyntax": "light setLightIR value", "syntax": "light setLightIR <scalar>"}, "setLightnings": {"version": "CMD", "tags": "", "description": "Changes the lightnings value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.", "example": "1800 setLightnings 0.7;", "docSyntax": "time setLightnings value", "syntax": "<scalar> setLightnings <scalar>"}, "setLightUseFlare": {"version": "CMD", "tags": "", "description": "Sets if light has flare.", "example": "myLight setLightUseFlare true;", "docSyntax": "light setLightUseFlare bool", "syntax": "light setLightUseFlare <bool>"}, "setLightVolumeShape": {"version": "CMD", "tags": "", "description": "Sets the lightpoint (directional light #lightreflector)'s volume shape.", "example": "_light setLightVolumeShape [\"a3\\data_f\\VolumeLightFlashlight.p3d\", [1, 1, 1]];", "docSyntax": "lightReflector setLightVolumeShape [shapePath, scale]", "syntax": "lightReflector setLightVolumeShape [shapePath,<scalar>]"}, "setLocalWindParams": {"version": "CMD", "tags": "", "description": "Sets parameters for helicopter rotor wash. It affects the visual effect of a rotor's downwash, such as blown particles, vegetation wind effect and area size.", "example": "setLocalWindParams [10, 5];", "docSyntax": "setLocalWindParams [strength, diameter]", "syntax": "setLocalWindParams [strength,diameter]"}, "setMagazineTurretAmmo": {"version": "CMD", "tags": "", "description": "Sets ammo count to given amount for given turret.", "example": "myMRAP setMagazineTurretAmmo [\"200Rnd_127x99_mag_Tracer_Red\", 30, [0]]];", "docSyntax": "vehicle setMagazineTurretAmmo [magazineClass, ammoCount, turretPath]", "syntax": "<objVehicle> setMagazineTurretAmmo [magazineClass,ammoCount,turretPath]"}, "setMarkerAlpha": {"version": "CMD", "tags": "", "description": "Sets the marker alpha. The marker is modified on all computers in a network session.", "example": "\"my_marker\" setMarkerAlpha 0.5;", "docSyntax": "marker setMarkerAlpha alpha", "syntax": "marker setMarkerAlpha alpha"}, "setMarkerAlphaLocal": {"version": "CMD", "tags": "", "description": "Sets the marker alpha.", "example": "\"my_marker\" setMarkerAlphaLocal 0.5;", "docSyntax": "marker setMarkerAlphaLocal alpha", "syntax": "marker setMarkerAlphaLocal alpha"}, "setMarkerBrush": {"version": "CMD", "tags": "", "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.", "example": "\"Marker1\" setMarkerBrush \"DIAGGRID\";", "docSyntax": "markerName setMarkerBrush brush", "syntax": "<string> setMarkerBrush brush"}, "setMarkerBrushLocal": {"version": "CMD", "tags": "", "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.", "example": "\"Marker1\" setMarkerBrushLocal \"DiagGrid\";", "docSyntax": "markerName setMarkerBrushLocal brush", "syntax": "<string> setMarkerBrushLocal brush"}, "setMarkerColor": {"version": "CMD", "tags": "", "description": "Sets marker color. Marker color names and their corresponding RGBA values for Arma 3 could be found here: Arma 3: CfgMarkerColors", "example": "\"MarkerOne\" setMarkerColor \"ColorBlack\";", "docSyntax": "markerName setMarkerColor color", "syntax": "<string> setMarkerColor <scalar>"}, "setMarkerColorLocal": {"version": "CMD", "tags": "", "description": "Sets marker color for the given marker locally. Marker color names and their corresponding RGBA values for Arma 3 could be found in here: Arma 3: CfgMarkerColors", "example": "\"MarkerOne\" setMarkerColorLocal \"ColorBlack\";", "docSyntax": "markerName setMarkerColorLocal color", "syntax": "<string> setMarkerColorLocal <scalar>"}, "setMarkerDir": {"version": "CMD", "tags": "", "description": "Sets the orientation of the marker. Angle is in degrees.", "example": "\"Marker1\" setMarkerDir 90;", "docSyntax": "markerName setMarkerDir angle", "syntax": "<string> setMarkerDir angle"}, "setMarkerDirLocal": {"version": "CMD", "tags": "", "description": "Sets the orientation of the marker.", "example": "\"Marker1\" setMarkerDirLocal 90;", "docSyntax": "markerName setMarkerDirLocal angle", "syntax": "<string> setMarkerDirLocal angle"}, "setMarkerDrawPriority": {"version": "CMD", "tags": "", "description": "Sets marker draw priority. Higher priority markers are drawn on top. Default priority is 0.", "example": "\"MarkerOne\" setMarkerDrawPriority 0.5;", "docSyntax": "markerName setMarkerDrawPriority priority", "syntax": "<string> setMarkerDrawPriority priority"}, "setMarkerPolyline": {"version": "CMD", "tags": "", "description": "Sets a polyline marker's path.", "example": "Changes \"marker_1\" into a polyline and draws a sine curve on player's position:", "docSyntax": "marker setMarkerPolyline path", "syntax": "marker setMarkerPolyline path"}, "setMarkerPolylineLocal": {"version": "CMD", "tags": "", "description": "Sets a polyline marker's path. Works only on the computer that executes this command.", "example": "Changes \"marker_1\" into a polyline and draws a sine curve on your position:", "docSyntax": "marker setMarkerPolylineLocal path", "syntax": "marker setMarkerPolylineLocal path"}, "setMarkerPos": {"version": "CMD", "tags": "", "description": "Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, its getPosWorld is used.", "example": "\"MarkerOne\" setMarkerPos getMarkerPos \"MarkerTwo\";", "docSyntax": "markerName setMarkerPos pos", "syntax": "<string> setMarkerPos <array>"}, "setMarkerPosLocal": {"version": "CMD", "tags": "", "description": "Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, its getPosWorld is used.", "example": "\"MarkerOne\" setMarkerPosLocal getMarkerPos \"MarkerTwo\";", "docSyntax": "markerName setMarkerPosLocal pos", "syntax": "<string> setMarkerPosLocal <array>"}, "setMarkerShadow": {"version": "CMD", "tags": "", "description": "Sets the shadow property of given marker.", "example": "_myMarker setMarkerShadow true; //\u00a0enable shadow", "docSyntax": "marker setMarkerShadow shadowState", "syntax": "marker setMarkerShadow shadowState"}, "setMarkerShadowLocal": {"version": "CMD", "tags": "", "description": "Sets the shadow property of given marker.", "example": "_myMarker setMarkerShadowLocal true; //\u00a0enable shadow", "docSyntax": "marker setMarkerShadowLocal shadowState", "syntax": "marker setMarkerShadowLocal shadowState"}, "setMarkerShape": {"version": "CMD", "tags": "", "description": "Selects shape (actual type) of the marker.", "example": "\"Marker1\" setMarkerShape \"RECTANGLE\";", "docSyntax": "markerName setMarkerShape shape", "syntax": "<string> setMarkerShape shape"}, "setMarkerShapeLocal": {"version": "CMD", "tags": "", "description": "Selects shape (actual type) of the local marker.", "example": "\"Marker1\" setMarkerShapeLocal \"RECTANGLE\";", "docSyntax": "markerName setMarkerShapeLocal shape", "syntax": "<string> setMarkerShapeLocal shape"}, "setMarkerSize": {"version": "CMD", "tags": "", "description": "Sets the marker's size.", "example": "\"MarkerOne\" setMarkerSize [100, 200];", "docSyntax": "markerName setMarkerSize [a-axis, b-axis]", "syntax": "<string> setMarkerSize [a-axis,b-axis]"}, "setMarkerSizeLocal": {"version": "CMD", "tags": "", "description": "Set marker size.", "example": "\"MarkerOne\" setMarkerSizeLocal [100, 200];", "docSyntax": "markerName setMarkerSizeLocal [axisA, axisB]", "syntax": "<string> setMarkerSizeLocal [axisA,axisB]"}, "setMarkerText": {"version": "CMD", "tags": "", "description": "Sets the text label of an existing marker.", "example": "\"Marker1\" setMarkerText \"You are here.\";", "docSyntax": "markerName setMarkerText text", "syntax": "<string> setMarkerText <string>"}, "setMarkerTextLocal": {"version": "CMD", "tags": "", "description": "Sets the text label of an existing marker.", "example": "\"Marker1\" setMarkerTextLocal \"You are here.\";", "docSyntax": "markerName setMarkerTextLocal text", "syntax": "<string> setMarkerTextLocal <string>"}, "setMarkerType": {"version": "CMD", "tags": "", "description": "Sets marker type. Marker type is a class name from CfgMarkers.", "example": "\"MarkerOne\" setMarkerType \"Warning\";", "docSyntax": "markerName setMarkerType type", "syntax": "<string> setMarkerType type"}, "setMarkerTypeLocal": {"version": "CMD", "tags": "", "description": "Sets marker type locally. Marker type is a class name in CfgMarkers.", "example": "\"MarkerOne\" setMarkerTypeLocal \"Warning\";", "docSyntax": "markerName setMarkerTypeLocal type", "syntax": "<string> setMarkerTypeLocal type"}, "setMass": {"version": "CMD", "tags": "", "description": "Changes the mass of a PhysX object. When using the alternative syntax the mass change is gradual during the given time. A time of zero means immediate change.", "example": "myObject setMass [10, 0.5];", "docSyntax": "myObject setMass mass", "syntax": "myObject setMass mass"}, "setMaxLoad": {"version": "CMD", "tags": "", "description": "Sets maximum load limit for a uniform/vest/backpack containers, vehicle cargo, supply boxes and weapon holders. In MP this command should be executed on the server and will persist on given container for JIP.", "example": "_yaMum setMaxLoad _maxLoad;", "docSyntax": "container setMaxLoad maxLoadValue", "syntax": "container setMaxLoad maxLoadValue"}, "setMimic": {"version": "CMD", "tags": "", "description": "Sets person's facial expression. To set it back to default, use \"\".", "example": "_soldier1 setMimic \"hurt\";", "docSyntax": "person setMimic mimic", "syntax": "<objUnit> setMimic mimic"}, "setMissileTarget": {"version": "CMD", "tags": "", "description": "Sets a guided missile target. Does not work for all types of missiles. If the target is dead, it is ignored. The target has to be inside the missile's configured targeting cone for the command to work.", "example": "missile1 setMissileTarget tank1;", "docSyntax": "munition setMissileTarget target", "syntax": "munition setMissileTarget <object>"}, "setMissileTargetPos": {"version": "CMD", "tags": "", "description": "Sets a guided munition target position. The munition must have manualControl config entry to use this command. The target position has to be inside the missile's configured targeting cone for the command to work.", "example": "missile1 setMissileTargetPos unitAimPosition tank1;", "docSyntax": "munition setMissileTargetPos position", "syntax": "munition setMissileTargetPos position"}, "setMousePosition": {"version": "CMD", "tags": "", "description": "Moves mouse pointer to specified position on the screen. x and y could be any number, but will be clipped so mouse never leaves the screen area.", "example": "setMousePosition [0.5, 0.5];", "docSyntax": "setMousePosition [x, y]", "syntax": "setMousePosition [x,y]"}, "setMusicEffect": {"version": "CMD", "tags": "", "description": "Defines a music track played on activation. If another track is playing already, this will stop it and start the new track. Track is a subclass name of CfgMusic. In addition, \"$STOP$\" (stops the current music track) or use playMusic \"\". When used in a trigger, the track starts on activation but does not automatically stop on deactivation.", "example": "_trigger setMusicEffect \"Track1\";", "docSyntax": "trigger setMusicEffect track", "syntax": "<objTrigger> setMusicEffect track"}, "setMusicEventHandler": {"version": "CMD", "tags": "", "description": "Sets given music track event handler. Will overwrite other music event handlers.", "example": "_ehID = setMusicEventHandler [\"MusicStart\", \"hint str _this\"];", "docSyntax": "setMusicEventHandler [type, function]", "syntax": "setMusicEventHandler [type,function]"}, "setName": {"version": "CMD", "tags": "", "description": "Sets the name of a location or a person (person only in single player).", "example": "myLocation setName \"My Location Name\";", "docSyntax": "thing setName name", "syntax": "thing setName <string>"}, "setNameSound": {"version": "CMD", "tags": "", "description": "Sets the nameSound of a person. By default, when giving orders, the units are addressed by their number. When nameSound is set, it will be used instead to address the unit. For example: \"Two, hold fire!\", one can have: \"Miller, hold fire!\".", "example": "unit1 setNameSound \"dixon\";", "docSyntax": "person setNameSound name", "syntax": "<objUnit> setNameSound <string>"}, "setObjectArguments": {"version": "CMD", "tags": "", "description": "Set object arguments in mission editor.", "example": "-", "docSyntax": "map setObjectArguments [object,[name1,value1,...]]", "syntax": "<objMap> setObjectArguments [<object>,[name1,value1,...]]"}, "setObjectMaterial": {"version": "CMD", "tags": "", "description": "Sets material of object selection. The selection number is defined through the hiddenselection[] = {} array in the vehicle's config (starting with 0).", "example": "car setObjectMaterial [0,\"A3\\Structures_F\\Data\\Windows\\window_set.rvmat\"]; car setObjectMaterial [1,\"A3\\Structures_F\\Data\\Windows\\window_set.rvmat\"];", "docSyntax": "obj setObjectMaterial [selectionNumber, material]", "syntax": "<object> setObjectMaterial [selectionNumber,material]"}, "setObjectMaterialGlobal": {"version": "CMD", "tags": "", "description": "Set the material of the given selection on all computers in a network session.", "example": "player setObjectMaterialGlobal [0, \"A3\\Structures_F\\Data\\Windows\\window_set.rvmat\"];", "docSyntax": "obj setObjectMaterialGlobal [selection, material]", "syntax": "<object> setObjectMaterialGlobal [selection,material]"}, "setObjectProxy": {"version": "CMD", "tags": "", "description": "Set the proxy object associated with the given editor object.", "example": "_map setObjectProxy [\"_group_0\", vehicle (leader _group)];", "docSyntax": "map setObjectProxy [object, proxy]", "syntax": "<objMap> setObjectProxy [<object>,proxy]"}, "setObjectScale": {"version": "CMD", "tags": "", "description": "Scales an attached object or a Simple Object's model - see Example 3 for various configurations' examples.", "example": "_vehicle attachTo [player, [0,0,0]]; _vehicle setObjectScale 0.1;", "docSyntax": "object setObjectScale scale", "syntax": "<object> setObjectScale <scalar>"}, "setObjectTexture": {"version": "CMD", "tags": "", "description": "Applies given texture to object's selection. See also Procedural Textures and Retexturing with setObjectTexture.", "example": "_objectname setObjectTexture [0, \"\\pboname\\texture.paa\"]; _objectname setObjectTexture [1, \"\\pboname\\texture2.paa\"];", "docSyntax": "object setObjectTexture [selection, texture]", "syntax": "<object> setObjectTexture [selection,<string>]"}, "setObjectTextureGlobal": {"version": "CMD", "tags": "", "description": "Set the texture of the given selection on all computers in a network session.", "example": "player setObjectTextureGlobal [0, \"\\MyAddon\\blue.paa\"];", "docSyntax": "object setObjectTextureGlobal [selection, texture]", "syntax": "<object> setObjectTextureGlobal [selection,<string>]"}, "setObjectViewDistance": {"version": "CMD", "tags": "", "description": "Sets the rendering distance of objects and shadows.", "example": "setObjectViewDistance 2000;", "docSyntax": "setObjectViewDistance objectDistance", "syntax": "setObjectViewDistance objectDistance"}, "setOpticsMode": {"version": "CMD", "tags": "", "description": "Sets the optic mode of the current weapon to the given class name or the index.", "example": "player setOpticsMode \"Hamr2Scope\"; //\u00a0Default optic mode for optic_Hamr", "docSyntax": "unit setOpticsMode mode", "syntax": "<objUnit> setOpticsMode mode"}, "setOvercast": {"version": "CMD", "tags": "", "description": "Set overcast to given value smoothly during given time (in seconds). Zero time means immediate change. An overcast setting of zero means clear (sunny) weather, and one means storms and rain are very likely. Higher overcast values also result in higher wind speeds.", "example": "60 setOvercast 0.5;", "docSyntax": "time setOvercast overcast", "syntax": "<scalar> setOvercast overcast"}, "setOwner": {"version": "CMD", "tags": "", "description": "From server machine, change the ownership of an object to a given client. Using command in an unintended way will log a message to .rpt file. To transfer ownership of all AI units in a group properly, use setGroupOwner instead.", "example": "_someObject setOwner 12;", "docSyntax": "object setOwner clientID", "syntax": "<object> setOwner clientID"}, "setOxygenRemaining": {"version": "CMD", "tags": "", "description": "Sets oxygen remaining. It has no effect when soldier is not diving. Oxygen remaining is a number between 0 and 1.", "example": "player setOxygenRemaining 0; //\u00a0drowns player", "docSyntax": "unit setOxygenRemaining value", "syntax": "<objUnit> setOxygenRemaining <scalar>"}, "setParticleCircle": {"version": "CMD", "tags": "", "description": "Updates particle source, creates particles in circle with given radius. Velocity is transformed and added to total velocity.", "example": "_myParticleSource setParticleCircle [3, [0,0,5]];", "docSyntax": "particleSource setParticleCircle [circleRadius, circleVelocity]", "syntax": "particleSource setParticleCircle [circleRadius,circleVelocity]"}, "setParticleClass": {"version": "CMD", "tags": "", "description": "Sets particle source parameters using existing particle config from CfgCloudlets class. Use setParticleParams subsequently if you need to overwrite some values.", "example": "_source01 = \"#particlesource\" createVehicleLocal _pos01; _source01 setParticleClass \"ObjectDestructionFire1Smallx\"; _source01 attachTo [_object,[0,0,0]];", "docSyntax": "source setParticleClass className", "syntax": "source setParticleClass className"}, "setParticleFire": {"version": "CMD", "tags": "", "description": "Set fire parameters to particle effect. Note: You need to create emitter at first. Basic parameters of particle effect must be defined too. You can use script commands setParticleClass or setParticleParams to do so (see example). Correspondence between CfgCloudlets class param names and command array of params:", "example": "_emitter = \"#particlesource\" createVehicleLocal (getPos player); _emitter setParticleClass \"MediumSmoke\"; _emitter setParticleFire [0.3,1.0,0.1];", "docSyntax": "source setParticleFire [coreIntensity, coreDistance, damageTime]", "syntax": "source setParticleFire [coreIntensity,coreDistance,damageTime]"}, "setParticleParams": {"version": "CMD", "tags": "", "description": "Set parameters to particle source. Array is in format ParticleArray.", "example": "see ParticleArray", "docSyntax": "particleSource setParticleParams array", "syntax": "particleSource setParticleParams <array>"}, "setParticleRandom": {"version": "CMD", "tags": "", "description": "Sets randomization of particle source parameters. Correspondence between CfgCloudlets class param names and command array of params:", "example": "_particleSource setParticleRandom [0, [0.1, 0.1, 0.1], [0, 0, 0.5], 0, 0.1, [0, 0, 0, 0], 0, 0, 45, 0];", "docSyntax": "particleSource setParticleRandom [lifeTime, position, moveVelocity, rotationVelocity, size, color, directionPeriod, directionIntensity, angle, bounceOnSurface]", "syntax": "particleSource setParticleRandom [lifeTime,position,moveVelocity,rotationVelocity,size,<scalar>,directionPeriod,directionIntensity,angle,bounceOnSurface]"}, "setPilotCameraDirection": {"version": "CMD", "tags": "", "description": "Sets the direction of airplane's or helicopter's pilotCamera.", "example": "vehicle player setPilotCameraDirection [0,1,0] //\u00a0re-centers the camera", "docSyntax": "object setPilotCameraDirection vector3D", "syntax": "<object> setPilotCameraDirection vector3D"}, "setPilotCameraOpticsMode": {"version": "CMD", "tags": "", "description": "Sets the optics mode index (zoom) for the pilotCamera", "example": "vehicle player setPilotCameraOpticsMode 0", "docSyntax": "object setPilotCameraOpticsMode index", "syntax": "<object> setPilotCameraOpticsMode <scalar>"}, "setPilotCameraRotation": {"version": "CMD", "tags": "", "description": "Sets rotation (relative to the centered camera position) of the object airplane or helicopter pilotCamera .", "example": "vehicle player setPilotCameraRotation [rad 90, rad 45];", "docSyntax": "object setPilotCameraRotation rotation", "syntax": "<object> setPilotCameraRotation <array>"}, "setPilotCameraTarget": {"version": "CMD", "tags": "", "description": "Sets an area or target to be tracked by the object airplane or helicopter pilotCamera. To track an object the vehicle has to have appropriate sensors (scanners) that can detect the given target type. Using objNull will unlock the camera", "example": "_pilotCamTrack = vehicle player setPilotCameraTarget [2100,4200,4.2];", "docSyntax": "object setPilotCameraTarget target", "syntax": "<object> setPilotCameraTarget <object>"}, "setPilotLight": {"version": "CMD", "tags": "", "description": "Switches headlights of a vehicle on/off. Note that the vehicle has to be local, for global variant use Arma 3 Actions \"LightOn\"/\"LightOff\"", "example": "car setPilotLight true;", "docSyntax": "vehicle setPilotLight set", "syntax": "<objVehicle> setPilotLight set"}, "setPiPEffect": {"version": "CMD", "tags": "", "description": "Sets Render Target's visual effect (Picture-in-Picture).", "example": "\"rendersurface\" setPiPEffect [0];", "docSyntax": "name setPiPEffect [effect, optionalParam1, optionalParam2, ...]", "syntax": "<string> setPiPEffect [effect,optionalParam1,optionalParam2,...]"}, "setPiPViewDistance": {"version": "CMD", "tags": "", "description": "Set the PiP (Picture-in-Picture) view distance. This has no impact if PiP is disabled (see isPiPEnabled).", "example": "setPiPViewDistance 100;", "docSyntax": "setPiPViewDistance distance", "syntax": "setPiPViewDistance <scalar>"}, "setPitch": {"version": "CMD", "tags": "", "description": "Sets the pitch of a persons voice.", "example": "unit1 setPitch 0.5;", "docSyntax": "person setPitch pitch", "syntax": "<objUnit> setPitch pitch"}, "setPlateNumber": {"version": "CMD", "tags": "", "description": "Change the license plates on any vehicle which has plates configured. Max 15 characters are allowed!", "example": "vehicle player setPlateNumber \"K2000\";", "docSyntax": "vehicle setPlateNumber string", "syntax": "<objVehicle> setPlateNumber <string>"}, "setPlayable": {"version": "CMD", "tags": "", "description": "Create a multiplayer role for the unit. The roles created this way are used for Join In Progress and Team Switch.", "example": "setPlayable _aPerson;", "docSyntax": "setPlayable unitName", "syntax": "setPlayable <objUnit>"}, "setPlayerRespawnTime": {"version": "CMD", "tags": "", "description": "Sets the time interval (in seconds) that the player must wait before respawn. It resets to mission default on mission start. In Single Player or when respawn type is GROUP or SIDE in Multiplayer, setting player respawn time has no effect, and playerRespawnTime will always return -1.", "example": "setPlayerRespawnTime 5;", "docSyntax": "setPlayerRespawnTime interval", "syntax": "setPlayerRespawnTime interval"}, "setPlayerVoNVolume": {"version": "CMD", "tags": "", "description": "Sets provided player's Voice over Network (VoN) volume.", "example": "_loudPlayer setPlayerVoNVolume 0.5;", "docSyntax": "unit setPlayerVoNVolume volume", "syntax": "<objUnit> setPlayerVoNVolume volume"}, "setPos": {"version": "CMD", "tags": "", "description": "Sets object position to format PositionAGLS (over surface). The Z value is used to calculate the nearest surface below the provided position. If the surface is close, it uses the Z position of the surface. Otherwise, Z value becomes the offset from that surface.", "example": "player setPos [getPos player select 0, getPos player select 1, (getPos player select 2) +10]; //\u00a0the same as above using set (OFP:R v1.75) _pos = getPos player; _pos set [2, _pos select 2 + 10]; player setPos _pos; //\u00a0the same as above using modelToWorld (ArmA v1.00) player setPos (player modelToWorld [0,0,10]); //\u00a0the same as above using vectorAdd (Arma 3 v1.22) player setPos (getPos player vectorAdd [0,0,10]);", "docSyntax": "object setPos pos", "syntax": "<object> setPos <array>"}, "setPosASL": {"version": "CMD", "tags": "", "description": "Sets the object position above sea level. Given position must be in PositionASL format.", "example": "player setPosASL [getPosASL player select 0, (getPosASL player select 1) + 10, getPosASL player select 2];", "docSyntax": "object setPosASL pos", "syntax": "<object> setPosASL <array>"}, "setPosASL2": {"version": "CMD", "tags": "", "description": "Sets the object position. The pos array uses the PositionASL format. The version of the command does not offset based on object center.", "example": "private _aslPos = getPosASL player; _aslPos set [1, _aslPos select 1 + 10]; player setPosASL2 _aslPos;", "docSyntax": "obj setPosASL2 pos", "syntax": "<object> setPosASL2 <array>"}, "setPosASLW": {"version": "CMD", "tags": "", "description": "Sets the object position above sea surface. The pos array uses the PositionASLW format.", "example": "_diver setPosASLW [(position _diver) select 0, (position _diver) select 1, -10];", "docSyntax": "obj setPosASLW pos", "syntax": "<object> setPosASLW <array>"}, "setPosATL": {"version": "CMD", "tags": "", "description": "Sets the position of an object relative to the terrain.", "example": "player setPosATL [getPosATL player select 0, (getPosATL player select 1) - 10, getPosATL player select 2];", "docSyntax": "object setPosATL pos", "syntax": "<object> setPosATL <array>"}, "setPosition": {"version": "CMD", "tags": "", "description": "Sets the position of a location.", "example": "myLocation setPosition getPosATL player;", "docSyntax": "location setPosition pos", "syntax": "location setPosition <array>"}, "setPosWorld": {"version": "CMD", "tags": "", "description": "Sets position of an object based on the model's centre position (see getPosWorld).", "example": "_obj setPosWorld getPosWorld _obj;", "docSyntax": "object setPosWorld position", "syntax": "<object> setPosWorld position"}, "setPylonLoadout": {"version": "CMD", "tags": "", "description": "Adds/overrides loadout to a vehicle pylon. TransportPylonsComponent in vehicle config and pylonWeapon in the magazine config are required to run.", "example": "vehicle player setPylonLoadout [\"pylon1\", \"\"];", "docSyntax": "vehicle setPylonLoadout [pylon, magazine, forced, turret]", "syntax": "<objVehicle> setPylonLoadout [pylon,<string>,forced,turret]"}, "setPylonsPriority": {"version": "CMD", "tags": "", "description": "Overrides default pylons priorities.", "example": "(vehicle player) setPylonsPriority [0,1,2,3,4,5,5,4,3,2,1,0];", "docSyntax": "vehicle setPylonsPriority priorities", "syntax": "<objVehicle> setPylonsPriority priorities"}, "setRadioMsg": {"version": "CMD", "tags": "", "description": "Sets radio trigger menu title text (0 -> 0 -> map radio). Use \"NULL\" to disable radio slot. Use \"\" to restore default title", "example": "1 setRadioMsg \"Click meeeeeeeeee\"; //changes title of radio Alpha", "docSyntax": "index setRadioMsg text", "syntax": "<scalar> setRadioMsg <string>"}, "setRain": {"version": "CMD", "tags": "", "description": "Sets rain density smoothly over the given transition time. A transition time of zero means an immediate change. A rain density of zero is no rain, one is maximum rain. Rain is not possible when overcast is less than 0.7.", "example": "60 setRain 1;", "docSyntax": "time setRain rain", "syntax": "<scalar> setRain rain"}, "setRainbow": {"version": "CMD", "tags": "", "description": "Changes the rainbow value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.", "example": "360 setRainbow 1;", "docSyntax": "time setRainbow value", "syntax": "<scalar> setRainbow <scalar>"}, "setRandomLip": {"version": "CMD", "tags": "", "description": "Enables/Disables random lip. When enabled, the unit continuously moves its lips as if it is talking.", "example": "player setRandomLip true;", "docSyntax": "unit setRandomLip bool", "syntax": "<objUnit> setRandomLip <bool>"}, "setRank": {"version": "CMD", "tags": "", "description": "Sets rank of given unit.", "example": "player setRank \"COLONEL\";", "docSyntax": "unitName setRank rank", "syntax": "<objUnit> setRank rank"}, "setRectangular": {"version": "CMD", "tags": "", "description": "Set the shape of a location to be either rectangular or elliptical. Locations default shape is elliptical.", "example": "myLocation setRectangular true;", "docSyntax": "location setRectangular set", "syntax": "location setRectangular set"}, "setRepairCargo": {"version": "CMD", "tags": "", "description": "Set amount of repair resources in cargo space of repair vehicle. Amount 1 is full cargo.", "example": "_repairTruck1 setRepairCargo 0;", "docSyntax": "vehicleName setRepairCargo amount", "syntax": "vehicleName setRepairCargo amount"}, "setRotorBrakeRTD": {"version": "CMD", "tags": "", "description": "Toggles a helicopter's rotor brake.", "example": "myHelicopterRTD setRotorBrakeRTD 1;", "docSyntax": "helicopterRTD setRotorBrakeRTD enable", "syntax": "helicopterRTD setRotorBrakeRTD <bool>"}, "setShadowDistance": {"version": "CMD", "tags": "", "description": "Sets the shadows rendering distance.", "example": "setShadowDistance 200;", "docSyntax": "setShadowDistance value", "syntax": "setShadowDistance <scalar>"}, "setShotParents": {"version": "CMD", "tags": "", "description": "Sets vehicle and instigator pair for the given projectile.", "example": "myProjectile setShotParents [vehicle bob, bob];", "docSyntax": "projectile setShotParents [vehicle, instigator]", "syntax": "projectile setShotParents [<objVehicle>,instigator]"}, "setSide": {"version": "CMD", "tags": "", "description": "Sets a location's side. The default side is Unknown.", "example": "_myLocation setSide resistance;", "docSyntax": "location setSide side", "syntax": "location setSide <objSide>"}, "setSimpleTaskAlwaysVisible": {"version": "CMD", "tags": "", "description": "Sets task's visibility.", "example": "currentTask player setSimpleTaskAlwaysVisible true;", "docSyntax": "taskID setSimpleTaskAlwaysVisible state", "syntax": "taskID setSimpleTaskAlwaysVisible state"}, "setSimpleTaskCustomData": {"version": "CMD", "tags": "", "description": "Set custom data for the task. Tooltip will be drawn in task list on the right side. Description will be drawn in task description panel on the bottom.", "example": "_task setSimpleTaskCustomData [\"\\A3\\Ui_f\\data\\IGUI\\Cfg\\simpleTasks\\letters\\h_ca.paa\", \"This is the tooltip\", \"This is the description\"];", "docSyntax": "task setSimpleTaskCustomData [iconPath, tooltip, description]", "syntax": "<objTask> setSimpleTaskCustomData [iconPath,tooltip,description]"}, "setSimpleTaskDescription": {"version": "CMD", "tags": "", "description": "Attach descriptions to the simple task.", "example": "myTask setSimpleTaskDescription [\"Today you have to kill Spongebob\", \"Kill Spongebob\", \"There he is!\"];", "docSyntax": "task setSimpleTaskDescription [description, descriptionShort, descriptionHUD]", "syntax": "<objTask> setSimpleTaskDescription [description,descriptionShort,descriptionHUD]"}, "setSimpleTaskDestination": {"version": "CMD", "tags": "", "description": "Attach a destination to the simple task.", "example": "_tskGoHere setSimpleTaskDestination (getMarkerPos \"obj1\");", "docSyntax": "task setSimpleTaskDestination pos", "syntax": "<objTask> setSimpleTaskDestination <array>"}, "setSimpleTaskTarget": {"version": "CMD", "tags": "", "description": "Attach a target to the simple task.", "example": "task setSimpleTaskTarget [targetVehicle, true];", "docSyntax": "task setSimpleTaskTarget [target, precisePosition]", "syntax": "<objTask> setSimpleTaskTarget [<object>,precisePosition]"}, "setSimpleTaskType": {"version": "CMD", "tags": "", "description": "Attach type to the simple task. See Default Task Types.", "example": "(currentTask player) setSimpleTaskType \"attack\";", "docSyntax": "task setSimpleTaskType taskType", "syntax": "<objTask> setSimpleTaskType taskType"}, "setSimulWeatherLayers": {"version": "CMD", "tags": "", "description": "Sets number of simul weather layers, affects quality of simul weather clouds.", "example": "setSimulWeatherLayers 0; //\u00a0Very flat clouds", "docSyntax": "setSimulWeatherLayers layers", "syntax": "setSimulWeatherLayers layers"}, "setSize": {"version": "CMD", "tags": "", "description": "Sets the size (radius) of a location. The width is 2 * x, the height is 2 * y.", "example": "myLocation setSize [10,30];", "docSyntax": "location setSize size", "syntax": "location setSize size"}, "setSkill": {"version": "CMD", "tags": "", "description": "Sets the skill level of given unit. The value of a sub-skill is interpolated into a range defined in CfgAISkill.", "example": "_hero setSkill 1;", "docSyntax": "unit setSkill skill", "syntax": "<objUnit> setSkill skill"}, "setSlingLoad": {"version": "CMD", "tags": "", "description": "Creates a sling loading from a helicopter to an entity if possible. To unload cargo, pass objNull as second param.", "example": "_success = heli1 setSlingLoad veh1;", "docSyntax": "heli setSlingLoad cargo", "syntax": "heli setSlingLoad <objVehicle>"}, "setSoundEffect": {"version": "CMD", "tags": "", "description": "Defines the different sound effects for a trigger or a waypoint. To stop any sound, deactivate the trigger (might take up to 0.5 seconds to stop) or delete the trigger/waypoint (immediate).", "example": "_trigger setSoundEffect [\"Alarm\", \"\", \"\", \"\"];", "docSyntax": "trigger setSoundEffect [sound, voice, soundEnv, soundDet]", "syntax": "<objTrigger> setSoundEffect [sound,voice,soundEnv,soundDet]"}, "setSpeaker": {"version": "CMD", "tags": "", "description": "Sets the speaker of a person.", "example": "unit1 setSpeaker \"Male02GRE\";", "docSyntax": "person setSpeaker speaker", "syntax": "<objUnit> setSpeaker speaker"}, "setSpeech": {"version": "CMD", "tags": "", "description": "Add speech to location.", "example": "_location setSpeech \"SomeSpeech\";", "docSyntax": "location setSpeech speech", "syntax": "location setSpeech speech"}, "setSpeedMode": {"version": "CMD", "tags": "", "description": "Sets group speed mode. If unit is passed as param, unit's group is used. Mode may be one of:", "example": "_groupOne setSpeedMode \"LIMITED\";", "docSyntax": "groupName setSpeedMode mode", "syntax": "groupName setSpeedMode mode"}, "setStamina": {"version": "CMD", "tags": "", "description": "Set units' stamina (seconds until depletion)", "example": "player setStamina 42;", "docSyntax": "unit setStamina stamina", "syntax": "<objUnit> setStamina stamina"}, "setStaminaScheme": {"version": "CMD", "tags": "", "description": "Sets the scheme used for the Stamina system.", "example": "setStaminaScheme \"Default\";", "docSyntax": "setStaminaScheme scheme", "syntax": "setStaminaScheme scheme"}, "setStatValue": {"version": "CMD", "tags": "", "description": "Sets a value to a given stat.", "example": "setStatValue [\"ExpWarlockDown\", 1]; //\u00a0Unlocks the \"Warlock Down\" Steam achivement", "docSyntax": "setStatValue [name, value]", "syntax": "setStatValue [<string>,<scalar>]"}, "setSuppression": {"version": "CMD", "tags": "", "description": "Sets the given suppression value for the given unit.", "example": "unit_1 setSuppression 1;", "docSyntax": "unit setSuppression value", "syntax": "<objUnit> setSuppression <scalar>"}, "setSystemOfUnits": {"version": "CMD", "tags": "", "description": "Set system of units. This will only impact gauges from advanced flight model.", "example": "if (player in _myHelicopter) then { setSystemOfUnits 2; };", "docSyntax": "setSystemOfUnits value", "syntax": "setSystemOfUnits <scalar>"}, "setTargetAge": {"version": "CMD", "tags": "", "description": "Sets how the target is known to the other centers. They behave like the target was seen age seconds ago. Possible age values are: \"ACTUAL\", \"5 MIN\", \"10 MIN\", \"15 MIN\", \"30 MIN\", \"60 MIN\", \"120 MIN\" or \"UNKNOWN\".", "example": "player setTargetAge \"10 MIN\";", "docSyntax": "object setTargetAge age", "syntax": "<object> setTargetAge age"}, "setTaskMarkerOffset": {"version": "CMD", "tags": "", "description": "Sets the task marker position in model space.", "example": "player setTaskMarkerOffset [0,0.5,1];", "docSyntax": "obj setTaskState position", "syntax": "<object> setTaskState position"}, "setTaskResult": {"version": "CMD", "tags": "", "description": "Set a result of the task.", "docSyntax": "task setTaskResult [state,result]", "syntax": "<objTask> setTaskResult [state,result]"}, "setTaskState": {"version": "CMD", "tags": "", "description": "Set the state of a given task.", "example": "_tskKillSpongebob setTaskState \"Succeeded\";", "docSyntax": "task setTaskState state", "syntax": "<objTask> setTaskState state"}, "setTerrainGrid": {"version": "CMD", "tags": "", "description": "Sets the desired terrain resolution in meters.", "example": "setTerrainGrid 12.5;", "docSyntax": "setTerrainGrid grid", "syntax": "setTerrainGrid grid"}, "setTerrainHeight": {"version": "CMD", "tags": "", "description": "Set the current terrain's altitude on provided location(s).", "example": "private _fnc_flattenTerrain = { params [\"_start\", \"_a\", \"_b\", \"_h\"]; private _newPositions = []; for \"_xStep\" from 0 to _a do { for \"_yStep\" from 0 to _b do { private _newHeight = _start vectorAdd [_xStep, _yStep, 0]; _newHeight set [2, _h]; _newPositions pushBack _newHeight; }; }; _newPositions; }; private _desiredTerrainHeight = 150; private _positionsAndHeights = [getPosWorld player, 50, 50, _desiredTerrainHeight] call _fnc_flattenTerrain; setTerrainHeight [_positionsAndHeights, true];", "docSyntax": "setTerrainHeight [positionAndAltitudeArray, adjustObjects]", "syntax": "setTerrainHeight [positionAndAltitudeArray,adjustObjects]"}, "setText": {"version": "CMD", "tags": "", "description": "Sets the text associated with a location. This text will be displayed on the game map at the location's position.", "example": "myLocation setText \"Rahmadi Village\";", "docSyntax": "location setText text", "syntax": "location setText <string>"}, "setTimeMultiplier": {"version": "CMD", "tags": "", "description": "Sets a time multiplier for in-game time. The command range is capped at 0.1 - 120 to avoid performance problems.", "example": "setTimeMultiplier 60;", "docSyntax": "setTimeMultiplier value", "syntax": "setTimeMultiplier <scalar>"}, "setTIParameter": {"version": "CMD", "tags": "", "description": "Sets the provided Thermal Imaging parameter's value.", "example": "setTIParameter [\"OutputRangeStart\", 0]; setTIParameter [\"OutputRangeWidth\", 1];", "docSyntax": "setTIParameter [paramName, newValue]", "syntax": "setTIParameter [paramName,newValue]"}, "setTitleEffect": {"version": "CMD", "tags": "", "description": "Defines the title effect to show on activation via [Type, Effect, Text] where 'Type' The title effect does not disappear on deactivation, this should be done manually if required.", "example": "_trigger setTitleEffect [\"TEXT\", \"PLAIN DOWN\", \"Hello world.\"];", "docSyntax": "triggerOrWaypoint setTitleEffect [type, effect, text]", "syntax": "triggerOrWaypoint setTitleEffect [type,effect,<string>]"}, "setTowParent": {"version": "CMD", "tags": "", "description": "Simulation", "example": "{ moveOut _x } forEach crew _towedVehicle; //\u00a0make sure nobody is in the towed vehicle _towedVehicle lock true; //\u00a0make sure everybody stays out of it ropeCreate [_bobcat, [0,-5,0], _towedVehicle, [0,2,0]]; _towedVehicle setTowParent _bobcat;", "docSyntax": "towedVehicle setTowParent towingVehicle", "syntax": "towedVehicle setTowParent towingVehicle"}, "setTrafficDensity": {"version": "CMD", "tags": "", "description": "Set the density of ambient cars in a rectangle (in cars per kilometer).", "example": "setTrafficDensity [40, 31000, 32000, 30000, 32000];", "docSyntax": "setTrafficDensity [density, xMin, xMax, zMin, zMax]", "syntax": "setTrafficDensity [density,xMin,xMax,zMin,zMax]"}, "setTrafficDistance": {"version": "CMD", "tags": "", "description": "Set maximum ambient traffic draw distance (in 2D).", "example": "setTrafficDistance 1000;", "docSyntax": "setTrafficDistance distance", "syntax": "setTrafficDistance <scalar>"}, "setTrafficGap": {"version": "CMD", "tags": "", "description": "Set the average gap between ambient cars in a rectangle (in meters).", "example": "setTrafficGap [50, 31000, 32500, 28000, 32000];", "docSyntax": "setTrafficGap [gap, xMin, xMax, zMin, zMax]", "syntax": "setTrafficGap [gap,xMin,xMax,zMin,zMax]"}, "setTrafficSpeed": {"version": "CMD", "tags": "", "description": "Set ambient traffic speed in a rectangle (in kilometers per hour).", "example": "setTrafficSpeed [50, _xMin, _xMax, _zMin, _zMax];", "docSyntax": "setTrafficSpeed [speed, xMin, xMax, zMin, zMax]", "syntax": "setTrafficSpeed [<scalar>,xMin,xMax,zMin,zMax]"}, "setTriggerActivation": {"version": "CMD", "tags": "", "description": "Defines the trigger activation type. See ArmA:Mission Editor - Triggers for a thorough overview of triggers and its fields for activation, effects, etc. Since Arma 3 v1.67, \"ANYPLAYER\" activation can be used to detect any player.", "example": "_trigger setTriggerActivation [\"WEST\", \"EAST D\", true];", "docSyntax": "trigger setTriggerActivation [by, type, repeating]", "syntax": "<objTrigger> setTriggerActivation [by,type,repeating]"}, "setTriggerArea": {"version": "CMD", "tags": "", "description": "Trigger axis a, b and c (half of their x, y and z dimensions)", "example": "_trigger setTriggerArea [100, 50, 45, false];", "docSyntax": "trigger setTriggerArea [a, b, angle, isRectangle, c]", "syntax": "<objTrigger> setTriggerArea [a,b,angle,isRectangle,c]"}, "setTriggerInterval": {"version": "CMD", "tags": "", "description": "Sets the interval in seconds for trigger condition check.", "example": "_trigger setTriggerInterval 5;", "docSyntax": "trigger setTriggerInterval interval", "syntax": "<objTrigger> setTriggerInterval interval"}, "setTriggerStatements": {"version": "CMD", "tags": "", "description": "Defines trigger condition, activation and deactivation statements. Trigger condition has to return Boolean. true will activate the trigger, false will deactivate it (only if activation is set to repeat). thisList returns the same result as list command, which includes all entities in the trigger area that are capable of activating the trigger. Dead entities are excluded as well as crew in vehicles, vehicles themselves are included.", "example": "_trg setTriggerStatements [\"this\", \"hint 'trigger on'\", \"hint 'trigger off'\"];", "docSyntax": "trigger setTriggerStatements [condition, activation, deactivation]", "syntax": "<objTrigger> setTriggerStatements [condition,activation,deactivation]"}, "setTriggerText": {"version": "CMD", "tags": "", "description": "Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers.", "example": "trigger setTriggerText \"Call for support\";", "docSyntax": "trigger setTriggerText text", "syntax": "<objTrigger> setTriggerText <string>"}, "setTriggerTimeout": {"version": "CMD", "tags": "", "description": "Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time.", "example": "_trigger setTriggerTimeout [5, 10, 7, false];", "docSyntax": "trigger setTriggerTimeout [min, mid, max, interruptable]", "syntax": "<objTrigger> setTriggerTimeout [min,mid,max,interruptable]"}, "setTriggerType": {"version": "CMD", "tags": "", "description": "Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission):", "example": "_trigger setTriggerType \"END1\";", "docSyntax": "trigger setTriggerType action", "syntax": "<objTrigger> setTriggerType action"}, "setTurretLimits": {"version": "CMD", "tags": "", "description": "Sets the rotation and elevation limits for the given turret. The limits can only be set within the limits defined in config and cannot exceed them. To reset to config defaults pass the turret argument only (Example 2).", "example": "m2 setTurretLimits [[0], -45, 45, -10, 10];", "docSyntax": "vehicle setTurretLimits [turret, minTurn, maxTurn, minElev, maxElev]", "syntax": "<objVehicle> setTurretLimits [turret,minTurn,maxTurn,minElev,maxElev]"}, "setTurretOpticsMode": {"version": "CMD", "tags": "", "description": "Set the current optics mode of the optics in the turret occupied by the specified unit. Alt syntax allows a vehicle and turret path to be specified instead of a unit.", "example": "player setTurretOpticsMode 0;", "docSyntax": "obj setTurretOpticsMode mode", "syntax": "<object> setTurretOpticsMode mode"}, "setType": {"version": "CMD", "tags": "", "description": "Changes a location to the specified class. Location classes are defined in CfgLocationTypes.", "example": "myLocation setType \"RockArea\";", "docSyntax": "location setType name", "syntax": "location setType <string>"}, "setUnconscious": {"version": "CMD", "tags": "", "description": "In Arma 2 and since Arma 3 v1.64, this command sets unit into incapacitated state.", "example": "_unit setUnconscious true;", "docSyntax": "unit setUnconscious set", "syntax": "<objUnit> setUnconscious set"}, "setUnitAbility": {"version": "CMD", "tags": "", "description": "Sets skill of given unit. Unlike setSkill, setUnitAbility can set values > 1. Even though the skill command will correctly return set value, the actual unit ability will be capped to max available.", "example": "_unit setUnitAbility 1;", "docSyntax": "unit setUnitAbility value", "syntax": "<objUnit> setUnitAbility <scalar>"}, "setUnitCombatMode": {"version": "CMD", "tags": "", "description": "Sets unit's combat mode (engagement rules). For AI group combat mode see setCombatMode. Mode may be one of the following:", "example": "_unit setUnitCombatMode \"YELLOW\";", "docSyntax": "unit setUnitCombatMode mode", "syntax": "<objUnit> setUnitCombatMode mode"}, "setUnitFreefallHeight": {"version": "CMD", "tags": "", "description": "Sets minimum freefall height AGL per unit, at which the unit assumes HALO pose. Engine default is 100m. Use -1 to reset the height to default.", "example": "player setUnitFreefallHeight 1000;", "docSyntax": "unit setUnitFreefallHeight minHeight", "syntax": "<objUnit> setUnitFreefallHeight minHeight"}, "setUnitLoadout": {"version": "CMD", "tags": "", "description": "Creates a loadout from given inventory structure and applies it to a unit. When String for class name is supplied, the command will search CfgVehicles for the given class in order to extract the loadout from config. If Config is given, it will search given config (including mission config) for the loadout information. In either case, the config should contain the following entries, which is standard for any unit class, for example:", "example": "player_2 setUnitLoadout (getUnitLoadout player_1); //\u00a0Copies loadout from player_1 and applies it to player_2", "docSyntax": "unit setUnitLoadout loadout", "syntax": "<objUnit> setUnitLoadout loadout"}, "setUnitPos": {"version": "CMD", "tags": "", "description": "Set unit position rules. This command will not change the stance of the human player, even though it will change the output of unitPos command. To change player stance use playAction or playActionNow:", "example": "_soldier setUnitPos \"UP\";", "docSyntax": "unit setUnitPos mode", "syntax": "<objUnit> setUnitPos mode"}, "setUnitPosWeak": {"version": "CMD", "tags": "", "description": "Set unit position rules. This command is the lowest level of priority for setting unit position and to be used in scripted FSM's. Priorities are:", "example": "_soldier disableAI \"FSM\"; _soldier setUnitPosWeak \"DOWN\";", "docSyntax": "unit setUnitPosWeak mode", "syntax": "<objUnit> setUnitPosWeak mode"}, "setUnitRank": {"version": "CMD", "tags": "", "description": "Sets rank of given unit. Possible rank values, and the associated rating that is set (not added, the value replaces previous rating) with it:", "example": "player setUnitRank \"COLONEL\";", "docSyntax": "unitName setUnitRank rank", "syntax": "<objUnit> setUnitRank rank"}, "setUnitRecoilCoefficient": {"version": "CMD", "tags": "", "description": "Proportionaly increase/decrease unit's recoil. Drives muzzle up with every shot when supplied positive number and down when negative. 0 cancels recoil.", "example": "player setUnitRecoilCoefficient 10;", "docSyntax": "unitName setUnitRecoilCoefficient coefficient", "syntax": "<objUnit> setUnitRecoilCoefficient coefficient"}, "setUnitTrait": {"version": "CMD", "tags": "", "description": "Enables or disables a trait or alters a trait of the given unit. Unit traits consist of unit abilities, which are Booleans and modifiers, which are Numbers. Custom trait can only be a bool.", "example": "player setUnitTrait [\"Medic\", true];", "docSyntax": "unit setUnitTrait [skillName, value, isCustom]", "syntax": "<objUnit> setUnitTrait [<string>,<scalar>,isCustom]"}, "setUnloadInCombat": {"version": "CMD", "tags": "", "description": "Sets whether or not cargo or turret units should get out of vehicle when in combat. If true, vehicle will stop and units will dismount. Vehicle must be local. The command resets last time unit had reacted to an enemy as well as forcing orderGetIn false if canUnloadInCombat is permitted by config", "example": "_veh setUnloadInCombat [true, false];", "docSyntax": "vehicle setUnloadInCombat [allowCargo, allowTurrets]", "syntax": "<objVehicle> setUnloadInCombat [allowCargo,allowTurrets]"}, "setUserActionText": {"version": "CMD", "tags": "", "description": "Changes user added action (see addAction) menu item text.", "example": "_id = player addAction [\"Hello\", \"\"]; player setUserActionText [_id, \"Good Bye\"];", "docSyntax": "object setUserActionText [actionIndex, textMenu, textWindowBackground, textWindowForeground]", "syntax": "<object> setUserActionText [actionIndex,textMenu,textWindowBackground,textWindowForeground]"}, "setUserMFDText": {"version": "CMD", "tags": "", "description": "Stored user text value in MFD, limit is 50, user0...user49", "example": "_vehicle setUserMFDText [0, \"some text\"];", "docSyntax": "vehicle setUserMFDText [index, value]", "syntax": "<objVehicle> setUserMFDText [<scalar>,<scalar>]"}, "setUserMFDValue": {"version": "CMD", "tags": "", "description": "When MFD is using user controllers, this command can set values on them. For example, MFD config for Blackfoot has an entry", "example": "BIS_Plane setUserMFDValue [0,1]; //\u00a0user0 in MFD will return 1", "docSyntax": "vehicle setUserMFDValue [index, value]", "syntax": "<objVehicle> setUserMFDValue [<scalar>,<scalar>]"}, "setVariable": {"version": "CMD", "tags": "", "description": "Set variable to given value in the variable space of given element. Can be used to broadcast variables over the network.", "example": "_myTruck setVariable [\"TAG_myPublicVariable\", 123, true];", "docSyntax": "varspace setVariable [name, value, public]", "syntax": "varspace setVariable [<string>,<scalar>,public]"}, "setVectorDir": {"version": "CMD", "tags": "", "description": "Set object's direction vector. Up vector will remain unchanged.", "example": "player setVectorDir [5,6,1];", "docSyntax": "object setVectorDir vectorDir", "syntax": "<object> setVectorDir vectorDir"}, "setVectorDirAndUp": {"version": "CMD", "tags": "", "description": "Sets orientation of an object.", "example": "//\u00a0set exact yaw, pitch, and roll _yaw = 45; _pitch = -80; _roll = 0; _myObject setVectorDirAndUp [ [sin _yaw * cos _pitch, cos _yaw * cos _pitch, sin _pitch], [[sin _roll, -sin _pitch, cos _roll * cos _pitch], -_yaw] call BIS_fnc_rotateVector2D ];", "docSyntax": "vehicle setVectorDirAndUp [vectorDir, vectorUp]", "syntax": "<objVehicle> setVectorDirAndUp [vectorDir,vectorUp]"}, "setVectorUp": {"version": "CMD", "tags": "", "description": "Set object's up vector. Direction of the object remain unchanged. Default object's vectorUp is [0,0,1].", "example": "Turn object upside down:", "docSyntax": "object setVectorUp vectorUp", "syntax": "<object> setVectorUp vectorUp"}, "setVehicleAmmo": {"version": "CMD", "tags": "", "description": "Sets how much ammunition (compared to a full state defined by the vehicle type) the vehicle has. Note that the ammo will be added only to local turrets. To check locality of turret use turretLocal. The value ranges from 0 to 1.", "example": "player setVehicleAmmo 0;", "docSyntax": "vehicleName setVehicleAmmo value", "syntax": "vehicleName setVehicleAmmo <scalar>"}, "setVehicleAmmoDef": {"version": "CMD", "tags": "", "description": "Sets how much ammunition (compared to the configuration of magazines defined in the vehicle's class) the vehicle has. Note that the ammo will only be added to local turrets. To check the locality of turret use turretLocal.", "example": "player setVehicleAmmoDef 0;", "docSyntax": "unit setVehicleAmmoDef value", "syntax": "<objUnit> setVehicleAmmoDef <scalar>"}, "setVehicleArmor": {"version": "CMD", "tags": "", "description": "Sets the armor (or health for men) state of the vehicle (a value from 0 to 1). Works like setDamage, but the other way around: 1 is full health - see Example 2.", "example": "player setVehicleArmor 0.5;", "docSyntax": "vehicleName setVehicleArmor value", "syntax": "vehicleName setVehicleArmor <scalar>"}, "setVehicleCargo": {"version": "CMD", "tags": "", "description": "Load cargo vehicle inside vehicle if possible, returns bool based on whether the vehicle was able to be loaded. Can also be used to unload a specific loaded vehicle or all loaded vehicles.", "example": "Blackfish with no vehicle cargo loaded", "docSyntax": "vehicle setVehicleCargo cargo", "syntax": "<objVehicle> setVehicleCargo <objVehicle>"}, "setVehicleId": {"version": "CMD", "tags": "", "description": "Sets ID to vehicle. By this ID vehicle is referenced by triggers and waypoints.", "example": "player setVehicleId 1;", "docSyntax": "vehicleName setVehicleId id", "syntax": "vehicleName setVehicleId <scalar>"}, "setVehicleLock": {"version": "CMD", "tags": "", "description": "Sets vehicle lock. Possible values:", "example": "_veh1 setVehicleLock \"LOCKED\";", "docSyntax": "vehicleName setVehicleLock lockState", "syntax": "vehicleName setVehicleLock lockState"}, "setVehiclePosition": {"version": "CMD", "tags": "", "description": "Moves the object to a given position (same as createVehicle placement algorithm). Uses either the position that's defined by the position param, or one of the marker positions from the markers array. The object is placed inside a circle with position as its center and placement as its radius. The type of placement could also be controlled with special.", "example": "//\u00a0place the player at either [1000,2000], or one of the three markers positions player setVehiclePosition [[1000,2000], [\"Pos1\",\"Pos2\",\"Pos3\"], 0, \"CAN_COLLIDE\"];", "docSyntax": "object setVehiclePosition [position, markers, placement, special]", "syntax": "<object> setVehiclePosition [position,markers,placement,special]"}, "setVehicleRadar": {"version": "CMD", "tags": "", "description": "Sets the AI rule of Radar usage (Emission Control). Automatic means Radar switched on only when in Combat. The command doesn't affect player-controlled vehicles.", "example": "_vehicle setVehicleRadar 1;", "docSyntax": "vehicle setVehicleRadar rule", "syntax": "<objVehicle> setVehicleRadar rule"}, "setVehicleReceiveRemoteTargets": {"version": "CMD", "tags": "", "description": "Sets that the vehicle will be able to receive targets acquired by someone else via datalink from the Side center.", "example": "vehicle player setVehicleReceiveRemoteTargets true;", "docSyntax": "vehicle setVehicleReceiveRemoteTargets bool", "syntax": "<objVehicle> setVehicleReceiveRemoteTargets <bool>"}, "setVehicleReportOwnPosition": {"version": "CMD", "tags": "", "description": "Sets that the vehicle will share its own position via datalink to the Side center.", "example": "vehicle player setVehicleReportOwnPosition true;", "docSyntax": "vehicle setVehicleReportOwnPosition report", "syntax": "<objVehicle> setVehicleReportOwnPosition report"}, "setVehicleReportRemoteTargets": {"version": "CMD", "tags": "", "description": "Sets that the vehicle will share targets that were acquired by its own sensors via datalink to the Side center.", "example": "vehicle player setVehicleReportRemoteTargets true;", "docSyntax": "vehicle setVehicleReportRemoteTargets bool", "syntax": "<objVehicle> setVehicleReportRemoteTargets <bool>"}, "setVehicleTIPars": {"version": "CMD", "tags": "", "description": "Sets the \"heat\" state of different vehicle parts for Thermal Imaging detection. This allows simulation of heated up parts of a vehicle without it actually having to utilize them - on a 0..1 range - 0 being cold, 1 being hot.", "example": "vehicle player setVehicleTIPars [1, 1, 1]; //\u00a0set all parts hot vehicle player setVehicleTIPars [0, 0, 0]; //\u00a0set all parts cold vehicle player setVehicleTIPars [0.5, 0.5, 0.5]; //\u00a0set all parts warm", "docSyntax": "vehicle setVehicleTIPars [engine, wheels, weapon]", "syntax": "<objVehicle> setVehicleTIPars [engine,wheels,<string>]"}, "setVehicleVarName": {"version": "CMD", "tags": "", "description": "Sets string representation of an object to a custom string.", "example": "private _playersCar = vehicle player; systemChat str _playersCar; //\u00a0displays e.g \"ce06b00# 164274: offroad_01_unarmed_f.p3d\" _playersCar setVehicleVarName \"MyOffroad\"; systemChat str _playersCar; //\u00a0displays \"MyOffroad\" isNil \"MyOffroad\"; //\u00a0true - the MyOffroad variable is not set MyOffroad = _playersCar; //\u00a0now it is publicVariable \"MyOffroad\"; //\u00a0broadcasts it over the network", "docSyntax": "object setVehicleVarName name", "syntax": "<object> setVehicleVarName <string>"}, "setVelocity": {"version": "CMD", "tags": "", "description": "Sets velocity vector of an object in m/s.", "example": "_truck1 setVelocity [20, 0, 0];", "docSyntax": "object setVelocity vector", "syntax": "<object> setVelocity vector"}, "setVelocityModelSpace": {"version": "CMD", "tags": "", "description": "Sets the velocity (i.e. speed) vector of the given vehicle relative to its model.", "example": "MyCar setVelocityModelSpace [0, 10, 0]; //\u00a0Pushes MyCar forward.", "docSyntax": "vehicle setVelocityModelSpace velocity", "syntax": "<objVehicle> setVelocityModelSpace velocity"}, "setVelocityTransformation": {"version": "CMD", "tags": "", "description": "Interpolates and applies PositionASL, velocity, vectorDir and vectorUp to the given object based on the interval value.", "example": "_tracker setVelocityTransformation [ _currentPos, _nextPos, _currentVelocity, _nextVelocity, _currentVectorDir, _nextVectorDir, _currentVectorUp, _nextVectorUp, _interval ];", "docSyntax": "object setVelocityTransformation [fromPosASL, toPosASL, fromVelocity, toVelocity, fromVectorDir, toVectorDir, fromVectorUp, toVectorUp, interval, customCenter]", "syntax": "<object> setVelocityTransformation [fromPosASL,toPosASL,fromVelocity,toVelocity,fromVectorDir,toVectorDir,fromVectorUp,toVectorUp,interval,customCenter]"}, "setViewDistance": {"version": "CMD", "tags": "", "description": "Set rendering distance. Setting view distance to >= 0 resets the value to the client's options (set in Options\u00a0\u2192\u00a0Video\u00a0\u2192\u00a0General\u00a0\u2192\u00a0Visibility\u00a0\u2192\u00a0Overall).", "example": "setViewDistance 2250;", "docSyntax": "setViewDistance distance", "syntax": "setViewDistance <scalar>"}, "setVisibleIfTreeCollapsed": {"version": "CMD", "tags": "", "description": "Sets whether or not the object is visible even if the tree is collapsed.", "example": "_map setVisibleIfTreeCollapsed [\"_unit_0\", true];", "docSyntax": "map setVisibleIfTreeCollapsed [object, visible]", "syntax": "<objMap> setVisibleIfTreeCollapsed [<object>,visible]"}, "setWantedRPMRTD": {"version": "CMD", "tags": "", "description": "Tell the helicopter engine RPMs to reach the given value within a period of time. The simulation will try to reach the RPMs, but it does not guarantee it will reach the precise value!", "example": "vehicle player setWantedRPMRTD [2500, 30, 0];", "docSyntax": "helicopterRTD setWantedRPMRTD [value, time, engineIndex]", "syntax": "helicopterRTD setWantedRPMRTD [<scalar>,<scalar>,engineIndex]"}, "setWaterFillPercentage": {"version": "CMD", "tags": "", "description": "Set an object's water filling.", "example": "if (getWaterLeakiness _myCar > 0 && surfaceIsWater getPosASL _myCar) then { _myCar setWaterFillPercentage 1; hint \"I told you not to go in the water!\"; };", "docSyntax": "obj setWaterFillPercentage level", "syntax": "<object> setWaterFillPercentage level"}, "setWaterLeakiness": {"version": "CMD", "tags": "", "description": "Set an object's water intake ratio when immersed.", "example": "private _veh = vehicle player; if (surfaceIsWater getPosASL _veh) then { _veh setWaterLeakiness 1; };", "docSyntax": "obj setWaterLeakiness leakiness", "syntax": "<object> setWaterLeakiness leakiness"}, "setWaves": {"version": "CMD", "tags": "", "description": "Changes the waves value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.", "example": "180 setWaves .5;", "docSyntax": "time setWaves value", "syntax": "<scalar> setWaves <scalar>"}, "setWaypointBehaviour": {"version": "CMD", "tags": "", "description": "Switches the unit behaviour when the waypoint becomes active.", "example": "[_grp, 2] setWaypointBehaviour \"AWARE\";", "docSyntax": "waypoint setWaypointBehaviour mode", "syntax": "waypoint setWaypointBehaviour mode"}, "setWaypointCombatMode": {"version": "CMD", "tags": "", "description": "Changes a group's combat mode when the waypoint becomes active.", "example": "[_grp, 2] setWaypointCombatMode \"RED\";", "docSyntax": "waypoint setWaypointCombatMode mode", "syntax": "waypoint setWaypointCombatMode mode"}, "setWaypointCompletionRadius": {"version": "CMD", "tags": "", "description": "The completion radius allows units to call the waypoint completed once they are inside of the given circle. If the given radius is less than unit\u2019s or vehicle\u2019s configured 'precision' then the latter is used. For example tank precision is 10m, if the given radius is 5m, the final radius will be 10m. For units in player\u2019s group there is an additional multiplier x5 to the configured precision. Units that are fleeing and are not in player's Group will ignore the completion radius and would not be able to complete by proximity until they stop fleeing.", "example": "[grp, 2] setWaypointCompletionRadius 30;", "docSyntax": "waypoint setWaypointCompletionRadius radius", "syntax": "waypoint setWaypointCompletionRadius radius"}, "setWaypointDescription": {"version": "CMD", "tags": "", "description": "Sets the description shown in the HUD while the waypoint is active.", "example": "[_grp, 2] setWaypointDescription \"Move here.\";", "docSyntax": "waypoint setWaypointDescription text", "syntax": "waypoint setWaypointDescription <string>"}, "setWaypointForceBehaviour": {"version": "CMD", "tags": "", "description": "Forces the behavior of waypoint, disables AUTOCOMBAT.", "example": "[grp, 2] setWaypointForceBehaviour true;", "docSyntax": "waypoint setWaypointForceBehaviour state", "syntax": "waypoint setWaypointForceBehaviour state"}, "setWaypointFormation": {"version": "CMD", "tags": "", "description": "Switches the group formation when the waypoint becomes active.", "example": "[_grp, 2] setWaypointFormation \"LINE\";", "docSyntax": "waypoint setWaypointFormation formation", "syntax": "waypoint setWaypointFormation formation"}, "setWaypointHousePosition": {"version": "CMD", "tags": "", "description": "For waypoints attached to a house, this defines the target buildingPos index.", "example": "[_grp, 2] setWaypointHousePosition 1;", "docSyntax": "waypoint setWaypointHousePosition pos", "syntax": "waypoint setWaypointHousePosition <array>"}, "setWaypointLoiterAltitude": {"version": "CMD", "tags": "", "description": "Assigns loiter altitude to the provided waypoint.", "example": "[_grp, 2] setWaypointLoiterAltitude 100;", "docSyntax": "waypoint setWaypointLoiterAltitude loiterAltitude", "syntax": "waypoint setWaypointLoiterAltitude loiterAltitude"}, "setWaypointLoiterRadius": {"version": "CMD", "tags": "", "description": "Assignes loiter radius to waypoint", "example": "[_grp, 2] setWaypointLoiterRadius 200;", "docSyntax": "waypoint setWaypointLoiterRadius radius", "syntax": "waypoint setWaypointLoiterRadius radius"}, "setWaypointLoiterType": {"version": "CMD", "tags": "", "description": "Sets the waypoint loiter type.", "example": "[_grp, 2] setWaypointLoiterType \"CIRCLE\";", "docSyntax": "waypoint setWaypointLoiterType type", "syntax": "waypoint setWaypointLoiterType type"}, "setWaypointName": {"version": "CMD", "tags": "", "description": "Changes the waypoint name.", "example": "[_grp,2] setWaypointName \"myName\";", "docSyntax": "waypoint setWaypointName name", "syntax": "waypoint setWaypointName <string>"}, "setWaypointPosition": {"version": "CMD", "tags": "", "description": "Attempts to move given waypoint to a random position inside a circle with the given center and radius. The waypoint will be placed similar to \"NONE\" attribute in setVehiclePosition, even if the radius is 0, which means it could still be off center. In order to force waypoint to the exact position, similar to \"CAN_COLLIDE\" attribute, use a negative radius (see Example 2).", "example": "[_grp, 2] setWaypointPosition [position player, 0];", "docSyntax": "waypoint setWaypointPosition [center, radius]", "syntax": "waypoint setWaypointPosition [center,radius]"}, "setWaypointScript": {"version": "CMD", "tags": "", "description": "Attaches a script to a scripted waypoint. In early versions of Arma, command consisted of a script name and additional script arguments and the script had to use SQS Syntax. The script receives the following arguments in _this variable: [group, position, target] + [the optional passed arguments]. The optional arguments are appended to the end of the arguments array.", "example": "[_grp, 2] setWaypointScript \"find.sqs player\";", "docSyntax": "waypoint setWaypointScript command", "syntax": "waypoint setWaypointScript command"}, "setWaypointSpeed": {"version": "CMD", "tags": "", "description": "Switches the group speed mode when the waypoint becomes active.", "example": "[_grp, 2] setWaypointSpeed \"FULL\";", "docSyntax": "waypoint setWaypointSpeed mode", "syntax": "waypoint setWaypointSpeed mode"}, "setWaypointStatements": {"version": "CMD", "tags": "", "description": "The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed.", "example": "_waypoint setWaypointStatements [\"true\", \"hint 'hello'; hint 'goodbye'\"];", "docSyntax": "waypoint setWaypointStatements [condition, statement]", "syntax": "waypoint setWaypointStatements [condition,statement]"}, "setWaypointTimeout": {"version": "CMD", "tags": "", "description": "Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid).", "example": "[_grp, 2] setWaypointTimeout [5, 10, 6];", "docSyntax": "waypoint setWaypointTimeout [min, mid, max]", "syntax": "waypoint setWaypointTimeout [min,mid,max]"}, "setWaypointType": {"version": "CMD", "tags": "", "description": "Sets the waypoint type of given waypoint. More details at Waypoints.", "example": "_myWaypoint setWaypointType \"HOLD\";", "docSyntax": "waypoint setWaypointType type", "syntax": "waypoint setWaypointType type"}, "setWaypointVisible": {"version": "CMD", "tags": "", "description": "Sets the visibility of the given waypoint in 3D HUD view (for map visibility see showWaypoint).", "example": "[grp, 2] setWaypointVisible false;", "docSyntax": "waypoint setWaypointVisible visible", "syntax": "waypoint setWaypointVisible visible"}, "setWeaponReloadingTime": {"version": "CMD", "tags": "", "description": "Sets reloading phase on the given weapon's current ammo round.", "example": "_success = _vehicle setWeaponReloadingTime [gunner vehicle player, currentMuzzle gunner vehicle player, 0.5];", "docSyntax": "vehicle setWeaponReloadingTime [gunner, muzzleName, reloadTime]", "syntax": "<objVehicle> setWeaponReloadingTime [gunner,muzzleName,reloadTime]"}, "setWeaponZeroing": {"version": "CMD", "tags": "", "description": "Sets zeroing of given weapon and muzzle for given unit or vehicle.", "example": "player setWeaponZeroing [\"arifle_MX_GL_F\", \"GL_3GL_F\", 8]; //\u00a0Set zeroing for underbarrel grenade launcher to 400m", "docSyntax": "object setWeaponZeroing [weaponClass, muzzleClass, zeroingIndex]", "syntax": "<object> setWeaponZeroing [weaponClass,muzzleClass,zeroingIndex]"}, "setWind": {"version": "CMD", "tags": "", "description": "Set current or permanent wind vector.", "example": "setWind [10, 10, true];", "docSyntax": "setWind [x, y, forced]", "syntax": "setWind [x,y,forced]"}, "setWindDir": {"version": "CMD", "tags": "", "description": "Changes the wind direction smoothly.", "example": "60 setWindDir 180;", "docSyntax": "time setWindDir value", "syntax": "<scalar> setWindDir <scalar>"}, "setWindForce": {"version": "CMD", "tags": "", "description": "Set max. wind overall wind changes in time. A time of zero means there will be an immediate change. A wind level of zero is minimal changes and a wind level of one means that wind can change rapidly.", "example": "1800 setWindForce 0.5;", "docSyntax": "time setWindForce wind", "syntax": "<scalar> setWindForce wind"}, "setWindStr": {"version": "CMD", "tags": "", "description": "Changes the wind strength smoothly during the given time (in seconds). A time of zero means there will be an immediate change.", "example": "60 setWindStr 0.8; //\u00a0set the wind strength to 0.8 gradually over the next 60 seconds", "docSyntax": "time setWindStr value", "syntax": "<scalar> setWindStr <scalar>"}, "setWingForceScaleRTD": {"version": "CMD", "tags": "", "description": "Set effectivity of wings.", "docSyntax": "helicopterRTD setWingForceScaleRTD [leftHorizontal, rightHorizontal, vertical]", "syntax": "helicopterRTD setWingForceScaleRTD [leftHorizontal,rightHorizontal,vertical]"}, "setWPPos": {"version": "CMD", "tags": "", "description": "Sets waypoint position.", "example": "[_groupOne, 1] setWPPos markerPos \"MarkerOne\";", "docSyntax": "waypoint setWPPos pos", "syntax": "waypoint setWPPos <array>"}, "show3DIcons": {"version": "CMD", "tags": "", "description": "Toggle the drawing of 3D icons.", "example": "-", "docSyntax": "map show3DIcons bool", "syntax": "<objMap> show3DIcons <bool>"}, "showChat": {"version": "CMD", "tags": "", "description": "Shows/hides the whole chat window.", "example": "showChat false;", "docSyntax": "showChat bool", "syntax": "showChat <bool>"}, "showCinemaBorder": {"version": "CMD", "tags": "", "description": "Forces drawing of cinema borders when using custom camera camCreate. This is normally used in cutscenes to indicate player has no control.", "example": "showCinemaBorder false;", "docSyntax": "showCinemaBorder show", "syntax": "showCinemaBorder show"}, "showCommandingMenu": {"version": "CMD", "tags": "", "description": "Create the commanding menu described by the given config class or menu name. When the name is empty, the current menu is hidden.", "example": "showCommandingMenu \"\";", "docSyntax": "showCommandingMenu name", "syntax": "showCommandingMenu <string>"}, "showCompass": {"version": "CMD", "tags": "", "description": "Shows or hides the compass on the map screen, if enabled for the mission and you possess the item. (default true)", "example": "showCompass false;", "docSyntax": "showCompass show", "syntax": "showCompass show"}, "showCuratorCompass": {"version": "CMD", "tags": "", "description": "Hides or shows compass in curator interface.", "example": "showCuratorCompass true;", "docSyntax": "showCuratorCompass bool", "syntax": "showCuratorCompass <bool>"}, "showGPS": {"version": "CMD", "tags": "", "description": "Shows or hides the GPS receiver on the map screen, if enabled for the mission and you possess the item. (default false).", "example": "showGPS true;", "docSyntax": "showGPS show", "syntax": "showGPS show"}, "showHUD": {"version": "CMD", "tags": "", "description": "Enable / disable showing of HUD. Defines visibility of weapon crosshair and any informational tags that appear when pointing the weapon at an object as well as availability of the default action menu. Unfortunately, it also hides icons drawn with drawIcon3D.", "example": "showHUD false;", "docSyntax": "showHUD enable", "syntax": "showHUD <bool>"}, "showLegend": {"version": "CMD", "tags": "", "description": "Show/hide map legend.", "example": "-", "docSyntax": "map showLegend bool", "syntax": "<objMap> showLegend <bool>"}, "showMap": {"version": "CMD", "tags": "", "description": "Enable Map (default true)", "example": "showMap false;", "docSyntax": "showMap show", "syntax": "showMap show"}, "shownArtilleryComputer": {"version": "CMD", "tags": "", "description": "Checks whether the player has the artillery computer currently open.", "example": "if (shownArtilleryComputer) then { hint \"Artillery Computer shown on screen\"; };", "docSyntax": "shownArtilleryComputer", "syntax": "shownArtilleryComputer"}, "shownChat": {"version": "CMD", "tags": "", "description": "Returns true if chat window is enabled. Chat window can be disabled with showChat command.", "example": "_bool = shownChat;", "docSyntax": "shownChat", "syntax": "shownChat"}, "shownCompass": {"version": "CMD", "tags": "", "description": "Checks if client has Compass enabled in description.ext (showCompass param) or force enabled with showCompass command.", "example": "if (shownCompass) then {hint \"You have Compass enabled\"};", "docSyntax": "shownCompass", "syntax": "shownCompass"}, "shownCuratorCompass": {"version": "CMD", "tags": "", "description": "Returns true if compass is shown.", "example": "_isShown = shownCuratorCompass;", "docSyntax": "shownCuratorCompass", "syntax": "shownCuratorCompass"}, "showNewEditorObject": {"version": "CMD", "tags": "", "description": "Show the add editor object dialog,type is editor object type,class is,class definition to automatically select,side filters by a certain,side,pos is position to create the object.", "example": "-", "docSyntax": "map showNewEditorObject [type,class,side,position]", "syntax": "<objMap> showNewEditorObject [type,class,<objSide>,position]"}, "shownGPS": {"version": "CMD", "tags": "", "description": "Checks if client has GPS reciever enabled in description.ext (showGPS param) or force enabled with showGPS command.", "example": "if (shownGPS) then {hint \"You have GPS reciever enabled\"};", "docSyntax": "shownGPS", "syntax": "shownGPS"}, "shownHUD": {"version": "CMD", "tags": "", "description": "Returns array of Booleans corresponding to the visibility of various HUD elements (see extended showHUD).", "example": "_hudStatus = shownHUD;", "docSyntax": "shownHUD", "syntax": "shownHUD"}, "shownMap": {"version": "CMD", "tags": "", "description": "Checks if client has Map enabled in description.ext (showMap param) or force enabled with showMap command.", "example": "if (shownMap) then {hint \"You have Map enabled\"};", "docSyntax": "shownMap", "syntax": "shownMap"}, "shownPad": {"version": "CMD", "tags": "", "description": "Checks if client has Notepad enabled.", "example": "if (shownPad) then {hint \"You have Notepad enabled.\"};", "docSyntax": "shownPad", "syntax": "shownPad"}, "shownRadio": {"version": "CMD", "tags": "", "description": "Check if player has Radio enabled.", "example": "if (shownRadio) then {hint \"You have Radio enabled.\"};", "docSyntax": "shownRadio", "syntax": "shownRadio"}, "shownScoretable": {"version": "CMD", "tags": "", "description": "Returns the state of the score table set with showScoretable command.", "example": "_state = shownScoretable;", "docSyntax": "shownScoretable", "syntax": "shownScoretable"}, "shownSubtitles": {"version": "CMD", "tags": "", "description": "A getter for showSubtitles.", "example": "private _setToShow = shownSubtitles;", "docSyntax": "shownSubtitles", "syntax": "shownSubtitles"}, "shownUAVFeed": {"version": "CMD", "tags": "", "description": "Returns true if video feed transmitted from UAV is shown. A getter for showUAVFeed.", "example": "_bool = shownUAVFeed;", "docSyntax": "shownUAVFeed", "syntax": "shownUAVFeed"}, "shownWarrant": {"version": "CMD", "tags": "", "description": "Check if player has ID card enabled. Obsolete command.", "example": "hint format [\"Your ID is %1\", [\"off\", \"on\"] select shownWarrant];", "docSyntax": "shownWarrant", "syntax": "shownWarrant"}, "shownWatch": {"version": "CMD", "tags": "", "description": "Checks if client has Watch enabled in description.ext (showWatch param) or force enabled with showWatch command.", "example": "if (shownWatch) then {hint \"You have Watch enabled\"};", "docSyntax": "shownWatch", "syntax": "shownWatch"}, "showPad": {"version": "CMD", "tags": "", "description": "Shows or hides the notebook on the map screen, if enabled for the mission. (default true). It is no longer relevant to Arma 2.", "example": "showPad false;", "docSyntax": "showPad show", "syntax": "showPad show"}, "showRadio": {"version": "CMD", "tags": "", "description": "Shows or hides the radio on the map screen, if enabled for the mission and you possess the item. (default true).", "example": "showRadio false;", "docSyntax": "showRadio show", "syntax": "showRadio show"}, "showScoretable": {"version": "CMD", "tags": "", "description": "Forces the score table to be shown, hidden or reset to default functionality. Forcing score table will make it show even in SP. When score table is forced opened it cannot be closed manually, when it is force closed, it cannot be opened manually.", "example": "showScoretable 1;", "docSyntax": "showScoretable force", "syntax": "showScoretable force"}, "showSubtitles": {"version": "CMD", "tags": "", "description": "Enables / disables showing of subtitles in a chat. Only scripted/engine chatter is affected, player manual chat is unaffected. Returns the previous state.", "example": "showSubtitles false;", "docSyntax": "showSubtitles enable", "syntax": "showSubtitles <bool>"}, "showUAVFeed": {"version": "CMD", "tags": "", "description": "Shows/hides video feed transmitted from UAV in its custom info panel.", "example": "showUAVFeed true;", "docSyntax": "showUAVFeed show", "syntax": "showUAVFeed show"}, "showWarrant": {"version": "CMD", "tags": "", "description": "Enable ID card.", "example": "showWarrant true;", "docSyntax": "showWarrant show", "syntax": "showWarrant show"}, "showWatch": {"version": "CMD", "tags": "", "description": "Shows or hides the watch on the map screen, if enabled for the mission and you possess the item. (default true)", "example": "showWatch false;", "docSyntax": "showWatch show", "syntax": "showWatch show"}, "showWaypoint": {"version": "CMD", "tags": "", "description": "Defines how waypoints are shown to the player in map view. For 3D HUD visibility see setWaypointVisible.", "example": "[_grp, 2] showWaypoint \"ALWAYS\";", "docSyntax": "waypoint showWaypoint show", "syntax": "waypoint showWaypoint show"}, "showWaypoints": {"version": "CMD", "tags": "", "description": "Shows/Hides task HUD markers and waypoints that will fade out in time. Dependable on difficulty settings.", "example": "showWaypoints true;", "docSyntax": "showWaypoints enabled", "syntax": "showWaypoints <bool>"}, "side": {"version": "CMD", "tags": "", "description": "Returns the side of a unit, vehicle, object or location.", "example": "if (side player == west) then { hint \"Player is on the West side\" };", "docSyntax": "side target", "syntax": "<objSide> <object>"}, "sideAmbientLife": {"version": "CMD", "tags": "", "description": "Returns side of ambient life, for example ambient life placed in Eden Editor.", "example": "_sideAmbientLife = sideAmbientLife;", "docSyntax": "sideAmbientLife", "syntax": "sideAmbientLife"}, "sideChat": {"version": "CMD", "tags": "", "description": "Types text to the side radio channel by the specified unit.", "example": "_soldierOne sideChat \"Show this text\";", "docSyntax": "unit sideChat chatText", "syntax": "<objUnit> sideChat chatText"}, "sideEmpty": {"version": "CMD", "tags": "", "description": "Returns empty side, for example static buildings in Eden Editor.", "example": "_sideEmpty = sideEmpty;", "docSyntax": "sideEmpty", "syntax": "sideEmpty"}, "sideEnemy": {"version": "CMD", "tags": "", "description": "The enemy side which is used for renegades. Units of this side are hostile to everyone.", "example": "if (side player == sideEnemy) then { hint \"We've got a renegade!\"; };", "docSyntax": "sideEnemy", "syntax": "sideEnemy"}, "sideFriendly": {"version": "CMD", "tags": "", "description": "The Friendly side - friendly to all, see Side Relations.", "example": "if (side player == sideFriendly) then { hint \"I feel friendly today!\"; };", "docSyntax": "sideFriendly", "syntax": "sideFriendly"}, "sideLogic": {"version": "CMD", "tags": "", "description": "The Logic side. Side of Game Logics and Modules.", "example": "if (side _obj == sideLogic) then { hint \"It is a logic!\"; };", "docSyntax": "sideLogic", "syntax": "sideLogic"}, "sideRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the side radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne sideRadio \"messageOne\";", "docSyntax": "unit sideRadio radioName", "syntax": "<objUnit> sideRadio radioName"}, "sideUnknown": {"version": "CMD", "tags": "", "description": "The unknown side.", "example": "//soldier1 and soldier2 of different sides and out of sight soldier1 reveal soldier2; hint str (soldier1 nearTargets 1000); //returns: [[[1557.96,5047.4,1.32402],\"SoldierWB\",UNKNOWN,0.0155183,soldier2,5]] soldier1 reveal [soldier2,1.5]; //returns: [[[1556.52,5050.08,1.32402],\"SoldierWB\",WEST,0.0211193,soldier2,5]]", "docSyntax": "sideUnknown", "syntax": "sideUnknown"}, "simpleTasks": {"version": "CMD", "tags": "", "description": "Return all simple tasks assigned to given unit.", "example": "_tasks = simpleTasks player;", "docSyntax": "simpleTasks unit", "syntax": "simpleTasks <objUnit>"}, "simulationEnabled": {"version": "CMD", "tags": "", "description": "Check if the entity has enabled simulation.", "example": "simulationEnabled player;", "docSyntax": "simulationEnabled entity", "syntax": "simulationEnabled entity"}, "simulCloudDensity": {"version": "CMD", "tags": "", "description": "Returns density of clouds at given position.", "example": "simulCloudDensity getPos player;", "docSyntax": "simulCloudDensity pos", "syntax": "simulCloudDensity <array>"}, "simulCloudOcclusion": {"version": "CMD", "tags": "", "description": "Returns clouds occlusion between two given points.", "example": "private _posPlayer = getPos player; private _posAbovePlayer = +_posPlayer; _posAbovePlayer set [2,200]; simulCloudOcclusion [_posPlayer, _posAbovePlayer];", "docSyntax": "simulCloudOcclusion [pos1, pos2]", "syntax": "simulCloudOcclusion [pos1,pos2]"}, "simulInClouds": {"version": "CMD", "tags": "", "description": "Returns if given position is in clouds.", "example": "simulInClouds getPos player;", "docSyntax": "simulInClouds pos", "syntax": "simulInClouds <array>"}, "simulSetHumidity": {"version": "CMD", "tags": "", "description": "Sets simul cloud cover. This command does not affect overcast value.", "example": "simulSetHumidity 1;", "docSyntax": "simulSetHumidity humidity", "syntax": "simulSetHumidity humidity"}, "simulWeatherSync": {"version": "CMD", "tags": "", "description": "Synchronizes Simul Weather with Arma weather, generates all keyframes.", "example": "simulWeatherSync;", "docSyntax": "simulWeatherSync", "syntax": "simulWeatherSync"}, "sin": {"version": "CMD", "tags": "", "description": "Sine of x.", "example": "_sine = sin 30; //\u00a0result is 0.5", "docSyntax": "sin x", "syntax": "sin x"}, "size": {"version": "CMD", "tags": "", "description": "Returns a location's size.", "example": "_locSize = size myLocation;", "docSyntax": "size location", "syntax": "size location"}, "sizeOf": {"version": "CMD", "tags": "", "description": "Returns the diameter of bounding sphere of the object of given classname in meters. If you need to estimate the size of the object more precisely, use boundingBox or boundingBoxReal.", "example": "_dimension = sizeOf \"M1Abrams\"; //\u00a0Returns 10.7833", "docSyntax": "sizeOf classname", "syntax": "sizeOf classname"}, "skill": {"version": "CMD", "tags": "", "description": "Returns current skill of a unit, in range between 0 to 1, 1 being the highest level of skill.", "example": "_skill = skill unit1;", "docSyntax": "skill unit", "syntax": "skill <objUnit>"}, "skillFinal": {"version": "CMD", "tags": "", "description": "Returns final, recalculated sub skill value of given unit. (with regard to AI Level coefficient (Difficulty settings)).", "example": "_unitTrueCourage = unit1 skillFinal \"courage\";", "docSyntax": "unit skillFinal skillName", "syntax": "<objUnit> skillFinal <string>"}, "skipTime": {"version": "CMD", "tags": "", "description": "Jumps the specified number of hours forward or backward.", "example": "skipTime 5;", "docSyntax": "skipTime duration", "syntax": "skipTime duration"}, "sleep": {"version": "CMD", "tags": "", "description": "Suspends code execution for given time in seconds. The sleep precision is given by a framerate, the delay given is the minimal delay expected. Must be called inside of a context which is interruptible, i.e. a script executed by execVM or spawn.", "example": "0 spawn { sleep 5; hint \"after (at least) 5 seconds...\"; };", "docSyntax": "sleep delay", "syntax": "sleep <scalar>"}, "sliderPosition": {"version": "CMD", "tags": "", "description": "Returns current thumb position of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.", "example": "_slidepos1 = sliderPosition 105;", "docSyntax": "sliderPosition idc", "syntax": "sliderPosition <scalar>"}, "sliderRange": {"version": "CMD", "tags": "", "description": "Returns limits of CT_SLIDER or CT_XSLIDER.", "example": "sliderRange _ctrlSlider params [\"_minValue\", \"_maxValue\"];", "docSyntax": "sliderRange idc", "syntax": "sliderRange <scalar>"}, "sliderSetPosition": {"version": "CMD", "tags": "", "description": "Sets current thumb position of CT_SLIDER or CT_XSLIDER.", "example": "_ctrlSlider sliderSetPosition 50;", "docSyntax": "sliderSetPosition [idc, pos]", "syntax": "sliderSetPosition [<scalar>,<array>]"}, "sliderSetRange": {"version": "CMD", "tags": "", "description": "Sets limits of CT_SLIDER or CT_XSLIDER.", "example": "sliderSetRange [101, 0, 100];", "docSyntax": "sliderSetRange [idc, min, max]", "syntax": "sliderSetRange [<scalar>,min,max]"}, "sliderSetSpeed": {"version": "CMD", "tags": "", "description": "Sets slider line step and page step delta amount as well as optional step amount of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.", "example": "sliderSetSpeed [101, 0.5, 2];", "docSyntax": "sliderSetSpeed [idc, line, page, step]", "syntax": "sliderSetSpeed [<scalar>,line,page,step]"}, "sliderSpeed": {"version": "CMD", "tags": "", "description": "Returns slider step value for line and page movement of CT_SLIDER or CT_XSLIDER.", "example": "sliderSpeed _ctrlSlider params [\"_min\", \"_max\"];", "docSyntax": "sliderSpeed idc", "syntax": "sliderSpeed <scalar>"}, "slingLoadAssistantShown": {"version": "CMD", "tags": "", "description": "Returns true if Sling Load Assistant is open.", "example": "waitUntil { slingLoadAssistantShown }; hint \"You lack rudimentary motor skills and basic eye-hand coordination.\"; //\u00a0scold user for unethical practices", "docSyntax": "slingLoadAssistantShown", "syntax": "slingLoadAssistantShown"}, "soldierMagazines": {"version": "CMD", "tags": "", "description": "Get array with all magazines of the given unit.", "example": "soldierMagazines player; //\u00a0returns: [ \"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:1/0](5x)\", \"9mm 16Rnd Mag(16/16)[id/cr:7/0](2x)\", \"RGO Frag Grenade(1/1)[id/cr:10/0](2x)\", \"Smoke Grenade (White)(1/1)[id/cr:12/0](1x)\", \"Smoke Grenade (Green)(1/1)[id/cr:13/0](1x)\", \"Chemlight (Green)(1/1)[id/cr:14/0](2x)\", \"Titan AT Missile(1/1)[id/cr:16/0](2x)\" ]", "docSyntax": "soldierMagazines unit", "syntax": "soldierMagazines <objUnit>"}, "someAmmo": {"version": "CMD", "tags": "", "description": "Check if unit has some ammo.", "example": "? not (someAmmo _loon1) : hint \"Loon1 is out of ammo!\"", "docSyntax": "someAmmo unitName", "syntax": "someAmmo <objUnit>"}, "sort": {"version": "CMD", "tags": "", "description": "Attempts to sort given array either in ascending (true) or descending (false) order.", "example": "_arr = [5.21725,1.30859,4,5.03028,1]; _arr sort true; hint str _arr; //[1,1.30859,4,5.03028,5.21725]", "docSyntax": "array sort order", "syntax": "<array> sort <scalar>"}, "soundParams": {"version": "CMD", "tags": "", "description": "Returns various params for the given sound", "example": "_params = soundParams 10;", "docSyntax": "soundParams id", "syntax": "soundParams <scalar>"}, "soundVolume": {"version": "CMD", "tags": "", "description": "Returns the current sound volume (set by fadeSound).", "example": "hint str soundVolume;", "docSyntax": "soundVolume", "syntax": "soundVolume"}, "speaker": {"version": "CMD", "tags": "", "description": "Returns the speaker class name of a unit.", "example": "speaker player; //\u00a0Can return \"male09eng\"", "docSyntax": "speaker unit", "syntax": "speaker <objUnit>"}, "speechVolume": {"version": "CMD", "tags": "", "description": "Returns the current speech volume (set by fadeSpeech)", "example": "hint str speechVolume;", "docSyntax": "speechVolume", "syntax": "speechVolume"}, "speed": {"version": "CMD", "tags": "", "description": "Object speed (in km/h). Returns relative speed of given object along Y axis. An equivalent to: 3.6 * (velocityModelSpace _obj select 1)", "example": "if (speed _truck1 >= 100) then { hint \"You're going too fast!\" };", "docSyntax": "speed object", "syntax": "<scalar> <object>"}, "speedMode": {"version": "CMD", "tags": "", "description": "Returns speed mode of the group, which can be any of the following:", "example": "_speed = speedMode group player;", "docSyntax": "speedMode groupName", "syntax": "speedMode groupName"}, "splitString": {"version": "CMD", "tags": "", "description": "Splits the provided ANSI string into an array of tokens according to given delimiters.", "example": "_str = \"- This, is a sample string.\" splitString \"-,. \"; //\u00a0[\"This\",\"is\",\"a\",\"sample\",\"string\"] _str joinString \"#\"; //\u00a0\"This#is#a#sample#string\"", "docSyntax": "str splitString delimiters", "syntax": "str splitString delimiters"}, "sqrt": {"version": "CMD", "tags": "", "description": "Returns square root of x.", "example": "private _squareRoot = sqrt 9; //\u00a0returns 3", "docSyntax": "sqrt x", "syntax": "sqrt x"}, "squadParams": {"version": "CMD", "tags": "", "description": "Returns data about squad of given unit loaded from squad.xml as well as the unit itself.", "example": "_info = squadParams player;", "docSyntax": "squadParams unit", "syntax": "squadParams <objUnit>"}, "stance": {"version": "CMD", "tags": "", "description": "Returns the stance of the given unit.", "example": "if (stance player == \"STAND\") then {hint \"I am standing!\"};", "docSyntax": "stance unit", "syntax": "stance <objUnit>"}, "startLoadingScreen": {"version": "CMD", "tags": "", "description": "Shows loading screen with the given text, using the given resource. While loading screen is shown, simulation and scene drawing is disabled, user control is disabled, mouse cursor is hidden, scripts run at full speed (50ms per frame instead of 3ms per frame for Scheduled Scripts).", "example": "startLoadingScreen [\"Loading My Mission, please wait...\"];", "docSyntax": "startLoadingScreen [text, resource]", "syntax": "startLoadingScreen [<string>,resource]"}, "stop": {"version": "CMD", "tags": "", "description": "Stop an AI unit from turning or moving, preventing it to follow a watched object or engage an enemy properly - although if properly aligned, the unit -will- shoot the enemy. It may still change the stance if deemed appropriate (e.g. under fire). Use disableAI to disable specific AI capabilities.", "example": "loon1 stop true;", "docSyntax": "unitName stop toggle", "syntax": "<objUnit> stop toggle"}, "stopEngineRTD": {"version": "CMD", "tags": "", "description": "Instant engines stop.", "example": "stopEngineRTD myHeli", "docSyntax": "stopEngineRTD heli", "syntax": "stopEngineRTD heli"}, "stopped": {"version": "CMD", "tags": "", "description": "Check if unit is stopped by stop command.", "example": "? (stopped _loon1) : hint \"Loon1 is stopped\"", "docSyntax": "stopped unitName", "syntax": "stopped <objUnit>"}, "stopSound": {"version": "CMD", "tags": "", "description": "Stops the given sound", "example": "stopSound 10;", "docSyntax": "stopSound id", "syntax": "stopSound <scalar>"}, "str": {"version": "CMD", "tags": "", "description": "Converts any value into a string, depending on its type. If an Object has a vehicleVarName, it is returned (see Example 4).", "example": "_s = str (5 + 2); //\u00a0The value of _s is the string \"7\"", "docSyntax": "str value", "syntax": "str <scalar>"}, "sunOrMoon": {"version": "CMD", "tags": "", "description": "Time", "example": "private _transitionState = sunOrMoon;", "docSyntax": "sunOrMoon", "syntax": "sunOrMoon"}, "supportInfo": {"version": "CMD", "tags": "", "description": "Creates a list of supported operators and type. Each field of array has the format: \"x:name\" Where x can be:", "example": "supportInfo \"b:select*\"; //\u00a0returns [\"b:ARRAY select SCALAR\",\"b:ARRAY select BOOL\",\"b:CONFIG select SCALAR\"]", "docSyntax": "supportInfo mask", "syntax": "supportInfo mask"}, "suppressFor": {"version": "CMD", "tags": "", "description": "Force suppressive fire from the unit.", "example": "_soldier1 suppressFor 10; //\u00a0Will force soldier1 to do suppressive fire to known enemies for 10 seconds", "docSyntax": "unit suppressFor duration", "syntax": "<objUnit> suppressFor duration"}, "surfaceIsWater": {"version": "CMD", "tags": "", "description": "Returns whether there is water at given position. In Arma 3, it also detects pond objects, but only if they are loaded in memory (normally only true if the objects are within the object view distance)", "example": "private _result = surfaceIsWater [1000, 3000];", "docSyntax": "surfaceIsWater position", "syntax": "surfaceIsWater position"}, "surfaceNormal": {"version": "CMD", "tags": "", "description": "Returns terrain's surface normal on given position.", "example": "_normal = surfaceNormal [300, 500];", "docSyntax": "surfaceNormal position", "syntax": "surfaceNormal position"}, "surfaceTexture": {"version": "CMD", "tags": "", "description": "Same as surfaceType, but returns texture path to ground texture as string.", "example": "private _groundTexture = surfaceTexture getPosATL player;", "docSyntax": "surfaceTexture position", "syntax": "surfaceTexture position"}, "surfaceType": {"version": "CMD", "tags": "", "description": "Returns what surface type is at the given position. For surface texture see surfaceTexture command.", "example": "private _surface = surfaceType [4500, 4500];", "docSyntax": "surfaceType position", "syntax": "surfaceType position"}, "swimInDepth": {"version": "CMD", "tags": "", "description": "Sets the target depth level for swimming soldier. Depth should be a negative number.", "example": "soldier swimInDepth -20;", "docSyntax": "unit swimInDepth value", "syntax": "<objUnit> swimInDepth <scalar>"}, "switchableUnits": {"version": "CMD", "tags": "", "description": "Returns a list of playable units available for switching to", "example": "_availableUnits = switchableUnits;", "docSyntax": "switchableUnits", "syntax": "switchableUnits"}, "switchAction": {"version": "CMD", "tags": "", "description": "When used on a person, the given action is started immediately (there is no transition). Use switchmove \"\" to switch back to the default movement if there is no transition back, otherwise the person may be stuck.", "example": "soldierOne switchAction \"SitDown\";", "docSyntax": "soldier switchAction action", "syntax": "soldier switchAction action"}, "switchCamera": {"version": "CMD", "tags": "", "description": "Switch camera to given vehicle / camera. Mode is one of:", "example": "player switchCamera \"Gunner\";", "docSyntax": "target switchCamera mode", "syntax": "<object> switchCamera mode"}, "switchGesture": {"version": "CMD", "tags": "", "description": "When used on a person,the given move is started immediately (without transition).", "example": "soldierOne switchGesture \"Wave\";", "docSyntax": "soldier switchGesture moveName", "syntax": "soldier switchGesture moveName"}, "switchLight": {"version": "CMD", "tags": "", "description": "Controls whether a lamp is lit or not.", "example": "(object 12345) switchLight \"OFF\";", "docSyntax": "lamp switchLight mode", "syntax": "lamp switchLight mode"}, "switchMove": {"version": "CMD", "tags": "", "description": "Immediately applies given animation to the unit. For a smooth transition from the current animation, use playMove.", "example": "Prone:", "docSyntax": "person switchMove moveName", "syntax": "<objUnit> switchMove moveName"}, "synchronizedObjects": {"version": "CMD", "tags": "", "description": "Return the list of objects synchronized with the given unit.", "example": "_objects = synchronizedObjects _logic;", "docSyntax": "synchronizedObjects unit", "syntax": "synchronizedObjects <objUnit>"}, "synchronizedTriggers": {"version": "CMD", "tags": "", "description": "Returns the list of triggers synchronized with a given waypoint.", "example": "synchronizedTriggers _someWaypoint;", "docSyntax": "synchronizedTriggers waypoint", "syntax": "synchronizedTriggers waypoint"}, "synchronizedWaypoints": {"version": "CMD", "tags": "", "description": "Returns the list of waypoints synchronized with a given trigger or waypoint.", "example": "synchronizedWaypoints _someTrigger;", "docSyntax": "synchronizedWaypoints obj", "syntax": "synchronizedWaypoints <object>"}, "synchronizeObjectsAdd": {"version": "CMD", "tags": "", "description": "Add given objects to the unit's list of synchronized objects.", "example": "_acm = _groupLogic createUnit [\"AmbientCombatManager\", position player, [], 0, \"NONE\"]; _acm synchronizeObjectsAdd [player];", "docSyntax": "unit synchronizeObjectsAdd objects", "syntax": "<objUnit> synchronizeObjectsAdd objects"}, "synchronizeObjectsRemove": {"version": "CMD", "tags": "", "description": "Removes given objects from the unit's list of synchronized objects.", "example": "player synchronizeObjectsRemove [_object1, _object2, _object3];", "docSyntax": "unit synchronizeObjectsRemove objects", "syntax": "<objUnit> synchronizeObjectsRemove objects"}, "synchronizeTrigger": {"version": "CMD", "tags": "", "description": "Synchronizes the trigger with zero or more waypoints.", "example": "_trigger synchronizeTrigger [];", "docSyntax": "trigger synchronizeTrigger waypoints", "syntax": "<objTrigger> synchronizeTrigger waypoints"}, "synchronizeWaypoint": {"version": "CMD", "tags": "", "description": "Synchronizes the trigger or the waypoint with an array of waypoints.", "example": "_myTrigger synchronizeWaypoint [[_group2, 3]];", "docSyntax": "triggerOrWaypoint synchronizeWaypoint waypoints", "syntax": "triggerOrWaypoint synchronizeWaypoint waypoints"}, "systemChat": {"version": "CMD", "tags": "", "description": "Types text to the system radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec).", "example": "systemChat \"Hello world!\";", "docSyntax": "systemChat text", "syntax": "systemChat <string>"}, "systemOfUnits": {"version": "CMD", "tags": "", "description": "Returns the currently selected system of units.", "example": "_system = systemOfUnits;", "docSyntax": "systemOfUnits", "syntax": "systemOfUnits"}, "systemTime": {"version": "CMD", "tags": "", "description": "Returns system time.", "example": "private _currentTime = systemTime;", "docSyntax": "systemTime", "syntax": "systemTime"}, "systemTimeUTC": {"version": "CMD", "tags": "", "description": "Returns systemTime according to Universal Time Coordinated time scale.", "example": "private _UKTime = systemTimeUTC;", "docSyntax": "systemTimeUTC", "syntax": "systemTimeUTC"}, "tan": {"version": "CMD", "tags": "", "description": "Tangent of x, argument in Degrees.", "example": "_tangent = tan 45;", "docSyntax": "tan x", "syntax": "tan x"}, "targetKnowledge": {"version": "CMD", "tags": "", "description": "Returns unit's knowledge about target.", "example": "private _allInfo = _soldierOne targetKnowledge _jeepOne; _allInfo params [\"_knownByGroup\", \"_knownByUnit\", \"_lastSeen\", \"_lastThreat\", \"_side\", \"_errorMargin\", \"_position\"];", "docSyntax": "unit targetKnowledge target", "syntax": "<objUnit> targetKnowledge <object>"}, "targets": {"version": "CMD", "tags": "", "description": "Retrieves list of given unit targets matching specified filter. If the filter is not specified, all targets are returned.", "example": "private _targets = _unit targets [false, 300, [east, sideEnemy]]; //\u00a0all targets of east or renegade side in 300m", "docSyntax": "unitOrGroup targets [enemyOnly, maxDistance, sides, maxAge, alternateCenter]", "syntax": "unitOrGroup targets [enemyOnly,maxDistance,sides,maxAge,alternateCenter]"}, "targetsAggregate": {"version": "CMD", "tags": "", "description": "Aggregate candidates.", "example": "_aggregation = [player, sideEnemy, \"\", [], 0] targetsAggregate (player targetsQuery [objNull, sideUnknown, \"\", [], 0]); /* returns e.g [ [ [\"COUNT0\", 1], [\"SIDE0\", WEST], [\"UNIT0\", \"B_Soldier_F\"], [\"PLACE0\", [[<null>,<null>], 0, <null>]], [\"TIME0\", [-0.9, -0.9]], [\"UCOUNT0\", 1], [\"UTYPE0\", ... ] ] */", "docSyntax": "[speaker, side, classname, position, timeMax] targetsAggregate candidates", "syntax": "[speaker,<objSide>,classname,position,timeMax] targetsAggregate candidates"}, "targetsQuery": {"version": "CMD", "tags": "", "description": "Returns sorted array of targets, known to the enquirer (including own troops), where the accuracy coefficient reflects how close the result matches the query. This command could be CPU intensive.", "example": "Return all known targets for player:", "docSyntax": "enquirer targetsQuery [targetIgnore, targetSide, targetType, targetPosition, targetMaxAge]", "syntax": "enquirer targetsQuery [targetIgnore,targetSide,targetType,targetPosition,targetMaxAge]"}, "taskAlwaysVisible": {"version": "CMD", "tags": "", "description": "Returns true if the task is flagged to be always visible or false if not.", "example": "_isAlwaysVisible = taskAlwaysVisible (currentTask player);", "docSyntax": "taskAlwaysVisible task", "syntax": "taskAlwaysVisible <objTask>"}, "taskChildren": {"version": "CMD", "tags": "", "description": "Return the child tasks of the specified task.", "example": "_children = taskChildren \"someTask\";", "docSyntax": "taskChildren task", "syntax": "taskChildren <objTask>"}, "taskCompleted": {"version": "CMD", "tags": "", "description": "Return if task is completed. (state Succeeded, Failed or Canceled)", "example": "_task = createSimpleTask [\"task_1\"]; _done = taskCompleted _task;", "docSyntax": "taskCompleted task", "syntax": "taskCompleted <objTask>"}, "taskCustomData": {"version": "CMD", "tags": "", "description": "Returns custom data attached to the local task or an empty array if there are no custom data attached.", "example": "_data = taskCustomData \"someTask\";", "docSyntax": "taskCustomData task", "syntax": "taskCustomData <objTask>"}, "taskDescription": {"version": "CMD", "tags": "", "description": "Returns the sub-parts of the task description. The returned Array is in format [Task description, Task title, Task waypoint description].", "example": "_taskDescArray = taskDescription _task;", "docSyntax": "taskDescription task", "syntax": "taskDescription <objTask>"}, "taskDestination": {"version": "CMD", "tags": "", "description": "Returns the position of the task (as specified by destination parameter in config).", "example": "if (!isNull currentTask player) then { hint str taskDestination currentTask player };", "docSyntax": "taskDestination task", "syntax": "taskDestination <objTask>"}, "taskHint": {"version": "CMD", "tags": "", "description": "Shows info about new, changed or failed task. The text can contain several lines. \\n is used to set a line return.", "example": "taskHint [\"Task failed.\\nBad job!\", [1, 0, 0, 1], \"taskFailed\"];", "docSyntax": "taskHint [text, colour, icon]", "syntax": "taskHint [<string>,colour,icon]"}, "taskMarkerOffset": {"version": "CMD", "tags": "", "description": "Returns model space position for the task marker", "example": "_offset = taskMarkerOffset player;", "docSyntax": "taskMarkerOffset unit", "syntax": "taskMarkerOffset <objUnit>"}, "taskName": {"version": "CMD", "tags": "", "description": "Returns the name of the given task.", "example": "private _taskName = taskName _mytask;", "docSyntax": "taskName task", "syntax": "<string> <objTask>"}, "taskParent": {"version": "CMD", "tags": "", "description": "Returns the parent task of the specified task.", "example": "_parent = taskParent \"someTask\";", "docSyntax": "taskParent task", "syntax": "taskParent <objTask>"}, "taskResult": {"version": "CMD", "tags": "", "description": "Send a result of the task to the task sender.", "example": "taskResult (player createSimpleTask [\"NewTask\"]);", "docSyntax": "taskResult task", "syntax": "taskResult <objTask>"}, "taskState": {"version": "CMD", "tags": "", "description": "Returns the current state of a task.", "example": "tskSomeTask = player createSimpleTask [\"NewTask\"]; hint format[\"Taskstate: %1\", taskState tskSomeTask];", "docSyntax": "taskState task", "syntax": "taskState <objTask>"}, "taskType": {"version": "CMD", "tags": "", "description": "Returns the type of the given task. A new task returns \"Default\" for the type.", "example": "_type = taskType (currentTask player);", "docSyntax": "taskType task", "syntax": "taskType <objTask>"}, "teamMember": {"version": "CMD", "tags": "", "description": "Return an agent for given person.", "example": "_agent = teamMember player;", "docSyntax": "teamMember person", "syntax": "teamMember <objUnit>"}, "teamName": {"version": "CMD", "tags": "", "description": "Return a name of given team.", "example": "_name = teamName _team;", "docSyntax": "teamName team", "syntax": "teamName team"}, "teams": {"version": "CMD", "tags": "", "description": "Return a list of teams in the current mission.", "example": "_teams = teams;", "docSyntax": "teams", "syntax": "teams"}, "teamSwitch": {"version": "CMD", "tags": "", "description": "Invoke the Team Switch dialog (force it even when conditions are not met). There has to be at least one playable unit for team switch to work, and for this command to work in MP, respawn type in description.ext should be 5 (SIDE).", "example": "teamSwitch;", "docSyntax": "teamSwitch", "syntax": "teamSwitch"}, "teamSwitchEnabled": {"version": "CMD", "tags": "", "description": "Check if Team Switch is currently enabled. Team Switch is enabled by default.", "example": "_isTeamSwitchEnabled = teamSwitchEnabled;", "docSyntax": "teamSwitchEnabled", "syntax": "teamSwitchEnabled"}, "teamType": {"version": "CMD", "tags": "", "description": "Returns a type of given team.", "example": "_type = teamType _team;", "docSyntax": "teamType team", "syntax": "teamType team"}, "terminate": {"version": "CMD", "tags": "", "description": "Terminates (aborts) spawned or execVMed script.", "example": "_script = [] execVM \"script.sqf\"; sleep 5; terminate _script;", "docSyntax": "terminate scriptHandle", "syntax": "terminate scriptHandle"}, "terrainIntersect": {"version": "CMD", "tags": "", "description": "Checks for intersection of terrain between two AGL positions. Returns true if intersects with terrain. For ASL variant see terrainIntersectASL.", "example": "_intersects = terrainIntersect [getPos player, getPos chopper];", "docSyntax": "terrainIntersect [start, end]", "syntax": "terrainIntersect [start,end]"}, "terrainIntersectASL": {"version": "CMD", "tags": "", "description": "Checks for intersection of terrain between two ASL positions. Returns true if intersects with terrain. For AGL variant, see terrainIntersect.", "example": "_intersects = terrainIntersectASL [getPosASL player, getPosASL chopper];", "docSyntax": "terrainIntersectASL [start, end]", "syntax": "terrainIntersectASL [start,end]"}, "terrainIntersectAtASL": {"version": "CMD", "tags": "", "description": "Checks for intersection of terrain between two ASL positions. Same as terrainIntersectASL but returns the intersection ASL position.", "example": "_posASL = terrainIntersectAtASL [eyePos player, getPosASL chopper];", "docSyntax": "terrainIntersectAtASL [start, end]", "syntax": "terrainIntersectAtASL [start,end]"}, "text": {"version": "CMD", "tags": "", "description": "Creates a structured text containing the given plain text if argument is String. Use setAttributes to set additional attributes on the text. If the argument is location, returns location's text value (see Alt Syntax).", "example": "_stxt2 = text \"Hello world.\";", "docSyntax": "text string", "syntax": "<string> <string>"}, "textLog": {"version": "CMD", "tags": "", "description": "Dump argument value to debugging output.", "example": "textLog player;", "docSyntax": "textLog anything", "syntax": "textLog anything"}, "textLogFormat": {"version": "CMD", "tags": "", "description": "Debugging output.", "example": "-", "docSyntax": "textLogFormat [format, arg1, arg2, ...]", "syntax": "textLogFormat [format,arg1,arg2,...]"}, "tg": {"version": "CMD", "tags": "", "description": "Identical to tan", "example": "_tangent = tg 45; //\u00a0Result is 1", "docSyntax": "tg x", "syntax": "tg x"}, "throwables": {"version": "CMD", "tags": "", "description": "Returns all throwables in unit inventory in currentThrowable format.", "example": "throwables player; /* [ [\"HandGrenade\",\"HandGrenadeMuzzle\",[1e+007,0]], [\"SmokeShell\",\"SmokeShellMuzzle\",[1e+007,0]], [\"SmokeShellGreen\",\"SmokeShellGreenMuzzle\",[1e+007,0]], [\"Chemlight_green\",\"ChemlightGreenMuzzle\",[1e+007,0]], [\"Chemlight_green\",\"\",[1e+007,0]], [\"HandGrenade\",\"\",[1e+007,0]] ] */", "docSyntax": "throwables unit", "syntax": "throwables <objUnit>"}, "time": {"version": "CMD", "tags": "", "description": "Returns time elapsed since mission started (in seconds). The value is different on each client. If you need unified time, use serverTime.", "example": "private _future = time + 30; waitUntil { time >= _future }; //\u00a0continue after 30 seconds", "docSyntax": "time", "syntax": "<scalar>"}, "timeMultiplier": {"version": "CMD", "tags": "", "description": "Returns the value set with setTimeMultiplier.", "example": "_multiplier = timeMultiplier;", "docSyntax": "timeMultiplier", "syntax": "timeMultiplier"}, "titleCut": {"version": "CMD", "tags": "", "description": "Displays text on screen.", "example": "titleCut [\"Hello, how are you?\",\"Plain Down\",3];", "docSyntax": "titleCut [text, type, speed]", "syntax": "titleCut [<string>,type,<scalar>]"}, "titleFadeOut": {"version": "CMD", "tags": "", "description": "Terminate the title effect and set duration of the fade out phase to the given time. Same as cutFadeOut but for the title layer.", "example": "titleText [\"Hi\", \"plain\"]; titleFadeOut 2;", "docSyntax": "titleFadeOut duration", "syntax": "titleFadeOut duration"}, "titleObj": {"version": "CMD", "tags": "", "description": "Shows object defined in global config in CfgTitles", "example": "titleObj [\"BISLogo\", \"PLAIN\"];", "docSyntax": "titleObj [class, type, speed, showInMap]", "syntax": "titleObj [class,type,<scalar>,showInMap]"}, "titleRsc": {"version": "CMD", "tags": "", "description": "Displays a resource defined in RscTitles. Also see cutRsc, with these two commands you can show two different resources at once.", "example": "titleRsc [\"BIS\", \"PLAIN\"];", "docSyntax": "titleRsc [text, type, speed, showInMap]", "syntax": "titleRsc [<string>,type,<scalar>,showInMap]"}, "titleText": {"version": "CMD", "tags": "", "description": "Displays text across the screen. If used along with cutText two different texts (in different type styles) can be shown at once. The text can be displayed on multiple lines by using \"\\n\" new line characters (see Example 3).", "example": "titleText [\"Show this text\", \"PLAIN\"];", "docSyntax": "titleText [text, type, speed, showInMap, isStructuredText]", "syntax": "titleText [<string>,type,<scalar>,showInMap,isStructuredText]"}, "toArray": {"version": "CMD", "tags": "", "description": "Converts the supplied String into an Array of Numbers. The numbers in the created array are the decimal Unicode representations of characters.", "example": "hint format [\"%1\", toArray \"Aa\u0152\"];//\u00a0Returns \"[65,97,338]\"", "docSyntax": "toArray string", "syntax": "toArray <string>"}, "toFixed": {"version": "CMD", "tags": "", "description": "Converts a number into a string, keeping the specified number of decimals. If the desired number of decimals is higher than the actual number, nulls are added to create the desired decimal length. This command is almost identical in behaviour to JavaScript toFixed()", "example": "123 toFixed 2; //\u00a0\"123.00\"", "docSyntax": "number toFixed decimals", "syntax": "<scalar> toFixed decimals"}, "toLower": {"version": "CMD", "tags": "", "description": "Converts the supplied Unicode string to all lowercase characters. If the string doesn't have characters with codes > 255, use toLowerANSI.", "example": "hint toLower \"AaBb1\"; //\u00a0returns \"aabb1\"", "docSyntax": "toLower string", "syntax": "toLower <string>"}, "toLowerANSI": {"version": "CMD", "tags": "", "description": "ISO-8859-1", "example": "hint toLowerANSI \"AaBb1\"; //\u00a0returns \"aabb1\"", "docSyntax": "toLowerANSI string", "syntax": "toLowerANSI <string>"}, "toString": {"version": "CMD", "tags": "", "description": "Converts the supplied Array of Numbers into a String through Unicode characters representation conversion, or provided Code to compilable String.", "example": "hint toString [65,97,338]; //\u00a0returns \"Aa\u0152\"", "docSyntax": "toString array", "syntax": "toString <array>"}, "toUpper": {"version": "CMD", "tags": "", "description": "Converts the supplied Unicode string to all uppercase characters. If the string doesn't have characters with codes > 255, use toUpperANSI.", "example": "hint toUpper \"AaBb1\"; //\u00a0returns \"AABB1\"", "docSyntax": "toUpper string", "syntax": "toUpper <string>"}, "toUpperANSI": {"version": "CMD", "tags": "", "description": "ISO-8859-1", "example": "hint toUpperANSI \"AaBb1\"; //\u00a0returns \"AABB1\"", "docSyntax": "toUpperANSI string", "syntax": "toUpperANSI <string>"}, "triggerActivated": {"version": "CMD", "tags": "", "description": "Returns true if the trigger has been activated.", "example": "if (triggerActivated trg1) then { hint \"trigger trg1 activated!\" };", "docSyntax": "triggerActivated trigger", "syntax": "triggerActivated <objTrigger>"}, "triggerActivation": {"version": "CMD", "tags": "", "description": "Returns trigger activation in the form [by, type, repeating].", "example": "_activation = triggerActivation someTrigger;", "docSyntax": "triggerActivation trigger", "syntax": "triggerActivation <objTrigger>"}, "triggerAmmo": {"version": "CMD", "tags": "", "description": "Triggers a munition such as shells, bullets, missiles, rockets, mines and bombs (shotSubmunition/shotShell/shotBullet/shotMissile/shotRocket) as if it did hit. If ammo uses submunition, then creation of submunition will be triggered.", "example": "triggerAmmo bomb1;", "docSyntax": "triggerAmmo munition", "syntax": "triggerAmmo munition"}, "triggerArea": {"version": "CMD", "tags": "", "description": "Returns currently monitored trigger area. Since Arma 3 v1.60, the command returns 3rd dimension for the monitored area. If height is not set, the value for it would be -1.", "example": "_area = triggerArea sensor1; //\u00a0result is [200, 120, 45, false, -1];", "docSyntax": "triggerArea trigger", "syntax": "triggerArea <objTrigger>"}, "triggerAttachedVehicle": {"version": "CMD", "tags": "", "description": "Returns vehicle attached to the trigger (for example using triggerAttachVehicle).", "example": "_result = triggerAttachedVehicle triggerName;", "docSyntax": "triggerAttachedVehicle trigger", "syntax": "triggerAttachedVehicle <objTrigger>"}, "triggerAttachObject": {"version": "CMD", "tags": "", "description": "Assigns a static object to the trigger. The activation source is changed to \"STATIC\".", "example": "_trigger triggerAttachObject 1234;", "docSyntax": "triggerName triggerAttachObject objectId", "syntax": "triggerName triggerAttachObject <scalar>"}, "triggerAttachVehicle": {"version": "CMD", "tags": "", "description": "Specifies the entity which will activate the selected trigger.", "example": "trigger triggerAttachVehicle [player];", "docSyntax": "triggerName triggerAttachVehicle objects", "syntax": "triggerName triggerAttachVehicle objects"}, "triggerDynamicSimulation": {"version": "CMD", "tags": "", "description": "Controls the ability of given unit to activate entities with disabled Arma 3: Dynamic Simulation. If false dynamically disabled entities will not be activated by this unit's presence. This command has the same effect as the Eden Editor attribute Wake-Up Dynamic Simulation.", "example": "player triggerDynamicSimulation false;", "docSyntax": "unit triggerDynamicSimulation trigger", "syntax": "<objUnit> triggerDynamicSimulation <objTrigger>"}, "triggerInterval": {"version": "CMD", "tags": "", "description": "Returns trigger condition check frequency in seconds.", "example": "_interval = triggerInterval someTrigger;", "docSyntax": "triggerInterval trigger", "syntax": "triggerInterval <objTrigger>"}, "triggerStatements": {"version": "CMD", "tags": "", "description": "Returns trigger statements.", "example": "_statements = triggerStatements someTrigger;", "docSyntax": "triggerStatements trigger", "syntax": "triggerStatements <objTrigger>"}, "triggerText": {"version": "CMD", "tags": "", "description": "Returns trigger text.", "example": "_text = triggerText triggerName;", "docSyntax": "triggerText trigger", "syntax": "triggerText <objTrigger>"}, "triggerTimeout": {"version": "CMD", "tags": "", "description": "Returns trigger timeout in the form [min, mid, max, interruptable].", "example": "_timeOut = triggerTimeout someTrigger;", "docSyntax": "triggerTimeout trigger", "syntax": "triggerTimeout <objTrigger>"}, "triggerTimeoutCurrent": {"version": "CMD", "tags": "", "description": "Returns current timeout of the given trigger or -1 if countdown is not in progress.", "example": "private _remaining = triggerTimeoutCurrent _trigger;", "docSyntax": "triggerTimeoutCurrent trigger", "syntax": "triggerTimeoutCurrent <objTrigger>"}, "triggerType": {"version": "CMD", "tags": "", "description": "Returns the trigger type.", "example": "_type = triggerType tr1;", "docSyntax": "triggerType trigger", "syntax": "triggerType <objTrigger>"}, "trim": {"version": "CMD", "tags": "", "description": "Trims a string.", "example": "trim \" hello, how are you? \"; //\u00a0returns \"hello, how are you?\"", "docSyntax": "trim stringValue", "syntax": "trim stringValue"}, "turretLocal": {"version": "CMD", "tags": "", "description": "Checks if a turret is local.", "example": "_isLocal = vehicle player turretLocal [0];", "docSyntax": "vehicle turretLocal turretPath", "syntax": "<objVehicle> turretLocal turretPath"}, "turretOwner": {"version": "CMD", "tags": "", "description": "Returns id of the turret's owner. Returns 0 on non-server and SP.", "example": "_ownerId = vehicle player turretOwner [0];", "docSyntax": "vehicle turretOwner turretPath", "syntax": "<objVehicle> turretOwner turretPath"}, "turretUnit": {"version": "CMD", "tags": "", "description": "Returns the unit in the vehicle turret. To find turret path of known unit, see unitTurret.", "example": "_vehicle turretUnit _thisTurret;", "docSyntax": "vehicle turretUnit turretPath", "syntax": "<objVehicle> turretUnit turretPath"}, "tvAdd": {"version": "CMD", "tags": "", "description": "Adds an item with given text to Tree View control. The position on Tree View where to add the item and the actual path to this item once added are different. If item is added to existing item, then parent item path is used. If no parent exists, empty array [] is used. See Tree View Path for more information.", "example": "_index = _ctrl tvAdd [[], \"Parent Item\"];", "docSyntax": "tvAdd [idc, pathParent, text]", "syntax": "tvAdd [<scalar>,pathParent,<string>]"}, "tvClear": {"version": "CMD", "tags": "", "description": "Removes all items from Tree View with given idc.", "example": "tvClear 101;", "docSyntax": "tvClear idc", "syntax": "tvClear <scalar>"}, "tvCollapse": {"version": "CMD", "tags": "", "description": "Collapses tree item pointed to by the path. IDC means id of parent Tree View.", "example": "tvCollapse [101, [0]];", "docSyntax": "tvCollapse [idc, path]", "syntax": "tvCollapse [<scalar>,path]"}, "tvCollapseAll": {"version": "CMD", "tags": "", "description": "Collapses all tree items for the given Tree View.", "example": "tvCollapseAll 101;", "docSyntax": "tvCollapseAll idc", "syntax": "tvCollapseAll <scalar>"}, "tvCount": {"version": "CMD", "tags": "", "description": "Returns children count on given path. IDC means id of parent Tree View.", "example": "tvCount [101, [0]];", "docSyntax": "tvCount [idc, path]", "syntax": "tvCount [<scalar>,path]"}, "tvCurSel": {"version": "CMD", "tags": "", "description": "Returns path to currently selected item. IDC means id of parent Tree View.", "example": "tvCurSel 101;", "docSyntax": "tvCurSel idc", "syntax": "tvCurSel <scalar>"}, "tvData": {"version": "CMD", "tags": "", "description": "Returns string data from item on given path. IDC means id of parent CT_TREE.", "example": "tvData [101, [0]];", "docSyntax": "tvData [idc, path]", "syntax": "tvData [<scalar>,path]"}, "tvDelete": {"version": "CMD", "tags": "", "description": "Removes an item with given Tree View Path from Tree View.", "example": "tvDelete [101, [0, 0]];", "docSyntax": "tvDelete [idc, path]", "syntax": "tvDelete [<scalar>,path]"}, "tvExpand": {"version": "CMD", "tags": "", "description": "Expands tree item pointed to by the path. IDC means id of parent Tree View.", "example": "tvExpand [101, [0]];", "docSyntax": "tvExpand [idc, path]", "syntax": "tvExpand [<scalar>,path]"}, "tvExpandAll": {"version": "CMD", "tags": "", "description": "Expands all tree items for the given Tree View.", "example": "tvExpandAll 101;", "docSyntax": "tvExpandAll idc", "syntax": "tvExpandAll <scalar>"}, "tvIsSelected": {"version": "CMD", "tags": "", "description": "Returns true if given treeview item is selected.", "example": "_control tvIsSelected [0];", "docSyntax": "control tvIsSelected path", "syntax": "<uiControl> tvIsSelected path"}, "tvPicture": {"version": "CMD", "tags": "", "description": "Returns name of picture from item pointed to by path. IDC means id of parent Tree View.", "example": "tvPicture [101, [0]];", "docSyntax": "tvPicture [idc, path]", "syntax": "tvPicture [<scalar>,path]"}, "tvPictureRight": {"version": "CMD", "tags": "", "description": "Returns the right picture of a CT_TREE on given path.", "example": "private _result = _controlTV tvPictureRight [0, 0];", "docSyntax": "tvPictureRight [idc, path]", "syntax": "tvPictureRight [<scalar>,path]"}, "tvSelection": {"version": "CMD", "tags": "", "description": "Returns array of paths to selected items.", "example": "private _selection = tvSelection _ctrlTV;", "docSyntax": "tvSelection control", "syntax": "tvSelection <uiControl>"}, "tvSetColor": {"version": "CMD", "tags": "", "description": "Sets text color on given Tree View Item", "example": "tvSetColor [101, [0,0], [1,0,0,1]];", "docSyntax": "tvSetColor [idc, path, color]", "syntax": "tvSetColor [<scalar>,path,<scalar>]"}, "tvSetCurSel": {"version": "CMD", "tags": "", "description": "Sets cursor to given item on given path. IDC means id of parent Tree View. To deselect all items use [-1] for the path param (available since Arma 3 v1.56)", "example": "tvSetCurSel [101, [0]];", "docSyntax": "tvSetCurSel [idc, path]", "syntax": "tvSetCurSel [<scalar>,path]"}, "tvSetData": {"version": "CMD", "tags": "", "description": "Sets string data to item on given path. IDC means id of parent Tree View.", "example": "tvSetData [101, [0], \"Test data\"];", "docSyntax": "tvSetData [idc, path, data]", "syntax": "tvSetData [<scalar>,path,data]"}, "tvSetPicture": {"version": "CMD", "tags": "", "description": "Sets picture to item selected by path. IDC means id of parent Tree View. Name is picture name. The picture is searched in the mission directory.", "example": "tvSetPicture [101, [0], \"picture\"];", "docSyntax": "tvSetPicture [idc, path, name]", "syntax": "tvSetPicture [<scalar>,path,<string>]"}, "tvSetPictureColor": {"version": "CMD", "tags": "", "description": "Sets the colour of the picture (set via tvSetPicture) under the specified tree view path.", "example": "tvSetPictureColor [101, [0,2], [1,0,1,1]];", "docSyntax": "tvSetPictureColor [idc, path, color]", "syntax": "tvSetPictureColor [<scalar>,path,<scalar>]"}, "tvSetPictureColorDisabled": {"version": "CMD", "tags": "", "description": "Sets the color of left picture of a tree item defined by path when that item is disabled.", "example": "_control tvSetPictureColorDisabled [[0], [1,0,1,1]];", "docSyntax": "control tvSetPictureColorDisabled [path, color]", "syntax": "<uiControl> tvSetPictureColorDisabled [path,<scalar>]"}, "tvSetPictureColorSelected": {"version": "CMD", "tags": "", "description": "Sets the color of the left picture of a tree item defined by path when item is selected", "example": "_control tvSetPictureColorSelected [[0], [1,0,1,1]];", "docSyntax": "control tvSetPictureColorSelected [path, color]", "syntax": "<uiControl> tvSetPictureColorSelected [path,<scalar>]"}, "tvSetPictureRight": {"version": "CMD", "tags": "", "description": "Sets right picture on the tree view item defined by path.", "example": "tvSetPictureRight [101, [0], \"picture\"];", "docSyntax": "tvSetPictureRight [idc, path, name]", "syntax": "tvSetPictureRight [<scalar>,path,<string>]"}, "tvSetPictureRightColor": {"version": "CMD", "tags": "", "description": "Sets color of the right picture on the tree view item defined by path", "example": "tvSetPictureRightColor [101, [0], [1,0,1,1]];", "docSyntax": "tvSetPictureRightColor [idc, path, color]", "syntax": "tvSetPictureRightColor [<scalar>,path,<scalar>]"}, "tvSetPictureRightColorDisabled": {"version": "CMD", "tags": "", "description": "Sets the color of the right picture of a tree item defined by path when item is disabled", "example": "_control tvSetPictureRightColorDisabled [[0], [1,0,1,1]];", "docSyntax": "control tvSetPictureRightColorDisabled [path, color]", "syntax": "<uiControl> tvSetPictureRightColorDisabled [path,<scalar>]"}, "tvSetPictureRightColorSelected": {"version": "CMD", "tags": "", "description": "Sets the color of the right picture of a tree item defined by path when item is selected", "example": "_control tvSetPictureRightColorSelected [[0], [1,0,1,1]];", "docSyntax": "control tvSetPictureRightColorSelected [path, color]", "syntax": "<uiControl> tvSetPictureRightColorSelected [path,<scalar>]"}, "tvSetSelectColor": {"version": "CMD", "tags": "", "description": "Sets the select color of given path.", "example": "_control tvSetSelectColor [[0, 0], [1,1,1,0.5]];", "docSyntax": "ctrl tvSetSelectColor [path, color]", "syntax": "<uiControl> tvSetSelectColor [path,<scalar>]"}, "tvSetSelected": {"version": "CMD", "tags": "", "description": "Sets the selection state of given treeview item in multi-select control.", "example": "_control tvSetSelected [[0], true];", "docSyntax": "control tvSetSelected [path, selected]", "syntax": "<uiControl> tvSetSelected [path,selected]"}, "tvSetText": {"version": "CMD", "tags": "", "description": "Sets string text to item on given path. IDC means id of parent Tree View.", "example": "tvSetText [101, [0], \"Test data\"];", "docSyntax": "tvSetText [idc, path, text]", "syntax": "tvSetText [<scalar>,path,<string>]"}, "tvSetTooltip": {"version": "CMD", "tags": "", "description": "Sets the tooltip text associated with the specified tree view path.", "example": "tvSetTooltip [101, [0,2], \"This is a tooltip\"];", "docSyntax": "tvSetTooltip [idc, path, text]", "syntax": "tvSetTooltip [<scalar>,path,<string>]"}, "tvSetValue": {"version": "CMD", "tags": "", "description": "Sets scalar data to item on given path. IDC means id of parent Tree View. If the given value is not integer, it will be converted to integer", "example": "tvSetValue [101, [0], 555];", "docSyntax": "tvSetValue [idc, path, val]", "syntax": "tvSetValue [<scalar>,path,val]"}, "tvSort": {"version": "CMD", "tags": "", "description": "Sorts all children of given path. Text of Tree View entries is used for sorting.", "example": "control tvSort [[0], true];", "docSyntax": "control tvSort [path, reversed]", "syntax": "<uiControl> tvSort [path,reversed]"}, "tvSortAll": {"version": "CMD", "tags": "", "description": "Sorts all children, including trees deriving from given path. Text of Tree View entries is used for sorting.", "example": "_ctrl tvSortAll [[], false]; //\u00a0sorts the complete Tree View", "docSyntax": "control tvSortAll [path, reversed]", "syntax": "<uiControl> tvSortAll [path,reversed]"}, "tvSortByValue": {"version": "CMD", "tags": "", "description": "Sorts all children of given path. Value of Tree View entries is used for sorting. tvSetValue can be used to set the value for a given path.", "example": "control tvSortByValue [[0], false];", "docSyntax": "control tvSortByValue [path, ascending]", "syntax": "<uiControl> tvSortByValue [path,ascending]"}, "tvSortByValueAll": {"version": "CMD", "tags": "", "description": "Sorts all children, including trees deriving from given path. Value of Tree View entries is used for sorting.", "example": "_ctrl tvSortByValueAll [[], false]; //\u00a0Sorts the complete Tree View", "docSyntax": "control tvSortByValueAll [path, reversed]", "syntax": "<uiControl> tvSortByValueAll [path,reversed]"}, "tvText": {"version": "CMD", "tags": "", "description": "Returns shown text in the item on given path. IDC means id of parent Tree View.", "example": "tvText [101, [0]];", "docSyntax": "tvText [idc, path]", "syntax": "tvText [<scalar>,path]"}, "tvTooltip": {"version": "CMD", "tags": "", "description": "Gets the tooltip text associated with the specified tree view path.", "example": "_text = tvTooltip [101, [0,2]];", "docSyntax": "tvTooltip [idc, path]", "syntax": "tvTooltip [<scalar>,path]"}, "tvValue": {"version": "CMD", "tags": "", "description": "Returns numeric value set for given tree view path.", "example": "tvValue [101, [0]];", "docSyntax": "tvValue [idc, path]", "syntax": "tvValue [<scalar>,path]"}, "type": {"version": "CMD", "tags": "", "description": "Returns a string of a Location's class name or Task's name (same as taskName).", "example": "_locationType = type myLocation;", "docSyntax": "type location", "syntax": "type location"}, "typeName": {"version": "CMD", "tags": "", "description": "Returns the Data Type of an expression. The type is returned as on of the following all-uppercase strings:", "example": "_msg = \"hello\"; _result = typeName _msg; //_result will be \"STRING\"", "docSyntax": "typeName anything", "syntax": "typeName anything"}, "typeOf": {"version": "CMD", "tags": "", "description": "Returns the class name of a given object.", "example": "if (typeOf vehicle player == \"B_Heli_Light_01_armed_F\") then { hint \"Player is in a AH-9 Pawnee\"; };", "docSyntax": "typeOf obj", "syntax": "typeOf <object>"}, "UAVControl": {"version": "CMD", "tags": "", "description": "Returns array with current operator of UAV and his vehicle role in UAV. If nobody is controlling the UAV, the command tries to find any person with connected terminal to this UAV. If nobody is connected, objNull is used as returned operator (see Example 2).", "example": "private _result = UAVControl _myUAV;", "docSyntax": "UAVControl uav", "syntax": "UAVControl uav"}, "uiNamespace": {"version": "CMD", "tags": "", "description": "Returns the global namespace attached to user interface.", "example": "uiNamespace setVariable [\"LIB_interruptDisplay\", _display];", "docSyntax": "uiNamespace", "syntax": "uiNamespace"}, "uiSleep": {"version": "CMD", "tags": "", "description": "Suspend execution of script for given UI time. uiSleep is a sleep method to delay script execution where script time/simulation time is stopped. uiSleep is basically using the system time (uiTime more specifically) and not simulation time. So in the cases where sleep would get stuck indefinitely, uiSleep can still be used to effectively delay script execution for example in pause or in a mission briefing or an editor or when simulation is paused in general.", "example": "In singleplayer:", "docSyntax": "uiSleep delay", "syntax": "uiSleep <scalar>"}, "unassignCurator": {"version": "CMD", "tags": "", "description": "Unassign curator (will destroy both sides of connection).", "example": "unassignCurator myCurator;", "docSyntax": "unassignCurator curatorObj", "syntax": "unassignCurator <objCurator>"}, "unassignItem": {"version": "CMD", "tags": "", "description": "Unassigns existing item and tries to put it into inventory. If there is no space in inventory the item simply disappears. See also unlinkItem.", "example": "_bluforUnit unassignItem \"NVGoggles\"; _bluforUnit removeItem \"NVGoggles\"; _opforUnit unassignItem \"NVGoggles_OPFOR\"; _opforUnit removeItem \"NVGoggles_OPFOR\"; _independentUnit unassignItem \"NVGoggles_INDEP\"; _independentUnit removeItem \"NVGoggles_INDEP\";", "docSyntax": "unit unassignItem item", "syntax": "<objUnit> unassignItem <objItem>"}, "unassignTeam": {"version": "CMD", "tags": "", "description": "Unassigns the unit (in the case of a vehicle its commander unit) from his team. This is equal to unit assignTeam \"MAIN\".", "example": "unassignTeam _soldier2;", "docSyntax": "unassignTeam vehicleName", "syntax": "unassignTeam vehicleName"}, "unassignVehicle": {"version": "CMD", "tags": "", "description": "Unassigns individual unit from a vehicle, usually previously assigned with assignAsXXX command, i.e removes assignedVehicleRole of the unit. If the unit is currently in that vehicle, the group leader will issue an order to disembark.", "example": "unassignVehicle player;", "docSyntax": "unassignVehicle unitName", "syntax": "unassignVehicle <objUnit>"}, "underwater": {"version": "CMD", "tags": "", "description": "Returns whether the object is fully underwater.", "example": "private _isUnderwater = underwater vehicle player;", "docSyntax": "underwater object", "syntax": "underwater <object>"}, "uniform": {"version": "CMD", "tags": "", "description": "Returns name of uniform.", "example": "_uniform = uniform _unit;", "docSyntax": "uniform unit", "syntax": "uniform <objUnit>"}, "uniformContainer": {"version": "CMD", "tags": "", "description": "Returns a cargo container of a unit's uniform.", "example": "hint str uniformContainer player; //2df7dd00# 163941: dummyweapon.p3d", "docSyntax": "uniformContainer unit", "syntax": "uniformContainer <objUnit>"}, "uniformItems": {"version": "CMD", "tags": "", "description": "Get array with all items (of any kind, even weapons) from uniform.", "example": "uniformItems player; //\u00a0returns e.g /* [ \"FirstAidKit\", \"30Rnd_65x39_caseless_mag\", \"30Rnd_65x39_caseless_mag\", \"30Rnd_65x39_caseless_mag\" ] */", "docSyntax": "uniformItems unit", "syntax": "uniformItems <objUnit>"}, "uniformMagazines": {"version": "CMD", "tags": "", "description": "Get array with all magazines from uniform of the given unit.", "example": "uniformMagazines player; //\u00a0returns e.g /* [ \"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:1/0](3x)\" ] */", "docSyntax": "uniformMagazines unit", "syntax": "uniformMagazines <objUnit>"}, "uniqueUnitItems": {"version": "CMD", "tags": "", "description": "Returns hashmap of all items in units inventory as [classname, count] pairs.", "example": "private _unitUniqueItems = uniqueUnitItems [player, 0, 2, 2, 2, true]; if (_unitUniqueItems getOrDefault [\"FirstAidKit\", 0] > 5) then { hint \"I'm rich of FAK to give!\"; };", "docSyntax": "uniqueUnitItems unit", "syntax": "uniqueUnitItems <objUnit>"}, "unitAddons": {"version": "CMD", "tags": "", "description": "Returns list with addons the unit belongs to.", "example": "hint str unitAddons typeOf player; //\u00a0[\"A3_Characters_F_BLUFOR\"]", "docSyntax": "unitAddons className", "syntax": "unitAddons className"}, "unitAimPosition": {"version": "CMD", "tags": "", "description": "Returns the position on the unit other units can aim at. Same as aimPos only returns position in PositionAGL format and has render scope alternative unitAimPositionVisual.", "example": "unitAimPosition player;", "docSyntax": "unitAimPosition unit", "syntax": "unitAimPosition <objUnit>"}, "unitAimPositionVisual": {"version": "CMD", "tags": "", "description": "Returns the position on the unit other units can aim at in render scope. See also aimPos, unitAimPosition.", "example": "unitAimPositionVisual player;", "docSyntax": "unitAimPositionVisual unit", "syntax": "unitAimPositionVisual <objUnit>"}, "unitBackpack": {"version": "CMD", "tags": "", "description": "Returns unit's backpack", "example": "private _myBackpack = unitBackpack player;", "docSyntax": "unitBackpack unit", "syntax": "unitBackpack <objUnit>"}, "unitCombatMode": {"version": "CMD", "tags": "", "description": "Gets individual unit's combat mode. For more information see setUnitCombatMode.", "example": "unitCombatMode _unit;", "docSyntax": "unitCombatMode unit", "syntax": "unitCombatMode <objUnit>"}, "unitIsUAV": {"version": "CMD", "tags": "", "description": "Returns whether or not the given transport object is a drone (UAV, UGV), regardless of if it has a crew or if it is empty, corresponding to the isUAV transport parameter.", "example": "unitIsUAV _myUAV; //\u00a0true (whether it has driver/gunner or not) unitIsUAV driver _myUAV; //\u00a0true (provided there is a driver) unitIsUAV gunner _myUAV; //\u00a0true (provided there is a gunner)", "docSyntax": "unitIsUAV object", "syntax": "unitIsUAV <object>"}, "unitPos": {"version": "CMD", "tags": "", "description": "Return the unit position rules.", "example": "hint str unitPos _unit;", "docSyntax": "unitPos unit", "syntax": "unitPos <objUnit>"}, "unitReady": {"version": "CMD", "tags": "", "description": "Check if the unit is ready. Unit is busy when it is given some command like move, until the command is finished.", "example": "private _it = unitReady _soldierOne;", "docSyntax": "unitReady unitName", "syntax": "unitReady <objUnit>"}, "unitRecoilCoefficient": {"version": "CMD", "tags": "", "description": "Returns recoil coefficient of a soldier.", "example": "_myRecoil = unitRecoilCoefficient player;", "docSyntax": "unitRecoilCoefficient soldier", "syntax": "unitRecoilCoefficient soldier"}, "units": {"version": "CMD", "tags": "", "description": "Returns an array with all the units in the group or unit's group, or all units belonging to a certain side.", "example": "_myUnitCount = count units player;", "docSyntax": "units type", "syntax": "units type"}, "unitsBelowHeight": {"version": "CMD", "tags": "", "description": "Returns units in group/array below given Above Terrain Level (ATL) altitude.", "example": "_allOnGroudUnits = group player unitsBelowHeight 10;", "docSyntax": "units unitsBelowHeight height", "syntax": "units unitsBelowHeight height"}, "unitTurret": {"version": "CMD", "tags": "", "description": "Returns the turret path the given vehicle's gunner is in. To get the turret's unit see turretUnit.", "example": "_vehicle unitTurret _gunner;", "docSyntax": "vehicle unitTurret gunner", "syntax": "<objVehicle> unitTurret gunner"}, "unlinkItem": {"version": "CMD", "tags": "", "description": "Unassign and delete existing item from its assigned slot. If item does not exist or is not in the assigned slot, command simply fails. See also unassignItem.", "example": "bluforUnit unlinkItem \"NVGoggles\"; opforUnit unlinkItem \"NVGoggles_OPFOR\"; independentUnit unlinkItem \"NVGoggles_INDEP\";", "docSyntax": "unit unlinkItem item", "syntax": "<objUnit> unlinkItem <objItem>"}, "unlockAchievement": {"version": "CMD", "tags": "", "description": "Unlocks the given achievement. The achievements are listed in CfgAchievements, however none of the currently listed achievements is used in Arma 3, hence the command always returns false.", "example": "_isUnlocked = unlockAchievement \"Hunter\";", "docSyntax": "unlockAchievement name", "syntax": "unlockAchievement <string>"}, "unregisterTask": {"version": "CMD", "tags": "", "description": "Unregisters a task type from given agent. The task type is the name given in CfgTasks classes in name property. Also available from registeredTasks array.", "example": "teamMember _agent unregisterTask (registeredTasks select 0);", "docSyntax": "teamMember unregisterTask name", "syntax": "teamMember unregisterTask <string>"}, "updateDrawIcon": {"version": "CMD", "tags": "", "description": "Updates the icon to be shown in 2D editor for the specified editor,object. If maintain size is false,icon will not scale depending on the,scale of the map. If maintain size is a number,the icon will maintain,size if map scale is below that number.", "example": "-", "docSyntax": "map updateDrawIcon [object,string identifier,color,offset,width,height,maintain size?,angle,shadow]", "syntax": "<objMap> updateDrawIcon [<object>,<string> identifier,<scalar>,offset,width,height,maintain size?,angle,shadow]"}, "updateMenuItem": {"version": "CMD", "tags": "", "description": "Sets the text and command for the menu item. index is index as returned from addMenuItem command. command is optional.", "example": "-", "docSyntax": "map updateMenuItem [menu item index,text,command]", "syntax": "<objMap> updateMenuItem [menu <objItem> <scalar>,<string>,command]"}, "updateObjectTree": {"version": "CMD", "tags": "", "description": "Update the editor object tree.", "example": "updateObjectTree _ctrlMap;", "docSyntax": "updateObjectTree map", "syntax": "updateObjectTree <objMap>"}, "useAIOperMapObstructionTest": {"version": "CMD", "tags": "", "description": "Toggle secondary obstruction test on road paths.", "example": "useAIOperMapObstructionTest true;", "docSyntax": "useAIOperMapObstructionTest state", "syntax": "useAIOperMapObstructionTest state"}, "useAISteeringComponent": {"version": "CMD", "tags": "", "description": "Enable the new AI driving, used to test the old and new AI driving.", "example": "useAISteeringComponent true;", "docSyntax": "useAISteeringComponent enabled", "syntax": "useAISteeringComponent <bool>"}, "useAudioTimeForMoves": {"version": "CMD", "tags": "", "description": "Switch between elapsed game time and audio time being used as animation timer. Used for audio/animation synchronization.", "example": "player useAudioTimeForMoves true;", "docSyntax": "soldier useAudioTimeForMoves toggle", "syntax": "soldier useAudioTimeForMoves toggle"}, "userInputDisabled": {"version": "CMD", "tags": "", "description": "Returns true if user input is disabled", "example": "Toggles user input", "docSyntax": "userInputDisabled", "syntax": "userInputDisabled"}, "values": {"version": "CMD", "tags": "", "description": "Returns all values stored in the given HashMap. The order of the returned Array corresponds to the order of the Array returned by the keys command.", "example": "private _values = values _myHashMap;", "docSyntax": "values hashmap", "syntax": "values hashmap"}, "vectorAdd": {"version": "CMD", "tags": "", "description": "Adds two arrays of numbers. Replaces BIS_fnc_vectorAdd.", "example": "hint str (velocity unit1 vectorAdd velocity unit2);", "docSyntax": "vector1 vectorAdd vector2", "syntax": "vector1 vectorAdd vector2"}, "vectorCos": {"version": "CMD", "tags": "", "description": "Cosine of angle between two 3D vectors.", "example": "_cos = getPos player vectorCos [0,0,2];", "docSyntax": "vector1 vectorCos vector2", "syntax": "vector1 vectorCos vector2"}, "vectorCrossProduct": {"version": "CMD", "tags": "", "description": "Cross product of two 3D vectors.", "example": "_vector = [1,1,1] vectorCrossProduct [2,2,2];", "docSyntax": "vector1 vectorCrossProduct vector2", "syntax": "vector1 vectorCrossProduct vector2"}, "vectorDiff": {"version": "CMD", "tags": "", "description": "Subtracts one 3D vector from another. (vector1 - vector2)", "example": "hint str (velocity car vectorDiff velocity bike);", "docSyntax": "vector1 vectorDiff vector2", "syntax": "vector1 vectorDiff vector2"}, "vectorDir": {"version": "CMD", "tags": "", "description": "An object with its vectorDir, vectorUp and vectorSide (vectors not to scale)", "example": "_vecDir = vectorDir MyObject;", "docSyntax": "vectorDir object", "syntax": "vectorDir <object>"}, "vectorDirVisual": {"version": "CMD", "tags": "", "description": "An object with its vectorDirVisual, vectorUpVisual and vectorSideVisual (vectors not to scale)", "example": "_vecDirVis = vectorDirVisual MyObject;", "docSyntax": "vectorDirVisual object", "syntax": "vectorDirVisual <object>"}, "vectorDistance": {"version": "CMD", "tags": "", "description": "Returns Euclidean distance between two points.", "example": "_euclideanDist = getPosASL player vectorDistance [0,0,0];", "docSyntax": "point1 vectorDistance point2", "syntax": "point1 vectorDistance point2"}, "vectorDistanceSqr": {"version": "CMD", "tags": "", "description": "Squared distance between two 3D vectors.", "example": "_distSqr = getPos player vectorDistanceSqr [0,0,2];", "docSyntax": "vector1 vectorDistanceSqr vector2", "syntax": "vector1 vectorDistanceSqr vector2"}, "vectorDotProduct": {"version": "CMD", "tags": "", "description": "Dot product of two 3D vectors.", "example": "_dot = [1,0,1] vectorDotProduct [0,0,2];", "docSyntax": "vector1 vectorDotProduct vector2", "syntax": "vector1 vectorDotProduct vector2"}, "vectorFromTo": {"version": "CMD", "tags": "", "description": "Unit vector, equal to direction from vector1 to vector2. In other words this command produces normalised vector between given 2 points.", "example": "[1,2,3] vectorFromTo [4,5,6]; //\u00a0is the same as vectorNormalized ([4,5,6] vectorDiff [1,2,3]);", "docSyntax": "vector1 vectorFromTo vector2", "syntax": "vector1 vectorFromTo vector2"}, "vectorLinearConversion": {"version": "CMD", "tags": "", "description": "Interpolates vector between the given vectorFrom and vectorTo value according to the given range value.", "example": "vectorLinearConversion [0, 1, 0.5, [0,0,0], [25,50,100], false]; //\u00a0[12.5,25,50]", "docSyntax": "vectorLinearConversion [rangeFrom, rangeTo, rangeValue, vectorFrom, vectorTo, clip]", "syntax": "vectorLinearConversion [rangeFrom,rangeTo,rangeValue,vectorFrom,vectorTo,clip]"}, "vectorMagnitude": {"version": "CMD", "tags": "", "description": "Magnitude of a 3D vector.", "example": "_size = vectorMagnitude [0,3,4]; //\u00a0returns 5", "docSyntax": "vectorMagnitude vector", "syntax": "vectorMagnitude vector"}, "vectorMagnitudeSqr": {"version": "CMD", "tags": "", "description": "Squared magnitude of a 3D vector.", "example": "_sizeSqr = vectorMagnitudeSqr [0,3,4]; //\u00a0returns 25", "docSyntax": "vectorMagnitudeSqr vector", "syntax": "vectorMagnitudeSqr vector"}, "vectorModelToWorld": {"version": "CMD", "tags": "", "description": "Converts vector direction from model to world space.", "example": "Convert model space vector [0,-10,4] to world space; vector gets rotated according to _airplane:", "docSyntax": "object vectorModelToWorld modelDir", "syntax": "<object> vectorModelToWorld modelDir"}, "vectorModelToWorldVisual": {"version": "CMD", "tags": "", "description": "Converts vector from model to world space in render time scope.", "example": "Convert model space vector [0,-10,4] to world space; vector gets rotated according to _airplane:", "docSyntax": "object vectorModelToWorldVisual modelDir", "syntax": "<object> vectorModelToWorldVisual modelDir"}, "vectorMultiply": {"version": "CMD", "tags": "", "description": "Multiplies 3D vector by a scalar.", "example": "_newVector = [1,2,3] vectorMultiply 3; //\u00a0returns [3,6,9]", "docSyntax": "vector vectorMultiply scalar", "syntax": "vector vectorMultiply scalar"}, "vectorNormalized": {"version": "CMD", "tags": "", "description": "Returns normalized vector (unit vector, vectorMagnitude == 1) of given vector. If given vector is 0 result is a 0 vector as well.", "example": "vectorNormalized [12345,7890,38383]; //\u00a0[0.300481,0.192045,0.934254] vectorMagnitude [0.300481,0.192045,0.934254]; //\u00a01", "docSyntax": "vectorNormalized vector", "syntax": "vectorNormalized vector"}, "vectorSide": {"version": "CMD", "tags": "", "description": "An object with its vectorDir, vectorUp and vectorSide (vectors not to scale)", "example": "_vecSide = vectorSide MyObject;", "docSyntax": "vectorSide object", "syntax": "vectorSide <object>"}, "vectorSideVisual": {"version": "CMD", "tags": "", "description": "An object with its vectorDirVisual, vectorUpVisual and vectorSideVisual (vectors not to scale)", "example": "_vecSideVis = vectorSideVisual MyObject;", "docSyntax": "vectorSideVisual object", "syntax": "vectorSideVisual <object>"}, "vectorUp": {"version": "CMD", "tags": "", "description": "An object with its vectorDir, vectorUp and vectorSide (vectors not to scale)", "example": "_vecUp = vectorUp MyObject;", "docSyntax": "vectorUp object", "syntax": "vectorUp <object>"}, "vectorUpVisual": {"version": "CMD", "tags": "", "description": "An object with its vectorDirVisual, vectorUpVisual and vectorSideVisual (vectors not to scale)", "example": "_vecUpVis = vectorUpVisual MyObject;", "docSyntax": "vectorUpVisual object", "syntax": "vectorUpVisual <object>"}, "vectorWorldToModel": {"version": "CMD", "tags": "", "description": "Converts vector direction from world to model space.", "example": "Convert world space vector [0,-10,4] to model space of object _airplane:", "docSyntax": "object vectorWorldToModel worldDir", "syntax": "<object> vectorWorldToModel worldDir"}, "vectorWorldToModelVisual": {"version": "CMD", "tags": "", "description": "Converts vector direction from world to model space in render time scope.", "example": "Convert world space vector [0,-10,4] to model space of object _airplane:", "docSyntax": "object vectorWorldToModelVisual worldDir", "syntax": "<object> vectorWorldToModelVisual worldDir"}, "vehicle": {"version": "CMD", "tags": "", "description": "Vehicle in which given unit is mounted. If none, unit is returned. Alternatively, use objectParent", "example": "SQS", "docSyntax": "vehicle unitName", "syntax": "<objVehicle> <objUnit>"}, "vehicleCargoEnabled": {"version": "CMD", "tags": "", "description": "Check if the vehicle has enabled transporting other vehicles or not.", "example": "Blackfish (Vehicle Transport) with given variable name blackfish", "docSyntax": "vehicleCargoEnabled vehicle", "syntax": "vehicleCargoEnabled <objVehicle>"}, "vehicleChat": {"version": "CMD", "tags": "", "description": "Types text to the vehicle radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally, see remoteExec.", "example": "vehicle player vehicleChat \"Show this text\";", "docSyntax": "vehicleName vehicleChat chatText", "syntax": "vehicleName vehicleChat chatText"}, "vehicleMoveInfo": {"version": "CMD", "tags": "", "description": "Returns current vehicle move/turn info (a getter for sendSimpleCommand) in format [moveInfo, turnInfo]. Possible values:", "example": "onEachFrame { hintSilent str vehicleMoveInfo vehicle player };", "docSyntax": "vehicleMoveInfo vehicle", "syntax": "vehicleMoveInfo <objVehicle>"}, "vehicleRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the vehicle radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne vehicleRadio \"messageOne\";", "docSyntax": "unit vehicleRadio radioName", "syntax": "<objUnit> vehicleRadio radioName"}, "vehicleReceiveRemoteTargets": {"version": "CMD", "tags": "", "description": "Gets whether the vehicle can acquire targets via datalink from the Side center.", "example": "vehicleReceiveRemoteTargets vehicle player;", "docSyntax": "vehicleReceiveRemoteTargets vehicle", "syntax": "vehicleReceiveRemoteTargets <objVehicle>"}, "vehicleReportOwnPosition": {"version": "CMD", "tags": "", "description": "Gets whether the vehicle shares its own position via datalink with the Side center.", "example": "vehicleReportOwnPosition vehicle player;", "docSyntax": "vehicleReportOwnPosition vehicle", "syntax": "vehicleReportOwnPosition <objVehicle>"}, "vehicleReportRemoteTargets": {"version": "CMD", "tags": "", "description": "Gets whether the vehicle shares acquired targets via datalink with the Side center.", "example": "vehicleReportRemoteTargets vehicle player;", "docSyntax": "vehicleReportRemoteTargets vehicle", "syntax": "vehicleReportRemoteTargets <objVehicle>"}, "vehicles": {"version": "CMD", "tags": "", "description": "Returns an array of all vehicles available to current client. This command returns both empty and crewed vehicles", "example": "_vehicles = vehicles;", "docSyntax": "vehicles", "syntax": "vehicles"}, "vehicleVarName": {"version": "CMD", "tags": "", "description": "Returns the variable name that contains a primary editor reference to this object. This is the variable given in the Insert Unit dialog / name field in the editor. It can be changed using setVehicleVarName.", "example": "hint vehicleVarName player;", "docSyntax": "vehicleVarName object", "syntax": "vehicleVarName <object>"}, "velocity": {"version": "CMD", "tags": "", "description": "Returns the velocity of the object as vector in m/s.", "example": "_vector = velocity jeep;", "docSyntax": "velocity object", "syntax": "velocity <object>"}, "velocityModelSpace": {"version": "CMD", "tags": "", "description": "Returns the velocity (speed vector) of the vehicle as an array with format [x, y, z] in metre per second. Vector is in model space.", "example": "velocityModelSpace _chopper; //\u00a0returns [X (left(-) right(+)), Y (backward(-) forward(+)), Z (down(-) up(+))]", "docSyntax": "velocityModelSpace vehicle", "syntax": "velocityModelSpace <objVehicle>"}, "verifySignature": {"version": "CMD", "tags": "", "description": "Check if file is signed by any key present in game keys folders. On clients, it does not check against the keys accepted by server.", "example": "verifySignature \"@MyAddon\\Addons\\SomeAddon.pbo\";", "docSyntax": "verifySignature filename", "syntax": "verifySignature filename"}, "vest": {"version": "CMD", "tags": "", "description": "nameof vest.", "example": "_myVest = vest player;", "docSyntax": "vest unit", "syntax": "vest <objUnit>"}, "vestContainer": {"version": "CMD", "tags": "", "description": "Returns a cargo container of a unit's vest.", "example": "hint str vestContainer player; //\u00a02df7d600# 163942: dummyweapon.p3d", "docSyntax": "vestContainer unit", "syntax": "vestContainer <objUnit>"}, "vestItems": {"version": "CMD", "tags": "", "description": "Get array with all items (of any kind, even weapons) from vest.", "example": "vestItems player; //\u00a0returns e.g /* [ \"30Rnd_65x39_caseless_mag\", \"30Rnd_65x39_caseless_mag\", \"16Rnd_9x21_Mag\", \"16Rnd_9x21_Mag\", \"HandGrenade\", \"HandGrenade\", \"SmokeShell\", \"SmokeShellGreen\", \"Chemlight_green\", \"Chemlight_green\" ] */", "docSyntax": "vestItems unit", "syntax": "vestItems <objUnit>"}, "vestMagazines": {"version": "CMD", "tags": "", "description": "Get array with all magazines from vest of the given unit.", "example": "vestMagazines player; //\u00a0returns e.g /* [ \"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:4/0](2x)\", \"9mm 16Rnd Mag(16/16)[id/cr:7/0](2x)\", \"RGO Frag Grenade(1/1)[id/cr:10/0](2x)\", \"Smoke Grenade (White)(1/1)[id/cr:12/0](1x)\", \"Smoke Grenade (Green)(1/1)[id/cr:13/0](1x)\", \"Chemlight (Green)(1/1)[id/cr:14/0](2x)\" ] */", "docSyntax": "vestMagazines unit", "syntax": "vestMagazines <objUnit>"}, "viewDistance": {"version": "CMD", "tags": "", "description": "Returns the rendering distance.", "example": "hint (\"my view distance is \" + str viewDistance + \" meters\");", "docSyntax": "viewDistance", "syntax": "viewDistance"}, "visibleCompass": {"version": "CMD", "tags": "", "description": "Checks if the player has compass opened and visible. Keep in mind that the GPS minimap in Arma 3 also shows the direction.", "example": "if (visibleCompass) then {hint \"Compass is visible\"};", "docSyntax": "visibleCompass", "syntax": "visibleCompass"}, "visibleGPS": {"version": "CMD", "tags": "", "description": "Checks if the player has GPS receiver (minimap) opened and visible.", "example": "if (visibleGPS) then {hint \"GPS is visible\"};", "docSyntax": "visibleGPS", "syntax": "visibleGPS"}, "visibleMap": {"version": "CMD", "tags": "", "description": "Return true if the main map is shown (active). In Arma 3 it also returns true if the respawn screen map is visible.", "example": "if (visibleMap) then {hint \"You're showing the map\u00a0!\"};", "docSyntax": "visibleMap", "syntax": "visibleMap"}, "visiblePosition": {"version": "CMD", "tags": "", "description": "Returns an object's rendered position (z value above surface underneath) in render time scope. Same as getPosVisual.", "example": "playerRenderedPos = visiblePosition player;", "docSyntax": "visiblePosition object", "syntax": "visiblePosition <object>"}, "visiblePositionASL": {"version": "CMD", "tags": "", "description": "Returns an object's rendered ASL position (z value above sea level) in render time scope.", "example": "_playerRenderedPosASL = visiblePositionASL player;", "docSyntax": "visiblePositionASL object", "syntax": "visiblePositionASL <object>"}, "visibleScoretable": {"version": "CMD", "tags": "", "description": "Checks whether the score table is visible.", "example": "_visible = visibleScoretable;", "docSyntax": "visibleScoretable", "syntax": "visibleScoretable"}, "visibleWatch": {"version": "CMD", "tags": "", "description": "Checks if the player has watch opened and visible. Keep in mind that the GPS minimap in Arma 3 also shows the time.", "example": "if (visibleWatch) then {hint \"Watch is visible\"};", "docSyntax": "visibleWatch", "syntax": "visibleWatch"}, "waitUntil": {"version": "CMD", "tags": "", "description": "Suspends execution of scheduled script until the given condition satisfied.", "example": "waitUntil { not alive player };", "docSyntax": "waitUntil condition", "syntax": "waitUntil condition"}, "waterDamaged": {"version": "CMD", "tags": "", "description": "Checks if the engine was water damaged. When a vehicle is Drowned, the engine gets water damaged and might need full repair either with setDamage or setHitPointDamage to be able to start.", "example": "waterDamaged tank1;", "docSyntax": "waterDamaged object", "syntax": "waterDamaged <object>"}, "waves": {"version": "CMD", "tags": "", "description": "Return waves value.", "example": "waveIntensity = waves;", "docSyntax": "waves", "syntax": "waves"}, "waypointAttachedObject": {"version": "CMD", "tags": "", "description": "Gets the object attached to the waypoint.", "example": "waypointAttachedObject [groupOne,1];", "docSyntax": "waypointAttachedObject waypoint", "syntax": "waypointAttachedObject waypoint"}, "waypointAttachedVehicle": {"version": "CMD", "tags": "", "description": "Gets the vehicle attached to the waypoint.", "example": "waypointAttachedVehicle [groupOne, 1];", "docSyntax": "waypointAttachedVehicle waypoint", "syntax": "waypointAttachedVehicle waypoint"}, "waypointAttachObject": {"version": "CMD", "tags": "", "description": "Attaches a static object via it is numeric ID to the given waypoint.", "example": "[_grp, 2] waypointAttachObject 1234;", "docSyntax": "waypoint waypointAttachObject objectID", "syntax": "waypoint waypointAttachObject <scalar>"}, "waypointAttachVehicle": {"version": "CMD", "tags": "", "description": "Attaches the Waypoint to the provided vehicle Object.", "example": "[_grp, 2] waypointAttachVehicle vehicle player;", "docSyntax": "waypoint waypointAttachVehicle vehicleName", "syntax": "waypoint waypointAttachVehicle vehicleName"}, "waypointBehaviour": {"version": "CMD", "tags": "", "description": "Gets the waypoint behavior.", "example": "waypointBehaviour [groupOne,1];", "docSyntax": "waypointBehaviour waypoint", "syntax": "waypointBehaviour waypoint"}, "waypointCombatMode": {"version": "CMD", "tags": "", "description": "Gets the waypoint's combat mode setting.", "example": "waypointCombatMode [groupOne, 1];", "docSyntax": "waypointCombatMode waypoint", "syntax": "waypointCombatMode waypoint"}, "waypointCompletionRadius": {"version": "CMD", "tags": "", "description": "Gets the radius around the waypoint where the waypoint is completed.", "example": "_radius = waypointCompletionRadius [groupOne, 1];", "docSyntax": "waypointCompletionRadius waypoint", "syntax": "waypointCompletionRadius waypoint"}, "waypointDescription": {"version": "CMD", "tags": "", "description": "Gets the waypoint description.", "example": "waypointDescription [groupOne,1];", "docSyntax": "waypointDescription waypoint", "syntax": "waypointDescription waypoint"}, "waypointForceBehaviour": {"version": "CMD", "tags": "", "description": "Returns true if the waypoint behavior is forced.", "example": "_isForced = waypointForceBehaviour [groupOne, 1];", "docSyntax": "waypointForceBehaviour waypoint", "syntax": "waypointForceBehaviour waypoint"}, "waypointFormation": {"version": "CMD", "tags": "", "description": "Gets the waypoint formation. Possible values are:", "example": "waypointFormation [groupOne,1];", "docSyntax": "waypointFormation waypoint", "syntax": "waypointFormation waypoint"}, "waypointHousePosition": {"version": "CMD", "tags": "", "description": "Returns buildingPos index assigned to the waypoint.", "example": "waypointHousePosition [groupOne,1];", "docSyntax": "waypointHousePosition waypoint", "syntax": "waypointHousePosition waypoint"}, "waypointLoiterAltitude": {"version": "CMD", "tags": "", "description": "Gets the waypoint loiter altitude.", "example": "private _loiterAlt = waypointLoiterAltitude [groupOne, 1];", "docSyntax": "waypointLoiterAltitude waypoint", "syntax": "waypointLoiterAltitude waypoint"}, "waypointLoiterRadius": {"version": "CMD", "tags": "", "description": "Gets the waypoint's loiter radius.", "example": "_radius = waypointLoiterRadius [groupOne, 1];", "docSyntax": "waypointLoiterRadius waypoint", "syntax": "waypointLoiterRadius waypoint"}, "waypointLoiterType": {"version": "CMD", "tags": "", "description": "Gets the waypoint loiter type. Waypoint uses format Waypoint.", "example": "_type = waypointLoiterType [groupOne, 1];", "docSyntax": "waypointLoiterType waypoint", "syntax": "waypointLoiterType waypoint"}, "waypointName": {"version": "CMD", "tags": "", "description": "Gets the waypoint name.", "example": "_wpName = waypointName [_grp, 2];", "docSyntax": "waypointName waypoint", "syntax": "waypointName waypoint"}, "waypointPosition": {"version": "CMD", "tags": "", "description": "Get provided waypoint's position.", "example": "_wPos = waypointPosition [_groupOne, 1];", "docSyntax": "waypointPosition [groupOrUnit, index]", "syntax": "waypointPosition [groupOrUnit,<scalar>]"}, "waypoints": {"version": "CMD", "tags": "", "description": "Returns an array of waypoints for the specified unit/group.", "example": "waypoints player;", "docSyntax": "waypoints groupName", "syntax": "waypoints groupName"}, "waypointScript": {"version": "CMD", "tags": "", "description": "Gets the waypoint script.", "example": "waypointScript [groupOne,1];", "docSyntax": "waypointScript waypoint", "syntax": "waypointScript waypoint"}, "waypointsEnabledUAV": {"version": "CMD", "tags": "", "description": "Checks if the UAV has waypoints enabled.", "example": "_uav enableUAVWaypoints false; hint str waypointsEnabledUAV _uav; //\u00a0returns false", "docSyntax": "waypointsEnabledUAV uav", "syntax": "waypointsEnabledUAV uav"}, "waypointShow": {"version": "CMD", "tags": "", "description": "A getter for showWaypoint command.", "example": "_wpShow = waypointShow [groupOne, 1];", "docSyntax": "waypointShow waypoint", "syntax": "waypointShow waypoint"}, "waypointSpeed": {"version": "CMD", "tags": "", "description": "Gets the waypoint speed. Possible values are:", "example": "_speed = waypointSpeed [groupOne,1];", "docSyntax": "waypointSpeed waypoint", "syntax": "waypointSpeed waypoint"}, "waypointStatements": {"version": "CMD", "tags": "", "description": "Gets the waypoint statements.", "example": "waypointStatements [groupOne,1];", "docSyntax": "waypointStatements waypoint", "syntax": "waypointStatements waypoint"}, "waypointTimeout": {"version": "CMD", "tags": "", "description": "Gets the waypoint timeout values.", "example": "waypointTimeout [groupOne,1];", "docSyntax": "waypointTimeout waypoint", "syntax": "waypointTimeout waypoint"}, "waypointTimeoutCurrent": {"version": "CMD", "tags": "", "description": "Gets the current timeout for currentWaypoint of a group or -1 if countdown is not in progress.", "example": "_timeout = waypointTimeoutCurrent group player;", "docSyntax": "waypointTimeoutCurrent group", "syntax": "waypointTimeoutCurrent <objGroup>"}, "waypointType": {"version": "CMD", "tags": "", "description": "Gets the waypoint type.", "example": "private _type = waypointType [groupOne, 1];", "docSyntax": "waypointType waypoint", "syntax": "waypointType waypoint"}, "waypointVisible": {"version": "CMD", "tags": "", "description": "A getter for setWaypointVisible command.", "example": "_visible = waypointVisible [groupOne, 1];", "docSyntax": "waypointVisible waypoint", "syntax": "waypointVisible waypoint"}, "weaponAccessories": {"version": "CMD", "tags": "", "description": "Get array with all items linked to a given weapon.", "example": "player weaponAccessories primaryWeapon player; //[\"\",\"acc_pointer_IR\",\"optic_Aco\",\"\"]", "docSyntax": "unit weaponAccessories weapon", "syntax": "<objUnit> weaponAccessories <string>"}, "weaponAccessoriesCargo": {"version": "CMD", "tags": "", "description": "Returns array with all items assigned to the given weapon in given cargo container.", "example": "-", "docSyntax": "container weaponAccessoriesCargo [weaponId, creatorId]", "syntax": "container weaponAccessoriesCargo [weaponId,creatorId]"}, "weaponCargo": {"version": "CMD", "tags": "", "description": "Get array with weapons from ammo box (or any general weapon holder container).", "example": "hint str weaponCargo backpackContainer player;", "docSyntax": "weaponCargo box", "syntax": "weaponCargo box"}, "weaponDirection": {"version": "CMD", "tags": "", "description": "Returns the direction that the vehicle weapon is aiming in. For addons the weapon name must be an entry in CfgWeapons.", "example": "_weaponVectorDir = player weaponDirection currentWeapon player;", "docSyntax": "vehicleName weaponDirection weaponName", "syntax": "vehicleName weaponDirection weaponName"}, "weaponDisassemblyEnabled": {"version": "CMD", "tags": "", "description": "Returns if weapon disassembly is enabled. As disassembly can be enabled/disabled on both player and weapon, it might be necessary to check both.", "example": "private _enabled = weaponDisassemblyEnabled player && weaponDisassemblyEnabled _weapon;", "docSyntax": "weaponDisassemblyEnabled entity", "syntax": "weaponDisassemblyEnabled entity"}, "weaponInertia": {"version": "CMD", "tags": "", "description": "Returns current rate of how much the weapon view is distorted because of quick aiming.", "example": "_inertia = weaponInertia player; //[-0.0126307,0.038023]", "docSyntax": "weaponInertia unit", "syntax": "weaponInertia <objUnit>"}, "weaponLowered": {"version": "CMD", "tags": "", "description": "Returns true if given soldier's weapon is lowered.", "example": "isWeaponLowered = weaponLowered player;", "docSyntax": "weaponLowered unit", "syntax": "weaponLowered <objUnit>"}, "weaponReloadingTime": {"version": "CMD", "tags": "", "description": "Returns current ammo round reloading phase. For a magazine reloading phase see weaponState command.", "docSyntax": "vehicle weaponReloadingTime [gunner, muzzleName]", "syntax": "<objVehicle> weaponReloadingTime [gunner,muzzleName]"}, "weapons": {"version": "CMD", "tags": "", "description": "Returns array of names of all unit's weapons.", "example": "_wArray = weapons player;", "docSyntax": "weapons unit", "syntax": "weapons <objUnit>"}, "weaponsInfo": {"version": "CMD", "tags": "", "description": "Returns entity's weapons information including weapon index and firemode.", "example": "Find weapon with FullAuto firemode and switch to it:", "docSyntax": "unit weaponsInfo [weaponOrMuzzle, onlyLoaded]", "syntax": "<objUnit> weaponsInfo [weaponOrMuzzle,onlyLoaded]"}, "weaponsItems": {"version": "CMD", "tags": "", "description": "Returns an array with subarrays contains class names and also names of connected items of all the vehicle's weapons.", "example": "hint str weaponsItems player; //\u00a0returns e.g /* [ [\"arifle_MX_ACO_pointer_F\", \"muzzle_snds_H\", \"acc_pointer_IR\", \"optic_Aco\", [\"30Rnd_65x39_caseless_mag\", 30], [], \"bipod_01_F_blk\"], [\"launch_NLAW_F\", \"\", \"\", \"\", [\"NLAW_F\", 1], [], \"\"], [\"hgun_P07_F\", \"muzzle_snds_L\", \"\", \"\", [\"16Rnd_9x21_Mag\", 11], [], \"\"] ] // a loaded underbarrel grenade launcher can look like this: [ [\"arifle_MX_GL_F\", \"muzzle_snds_H\", \"acc_pointer_IR\", \"optic_Aco\", [\"30Rnd_65x39_caseless_mag\", 30], [\"1Rnd_HE_Grenade_shell\", 1], \"\"] ] */", "docSyntax": "weaponsItems vehicle", "syntax": "weaponsItems <objVehicle>"}, "weaponsItemsCargo": {"version": "CMD", "tags": "", "description": "Returns an array with subarrays contains class names and also names of connected items of all the vehicle's cargo weapons in weaponsItems format. If weapon has no magazine, an empty array [] is returned instead of magazine info. If the argument is a vehicle with weapons, vehicles cargo is searched, unlike with weaponsItems command, which will return vehicle's weapons instead.", "example": "weaponsItemsCargo vehicle player;", "docSyntax": "weaponsItemsCargo vehicle", "syntax": "weaponsItemsCargo <objVehicle>"}, "weaponState": {"version": "CMD", "tags": "", "description": "Returns the given or currently selected weapon state for unit or vehicle. With Syntax 2, if no optional arguments are present, currently selected weapon is queried.", "example": "_wsPlayer = weaponState player; //\u00a0[\"arifle_MXC_ACO_F\",\"arifle_MXC_ACO_F\",\"Single\",\"30Rnd_65x39_caseless_mag\",30,0,0]", "docSyntax": "weaponState unit", "syntax": "weaponState <objUnit>"}, "weaponsTurret": {"version": "CMD", "tags": "", "description": "Returns all weapons of a given turret. Use turret path [-1] for driver's turret.", "example": "_weapons = vehicle player weaponsTurret [0,0];", "docSyntax": "vehicle weaponsTurret turretPath", "syntax": "<objVehicle> weaponsTurret turretPath"}, "weightRTD": {"version": "CMD", "tags": "", "description": "For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.", "example": "_taruWeight = weightRTD taru//\u00a0Returns [7000,300,1990.56,0,0]", "docSyntax": "weightRTD helicopter", "syntax": "weightRTD helicopter"}, "WFSideText": {"version": "CMD", "tags": "", "description": "Returns the unlocalized text value of a side or an object's/group's side.", "example": "WFSideText player;", "docSyntax": "WFSideText value", "syntax": "WFSideText <scalar>"}, "wind": {"version": "CMD", "tags": "", "description": "Returns the current wind vector (in m/s) as array [x, y, z].", "example": "_windArray = wind;", "docSyntax": "wind", "syntax": "wind"}, "windDir": {"version": "CMD", "tags": "", "description": "Returns the current wind azimuth.", "example": "if (windDir < 45 || windDir > 315) then { hint \"I feel a southern wind\"; //\u00a0wind going from South to North };", "docSyntax": "windDir", "syntax": "windDir"}, "windRTD": {"version": "CMD", "tags": "", "description": "Returns wind strength and direction.", "example": "_wind = windRTD;", "docSyntax": "windRTD", "syntax": "windRTD"}, "windStr": {"version": "CMD", "tags": "", "description": "Returns the current wind strength.", "example": "10 setWindStr (0.5 * windStr);", "docSyntax": "windStr", "syntax": "windStr"}, "wingsForcesRTD": {"version": "CMD", "tags": "", "description": "For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.", "example": "_wingForce = wingsForcesRTD _rtdHelo;", "docSyntax": "wingsForcesRTD RTD_helicopter", "syntax": "wingsForcesRTD RTD_helicopter"}, "with": {"version": "CMD", "tags": "", "description": "Creates a With Type that is used inside a do construct in order to execute code inside a given namespace.", "example": "_myWithType = with uiNamespace;", "docSyntax": "with namespace", "syntax": "with namespace"}, "worldName": {"version": "CMD", "tags": "", "description": "Return the name of the currently loaded world.", "example": "private _name = worldName;", "docSyntax": "worldName", "syntax": "worldName"}, "worldSize": {"version": "CMD", "tags": "", "description": "Returns the engine calculated size (terrain side length) of the current world (BIS_fnc_mapSize may return the same value, but is just a simple look up in config).", "example": "private _size = worldSize;", "docSyntax": "worldSize", "syntax": "worldSize"}, "worldToModel": {"version": "CMD", "tags": "", "description": "Converts position from world space to object model space.", "example": "_relPos = myObject worldToModel [0,0,0];", "docSyntax": "model worldToModel position", "syntax": "model worldToModel position"}, "worldToModelVisual": {"version": "CMD", "tags": "", "description": "Converts position from world space to object model space in render time scope.", "example": "_relPos = myObject worldToModelVisual [0,0,0];", "docSyntax": "object worldToModelVisual worldPosition", "syntax": "<object> worldToModelVisual worldPosition"}, "worldToScreen": {"version": "CMD", "tags": "", "description": "Converts position in world space into screen (UI) space. If a specified position is not within the current screen view, an empty array is returned.", "example": "_screenPos = worldToScreen ASLToAGL getPosASL soldier1;", "docSyntax": "worldToScreen position", "syntax": "worldToScreen position"}, "BIN_fnc_addButtonEvents": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addDangerZone": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addEntitiesToArea": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addFaradayCage": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addIDWMapMeasurementPoint": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Adds measurement point to IDWMap Parameter(s): ARRAY (Optional) - position in format [x,y] or [x,y,z] in which case z is ignored. Default: position player Returns: NUMBER 0 ... 1 - strength at given coordinates -1 - point is out of bounds -999 - error Example: call BIN_fnc_addIDWMapMeasurementPoint [x,y] call BIN_fnc_addIDWMapMeasurementPoint [x,y,z] call BIN_fnc_addIDWMapMeasurementPoint */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addObjectsToArea": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Adds given array of objects to area, ovewriting previous objects data stored for the area in extension Parameter(s): 0: STRING - area name 1: ARRAY - array of objects to add Returns: NUMBER - number of objects added Example: [\"myArea\", [obj1,ob2,...]] call BIN_fnc_addObjectsToArea */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addRecordedSignal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addRotation": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addSignal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addSiteEntities": {"version": "FNC", "tags": "", "description": "/* Description: Register entities to a site, so they can be despawned with the rest when player leaves the area. Parameter(s): 0: OBJECT - site logic. The site must be spawned for the function to work. 1: ARRAY - entities to be added. Types can be mixed, the system will sort them out itself. Returns: BOOL - true if added */ #define ADD(ID)\\ (_entities select ID) pushback _x;\\ (_entityIDs select ID) pushback -1;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addTranslation": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_addTravelPoint": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_allIDWMapMeasurementPoints": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Retrieves user measurements data with strengths Parameter(s): NONE Returns: ARRAY - user measurements in format [x,y,strength] or empty array [] on error Example: call BIN_fnc_getAllMeasurementPoints */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_allowAntennaReveal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_allowedAntennaReveal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_animateSmooth": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_assignAntenna": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_assignedAntenna": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_attachChemlight": {"version": "FNC", "tags": "", "description": "#define VAR_LIGHT \"BIN_fnc_attachChemlight_light\" #define VAR_KILLED \"BIN_fnc_attachChemlight_killed\"", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_bakeAntenna": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_behaviorInit": {"version": "FNC", "tags": "", "description": "#define HISTORY_CAPACITY 5 #define HIT_DELAY 5 #define SIZE_COEF 3", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_bezier": {"version": "FNC", "tags": "", "description": "/* Description: Calculate bezier curve Parameter(s): 0: ARRAY - list of control points in format [x,y,z], can be any number of them 1: NUMBER - progress in range 0 to 1 Returns: ARRAY - position curve in format [x,y,z] */ #define NEW #ifdef NEW", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_bezierAverage": {"version": "FNC", "tags": "", "description": "#define STEPS 101", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_bezierBoundingBox": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_bezierEditor": {"version": "FNC", "tags": "", "description": "#define POINT_W (0.03) #define POINT_H (POINT_W / 0.75) #define RESOLUTION 50 #define MAX_POINTS 16 #define GRIDS 10 #define REFRESH ([_ctrlParent] call (_ctrlArea getvariable \"fnc_draw\")) #define POINTS (_ctrlArea getvariable \"points\") #define LINES (_ctrlArea getvariable \"lines\") #define CURVE (_ctrlArea getvariable \"curve\") #define BUTTONS (_ctrlArea getvariable \"buttons\") #define HOVER (_ctrlArea getvariable \"hover\") #define SELECTED (_ctrlArea getvariable \"selected\") #define SET_HOVER(CTRL) _ctrlArea setvariable [\"hover\",CTRL]; CTRL ctrlsettextcolor COLOR_SELECTED #define SET_SELECTED(CTRL) _ctrlArea setvariable [\"selected\",CTRL] #define COLOR_BACKGROUND [0.4,0.4,0.4,1] #define COLOR [0,0,0,1] #define COLOR_SELECTED [1,1,1,1] #define COLOR_CURVE [1,0,0,1] #define COLOR_LINE [0,0,0,0.2] #define COLOR_TIMELINE [1,1,1,1] #define COLOR_GRID [1,1,1,0.3] #define POINT_POS [\\ (_posX - POINT_W / 2) max 0 min ((ctrlposition _ctrlArea select 2) - POINT_W),\\ (_posY - POINT_H / 2) max 0 min ((ctrlposition _ctrlArea select 3) - POINT_H),\\ POINT_W,\\ POINT_H\\ ]", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_bezierNormalize": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_bezierVelocity": {"version": "FNC", "tags": "", "description": "/* Description: Calculate bezier curve velocity Parameter(s): 0: ARRAY - list of control points in format [x,y,z], can be any number of them 1: NUMBER - progress in range 0 to 1 Returns: ARRAY - velocity vector in format [x,y,z] */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_breatheInit": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_calculateLinkBudget": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_calculateSpectrumAnalyzerValues": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_callButtonEvent": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_cargoPlatform_01_adjust": {"version": "FNC", "tags": "", "description": "Adjust Military Cargo Platform legs length in Eden Editor.", "example": "platform call BIN_fnc_cargoPlatform_01_adjust;", "docSyntax": "[object] call BIN_fnc_cargoPlatform_01_adjust", "syntax": "[<object>] call BIN_fnc_cargoPlatform_01_adjust"}, "BIN_fnc_cargoPlatform_01_destruction": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_CargoPlatform_01_destruction Apply texture & materials of parent object to ruins. Function is attached to killed event handler. */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_cargoPlatform_01_update": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_cargoPlatform_01_update Update cargo platform position */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_CBRNCharacterAdd": {"version": "FNC", "tags": "", "description": "/* Description: Enables CBRN systems on a specific character entity. NOTE: Module / function set not robust nor completed - not recommended for usage at this stage! Parameter(s): 0: OBJECT - character entity to enable CBRN systems on Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_CBRNContaminantAdd": {"version": "FNC", "tags": "", "description": "/* Description: Registers a CBRN contaminant. NOTE: Module / function set not robust nor completed - not recommended for usage at this stage! Parameter(s): 0: OBJECT - trigger representing a CBRN contaminated area OBJECT - entity representing an active CBRN contaminant Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_CBRNContaminantRemove": {"version": "FNC", "tags": "", "description": "/* Description: Unregisters a CBRN contaminant. NOTE: Module / function set not robust nor completed - not recommended for usage at this stage! Parameter(s): 0: OBJECT - trigger representing a CBRN contaminated area Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_CBRNGearActivate": {"version": "FNC", "tags": "", "description": "/* Description: Activates a specific piece of CBRN gear for a character entity. NOTE: Module / function set not robust nor completed - not recommended for usage at this stage! Parameter(s): 0: OBJECT - character entity to activate CBRN gear for 1: STRING - CBRN gear class name to activate Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_CBRNGearDeactivate": {"version": "FNC", "tags": "", "description": "/* Description: Deactivates a specific piece of CBRN gear for a character entity. NOTE: Module / function set not robust nor completed - not recommended for usage at this stage! Parameter(s): 0: OBJECT - character entity to deactivate CBRN gear for 1: STRING - CBRN gear class name to deactivate Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_CBRNGearUpdate": {"version": "FNC", "tags": "", "description": "/* Description: Processes CBRN gear updates on a specific character entity. NOTE: Module / function set not robust nor completed - not recommended for usage at this stage! Parameter(s): 0: OBJECT - character entity to process CBRN gear for 1: STRING - CBRN gear class name to process Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_CBRNHoseInit": {"version": "FNC", "tags": "", "description": "Initializes CBRN Hose for given unit.", "example": "player call BIN_fnc_CBRNHoseInit;", "docSyntax": "[unit] call BIN_fnc_CBRNHoseInit", "syntax": "[<objUnit>] call BIN_fnc_CBRNHoseInit"}, "BIN_fnc_CBRNInContaminant": {"version": "FNC", "tags": "", "description": "/* Description: Returns whether or not a character entity is within a CBRN contaminated area. NOTE: Module / function set not robust nor completed - not recommended for usage at this stage! Parameter(s): 0: OBJECT - character entity to test for Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_circleSmokeMissile": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_circleSmokeMissile */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_clearIDWMap": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Clears IDWMap on the main map Parameter(s): NONE Returns: BOOL - true if EH existed and was removed Example: call BIN_fnc_clearIDWMap */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_clearTXScan": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Clears TXScan drawing Parameter(s): 0: STRING - scan name, \"\" - all scans Returns: BOOL - false if error occured Example: \"MyScan\" call BIN_fnc_clearTXScan \"\" call BIN_fnc_clearTXScan - all scans */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_colorHSLtoRGB": {"version": "FNC", "tags": "", "description": "Converts HSL colour format to RGB.", "example": "private _rgb = [0, 100, 50] call BIN_fnc_colorHSLtoRGB;", "docSyntax": "[hue, saturation, lightness] call BIN_fnc_colorHSLtoRGB", "syntax": "[hue,saturation,lightness] call BIN_fnc_colorHSLtoRGB"}, "BIN_fnc_crearAllData": {"version": "FNC", "tags": "", "description": "This function contains no code.", "example": "[] call BIN_fnc_crearAllData;", "docSyntax": "[] call BIN_fnc_crearAllData", "syntax": "[] call BIN_fnc_crearAllData"}, "BIN_fnc_createScriptedSoundSource": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_createScriptedSoundSourceVehicle": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_createTXScan": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Creates a scan with the name defined as class in CfgTXScans or from given params. If name doesn't exists in config and params are not provided, default scan is created which could be tweaked later Parameter(s): 0: STRING - \"\" create every scan from config or 0: STRING - scan name 1: ARRAY (Optional) - TX position 2: NUMBER (Optional) - scan angle 3: NUMBER (Optional) - scan precision 4: ARRAY (Optional) - scan polygon Returns: BOOL - false on error Examples: \"MyScan\" call BIN_fnc_createTXScan \"\" call BIN_fnc_createTXScan - creates every scan from config [\"MyScan\", [1,2,3], 20, 0.1] call BIN_fnc_createTXScan - creates every scan from config */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_cropTXScan": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Crops given scan Parameter(s): 0: STRING - scan name 1: NUMBER - crop rectangle center X 2: NUMBER - crop rectangle center Y 3: NUMBER - crop rectangle center W 4: NUMBER - crop rectangle center H Returns: ARRAY - crop rectangle corners Example: [\"MyScan\", 100, 100, 1000, 500] call BIN_fnc_cropTXScan */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_curatorInit": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_debugDraw": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_debugDrawMapInit": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_debugQuests": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_debugText": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deconShowerAnim": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_deconShowerAnim */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deconShowerAnimLarge": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_deconShowerAnimLarge */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deconShowerAnimStop": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_deconShowerAnimStop Delete all sound sources attachted to decon shower in case it is destroyed or deleted */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deconShowerCollision": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_deconShowerCollision */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deconShowerDelete": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_deconShowerDelete Delete all sound sources attachted to decon shower in case it is destroyed or deleted */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deconShowerMove": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_deconShowerMove */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deleteAntenna": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deleteDangerZone": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deleteDiaryRecord": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deleteFaradayCage": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deleteLoopedRadioSignal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deleteSignal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deleteSpectrumAnalyzer": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deleteTravelPoint": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_deleteTXScan": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Deletes scan with given name from extension and the map Parameter(s): 0: STRING - TXScan name Returns: BOOL - false on error Example: \"MyScan\" call BIN_fnc_deleteTXScan */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_diag_addAllSpectrumAnalyzers": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_diag_drawAllAreaObjectsBounds": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Draws all area objects bounds Parameter(s): 0: STRING - area name Returns: NUMBER - event handler id Example: \"MyArea\" call BIN_fnc_diag_drawAllAreaObjectsBounds */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_diag_getAllAreaEntities": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_diag_getAllAreaObjects": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns stored area objects for diagnostics Parameter(s): 0: STRING - area name 1: NUMBER - multipart number Returns: ARRAY of arays in format [[posX,posY,posMinZ,posMaxZ,radius],...] Example: \"MyArea\" call BIN_fnc_diag_getAllAreaObjects */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_diag_IDWMap": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Adds user action menu to the player with different IDWMap diag options Parameter(s): 0: STRING - command 1: BOOL (Optional) - extended option Returns: NOTHING Example: call BIN_fnc_diag_IDWMap */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_diag_logAntenna": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_diag_revealAllAntennas": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_diag_showLinkBudgetMap": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_diag_TXScan": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Adds user action menu to the player with different TXScan diag options Parameter(s): 0: STRING - command Returns: NOTHING Example: call BIN_fnc_diag_TXScan */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_distanceToAreaBorder": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_dockModule": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_drawAntennas": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_drawIconFixed": {"version": "FNC", "tags": "", "description": "/* Description: Set fixed size marker to be drawn in main map Parameter(s): 0: STRING - unique marker ID 1: ARRAY - marker parameters in format used by drawIcon command BOOL - delete the marker Returns: BOOL - true if successful */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_drawIDWMap": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Draws IDWMap on the main map Parameter(s): NONE Returns: BOOL - true on success Example: call BIN_fnc_drawIDWMap */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_drawMap": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_drawProbeMap": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_drawSpectrum": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_drawTooltip": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_drawTXScan": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Draws TXScan with given name Parameter(s): STRING - scan name or \"\" to draw all scans Returns: BOOL - true on success Example: \"MyScan\" call BIN_fnc_drawTXScan \"\" call BIN_fnc_drawTXScan - draw all scans */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_droneDestructionFX": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_droneDestructionFX */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_droneModuleDestruction": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_droneModuleDestruction Alien Module destruction */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_editMoveProperties": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_empVehicle": {"version": "FNC", "tags": "", "description": "Sets EMP parameters to a vehicle. Destroys lights and optionally prevents vehicle from starting", "example": "[_enemyVehicle, true, true] call BIN_fnc_empVehicle;", "docSyntax": "[obj, destroyEngine, aiExit] call BIN_fnc_empVehicle", "syntax": "[<object>,destroyEngine,aiExit] call BIN_fnc_empVehicle"}, "BIN_fnc_enableSaving": {"version": "FNC", "tags": "", "description": "Sets a variable used in Arma 3 Contact which handles saving.", "example": "[true, true] call BIN_fnc_enableSaving;", "docSyntax": "[enableSaving, saveGame] call BIN_fnc_enableSaving", "syntax": "[enableSaving,saveGame] call BIN_fnc_enableSaving"}, "BIN_fnc_eulerToVector": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_exit": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_exitAntennas": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_exitDiary": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_exitGroup": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_exitPersistentObjects": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_exitQuests": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_exitSites": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_exitTasks": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_findNearestGrid": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_findPath": {"version": "FNC", "tags": "", "description": "/* Description: A* search algorithm. Uses hard-coded Manhattan distance to measure distance. Parameter(s): 0: ARRAY of ARRAYs in format: 0: NUMBER - node cost 1: ARRAY - array of neighbor indexes 2: ARRAY - XYZ position of the node, used to measure distance from end pos 1: NUMBER - index of starting point 2: NUMBER - index of ending point Returns: ARRAY of NUMBERs - indexes of nodes which are traversed on the way to the ending point */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_findSafePositions": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_findSafePositions */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_findTargetWeight": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_findTargetWeight */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_frequencyToString": {"version": "FNC", "tags": "", "description": "/* Description: Returns frequency as a string Parameter(s): 0: NUMBER - frequency in MHz, returned value is in format \"<value> <unit>\" ARRAY in format [NUMBER,NUMBER] - frequency range in MHz, returned value is in format \"<value1> <unit1> - <value2> <unit2>\" 1: NUMBER - order offset. When 0, frequency 1000 will return \"1 GHz\". When -1, returned value will be \"1000 MHz\" 2: BOOL - true if input values are in Hz, false if in MHz (standard across the game) Returns: STRING */ #define UNITS [\\ localize \"STR_A3_C_fnc_frequencyToString_Hz0\",\\ localize \"STR_A3_C_fnc_frequencyToString_Hz1\",\\ localize \"STR_A3_C_fnc_frequencyToString_Hz2\",\\ localize \"STR_A3_C_fnc_frequencyToString_Hz3\",\\ localize \"STR_A3_C_fnc_frequencyToString_Hz4\",\\ localize \"STR_A3_C_fnc_frequencyToString_Hz5\",\\ localize \"STR_A3_C_fnc_frequencyToString_Hz6\"\\ ] // ^0 ^3 ^6 ^9 ^12 ^15 ^18 //#define UNITS [\"Hz\",\"kHz\",\"MHz\",\"GHz\",\"THz\",\"PHz\",\"EHz\"]", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAISquadID": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAISquadPosition": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAllAISquads": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAllAreas": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAllTXScans": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns array of names of all TXScans stored in extension Parameter(s): NONE Returns: ARRAY - scan names Example: call BIN_fnc_getAllTXScans */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaAngle": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaCanReveal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaFrequency": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaFrequencyClass": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaGain": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaName": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaObject": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaPower": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaRevealValue": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennas": {"version": "FNC", "tags": "", "description": "/* Description: Get all antennas, transmitters and receivers alike Parameter(s): 0: BOOL - true to ignore player's antennas (default: false) Returns: ARRAY of STRINGs - antenna IDs */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaScanPolygon": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaScans": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaScanSignals": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaSensitivity": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaSignal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaSignalHistory": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getAntennaType": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getBehaviorCoef": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_getBehaviorCoef Get behavior coefficients Examples: [bin_drone,\"gravityCannon\"] call BIN_fnc_getBehaviorCoef - returns coefficients for gravity cannon behavior */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getCharacterSounds": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getCurrentSignal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getEntityBoundingBarrel": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getFollowingSignals": {"version": "FNC", "tags": "", "description": "/* Description: Get signals which follow after given one. Parameter(s): 0: STRING - signal class Returns: ARRAY of STRINGs (including input signal when it is not a link) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getFormattedControl": {"version": "FNC", "tags": "", "description": "/* Description: Return a formatted string of a mapped control (same style as the Field Manual and Hints) Parameter(s): 0: STRING - name of the control action 1 (Optional): SCALAR - 0-based index of the mapped control Returns: STRING - formatted control */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getGridCollisions": {"version": "FNC", "tags": "", "description": "#define BUSH_WIDTH 2 #define BUSH_HEIGHT 2 #define TREE_TRUNK_WIDTH 0.5 #define TREE_TRUNK_HEIGHT 4 #define GET_POS\\ private _pos = _x modelToWorld (boundingcenter _x vectormultiply -1); #define GET_BBOX\\ private _bbox = boundingboxreal _x;\\ private _bboxX = abs ((_bbox select 0 select 0) - (_bbox select 1 select 0)) / 2 + _cellSizeXHalf*0;\\ private _bboxY = abs ((_bbox select 0 select 1) - (_bbox select 1 select 1)) / 2 + _cellSizeYHalf*0;\\ private _bboxZ = abs ((_bbox select 0 select 2) - (_bbox select 1 select 2)) / 2 + _cellSizeZHalf*0; //_bboxZ = (abs (_bbox select 0 select 2) + abs (_bbox select 1 select 2)) + _cellSizeZHalf*0; #define GET_BBOX_FIXED(SIZE)\\ private _bboxX = SIZE + _cellSizeXHalf;\\ private _bboxY = SIZE + _cellSizeYHalf;\\ private _bboxZ = SIZE + _cellSizeZHalf;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getGridMap": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getGridPath": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getGroupSeed": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getIDWMapDrawColorSet": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Gets stored draw colors Parameter(s): NONE Returns: ARRAY - draw colors or [] on error Example: call BIN_fnc_getIDWMapDrawColorSet */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getIDWMapDrawPatternIndex": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Gets stored draw pattern index Parameter(s): NONE Returns: NUMBER - draw pattern index (0..3) or -1 on error Example: call BIN_fnc_getIDWMapDrawPatternIndex */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getIDWMapParams": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns currently set IDWMap params Parameter(s): NONE Returns: ARRAY in format: [[mapMinX, mapMinY, mapMaxX, mapMaxY], idwCellSize, idwSpreadRadius, idwSpreadPower, curvePointsInterval, curvePointSpreadRadius] or [] on error Example: call BIN_fnc_getIDWMapParams */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getIDWMapSaveData": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns array with IDWMap data which is used for saving/loading Parameter(s): NONE Returns: ARRAY - save data Example: call BIN_fnc_getIDWMapSaveData */ #define MAPDRAWPATTERNINDEX_DEFAULT 0 #define MAPDRAWCOLORSET_DEFAULT [[0,0,0.514,0.7],[0,0,0.875,0.7],[0,0.247,1,0.7],[0,0.659,1,0.7],[0.035,1,0.961,0.7],[0.443,1,0.553,0.7],[0.843,1,0.153,0.7],[1,0.749,0,0.7],[1,0.357,0,0.7],[0.941,0,0,0.7],[0.522,0,0,0.7]] #define MAPDRAWIDC_DEFAULT 51 // if the data was not yet set", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getIDWMapStaticDataLayers": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Gets static data from extension Parameter(s): NONE Returns: ARRAY in format: [ [[x,y,strengh],[x,y,strengh],...], // data layer 0 [[x,y,strengh],[x,y,strengh],...], // data layer 1 ... [[x,y,strengh],[x,y,strengh],...] // data layer N ] or [] - on error Example: call BIN_fnc_getIDWMapStaticDataLayers */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getLinkBudget": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getLinkDir": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getLinkedAntennas": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getLinkStrength": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getObjectAntennas": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getObjectBoundingBarrel": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns bounding barrel of the given object Parameter(s): 0: OBJECT - object to measure Returns: ARRAY in format [radius, height, offset]. Offset is negative if object Z position is higher than the lower bound Example: myObj call BIN_fnc_getObjectBoundingBarrel */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getPatrolRoutes": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getRadioConversation": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getRecordedSignals": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getRoleIcon": {"version": "FNC", "tags": "", "description": "/* Description: Get soldier's role icon (e.g., sniper, machine-gunner, etc.) Parameter(s): 0: OBJECT Returns: STRING - image path */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getRotation": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getSignalAge": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getSignalTypeClass": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getSignalTypes": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getSiteLayerEntities": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getTerrainObjects": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns terrain objects of the given type for the given area dimensions Parameter(s): 0: ARRAY - area details in Area format (see BIS_fnc_getArea) 1: ARRAY - types of terrain objects, for example [\"HOUSE\", \"TREE\"] Returns: ARRAY of objects Example: [\"myArea\", [player, 100], [\"HOUSE\", \"TREE\"]] call BIN_fnc_getTerrainObjects */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getTXScanAngle": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns TXScan angle Parameter(s): 0: STRING - scan name Returns: NUMBER - set cone angle or -1 on error Example: \"MyScan\" call BIN_fnc_getTXScanAngle */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getTXScanDrawData": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns draw data for given TXScan Parameter(s): 0: STRING - scan name Returns: ARRAY in format [iconData, polygonData, triangleData, rectangleData, isDefaultPolygon] where: iconData: ARRAY - position in format [x,y,0] polygonData: ARRAY - array of polygon vertices, where each vertex is in format [x,y,0] triangleData: ARRAY - array of triangle vrtices, where each vertex is in format [x,y,0] rectangleData: ARRAY - bounding rectangle in format [center, a, b, angle] isDefaultPolygon: BOOL - if a scan polygon has not yet been calculated, this will be true Example: \"myScan\" call BIN_fnc_getTXScanDrawData */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getTXScanPolygon": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns current intersection polygon for given scan Parameter(s): 0: STRING - TXScan name Returns: ARRAY - polygon points or [] on error Example: \"MyScan\" call BIN_fnc_getTXScanPolygon */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getTXScanPolygonDetails": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns estimated area and perimeter of the given scan polygon Parameter(s): 0: STRING - TXScan name Returns: ARRAY in format [area, perimeter] Example: \"MyScan\" call BIN_fnc_getTXScanPolygonDetails */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getTXScanPosition": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Gets stored TXScan transmitter position Parameter(s): 0: STRING - scan name Returns: ARRAY - set transmitter position or [] on error Example: \"MyScan\" call BIN_fnc_setTXScanPosition */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getTXScanPrecision": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns stored TXScan precision Parameter(s): 0: STRING - scan name Returns: NUMBER - set cone precision or -1 on error Example: \"MyScan\" call BIN_fnc_getTXScanPrecision */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getTXScanSaveData": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns array with given TXScan data which is used for saving/loading Parameter(s): 0: STRING - TXScan name or \"\" to return all saved scan names Returns: ARRAY - save data for given scan name or if argument was \"\" ARRAY in format [allscannames, activeareaboundaries] Example: \"MyScan\" call BIN_fnc_getTXScanSaveData \"\" call BIN_fnc_getTXScanSaveData */ #define SAVEVAR_NAME \"BIN_fnc_TXScan_saveData\" #define IDD_DEFAULT 12 #define IDC_DEFAULT 51", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_getTXScanWorldBounds": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns currently set boundaries of active area Parameter(s): NONE Returns: ARRAY in format: [minX, minY, maxX, maxY] or [] on error Example: call BIN_fnc_getTXScanWorldBounds */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_gravityBurst": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_gravityCannon_01_ai": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_gravityCannon_01_AI */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_grenadeThrowback": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_grenadeThrowback */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_hackAIDrone": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_handDrawBezier": {"version": "FNC", "tags": "", "description": "/* Description: Show hand-drawn bezier curve in the map Parameter(s): 0: STRING - Unique ID of the ellipse. When such ellipse already exists, it will override it. 1: ARRAY - control points of bezier curve 2: ARRAY - color in [r,g,b,a] format 3: STRING - fill texture BOOL - true for default pen-blue color, false for the same, but faded Optional: 4: NUMBER or ARRAY: thickness 5: ARRAY - random thickness offset in format [min,mid,max] 6: NUMBER - number od drawing steps Returns: NOTHING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_handDrawEllipse": {"version": "FNC", "tags": "", "description": "/* Description: Show hand-drawn ellipse in the map Parameter(s): 0: STRING - Unique ID of the ellipse. When such ellipse already exists, it will override it. 1: ARRAY - center position 2: NUMBER - semi-major axis 3: NUMBER - semi-minor axis 4: NUMBER - angle 5: ARRAY - color in [r,g,b,a] format 6: STRING - fill texture BOOL - true for default pen-blue color, false for the same, but faded Optional: 7: NUMBER - radius coef 8: NUMBER - length coef 9: NUMBER or ARRAY: thickness 10: ARRAY - radius curve 11: BOOL - true if clockwise 12: NUMBER - starting angle 13: ARRAY - random thickness offset in format [min,mid,max] 14: NUMBER - number od drawing steps Returns: NOTHING Examples: //--- Show an ellipse on player's position [\"test1\",position player,300,400,15] call BIN_fnc_handDrawEllipse; //--- Show the same ellipse, but faded [\"test1\",position player,300,400,15,nil,false] call BIN_fnc_handDrawEllipse; */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_hasAntennaSignal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_inDangerZone": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initAcctime": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initActors": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initAI": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initAIBase": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initAIDrone": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initAISquad": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initAntennas": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initConstants": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initCutLayers": {"version": "FNC", "tags": "", "description": "//--- Register RSC layers in the correct order (they are not serialized)", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initDiary": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initDroneModule": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_initDroneModule */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initGroup": {"version": "FNC", "tags": "", "description": "#define DEBUG #define GROUP (units player - [player]) #define DAMAGE_COEF 0.25 #define DIS_LIMIT_SOFT 400 #define DIS_LIMIT_HARD 600", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initHub": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initInspectableDiaryRecord": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initInventory": {"version": "FNC", "tags": "", "description": "//--- Ignored in missions without special description.ext property", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initLocations": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initMiniUGV": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initMothershipLights": {"version": "FNC", "tags": "", "description": "/* Description: Enable scripted ET Mothership lights on baked memory points Created lights can be retrieved via getVariable \"BIN_lights\" on the Mothership Parameter(s): 0: OBJECT - Mothership Returns: NOTHING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initPersistentObjects": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initProbeMap": {"version": "FNC", "tags": "", "description": "//--- Debug", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initPuzzle": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initQuests": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initRevive": {"version": "FNC", "tags": "", "description": "#define BLEED_TIME 160 #define BLINK_DELAY_MAX 20 #define BLINK_TIME 0.75", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initSideColors": {"version": "FNC", "tags": "", "description": "#define FORMAT \"Map_%1_%2\"", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initSites": {"version": "FNC", "tags": "", "description": "#define DEBUG #define AREA_BUFFER +200 #define DEF_RADIUS 500 #define DEF_RADIUS_OUT 550 #define AREA_DEF [position _logic,DEF_RADIUS_OUT,DEF_RADIUS_OUT,0,false]", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initTasks": {"version": "FNC", "tags": "", "description": "//--- Obsolete, replace dby BIN_fnc_initQuests", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initTurret": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initUAV": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_initUGV": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_inList": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_inRadioConversation": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_inRadioConversationWith": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isAIBase": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isAntenna": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isAntennaBaked": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isAntennaBroadcasting": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isAntennaJammed": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isAntennaRevealed": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isAntennaSelected": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isExtensionError": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns true and displays description of the error from extension if there was an error. When extension returns negative number (usually -1), it is considered an indication of some sort of error, in which case string output should contain the description of the error. Parameter(s): Extension (arg version) output in format [<string>, <number>, <number>] Returns: BOOL - true if error */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isNull": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isPaused": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isPausedInit": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isPuzzleReset": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isPuzzleTerminated": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isRadioHandshake": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_isRadioSilence": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_joinAISquad": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_lightBurst": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_list": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_loadIDWMap": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Loads IDWMap data from global variable 'BIN_fnc_IDWMap_saveData' into extension Parameter(s): NONE Returns: BOOL - true on success Example: call BIN_fnc_loadIDWMap */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_loadTXScanState": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Loads TXScan data from global saved variables into extension Parameter(s): NONE Returns: BOOL - true on success Example: call BIN_fnc_loadTXScanState */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_markDangerZone": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_markFreeAreaPositions": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Returns array of booleans in place of passed positions, where true is free and false is possible collision Parameter(s): 0: STRING - area name 1: ARRAY - bounding barrel in format [radius, height, offset] 2: ARRAY - arrays of positions Returns: ARRAY of booleans Example: [\"myArea\", [10,5,0], [[123,123,123],[456,456,456],...]] call BIN_fnc_markFreeAreaPositions */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_matrixMultiply": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_matrixTranspose": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_matterballDestruction": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_matterBallDestruction Alien Module destruction */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_matterballEffects": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_matterBallEffects Alien Matter Ball decaying effects a: reyhard */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_matterCollectionFX": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_matterCollectionFX */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_missileDeflection": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_missileSwarm": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_missileSwarm */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moduleAntenna": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moduleCBRN": {"version": "FNC", "tags": "", "description": "/* Description: Enables CBRN systems in a scenario (not MP-compatible!). NOTE: Module / function set not robust nor completed - not recommended for usage at this stage! Parameter(s): Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moduleChargeSequence": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moduleDangerZone": {"version": "FNC", "tags": "", "description": "#define AREA_BUFFER +50", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moduleFaradayCage": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moduleGravityAnomaly": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moduleMovementGrid": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_modulePointOfInterest": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moduleSimpleObject": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moduleTravel": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moveAI": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moveAIReinforcements": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moveInit": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moveModule": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moveObject": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moveTo": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moveToModelSpace": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_moveToOnArc": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_moveToOnArc */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_onPuzzleCompleted": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_onPuzzleProgress": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_onPuzzleReset": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_onPuzzleStepCompleted": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_onPuzzleTerminated": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_persistentVariables": {"version": "FNC", "tags": "", "description": "//#define SAVE_IN_PROFILE #define SAVE_IN_CAMPAIGN #define PREFIX \"BIN_\"", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_playAlternatingSound": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_playMission": {"version": "FNC", "tags": "", "description": "//--- Disabled, campaign is now configured as traditional campaign", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_playPatrolAnim": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_playPatrolAnimDone": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_postInit": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_preInit": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_preInitEM": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_preInitIDWMap": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Should be called from preInit, contains saving/loading functions as well as default initisalization Parameter(s): 0: STRING - preInit pass through Returns: NOTHING Example: // from preinit script call BIN_fnc_preInitIDWMap */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_preInitTXScan": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Should be called from preInit, contains saving/loading functions as well as default initisalization Parameter(s): 0: STRING - \"preInit\" Returns: NOTHING Example: // from preinit script call BIN_fnc_preInitTXScan */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_probeAnim": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_probeAnim Example usage: [probe,1] call BIN_fnc_probeAnim - expand probe core [probe,0] call BIN_fnc_probeAnim - retract probe core */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_probeCoreDelete": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_probeCoreEffects": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_probeCoreEffects [probeCore] call BIN_fnc_probeCoreEffects */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_probeCoreInit": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_probeCoreLegsDestroyed": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_probeCoreLegsDestroyed */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_probeCoreUpdate": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_probeDelete": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_probeDelete */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_probeHitpoint": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_probeHitpoint Spawns particle effects & sound Function is connected to probe hitpoint and can be also manually triggered via calling following code: * [cursorObject,1,true] call BIN_fnc_probeHitpoint - destroy hitpoint with index 1 */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_probeVeinHitpoint": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_probeVeinHitpoint Animate vein & spawn sound Input: Dammaged EH */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_ProbingArm_fired": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_probingArm_fired */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_ProbingBeam_fired": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_probingBeam_fired */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_ProbingBeam_sendData": {"version": "FNC", "tags": "", "description": "/* BIS_fnc_ProbingBeam_sendData */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_prototypeCannon_01_ai": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_prototypeCannon_01_player": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_prototypeCannon_01_slaved": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_puzzle_mole": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_puzzle_outlier": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_reactRadio": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_reactRadio_Base": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_reactRadio_Player": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_reactRadio_Squad": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_recordSignal": {"version": "FNC", "tags": "", "description": "/* Description: Add signal to the library. Parameter(s): 0: STRING - antenna ID (its currently transmitted signal will be used) or signal class from CfgContact >> Signals Returns: BOOL - true if added */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_resetPuzzle": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_revealAntenna": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_revealFrequency": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_saveIDWMap": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Saves IDWMap data into global variable 'BIN_fnc_IDWMap_saveData' so that it can be serialised and then loaded from game save when needed Parameter(s): NONE Returns: BOOL - true on success Example: call BIN_fnc_saveIDWMap */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_saveTXScanState": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Saves TXScan data into global variables so that it can be serialised and then loaded from game save when needed Parameter(s): NONE Returns: BOOL - true on success Example: call BIN_fnc_saveTXScanState */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_savingEnabled": {"version": "FNC", "tags": "", "description": "Returns the value of missionNamespace getVariable [\"BIN_enableSaving\", true].", "example": "call BIN_fnc_savingEnabled == (missionNamespace getVariable [\"BIN_enableSaving\", true]); //\u00a0true", "docSyntax": "call BIN_fnc_savingEnabled", "syntax": "call BIN_fnc_savingEnabled"}, "BIN_fnc_scan": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_scanObject": {"version": "FNC", "tags": "", "description": "#define VAR_END \"BIN_fnc_scanObject_end\" #define END_NONE 0 #define END_RETURN 1 #define END_DROP 2 #define CURVE_POS [[0,0,0],[0.5,0,0],[0.5,1,0],[1,1,0]] #define CURVE_ROT [[0,0,0],[0,1,0],[0.75,1,0]]", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_scanTX": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Intersects current scan polygon (or map square if no scan exists) with triangle originated from RX position and returns the triangle Parameter(s): 0: STRING - scan name 1: ARRAY (Optional) - RX position. Default: position player Returns: ARRAY - triangle used for intersection Example: [\"MyScan\", position player] call BIN_fnc_scanTX */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_selectDiaryCategory": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_selectDiaryRecord": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_selectDiaryTask": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_sendPing": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_sendRadioSignal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAISquadID": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntenna": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaAngle": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaCanReveal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaClass": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaFrequency": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaFrequencyFromList": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaGain": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaName": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaObject": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaPower": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaRevealValue": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaScans": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaSensitivity": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setAntennaType": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setBehavior": {"version": "FNC", "tags": "", "description": "#define DEBUG #define HISTORY_CAPACITY 5 #define TERMINATE_DEFAULT 1 #define TERMINATE_INTERRUPT 2 #define BEHAVIOR_PATH \"a3\\Functions_F_Contact\\Behavior\\Drone\\\"", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setBehaviorCoef": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_setBehaviorCoef Set behavior coefficients Examples: [bin_drone,\"gravityCannon\",0] call BIN_fnc_setBehaviorCoef */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setBreathe": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setCurrentSignal": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setCustomSoundController": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_setCustomSoundController a: reyhard */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setDiaryRecord": {"version": "FNC", "tags": "", "description": "#define DEFAULT_TEXT \"~\"", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setDroneModuleParams": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_setDroneModuleParams */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setDroneModuleTarget": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_setDroneModuleTarget */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setGravityPulse": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setIDWMapDrawColorSet": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Sets map draw color set Parameter(s): ARRAY - array of colors from 1 to 11 Returns: BOOL - true on success Example: // set 3 color drawing on the fly [[0,0,0.514,0.7],[0.843,1,0.153,0.7],[0.522,0,0,0.7]] call BIN_fnc_setIDWMapDrawColorSet; // set from config [] call BIN_fnc_setIDWMapDrawColorSet; */ #define MAPDRAWCOLORSET_DEFAULT [[0,0,0.514,0.7],[0,0,0.875,0.7],[0,0.247,1,0.7],[0,0.659,1,0.7],[0.035,1,0.961,0.7],[0.443,1,0.553,0.7],[0.843,1,0.153,0.7],[1,0.749,0,0.7],[1,0.357,0,0.7],[0.941,0,0,0.7],[0.522,0,0,0.7]]", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setIDWMapDrawPatternIndex": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Sets map draw pattern Parameter(s): NUMBER - pattern: 0 - triangles, 1 - diamonds, 2 - squares, 3 - diamonds overlapped Returns: BOOL - true on success Example: // set on the fly 3 call BIN_fnc_setIDWMapDrawPatternIndex; OR [3] call BIN_fnc_setIDWMapDrawPatternIndex; // set from config call BIN_fnc_setIDWMapDrawPatternIndex; OR [] call BIN_fnc_setIDWMapDrawPatternIndex; */ #define MAPDRAWPATTERNINDEX_DEFAULT 0", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setIDWMapParams": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Resets extension data, sets IDWMap params from argument, from config or default *** This function must be called before any data is added to the IDWMap *** Parameter(s): 0: ARRAY - (Optional) areaParams in format: 0: NUMBER - minMapX 1: NUMBER - minMapY 2: NUMBER - maxMapX 3: NUMBER - maxMapY Default: [0, 0, worldSize, worldSize] 1: NUMBER (Optional) - idwCellSize. Default: 20 2: NUMBER (Optional) - idwSpreadRadius. Default: 200 3: NUMBER (Optional) - idwSpreadPower. Default: 2.0 4: NUMBER (Optional) - curvePointsInterval. Default: 20 5: NUMBER (Optional) - curvePointSpreadRadius. Default: idwSpreadRadius Returns: BOOL - true on success Example: call BIN_fnc_setIDWMapParams */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setIDWMapStaticDataLayers": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Sets static data for extension use from argument or config \"CfgIDWMap\" Parameter(s): ARRAY (optional) - static data in format: [ [[x,y,strengh],[x,y,strengh],...], // data layer 0 [[x,y,strengh],[x,y,strengh],...], // data layer 1 ... [[x,y,strengh],[x,y,strengh],...] // data layer N ] Returns: BOOL - true on success Example: call BIN_fnc_setIDWMapStaticDataLayers */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setModuleSpeed": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setMoveProperties": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setObjectGrid": {"version": "FNC", "tags": "", "description": "#define DEBUG #define COST_DISABLED 1000", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setPlayerSelectedBand": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setPointOfInterest": {"version": "FNC", "tags": "", "description": "/* Description: Add point of interest shown in the map Parameter(s): 0: STRING - unique ID of the point 1: BOOL - true if the point is completed (shown faded in the map) NUMBER - status, can be: -1: dormant, will be activated when player gets close 0: shown, but not completed +1: completed 2: ARRAY - position 3: ARRAY - area in format [width,height,angle,isRectangle] 4: STRING - type, can be \"Unknown\" or \"Warning\" (default: \"Unknown\") 5: STRING - color, can be \"Black\", \"Blue\" or \"Red\" (default: \"Black\") or 0: OBJECT - \"Point of interest\" module Returns: STRING - ID of the point Examples: //--- Activate existing module _myID = myModule call BIN_fnc_setPointOfInterest; //--- Mark POI as completed [_myID,true] call BIN_fnc_setPointOfInterest; //--- Set custom POI [\"myID\",false,position myObject,[50,50,0,false],\"Warning\",\"Red\"] call BIN_fnc_setPointOfInterest; //--- Set custom POI using default type and color [\"myID\",false,position myObject,[50,50,0,false]] call BIN_fnc_setPointOfInterest; */ #define VAR \"bin_POIs\" #define TASK_PRIORITY 2 #define REVEAL_DISTANCE 100 #define POS_DEFAULT [] #define AREA_DEFAULT [] #define TYPE_DEFAULT \"\" #define COLOR_DEFAULT \"\" #define STATUS_DEFAULT 0", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setRadioConversation": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setRadioHandshake": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setRadioSilence": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setRagdoll": {"version": "FNC", "tags": "", "description": "/* Input: 0: _unit [object] - Name of unit (works only with man type units) 1: _force [vector] - Amount of force that will be applied to colliding object 2: _position [string] (optional) - Name of selection from which it will try to calculate center point (default: spine1) Usage: [player,[0,100,0]] call BIN_fnc_setRagdoll - */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setSite": {"version": "FNC", "tags": "", "description": "#define DEBUG #define ALPHA_ON 1.0 #define ALPHA_OFF 0.4 #define DRAW(SHOW)\\ _color = [[1,0,0,1],[0,1,0,1],[0,0,1,1],[1,1,0,1],[1,0,1,1],[0,1,1,1],[1,0.5,0,1]] select ((_logic getvariable [\"#index\",0])\u00a0% 7);\\ if\u00a0!(SHOW) then {_color set [3,0.4];};\\ _drawIcon = [\"\\a3\\Ui_f\\data\\Map\\LocationTypes\\borderCrossing_CA.paa\",_color,position _logic,0.75,0.75,0,_class,2,0.04,\"RobotoCondensed\",\"right\"];\\ [\"bin_diagSites\",_class,\"icon\",[_drawIcon]] call BIN_fnc_debugDraw;\\ _isRectangle = false;\\ _drawArea = if (SHOW) then {\\ _areaOut = _logic getvariable [\"areaOut\",[position _logic,0,0,0,false]];\\ _isRectangle = _areaOut select 4;\\ [_areaOut select 0,_areaOut select 1,_areaOut select 2,_areaOut select 3,_color,\"\"]\\ } else {\\ _areaIn = _logic getvariable [\"areaIn\",[position _logic,0,0,0,false]];\\ _isRectangle = _areaIn select 4;\\ [_areaIn select 0,_areaIn select 1,_areaIn select 2,_areaIn select 3,_color,\"\"]\\ };\\ [\"bin_diagSites\",_class,if (_isRectangle) then {\"rectangle\"} else {\"ellipse\"},[_drawArea]] call BIN_fnc_debugDraw; #define VAR_IGNORE \"$i\" #define VAR_KILL \"$k\" #define VAR_VISITED \"$v\" #define VAR_SPAWNED \"#spawned\"", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setSpectrumAnalyzer": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setTargetWeight": {"version": "FNC", "tags": "", "description": "/* BIN_fnc_setTargetWeight Set target priroty which is used later by BIN_fnc_findTargetWeight function to find target. Input: 0: _input - Unit, vehicle, group or side. 1: _value - scalar above 0 - weight which is later used by selectRandomWeighted script command. Values equal or less than 0 are excluded from target selection Examples: [west,0] call BIN_fnc_setTargetWeight - all units from side \"west\" will be ignored by targeting system [player,10] call BIN_fnc_setTargetWeight - Increase player chance of being targeted by drone weapons [bis_car,0] call BIN_fnc_setTargetWeight - Vehicle & it is crew will be ignored by targeting system */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setTXScanAngle": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Sets TXScan angle Parameter(s): 0: STRING - scan name 1: NUMBER - cone angle Returns: BOOL - true on success Example: [\"MyScan\", 45] call BIN_fnc_setTXScanAngle */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setTXScanPolygon": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Pre-sets intersection polygon for given scan. Can only be done with newly created scans since once the first scan is made, the polygon cannot be overwritten Parameter(s): 0: STRING - TXScan name 1: ARRAY - polygon points Returns: BOOL - false on error Example: [\"MyScan\",[p1,p2,p3...]] call BIN_fnc_setTXScanPolygon */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setTXScanPosition": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Sets TXScan transmitter position Parameter(s): 0: STRING - scan name 1: ARRAY - transmitter position Returns: BOOL - true on success Example: [\"MyScan\", position player] call BIN_fnc_setTXScanPosition */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setTXScanPrecision": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Sets TXScan precision Parameter(s): 0: STRING - scan name 1: NUMBER - cone precision Returns: BOOL - true on success Example: [\"MyScan\", 0.1] call BIN_fnc_setTXScanPrecision */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_setTXScanWorldBounds": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Sets map bounds in which scans could be carried out. Default [0,0,worldSize,worldSize] Parameter(s): 0: NUMBER - minX 1: NUMBER - minY 2: NUMBER - maxX 3: NUMBER - maxY or [] to use config values or default Returns: BOOL - true on success Example: [0,0,worldSize,worldSize] call BIN_fnc_setTXScanWorldBounds [] call BIN_fnc_setTXScanWorldBounds */ // get user params", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showAntennaIcon": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showAntennaIcons": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showCurrentTask": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showHorizontalCompass": {"version": "FNC", "tags": "", "description": "/* Description: Show or hide horizontal compass Parameter(s): 0: BOOL - true to show, false to hide Returns: NOTHING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showMapOptions": {"version": "FNC", "tags": "", "description": "/* Description: Select which maps will be available Parameter(s): 0: NUMBER - mode, can be: 0 - all options available (default) 1 - probe map not available 2 - no options available (i.e., only main map is shown) Returns: NOTHING */ #define VAR \"BIN_fnc_showMapOptions_mode\" //--- Spawn to prevent disableSerialization affecting the script from which the function is called", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showPlayerSpectrumAnalyzer": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showSimpleNotification": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showSpectrumAnalyzer": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showSpectrumAnalyzerGUI": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showSpectrumAnalyzerMuzzle": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showSpectrumAnalyzerPiP": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_showVision": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_skip": {"version": "FNC", "tags": "", "description": "//#define TIME_SKIP 1.4 // Apex #define TIME_SKIP 0.5", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_soundDrone": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_switchMap": {"version": "FNC", "tags": "", "description": "//disableserialization;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_taskActive": {"version": "FNC", "tags": "", "description": "/* Description: Return if task is active, i.e., added to player, but not yet completed. Only in this state can player assign it. Parameter(s): 0: STRING - task ID Returns: BOOL Example: if (\"q_schnobble\" call BIN_fnc_taskActive) then {hint \"ACTIVE!\";}; */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_taskAdded": {"version": "FNC", "tags": "", "description": "/* Description: Return if task was added to player. Includes both finished and unfinished tasks. Parameter(s): 0: STRING - task ID Returns: BOOL Example: if (\"q_schnobble\" call BIN_fnc_taskAdded) then {hint \"ADDED!\";}; */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_terminatePuzzle": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_translationDone": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_travelToPoint": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_tvSaveExpanded": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_updateEM": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_updateGravityPulse": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_updateIDWMapDrawData": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Retrieves draw data for IDWMap and stores it in 'IDWMapDrawData' variable on map control for use in 'Draw' event handler. Should be called in scheduled environment to spread the load. Parameter(s): NONE Returns: BOOL - true on success if called from scheduled NOTHING - if called from unscheduled Example: call BIN_fnc_updateIDWMapDrawData */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_updatePlayerAntenna": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_updatePlayerInput": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_updatePlayerSpectrumAnalyzer": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_updatePlayerSpectrumAnalyzerSounds": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_updateSignalDurations": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_updateSpectrumAnalyzerInput": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_updateTXScanDrawData": {"version": "FNC", "tags": "", "description": "/* Killzone_Kid Description: Retrieves draw data for TXScan and updates drawing Parameter(s): 0: STRING - scan name, \"\" - all scans Returns: BOOL - true on success Example: \"myScan\" call BIN_fnc_updateTXScanDrawData \"\" call BIN_fnc_updateTXScanDrawData - all scans */ #define COLOR_DEFAULT [0,0,0,0.5], #define TEXTURE_DEFAULT \"\\A3\\ui_f\\data\\map\\markerbrushes\\fdiagonal_ca.paa\" #define ICON_DEFAULT [\"#(rgb,1,1,1)color(1,1,1,1)\",[0,0,0,0],[0,0,0],0,0,0]", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_vectorToEuler": {"version": "FNC", "tags": "", "description": "//#define NEW", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_wpAddScript": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_wpDroneMove": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_wpMoveFast": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIN_fnc_wpPatrol": {"version": "FNC", "tags": "", "description": "This content is exclusive to the Arma 3 Contact Expansion.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_3Dcredits": {"version": "FNC", "tags": "", "description": "Displays structured text in 3D world. GUI layer for indicator is 2733.", "example": "[\"<t size='2'>Hello World</t>\", getPosATL helloWorld, 15, 0] spawn BIS_fnc_3Dcredits;", "docSyntax": "[text, position, minDist, fadeDist] spawn BIS_fnc_3Dcredits", "syntax": "[<string>,position,minDist,fadeDist] spawn BIS_fnc_3Dcredits"}, "BIS_fnc_3den_init": {"version": "FNC", "tags": "", "description": "Used internally by the Arma 3 Key Frame Animation system. Adds needed event handlers.", "example": "-", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_3den_onKeyDown": {"version": "FNC", "tags": "", "description": "Used internally by the Arma 3 Key Frame Animation system. Called when a button is pressed.", "example": "findDisplay 313 displayAddEventHandler [\"keyDown\", { _this call BIS_fnc_3den_onKeyDown }];", "docSyntax": "[display, button, shift, ctrl, alt] call BIS_fnc_3den_onKeyDown", "syntax": "[<uiDisplay>,button,shift,<uiControl>,alt] call BIS_fnc_3den_onKeyDown"}, "BIS_fnc_3den_onKeyUp": {"version": "FNC", "tags": "", "description": "Used internally by the Arma 3 Key Frame Animation system. Called when a button is released.", "example": "findDisplay 313 displayAddEventHandler [\"keyUp\", {_this call BIS_fnc_3den_onKeyUp}];", "docSyntax": "[display, button, shift, ctrl, alt] call BIS_fnc_3den_onKeyUp", "syntax": "[<uiDisplay>,button,shift,<uiControl>,alt] call BIS_fnc_3den_onKeyUp"}, "BIS_fnc_3den_onMissionLoad": {"version": "FNC", "tags": "", "description": "Used internally by the Arma 3 Key Frame Animation system. Executed when a new mission is loaded.", "example": "-", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_3den_onMissionNew": {"version": "FNC", "tags": "", "description": "Used internally by the Arma 3 Key Frame Animation system. Executed when a new mission is created.", "example": "-", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_3den_onMissionPreviewEnd": {"version": "FNC", "tags": "", "description": "Used internally by the Arma 3 Key Frame Animation system. Executed when preview ended.", "example": "-", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_3den_onSelectionChange": {"version": "FNC", "tags": "", "description": "Used internally by the Arma 3 Key Frame Animation system.", "example": "-", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_3DENAttributeDoorStates": {"version": "FNC", "tags": "", "description": "Internal function used for the Eden Editor Edit Terrain Object module.", "example": "-", "docSyntax": "[] call BIS_fnc_3DENAttributeDoorStates", "syntax": "[] call BIS_fnc_3DENAttributeDoorStates"}, "BIS_fnc_3DENCamera": {"version": "FNC", "tags": "", "description": "Moves Eden's camera depending on one of two modes:", "example": "Move Eden's camera to the currently selected Eden entity", "docSyntax": "[mode] call BIS_fnc_3DENCamera", "syntax": "[mode] call BIS_fnc_3DENCamera"}, "BIS_fnc_3DENControlsHint": {"version": "FNC", "tags": "", "description": "Used by Eden to display control hints for the current Eden operation as seen in the bottom right corner of the Editor display.", "example": "[\"toggle\"] call BIS_fnc_3DENControlsHint; //\u00a0toggle Eden controls hints", "docSyntax": "[mode] call BIS_fnc_3DENControlsHint", "syntax": "[mode] call BIS_fnc_3DENControlsHint"}, "BIS_fnc_3DENDiagCreateList": {"version": "FNC", "tags": "", "description": "Copies all in Eden Editor available objects to the clipboard.", "example": "call BIS_fnc_3DENDiagCreateList;", "docSyntax": "class call BIS_fnc_3DENDiagCreateList", "syntax": "class call BIS_fnc_3DENDiagCreateList"}, "BIS_fnc_3DENDiagFonts": {"version": "FNC", "tags": "", "description": "This display is opened when the function is called in Eden.", "example": "2 call BIS_fnc_3DENDiagFonts;", "docSyntax": "fontID call BIS_fnc_3DENDiagFonts", "syntax": "fontID call BIS_fnc_3DENDiagFonts"}, "BIS_fnc_3DENDiagMouseControl": {"version": "FNC", "tags": "", "description": "Creates a display which highlights currently pressed mouse buttons and CTRL, ALT or SHIFT key.", "example": "call BIS_fnc_3DENDiagMouseControl;", "docSyntax": "call BIS_fnc_3DENDiagMouseControl", "syntax": "call BIS_fnc_3DENDiagMouseControl"}, "BIS_fnc_3DENDrawLocations": {"version": "FNC", "tags": "", "description": "Internal function used by Eden Editor to draw locations.", "example": "-", "docSyntax": "[] call BIS_fnc_3DENDrawLocations", "syntax": "[] call BIS_fnc_3DENDrawLocations"}, "BIS_fnc_3DENEntityMenu": {"version": "FNC", "tags": "", "description": "Excutes actions available in the entity menu (context menu).", "example": "[\"reset\"] call BIS_fnc_3DENEntityMenu;", "docSyntax": "[mode] call BIS_fnc_3DENEntityMenu", "syntax": "[mode] call BIS_fnc_3DENEntityMenu"}, "BIS_fnc_3DENExportAttributes": {"version": "FNC", "tags": "", "description": "Copies all available attributes to the clipboard.", "example": "\"trigger\" call BIS_fnc_3DENExportAttributes;", "docSyntax": "class call BIS_fnc_3DENExportAttributes", "syntax": "class call BIS_fnc_3DENExportAttributes"}, "BIS_fnc_3DENExportOldSQM": {"version": "FNC", "tags": "", "description": "Export current mission (usually in Eden Editor) in 2D Editor format to the clipboard.", "example": "See Debug Console", "docSyntax": "call BIS_fnc_3DENExportOldSQM", "syntax": "call BIS_fnc_3DENExportOldSQM"}, "BIS_fnc_3DENExportSQF": {"version": "FNC", "tags": "", "description": "Export 3DEN mission to SQF script. When called, the script will dynamically recreate the mission.", "example": "[true, false, [1337,1337,0], true] call BIS_fnc_3DENExportSQF;", "docSyntax": "[showWindow,exportLayers,center,checkBlacklist] call BIS_fnc_3DENExportSQF", "syntax": "[showWindow,exportLayers,center,checkBlacklist] call BIS_fnc_3DENExportSQF"}, "BIS_fnc_3DENExportTerrainBuilder": {"version": "FNC", "tags": "", "description": "Gets all empty vehicles placed in the currently opened Eden mission and converts data into the format used by the Terrain Builder.", "example": "call BIS_fnc_3DENExportTerrainBuilder;", "docSyntax": "call BIS_fnc_3DENExportTerrainBuilder", "syntax": "call BIS_fnc_3DENExportTerrainBuilder"}, "BIS_fnc_3DENFlashlight": {"version": "FNC", "tags": "", "description": "Toggle or set Eden Editor flashlight (light source snapped to the camera).", "example": "private _mode = 0 call BIS_fnc_3DENFlashlight;", "docSyntax": "mode call BIS_fnc_3DENFlashlight", "syntax": "mode call BIS_fnc_3DENFlashlight"}, "BIS_fnc_3DENGrid": {"version": "FNC", "tags": "", "description": "Handles action when grid button is pressed in the toolbar in Eden Editor.", "example": "-", "docSyntax": "[mode, input] call BIS_fnc_3DENGrid", "syntax": "[mode,input] call BIS_fnc_3DENGrid"}, "BIS_fnc_3DENIntel": {"version": "FNC", "tags": "", "description": "Is used to set the weather settings in Eden Editor. Internal use only.", "example": "-", "docSyntax": "[controlGroup, value] call BIS_fnc_3DENIntel", "syntax": "[controlGroup,<scalar>] call BIS_fnc_3DENIntel"}, "BIS_fnc_3DENInterface": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_3DENListLocations": {"version": "FNC", "tags": "", "description": "Used in the locations display in Eden Editor. Internal use only.", "example": "[\"init\"] call BIS_fnc_3DENListLocations;", "docSyntax": "[mode] call BIS_fnc_3DENListLocations", "syntax": "[mode] call BIS_fnc_3DENListLocations"}, "BIS_fnc_3DENMissionPreview": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_3DENMissionStats": {"version": "FNC", "tags": "", "description": "This functions does nothing.", "example": "-", "docSyntax": "call BIS_fnc_3DENMissionStats", "syntax": "call BIS_fnc_3DENMissionStats"}, "BIS_fnc_3DENModuleDescription": {"version": "FNC", "tags": "", "description": "Used to display module description in the attribute window.", "example": "-", "docSyntax": "[ctrl,cfg] call BIS_fnc_3DENModuleDescription", "syntax": "[<uiControl>,cfg] call BIS_fnc_3DENModuleDescription"}, "BIS_fnc_3DENNotification": {"version": "FNC", "tags": "", "description": "Shows notification banner with given text, animated or not, at the top of the screen in the Eden Editor.", "example": "[\"This is an animated notification\", 0] call BIS_fnc_3DENNotification;", "docSyntax": "[text, type, duration, animate] call BIS_fnc_3DENNotification", "syntax": "[<string>,type,duration,animate] call BIS_fnc_3DENNotification"}, "BIS_fnc_3DENShowMessage": {"version": "FNC", "tags": "", "description": "Shows a pop-up message. In order to skip any optional parameter in between other parameters, send nil as parameter.", "example": "[\"Message\",\"Title of the Message\"] call BIS_fnc_3DENShowMessage;", "docSyntax": "[text, title, buttonOK, buttonCancel, icon, parentDisplay] call BIS_fnc_3DENShowMessage", "syntax": "[<string>,title,buttonOK,buttonCancel,icon,parentDisplay] call BIS_fnc_3DENShowMessage"}, "BIS_fnc_3DENStatusBar": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_3DENToolbar": {"version": "FNC", "tags": "", "description": "Interacts with the Eden Editor toolbar", "example": "\"ToggleFlashlight\" call BIS_fnc_3DENToolbar;", "docSyntax": "[mode] call BIS_fnc_3DENToolbar", "syntax": "[mode] call BIS_fnc_3DENToolbar"}, "BIS_fnc_3DENTutorial": {"version": "FNC", "tags": "", "description": "Show tutorial in Eden Editor.", "example": "[[\"Editing\", \"Connecting\"], 0, false] call BIS_fnc_3DENTutorial;", "docSyntax": "[path, index, oneStep, display] call BIS_fnc_3DENTutorial", "syntax": "[path,<scalar>,oneStep,<uiDisplay>] call BIS_fnc_3DENTutorial"}, "BIS_fnc_3DENVisionMode": {"version": "FNC", "tags": "", "description": "Toggle or set Eden Editor vision mode. Has to be executed while Eden interface is opened.", "example": "private _mode = 0 call BIS_fnc_3DENVisionMode;", "docSyntax": "mode call BIS_fnc_3DENVisionMode", "syntax": "mode call BIS_fnc_3DENVisionMode"}, "BIS_fnc_AAN": {"version": "FNC", "tags": "", "description": "Add an AAN overlay to the screen, with one headline and a rolling text on the bottom.", "example": "[ parseText \"<t size='2'>AAN live in Takistan</t>\", parseText \"Weather coming up hot and steamy - Takistan shelled again from border area\" ] spawn BIS_fnc_AAN;", "docSyntax": "[headline, rollingText] spawn BIS_fnc_AAN", "syntax": "[headline,rollingText] spawn BIS_fnc_AAN"}, "BIS_fnc_absSpeed": {"version": "FNC", "tags": "", "description": "Returns absolute speed of a vehicle in kilometers per hour (km/h)", "example": "if (((vehicle player) call BIS_fnc_absSpeed) > 150) then { hint \"There goes my driver's license\u00a0:(\"; };", "docSyntax": "Object call BIS_fnc_absSpeed", "syntax": "<object> call BIS_fnc_absSpeed"}, "BIS_fnc_activateAddons": {"version": "FNC", "tags": "", "description": "Activate addons upon mission start. Doesn't work when the mission is already running.", "example": "[\"class_1\",\"class_2\"] call BIS_fnc_activateAddons;", "docSyntax": "[addons] call BIS_fnc_activateAddons", "syntax": "[addons] call BIS_fnc_activateAddons"}, "BIS_fnc_addClassOO": {"version": "FNC", "tags": "", "description": "Registering a class for the OO scripting shell.", "example": "\"someOOClass\" call BIS_fnc_addClassOO;", "docSyntax": "class call BIS_fnc_addClassOO", "syntax": "class call BIS_fnc_addClassOO"}, "BIS_fnc_addCommMenuItem": {"version": "FNC", "tags": "", "description": "Add communication menu to the given unit. The item will be available in the Communication menu and visualized in comm menu icon area.", "example": "private _supportHeli = [player,\"Support_Request_CAS_Heli\"] call BIS_fnc_addCommMenuItem; _supportHeli = [player,\"Support_Request_CAS_Heli\",nil,nil,\"\"] call BIS_fnc_addCommMenuItem; //\u00a0don't show notification", "docSyntax": "[owner, itemClass, textArguments, expressionArguments, notification] call BIS_fnc_addCommMenuItem", "syntax": "[owner,itemClass,textArguments,expressionArguments,notification] call BIS_fnc_addCommMenuItem"}, "BIS_fnc_addCuratorAreaFromTrigger": {"version": "FNC", "tags": "", "description": "Add curator editing / camera area based on triggers.", "example": "[BIS_curator, [trigger_1,trigger_2], [0,0,0], true, true, true] call BIS_fnc_addCuratorAreaFromTrigger;", "docSyntax": "[curatorLogic, triggers, checkedPosition, triggerType, editingArea, cameraArea] call BIS_fnc_addCuratorAreaFromTrigger", "syntax": "[curatorLogic,triggers,checkedPosition,triggerType,editingArea,cameraArea] call BIS_fnc_addCuratorAreaFromTrigger"}, "BIS_fnc_addCuratorChallenge": {"version": "FNC", "tags": "", "description": "/* Description: Add challenges for curator to complete Parameter(s): 0: OBJECT - curator 1 (Optional): ARRAY - list of supported challenges from CfgCuratorChallenges (default: all challenges) 2 (Optional): NUMBER - number of added challenges (default: 3) 3 (Optional): CODE - condition for challenges to remain active {default: true} 4 (optional): CODE or [CODE,STRING] - code executed upon completing all challenges and reward description Arguments passed to the code are: 0: OBJECT - curator 1: NUMBER - number of previously completed challenges by given curator 2: STRING - parent task ID 5 (Optional): STRING - parent task ID Returns: STRING - ID of parent task under which all challenge tasks are */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_addCuratorIcon": {"version": "FNC", "tags": "", "description": "Add an icon displayed in curator interface.", "example": "[curatorModule, [\"targetIcon.paa\", [1,1,1,1], position player, 1, 1, 45, \"Target\", 1, 0.05, \"TahomaB\"], false] call BIS_fnc_addCuratorIcon;", "docSyntax": "[object, iconParams, map, 3D] call BIS_fnc_addCuratorIcon", "syntax": "[<object>,iconParams,<objMap>,3D] call BIS_fnc_addCuratorIcon"}, "BIS_fnc_addEvidence": {"version": "FNC", "tags": "", "description": "/******************************************************************************* * * version: 1.0 * name: Add evidence * description: add an evidence value to global campaign variable * paramater: evidence variable name (defined in init.sqf of campaign mission C1) or simply number (scalar) * return value: none *", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_addRespawnInventory": {"version": "FNC", "tags": "", "description": "Add a respawn inventory for respawn menu.", "example": "[west, \"WEST1\"] call BIS_fnc_addRespawnInventory;", "docSyntax": "[target, inventoryParams] call BIS_fnc_addRespawnInventory", "syntax": "[<object>,inventoryParams] call BIS_fnc_addRespawnInventory"}, "BIS_fnc_addRespawnPosition": {"version": "FNC", "tags": "", "description": "Add a respawn position for the Arma 3 Respawn Menu.", "example": "[west, myRespawnAPC] call BIS_fnc_addRespawnPosition;", "docSyntax": "[target, position, name] call BIS_fnc_addRespawnPosition", "syntax": "[<object>,position,<string>] call BIS_fnc_addRespawnPosition"}, "BIS_fnc_addScore": {"version": "FNC", "tags": "", "description": "Adds a set amount of points to the score of a unit (MP only)", "example": "[player,20] call BIS_fnc_addScore;", "docSyntax": "[object, number] call BIS_fnc_addScore", "syntax": "[<object>,<scalar>] call BIS_fnc_addScore"}, "BIS_fnc_addScriptedEventHandler": {"version": "FNC", "tags": "", "description": "Adds a Scripted Event Handler and returns its ID. Additionally, the \"ScriptedEventHandlerAdded\" Scripted EH is called. For the full list of all available Scripted EHs see Arma 3: Scripted Event Handlers.", "example": "[missionNamespace, \"event\", { hint \"Hello World\" }] call BIS_fnc_addScriptedEventHandler;", "docSyntax": "[namespace, name, code] call BIS_fnc_addScriptedEventHandler", "syntax": "[namespace,<string>,<code>] call BIS_fnc_addScriptedEventHandler"}, "BIS_fnc_addStackedEventHandler": {"version": "FNC", "tags": "", "description": "\ud83d\udd56", "example": "[\"someId\", \"onEachFrame\", { hintSilent str time }] call BIS_fnc_addStackedEventHandler;", "docSyntax": "[id, event, code, arguments] call BIS_fnc_addStackedEventHandler", "syntax": "[<scalar>,event,<code>,arguments] call BIS_fnc_addStackedEventHandler"}, "BIS_fnc_addSupportLink": {"version": "FNC", "tags": "", "description": "Adds support types during a mission.", "example": "[player, BIS_requesterMod, BIS_providerMod] call BIS_fnc_addSupportLink;", "docSyntax": "[requesterUnit, requesterMod, providerMod] call BIS_fnc_addSupportLink", "syntax": "[requesterUnit,requesterMod,providerMod] call BIS_fnc_addSupportLink"}, "BIS_fnc_addToPairs": {"version": "FNC", "tags": "", "description": "Adds given value to pair array, stored under unique key.", "example": "[[[\"apple\",3],[\"pear\",2]],\"pear\",10] call BIS_fnc_addToPairs; //\u00a0Returns [[\"apple\",3],[\"pear\",12]]", "docSyntax": "[array, key, value, copyArray] call BIS_fnc_addToPairs", "syntax": "[<array>,key,<scalar>,copyArray] call BIS_fnc_addToPairs"}, "BIS_fnc_addVirtualBackpackCargo": {"version": "FNC", "tags": "", "description": "Add virtual backpacks to an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "[BIS_ammoBox, [\"class_1\",\"class_2\"], false, true] call BIS_fnc_addVirtualBackpackCargo;", "docSyntax": "[object,backpackClasses,addItemsGlobal,arsenal] call BIS_fnc_addVirtualBackpackCargo", "syntax": "[<object>,backpackClasses,addItemsGlobal,arsenal] call BIS_fnc_addVirtualBackpackCargo"}, "BIS_fnc_addVirtualItemCargo": {"version": "FNC", "tags": "", "description": "Add virtual items to an object (e.g., ammo box). Virtual items can be selected in the Arsenal. If parameters 4 and 5 are used this function can replace BIS_fnc_addVirtualWeaponCargo, BIS_fnc_addVirtualMagazineCargo and BIS_fnc_addVirtualBackpackCargo.", "example": "[BIS_ammoBox, [\"class_1\", \"class_2\"], false, true] call BIS_fnc_addVirtualItemCargo;", "docSyntax": "[object, itemClasses, addItemsGlobal, arsenal, mode, itemType] call BIS_fnc_addVirtualItemCargo", "syntax": "[<object>,itemClasses,addItemsGlobal,arsenal,mode,itemType] call BIS_fnc_addVirtualItemCargo"}, "BIS_fnc_addVirtualMagazineCargo": {"version": "FNC", "tags": "", "description": "Add virtual magazines to an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "[BIS_ammoBox, [\"class_1\",\"class_2\"], false, true] call BIS_fnc_addVirtualMagazineCargo;", "docSyntax": "[object,magClasses,addItemsGlobal,arsenal] call BIS_fnc_addVirtualMagazineCargo", "syntax": "[<object>,magClasses,addItemsGlobal,arsenal] call BIS_fnc_addVirtualMagazineCargo"}, "BIS_fnc_addVirtualWeaponCargo": {"version": "FNC", "tags": "", "description": "Add virtual weapons to an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "[BIS_ammoBox, [\"class_1\",\"class_2\"], false, true] call BIS_fnc_addVirtualWeaponCargo;", "docSyntax": "[object,weaponClasses,addItemsGlobal,arsenal] call BIS_fnc_addVirtualWeaponCargo", "syntax": "[<object>,weaponClasses,addItemsGlobal,arsenal] call BIS_fnc_addVirtualWeaponCargo"}, "BIS_fnc_addWeapon": {"version": "FNC", "tags": "", "description": "Adds a weapon to the specified unit, with magazine classnames taken from the weapon's config (in CfgWeapons). This function does not remove magazines nor weapons prior to adding the new weapon, so that still has to be done manually.", "example": "Add 6 dual-purpose magazines and the underwater gun to the player:", "docSyntax": "[unit, weaponClassName, quantity, type] call BIS_fnc_addWeapon", "syntax": "[<objUnit>,weaponClassName,quantity,type] call BIS_fnc_addWeapon"}, "BIS_fnc_adjustSimpleObject": {"version": "FNC", "tags": "", "description": "Adjust simple object vertical position, animations and selection according to provided data.", "example": "[myCar, [\"B_MyCar_F\", \"path\\to\\file.p3d\"]] call BIS_fnc_adjustSimpleObject;", "docSyntax": "[object, [class, model, reversed, verticalOffset, animAdjustments, selectionToHide]] call BIS_fnc_adjustSimpleObject", "syntax": "[<object>,[class,model,reversed,verticalOffset,animAdjustments,selectionToHide]] call BIS_fnc_adjustSimpleObject"}, "BIS_fnc_admin": {"version": "FNC", "tags": "", "description": "Returns the admin state of a client the function is called on. Complements admin script command and used for self check on a local client.", "example": "private _adminState = call BIS_fnc_admin;", "docSyntax": "call BIS_fnc_admin", "syntax": "call BIS_fnc_admin"}, "BIS_fnc_advHint": {"version": "FNC", "tags": "", "description": "Shows advanced hint to player.", "example": "[[\"Common\", \"GPS\"]] call BIS_fnc_advHint;", "docSyntax": "[classes, duration1, condition1, duration2, condition2, showing, onlyFullHint, onlyOnce, useSound] call BIS_fnc_advHint", "syntax": "[classes,duration1,condition1,duration2,condition2,showing,onlyFullHint,onlyOnce,useSound] call BIS_fnc_advHint"}, "BIS_fnc_advHintArg": {"version": "FNC", "tags": "", "description": "Advanced hint arguments preprocess.", "docSyntax": "[arguments, HTMLColour, hintClass] call BIS_fnc_advHintArg", "syntax": "[arguments,HTMLColour,hintClass] call BIS_fnc_advHintArg"}, "BIS_fnc_advHintCall": {"version": "FNC", "tags": "", "description": "Advanced hint call, creates hint itself.", "example": "false call BIS_fnc_advHintCall;", "docSyntax": "fullTextcall call BIS_fnc_advHintCall", "syntax": "fullTextcall call BIS_fnc_advHintCall"}, "BIS_fnc_advHintCredits": {"version": "FNC", "tags": "", "description": "Advanced hint credits preprocessor.", "example": "call BIS_fnc_advHintCredits;", "docSyntax": "call BIS_fnc_advHintCredits", "syntax": "call BIS_fnc_advHintCredits"}, "BIS_fnc_advHintFormat": {"version": "FNC", "tags": "", "description": "Return formatted texts of a CfgHints hint.", "example": "[\"Arma3\",\"Feedback\",\"\",[0.5,0.3,0.6,1]] call BIS_fnc_advHintFormat;", "docSyntax": "[topic,hint,subHint,colour] call BIS_fnc_advHintFormat", "syntax": "[topic,hint,subHint,colour] call BIS_fnc_advHintFormat"}, "BIS_fnc_aircraftCatapultLaunch": {"version": "FNC", "tags": "", "description": "Accelerates an aircraft off the aircraft carrier. For this to work the aircraft must be properly configured in config. See Arma 3: Aircraft Systems for information about needed config changes.", "example": "[_plane] call BIS_fnc_aircraftCatapultLaunch;", "docSyntax": "[aircraft, direction] call BIS_fnc_aircraftCatapultLaunch", "syntax": "[aircraft,direction] call BIS_fnc_aircraftCatapultLaunch"}, "BIS_fnc_aircraftFoldingWings": {"version": "FNC", "tags": "", "description": "Handles foldable wings of aircrafts. Is supposed to be used from within class Eventhandlers of the vehicle. See Arma 3: Aircraft Systems for information about needed config changes.", "example": "[_aircraft, 1] call BIS_fnc_aircraftFoldingWings;", "docSyntax": "[aircraft, animationState] call BIS_fnc_aircraftFoldingWings", "syntax": "[aircraft,animationState] call BIS_fnc_aircraftFoldingWings"}, "BIS_fnc_aircraftSystemsInit": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - Init function to invoke scripted features required for Jets DLC content. Exucution: - Call the function via int EH on each aircrfat config class Eventhandlers\u00a0: Eventhandlers { init = \"_this call BIS_fnc_AircraftSystemsInit\"; }; Requirments: - Compatible aircrfat must have a config definition for all sub-systems that will be invoked by this function example of cfgVehicles subclass definitions; class AircraftAutomatedSystems { wingStateControl = 1; //enable automated wing state control to prevent player to take off with folded wings wingFoldAnimations[] = {\"wing_fold_l\",\"wing_fold_r\",\"wing_fold_cover_l\", \"wing_fold_cover_r\"}; //foldable wing animation list wingStateFolded = 1; //animation state when folded wingStateUnFolded = 0; //animation state when un-folded wingAutoUnFoldSpeed = 40; //speed treshold when triger this feature, and unfold wings for player }; Parameter(s): _this select 0: mode (Scalar) 0: plane/object Returns: nothing Result: Aircrfat additional functionality added */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_aircraftTailhook": {"version": "FNC", "tags": "", "description": "Aircraft carrier arrest/recovery function for USS Freedom aircraft carrier. If the aircraft exceeds the speed defined in config a wire snap will be simulated.", "example": "[_aircraft] call BIS_fnc_aircraftTailhook;", "docSyntax": "[aircraft] call BIS_fnc_aircraftTailhook", "syntax": "[aircraft] call BIS_fnc_aircraftTailhook"}, "BIS_fnc_aircraftTailhookAi": {"version": "FNC", "tags": "", "description": "Handles landing on the aircraft carrier for AI and player autopilot.", "example": "-", "docSyntax": "[params, isLanding] call BIS_fnc_aircraftTailhookAi", "syntax": "[<any>,isLanding] call BIS_fnc_aircraftTailhookAi"}, "BIS_fnc_aircraftWingStateCheck": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This function is designed to prevent take off with folded wings on the Jets DLC aircraft that have such useraction/function enabled. Exucution: - Call the function via int EH on each aircrfat config class Eventhandlers\u00a0: Eventhandlers { init = \"_this call BIS_fnc_AircraftSystemsInit\"; }; Requirments: - Compatible aircrfat must have a config definition for all subsytems that will be invoked by this function example of cfgVehicles subclass definitions; class AircraftAutomatedSystems { wingStateControl = 1; //enable automated wing state control to prevent player to take off with folded wings wingFoldAnimations[] = {\"wing_fold_l\",\"wing_fold_r\",\"wing_fold_cover_l\", \"wing_fold_cover_r\"}; //foldable wing animation list wingStateFolded = 1; //animation state when folded wingStateUnFolded = 0; //animation state when un-folded wingAutoUnFoldSpeed = 40; //speed treshold when triger this feature, and unfold wings for player }; Parameter(s): _this select 0: mode (Scalar) 0: plane/object Returns: nothing Result: Aircrfat should not be able to take off/ fly with wings folded */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_alignTabs": {"version": "FNC", "tags": "", "description": "Align two columns divided by tabs. A tab counts for 8 characters.", "example": "[ [\"Player:\", str player], [\"Name:\", name player], [\"Type:\", typeOf player], [\"Location:\", str getPosATL player], [\"Direction:\", str getDir player] ] call BIS_fnc_alignTabs;", "docSyntax": "array call BIS_fnc_alignTabs", "syntax": "<array> call BIS_fnc_alignTabs"}, "BIS_fnc_allSynchronizedObjects": {"version": "FNC", "tags": "", "description": "Return all synchronized objects, including those synced to synced and so on.", "example": "[BIS_Poliakko,\"LocationArea_F\"] call BIS_fnc_allSynchronizedObjects;", "docSyntax": "[object, filter] call BIS_fnc_allSynchronizedObjects", "syntax": "[<object>,filter] call BIS_fnc_allSynchronizedObjects"}, "BIS_fnc_allTurrets": {"version": "FNC", "tags": "", "description": "Returns all vehicle turrets from config with options. Does what allTurrets command does, except the param is vehicle's config classname.", "example": "private _allTurrets = \"C_Offroad_01_F\" call BIS_fnc_allTurrets; //\u00a0[]", "docSyntax": "vehicleClass call BIS_fnc_allTurrets", "syntax": "vehicleClass call BIS_fnc_allTurrets"}, "BIS_fnc_ambientAnim": {"version": "FNC", "tags": "", "description": "Play set of ambient animations on given unit. If the unit should react to combat, use BIS_fnc_ambientAnimCombat instead.", "example": "[player, \"STAND1\", \"ASIS\"] call BIS_fnc_ambientAnim;", "docSyntax": "[unit, animationSet, equipmentLevel, snapTo, interpolate, attachToLogic] call BIS_fnc_ambientAnim", "syntax": "[<objUnit>,animationSet,equipmentLevel,snapTo,interpolate,attachToLogic] call BIS_fnc_ambientAnim"}, "BIS_fnc_ambientAnimCombat": {"version": "FNC", "tags": "", "description": "Play set of ambient animations on given unit AND allows the unit to leave the ambient state and engage enemy or move away.", "example": "[_unit, \"STAND\", \"FULL\", { (player distance _this) < 5 }] call BIS_fnc_ambientAnimCombat;", "docSyntax": "[unit, animationSet, equipmentLevel, condition, behaviour] call BIS_fnc_ambientAnimCombat", "syntax": "[<objUnit>,animationSet,equipmentLevel,condition,behaviour] call BIS_fnc_ambientAnimCombat"}, "BIS_fnc_ambientAnimGetParams": {"version": "FNC", "tags": "", "description": "Feeds params of given animset to BIS_fnc_ambientAnim.", "example": "private _animParams = \"KNEEL\" call BIS_fnc_ambientAnimGetParams;", "docSyntax": "animType call BIS_fnc_ambientAnimGetParams", "syntax": "animType call BIS_fnc_ambientAnimGetParams"}, "BIS_fnc_ambientBlacklist": {"version": "FNC", "tags": "", "description": "Check if area is blacklisted. Blacklist triggers are to be named 'bis_ambientBlacklist_#', where # is number from 0 to 99.", "example": "[1337,1337,0] call BIS_fnc_ambientBlacklist;", "docSyntax": "[input] call BIS_fnc_ambientBlacklist", "syntax": "[input] call BIS_fnc_ambientBlacklist"}, "BIS_fnc_ambientBlacklistAdd": {"version": "FNC", "tags": "", "description": "Add a new ambient blacklist trigger", "example": "[BIS_trigger] call BIS_fnc_ambientBlacklistAdd;", "docSyntax": "[trigger] call BIS_fnc_ambientBlacklistAdd", "syntax": "[<objTrigger>] call BIS_fnc_ambientBlacklistAdd"}, "BIS_fnc_ambientBoats": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_ambientFlyby": {"version": "FNC", "tags": "", "description": "Spawns an air unit that moves from point A to point B, never engaging nor being engaged. It is set as captive and will despawn once it reaches its destination.", "example": "//\u00a0spawns a Littlebird that flies from position 200,200,50 to 250,250,75 at altitude 100 and normal speed [[200,200,50], [250,250,75]] call BIS_fnc_ambientFlyby;", "docSyntax": "[startPos, endPos, altitude, speedMode, classname, side] call BIS_fnc_ambientFlyby", "syntax": "[startPos,endPos,<scalar>,speedMode,classname,<objSide>] call BIS_fnc_ambientFlyby"}, "BIS_fnc_ambientHelicopters": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_ambientPlanes": {"version": "FNC", "tags": "", "description": "Creates ambient airplanes fly-by near airports around the player. It will automatically get classes from configFile >> \"CfgVehicles\" on all planes that have \"ambientType\" attribute > 0.", "example": "[] call BIS_fnc_ambientPlanes;", "docSyntax": "[quantity, areaRadius, dirStep] call BIS_fnc_ambientPlanes", "syntax": "[quantity,areaRadius,dirStep] call BIS_fnc_ambientPlanes"}, "BIS_fnc_ambientPostprocess": {"version": "FNC", "tags": "", "description": "Initialize terrain-related postprocess effects.", "example": "[] call BIS_fnc_ambientPostprocess;", "docSyntax": "[terrain, activation] call BIS_fnc_ambientPostprocess", "syntax": "[terrain,activation] call BIS_fnc_ambientPostprocess"}, "BIS_fnc_animalBehaviour": {"version": "FNC", "tags": "", "description": "Animal behaviour control. Called by Animals_F\\Data\\Scripts\\main.fsm.", "example": "[animal] call BIS_fnc_animalBehaviour;", "docSyntax": "[animal] call BIS_fnc_animalBehaviour", "syntax": "[animal] call BIS_fnc_animalBehaviour"}, "BIS_fnc_animalRandomization": {"version": "FNC", "tags": "", "description": "Randomise animals skin.", "example": "myDog call BIS_fnc_animalRandomization;", "docSyntax": "animal call BIS_fnc_animalRandomization", "syntax": "animal call BIS_fnc_animalRandomization"}, "BIS_fnc_animalSiteSpawn": {"version": "FNC", "tags": "", "description": "Create an area that spawns animals. The animals will be created or deleted if a player is inside or outside the area's radius.", "example": "[player, [\"rabbit_f\", \"turtle_f\", \"hen_random_f\"], 200] call BIS_fnc_animalSiteSpawn;", "docSyntax": "[animalSite, classnamesToSpawn, radius] call BIS_fnc_animalSiteSpawn", "syntax": "[animalSite,classnamesToSpawn,radius] call BIS_fnc_animalSiteSpawn"}, "BIS_fnc_animatedBriefing": {"version": "FNC", "tags": "", "description": "Plays the Animated Briefings. Basically, it is a wrap function for the BIS_fnc_eventTimeline function.", "example": "//\u00a0timeline of events _timeline = [ [0.0, { hint \"Start of the Timeline\" }], [1.0, { hint \"Event 1\" }], [3.0, { hint \"End of the timeline\" }] ]; //\u00a0get markers to be shown at end by using the layer's name private _showMarkers = (getMissionLayerEntities \"showAtEnd\") select 1; //\u00a0start the Animated Briefing at index 0 //\u00a0hide all markers and show the markers from the \"showAtEnd\" layer after the briefing is done //\u00a0zoom on marker_rect_1 at the end of the briefing [_timeline, 0, nil, allMapMarkers, _showMarkers, \"marker_rect_1\"] spawn BIS_fnc_animatedBriefing; //\u00a0Wait until timeline is over waitUntil { !(missionNamespace getVariable \"BIS_fnc_eventTimeline_playing\"); };", "docSyntax": "[timeline, indexEvent, markersHide, markersShow, endPosition] call BIS_fnc_animatedBriefing", "syntax": "[timeline,indexEvent,markersHide,markersShow,endPosition] call BIS_fnc_animatedBriefing"}, "BIS_fnc_animatedOpening": {"version": "FNC", "tags": "", "description": "/* Author: BIS Description: Parameters: Returns: none */", "docSyntax": "[] call BIS_fnc_animatedOpening", "syntax": "[] call BIS_fnc_animatedOpening"}, "BIS_fnc_animatedScreen": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- Example: [_mode] call BIS_fnc_animatedScreen; --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_animatedScreen", "syntax": "[] call BIS_fnc_animatedScreen"}, "BIS_fnc_animateFlag": {"version": "FNC", "tags": "", "description": "Smoothly animates given flag from current position on the flag pole to the given position. When flag animation is done, the scripted event handler \"FlagAnimationDone\" is called.", "example": "[flag1, 0] call BIS_fnc_animateFlag;", "docSyntax": "[flag, phase, instant] call BIS_fnc_animateFlag", "syntax": "[<objFlag>,phase,instant] call BIS_fnc_animateFlag"}, "BIS_fnc_animatePicture": {"version": "FNC", "tags": "", "description": "Translates (relative or absolute), scales (relative or absolute), and sets the alpha over time on the provided control.", "example": "private _t = [ _controlFront, 1, [[0.5, 0.5], true, false], [], 0.5 ] call BIS_fnc_animatePicture;", "docSyntax": "[control, durationOrSpeed, [translationPosition, isRelativeTranslation, useDuration], [scalePosition, isRelativeScale, scalePivot], alpha] call BIS_fnc_animatePicture", "syntax": "[<uiControl>,durationOrSpeed,[translationPosition,isRelativeTranslation,useDuration],[scalePosition,isRelativeScale,scalePivot],alpha] call BIS_fnc_animatePicture"}, "BIS_fnc_animateTaskWaypoint": {"version": "FNC", "tags": "", "description": "Plays an animation that pushes the active task waypoint up and down.", "example": "[player] call BIS_fnc_animateTaskWaypoint;", "docSyntax": "param call BIS_fnc_animateTaskWaypoint", "syntax": "param call BIS_fnc_animateTaskWaypoint"}, "BIS_fnc_animType": {"version": "FNC", "tags": "", "description": "Function that returns a categorized array using a single string with the animation name.", "example": "animType = [\"AmovPsitMstpSrasWrflDnon\"] call BIS_fnc_animType; //\u00a0Returns [[\"Action\",\"Move\"],[\"Pose\",\"Sit\"],[\"Movement\",\"Stop\"],[\"Stance\",\"Raised\"],[\"Hand item\",\"Rifle\"],[\"Direction\",\"Not specified\"]]", "docSyntax": "param call BIS_fnc_animType", "syntax": "param call BIS_fnc_animType"}, "BIS_fnc_animViewer": {"version": "FNC", "tags": "", "description": "Opens the Splendid\u2122 Animation Viewer.", "example": "[] call BIS_fnc_animViewer;", "docSyntax": "[] call BIS_fnc_animViewer", "syntax": "[] call BIS_fnc_animViewer"}, "BIS_fnc_areEqual": {"version": "FNC", "tags": "", "description": "This function returns true if all of the passed data elements are of the same type and value. One or more elements can be passed.", "example": "[0, \"0\"] call BIS_fnc_areEqual; //\u00a0false [0, 1 + 1 - 2] call BIS_fnc_areEqual; //\u00a0true [str 50, \"50\"] call BIS_fnc_areEqual; //\u00a0true", "docSyntax": "[anything1, anything2, \u2026, anythingN] call BIS_fnc_areEqual", "syntax": "[anything1,anything2,\u2026,anythingN] call BIS_fnc_areEqual"}, "BIS_fnc_areEqualNotNil": {"version": "FNC", "tags": "", "description": "Compares all elements of passed array between each other and returns true is all are defined and identical.", "example": "[[1, 2, [3, [4, 5]]], [1, 2, [3, [4, 5]]]] call BIS_fnc_areEqualNotNil; //\u00a0true [[1, 2, [3, [4, nil]]], [1, 2, [3, [4, nil]]]] call BIS_fnc_areEqualNotNil; //\u00a0false", "docSyntax": "[anything1, anything2, \u2026] call BIS_fnc_areEqualNotNil", "syntax": "[anything1,anything2,\u2026] call BIS_fnc_areEqualNotNil"}, "BIS_fnc_areFriendly": {"version": "FNC", "tags": "", "description": "Function that takes two Sides and compares them, returning whether they are friendly or not.", "example": "private _areFriendly = [west, east] call BIS_fnc_areFriendly;", "docSyntax": "[side1, side2] call BIS_fnc_areFriendly", "syntax": "[side1,side2] call BIS_fnc_areFriendly"}, "BIS_fnc_arithmeticMean": {"version": "FNC", "tags": "", "description": "Returns the arithmetic mean (\"average value\") of an array of numbers.", "example": "[1, 3] call BIS_fnc_arithmeticMean; //\u00a0returns 2", "docSyntax": "numbers call BIS_fnc_arithmeticMean", "syntax": "numbers call BIS_fnc_arithmeticMean"}, "BIS_fnc_arrayCompare": {"version": "FNC", "tags": "", "description": "This function checks if two arrays are containing the same elements in the same order.", "example": "private _array1 = [0,1,2]; private _array2 = [0,1,2]; [_array1, _array2] call BIS_fnc_arrayCompare; //\u00a0returns true", "docSyntax": "[array1, array2] call BIS_fnc_arrayCompare", "syntax": "[array1,array2] call BIS_fnc_arrayCompare"}, "BIS_fnc_arrayFindDeep": {"version": "FNC", "tags": "", "description": "Searches an array for a specific value and returns its index.", "example": "[[1,2,3,4,5], 3] call BIS_fnc_arrayFindDeep;//Returns [2]", "docSyntax": "[array,value] call BIS_fnc_arrayFindDeep", "syntax": "[<array>,<scalar>] call BIS_fnc_arrayFindDeep"}, "BIS_fnc_arrayInsert": {"version": "FNC", "tags": "", "description": "Inserts the elements of one array into another, at a specified index. Neither arrays are touched by reference, a new array is returned.", "example": "private _result = [[0,1,2,3,4], [\"a\",\"b\",\"c\"], 1] call BIS_fnc_arrayInsert; //\u00a0returns [0,\"a\",\"b\",\"c\",1,2,3,4]", "docSyntax": "[array1, array2, index] call BIS_fnc_arrayInsert", "syntax": "[array1,array2,<scalar>] call BIS_fnc_arrayInsert"}, "BIS_fnc_arrayPop": {"version": "FNC", "tags": "", "description": "This function removes the last (rightmost) element of an array and returns it.", "example": "private _array = [1,2,3,4]; _removedElement = _array call BIS_fnc_arrayPop; //\u00a0_array is now [1,2,3] and _removedElement = 4", "docSyntax": "array call BIS_fnc_arrayPop", "syntax": "<array> call BIS_fnc_arrayPop"}, "BIS_fnc_arrayPush": {"version": "FNC", "tags": "", "description": "This function adds an element to the end of an array and returns the array.", "example": "_newArray = [[0,1,2], 3] call BIS_fnc_arrayPush; //\u00a0_newArray is [0,1,2,3]", "docSyntax": "[array, element] call BIS_fnc_arrayPush", "syntax": "[<array>,element] call BIS_fnc_arrayPush"}, "BIS_fnc_arrayPushStack": {"version": "FNC", "tags": "", "description": "This function is similar to the array push function; however, it pushes the contents of an array onto the stack array.", "example": "private _array = [0,1,2]; [_array, [3,4,5]] call BIS_fnc_arrayPushStack; //\u00a0_array is [0,1,2,3,4,5]", "docSyntax": "[array1, array2] call BIS_fnc_arrayPushStack", "syntax": "[array1,array2] call BIS_fnc_arrayPushStack"}, "BIS_fnc_arrayShift": {"version": "FNC", "tags": "", "description": "This function removes the first (leftmost) element of an array and returns it.", "example": "private _myArray = [\"2\", \"report\", \"status\"]; _removedElement = [_myArray] call BIS_fnc_arrayShift; //\u00a0array is -within an array- _removedElement == \"2\"; //\u00a0true _myArray isEqualTo [\"report\", \"status\"]; //\u00a0true", "docSyntax": "[array] call BIS_fnc_arrayShift", "syntax": "[<array>] call BIS_fnc_arrayShift"}, "BIS_fnc_arrayShuffle": {"version": "FNC", "tags": "", "description": "Return a new array with randomized order of elements from input array.", "example": "[1,2,3] call BIS_fnc_arrayShuffle; //\u00a0can return [1,2,3] (the original order), [3,1,2], [2,3,1], [1,3,2], [2,1,3] or [3,2,1]", "docSyntax": "array call BIS_fnc_arrayShuffle", "syntax": "<array> call BIS_fnc_arrayShuffle"}, "BIS_fnc_arrayUnShift": {"version": "FNC", "tags": "", "description": "This function adds an element to the beginning of an array and returns the array. The array is passed by reference so changes inside the function will be reflected outside of it.", "example": "private _array = [2,3,4]; [_array, 1] call BIS_fnc_arrayUnShift; //\u00a0_array is now [1,2,3,4]", "docSyntax": "[array, value] call BIS_fnc_arrayUnShift", "syntax": "[<array>,<scalar>] call BIS_fnc_arrayUnShift"}, "BIS_fnc_arsenal": {"version": "FNC", "tags": "", "description": "Function used for the Virtual Arsenal. The function features four different modes, each mode comes with its own parameters.", "example": "Opens Arsenal with all items:", "docSyntax": "[mode, params] call BIS_fnc_arsenal", "syntax": "[mode,<any>] call BIS_fnc_arsenal"}, "BIS_fnc_assignPlayerRole": {"version": "FNC", "tags": "", "description": "Ensures the player can only get in the specific vehicle role.", "example": "[myVehicle, \"turret\", [0, 1]] call BIS_fnc_assignPlayerRole;", "docSyntax": "[vehicle, role, path] call BIS_fnc_assignPlayerRole", "syntax": "[<objVehicle>,role,path] call BIS_fnc_assignPlayerRole"}, "BIS_fnc_attachToRelative": {"version": "FNC", "tags": "", "description": "Attaches object 1 to object 2, while preserving object 1 initial position and orientation against object 2.", "example": "[tank, car] call BIS_fnc_attachToRelative;", "docSyntax": "[object1, object2, visual] call BIS_fnc_attachToRelative", "syntax": "[object1,object2,visual] call BIS_fnc_attachToRelative"}, "BIS_fnc_baseVehicle": {"version": "FNC", "tags": "", "description": "Returns base vehicle (i.e., vehicle which is not just derivative of other with different textures / animations).", "example": "[\"O_MBT_04_cannon_F\"] call BIS_fnc_baseVehicle;", "docSyntax": "class call BIS_fnc_baseVehicle", "syntax": "class call BIS_fnc_baseVehicle"}, "BIS_fnc_baseWeapon": {"version": "FNC", "tags": "", "description": "Determines base weapon class, with no attachments.", "example": "[\"arifle_Mk20_MRCO_pointer_F\"] call BIS_fnc_baseWeapon; //\u00a0Returns \"arifle_Mk20_F\"", "docSyntax": "[weaponName] call BIS_fnc_baseWeapon", "syntax": "[weaponName] call BIS_fnc_baseWeapon"}, "BIS_fnc_basicBackpack": {"version": "FNC", "tags": "", "description": "Determines basic backpack with no equipment present (ie empty).", "example": "baseBackpack = \"b_assaultpack_rgr_medic\" call BIS_fnc_basicBackpack; //\u00a0returns \"b_assaultpack_rgr\", the base class", "docSyntax": "backPackClassName call BIS_fnc_basicBackpack", "syntax": "backPackClassName call BIS_fnc_basicBackpack"}, "BIS_fnc_basicTask": {"version": "FNC", "tags": "", "description": "Internally used .fsm.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_berp": {"version": "FNC", "tags": "", "description": "Derivative of the Kelvin function ber.", "example": "private _value = [0, 1, 0.5] call BIS_fnc_berp;", "docSyntax": "[a, b, delta] call BIS_fnc_berp", "syntax": "[a,b,delta] call BIS_fnc_berp"}, "BIS_fnc_berpVector": {"version": "FNC", "tags": "", "description": "Wrapper for BIS_fnc_berp applying to each respective element of current and target vectors.", "example": "private _vector = [[1,2,3], [11,12,13], 0.1] call BIS_fnc_berpVector;", "docSyntax": "[a, b, delta] call BIS_fnc_berpVector", "syntax": "[a,b,delta] call BIS_fnc_berpVector"}, "BIS_fnc_bezierInterpolate": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_bezierInterpolate", "syntax": "[] call BIS_fnc_bezierInterpolate"}, "BIS_fnc_bezierInterpolateVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_bezierInterpolateVector", "syntax": "[] call BIS_fnc_bezierInterpolateVector"}, "BIS_fnc_bezierLength": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_bezierLength", "syntax": "[] call BIS_fnc_bezierLength"}, "BIS_fnc_bitflagsCheck": {"version": "FNC", "tags": "", "description": "Checks if one or more flags are set in the given flagset, represented with decimal or hexadecimal number", "example": "[2 + 4 + 8, 8] call BIS_fnc_bitflagsCheck; //\u00a0true [2 + 4 + 8, 2 + 32] call BIS_fnc_bitflagsCheck; //\u00a0true [2 + 4 + 8, 1] call BIS_fnc_bitflagsCheck; //\u00a0false [2 + 4 + 8, 1 + 32] call BIS_fnc_bitflagsCheck; //\u00a0false", "docSyntax": "[flagset, flag] call BIS_fnc_bitflagsCheck", "syntax": "[flagset,<objFlag>] call BIS_fnc_bitflagsCheck"}, "BIS_fnc_bitflagsFlip": {"version": "FNC", "tags": "", "description": "Flips one or more flags (set gets unset and vice versa) in the given flagset, represented with decimal or hexadecimal number", "example": "[1 + 16, 8] call BIS_fnc_bitflagsFlip; //\u00a025 (which is 1 + 8 + 16) [25, 8] call BIS_fnc_bitflagsFlip; //\u00a017 (which is 1 + 16) [2 + 4 + 8, 2 + 8] call BIS_fnc_bitflagsFlip; //\u00a04 [4, 2 + 8] call BIS_fnc_bitflagsFlip; //\u00a014 (which is 2 + 4 + 8)", "docSyntax": "[flagset, flag] call BIS_fnc_bitflagsFlip", "syntax": "[flagset,<objFlag>] call BIS_fnc_bitflagsFlip"}, "BIS_fnc_bitflagsSet": {"version": "FNC", "tags": "", "description": "Sets one or more flags in the given flagset, represented with decimal or hexadecimal number", "example": "[0, 16] call BIS_fnc_bitflagsSet; //\u00a016 [16, 2] call BIS_fnc_bitflagsSet; //\u00a018 (which is 2 + 16) [18, 2 + 8 + 16] call BIS_fnc_bitflagsSet; //\u00a026 (which is 2 + 8 + 16)", "docSyntax": "[flagset, flag] call BIS_fnc_bitflagsSet", "syntax": "[flagset,<objFlag>] call BIS_fnc_bitflagsSet"}, "BIS_fnc_bitflagsToArray": {"version": "FNC", "tags": "", "description": "Returns array with all bit flags which are set in the given flagset", "example": "15 call BIS_fnc_bitflagsToArray; //\u00a0[1,2,4,8] 2342 call BIS_fnc_bitflagsToArray; //\u00a0[2,4,32,256,2048] [2 + 4 + 8] call BIS_fnc_bitflagsToArray; //\u00a0[2,4,8] [2 + 2 + 2 + 4 + 8 + 8 + 8] call BIS_fnc_bitflagsToArray; //\u00a0[2,32]", "docSyntax": "flagset call BIS_fnc_bitflagsToArray", "syntax": "flagset call BIS_fnc_bitflagsToArray"}, "BIS_fnc_bitflagsUnset": {"version": "FNC", "tags": "", "description": "Unsets one or more flags in the given flagset, represented with decimal or hexadecimal number", "example": "[2 + 4 + 8, 8] call BIS_fnc_bitflagsUnset; //\u00a06 (which is 2 + 4) [2 + 4 + 8, 2 + 8] call BIS_fnc_bitflagsUnset; //\u00a04 [2 + 4 + 8, 1 + 8] call BIS_fnc_bitflagsUnset; //\u00a06 (which is 2 + 4) [2 + 4 + 8, 1 + 8 + 8 + 2 + 2] call BIS_fnc_bitflagsUnset; //\u00a010 (which is 2 + 8, since 1 + 8 + 8 + 2 + 2 is in fact 1 + 4 + 16)", "docSyntax": "[flagset, flag] call BIS_fnc_bitflagsUnset", "syntax": "[flagset,<objFlag>] call BIS_fnc_bitflagsUnset"}, "BIS_fnc_bitwiseAND": {"version": "FNC", "tags": "", "description": "Performs bitwise AND operation on two decimal or hexadecimal unsigned 24 bit integers", "example": "[2 + 4 + 8 + 32, 1] call BIS_fnc_bitwiseAND; //\u00a00 [2 + 4 + 8 + 32, 2] call BIS_fnc_bitwiseAND; //\u00a02 [1 + 2 + 16 + 32, 4 + 8] call BIS_fnc_bitwiseAND; //\u00a00 [1 + 2 + 16 + 32, 4 + 32] call BIS_fnc_bitwiseAND; //\u00a032 [1 + 2 + 16 + 32, 16 + 32] call BIS_fnc_bitwiseAND; //\u00a048", "docSyntax": "[num1, num2] call BIS_fnc_bitwiseAND", "syntax": "[num1,num2] call BIS_fnc_bitwiseAND"}, "BIS_fnc_bitwiseNOT": {"version": "FNC", "tags": "", "description": "Performs bitwise NOT operation on decimal or hexadecimal unsigned 24 bit integer", "example": "873687 call BIS_fnc_bitwiseNOT; //\u00a015903528 [2 + 4 + 8 + 32 + 256 + 1024] call BIS_fnc_bitwiseNOT; //\u00a016775889", "docSyntax": "num call BIS_fnc_bitwiseNOT", "syntax": "num call BIS_fnc_bitwiseNOT"}, "BIS_fnc_bitwiseOR": {"version": "FNC", "tags": "", "description": "Performs bitwise OR operation on two decimal or hexadecimal unsigned 24 bit integers", "example": "[2 + 4 + 8 + 32, 1] call BIS_fnc_bitwiseOR; //\u00a047 [1 + 2 + 16 + 32, 4 + 8] call BIS_fnc_bitwiseOR; //\u00a063 [1 + 2 + 16 + 32, 4 + 32] call BIS_fnc_bitwiseOR; //\u00a055 [1 + 2 + 16 + 32, 16 + 32] call BIS_fnc_bitwiseOR; //\u00a051", "docSyntax": "[num1, num2] call BIS_fnc_bitwiseOR", "syntax": "[num1,num2] call BIS_fnc_bitwiseOR"}, "BIS_fnc_bitwiseXOR": {"version": "FNC", "tags": "", "description": "Performs bitwise XOR operation on two decimal or hexadecimal unsigned 24 bit integers", "example": "[1 + 4 + 16, 1] call BIS_fnc_bitwiseXOR; //\u00a020 [1 + 2 + 32, 4 + 8] call BIS_fnc_bitwiseXOR; //\u00a047 [16 + 32, 4 + 16] call BIS_fnc_bitwiseXOR; //\u00a036 [1 + 16 + 32, 2 + 32] call BIS_fnc_bitwiseXOR; //\u00a019", "docSyntax": "[num1, num2] call BIS_fnc_bitwiseXOR", "syntax": "[num1,num2] call BIS_fnc_bitwiseXOR"}, "BIS_fnc_blackIn": {"version": "FNC", "tags": "", "description": "Unregister a black screen. When none other black screen is registered, fade it out.", "example": "[\"TAG_aVeryUniqueID\", false, 5] call BIS_fnc_blackIn;", "docSyntax": "[id, smoothing, fadeSpeed] call BIS_fnc_blackIn", "syntax": "[<scalar>,smoothing,fadeSpeed] call BIS_fnc_blackIn"}, "BIS_fnc_blackOut": {"version": "FNC", "tags": "", "description": "Register a black screen. Start the black screen when the first request is registered.", "example": "[\"TAG_aVeryUniqueID\", false, 5] call BIS_fnc_blackOut;", "docSyntax": "[id, smoothing, fadeSpeed] call BIS_fnc_blackOut", "syntax": "[<scalar>,smoothing,fadeSpeed] call BIS_fnc_blackOut"}, "BIS_fnc_bleedTickets": {"version": "FNC", "tags": "", "description": "Function that handles bleeding ticket system. Tickets are set beforehand using BIS_fnc_respawnTickets.", "example": "call BIS_fnc_bleedTickets;", "docSyntax": "[sides, dominanceRatio, bleedingAmount, bleedingDelay] call BIS_fnc_bleedTickets", "syntax": "[sides,dominanceRatio,bleedingAmount,bleedingDelay] call BIS_fnc_bleedTickets"}, "BIS_fnc_blinkMarker": {"version": "FNC", "tags": "", "description": "Makes given marker blink.", "example": "[\"BIS_marker\", 3, 10] spawn BIS_fnc_blinkMarker; //\u00a0blinks 10 times using 3 seconds intervals", "docSyntax": "[marker, blinkDuration, blinkAmount] spawn BIS_fnc_blinkMarker", "syntax": "[marker,blinkDuration,blinkAmount] spawn BIS_fnc_blinkMarker"}, "BIS_fnc_bloodEffect": {"version": "FNC", "tags": "", "description": "Adds the bleeding effect post-processing effect to the players screen.", "example": "[10] call BIS_fnc_bloodEffect; //\u00a0Adds the blood effect for 10 (milli)seconds.", "docSyntax": "[10] call BIS_fnc_bloodEffect", "syntax": "[10] call BIS_fnc_bloodEffect"}, "BIS_fnc_boatRack01ActionAdd": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is sub function for 'boat recovery' functionality. Execution: - Call from trigger that is added to object (boat rack). Example: \"[thisTrigger,thisList] call BIS_fnc_boatRack01ActionAdd;\" Required: Object (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport). Object (boat rack) must have triggers set up with continuous actions. Parameter(s): _this select 0: mode (Scalar) 0: trigger object and other parameters from trigger's & players vehicle's names-pace's. Returns: nothing Result: Continuous action added for players vehicle. */", "docSyntax": "[] call BIS_fnc_boatRack01ActionAdd", "syntax": "[] call BIS_fnc_boatRack01ActionAdd"}, "BIS_fnc_BoatRack01ActionCondition": {"version": "FNC", "tags": "", "description": "This article is a Stub. You can help BI Community Wiki by expanding it.", "docSyntax": "BIS_fnc_BoatRack01ActionCondition", "syntax": "BIS_fnc_BoatRack01ActionCondition"}, "BIS_fnc_boatRack01ActionRemove": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is sub function for 'boat recovery' functionality. Execution: - Call from trigger that is added to object (boat rack). Example: \"[thisTrigger] call BIS_fnc_boatRack01ActionRemove;\" Required: Object (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport). Object (boat rack) must have triggers set up with continuous actions. Parameter(s): _this select 0: mode (Scalar) 0: trigger object and other parameters from trigger's & players vehicle's names-pace's. Returns: nothing Result: Continuous action removed from player. */", "docSyntax": "[] call BIS_fnc_boatRack01ActionRemove", "syntax": "[] call BIS_fnc_boatRack01ActionRemove"}, "BIS_fnc_boatRack01AdjustZOffset": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is sub function for 'boat recovery' functionality. Execution: - Call from Init EH script that is added to object (boat rack) or from action code. Example: [_boatRack, _boat] call BIS_fnc_boatRack01AdjustZOffset; Required: Object (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport). Object (boat rack) must have triggers set up with continuous actions. Object (boat rack) must have set of Z offset's predefined in cfgVehicles for know/supported boat types. Parameters used from cfgVehicles configuration: cargoBayAnimationSelection = \"CargoBay_Move_Z\"; supportedVehicleOffsetsZ[] = {{\"C_Boat_Civil_01_F\",0.55}}; Parameter(s): _this select 0: mode (Scalar) 0: boat rack object 1: boat in cargo and other parameters from boat rack's cfgVehicles configuration. Returns: nothing Result: Adjusts the hight (Z offset) of boat rack suspension to prevent different boats clipping with visual mesh. */", "docSyntax": "[] call BIS_fnc_boatRack01AdjustZOffset", "syntax": "[] call BIS_fnc_boatRack01AdjustZOffset"}, "BIS_fnc_boatRack01CanExetuteAction": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is sub function for 'boat recovery' functionality. Execution: - Call from script that invokes the \"Hold Action\" for boat recovery. Example: [_target,_boatRack] call BIS_fnc_boatRack01CanExetuteAction; Required: Object (boat) Object (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport). Parameter(s): _this select 0: mode (Scalar) 0: Object (boat) 1: Object (boat rack) Returns: true if all conditions are met to display the \"Hold Action\" Result: Check to show \"Hold Action\" to player. */", "docSyntax": "[] call BIS_fnc_boatRack01CanExetuteAction", "syntax": "[] call BIS_fnc_boatRack01CanExetuteAction"}, "BIS_fnc_boatRack01CanProgressAction": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is sub function for 'boat recovery' functionality. Execution: - Call from script that invokes the \"Hold Action\" for boat recovery. Example: [_target,_boatRack] call BIS_fnc_boatRack01CanProgressAction; Required: Object (boat) Object (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport). Parameter(s): _this select 0: mode (Scalar) 0: Object (boat) 1: Object (boat rack) Returns: true if all conditions are met during the process of \"Hold Action\", can continue with action Result: Check to allow continue with \"Hold Action\". */", "docSyntax": "[] call BIS_fnc_boatRack01CanProgressAction", "syntax": "[] call BIS_fnc_boatRack01CanProgressAction"}, "BIS_fnc_boatRack01Init": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is main function for 'boat recovery' functionality. Execution: - Call from assets init EH. Example: class Eventhandlers { init = \"_this call BIS_fnc_BoatRack01Init;\"; }; Required: Object (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport). Parameter(s): _this select 0: mode (Scalar) 0: boat rack object and other parameters from configuration Returns: nothing Result: Two triggers are added near object to allow user to interact with feature. */", "docSyntax": "[] call BIS_fnc_boatRack01Init", "syntax": "[] call BIS_fnc_boatRack01Init"}, "BIS_fnc_boatRack01InitAdjustZOffsets": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is sub function for 'boat recovery' functionality. Execution: - Call from Init EH script that is added to object (boat rack). Example: [_boatRack] spawn BIS_fnc_boatRack01InitAdjustZOffsets; Required: Object (boat rack) must have vehicle in vehicle behavior configured (https://community.bistudio.com/wiki/Arma_3_Vehicle_in_Vehicle_Transport). Object (boat rack) must have triggers set up with continuous actions. Object (boat rack) must have set of Z offset's predefined in cfgVehicles for know/supported boat types. Parameters used from cfgVehicles configuration: cargoBayAnimationSelection = \"CargoBay_Move_Z\"; supportedVehicleOffsetsZ[] = {{\"C_Boat_Civil_01_F\",0.55}}; Parameter(s): _this select 0: mode (Scalar) 0: boat rack object and other parameters from boat rack's cfgVehicles configuration. Returns: nothing Result: On mission startup adjusts the hight (Z offset) of boat rack suspension to prevent different boats clipping with visual mesh. */", "docSyntax": "[] call BIS_fnc_boatRack01InitAdjustZOffsets", "syntax": "[] call BIS_fnc_boatRack01InitAdjustZOffsets"}, "BIS_fnc_bounceIn": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_bounceIn", "syntax": "[] call BIS_fnc_bounceIn"}, "BIS_fnc_bounceInOut": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_bounceInOut", "syntax": "[] call BIS_fnc_bounceInOut"}, "BIS_fnc_bounceInOutVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_bounceInOutVector", "syntax": "[] call BIS_fnc_bounceInOutVector"}, "BIS_fnc_bounceInVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_bounceInVector", "syntax": "[] call BIS_fnc_bounceInVector"}, "BIS_fnc_bounceOut": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_bounceOut", "syntax": "[] call BIS_fnc_bounceOut"}, "BIS_fnc_bounceOutVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_bounceOutVector", "syntax": "[] call BIS_fnc_bounceOutVector"}, "BIS_fnc_boundingBoxCorner": {"version": "FNC", "tags": "", "description": "/* Description: Returns position of all four bounding box corners OR Returns position of the nearest corner to the given position Parameter(s): _this: OBJECT - object with bounding box OR _this: ARRAY in format: 0: OBJECT - object with bounding box 1: ARRAY or OBJECT - position for which the nearest corner is returned Returns: ARRAY in format [pos1, pos2, pos3, pos4] - 4 corners of the bounding box OR ARRAY in format [x,y,z] - position of the nearest corner Example 1: _corners = car call BIS_fnc_boundingBoxCorner; Example 2: _nearestCorner = [car, player] call BIS_fnc_boundingBoxCorner; */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_boundingBoxDimensions": {"version": "FNC", "tags": "", "description": "Returns the sizes of the three dimensions of an object's bounding box.", "example": "player call BIS_fnc_boundingBoxDimensions;//Returns [1.6,2.2,2] for soldier", "docSyntax": "object call BIS_fnc_boundingBoxDimensions", "syntax": "<object> call BIS_fnc_boundingBoxDimensions"}, "BIS_fnc_boundingBoxMarker": {"version": "FNC", "tags": "", "description": "Creates marker on object with size of objects' bounding box.", "example": "BIS_Vehicle call BIS_fnc_boundingBoxMarker;", "docSyntax": "object call BIS_fnc_boundingBoxMarker", "syntax": "<object> call BIS_fnc_boundingBoxMarker"}, "BIS_fnc_boundingCircle": {"version": "FNC", "tags": "", "description": "Returns size of bounding circle (calculated from X and Y coordinates). This is actually the 2D horizontal diagonal length of the boundingBox.", "example": "vehicle player call BIS_fnc_boundingCircle;", "docSyntax": "object call BIS_fnc_boundingCircle", "syntax": "<object> call BIS_fnc_boundingCircle"}, "BIS_fnc_briefingAnimate": {"version": "FNC", "tags": "", "description": "Animate briefing markers.", "example": "//\u00a0given you have 6 markers: //\u00a0- \"myMarker\" //\u00a0- \"myMarker_0\" //\u00a0- \"myMarker_1\" //\u00a0- \"myMarker_2\" //\u00a0- \"myMarker_3\" //\u00a0- \"myMarker_4\" for \"_i\" from 0 to 4 do { private _commit = 1; [\"myMarker\", 5, _commit] call BIS_fnc_briefingAnimate; sleep _commit; };", "docSyntax": "[markerName, stepId, delay] call BIS_fnc_briefingAnimate", "syntax": "[<string>,stepId,<scalar>] call BIS_fnc_briefingAnimate"}, "BIS_fnc_briefingInit": {"version": "FNC", "tags": "", "description": "Initialize animated briefing markers.", "example": "\"marker_1\" call BIS_fnc_briefingInit;", "docSyntax": "marker call BIS_fnc_briefingInit", "syntax": "marker call BIS_fnc_briefingInit"}, "BIS_fnc_buildingPositions": {"version": "FNC", "tags": "", "description": "Get all available positions within a building or structure.", "example": "[_building] call BIS_fnc_buildingPositions;", "docSyntax": "param call BIS_fnc_buildingPositions", "syntax": "param call BIS_fnc_buildingPositions"}, "BIS_fnc_calculateDateTime": {"version": "FNC", "tags": "", "description": "Returns the end datetime if an offset is passed, or the offset between start and end dates.", "example": "[date, 3600] call BIS_fnc_calculateDateTime; //\u00a0returns date in 3600 seconds (60min, 1h) [date, 60, \"m\"] call BIS_fnc_calculateDateTime; //\u00a0returns date in 60 minutes (1h) [[2035,8,28,11,55], [2035,8,29,11,55], \"h\"] call BIS_fnc_calculateDateTime; //\u00a0returns 24", "docSyntax": "[startDate, endDateOrOffset, timeUnit] call BIS_fnc_calculateDateTime", "syntax": "[startDate,endDateOrOffset,timeUnit] call BIS_fnc_calculateDateTime"}, "BIS_fnc_call": {"version": "FNC", "tags": "", "description": "Execute given code with or without parameter.", "example": "Show a message for the current player.", "docSyntax": "[params, code] call BIS_fnc_call", "syntax": "[<any>,<code>] call BIS_fnc_call"}, "BIS_fnc_callScriptedEventHandler": {"version": "FNC", "tags": "", "description": "Calls all the codes assigned to scripted event handler with given name. Since 1.68 the code receives current EH id in the special variable: _thisScriptedEventHandler", "example": "[missionNamespace, \"event\", [player, 123]] call BIS_fnc_callScriptedEventHandler;", "docSyntax": "[namespace, name, arguments, returnResults] call BIS_fnc_callScriptedEventHandler", "syntax": "[namespace,<string>,arguments,returnResults] call BIS_fnc_callScriptedEventHandler"}, "BIS_fnc_camera": {"version": "FNC", "tags": "", "description": "Splendid\u2122 Camera, \"Ultimate Screenshot Simulator\"", "example": "[] call BIS_fnc_camera;", "docSyntax": "[mode, parameter] call BIS_fnc_camera", "syntax": "[mode,parameter] call BIS_fnc_camera"}, "BIS_fnc_camera_deleted": {"version": "FNC", "tags": "", "description": "Deletes given camera.", "example": "[BIS_camera] call BIS_fnc_camera_deleted;", "docSyntax": "[camera] call BIS_fnc_camera_deleted", "syntax": "[<objCamera>] call BIS_fnc_camera_deleted"}, "BIS_fnc_camera_edenAttributesChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Attributes change in EDEN for a camera Parameter(s): _this select 0: Object - The camera Returns: Nothing */", "docSyntax": "[] call BIS_fnc_camera_edenAttributesChanged", "syntax": "[] call BIS_fnc_camera_edenAttributesChanged"}, "BIS_fnc_camera_edenConnectionChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: 3DEN connections of a camera are changed Parameter(s): _this select 0: Object - The camera Returns: Nothing */", "docSyntax": "[] call BIS_fnc_camera_edenConnectionChanged", "syntax": "[] call BIS_fnc_camera_edenConnectionChanged"}, "BIS_fnc_camera_edenDeleted": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Camera is deleted Parameter(s): _this select 0: Object - The destroyed camera Returns: Nothing */", "docSyntax": "[] call BIS_fnc_camera_edenDeleted", "syntax": "[] call BIS_fnc_camera_edenDeleted"}, "BIS_fnc_camera_edenInit": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Camera is initialized in 3den Parameter(s): _this select 0: Object - The camera Returns: Nothing */", "docSyntax": "[] call BIS_fnc_camera_edenInit", "syntax": "[] call BIS_fnc_camera_edenInit"}, "BIS_fnc_camera_edenIsSelected": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Whether this camera is selected in 3den Parameter(s): _this select 0: Object - The camera Returns: Bool - True if selected, false if not */", "docSyntax": "[] call BIS_fnc_camera_edenIsSelected", "syntax": "[] call BIS_fnc_camera_edenIsSelected"}, "BIS_fnc_camera_edenRegisteredToWorld": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_camera_edenRegisteredToWorld", "syntax": "[] call BIS_fnc_camera_edenRegisteredToWorld"}, "BIS_fnc_camera_edenReset": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Resets camera in 3DEN Parameter(s): _this select 0: Object - The camera Returns: Nothing */", "docSyntax": "[] call BIS_fnc_camera_edenReset", "syntax": "[] call BIS_fnc_camera_edenReset"}, "BIS_fnc_camera_edenSelectionChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: The selection state of given camera changes Parameter(s): _this select 0: Object - The camera _this select 1: Bool - True if selected, false if not Returns: Nothing */", "docSyntax": "[] call BIS_fnc_camera_edenSelectionChanged", "syntax": "[] call BIS_fnc_camera_edenSelectionChanged"}, "BIS_fnc_camera_edenUnregisteredFromWorld": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Attributes change in EDEN for a camera Parameter(s): _this select 0: Object - The camera Returns: Nothing */", "docSyntax": "[] call BIS_fnc_camera_edenUnregisteredFromWorld", "syntax": "[] call BIS_fnc_camera_edenUnregisteredFromWorld"}, "BIS_fnc_camera_getCam": {"version": "FNC", "tags": "", "description": "Gets camera instance of camerea object", "example": "[BIS_camera] call BIS_fnc_camera_getCam;", "docSyntax": "[camera] call BIS_fnc_camera_getCam", "syntax": "[<objCamera>] call BIS_fnc_camera_getCam"}, "BIS_fnc_camera_getCinemaBordersEnabled": {"version": "FNC", "tags": "", "description": "Check if camera uses cinema borders.", "example": "[BIS_camera] call BIS_fnc_camera_getCinemaBordersEnabled;", "docSyntax": "[camera] call BIS_fnc_camera_getCinemaBordersEnabled", "syntax": "[<objCamera>] call BIS_fnc_camera_getCinemaBordersEnabled"}, "BIS_fnc_camera_getFocus": {"version": "FNC", "tags": "", "description": "Returns camera focus.", "example": "[BIS_camera] call BIS_fnc_camera_getFocus;", "docSyntax": "[camera] call BIS_fnc_camera_getFocus", "syntax": "[<objCamera>] call BIS_fnc_camera_getFocus"}, "BIS_fnc_camera_getFOV": {"version": "FNC", "tags": "", "description": "Gets FOV of camera.", "example": "[BIS_camera] call BIS_fnc_camera_getFOV;", "docSyntax": "[camera] call BIS_fnc_camera_getFOV", "syntax": "[<objCamera>] call BIS_fnc_camera_getFOV"}, "BIS_fnc_camera_getHUDEnabled": {"version": "FNC", "tags": "", "description": "Returns wether camera HUD is enabled.", "example": "[BIS_camera] call BIS_fnc_camera_getHUDEnabled;", "docSyntax": "[camera] call BIS_fnc_camera_getHUDEnabled", "syntax": "[<objCamera>] call BIS_fnc_camera_getHUDEnabled"}, "BIS_fnc_camera_getVisionMode": {"version": "FNC", "tags": "", "description": "Returns camera vision mode.", "example": "[BIS_camera] call BIS_fnc_camera_getVisionMode;", "docSyntax": "[camera] call BIS_fnc_camera_getVisionMode", "syntax": "[<objCamera>] call BIS_fnc_camera_getVisionMode"}, "BIS_fnc_camera_init": {"version": "FNC", "tags": "", "description": "Initialises a camera.", "example": "[BIS_camera] call BIS_fnc_camera_init;", "docSyntax": "[camera] call BIS_fnc_camera_init", "syntax": "[<objCamera>] call BIS_fnc_camera_init"}, "BIS_fnc_camera_setCam": {"version": "FNC", "tags": "", "description": "Sets camera instance of camera object.", "example": "[BIS_camera,BIS_camera_instance] call BIS_fnc_camera_setCam;", "docSyntax": "[camera, cameraInstance] call BIS_fnc_camera_setCam", "syntax": "[<objCamera>,cameraInstance] call BIS_fnc_camera_setCam"}, "BIS_fnc_camera_setCinemaBordersEnabled": {"version": "FNC", "tags": "", "description": "Sets cinema borders.", "example": "[BIS_camera,true] call BIS_fnc_camera_setCinemaBordersEnabled;", "docSyntax": "[camera, enabled] call BIS_fnc_camera_setCinemaBordersEnabled", "syntax": "[<objCamera>,<bool>] call BIS_fnc_camera_setCinemaBordersEnabled"}, "BIS_fnc_camera_setFocus": {"version": "FNC", "tags": "", "description": "Sets camera focus.", "example": "[BIS_camera, [0.5,0.5]] call BIS_fnc_camera_setFocus;", "docSyntax": "[camera, focusValues] call BIS_fnc_camera_setFocus", "syntax": "[<objCamera>,focusValues] call BIS_fnc_camera_setFocus"}, "BIS_fnc_camera_setFOV": {"version": "FNC", "tags": "", "description": "Sets the FOV of given camera.", "example": "[BIS_camera,0.5] call BIS_fnc_camera_setFOV;", "docSyntax": "[camera, FOV] call BIS_fnc_camera_setFOV", "syntax": "[<objCamera>,FOV] call BIS_fnc_camera_setFOV"}, "BIS_fnc_camera_setHUDEnabled": {"version": "FNC", "tags": "", "description": "Enables or disables camera HUD.", "example": "[BIS_camera,true] call BIS_fnc_camera_setHUDEnabled;", "docSyntax": "[camera, state] call BIS_fnc_camera_setHUDEnabled", "syntax": "[<objCamera>,state] call BIS_fnc_camera_setHUDEnabled"}, "BIS_fnc_camera_setVisionMode": {"version": "FNC", "tags": "", "description": "Sets camera vision mode.", "example": "[BIS_camera,1] call BIS_fnc_camera_setVisionMode;", "docSyntax": "[camera, mode] call BIS_fnc_camera_setVisionMode", "syntax": "[<objCamera>,mode] call BIS_fnc_camera_setVisionMode"}, "BIS_fnc_camera_tick": {"version": "FNC", "tags": "", "description": "Ticks a camera. Updates position and view mode.", "example": "[BIS_camera] call BIS_fnc_camera_tick;", "docSyntax": "[camera] call BIS_fnc_camera_tick", "syntax": "[<objCamera>] call BIS_fnc_camera_tick"}, "BIS_fnc_cameraOld": {"version": "FNC", "tags": "", "description": "Classic camera script, replaced by the Splendid\u2122 BIS_fnc_camera.", "example": "[player] call BIS_fnc_cameraOld; //\u00a0starts the camera on the player", "docSyntax": "[target] call BIS_fnc_cameraOld", "syntax": "[<object>] call BIS_fnc_cameraOld"}, "BIS_fnc_camFollow": {"version": "FNC", "tags": "", "description": "Refresh a camera Field of View according to its distance with the target.", "example": "private _camera = \"camera\" camCreate ((getPos player) vectorAdd [0,0,3]); [_camera, player, -2] call BIS_fnc_camFollow;", "docSyntax": "[camera, target, refreshTime] call BIS_fnc_camFollow", "syntax": "[<objCamera>,<object>,refreshTime] call BIS_fnc_camFollow"}, "BIS_fnc_cancelMarker": {"version": "FNC", "tags": "", "description": "Cancels a marker by a red 'X' marker. Also sets its variable to \"Canceled\" to true.", "example": "[\"BIS_marker\",2,1.5,75] spawn BIS_fnc_cancelMarker;", "docSyntax": "[marker, duration, fadeTime, sizeMultiplier, angleOffset] spawn BIS_fnc_cancelMarker", "syntax": "[marker,duration,fadeTime,sizeMultiplier,angleOffset] spawn BIS_fnc_cancelMarker"}, "BIS_fnc_carAlarm": {"version": "FNC", "tags": "", "description": "Play car alarm effect.", "example": "[\"init\", myCar] call BIS_fnc_carAlarm;", "docSyntax": "[mode, car] call BIS_fnc_carAlarm", "syntax": "[mode,<objVehicle>] call BIS_fnc_carAlarm"}, "BIS_fnc_cargoTurretIndex": {"version": "FNC", "tags": "", "description": "Return cargo index of a person turret and the other way around.", "example": "private _vehicle = vehicle player; private _turretCargoIndex = [_vehicle, [0, 1]] call BIS_fnc_cargoTurretIndex; private _playerTurretPath = [_vehicle, player] call BIS_fnc_cargoTurretIndex;", "docSyntax": "[vehicle, personOrTurretPath] call BIS_fnc_cargoTurretIndex", "syntax": "[<objVehicle>,personOrTurretPath] call BIS_fnc_cargoTurretIndex"}, "BIS_fnc_carrier01AnimateDeflectors": {"version": "FNC", "tags": "", "description": "Plays a set of animations to animate the carriers' catapult jet blast deflectors. See Arma 3: Aircraft Systems for information about needed config changes.", "example": "[_carrierPart, [\"Deflector_1\", \"Deflector_1_hydraulic_1\", \"Deflector_1_hydraulic_2\", \"Deflector_1_hydraulic_3\"], 10] spawn BIS_fnc_carrier01AnimateDeflectors;", "docSyntax": "[carrierPart, animations, animationState] spawn BIS_fnc_carrier01AnimateDeflectors", "syntax": "[carrierPart,animations,animationState] spawn BIS_fnc_carrier01AnimateDeflectors"}, "BIS_fnc_carrier01CatapultActionAdd": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_carrier01CatapultActionRemove": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_carrier01CatapultID": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_carrier01CatapultLockTo": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_carrier01CrewInAnim": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_carrier01CrewPlayAnim": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_carrier01EdenDelete": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a sub function designed to delete dynamic aircrfat carrier in EDEN editor. Carrier consists of multiple sub-objects that are linked together bnased on precise memory point positions in 3D space. Function will delete carrier parts in EDEN editor after main object is deleted. Exucution: - Call from EH on the main carrier base model (blank model with momory points and reference config). Example: class Eventhandlers { init = \"_this call BIS_fnc_Carrier01Init\"; //main init fnc, will assemble carrier in game AttributesChanged3DEN = \"_this call BIS_fnc_Carrier01EdenInit\"; //function to update objects position in EDEN editor if attributes changed by player Dragged3DEN = \"_this call BIS_fnc_Carrier01PosUpdate\"; //function to update objects position in EDEN editor if attributes changed by player RegisteredToWorld3DEN = \"_this call BIS_fnc_Carrier01EdenInit\"; //initial EDEN init fnc (main init is still called) UnregisteredFromWorld3DEN = \"_this call BIS_fnc_Carrier01EdenDelete\"; //function to delete all carrier objects in EDEN editor }; Requirments: - An array of carrier parts/objects as a variable attached to main carrier base. This array is created by main BIS_fnc_Carrier01Init. Parameter(s): _this select 0: mode (Scalar) 0: carrier Base/object and 1: array of objects in variable in base objects namespace [\"bis_carrierParts\", []]; Returns: nothing Result: Aircraft Carrier's parts are deleted in EDEN editor. */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_carrier01EdenInit": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a sub function designed to assemble dynamic aircrfat carrier in EDEN editor. Carrier consists of multiple sub-objects that are linked together bnased on precise memory point positions in 3D space. Function will update initial init setup on EDEN editor invoked. Exucution: - Call from EH on the main carrier base model (blank model with momory points and reference config). Example: class Eventhandlers { init = \"_this call BIS_fnc_Carrier01Init\"; //main init fnc, will assemble carrier in game AttributesChanged3DEN = \"_this call BIS_fnc_Carrier01EdenInit\"; //function to update objects position in EDEN editor if attributes changed by player Dragged3DEN = \"_this call BIS_fnc_Carrier01PosUpdate\"; //function to update objects position in EDEN editor if attributes changed by player RegisteredToWorld3DEN = \"_this call BIS_fnc_Carrier01EdenInit\"; //initial EDEN init fnc (main init is still called) UnregisteredFromWorld3DEN = \"_this call BIS_fnc_Carrier01EdenDelete\"; //function to delete all carrier objects in EDEN editor }; Requirments: - An array of carrier parts/objects as a variable attached to main carrier base. This array is created by main BIS_fnc_Carrier01Init. Parameter(s): _this select 0: mode (Scalar) 0: carrier Base/object and 1: array of objects in variable in base objects namespace [\"bis_carrierParts\", []]; Returns: nothing Result: Aircraft Carrier's possition is updated in EDEN editor. */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_carrier01Init": {"version": "FNC", "tags": "", "description": "This is a main function designed to assemble a dynamic aircraft carrier. A carrier consists of multiple sub-objects that are linked together based on precise memory point positions in 3D space.", "example": "myCarrier call BIS_fnc_carrier01Init;", "docSyntax": "carrier call BIS_fnc_carrier01Init", "syntax": "carrier call BIS_fnc_carrier01Init"}, "BIS_fnc_carrier01PosUpdate": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a sub function designed to update dynamic aircraft carriers position in EDEN editor. Carrier consists of multiple sub-objects that are linked together bnased on precise memory point positions in 3D space. Function will update initial object positions when player drggs the object in EDEN editor. Exucution: - Call from EH on the main carrier base model (blank model with momory points and reference config). Example: class Eventhandlers { init = \"_this call BIS_fnc_Carrier01Init\"; //main init fnc, will assemble carrier in game AttributesChanged3DEN = \"_this call BIS_fnc_Carrier01EdenInit\"; //function to update objects position in EDEN editor if attributes changed by player Dragged3DEN = \"_this call BIS_fnc_Carrier01PosUpdate\"; //function to update objects position in EDEN editor if attributes changed by player RegisteredToWorld3DEN = \"_this call BIS_fnc_Carrier01EdenInit\"; //initial EDEN init fnc (main init is still called) UnregisteredFromWorld3DEN = \"_this call BIS_fnc_Carrier01EdenDelete\"; //function to delete all carrier objects in EDEN editor }; Requirments: - An array of carrier parts/objects as a variable attached to main carrier base. This array is created by main BIS_fnc_Carrier01Init. Parameter(s): _this select 0: mode (Scalar) 0: carrier Base/object and 1: array of objects in variable in base objects namespace [\"bis_carrierParts\", []]; Returns: nothing Result: Aircraft Carrier's possition is updated in EDEN editor. */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_changeColorMarker": {"version": "FNC", "tags": "", "description": "Makes the marker go from its original color to a specified color over time", "example": "[\"BIS_marker\",\"ColorRed\"] spawn BIS_fnc_changeColorMarker;", "docSyntax": "[marker, color, duration] spawn BIS_fnc_changeColorMarker", "syntax": "[marker,<scalar>,duration] spawn BIS_fnc_changeColorMarker"}, "BIS_fnc_changeSupportRadioChannel": {"version": "FNC", "tags": "", "description": "/* Description: Changes the radio channel for Support module-related protocol. Parameter(s): _this select 0: SIDE - Affected side _this select 1: ANY - Channel setting Returns: nothing */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_cinemaBorder": {"version": "FNC", "tags": "", "description": "Creates cinematic borders. Player cannot move during cutscene.", "example": "[1, 2, true, true] call BIS_fnc_cinemaBorder;", "docSyntax": "[mode, duration, sound, view] call BIS_fnc_cinemaBorder", "syntax": "[mode,duration,sound,view] call BIS_fnc_cinemaBorder"}, "BIS_fnc_clamp": {"version": "FNC", "tags": "", "description": "Clamps provided value within min..max range.", "example": "[5, 0, 10] call BIS_fnc_clamp; //\u00a0returns 5 [0, 0, 10] call BIS_fnc_clamp; //\u00a0returns 0 [10, 0, 10] call BIS_fnc_clamp; //\u00a0returns 10 [-5, 0, 10] call BIS_fnc_clamp; //\u00a0returns 0 [15, 0, 10] call BIS_fnc_clamp; //\u00a0returns 10 [5, 10, 3] call BIS_fnc_clamp; //\u00a0returns 10", "docSyntax": "[value, min, max] call BIS_fnc_clamp", "syntax": "[<scalar>,min,max] call BIS_fnc_clamp"}, "BIS_fnc_clampVector": {"version": "FNC", "tags": "", "description": "Clamps vector values between provided min/max boundaries.", "example": "private _newVelocity = [velocity vehicle player, -100, 100] call BIS_fnc_clampVector; vehicle player setVelocity _newVelocity;", "docSyntax": "[vector, min, max] call BIS_fnc_clampVector", "syntax": "[vector,min,max] call BIS_fnc_clampVector"}, "BIS_fnc_classMagazine": {"version": "FNC", "tags": "", "description": "Returns class of magazine given by string.", "example": "private _magazineConfig = currentMagazine player call BIS_fnc_classMagazine;", "docSyntax": "magazineClass call BIS_fnc_classMagazine", "syntax": "magazineClass call BIS_fnc_classMagazine"}, "BIS_fnc_classWeapon": {"version": "FNC", "tags": "", "description": "Returns class of weapon given by string.", "example": "private _weaponConfig = currentWeapon player call BIS_fnc_classWeapon;", "docSyntax": "weaponClass call BIS_fnc_classWeapon", "syntax": "weaponClass call BIS_fnc_classWeapon"}, "BIS_fnc_clerp": {"version": "FNC", "tags": "", "description": "CLerp - Circular Lerp - is like lerp but handles the wraparound from 0 to 360 This is useful when interpolating eulerAngles and the object crosses the 0/360 boundary The standard Lerp function causes the object to rotate in the wrong direction, clerp fixes that", "example": "[90,170,0.1] call BIS_fnc_clerp; //\u00a0Returns 98", "docSyntax": "[currentValue, targetValue, alpha] call BIS_fnc_clerp", "syntax": "[currentValue,targetValue,alpha] call BIS_fnc_clerp"}, "BIS_fnc_codePerformance": {"version": "FNC", "tags": "", "description": "Measures how much time it takes to execute given expression. Results may vary based on overall performance; use this function to compare alternative scripting approaches rather than to measure specific values. Upon function execution, window with results is opened. The user then has a choice to copy the result into clipboard or not.", "example": "//\u00a0compare three methods of adding elements into array testArray = []; [\"testArray = testArray + [1]\"] call BIS_fnc_codePerformance; testArray = []; [\"testArray set [count testArray, 1]\"] call BIS_fnc_codePerformance; testArray = []; [\"testArray pushBack 1\"] call BIS_fnc_codePerformance;", "docSyntax": "[expression, arguments, cycles, display] call BIS_fnc_codePerformance", "syntax": "[expression,arguments,cycles,<uiDisplay>] call BIS_fnc_codePerformance"}, "BIS_fnc_colorConfigToRGBA": {"version": "FNC", "tags": "", "description": "Converts config color format to RGBA array of numbers.", "example": "[\"0.5 + 0.25\",0,0,1] call BIS_fnc_colorConfigToRGBA; //\u00a0returns [0.75,0,0,1]", "docSyntax": "configColor call BIS_fnc_colorConfigToRGBA", "syntax": "configColor call BIS_fnc_colorConfigToRGBA"}, "BIS_fnc_colorMarker": {"version": "FNC", "tags": "", "description": "Changes color of a marker with a little effect", "example": "[\"BIS_marker\",\"ColorRed\",2] spawn BIS_fnc_colorMarker;", "docSyntax": "[marker, color, duration] spawn BIS_fnc_colorMarker", "syntax": "[marker,<scalar>,duration] spawn BIS_fnc_colorMarker"}, "BIS_fnc_colorRGBAtoHTML": {"version": "FNC", "tags": "", "description": "Converts RGBA color format to #AARRGGBB HTML color format.", "example": "[0,0,0,1] call BIS_fnc_colorRGBAtoHTML; //\u00a0will return #FF000000", "docSyntax": "colorArray call BIS_fnc_colorRGBAtoHTML", "syntax": "colorArray call BIS_fnc_colorRGBAtoHTML"}, "BIS_fnc_colorRGBAtoTexture": {"version": "FNC", "tags": "", "description": "Converts RGB color format to procedural texture, e.g [0,0,0,1] becomes \"#(argb,8,8,3)color(0,0,0,1)\".", "example": "private _texture = [0,0,0,1] call BIS_fnc_colorRGBAtoTexture;", "docSyntax": "color call BIS_fnc_colorRGBAtoTexture", "syntax": "<scalar> call BIS_fnc_colorRGBAtoTexture"}, "BIS_fnc_colorRGBtoHTML": {"version": "FNC", "tags": "", "description": "Converts RGB color format to HTML color format.", "example": "private _htmlColor = [0,0,0,1] call BIS_fnc_colorRGBtoHTML; //\u00a0will return #000000", "docSyntax": "colorArray call BIS_fnc_colorRGBtoHTML", "syntax": "colorArray call BIS_fnc_colorRGBtoHTML"}, "BIS_fnc_commsMenuCreate": {"version": "FNC", "tags": "", "description": "Creates the global communications menu, if it is not already created. All entries are invisible by default. Unhide appropriate sections by using BIS_fnc_commsMenuToggleVisibility.", "example": "call BIS_fnc_commsMenuCreate;", "docSyntax": "call BIS_fnc_commsMenuCreate", "syntax": "call BIS_fnc_commsMenuCreate"}, "BIS_fnc_commsMenuToggleAvailability": {"version": "FNC", "tags": "", "description": "/* File: fn_commsMenuToggleAvailability.sqf Description: Enables or disables certain sections of the global communications menu. Parameter(s): _this select 0: index (Scalar) or list of indices (Array of Scalars) or section name (String) \"som\" - SecOps section \"wf\" - Warfare section _this select 1: mode (Scalar) 0 - disable 1 - enable Returns: Success flag (Boolean) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_commsMenuToggleVisibility": {"version": "FNC", "tags": "", "description": "/* File: fn_commsMenuToggleVisibility.sqf Description: Shows or hides certain sections of the global communications menu. Parameter(s): _this select 0: index (Scalar) or list of indices (Array of Scalars) or section name (String) \"som\" - SecOps section \"wf\" - Warfare section _this select 1: mode (Scalar) 0 - hide 1 - show Returns: Success flag (Boolean) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_compareDateTimes": {"version": "FNC", "tags": "", "description": "Returns the newer date or returns true if they are identical.", "example": "[[2035,5,28,13,37], [2032,5,28,13,37]] call BIS_fnc_compareDateTimes;", "docSyntax": "[date1, date2] call BIS_fnc_compareDateTimes", "syntax": "[date1,date2] call BIS_fnc_compareDateTimes"}, "BIS_fnc_compatibleItems": {"version": "FNC", "tags": "", "description": "\ud83d\udd56", "example": "(currentWeapon player) call BIS_fnc_compatibleItems;", "docSyntax": "weapon call BIS_fnc_compatibleItems", "syntax": "<string> call BIS_fnc_compatibleItems"}, "BIS_fnc_compatibleMagazines": {"version": "FNC", "tags": "", "description": "\ud83d\udd56", "example": "[\"arifle_mx_f\"] call BIS_fnc_compatibleMagazines;", "docSyntax": "[weapon, returnHidden] call BIS_fnc_compatibleMagazines", "syntax": "[<string>,returnHidden] call BIS_fnc_compatibleMagazines"}, "BIS_fnc_completedCuratorChallengesCount": {"version": "FNC", "tags": "", "description": "Return number of completed curator challenges.", "example": "curatorModule call BIS_fnc_completedCuratorChallengesCount;", "docSyntax": "curator call BIS_fnc_completedCuratorChallengesCount", "syntax": "curator call BIS_fnc_completedCuratorChallengesCount"}, "BIS_fnc_conditionalSelect": {"version": "FNC", "tags": "", "description": "This returns a sub-array of elements that satisfy a specific condition in the order they have been passed.", "example": "[[10, 0, 8, 2, 6, 4], { _x > 5 }] call BIS_fnc_conditionalSelect; //\u00a0will return [10,8,6]", "docSyntax": "[items, condition] call BIS_fnc_conditionalSelect", "syntax": "[items,condition] call BIS_fnc_conditionalSelect"}, "BIS_fnc_configExtremes": {"version": "FNC", "tags": "", "description": "Scan config paths and return min and max values for each property.", "example": "private _paths = [configFile >> \"CfgWeapons\"] call BIS_fnc_returnChildren; [_paths, [\"maxRange\", \"reloadTime\"]] call BIS_fnc_configExtremes;", "docSyntax": "[paths, properties, propertyTypes, propertyDefaults] call BIS_fnc_configExtremes", "syntax": "[paths,properties,propertyTypes,propertyDefaults] call BIS_fnc_configExtremes"}, "BIS_fnc_configPath": {"version": "FNC", "tags": "", "description": "Returns config path to given entry in given format.", "example": "[\"configFile >> \"\"CfgVehicles\"\" >> \"\"Car\"\"\"] call BIS_fnc_configPath; //\u00a0[\"configFile\",\"CfgVehicles\",\"Car\"]", "docSyntax": "[config, format, strict] call BIS_fnc_configPath", "syntax": "[config,format,strict] call BIS_fnc_configPath"}, "BIS_fnc_configViewer": {"version": "FNC", "tags": "", "description": "Opens the Splendid\u2122 Config Viewer.", "example": "call BIS_fnc_configViewer;", "docSyntax": "[parent, cfg, showOk, onSelect, onAdd, header] call BIS_fnc_configViewer", "syntax": "[parent,cfg,showOk,onSelect,onAdd,header] call BIS_fnc_configViewer"}, "BIS_fnc_consolidateArray": {"version": "FNC", "tags": "", "description": "Finds duplicates in the given array of anything and consolidates them into an array of sub-arrays", "example": "[\"apple\",\"apple\",\"pear\",\"pear\",\"apple\"] call BIS_fnc_consolidateArray; //\u00a0return: [[\"apple\",3],[\"pear\",2]]", "docSyntax": "array call BIS_fnc_consolidateArray", "syntax": "<array> call BIS_fnc_consolidateArray"}, "BIS_fnc_controlConfigs": {"version": "FNC", "tags": "", "description": "Return config paths to all display controls.", "example": "[findDisplay 313, configFile >> \"Display3DEN\"] call BIS_fnc_controlConfigs;", "docSyntax": "[display,path] call BIS_fnc_controlConfigs", "syntax": "[<uiDisplay>,path] call BIS_fnc_controlConfigs"}, "BIS_fnc_controlPoint_compute": {"version": "FNC", "tags": "", "description": "Computes data for control point.", "example": "[controlPoint] call BIS_fnc_controlPoint_compute;", "docSyntax": "[controlPoint] call BIS_fnc_controlPoint_compute", "syntax": "[controlPoint] call BIS_fnc_controlPoint_compute"}, "BIS_fnc_controlPoint_computeOwnerKey": {"version": "FNC", "tags": "", "description": "Returns the key owner of given control point.", "example": "private _key = [controlPoint] call BIS_fnc_controlPoint_computeOwnerKey;", "docSyntax": "[controlPoint] call BIS_fnc_controlPoint_computeOwnerKey", "syntax": "[controlPoint] call BIS_fnc_controlPoint_computeOwnerKey"}, "BIS_fnc_controlPoint_edenAttributesChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Attributes change in EDEN for a control point Parameter(s): _this select 0: Object - The control point Returns: Nothing */", "docSyntax": "[] call BIS_fnc_controlPoint_edenAttributesChanged", "syntax": "[] call BIS_fnc_controlPoint_edenAttributesChanged"}, "BIS_fnc_controlPoint_edenConnectionChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: 3DEN connections of a control point is changed Parameter(s): _this select 0: Object - The control point Returns: Nothing */", "docSyntax": "[] call BIS_fnc_controlPoint_edenConnectionChanged", "syntax": "[] call BIS_fnc_controlPoint_edenConnectionChanged"}, "BIS_fnc_controlPoint_edenDragged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Entity is dragged in 3DEN Parameter(s): _this select 0: Object - The control point Returns: Nothing */", "docSyntax": "[] call BIS_fnc_controlPoint_edenDragged", "syntax": "[] call BIS_fnc_controlPoint_edenDragged"}, "BIS_fnc_controlPoint_edenIsSelected": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Whether given control point is selected in 3den Parameter(s): _this select 0: Object - The control point object Returns: Bool - True if selected, false if not */", "docSyntax": "[] call BIS_fnc_controlPoint_edenIsSelected", "syntax": "[] call BIS_fnc_controlPoint_edenIsSelected"}, "BIS_fnc_controlPoint_edenRegisteredToWorld": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Attributes change in EDEN for a control point Parameter(s): _this select 0: Object - The control point Returns: Nothing */", "docSyntax": "[] call BIS_fnc_controlPoint_edenRegisteredToWorld", "syntax": "[] call BIS_fnc_controlPoint_edenRegisteredToWorld"}, "BIS_fnc_controlPoint_edenUnregisteredFromWorld": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Attributes change in EDEN for a control point Parameter(s): _this select 0: Object - The control point Returns: Nothing */", "docSyntax": "[] call BIS_fnc_controlPoint_edenUnregisteredFromWorld", "syntax": "[] call BIS_fnc_controlPoint_edenUnregisteredFromWorld"}, "BIS_fnc_controlPoint_getOwnerKey": {"version": "FNC", "tags": "", "description": "Returns the key owner of given control point.", "example": "private _key = [controlPoint] call BIS_fnc_controlPoint_getOwnerKey;", "docSyntax": "[controlPoint] call BIS_fnc_controlPoint_getOwnerKey", "syntax": "[controlPoint] call BIS_fnc_controlPoint_getOwnerKey"}, "BIS_fnc_controlPoint_isArrive": {"version": "FNC", "tags": "", "description": "Whether given control point is arrive, not leave.", "example": "private _isArrive = [controlPoint] call BIS_fnc_controlPoint_isArrive;", "docSyntax": "[controlPoint] call BIS_fnc_controlPoint_isArrive", "syntax": "[controlPoint] call BIS_fnc_controlPoint_isArrive"}, "BIS_fnc_controlPoint_setIsArrive": {"version": "FNC", "tags": "", "description": "Set's whether this control point is arrive or leave.", "example": "[controlPoint,false] call BIS_fnc_controlPoint_setIsArrive;", "docSyntax": "[controlPoint, isArrive] call BIS_fnc_controlPoint_setIsArrive", "syntax": "[controlPoint,isArrive] call BIS_fnc_controlPoint_setIsArrive"}, "BIS_fnc_convertUnits": {"version": "FNC", "tags": "", "description": "Converts values to a target system of units.", "example": "private _distString = [500, 0, 5, 1, -1] call BIS_fnc_convertUnits;", "docSyntax": "[value, from, to, mode, precision] call BIS_fnc_convertUnits", "syntax": "[<scalar>,from,to,mode,precision] call BIS_fnc_convertUnits"}, "BIS_fnc_countdown": {"version": "FNC", "tags": "", "description": "Triggers a countdown.", "example": "private _initialCountdown = [50,false] call BIS_fnc_countdown; //\u00a0sets countdown to 50 seconds where function is executed", "docSyntax": "[timeInSeconds, global] call BIS_fnc_countdown", "syntax": "[timeInSeconds,global] call BIS_fnc_countdown"}, "BIS_fnc_counter": {"version": "FNC", "tags": "", "description": "/* Description: Modify the given counter (create it if doesn't exist) Parameter(s): _this select 0: STRING - variable name of counter ARRAY in format [variableName,nameSpace], where nameSpace can be object, group or missionNameSpace/uiNameSpace _this select 1 (Optional): NUMBER - added value _this select 2 (Optional): NUMBER - modulo value Returns: NUMBER - counter's value */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_CPDummy": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_CPDummy", "syntax": "[] call BIS_fnc_CPDummy"}, "BIS_fnc_CPFindEmptyPosition": {"version": "FNC", "tags": "", "description": "/* Author: Josef Zemanek Description: Combat Patrol empty position locator */", "docSyntax": "[] call BIS_fnc_CPFindEmptyPosition", "syntax": "[] call BIS_fnc_CPFindEmptyPosition"}, "BIS_fnc_CPInit": {"version": "FNC", "tags": "", "description": "/* Author: Josef Zemanek Description: Combat Patrol init & general handle */", "docSyntax": "[] call BIS_fnc_CPInit", "syntax": "[] call BIS_fnc_CPInit"}, "BIS_fnc_CPLog": {"version": "FNC", "tags": "", "description": "/* Author: Josef Zemanek Description: Combat Patrol dedicated logging fnc */", "docSyntax": "[] call BIS_fnc_CPLog", "syntax": "[] call BIS_fnc_CPLog"}, "BIS_fnc_CPPickSafeDir": {"version": "FNC", "tags": "", "description": "/* Author: Josef Zemanek Description: Combat Patrol safe azimuth picker. */", "docSyntax": "[] call BIS_fnc_CPPickSafeDir", "syntax": "[] call BIS_fnc_CPPickSafeDir"}, "BIS_fnc_CPSafeAzimuths": {"version": "FNC", "tags": "", "description": "/* Author: Josef Zemanek Description: Combat Patrol safe azimuth finder. Scans around the AO for usable & convenient approach routes */", "docSyntax": "[] call BIS_fnc_CPSafeAzimuths", "syntax": "[] call BIS_fnc_CPSafeAzimuths"}, "BIS_fnc_CPSendReinforcements": {"version": "FNC", "tags": "", "description": "/* Author: Josef Zemanek Description: Combat Patrol reinforcements handle */", "docSyntax": "[] call BIS_fnc_CPSendReinforcements", "syntax": "[] call BIS_fnc_CPSendReinforcements"}, "BIS_fnc_CPSpawnGarrisonGrp": {"version": "FNC", "tags": "", "description": "/* Author: Josef Zemanek Description: Combat Patrol garrison spawning */", "docSyntax": "[] call BIS_fnc_CPSpawnGarrisonGrp", "syntax": "[] call BIS_fnc_CPSpawnGarrisonGrp"}, "BIS_fnc_CPWaitUntil": {"version": "FNC", "tags": "", "description": "Function waits until condition becomes true. Condition is checked with given interval.", "example": "[{ not alive player }, 2] spawn BIS_fnc_CPWaitUntil;", "docSyntax": "[condition, interval] spawn BIS_fnc_CPWaitUntil", "syntax": "[condition,interval] spawn BIS_fnc_CPWaitUntil"}, "BIS_fnc_createLogRecord": {"version": "FNC", "tags": "", "description": "Create a dated, timed diary record in the owner's \"Log\" subject.", "example": "[player, \"Title\", \"This is a log entry. Have fun!\"] call BIS_fnc_createLogRecord;", "docSyntax": "[owner, title, text] call BIS_fnc_createLogRecord", "syntax": "[owner,title,<string>] call BIS_fnc_createLogRecord"}, "BIS_fnc_createMenu": {"version": "FNC", "tags": "", "description": "/* File: fn_createMenu.sqf Description: Create custom commanding menu (with multiple pages if necessary). Parameter(s): _this select 0 - STRING or ARRAY - Name of menu or [Name, Context sensitive] _this select 1 - STRING - Variable in which will be menu params stored (as variable_0, variable_1, ...) _this select 2 - ARRAY - Array with menu items (can be either [items] or [[items],[itemNames],[itemEnable]] if you want to set custom params (names, enable values)) _this select 3 - STRING - Name of submenu which will open when item is activated. Name of selected item is passed to string as %1 _this select 4 - STRING - Expression which is executed when item is activated. Name of selected item is passed to string as %1, ID is %2. _this select 5 - ANYTHING (Optional) - params passed to expression. Whole argument is passed as %3 _this select 6 - BOOLEAN - False to hide number shortcuts Returned value(s): True Example: c = [\"first\",\"second\"]; [\"Menu\", \"b\", c, \"\",\"hint 'ahoj'\"] call BIS_FNC_createmenu; showCommandingMenu \"#USER:b_0\" c = [[\"firstData\",\"secondData\"],[\"First\",\"Second\"]]; [\"Menu\", \"b\", c, \"\",\"hint (str '%1' + str '%2' + str '%3')\"] call BIS_FNC_createmenu; showCommandingMenu \"#USER:b_0\"; see news:g7p3po$gik$1@new-server.localdomain */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_createObjectOO": {"version": "FNC", "tags": "", "description": "Instantiates an object of a certain class.", "example": "[\"someOOClass\", [1,2,3]] call BIS_fnc_createObjectOO;", "docSyntax": "[class,params] call BIS_fnc_createObjectOO", "syntax": "[class,<any>] call BIS_fnc_createObjectOO"}, "BIS_fnc_createRuin": {"version": "FNC", "tags": "", "description": "Create a building ruin and hide the original object.", "example": "aBuilding call BIS_fnc_createRuin;", "docSyntax": "building call BIS_fnc_createRuin", "syntax": "building call BIS_fnc_createRuin"}, "BIS_fnc_createSimpleObject": {"version": "FNC", "tags": "", "description": "Creates non-simulated framerate and network performance friendly object - a Simple Object - and applies different adjustments to fake non-existing physX and engine interactions. The adjustments need either to be stored in the object config or provided as the function input, otherwise they need to be done manually.", "example": "[\"B_Boat_Armed_01_minigun_F\", getPosWorld player, getDir player] call BIS_fnc_createSimpleObject;", "docSyntax": "[input, position, direction, followTerrain, forceSuperSimpleObject, local] call BIS_fnc_createSimpleObject", "syntax": "[input,position,direction,followTerrain,forceSuperSimpleObject,local] call BIS_fnc_createSimpleObject"}, "BIS_fnc_createTooltip": {"version": "FNC", "tags": "", "description": "Shows group tooltip. Adapted for Tac Ops DLC for use in the animated briefings.", "docSyntax": "[input, ctrl, mousePos] call BIS_fnc_createTooltip", "syntax": "[input,<uiControl>,mousePos] call BIS_fnc_createTooltip"}, "BIS_fnc_credits": {"version": "FNC", "tags": "", "description": "Opens credits, identical to those found in main menu (Arma 3). Also present in Arma 3.", "example": "[] spawn BIS_fnc_credits;", "docSyntax": "[] spawn BIS_fnc_credits", "syntax": "[] spawn BIS_fnc_credits"}, "BIS_fnc_credits_movie": {"version": "FNC", "tags": "", "description": "Movie credits function.", "example": "[] spawn BIS_fnc_credits_movie;", "docSyntax": "[display, mode] call BIS_fnc_credits_movie", "syntax": "[<uiDisplay>,mode] call BIS_fnc_credits_movie"}, "BIS_fnc_credits_movieConfig": {"version": "FNC", "tags": "", "description": "/* File: fn_credits_movieConfig.sqf Description: Movie credits config preprocessor. Parameter(s): _this select 0: Number - Index of item in config (CfgCredits >> CreditsMovie >> item) Returned value: _array: Array _array select 0: String - Position name (and tags) as structured text. _array select 1: String - Names (and tags) as structured text. _array select 2: Number - Required space coeficient (numberOfNames * textSizeCoef), -1 if config entry doesn't exist */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_credits_movieSupport": {"version": "FNC", "tags": "", "description": "/* File: fn_credits_movieSupport.sqf Description: Movie credits supporters preprocessor. Parameter(s): None. Returned value: _array: Array _array select 0: String - Position name (and tags) as structured text. _array select 1: String - Names (and tags) as structured text - 1st paragraph. _array select 2: String - Names (and tags) as structured text - 2nd paragraph. _array select 3: String - Names (and tags) as structured text - 3rd paragraph. _array select 4: Number - Required space coeficient (numberOfNamesInOneParagraph * textSizeCoef) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_crewCount": {"version": "FNC", "tags": "", "description": "Function that counts amount of seats, both for crew and cargo seats.", "example": "crewCount = [\"B_Heli_Light_01_F\", false] call BIS_fnc_crewCount; //\u00a0Counts all available seats excluding cargo slots. Returns 6 (see notes).", "docSyntax": "param call BIS_fnc_crewCount", "syntax": "param call BIS_fnc_crewCount"}, "BIS_fnc_crossProduct": {"version": "FNC", "tags": "", "description": "Return the cross product of two 3D vectors.", "example": "private _product = [[1,2,3], [3,2,1]] call BIS_fnc_crossProduct;", "docSyntax": "[vector1, vector2] call BIS_fnc_crossProduct", "syntax": "[vector1,vector2] call BIS_fnc_crossProduct"}, "BIS_fnc_crows": {"version": "FNC", "tags": "", "description": "Spawns flock of crows circling the area.", "example": "bis_crows = [BIS_scientist, 20, 8, 20] call BIS_fnc_crows;", "docSyntax": "[position, areaSize, number, height] call BIS_fnc_crows", "syntax": "[position,areaSize,<scalar>,height] call BIS_fnc_crows"}, "BIS_fnc_ctrlFitToTextHeight": {"version": "FNC", "tags": "", "description": "Resize structured text control to fit its text height.", "example": "private _height = [_ctrl, 1.5, 3] call BIS_fnc_ctrlFitToTextHeight;", "docSyntax": "[control,offset,time] call BIS_fnc_ctrlFitToTextHeight", "syntax": "[<uiControl>,offset,<scalar>] call BIS_fnc_ctrlFitToTextHeight"}, "BIS_fnc_ctrlSetScale": {"version": "FNC", "tags": "", "description": "Scale a control while maintaining its centering.", "example": "private _finalPos = [_ctrl, 1.5, 3] spawn BIS_fnc_ctrlSetScale;", "docSyntax": "[control,scale,time] spawn BIS_fnc_ctrlSetScale", "syntax": "[<uiControl>,<scalar>,<scalar>] spawn BIS_fnc_ctrlSetScale"}, "BIS_fnc_ctrlTextHeight": {"version": "FNC", "tags": "", "description": "Resize control according to it is text.", "example": "[_ctrl] call BIS_fnc_ctrlTextHeight;", "docSyntax": "[control] call BIS_fnc_ctrlTextHeight", "syntax": "[<uiControl>] call BIS_fnc_ctrlTextHeight"}, "BIS_fnc_curatorAttachObject": {"version": "FNC", "tags": "", "description": "Attach an object on another one under cursor.", "example": "[BIS_vehicle] call BIS_fnc_curatorAttachObject;", "docSyntax": "[object] call BIS_fnc_curatorAttachObject", "syntax": "[<object>] call BIS_fnc_curatorAttachObject"}, "BIS_fnc_curatorAttributes": {"version": "FNC", "tags": "", "description": "/* Description: Return attributes available for given entity Parameter(s): 0: OBJECT - curator 1: OBJECT or GROUp or ARRAY or STRING - checked entity Returns: ARRAY of STRINGs */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_curatorAutomatic": {"version": "FNC", "tags": "", "description": "Spawn units based on curator settings. Used when curator role is not taken.", "example": "[curator_module, [west, independent, 0.1, 40, 30, 20, 10] call BIS_fnc_curatorAutomatic;", "docSyntax": "[curator, sides, cheatCoef, infantryProb, groundProb, airProb, marineProb] call BIS_fnc_curatorAutomatic", "syntax": "[curator,sides,cheatCoef,infantryProb,groundProb,airProb,marineProb] call BIS_fnc_curatorAutomatic"}, "BIS_fnc_curatorAutomaticPositions": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_curatorChallengeDestroyVehicle": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_curatorChallengeFindIntel": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_curatorChallengeFireWeapon": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_curatorChallengeGetInVehicle": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_curatorChallengeIlluminate": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_curatorChallengeSpawnLightning": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_curatorHint": {"version": "FNC", "tags": "", "description": "Show hint in curator interface.", "example": "[\"Title\", \"Some text\", 1337] call BIS_fnc_curatorHint;", "docSyntax": "[title, text, duration] call BIS_fnc_curatorHint", "syntax": "[title,<string>,duration] call BIS_fnc_curatorHint"}, "BIS_fnc_curatorObjectEdited": {"version": "FNC", "tags": "", "description": "Code executed when curator object is edited (i.e., moved or rotated). When a soldier or a vehicle is moved high above ground, create a parachute for them.", "example": "[module_curator, someObject] call BIS_fnc_curatorObjectEdited;", "docSyntax": "[module, object] call BIS_fnc_curatorObjectEdited", "syntax": "[module,<object>] call BIS_fnc_curatorObjectEdited"}, "BIS_fnc_curatorObjectPlaced": {"version": "FNC", "tags": "", "description": "Code executed when curator object is placed.", "example": "[curatorModule, player] call BIS_fnc_curatorObjectPlaced;", "docSyntax": "[module,object] call BIS_fnc_curatorObjectPlaced", "syntax": "[module,<object>] call BIS_fnc_curatorObjectPlaced"}, "BIS_fnc_curatorObjectRegistered": {"version": "FNC", "tags": "", "description": "Register \"curatorObjectRegistered\" handler. Cost of vehicles with crews will be automatically calculated based on vehicle + crew cost.", "example": "[curatorModule, { hint format [\"Curator:%1, Classes:%2\", _this # 0, _this # 1] }] call BIS_fnc_curatorObjectRegistered;", "docSyntax": "[curator, code] call BIS_fnc_curatorObjectRegistered", "syntax": "[curator,<code>] call BIS_fnc_curatorObjectRegistered"}, "BIS_fnc_curatorObjectRegisteredTable": {"version": "FNC", "tags": "", "description": "Register curator object costs from a table.", "example": "//\u00a0Nothing but the listed flare modules will show up in the curator's unit list [getAssignedCuratorLogic player, [\"ModuleFlareWhite_F\",0.02,\"ModuleFlareYellow_F\",0.02,\"ModuleFlareGreen_F\",0.02]] call BIS_fnc_curatorObjectRegisteredTable;", "docSyntax": "[curatorLogic, [className, cost, className, cost...]] call BIS_fnc_curatorObjectRegisteredTable", "syntax": "[curatorLogic,[className,cost,className,cost...]] call BIS_fnc_curatorObjectRegisteredTable"}, "BIS_fnc_curatorPinged": {"version": "FNC", "tags": "", "description": "Show effects when player pings curator. Icon and entity list highlighting is handled by engine", "example": "[module_curator, player] call BIS_fnc_curatorPinged;", "docSyntax": "[module, player] call BIS_fnc_curatorPinged", "syntax": "[module,<objUnit>] call BIS_fnc_curatorPinged"}, "BIS_fnc_curatorRespawn": {"version": "FNC", "tags": "", "description": "Restore unit for curators after respawn. When curator owner, it will transfer ownership to the new unit. When editable by curator, it will remove the dead unit and register the new one.", "example": "[BIS_newUnit,BIS_oldUnit] call BIS_fnc_curatorRespawn;", "docSyntax": "[newUnit,oldUnit] call BIS_fnc_curatorRespawn", "syntax": "[newUnit,oldUnit] call BIS_fnc_curatorRespawn"}, "BIS_fnc_curatorSayMessage": {"version": "FNC", "tags": "", "description": "Plays some radio message from CfgRadio locally.", "example": "[player, \"mp_groundsupport_01_casrequested_BHQ_0\"] call BIS_fnc_curatorSayMessage;", "docSyntax": "[speaker, sentence] call BIS_fnc_curatorSayMessage", "syntax": "[speaker,sentence] call BIS_fnc_curatorSayMessage"}, "BIS_fnc_curatorVisionModes": {"version": "FNC", "tags": "", "description": "Toggle curator vision mode.", "example": "private _visionModes = [Curator] call BIS_fnc_curatorVisionModes;", "docSyntax": "[curator] call BIS_fnc_curatorVisionModes", "syntax": "[curator] call BIS_fnc_curatorVisionModes"}, "BIS_fnc_curatorWaypointPlaced": {"version": "FNC", "tags": "", "description": "Code executed when curator waypoint is placed.", "example": "[curatorModule, group player, 5] call BIS_fnc_curatorWaypointPlaced;", "docSyntax": "[object, waypointGroup, waypointID] call BIS_fnc_curatorWaypointPlaced", "syntax": "[<object>,waypointGroup,waypointID] call BIS_fnc_curatorWaypointPlaced"}, "BIS_fnc_customGPS": {"version": "FNC", "tags": "", "description": "Replaces GPS frame.", "example": "[\"ca\\missions_pmc\\data\\ui_gps_ca.paa\", -0.05, 0.16] call BIS_fnc_customGPS;", "docSyntax": "[path, deltaX, deltaY] call BIS_fnc_customGPS", "syntax": "[path,deltaX,deltaY] call BIS_fnc_customGPS"}, "BIS_fnc_customGPSvideo": {"version": "FNC", "tags": "", "description": "Plays in-game video in GPS frame.", "example": "private _script = [\"\\ca\\video_pmc\\CP00_Reynolds_b.ogv\",1.04] spawn BIS_fnc_customGPSvideo; waitUntil {scriptDone _script};", "docSyntax": "[path, sizeCoef] spawn BIS_fnc_customGPSvideo", "syntax": "[path,sizeCoef] spawn BIS_fnc_customGPSvideo"}, "BIS_fnc_customGPSVideo": {"version": "FNC", "tags": "", "description": "Plays in-game video in GPS frame.", "example": "[\"myVideo.ogv\", 0.75] call BIS_fnc_customGPSVideo;", "docSyntax": "[videoFilePath, sizeCoef] call BIS_fnc_customGPSVideo", "syntax": "[videoFilePath,sizeCoef] call BIS_fnc_customGPSVideo"}, "BIS_fnc_cutDecimals": {"version": "FNC", "tags": "", "description": "Function that rounds specified number to specified amount of decimals.", "example": "private _cutDecimals = [33.3333, 1] call BIS_fnc_cutDecimals; //\u00a0returns 33.3", "docSyntax": "[number, precision] call BIS_fnc_cutDecimals", "syntax": "[<scalar>,precision] call BIS_fnc_cutDecimals"}, "BIS_fnc_damageChanged": {"version": "FNC", "tags": "", "description": "Handle effects caused by changing of damage.", "example": "call BIS_fnc_damageChanged;", "docSyntax": "call BIS_fnc_damageChanged", "syntax": "call BIS_fnc_damageChanged"}, "BIS_fnc_damagePulsing": {"version": "FNC", "tags": "", "description": "Game pulsing damage effect.", "example": "call BIS_fnc_damagePulsing;", "docSyntax": "call BIS_fnc_damagePulsing", "syntax": "call BIS_fnc_damagePulsing"}, "BIS_fnc_dataTerminalAnimate": {"version": "FNC", "tags": "", "description": "Animate a Data Terminal (\"Land_DataTerminal_01_F\").", "example": "[myTerminal, 3] call BIS_fnc_dataTerminalAnimate;", "docSyntax": "[dataTerminal, step] call BIS_fnc_dataTerminalAnimate", "syntax": "[dataTerminal,step] call BIS_fnc_dataTerminalAnimate"}, "BIS_fnc_dataTerminalColor": {"version": "FNC", "tags": "", "description": "Set Data Terminal colors for its different steps. Steps are:", "example": "[myTerminal, \"purple\", \"red\", \"orange\"] call BIS_fnc_dataTerminalColor;", "docSyntax": "[dataTerminal, step1color, step2color, step3color] call BIS_fnc_dataTerminalColor", "syntax": "[dataTerminal,step1color,step2color,step3color] call BIS_fnc_dataTerminalColor"}, "BIS_fnc_dbClassCheck": {"version": "FNC", "tags": "", "description": "Check if class exists in Scripted Database.", "example": "[[\"#MILLER\", [\"&NAME\", \"Miller\", \"&UID\", \"1234\", \"&MONEY\", 1000], [\"miller\"]] call BIS_fnc_dbClassCheck //\u00a0true", "docSyntax": "[databaseArray, path] call BIS_fnc_dbClassCheck", "syntax": "[databaseArray,path] call BIS_fnc_dbClassCheck"}, "BIS_fnc_dbClassId": {"version": "FNC", "tags": "", "description": "Converts string to class definition.", "example": "\"miller\" call BIS_fnc_dbClassID; //\u00a0\"#MILLER\"", "docSyntax": "text call BIS_fnc_dbClassId", "syntax": "<string> call BIS_fnc_dbClassId"}, "BIS_fnc_dbClassIndex": {"version": "FNC", "tags": "", "description": "Returns indices leading to given class.", "example": "[[\"#MILLER\", [\"&NAME\", \"Miller\", \"&UID\", \"1234\", \"&MONEY\", 1000]], [\"miller\"]] call BIS_fnc_dbClassIndex; //\u00a0[0]", "docSyntax": "[database, path] call BIS_fnc_dbClassIndex", "syntax": "[database,path] call BIS_fnc_dbClassIndex"}, "BIS_fnc_dbClassList": {"version": "FNC", "tags": "", "description": "Returns all classes within class.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]], []] call BIS_fnc_dbClassList; //\u00a0[\"MILLER\",\"TERRA\"]", "docSyntax": "[database, path] call BIS_fnc_dbClassList", "syntax": "[database,path] call BIS_fnc_dbClassList"}, "BIS_fnc_dbClassRemove": {"version": "FNC", "tags": "", "description": "Remove class from Scripted Database. The function does not return the modified database but modifies the passed array directly.", "example": "private _db = [\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]]; [_db, [\"terra\"]] call BIS_fnc_dbClassRemove; //\u00a0true _db //\u00a0[\"#MILLER\",[\"&KILLS\",1000]]", "docSyntax": "[database, path] call BIS_fnc_dbClassRemove", "syntax": "[database,path] call BIS_fnc_dbClassRemove"}, "BIS_fnc_dbClassReturn": {"version": "FNC", "tags": "", "description": "Returns content of given class.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]], [\"miller\"]] call BIS_fnc_dbClassReturn; //\u00a0[\"&KILLS\", 1000]", "docSyntax": "[database, path] call BIS_fnc_dbClassReturn", "syntax": "[database,path] call BIS_fnc_dbClassReturn"}, "BIS_fnc_dbClassSet": {"version": "FNC", "tags": "", "description": "Add class to Scripted Database. The function modifies the passed array and returns a success flag.", "example": "private _db = [\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]]; [_db, [\"kavala\"], [\"&POPULATION\", 42]] call BIS_fnc_dbClassSet; _db //\u00a0[\"#MILLER\",[\"&KILLS\",1000],\"#TERRA\",[\"&WEAPON\",\"MX 6.5mm\"],\"#KAVALA\",[\"&POPULATION\",42]]", "docSyntax": "[database, path, (value)] call BIS_fnc_dbClassSet", "syntax": "[database,path,(<scalar>)] call BIS_fnc_dbClassSet"}, "BIS_fnc_dbConfigPath": {"version": "FNC", "tags": "", "description": "If there is a database present in the config (config.cpp or descritpion.ext) then this function can be used to get the config path of the passed array. So it basically converts the array into a config entry.", "docSyntax": "[path, config] call BIS_fnc_dbConfigPath", "syntax": "[path,config] call BIS_fnc_dbConfigPath"}, "BIS_fnc_dbImportConfig": {"version": "FNC", "tags": "", "description": "Copy config classes and adds them to Scripted Database. Config values can not be passed through this function. The passed array gets modified.", "docSyntax": "[database, path, config] call BIS_fnc_dbImportConfig", "syntax": "[database,path,config] call BIS_fnc_dbImportConfig"}, "BIS_fnc_dbImportXML": {"version": "FNC", "tags": "", "description": "Import XML file into Scripted Database.", "example": "private _xmlDB = \"myFile.xml\" call BIS_fnc_dbImportXML;", "docSyntax": "xmlFile call BIS_fnc_dbImportXML", "syntax": "xmlFile call BIS_fnc_dbImportXML"}, "BIS_fnc_dbIsClass": {"version": "FNC", "tags": "", "description": "Checks if string is class definition.", "example": "\"#MYCLASS\" call BIS_fnc_dbIsClass; //\u00a0true \"#myclass\" call BIS_fnc_dbIsClass; //\u00a0true \"MYCLASS\" call BIS_fnc_dbIsClass; //\u00a0false 1234 call BIS_fnc_dbIsClass; //\u00a0false", "docSyntax": "text call BIS_fnc_dbIsClass", "syntax": "<string> call BIS_fnc_dbIsClass"}, "BIS_fnc_dbIsValue": {"version": "FNC", "tags": "", "description": "Checks if string is value definition.", "example": "\"&MYVALUE\" call BIS_fnc_dbIsValue; //\u00a0true \"&myvalue\" call BIS_fnc_dbIsValue; //\u00a0true \"MYVALUE\" call BIS_fnc_dbIsValue; //\u00a0false 1234 call BIS_fnc_dbIsValue; //\u00a0false", "docSyntax": "text call BIS_fnc_dbIsValue", "syntax": "<string> call BIS_fnc_dbIsValue"}, "BIS_fnc_dbPrint": {"version": "FNC", "tags": "", "description": "Copy Scripted Database content into clipboard for evaluation. Text will be formatted as config.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]]] call BIS_fnc_dbPrint;", "docSyntax": "[database, tabs] call BIS_fnc_dbPrint", "syntax": "[database,tabs] call BIS_fnc_dbPrint"}, "BIS_fnc_dbSymbolClass": {"version": "FNC", "tags": "", "description": "A getter function to return the symbol used for declaring a class.", "example": "call BIS_fnc_dbSymbolClass; //\u00a0#", "docSyntax": "call BIS_fnc_dbSymbolClass", "syntax": "call BIS_fnc_dbSymbolClass"}, "BIS_fnc_dbSymbolValue": {"version": "FNC", "tags": "", "description": "A getter function to return the symobl used for declaring a value.", "example": "call BIS_fnc_dbSymbolValue; //\u00a0&", "docSyntax": "call BIS_fnc_dbSymbolValue", "syntax": "call BIS_fnc_dbSymbolValue"}, "BIS_fnc_dbValueCheck": {"version": "FNC", "tags": "", "description": "Check if value exists in Scripted Database.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]]] call BIS_fnc_dbValueCheck; //\u00a0true", "docSyntax": "[database, path] call BIS_fnc_dbValueCheck", "syntax": "[database,path] call BIS_fnc_dbValueCheck"}, "BIS_fnc_dbValueId": {"version": "FNC", "tags": "", "description": "Converts string to value definition or vice versa.", "example": "\"MYVALUE\" call BIS_fnc_dbValueId; //\u00a0\"&MYVALUE\"", "docSyntax": "valueString call BIS_fnc_dbValueId", "syntax": "valueString call BIS_fnc_dbValueId"}, "BIS_fnc_dbValueIndex": {"version": "FNC", "tags": "", "description": "Returns indexes leading to given value.", "docSyntax": "[database, path] call BIS_fnc_dbValueIndex", "syntax": "[database,path] call BIS_fnc_dbValueIndex"}, "BIS_fnc_dbValueList": {"version": "FNC", "tags": "", "description": "Returns all values within class.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]], [\"miller\"]] call BIS_fnc_dbValueList; //\u00a0[\"KILLS\", \"RANK\"]", "docSyntax": "[database, path] call BIS_fnc_dbValueList", "syntax": "[database,path] call BIS_fnc_dbValueList"}, "BIS_fnc_dbValueRemove": {"version": "FNC", "tags": "", "description": "Remove value from Scripted Database.", "docSyntax": "[database, path] call BIS_fnc_dbValueRemove", "syntax": "[database,path] call BIS_fnc_dbValueRemove"}, "BIS_fnc_dbValueReturn": {"version": "FNC", "tags": "", "description": "Returns content of given value.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]], [\"miller\",\"kills\"]] call BIS_fnc_dbValueReturn; //\u00a01000", "docSyntax": "[database, path, (defaultValue)] call BIS_fnc_dbValueReturn", "syntax": "[database,path,(defaultValue)] call BIS_fnc_dbValueReturn"}, "BIS_fnc_dbValueSet": {"version": "FNC", "tags": "", "description": "Add value to Scripted Database. If the provided path does not exist it is created, otherwise the value is overwritten. The passed array gets modified.", "example": "private _db = [\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]]; [_db, [\"miller\",\"kills\"],200] call BIS_fnc_dbValueSet; _db //\u00a0[\"#MILLER\",[\"&KILLS\",200,\"&RANK\",\"CAPTAIN\"]]", "docSyntax": "[database, path, newvalue] call BIS_fnc_dbValueSet", "syntax": "[database,path,newvalue] call BIS_fnc_dbValueSet"}, "BIS_fnc_debugConsoleExec": {"version": "FNC", "tags": "", "description": "Executes Debug Console code.", "example": "[1,{hint \"Hello Players!\"}] call BIS_fnc_debugConsoleExec;", "docSyntax": "[target, code] call BIS_fnc_debugConsoleExec", "syntax": "[<object>,<code>] call BIS_fnc_debugConsoleExec"}, "BIS_fnc_debugProfile": {"version": "FNC", "tags": "", "description": "Purges user profile from unwanted BIS_fnc_diagAAR data. If more than 7500 entries are found, the user is asked to delete profileNamespace variable BIS_fnc_diagAAR_data.", "example": "call BIS_fnc_debugProfile;", "docSyntax": "call BIS_fnc_debugProfile", "syntax": "call BIS_fnc_debugProfile"}, "BIS_fnc_decodeFlags": {"version": "FNC", "tags": "", "description": "Decodes a single scalar into array of unique binary flags with indexes between 0-15.", "example": "private _decodedFlags = 13 call BIS_fnc_decodeFlags;//Returns [0,2,3]", "docSyntax": "scalar call BIS_fnc_decodeFlags", "syntax": "scalar call BIS_fnc_decodeFlags"}, "BIS_fnc_decodeFlags2": {"version": "FNC", "tags": "", "description": "Decodes a single scalar into array of unique binary flags (zeroes or ones).", "example": "private _result = 13 call BIS_fnc_decodeFlags2; //\u00a0returns [1,0,1,1]", "docSyntax": "[value, size] call BIS_fnc_decodeFlags2", "syntax": "[<scalar>,size] call BIS_fnc_decodeFlags2"}, "BIS_fnc_decodeFlags4": {"version": "FNC", "tags": "", "description": "/* Decodes a single scalar into array of unique 4-state flags (values 0,1,2,3). Max. number that can be decoded is 16777215 (= 4^12 - 1). An optional parameter can by supplied to resize the output. Syntax: ------- _flags:array = _encodedFlags:scalar call BIS_fnc_decodeFlags4; _flags:array = [_encodedFlags:scalar,_size:scalar] call BIS_fnc_decodeFlags4; Example: -------- [1,0,2,3] = 225 call BIS_fnc_decodeFlags4; [1,0,2,3,0,0,0,0] = [225,8] call BIS_fnc_decodeFlags4; Explanation: ------------ 225 -> 11 10 00 01 -> [1,0,2,3] */", "docSyntax": "[] call BIS_fnc_decodeFlags4", "syntax": "[] call BIS_fnc_decodeFlags4"}, "BIS_fnc_decodeFlags8": {"version": "FNC", "tags": "", "description": "/* Decodes a single scalar into array of unique 8-state flags (values 0,1,2,3,4,5,6,7). Max. number that can be decoded is 16777215 (= 8^8 - 1). An optional parameter can by supplied to resize the output. Syntax: ------- _flags:array = _encodedFlags:scalar call BIS_fnc_decodeFlags8; _flags:array = [_encodedFlags:scalar,_size:scalar] call BIS_fnc_decodeFlags8; Example: -------- [7,2,3,0,1] = 4311 call BIS_fnc_decodeFlags8; [7,2,3,0,1,0,0,0] = [4311,8] call BIS_fnc_decodeFlags8; Explanation: ------------ 4311 -> 0001 0000 1101 0111 -> 001 000 011 010 111 -> [7,2,3,0,1] */", "docSyntax": "[] call BIS_fnc_decodeFlags8", "syntax": "[] call BIS_fnc_decodeFlags8"}, "BIS_fnc_deleteCounter": {"version": "FNC", "tags": "", "description": "/* Author: Killzone_Kid Description: Delete given counter Parameter(s): 0: STRING - variable name of counter ARRAY in format [variableName,nameSpace], where nameSpace can be object, group or missionNameSpace/uiNameSpace Returns: NOTHING */ #define VAR_SPACES [currentNamespace, objNull, displayNull, controlNull, grpNull, locationNull, taskNull, teamMemberNull]", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_deleteInventory": {"version": "FNC", "tags": "", "description": "Delete loadout saved using BIS_fnc_saveInventory.", "example": "[player, [missionNamespace, \"BIS_inv\"]] call BIS_fnc_deleteInventory;", "docSyntax": "[unit,input] call BIS_fnc_deleteInventory", "syntax": "[<objUnit>,input] call BIS_fnc_deleteInventory"}, "BIS_fnc_deleteTask": {"version": "FNC", "tags": "", "description": "Deletes given task.", "example": "[\"task_1\"] call BIS_fnc_deleteTask;", "docSyntax": "[taskID, owner, removeFromJIP] call BIS_fnc_deleteTask", "syntax": "[taskID,owner,removeFromJIP] call BIS_fnc_deleteTask"}, "BIS_fnc_deleteVehicleCrew": {"version": "FNC", "tags": "", "description": "Deletes specific crew member directly from the vehicle.", "example": "[BIS_tank, gunner BIS_tank] call BIS_fnc_deleteVehicleCrew;", "docSyntax": "[vehicle, crewMember] call BIS_fnc_deleteVehicleCrew", "syntax": "[<objVehicle>,crewMember] call BIS_fnc_deleteVehicleCrew"}, "BIS_fnc_deltaTime": {"version": "FNC", "tags": "", "description": "Calculates and returns the time's delta between previous and current call to this function.", "example": "[\"TAG_duration\"] call BIS_fnc_deltaTime; //\u00a0Defines the starting point //\u00a0... private _duration1 = [\"TAG_duration\"] call BIS_fnc_deltaTime; //\u00a0Gets time between starting point and now //\u00a0... private _duration2 = [\"TAG_duration\"] call BIS_fnc_deltaTime; //\u00a0Gets time between _duration1 and now [\"TAG_duration\", true] call BIS_fnc_deltaTime; //\u00a0deletes the global variable \"TAG_duration\"", "docSyntax": "[id, clear] call BIS_fnc_deltaTime", "syntax": "[<scalar>,clear] call BIS_fnc_deltaTime"}, "BIS_fnc_destroyCity": {"version": "FNC", "tags": "", "description": "Destroys building in given area based on input seed.", "example": "[\"destroyBase\", 500, 42, [ourHouseInTheMiddleOfTheStreet]] call BIS_fnc_destroyCity;", "docSyntax": "[position, areaSize, seed, blacklist] call BIS_fnc_destroyCity", "syntax": "[position,areaSize,seed,blacklist] call BIS_fnc_destroyCity"}, "BIS_fnc_destroyer01AnimateHangarDoors": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a sub function designed to handle animations of ship hangar doors. Used in Eden attributes and objects user actions. Execution: - Call from script. Example: [_shipPart, _value, false] spawn BIS_fnc_destroyer01AnimateHangarDoors; Required: Object (ship) must have all animations correctly defined and user actions configured. Parameter(s): _this select 0: mode (Scalar) 0: ship-part object and 1: animation state of doors 2: animation speed (instant = true/smooth=false); Returns: nothing Result: Ship's hangar door animation is played with sounds added. */", "docSyntax": "[] call BIS_fnc_destroyer01AnimateHangarDoors", "syntax": "[] call BIS_fnc_destroyer01AnimateHangarDoors"}, "BIS_fnc_destroyer01EdenDelete": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a sub function designed to delete dynamic ships (multi-part structure) in EDEN editor. Ship consists of multiple sub-objects that are linked together based on precise memory point positions in 3D space. Function will delete ship parts in EDEN editor after main object is deleted. Execution: - Call from EH on the main ship base model (blank model with memory points and reference config). Example: class Eventhandlers { init = \"_this call BIS_fnc_Destroyer01Init\"; //main init fnc, will assemble ship in game AttributesChanged3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\"; //function to update objects position in EDEN editor if attributes changed by player Dragged3DEN = \"_this call BIS_fnc_Destroyer01PosUpdate\"; //function to update objects position in EDEN editor if attributes changed by player RegisteredToWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\"; //initial EDEN init fnc (main init is still called) UnregisteredFromWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenDelete\"; //function to delete all ship objects in EDEN editor }; Requirements: - An array of ship parts/objects as a variable attached to main ship base. This array is created by main BIS_fnc_Destroyer01Init. Parameter(s): _this select 0: mode (Scalar) 0: ship Base/object and 1: array of objects in variable in base objects name-space [\"bis_carrierParts\", []]; Returns: nothing Result: Ship's parts are deleted in EDEN editor. */", "docSyntax": "[] call BIS_fnc_destroyer01EdenDelete", "syntax": "[] call BIS_fnc_destroyer01EdenDelete"}, "BIS_fnc_destroyer01EdenInit": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a sub function designed to assemble dynamic ship (multi-part structure) in EDEN editor. Ship consists of multiple sub-objects that are linked together based on precise memory point positions in 3D space. Function will update initial init setup on EDEN editor invoked. Execution: - Call from EH on the main ship's base model (blank model with memory points and reference config). Example: class Eventhandlers { init = \"_this call BIS_fnc_Destroyer01Init\"; //main init fnc, will assemble ship in game AttributesChanged3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\"; //function to update objects position in EDEN editor if attributes changed by player Dragged3DEN = \"_this call BIS_fnc_Destroyer01PosUpdate\"; //function to update objects position in EDEN editor if attributes changed by player RegisteredToWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\"; //initial EDEN init fnc (main init is still called) UnregisteredFromWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenDelete\"; //function to delete all ship objects in EDEN editor }; Requirements: - An array of ship parts/objects as a variable attached to main ship base. This array is created by main BIS_fnc_Destroyer01Init. Parameter(s): _this select 0: mode (Scalar) 0: ship Base/object and 1: array of objects in variable in base objects names-pace [\"bis_carrierParts\", []]; Returns: nothing Result: Ship's position is updated in EDEN editor. */", "docSyntax": "[] call BIS_fnc_destroyer01EdenInit", "syntax": "[] call BIS_fnc_destroyer01EdenInit"}, "BIS_fnc_destroyer01GetShipPart": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a helper function to get ship components (objects) by class name from stored array in ships master component's name-space (\"BIS_CarrierParts\" array). Execution: - Call from script or config. Example: [_this, 'Land_Destroyer_01_hull_05_F'] call BIS_fnc_destroyer01GetShipPart; Requirements: - Ships master object must be present. Ships master object must have initialized the array of sub components. Parameter(s): _this select 0: mode (Scalar) 0: ship Base/object 1: ship part class name to find Returns: object (ship part that matches selected class name) Result: n/a */", "docSyntax": "[] call BIS_fnc_destroyer01GetShipPart", "syntax": "[] call BIS_fnc_destroyer01GetShipPart"}, "BIS_fnc_destroyer01HandleDamage": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a damage visual FX simulation function designed to animate ships bridge windows when shot. Due to engine limitation (damage simulation is disabled for indestructible objects e.g. ships components) this workaround is applied. Execution: - Call from EH on the ship's model part with windows. Example: class Eventhandlers { HitPart = \"_this call BIS_fnc_Destroyer01HandleDamage;\"; }; Requirements: - Compatible object (e.g. ship component) must have a set of selections that are setup and named by convention. Selections must be defined as hidden selections in order for setObjectTexture to work. Parameter(s): _this select 0: mode (Scalar) 0: event Handler Array as documented here - https://community.bistudio.com/wiki/Arma_3:_Event_Handlers#HitPart Returns: nothing Result: Destroyer (ship) window textures are swapped for damaged ones. Simple swap. */", "docSyntax": "[] call BIS_fnc_destroyer01HandleDamage", "syntax": "[] call BIS_fnc_destroyer01HandleDamage"}, "BIS_fnc_destroyer01Init": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a main function designed to assemble dynamic ship (multi-part structure). Ship consists of multiple sub-objects that are linked together based on precise memory point positions in 3D space. Execution: - Call from EH on the main ship's base model (blank model with memory points and reference config). Example: class Eventhandlers { init = \"_this call BIS_fnc_Destroyer01Init\"; //main init fnc, will assemble ship in game AttributesChanged3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\"; //function to update objects position in EDEN editor if attributes changed by player Dragged3DEN = \"_this call BIS_fnc_Destroyer01PosUpdate\"; //function to update objects position in EDEN editor if attributes changed by player RegisteredToWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\"; //initial EDEN init fnc (main init is still called) UnregisteredFromWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenDelete\"; //function to delete all ship objects in EDEN editor }; Requirements: - Compatible object (carrier/ship) must have a base model with reference memory points and set of parts defined as separate objects in cfgVehicles config with their own models. Main ship base must have a definition of all listed sub parts and memory point position to reference it is placement in 3D space. Example in cfgVehicles class for ship base multiStructureParts[] = { {\"Land_Destroyer_01_hull_01_F\",\"pos_hull_1\"}, {\"Land_Destroyer_01_hull_02_F\",\"pos_hull_2\"}, {\"Land_Destroyer_01_hull_03_F\",\"pos_hull_3\"}, {\"Land_Destroyer_01_hull_04_F\",\"pos_hull_4\"}, {\"Land_Destroyer_01_hull_05_F\",\"pos_hull_5\"}, {\"Land_Destroyer_01_interior_02_F\",\"pos_hull_2\"}, {\"Land_Destroyer_01_interior_03_F\",\"pos_hull_3\"}, {\"Land_Destroyer_01_interior_04_F\",\"pos_hull_4\"}, {\"Land_HelipadEmpty_F\",\"pos_heliPad\"}, {\"ShipFlag_US_F\",\"pos_Flag\"} }; Parameter(s): _this select 0: mode (Scalar) 0: ship Base/object and parameters from config Returns: exposes and array of objects (ship parts) to other scripts for easy access as variable in it is own object name-space. Result: Destroyer (ship) is assembled */", "docSyntax": "[] call BIS_fnc_destroyer01Init", "syntax": "[] call BIS_fnc_destroyer01Init"}, "BIS_fnc_destroyer01InitHullNumbers": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a sub function designed to customize ships hull numbers. Execution: - Call from vehicles config of eden attributes. Example: class CustomShipNumber1 { displayName=\"$STR_3den_object_attribute_CustomShipNumber1_displayname\"; tooltip=\"$STR_3den_object_attribute_CustomShipNumber1_tooltip\"; property=\"CustomShipNumber1\"; control=\"EditShort\"; expression=\"[([_this, 'Land_Destroyer_01_hull_01_F'] call BIS_fnc_destroyer01GetShipPart), _value, 0] spawn BIS_fnc_destroyer01InitHullNumbers;\"; defaultValue=\"0\"; validate = \"number\"; condition = \"object\"; typeName = \"NUMBER\"; }; Required: Object (ship) must have predefined hidden selections for hull number. Pass object of ship part component which contains numbered selections. Parameter(s): _this select 0: mode (Scalar) 0: ship-part object and 1: number that should be displayed on the selection 2: selection number Returns: nothing Result: Ship's hull number is set to specified number. */", "docSyntax": "[] call BIS_fnc_destroyer01InitHullNumbers", "syntax": "[] call BIS_fnc_destroyer01InitHullNumbers"}, "BIS_fnc_destroyer01OperateHangarDoors": {"version": "FNC", "tags": "", "description": "This function is designed to handle animations of ship hangar doors from vehicle user action (see Examples). It calls BIS_fnc_destroyer01AnimateHangarDoors.", "example": "[this, 1] call BIS_fnc_destroyer01OperateHangarDoors; //\u00a0to open doors [this, 0] call BIS_fnc_destroyer01OperateHangarDoors; //\u00a0to close doors", "docSyntax": "[shipPart, mode] call BIS_fnc_destroyer01OperateHangarDoors", "syntax": "[shipPart,mode] call BIS_fnc_destroyer01OperateHangarDoors"}, "BIS_fnc_destroyer01PlayHangarDoorSound": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a sub function designed to add sounds required for ship hangar door animation. Execution: - Call from main script that handles the hangar door animation. Example: [_shipPart, _soundPos, _animationState] spawn BIS_fnc_destroyer01PlayHangarDoorSound; Parameter(s): _this select 0: mode (Scalar) 0: ship-part object and 1: position in word coordinates where the sound should be played (modelToWorldWorld) 2: animation state of hangar doors Returns: nothing Result: Ship's hangar door animation gets a sound source added. */", "docSyntax": "[] call BIS_fnc_destroyer01PlayHangarDoorSound", "syntax": "[] call BIS_fnc_destroyer01PlayHangarDoorSound"}, "BIS_fnc_destroyer01PosUpdate": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This is a sub function designed to update dynamic ships (multi-part structure) position in EDEN editor. Ship consists of multiple sub-objects that are linked together based on precise memory point positions in 3D space. Function will update initial object positions when player drags the object in EDEN editor. Execution: - Call from EH on the main ship base model (blank model with memory points and reference config). Example: class Eventhandlers { init = \"_this call BIS_fnc_Destroyer01Init\"; //main init fnc, will assemble ship in game AttributesChanged3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\"; //function to update objects position in EDEN editor if attributes changed by player Dragged3DEN = \"_this call BIS_fnc_Destroyer01PosUpdate\"; //function to update objects position in EDEN editor if attributes changed by player RegisteredToWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenInit\"; //initial EDEN init fnc (main init is still called) UnregisteredFromWorld3DEN = \"_this call BIS_fnc_Destroyer01EdenDelete\"; //function to delete all ship objects in EDEN editor }; Requirements: - An array of ship parts/objects as a variable attached to main ship base. This array is created by main BIS_fnc_Destroyer01Init. Parameter(s): _this select 0: mode (Scalar) 0: ship Base/object and 1: array of objects in variable in base objects name-space [\"bis_carrierParts\", []]; Returns: nothing Result: Ship's position is updated in EDEN editor. */", "docSyntax": "[] call BIS_fnc_destroyer01PosUpdate", "syntax": "[] call BIS_fnc_destroyer01PosUpdate"}, "BIS_fnc_diagAAR": {"version": "FNC", "tags": "", "description": "Fill an AAR (After Action Review) display with data and Event Handlers.", "example": "[\"Init\", [_anAARDisplay]] call BIS_fnc_diagAAR;", "docSyntax": "[mode, arguments] call BIS_fnc_diagAAR", "syntax": "[mode,arguments] call BIS_fnc_diagAAR"}, "BIS_fnc_diagAARrecord": {"version": "FNC", "tags": "", "description": "Starts recording units position and events for an AAR (After Action Review).", "example": "call BIS_fnc_diagAARrecord;", "docSyntax": "call BIS_fnc_diagAARrecord", "syntax": "call BIS_fnc_diagAARrecord"}, "BIS_fnc_diagAnim": {"version": "FNC", "tags": "", "description": "Displays or logs animation states:", "example": "call BIS_fnc_diagAnim;", "docSyntax": "[target] call BIS_fnc_diagAnim", "syntax": "[<object>] call BIS_fnc_diagAnim"}, "BIS_fnc_diagBulletCam": {"version": "FNC", "tags": "", "description": "Add a \"bullet camera\" to shots fired by the specified unit.", "example": "player call BIS_fnc_diagBulletCam;", "docSyntax": "unit call BIS_fnc_diagBulletCam", "syntax": "<objUnit> call BIS_fnc_diagBulletCam"}, "BIS_fnc_diagConfig": {"version": "FNC", "tags": "", "description": "/* Description: Prints config entries. Parameter(s): 0: CONFIG - config class which will be searched (default: configFile) 1: STRING or ARRAY - entry name(s) whose values will be printed 2: STRING - scan mode, can be one of following: \"controls\" - recursively scans controls in root, class controls, class controlsBackground and in RscControlsGroup controls (type = 15). \"turrets\" - recursively scans vehicles's turrets. \"weapons\" - scans weapon muzzles and modes. (default) - scans just class roots. Returns: STRING Results are printed to debug log and wiki compatible table is copied to clipboard. */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_diagFindMissingAuthors": {"version": "FNC", "tags": "", "description": "Copies a list of objects to the clipboard which miss the author attribute.", "example": "call BIS_fnc_diagFindMissingAuthors;", "docSyntax": "call BIS_fnc_diagFindMissingAuthors", "syntax": "call BIS_fnc_diagFindMissingAuthors"}, "BIS_fnc_diagHit": {"version": "FNC", "tags": "", "description": "Tracks received wounds. (getNumber (missionConfigFile >> \"diagHit\") > 0) has to be true.", "example": "call BIS_fnc_diagHit;", "docSyntax": "call BIS_fnc_diagHit", "syntax": "call BIS_fnc_diagHit"}, "BIS_fnc_diagJIRAlink": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_diagJIRAlink", "syntax": "[] call BIS_fnc_diagJIRAlink"}, "BIS_fnc_diagKey": {"version": "FNC", "tags": "", "description": "Tracks pressed keys. (getNumber (missionConfigFile >> \"diagKey\") > 0) has to be true.", "example": "call BIS_fnc_diagKey;", "docSyntax": "call BIS_fnc_diagKey", "syntax": "call BIS_fnc_diagKey"}, "BIS_fnc_diagKeyLayout": {"version": "FNC", "tags": "", "description": "/* Description: Exports default key layout to wiki template. Parameter(s): _this select 0: STRING - category, can be one of following \"\" - all controls in game \"All\" \"BasicInfantryControls\" \"Car\" \"Air\" \"Helicopter\" \"Submarine\" \"Buldozer\" \"UserActions\" _this select 1: STRING - selection method, can be one of following \"\" - single tap \"double\" - double tap \"LCtrl\" - with left control pressed \"RCtrl\" - with right control pressed \"LShift\" - with left shift pressed \"RShift\" - with right shift pressed Returns: STRING - wiki export text (also copied to clipboard) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_diagKeyTest": {"version": "FNC", "tags": "", "description": "Returns all user actions according to mode.", "example": "0 call BIS_fnc_diagKeyTest;", "docSyntax": "mode call BIS_fnc_diagKeyTest", "syntax": "mode call BIS_fnc_diagKeyTest"}, "BIS_fnc_diagKnownAsTarget": {"version": "FNC", "tags": "", "description": "/* File: fn_diagKnownAsTarget.sqf Description: Visualize and profile which units know about one specific unit and how much they do. Calling function again stops diagnostics. Parameter(s): _this select 0: profile unit (Object) [default player] _this select 1: radius (Scalar - meters) [default 1000m] Returns: - */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_diagKnownTargets": {"version": "FNC", "tags": "", "description": "Visualize and profile which units one specific unit knows about and how much. Calling function again stops diagnostics.", "example": "[leader player, 500] call BIS_fnc_diagKnownTargets;", "docSyntax": "[target, radius] call BIS_fnc_diagKnownTargets", "syntax": "[<object>,radius] call BIS_fnc_diagKnownTargets"}, "BIS_fnc_diagLoop": {"version": "FNC", "tags": "", "description": "Runs scripted loop. Repeated call terminates previous loops.", "example": "[{ systemChat \"Loop!\" }, 0.5] spawn BIS_fnc_diagLoop;", "docSyntax": "[code, delay] spawn BIS_fnc_diagLoop", "syntax": "[<code>,<scalar>] spawn BIS_fnc_diagLoop"}, "BIS_fnc_diagMacros": {"version": "FNC", "tags": "", "description": "/* Description: Exports config macros. Parameter(s): 0: CONFIG or ARRAY - config container to be searched (e.g. configFile >> \"CfgVehicles\") or list of classes or classnames 1: ARRAY - list of macro names to be used (e.g. [\"MAPSIZE\",\"NAMESOUND\"]) 2 (Optional): STRING - macro category name (when param 0 is CONFIG, its classname is used by default - e.g. \"CfgVehicles\") Returns: STRING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_diagMacrosAuthor": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_diagMacrosEditorPreview": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_diagMacrosEditorPreview", "syntax": "[] call BIS_fnc_diagMacrosEditorPreview"}, "BIS_fnc_diagMacrosMapSize": {"version": "FNC", "tags": "", "description": "/* Description: Prints mapSize values based on real object size and copies it to clipboard. Mission has to be running on order to get the values. Parameter(s): 0: CONFIG or ARRAY - either config container, or list of classes or classnames 1: STRING - output mode, can be on of following: \"wiki\" - wiki table \"config\" - #define macros with model dimension values \"config_current\" - #define macros with current config values 2: ARRAY - list of classnames which will be excluded from the scan Returns: STRING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_diagMacrosNameSound": {"version": "FNC", "tags": "", "description": "Detects vehicle types and prints their radio protocol definitions to clipboard.", "example": "call BIS_fnc_diagMacrosNameSound;", "docSyntax": "call BIS_fnc_diagMacrosNameSound", "syntax": "call BIS_fnc_diagMacrosNameSound"}, "BIS_fnc_diagMacrosSimpleObject": {"version": "FNC", "tags": "", "description": "/* Generates simple object config data. Parameters: 0: OBJECT or ARRAY - ground position where ground objects will be created (default: position calculated 15 meters away from player) 1: SCALAR or BOOL - autolog mode (default: false) 0 or false - no autolog, results will be only stored in clipboard 1 or true - autolog on, results will be stored in \\A3\\macros_CfgVehicles_simpleObject_auto_A3.hpp file. 2 - autlog on + world name, random number and custom suffix are appended to name of generated file to prevent overwriting and provide extra info 2: ARRAY - classes you want to scan, use [] to scan all (default: []). 3: OBJECT or ARRAY - sea position where ground objects will be created (default: position calculated 15 meters away from player) 4: STRING - custom suffix added to filename if autolog is used (default: \"\"). Example: bis_scriptHandle = [] spawn BIS_fnc_diagMacrosSimpleObject; Expected output per class (animate and hide arrays can have varying amount of elements): #define CFGVEHICLES_SIMPLEOBJECT_class_F\\ class SimpleObject\\ {\\ animate[] =\\ {\\ {\"animationName1\", 1},\\ {\"animationName2\", 2}\\ };\\ hide[] =\\ {\\ \"animationSelection1\",\\ \"animationSelection2\"\\ };\\ verticalOffsetAsl = 0;\\ }; */", "docSyntax": "[] call BIS_fnc_diagMacrosSimpleObject", "syntax": "[] call BIS_fnc_diagMacrosSimpleObject"}, "BIS_fnc_diagMacrosVerify": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_diagMissionPositions": {"version": "FNC", "tags": "", "description": "Displays positions of units from all missions", "example": "[configFile >> \"CfgMissions\", true, false] call BIS_fnc_diagMissionPositions;", "docSyntax": "[configPath, allUnits, isCampaign] call BIS_fnc_diagMissionPositions", "syntax": "[configPath,allUnits,isCampaign] call BIS_fnc_diagMissionPositions"}, "BIS_fnc_diagMissionWeapons": {"version": "FNC", "tags": "", "description": "Lists all weapons and magazines available in a mission.", "example": "true call BIS_fnc_diagMissionWeapons;", "docSyntax": "[clipboard] call BIS_fnc_diagMissionWeapons", "syntax": "[clipboard] call BIS_fnc_diagMissionWeapons"}, "BIS_fnc_diagObjectPerformance": {"version": "FNC", "tags": "", "description": "/* Benchmarks objects vs. simple objects performance and exports the data into .csv sheet. Output format: classname,simulation,fpsClean,fpsObjects,fpsSimpleObjects Example: bis_scriptHandle = [] spawn BIS_fnc_diagObjectPerformance; */", "docSyntax": "[] call BIS_fnc_diagObjectPerformance", "syntax": "[] call BIS_fnc_diagObjectPerformance"}, "BIS_fnc_diagPreview": {"version": "FNC", "tags": "", "description": "Previews selected classes from given container.", "example": "[\"CfgVehicles\", \"Car\", 15, [0,0,0]] call BIS_fnc_diagPreview;", "docSyntax": "[container, parentClass, distance, startPos] call BIS_fnc_diagPreview", "syntax": "[container,parentClass,<scalar>,startPos] call BIS_fnc_diagPreview"}, "BIS_fnc_diagPreviewCycle": {"version": "FNC", "tags": "", "description": "Previews selected class from the list. When cheat1 (?) is activated, classnames will be shown instead of display names.", "example": "[\"CfgVehicles\"] call BIS_fnc_diagPreviewCycle;", "docSyntax": "[container, position, vector, display] call BIS_fnc_diagPreviewCycle", "syntax": "[container,position,vector,<uiDisplay>] call BIS_fnc_diagPreviewCycle"}, "BIS_fnc_diagPreviewVehicleCrew": {"version": "FNC", "tags": "", "description": "Creates vehicles with their crew.", "example": "[\"B_MRAP_01_F\", [5,5], 10] call BIS_fnc_diagPreviewVehicleCrew;", "docSyntax": "[class, dimensions, distance] call BIS_fnc_diagPreviewVehicleCrew", "syntax": "[class,dimensions,<scalar>] call BIS_fnc_diagPreviewVehicleCrew"}, "BIS_fnc_diagRadio": {"version": "FNC", "tags": "", "description": "Tracks played radio sentences.", "example": "call BIS_fnc_diagRadio;", "docSyntax": "call BIS_fnc_diagRadio", "syntax": "call BIS_fnc_diagRadio"}, "BIS_fnc_diagVehicleIcons": {"version": "FNC", "tags": "", "description": "Previews all vehicle icons on map.", "example": "[\"all\", getPos player] call BIS_fnc_diagVehicleIcons;", "docSyntax": "[parentClass, position, map] call BIS_fnc_diagVehicleIcons", "syntax": "[parentClass,position,<objMap>] call BIS_fnc_diagVehicleIcons"}, "BIS_fnc_diagWiki": {"version": "FNC", "tags": "", "description": "Scans specific config folder and outputs the values in wiki format.", "example": "[\"RadioProtocol_Sent\"] call BIS_fnc_diagWiki;", "docSyntax": "[mode] call BIS_fnc_diagWiki", "syntax": "[mode] call BIS_fnc_diagWiki"}, "BIS_fnc_diaryHints": {"version": "FNC", "tags": "", "description": "#define DIARY_CATEGORY \"BIS_fnc_diaryHints\"", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_diaryMaps": {"version": "FNC", "tags": "", "description": "#define DIARY_CATEGORY \"BIS_fnc_diaryMaps\"", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_didJIP": {"version": "FNC", "tags": "", "description": "Return whether or not the local player joined the game while it was already in progress.", "example": "if ([] call BIS_fnc_didJIP) then { forceRespawn player };", "docSyntax": "[] call BIS_fnc_didJIP", "syntax": "[] call BIS_fnc_didJIP"}, "BIS_fnc_dirIndicator": {"version": "FNC", "tags": "", "description": "Show a 4-directions indicator.", "example": "[player, TheBoss, [0.706, 0.0745, 0.0196, 1]] call BIS_fnc_dirIndicator;", "docSyntax": "[origin, target, color, sizeCoef] call BIS_fnc_dirIndicator", "syntax": "[origin,<object>,<scalar>,sizeCoef] call BIS_fnc_dirIndicator"}, "BIS_fnc_dirtEffect": {"version": "FNC", "tags": "", "description": "Screen dirt (texture) postprocess. Displays dust PP according to damage obtained from near explosion; takes array from \"Explosion\" event handler.", "example": "[nil, 0.5] call BIS_fnc_dirtEffect;", "docSyntax": "[unit, damage] call BIS_fnc_dirtEffect", "syntax": "[<objUnit>,<scalar>] call BIS_fnc_dirtEffect"}, "BIS_fnc_dirTo": {"version": "FNC", "tags": "", "description": "Function which returns vector direction from pos1 to pos2.", "example": "sets unit1 in the direction of unit2", "docSyntax": "[param1, param2] call BIS_fnc_dirTo", "syntax": "[param1,param2] call BIS_fnc_dirTo"}, "BIS_fnc_disableLoading": {"version": "FNC", "tags": "", "description": "Disables the load/restart button. Currently only for BIS_fnc_cinemaBorder used within the Prologue and Survive campaigns. Only works in single player.", "example": "call BIS_fnc_disableLoading;", "docSyntax": "call BIS_fnc_disableLoading", "syntax": "call BIS_fnc_disableLoading"}, "BIS_fnc_disableRevive": {"version": "FNC", "tags": "", "description": "Disable revive on given unit.", "example": "[BIS_unit] call BIS_fnc_disableRevive;", "docSyntax": "[player] call BIS_fnc_disableRevive", "syntax": "[<objUnit>] call BIS_fnc_disableRevive"}, "BIS_fnc_disableSaving": {"version": "FNC", "tags": "", "description": "Controls the disabling of saving, stacking each request to prevent saving being enabled too early.", "example": "\"savingID\" call BIS_fnc_disableSaving;", "docSyntax": "id call BIS_fnc_disableSaving", "syntax": "<scalar> call BIS_fnc_disableSaving"}, "BIS_fnc_displayClouds": {"version": "FNC", "tags": "", "description": "#define DISPLAY (uinamespace getvariable 'hsim_RscClouds') #define CONTROL (DISPLAY displayctrl _idc) #define RSC_LAYER 759", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_displayColorGet": {"version": "FNC", "tags": "", "description": "Loads custom color settings from CfgUIDefault. If variables are not stored in profileNamespace yet, the function will declare them.", "example": "[\"GUI\", \"BCG_RGB\"] call BIS_fnc_displayColorGet;//Returns menu color", "docSyntax": "[tag, variable] call BIS_fnc_displayColorGet", "syntax": "[tag,variable] call BIS_fnc_displayColorGet"}, "BIS_fnc_displayColorSet": {"version": "FNC", "tags": "", "description": "Applies custom color settings to given Display. Display must be already using color macros, function will just refresh the values according to current color settings.", "example": "[configFile >> (GUI_classes select _forEachIndex), _x] call BIS_fnc_displayColorSet;", "docSyntax": "[displayClass, display, commitTime, code] call BIS_fnc_displayColorSet", "syntax": "[displayClass,<uiDisplay>,commitTime,<code>] call BIS_fnc_displayColorSet"}, "BIS_fnc_displayControls": {"version": "FNC", "tags": "", "description": "/* Description: Return all controls of given display class Parameter(s): _this select 0: CONFIG - display config _this select 1: NUMBER or CONFIG or STRING - type of returned values (control configs, their names or IDCs; default: configfile)) _this select 2: BOOL - true to search content of controls group (default: true) Returns: ARRAY */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_displayLoading": {"version": "FNC", "tags": "", "description": "Loading Screens init.", "example": "([_this, 2302] call (uiNamespace getVariable 'BIS_fnc_displayLoading')", "docSyntax": "[onLoad, id] call BIS_fnc_displayLoading", "syntax": "[onLoad,<scalar>] call BIS_fnc_displayLoading"}, "BIS_fnc_displayMission": {"version": "FNC", "tags": "", "description": "Returns main display of current mission/intro/outro. A cleaner alternative to findDisplay 46.", "example": "_mainDisplay = call BIS_fnc_displayMission;", "docSyntax": "call BIS_fnc_displayMission", "syntax": "call BIS_fnc_displayMission"}, "BIS_fnc_displayName": {"version": "FNC", "tags": "", "description": "Return given class displayName value. Return base class name if displayName not defined.", "example": "private _myDisplayName = [configFile >> \"CfgVehicles\" >> typeOf vehicle player] call BIS_fnc_displayName;", "docSyntax": "[config] call BIS_fnc_displayName", "syntax": "[config] call BIS_fnc_displayName"}, "BIS_fnc_displayResize": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_distance2D": {"version": "FNC", "tags": "", "description": "Returns the distance between two objects or positions.", "example": "[player, rescueHelicopter] call BIS_fnc_distance2D;", "docSyntax": "[param1, param2] call BIS_fnc_distance2D", "syntax": "[param1,param2] call BIS_fnc_distance2D"}, "BIS_fnc_distance2Dsqr": {"version": "FNC", "tags": "", "description": "Returns the SQUARE of the distance between the two objects or positions \"as the crow flies\" (ignoring elevation).", "example": "[player, soldier_1] call BIS_fnc_distance2Dsqr;", "docSyntax": "[pointA, pointB] call BIS_fnc_distance2Dsqr", "syntax": "[pointA,pointB] call BIS_fnc_distance2Dsqr"}, "BIS_fnc_door": {"version": "FNC", "tags": "", "description": "Changes animation phase of given door.", "example": "[_building, 5, 1] call BIS_fnc_door;", "docSyntax": "[building, doorIndex, animationPhase] call BIS_fnc_door", "syntax": "[building,doorIndex,animationPhase] call BIS_fnc_door"}, "BIS_fnc_doorClose": {"version": "FNC", "tags": "", "description": "Close a door with an animated doorhandle.", "example": "[building,\"doorAnimation\",\"animationUp\",\"animationDown\",1] call BIS_fnc_doorClose;", "docSyntax": "[building, doorAnimation, handleDownAnimation, doorHandleUpAnimation, animationPhase] call BIS_fnc_doorClose", "syntax": "[building,doorAnimation,handleDownAnimation,doorHandleUpAnimation,animationPhase] call BIS_fnc_doorClose"}, "BIS_fnc_doorNoHandleClose": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_doorNoHandleClose", "syntax": "[] call BIS_fnc_doorNoHandleClose"}, "BIS_fnc_doorNoHandleOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_doorNoHandleOpen", "syntax": "[] call BIS_fnc_doorNoHandleOpen"}, "BIS_fnc_doorOpen": {"version": "FNC", "tags": "", "description": "Open a door with an animated doorhandle.", "example": "[_house, \"door_1_rot\", nil, nil, 0.25] call BIS_fnc_doorOpen;", "docSyntax": "[building, doorAnimation, upDownAnimation, downUpAnimation, animationPhase] call BIS_fnc_doorOpen", "syntax": "[building,doorAnimation,upDownAnimation,downUpAnimation,animationPhase] call BIS_fnc_doorOpen"}, "BIS_fnc_dotProduct": {"version": "FNC", "tags": "", "description": "Dot product of two vectors.", "example": "[[1,2,3], [1,2,3]] call BIS_fnc_dotProduct; //\u00a0returns: 1*1 + 2*2 + 3*3 = 14", "docSyntax": "[vector1, vector2] call BIS_fnc_dotProduct", "syntax": "[vector1,vector2] call BIS_fnc_dotProduct"}, "BIS_fnc_drawAO": {"version": "FNC", "tags": "", "description": "Draws a dashed line around the outer edges of a trigger.", "example": "[Trigger1] call BIS_fnc_drawAO; //\u00a0draws a dashed line around trigger1's outer edge, with 50m between each line", "docSyntax": "[triggers, distance] call BIS_fnc_drawAO", "syntax": "[triggers,<scalar>] call BIS_fnc_drawAO"}, "BIS_fnc_drawArrow": {"version": "FNC", "tags": "", "description": "Draws a static arrow (outline or color filled) on map. See Example 4 for arrow removal.", "example": "Draw a semi-transparent, blue arrow with default geometry:", "docSyntax": "[from, to, color, pars, fill, map] call BIS_fnc_drawArrow", "syntax": "[from,to,<scalar>,pars,fill,<objMap>] call BIS_fnc_drawArrow"}, "BIS_fnc_drawBoundingBox": {"version": "FNC", "tags": "", "description": "Draws bounding box around given objects.", "example": "[[BIS_building], [1,0,1,1], true] call BIS_fnc_drawBoundingBox;", "docSyntax": "[objects, color, draw] call BIS_fnc_drawBoundingBox", "syntax": "[objects,<scalar>,draw] call BIS_fnc_drawBoundingBox"}, "BIS_fnc_drawCuratorDeaths": {"version": "FNC", "tags": "", "description": "Show skull unit for curator when the unit dies.", "example": "player call BIS_fnc_drawCuratorDeaths;", "docSyntax": "[unit] call BIS_fnc_drawCuratorDeaths", "syntax": "[<objUnit>] call BIS_fnc_drawCuratorDeaths"}, "BIS_fnc_drawCuratorLocations": {"version": "FNC", "tags": "", "description": "/* Description: Label every vilage, town and city in curator interface Parameter(s): 0: OBJECT - curator module Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_drawCuratorRespawnMarkers": {"version": "FNC", "tags": "", "description": "/* Description: Create a curator icon on every respawn marker Parameter(s): 0: OBJECT - curator module 1: ARRAY of SIDEs Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_drawMinefields": {"version": "FNC", "tags": "", "description": "Draw minefields on the map. Dynamically calculated from all mines positions. Distinguishes AP and AT minefields.", "example": "call BIS_fnc_drawMinefields;", "docSyntax": "call BIS_fnc_drawMinefields", "syntax": "call BIS_fnc_drawMinefields"}, "BIS_fnc_drawRespawnPositions": {"version": "FNC", "tags": "", "description": "Draws respawn positions on the map which were added by BIS_fnc_addRespawnPosition.", "example": "[true] call BIS_fnc_drawRespawnPositions;", "docSyntax": "[state] call BIS_fnc_drawRespawnPositions", "syntax": "[state] call BIS_fnc_drawRespawnPositions"}, "BIS_fnc_dynamicGroups": {"version": "FNC", "tags": "", "description": "Function that adds dynamic groups to the mission as seen in End Game. Function needs to be initialized on server and client. Clients can then use action TeamSwitch (\"U\" by default) to access the Dynamic Groups interface.", "example": "[\"Initialize\"] call BIS_fnc_dynamicGroups; //\u00a0exec on Server", "docSyntax": "[mode, params] call BIS_fnc_dynamicGroups", "syntax": "[mode,<any>] call BIS_fnc_dynamicGroups"}, "BIS_fnc_dynamicText": {"version": "FNC", "tags": "", "description": "Shows dynamic opening credits or any type of text.", "example": "[\"<t color='#ff0000' size='.8'>Warning!<br />Stop doing what you are doing</t>\",-1,-1,4,1,0,789] spawn BIS_fnc_dynamicText;", "docSyntax": "[text, x, y, duration, fadeInTime, deltaY, rscLayer] spawn BIS_fnc_dynamicText", "syntax": "[<string>,x,y,duration,fadeInTime,deltaY,rscLayer] spawn BIS_fnc_dynamicText"}, "BIS_fnc_earthquake": {"version": "FNC", "tags": "", "description": "Earthquake simulation - now just camera shake and sound. Stamina is impacted by the earthquake too. Earthquake will last between 13 and 20 seconds. While earthquake is in progress missionNamespace variable BIS_fnc_earthquake_inprogress will be true.", "example": "[4] spawn BIS_fnc_earthquake;", "docSyntax": "[intensity] spawn BIS_fnc_earthquake", "syntax": "[intensity] spawn BIS_fnc_earthquake"}, "BIS_fnc_easeIn": {"version": "FNC", "tags": "", "description": "Wraps BIS_fnc_lerp.", "example": "[] call BIS_fnc_easeIn; //\u00a0returns 0", "docSyntax": "[a, b, alpha, exp] call BIS_fnc_easeIn", "syntax": "[a,b,alpha,exp] call BIS_fnc_easeIn"}, "BIS_fnc_easeInOut": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_easeInOut", "syntax": "[] call BIS_fnc_easeInOut"}, "BIS_fnc_easeInOutVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_easeInOutVector", "syntax": "[] call BIS_fnc_easeInOutVector"}, "BIS_fnc_easeInVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_easeInVector", "syntax": "[] call BIS_fnc_easeInVector"}, "BIS_fnc_easeOut": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_easeOut", "syntax": "[] call BIS_fnc_easeOut"}, "BIS_fnc_easeOutVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_easeOutVector", "syntax": "[] call BIS_fnc_easeOutVector"}, "BIS_fnc_effectFired": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectFiredArtillery": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectFiredCruiseMissile": {"version": "FNC", "tags": "", "description": "/* Cruise Missile Start VFX BIS_fnc_effectFiredCruiseMissile a: reyhard */", "docSyntax": "[] call BIS_fnc_effectFiredCruiseMissile", "syntax": "[] call BIS_fnc_effectFiredCruiseMissile"}, "BIS_fnc_effectFiredFlares": {"version": "FNC", "tags": "", "description": "/*Arma 2 flares, by Maddmatt */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectFiredHeliRocket": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectFiredLongSmoke": {"version": "FNC", "tags": "", "description": "This function does nothing.", "example": "-", "docSyntax": "[] call BIS_fnc_effectFiredLongSmoke", "syntax": "[] call BIS_fnc_effectFiredLongSmoke"}, "BIS_fnc_effectFiredRifle": {"version": "FNC", "tags": "", "description": "Used to add an effect to fired bullets. Should be executed from Fired Event Handler.", "example": "unit addEventHandler [\"Fired\", { _this call BIS_fnc_effectFiredRifle; }];", "docSyntax": "[unit, nil, nil, nil, ammoType] call BIS_fnc_effectFiredRifle", "syntax": "[<objUnit>,nil,nil,nil,ammoType] call BIS_fnc_effectFiredRifle"}, "BIS_fnc_effectFiredRocket": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectFiredSmokeLauncher": {"version": "FNC", "tags": "", "description": "/*Arma 2 smokscreen, by Maddmatt Uses code from VBS2 Smoke launcher by Philipp Pilhofer (raedor) & Andrew Barron */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectFiredSmokeLauncher_boat": {"version": "FNC", "tags": "", "description": "/*Arma 2 smokscreen, by Maddmatt Uses code from VBS2 Smoke launcher by Philipp Pilhofer (raedor) & Andrew Barron */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectKilled": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectKilledAirDestruction": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectKilledAirDestructionStage2": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectKilledSecondaries": {"version": "FNC", "tags": "", "description": "//Small secondary fuel explosions //By Maddmatt for Arma 2", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_effectPlankton": {"version": "FNC", "tags": "", "description": "Create underwater plankton particle effect.", "example": "call BIS_fnc_effectPlankton;", "docSyntax": "call BIS_fnc_effectPlankton", "syntax": "call BIS_fnc_effectPlankton"}, "BIS_fnc_EGObjectiveVisualizer": {"version": "FNC", "tags": "", "description": "Part of the EG Spectator Mode.", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_EGObjectiveVisualizerDraw": {"version": "FNC", "tags": "", "description": "Part of the EG Spectator Mode.", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_EGSpectator": {"version": "FNC", "tags": "", "description": "Spectator instance.", "example": "[\"Initialize\", [player]] call BIS_fnc_EGSpectator;", "docSyntax": "[mode, [spectator, whitelistedSides, allowAi, allowFreeCamera, allow3PPCamera, showFocusInfo, showCameraButtons, showControlsHelper, showHeader, showLists]] call BIS_fnc_EGSpectator", "syntax": "[mode,[spectator,whitelistedSides,allowAi,allowFreeCamera,allow3PPCamera,showFocusInfo,showCameraButtons,showControlsHelper,showHeader,showLists]] call BIS_fnc_EGSpectator"}, "BIS_fnc_EGSpectatorCamera": {"version": "FNC", "tags": "", "description": "Part of the EG Spectator Mode.", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_EGSpectatorCameraPrepareTarget": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_EGSpectatorCameraResetTarget": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_EGSpectatorCameraSetTarget": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_EGSpectatorCameraTick": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_EGSpectatorDraw2D": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_EGSpectatorDraw3D": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_EGSpectatorGetUnitsToDraw": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_ejectionSeatRelease": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This function is designed as part of set of functions to implement semi-authenthic ejection system on fixed wing aircrfat that have such functionality enabled/configured. - Additional option for player to separate from ejetor seat via user action. default ejection function will ato deploy parachute at 350 m altitude. This is a manual override. - Generic parachute used, currently only one model in game so no need to parametarize. Exucution: - Call the function via user action defined on the ejector seat vehicle. Example: class UserActions { class Ejection_Seat_Eject { priority = 0.05; shortcut = \"Eject\"; displayName = \"$STR_A3_action_deploy_parachute\"; condition = \"player in this\"; statement = \"[this] spawn BIS_fnc_ejectionSeatRelease\"; position = \"pilotcontrol\"; radius = 10; onlyforplayer = 1; showWindow = 0; hideOnUse = 1; }; }; Requirments: - Compatible ejector seat must have a user action set up to triger this fnc. Parameter(s): _this select 0: mode (Scalar) 0: ejector seat/object Returns: nothing Result: Pilot will be forced from ejection seat vehicle to parachute. Semi-authenthic behaviour. */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_enableSaving": {"version": "FNC", "tags": "", "description": "Controls the enabling of saving. Will only enable saving if there are no remaining requests for disabled saving.", "example": "\"savingID\" call BIS_fnc_enableSaving;", "docSyntax": "id call BIS_fnc_enableSaving", "syntax": "<scalar> call BIS_fnc_enableSaving"}, "BIS_fnc_encodeFlags": {"version": "FNC", "tags": "", "description": "Encodes array of unique binary flags with indexes between 0-15 into a single scalar.", "example": "private _encodedFlags = [0,2,3] call BIS_fnc_encodeFlags;//Returns 13", "docSyntax": "flags call BIS_fnc_encodeFlags", "syntax": "flags call BIS_fnc_encodeFlags"}, "BIS_fnc_encodeFlags2": {"version": "FNC", "tags": "", "description": "Encodes array of unique binary flags (zeroes or ones) into a single scalar.", "example": "private _result = [1,0,1,1] call BIS_fnc_encodeFlags2; hint str _result; //\u00a0Displays 13", "docSyntax": "arrayOfNumbers call BIS_fnc_encodeFlags2", "syntax": "arrayOfNumbers call BIS_fnc_encodeFlags2"}, "BIS_fnc_encodeFlags4": {"version": "FNC", "tags": "", "description": "/* Encodes array of unique 4-state flags (0,1,2,3) into a single number. Syntax: ------- _encodedFlags:scalar = _flags:array call BIS_fnc_encodeFlags4; Example: -------- 225 = [1,0,2,3] call BIS_fnc_encodeFlags4; Explanation: ------------ [1,0,2,3] -> 11 10 00 01 -> 225 [0,0,0,0,0,0,0,1] -> 01 00 00 00 00 00 00 00 -> 0100 0000 0000 0000 -> 16384 */", "docSyntax": "[] call BIS_fnc_encodeFlags4", "syntax": "[] call BIS_fnc_encodeFlags4"}, "BIS_fnc_encodeFlags8": {"version": "FNC", "tags": "", "description": "/* Encodes array of unique 8-state flags (0,1,2,3,4,5,6,7) into a single number. Syntax: ------- _encodedFlags:scalar = _flags:array call BIS_fnc_encodeFlags8; Example: -------- 4311 = [7,2,3,0,1] call BIS_fnc_encodeFlags8; Explanation: ------------ [7,2,3,0,1] -> 001 000 011 010 111 -> 0001 0000 1101 0111 -> 4311 */", "docSyntax": "[] call BIS_fnc_encodeFlags8", "syntax": "[] call BIS_fnc_encodeFlags8"}, "BIS_fnc_endLoadingScreen": {"version": "FNC", "tags": "", "description": "Unregister a loading screen. When none other remains, end the loading.", "example": "[\"myLoadingScreen\", \"Loading\u2026 wait for my splendid\u2122 mission!\"] call BIS_fnc_startLoadingScreen; uiSleep 3; \"myLoadingScreen\" call BIS_fnc_endLoadingScreen;", "docSyntax": "screenId call BIS_fnc_endLoadingScreen", "syntax": "screenId call BIS_fnc_endLoadingScreen"}, "BIS_fnc_endMission": {"version": "FNC", "tags": "", "description": "Ends mission with the specified ending. Always ends with a 4 seconds black out effect.", "example": "[\"mission2\", 1, \"You won\"] call BIS_fnc_endMission; //\u00a0endMission \"mission2_1\"", "docSyntax": "[nextMission, endingId, displayText, isSuccess, code] call BIS_fnc_endMission", "syntax": "[nextMission,endingId,displayText,isSuccess,<code>] call BIS_fnc_endMission"}, "BIS_fnc_endMissionServer": {"version": "FNC", "tags": "", "description": "Ends the mission properly for all players in a multiplayer environment.", "example": "\"SideScore\" call BIS_fnc_endMissionServer;", "docSyntax": "endType call BIS_fnc_endMissionServer", "syntax": "endType call BIS_fnc_endMissionServer"}, "BIS_fnc_enemyDetected": {"version": "FNC", "tags": "", "description": "Returns true if unit knows about nearby enemy unit or driven vehicle.", "example": "private _enemyDetected = _unit call BIS_fnc_enemyDetected;", "docSyntax": "unit call BIS_fnc_enemyDetected", "syntax": "<objUnit> call BIS_fnc_enemyDetected"}, "BIS_fnc_enemySides": {"version": "FNC", "tags": "", "description": "Returns sides hostile to the given side / object.", "example": "player call BIS_fnc_enemySides;", "docSyntax": "input call BIS_fnc_enemySides", "syntax": "input call BIS_fnc_enemySides"}, "BIS_fnc_enemyTargets": {"version": "FNC", "tags": "", "description": "Return list of nearby enemy targets for given unit.", "example": "private _targets = _unit call BIS_fnc_enemyTargets;", "docSyntax": "unit call BIS_fnc_enemyTargets", "syntax": "<objUnit> call BIS_fnc_enemyTargets"}, "BIS_fnc_error": {"version": "FNC", "tags": "", "description": "Log error message and display it (bottom of the UI). If it is called from a function, it will include the function name before your content.", "example": "[\"Player is too far away (%1)\", player distance [0, 0, 0]] call BIS_fnc_error;", "docSyntax": "[message, param1, ..., param9] call BIS_fnc_error", "syntax": "[message,param1,...,param9] call BIS_fnc_error"}, "BIS_fnc_errorMsg": {"version": "FNC", "tags": "", "description": "Display error window.", "example": "[\"This is an error message\"] call BIS_fnc_errorMsg;", "docSyntax": "[message, otherParameters] call BIS_fnc_errorMsg", "syntax": "[message,otherParameters] call BIS_fnc_errorMsg"}, "BIS_fnc_errorParamsType": {"version": "FNC", "tags": "", "description": "Displays a parameter type error message (using BIS_fnc_error) explaining the problem.", "example": "//\u00a0show error and abort if input is not of type ARRAY: if !(_this isEqualType []) exitWith { [_this, \"isEqualType\", []] call BIS_fnc_errorParamsType; };", "docSyntax": "[value, method, expected] call BIS_fnc_errorParamsType", "syntax": "[<scalar>,method,expected] call BIS_fnc_errorParamsType"}, "BIS_fnc_escortAI": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_escortAIHoldAction": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_establishingShot": {"version": "FNC", "tags": "", "description": "Plays a fake UAV observational sequence which serves as an establishing shot.", "example": "[player, \"I can see my house from here\", 500, 250, 75, 1, [], 0, true] spawn BIS_fnc_establishingShot;", "docSyntax": "[target, text, altitude, radius, angle, rotation, iconOptions, mode, fadeIn, waitTime] spawn BIS_fnc_establishingShot", "syntax": "[<object>,<string>,<scalar>,radius,angle,<array>,iconOptions,mode,fadeIn,waitTime] spawn BIS_fnc_establishingShot"}, "BIS_fnc_estimatedTimeLeft": {"version": "FNC", "tags": "", "description": "Set mission countdown.", "example": "[180] call BIS_fnc_estimatedTimeLeft;", "docSyntax": "[time] call BIS_fnc_estimatedTimeLeft", "syntax": "[<scalar>] call BIS_fnc_estimatedTimeLeft"}, "BIS_fnc_eventTimeline": {"version": "FNC", "tags": "", "description": "Universal system for playing sequential events defined by time.", "example": "private _timeline = [ [0.0, { hint \"Start of the Timeline\" }], [1.0, { hint \"Event 1\" }], [3.0, { hint \"End of the timeline\" }] ]; [_timeline, 0, \"\", { hint \"Interrupted\" }, { hint \"Timeline done\" }] spawn BIS_fnc_eventTimeline;", "docSyntax": "[timeline, index, music, codeInterrupt, codeEnd] call BIS_fnc_eventTimeline", "syntax": "[timeline,<scalar>,music,codeInterrupt,codeEnd] call BIS_fnc_eventTimeline"}, "BIS_fnc_execFSM": {"version": "FNC", "tags": "", "description": "Execute the scripted FSM. Shell for execFSM command", "example": "private _handle = [[_param1, _param2, _param3 /* etc */], \"test.fsm\"] call BIS_fnc_execFSM;", "docSyntax": "filename call BIS_fnc_execFSM", "syntax": "filename call BIS_fnc_execFSM"}, "BIS_fnc_execRemote": {"version": "FNC", "tags": "", "description": "This function is now an alias to BIS_fnc_MP.", "example": "See BIS_fnc_MP", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_executeStackedEventHandler": {"version": "FNC", "tags": "", "description": "This function executes the stacked items.", "example": "[\"onEachFrame\"] call BIS_fnc_executeStackedEventHandler;", "docSyntax": "[eventHandlerType] call BIS_fnc_executeStackedEventHandler", "syntax": "[eventHandlerType] call BIS_fnc_executeStackedEventHandler"}, "BIS_fnc_execVM": {"version": "FNC", "tags": "", "description": "\ud83d\udd56", "example": "\"Bonus\\initializeExtras.sqf\" call BIS_fnc_execVM;", "docSyntax": "filename call BIS_fnc_execVM", "syntax": "filename call BIS_fnc_execVM"}, "BIS_fnc_EXP_camp_addTickets": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_EXP_camp_addTickets", "syntax": "[] call BIS_fnc_EXP_camp_addTickets"}, "BIS_fnc_EXP_camp_balanceGroup": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: Balances a group depending on the amount of connected players Parameters: _group: The group to balance _minCount: The minimal count of units group must end up with _bExcludeVehicleRoles: Whether to exclude units in important vehicle roles (driver, gunner, commander) Returns: Nothing */", "docSyntax": "[] call BIS_fnc_EXP_camp_balanceGroup", "syntax": "[] call BIS_fnc_EXP_camp_balanceGroup"}, "BIS_fnc_EXP_camp_checkpoint": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: Set's a mission checkpoint, in single-player an auto save happens, in multiplayer a new respawn position is added Parameters: _target: The target namespace _position: The desired position _name: The name of the position Returns: Added respawn position identifier */", "docSyntax": "[] call BIS_fnc_EXP_camp_checkpoint", "syntax": "[] call BIS_fnc_EXP_camp_checkpoint"}, "BIS_fnc_EXP_camp_dynamicAISkill": {"version": "FNC", "tags": "", "description": "Changes AI skill based on player count, responding to player connected / player disconnected events. This function does exactly the same as BIS_fnc_EXP_camp_setSkill execept that it automatically executes when a player joins or disconnects.", "example": "[ true, [ [WEST, 0.1, 0.2, 0.7, 0.6], [EAST, 0.1, 0.2, 0.7, 0.6] ] ] call BIS_fnc_EXP_camp_dynamicAISkill;", "docSyntax": "[mode, affectedSides] call BIS_fnc_EXP_camp_dynamicAISkill", "syntax": "[mode,affectedSides] call BIS_fnc_EXP_camp_dynamicAISkill"}, "BIS_fnc_EXP_camp_getCinematicMode": {"version": "FNC", "tags": "", "description": "Returns whether or not player is in cinematic mode.", "example": "call BIS_fnc_EXP_camp_getCinematicMode;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_EXP_camp_getPlayersGroup": {"version": "FNC", "tags": "", "description": "Returns group that players belong to in coop campaign scenario.", "example": "private _group = call BIS_fnc_EXP_camp_getPlayersGroup;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_EXP_camp_guidedProjectile": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: Spawns object of given class and makes it travel, hooming towards the target To be used with CfgAmmo type of entity, but can be used with virtually any kind of object Parameters: _startPos: ARRAY The initial position of the projectile (ASL) _class: STRING or OBJECT The class name of the object to spawn or an object entity already existing _target: OBJECT The target object the projectile will be hooming towards to _speed: SCALAR The speed the object should assume _destroyTarget: BOOL Whether to force destruction of the target object on detonation _localOffset: ARRAY The model space position offset that projectile should be hooming towards to _minDistanceToTarget: SCALAR The minimal distance projectile needs to be from target position to enter ballistic mode _function STRING The function to execute on the created object with params [<object>] _isGlobalFunction BOOL Whether the executed function should be executed on all connected machine, false to execute only on the server Returns: NOTHING */", "docSyntax": "[] call BIS_fnc_EXP_camp_guidedProjectile", "syntax": "[] call BIS_fnc_EXP_camp_guidedProjectile"}, "BIS_fnc_EXP_camp_hasMissionStarted": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: Returns whether the mission has actually started (see Manager) Parameters: Nothing Returns: True if mission was started, false if not */", "docSyntax": "[] call BIS_fnc_EXP_camp_hasMissionStarted", "syntax": "[] call BIS_fnc_EXP_camp_hasMissionStarted"}, "BIS_fnc_EXP_camp_IFF": {"version": "FNC", "tags": "", "description": "Simple handling of the Support Team's scripted IFF.", "example": "[units group player] call BIS_fnc_EXP_camp_IFF;", "docSyntax": "[units] call BIS_fnc_EXP_camp_IFF", "syntax": "[units] call BIS_fnc_EXP_camp_IFF"}, "BIS_fnc_EXP_camp_initCharacter": {"version": "FNC", "tags": "", "description": "Assigns correct appearance and loadout of story characters based upon their vehicle classnames.", "example": "[BIS_unit,\"NIGHT\"] call BIS_fnc_EXP_camp_initCharacter;", "docSyntax": "[unit, mode] call BIS_fnc_EXP_camp_initCharacter", "syntax": "[<objUnit>,mode] call BIS_fnc_EXP_camp_initCharacter"}, "BIS_fnc_EXP_camp_initClasses": {"version": "FNC", "tags": "", "description": "Initializes the classes players can choose from before spawning.", "example": "[\"NIGHT\"] call BIS_fnc_EXP_camp_initClasses;", "docSyntax": "[mode] call BIS_fnc_EXP_camp_initClasses", "syntax": "[mode] call BIS_fnc_EXP_camp_initClasses"}, "BIS_fnc_EXP_camp_initDifficulty": {"version": "FNC", "tags": "", "description": "Initializes difficulty settings in Apex Protocol campaign.", "example": "call BIS_fnc_EXP_camp_initDifficulty;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_EXP_camp_lobby": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby.sqf Campaign Lobby: Core Function Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby", "syntax": "[] call BIS_fnc_EXP_camp_lobby"}, "BIS_fnc_EXP_camp_lobby_clearVars": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_clearVars.sqf Campaign Lobby: Clear variables Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_clearVars", "syntax": "[] call BIS_fnc_EXP_camp_lobby_clearVars"}, "BIS_fnc_EXP_camp_lobby_ctrlSetColor": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_ctrlSetColor.sqf Campaign Lobby: Updates controls with defined colors Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_ctrlSetColor", "syntax": "[] call BIS_fnc_EXP_camp_lobby_ctrlSetColor"}, "BIS_fnc_EXP_camp_lobby_findHost": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_findHost.sqf Campaign Lobby: Find host Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_findHost", "syntax": "[] call BIS_fnc_EXP_camp_lobby_findHost"}, "BIS_fnc_EXP_camp_lobby_getHostSettings": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 08-08-2016 fn_EXP_camp_lobby_getHostSettings.sqf Campaign Lobby: Grabs the host settings for respawn and revive Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_getHostSettings", "syntax": "[] call BIS_fnc_EXP_camp_lobby_getHostSettings"}, "BIS_fnc_EXP_camp_lobby_getPlayerSquadName": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_getPlayerSquadName.sqf Campaign Lobby: Return the player squad name Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_getPlayerSquadName", "syntax": "[] call BIS_fnc_EXP_camp_lobby_getPlayerSquadName"}, "BIS_fnc_EXP_camp_lobby_go": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_go.sqf Campaign Lobby: Run Mission Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_go", "syntax": "[] call BIS_fnc_EXP_camp_lobby_go"}, "BIS_fnc_EXP_camp_lobby_intro": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_intro.sqf Campaign Lobby: On Load Function (Does nothing) Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_intro", "syntax": "[] call BIS_fnc_EXP_camp_lobby_intro"}, "BIS_fnc_EXP_camp_lobby_launch": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_launch.sqf Campaign Lobby: Launch Function Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_launch", "syntax": "[] call BIS_fnc_EXP_camp_lobby_launch"}, "BIS_fnc_EXP_camp_lobby_loop": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_loop.sqf Campaign Lobby: Update UI Loop Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_loop", "syntax": "[] call BIS_fnc_EXP_camp_lobby_loop"}, "BIS_fnc_EXP_camp_lobby_missionCountdown": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_missionCountdown.sqf Campaign Lobby: Countdown to run mission Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_missionCountdown", "syntax": "[] call BIS_fnc_EXP_camp_lobby_missionCountdown"}, "BIS_fnc_EXP_camp_lobby_onLoad": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_onLoad.sqf Campaign Lobby: On Load Function (Does nothing) Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_onLoad", "syntax": "[] call BIS_fnc_EXP_camp_lobby_onLoad"}, "BIS_fnc_EXP_camp_lobby_onUnLoad": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_onUnLoad.sqf Campaign Lobby: On display unload function - clear variables and close as necessary Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_onUnLoad", "syntax": "[] call BIS_fnc_EXP_camp_lobby_onUnLoad"}, "BIS_fnc_EXP_camp_lobby_playMissionVideo": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_playMissionVideo.sqf Campaign Lobby: Creates the control and plays mission video Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_playMissionVideo", "syntax": "[] call BIS_fnc_EXP_camp_lobby_playMissionVideo"}, "BIS_fnc_EXP_camp_lobby_serverPing": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_serverPing.sqf Campaign Lobby: Updates player status Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_serverPing", "syntax": "[] call BIS_fnc_EXP_camp_lobby_serverPing"}, "BIS_fnc_EXP_camp_lobby_serverUpdate": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_serverUpdate.sqf Campaign Lobby: Server update function (runs on \"host\" machine for dedicated servers) Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_serverUpdate", "syntax": "[] call BIS_fnc_EXP_camp_lobby_serverUpdate"}, "BIS_fnc_EXP_camp_lobby_structuredText": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_structuredText.sqf Campaign Lobby: Formats structured text Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_structuredText", "syntax": "[] call BIS_fnc_EXP_camp_lobby_structuredText"}, "BIS_fnc_EXP_camp_lobby_UIMilitaryManager": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 15-08-2016 fn_EXP_camp_lobby_UIMilitaryManager.sqf Campaign Lobby: Updates military efficiency based on mission settings Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_UIMilitaryManager", "syntax": "[] call BIS_fnc_EXP_camp_lobby_UIMilitaryManager"}, "BIS_fnc_EXP_camp_lobby_UIMissionCountdown": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_missionCountdown.sqf Campaign Lobby: Countdown to run mission Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_UIMissionCountdown", "syntax": "[] call BIS_fnc_EXP_camp_lobby_UIMissionCountdown"}, "BIS_fnc_EXP_camp_lobby_UIMissionManager": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_UIMissionManager.sqf Campaign Lobby: Handles UI behaviour of tree mission options Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_UIMissionManager", "syntax": "[] call BIS_fnc_EXP_camp_lobby_UIMissionManager"}, "BIS_fnc_EXP_camp_lobby_UIOverlayManager": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_updateIntel.sqf Campaign Lobby: Updates the mission overview and intel from tree interactions Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_UIOverlayManager", "syntax": "[] call BIS_fnc_EXP_camp_lobby_UIOverlayManager"}, "BIS_fnc_EXP_camp_lobby_UIProgressManager": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_UIProgressManager.sqf Campaign Lobby: Handles Progress button UI behaviour Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_UIProgressManager", "syntax": "[] call BIS_fnc_EXP_camp_lobby_UIProgressManager"}, "BIS_fnc_EXP_camp_lobby_UISettingsManager": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 08-08-2016 fn_EXP_camp_lobby_UISettingsManager.sqf Campaign Lobby: Handles the mission settings for Respawn and Revive Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_UISettingsManager", "syntax": "[] call BIS_fnc_EXP_camp_lobby_UISettingsManager"}, "BIS_fnc_EXP_camp_lobby_updateHostSettings": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 08-08-2016 fn_EXP_camp_lobby_updateHostSettings.sqf Campaign Lobby: Updates all clients with the latest host settings Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_updateHostSettings", "syntax": "[] call BIS_fnc_EXP_camp_lobby_updateHostSettings"}, "BIS_fnc_EXP_camp_lobby_updateIntel": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_updateIntel.sqf Campaign Lobby: Updates the mission overview and intel from tree interactions Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_updateIntel", "syntax": "[] call BIS_fnc_EXP_camp_lobby_updateIntel"}, "BIS_fnc_EXP_camp_lobby_updateMilitaryEfficiency": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 15-08-2016 fn_EXP_camp_lobby_updateMilitaryEfficiency.sqf Campaign Lobby: Updates military efficiency radial bar Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_updateMilitaryEfficiency", "syntax": "[] call BIS_fnc_EXP_camp_lobby_updateMilitaryEfficiency"}, "BIS_fnc_EXP_camp_lobby_updatePlayers": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_updatePlayers.sqf Campaign Lobby: Updates UI based on player status changes Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_updatePlayers", "syntax": "[] call BIS_fnc_EXP_camp_lobby_updatePlayers"}, "BIS_fnc_EXP_camp_lobby_updatePlayerStatus": {"version": "FNC", "tags": "", "description": "/* PROJECT: R&D AUTHOR: Endstar DATE: 18-04-2016 fn_EXP_camp_lobby_updatePlayerStatus.sqf Campaign Lobby: Updates player status Params 0: Return 0: */", "docSyntax": "[] call BIS_fnc_EXP_camp_lobby_updatePlayerStatus", "syntax": "[] call BIS_fnc_EXP_camp_lobby_updatePlayerStatus"}, "BIS_fnc_EXP_camp_manager": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: Handles match start synchronization between server and clients The following states are valid: - Waiting : State is set when joining the mission - Intro : State is set when mission intro starts - Loadout : State is set when mission loadout selection starts - Started : State is set when mission gameplay starts Parameters: _introVideos: The videos directory to play, empty array leads to skipping intro videos completely _introVideosSubtitles: The subtitles files to execute for intro videos _minWaitDelay: The time to wait after waiting has been completed _minLoadoutDelay: The time to wait after loadout has been completed _maxWaitDelay: The maximum time to wait for all players during the waiting, if reached, mission is forced onto next state _maxLoadoutDelay: The maximum time to wait for all players during the loadout, mission is forced onto next state _bWantsLoadoutSelection: Whether or not to go into loadout selection, if false this is skipped _bNoCinematics: Whether to force no cinematics, these need to be handled manually then Returns: Nothing */", "docSyntax": "[] call BIS_fnc_EXP_camp_manager", "syntax": "[] call BIS_fnc_EXP_camp_manager"}, "BIS_fnc_EXP_camp_manager_getState": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: Get's the mission state, can be one of \"Waiting\", \"Intro\", \"Loadout\" or \"Started\" Parameters: Nothing Returns: The mission state */", "docSyntax": "[] call BIS_fnc_EXP_camp_manager_getState", "syntax": "[] call BIS_fnc_EXP_camp_manager_getState"}, "BIS_fnc_EXP_camp_manager_onPlayerRegistered": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: A player is registered for given state Parameters: _who: The player to be registered _listId: The state corresponding list, and where given player will be added to Returns: Nothing */", "docSyntax": "[] call BIS_fnc_EXP_camp_manager_onPlayerRegistered", "syntax": "[] call BIS_fnc_EXP_camp_manager_onPlayerRegistered"}, "BIS_fnc_EXP_camp_manager_setState": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: Set's the state of the mission Parameters: _state: The new mission state to set Returns: Nothing */", "docSyntax": "[] call BIS_fnc_EXP_camp_manager_setState", "syntax": "[] call BIS_fnc_EXP_camp_manager_setState"}, "BIS_fnc_EXP_camp_manager_triggerEvent": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: Triggers corresponding event for given mission state Parameters: _state: The mission state Returns: Nothing */", "docSyntax": "[] call BIS_fnc_EXP_camp_manager_triggerEvent", "syntax": "[] call BIS_fnc_EXP_camp_manager_triggerEvent"}, "BIS_fnc_EXP_camp_playerChecklist": {"version": "FNC", "tags": "", "description": "Display a checklist of players that don't meet the given condition, thus preventing mission progress.", "example": "[{count allPlayers == 4}] call BIS_fnc_EXP_camp_playerChecklist;", "docSyntax": "[conditionProceed, conditionPlayer, code] call BIS_fnc_EXP_camp_playerChecklist", "syntax": "[conditionProceed,conditionPlayer,<code>] call BIS_fnc_EXP_camp_playerChecklist"}, "BIS_fnc_EXP_camp_playSubtitles": {"version": "FNC", "tags": "", "description": "Displays the given subtitles at the correctly defined moments. Each array added to the parameters represents one subtitle.", "example": "[ [\"CROSSROAD\", \"Mission is a go, I repeat, mission is a go! Crossroad, out.\", 0] ] spawn BIS_fnc_EXP_camp_playSubtitles; //\u00a0shows a subtitle immediately", "docSyntax": "[subtitleDetail1, subtitleDetail2, ...] spawn BIS_fnc_EXP_camp_playSubtitles", "syntax": "[subtitleDetail1,subtitleDetail2,...] spawn BIS_fnc_EXP_camp_playSubtitles"}, "BIS_fnc_EXP_camp_playTimelineVideo": {"version": "FNC", "tags": "", "description": "Plays a video with BIS_fnc_EXP_camp_setCinematicMode enabled.", "example": "\"someVideoPath\" call BIS_fnc_EXP_camp_playTimelineVideo;", "docSyntax": "[videoPath] call BIS_fnc_EXP_camp_playTimelineVideo", "syntax": "[videoPath] call BIS_fnc_EXP_camp_playTimelineVideo"}, "BIS_fnc_EXP_camp_replaceVehicles": {"version": "FNC", "tags": "", "description": "Replaces textures of \"I_G_Offroad_01_armed_F\" and \"I_G_Quadbike_01_F\" randomly.", "example": "call BIS_fnc_EXP_camp_replaceVehicles;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_EXP_camp_setCinematicMode": {"version": "FNC", "tags": "", "description": "Sets cinematic mode, with cinematic mode enabled the sounds are muted and screen is black.", "example": "[true, 3, 3] call BIS_fnc_EXP_camp_setCinematicMode;", "docSyntax": "[mode, fadeBlack, fadeSound] call BIS_fnc_EXP_camp_setCinematicMode", "syntax": "[mode,fadeBlack,fadeSound] call BIS_fnc_EXP_camp_setCinematicMode"}, "BIS_fnc_EXP_camp_setSkill": {"version": "FNC", "tags": "", "description": "Sets skill for an entire AI side. The skill will be calculated using a lerp function. Function will take player as multiplier.", "example": "[WEST,0.1,0.2,0.7,0.6] call BIS_fnc_EXP_camp_setSkill;", "docSyntax": "[side,skillMin,skillAimMin,skillMax,skillAimMax] call BIS_fnc_EXP_camp_setSkill", "syntax": "[<objSide>,skillMin,skillAimMin,skillMax,skillAimMax] call BIS_fnc_EXP_camp_setSkill"}, "BIS_fnc_EXP_camp_SITREP": {"version": "FNC", "tags": "", "description": "Displays multiple lines of text in given order.", "example": "[[\"line1\", 4, 5], [\"line2\", 3, 5, 8]] spawn BIS_fnc_EXP_camp_SITREP;", "docSyntax": "[line1, line2, lineX] spawn BIS_fnc_EXP_camp_SITREP", "syntax": "[line1,line2,lineX] spawn BIS_fnc_EXP_camp_SITREP"}, "BIS_fnc_exportCfgGroups": {"version": "FNC", "tags": "", "description": "/* Description: Export group or object composition for use in CfgGroups. The result will be copied to clipboard. Parameter(s): 0: position (for supported types see BIS_fnc_position). Screen center is used by default 1: objects to be saved. Currently selected objects in curator are used by default ARRAY of OBJECTs - specific objects to be saved array in format used by nearEntities, which automatically get nearby objects 0: STRING or ARRAY of STRINGS - object types 1: NUMBER - radius in metres Returns: STRING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_exportCfgHints": {"version": "FNC", "tags": "", "description": "Exports CfgHints to wiki format (see Category:Arma 3: Field Manual).", "example": "[] call BIS_fnc_exportCfgHints;", "docSyntax": "[category, class] call BIS_fnc_exportCfgHints", "syntax": "[category,class] call BIS_fnc_exportCfgHints"}, "BIS_fnc_exportCfgMagazines": {"version": "FNC", "tags": "", "description": "Export list of magazines for Arma 3: Assets.", "example": "exports Arma 3: CfgMagazines:", "docSyntax": "[classes] spawn BIS_fnc_exportCfgMagazines", "syntax": "[classes] spawn BIS_fnc_exportCfgMagazines"}, "BIS_fnc_exportCfgPatches": {"version": "FNC", "tags": "", "description": "Export list of addons for Community Wiki - Arma 3: Assets.", "example": "call BIS_fnc_exportCfgPatches;", "docSyntax": "[config, classes] call BIS_fnc_exportCfgPatches", "syntax": "[config,classes] call BIS_fnc_exportCfgPatches"}, "BIS_fnc_exportCfgVehicles": {"version": "FNC", "tags": "", "description": "Export list of objects for Community Wiki (Assets).", "example": "[] call BIS_fnc_exportCfgVehicles;", "docSyntax": "[mode,sides,classes,useAI] call BIS_fnc_exportCfgVehicles", "syntax": "[mode,sides,classes,useAI] call BIS_fnc_exportCfgVehicles"}, "BIS_fnc_exportCfgVehiclesAssetDB": {"version": "FNC", "tags": "", "description": "Copies CfgVehicles information to clipboard in wiki format.", "example": "[0] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles EAST [1] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles WEST [2] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles GUER [3,0] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles CIV [3,1] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles Structures [3,2] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles Ruins & Wrecks [3,3] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles Equipment [3,4] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles EMPTY [3,5] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles VR Objects [3,6] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles Animals [] spawn BIS_fnc_exportCfgVehiclesAssetDB; //\u00a0exports Arma 3 CfgVehicles Other: //\u00a0Unknown, Enemy, Friendly, Modules, Empty, Ambient Life", "docSyntax": "[side, category] call BIS_fnc_exportCfgVehiclesAssetDB", "syntax": "[<objSide>,category] call BIS_fnc_exportCfgVehiclesAssetDB"}, "BIS_fnc_exportCfgWeapons": {"version": "FNC", "tags": "", "description": "Export list of weapons for Community Wiki Arma 3 Assets Category.", "example": "export Arma 3: CfgWeapons Weapons, Arma 3: CfgWeapons Vehicle Weapons, Arma 3: CfgWeapons Items, Arma 3: CfgWeapons Equipment, screenshots:", "docSyntax": "[mode, patches, types] spawn BIS_fnc_exportCfgWeapons", "syntax": "[mode,patches,types] spawn BIS_fnc_exportCfgWeapons"}, "BIS_fnc_exportConfigHierarchy": {"version": "FNC", "tags": "", "description": "Export config hierarchy of given config.", "example": "[configFile >> \"CfgWeapons\"] call BIS_fnc_exportConfigHierarchy;", "docSyntax": "[config,class] call BIS_fnc_exportConfigHierarchy", "syntax": "[config,class] call BIS_fnc_exportConfigHierarchy"}, "BIS_fnc_exportCuratorCostTable": {"version": "FNC", "tags": "", "description": "/* Description: Generate spreadsheet with object classes and copy it to clipboard. The table will generate export code to be used in BIS_fnc_curatorObjectRegisteredTable Parameter(s): 0 (Optional): ARRAY of STRINGs - supported addons (classes from CfgPatches). When empty, all preloaded addons will be added. Use empty string to export just the cost calculation. 1 (Optional): STRING - format, can be \"ods\" or \"xls\" 2 (Optional): STRING - name of sheet with cost calculation. When empty, the calculation will be inserted on top of the table 3 (Optional): ARRAY of SIDEs or NUMBERs - filter only objects of listed sides or side IDs. Supported sides are west, east, resistance, civilian, sideUnknown and sideLogic 4 (Optional): CODE - condition for class to be listed. Config path to the class is passed as an argument (default: {true}) 5 (Optional): CODE - default cost, must return STRING. When empty string is returned, no default cost will be used (default: {\"\"}) Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_exportEditorPreviews": {"version": "FNC", "tags": "", "description": "Export screenshots of objects for Eden Editor and Community Wiki to <Arma 3 Profile>\\Screenshots\\EditorPreviews directory. See Arma 3 assets.", "example": "//\u00a0All objects [] spawn BIS_fnc_exportEditorPreviews;", "docSyntax": "[duration, type, sides, mods, addons, classes] spawn BIS_fnc_exportEditorPreviews", "syntax": "[duration,type,sides,mods,addons,classes] spawn BIS_fnc_exportEditorPreviews"}, "BIS_fnc_exportFunctionsToWiki": {"version": "FNC", "tags": "", "description": "Export function descriptions to Community Wiki. Exported text will be copied to clipboard in XML format.", "example": "[] spawn BIS_fnc_exportFunctionsToWiki; //\u00a0export all functions", "docSyntax": "[filter, timestamp] spawn BIS_fnc_exportFunctionsToWiki", "syntax": "[filter,timestamp] spawn BIS_fnc_exportFunctionsToWiki"}, "BIS_fnc_exportGroupFormations": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_exportGUIBaseClasses": {"version": "FNC", "tags": "", "description": "Export GUI macros and base classes to the clipboard.", "example": "\"all\" call BIS_fnc_exportGUIBaseClasses;", "docSyntax": "mode call BIS_fnc_exportGUIBaseClasses", "syntax": "mode call BIS_fnc_exportGUIBaseClasses"}, "BIS_fnc_exportInventory": {"version": "FNC", "tags": "", "description": "Exports unit's loadout as a String, also copies it to clipboard.", "example": "[player, \"init\", true] call BIS_fnc_exportInventory;", "docSyntax": "[unit, type, includeIdentity] call BIS_fnc_exportInventory", "syntax": "[<objUnit>,type,includeIdentity] call BIS_fnc_exportInventory"}, "BIS_fnc_exportMapToBiTXT": {"version": "FNC", "tags": "", "description": "Returns terrain height map to BiTXT (Universal Bistudio TXT) format, which can be imported to Object Builder. Output is also copied to clipboard.", "example": "[10, 10, 1] call BIS_fnc_exportMapToBiTXT;", "docSyntax": "[resolution, size, zCoeff] call BIS_fnc_exportMapToBiTXT", "syntax": "[resolution,size,zCoeff] call BIS_fnc_exportMapToBiTXT"}, "BIS_fnc_exportVehicle": {"version": "FNC", "tags": "", "description": "Export vehicle settings", "example": "[BIS_tank,\"\"] call BIS_fnc_exportVehicle; //Returns \"[ _this, [\"\"Hex\"\",1], [\"\"showCamonetHull\"\",1,\"\"showCamonetTurret\"\",1] ] call BIS_fnc_initVehicle;\"", "docSyntax": "[vehicle,vehicleClass] call BIS_fnc_exportVehicle", "syntax": "[<objVehicle>,vehicleClass] call BIS_fnc_exportVehicle"}, "BIS_fnc_fadeEffect": {"version": "FNC", "tags": "", "description": "Easily carry out complex fading. Default values will be used if parameters are not defined or set to nil.", "example": "[1, \"WHITE\", 5, 1] spawn BIS_fnc_fadeEffect;", "docSyntax": "[fadeInOrOut, blackOrWhite, duration, blur, music, ending, success] spawn BIS_fnc_fadeEffect", "syntax": "[fadeInOrOut,blackOrWhite,duration,blur,music,ending,success] spawn BIS_fnc_fadeEffect"}, "BIS_fnc_fatigueEffect": {"version": "FNC", "tags": "", "description": "Effects for high fatigue values. Internal engine use only, as it relies on internal BIS_* variables.", "example": "call BIS_fnc_fatigueEffect;", "docSyntax": "call BIS_fnc_fatigueEffect", "syntax": "call BIS_fnc_fatigueEffect"}, "BIS_fnc_feedbackInit": {"version": "FNC", "tags": "", "description": "Init function for feedback system. Declaration of variables, eventhandlers, etc. for in-game effects. Engine use only.", "example": "call BIS_fnc_feedbackInit;", "docSyntax": "call BIS_fnc_feedbackInit", "syntax": "call BIS_fnc_feedbackInit"}, "BIS_fnc_feedbackMain": {"version": "FNC", "tags": "", "description": "Main feedback FSM, used for feedback effects (fatigue, drowning, injury etc.). Internal use only.", "example": "[] call BIS_fnc_feedbackMain;", "docSyntax": "[] call BIS_fnc_feedbackMain", "syntax": "[] call BIS_fnc_feedbackMain"}, "BIS_fnc_ffvUpdate": {"version": "FNC", "tags": "", "description": "Update Firing From Vehicle feature depending on condition defined in turret's config.", "example": "if (local _vehicle) then { _vehicle animate [\"Door_1\", 1]; _vehicle call BIS_fnc_ffvUpdate; };", "docSyntax": "vehicle call BIS_fnc_ffvUpdate", "syntax": "<objVehicle> call BIS_fnc_ffvUpdate"}, "BIS_fnc_filterString": {"version": "FNC", "tags": "", "description": "Removes characters from a string based on the list of allowed characters.", "example": "[\"Player 1 @%!@$\"] call BIS_fnc_filterString; //\u00a0returns \"Player1\"", "docSyntax": "[text, allowedChars] call BIS_fnc_filterString", "syntax": "[<string>,allowedChars] call BIS_fnc_filterString"}, "BIS_fnc_findAllNestedElements": {"version": "FNC", "tags": "", "description": "Returns array of paths to all matching elements in deeply nested array, similar to BIS_fnc_findNestedElement but with all occurences.", "example": "private _array = [[1, 2, 3], [[1, 2, 3], 1, 2, 3]]; _result = [_array, 2] call BIS_fnc_findAllNestedElements; //\u00a0returns [[0, 1], [1, 0, 1], [1, 2]]", "docSyntax": "[array, query] call BIS_fnc_findAllNestedElements", "syntax": "[<array>,query] call BIS_fnc_findAllNestedElements"}, "BIS_fnc_findExtreme": {"version": "FNC", "tags": "", "description": "Returns the minimum or maximum value in an array of numbers.", "example": "private _result = [[1,4,5,8,3,7], 1] call BIS_fnc_findExtreme; //\u00a0returns 8 _result = [[1,4,5,8,3,7], 0] call BIS_fnc_findExtreme; //\u00a0returns 1", "docSyntax": "[numbers, mode] call BIS_fnc_findExtreme", "syntax": "[numbers,mode] call BIS_fnc_findExtreme"}, "BIS_fnc_findInPairs": {"version": "FNC", "tags": "", "description": "Searches the associative array for the first occurance of the key string and returns its index. Seach is not case-sensitive.", "example": "[[[\"apple\",3],[\"pear\",2]],\"apple\"] call BIS_fnc_findInPairs; //\u00a0Returns 0", "docSyntax": "[array, key] call BIS_fnc_findInPairs", "syntax": "[<array>,key] call BIS_fnc_findInPairs"}, "BIS_fnc_findLookAt": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Given target location, calculates orientation vectors facing direction Parameter(s): _this select 0: Object - The curve Returns: Array - In format [Dir Vector, Up Vector] */", "docSyntax": "[] call BIS_fnc_findLookAt", "syntax": "[] call BIS_fnc_findLookAt"}, "BIS_fnc_findNestedElement": {"version": "FNC", "tags": "", "description": "Function to find item in nested arrays and return a path to the first match.", "example": "private _array = [[1, 2], [3, 4]]; _path = [_array, 3] call BIS_fnc_findNestedElement; //\u00a0expected result: [1, 0] //\u00a0((_array select 1) select 0) == 3", "docSyntax": "[array, query] call BIS_fnc_findNestedElement", "syntax": "[<array>,query] call BIS_fnc_findNestedElement"}, "BIS_fnc_findOverwatch": {"version": "FNC", "tags": "", "description": "Selects a position that provides overwatch onto another position.", "example": "[getPosATL enemyTank, 300, 75, 20, getPosATL player] call BIS_fnc_findOverwatch;", "docSyntax": "[target, maxDistance, minDistance, minHeightAbove, searchCentre] call BIS_fnc_findOverwatch", "syntax": "[<object>,maxDistance,minDistance,minHeightAbove,searchCentre] call BIS_fnc_findOverwatch"}, "BIS_fnc_findSafePos": {"version": "FNC", "tags": "", "description": "This function generates position on a map according to several given parameters (see diagram).", "example": "Find position minimum 1m from from player but not further than 150m, not closer than 3m to any other object, not in the water, maximum gradient of 20, not on the shoreline:", "docSyntax": "[center, minDist, maxDist, objDist, waterMode, maxGrad, shoreMode, blacklistPos, defaultPos] call BIS_fnc_findSafePos", "syntax": "[center,minDist,maxDist,objDist,waterMode,maxGrad,shoreMode,blacklistPos,defaultPos] call BIS_fnc_findSafePos"}, "BIS_fnc_finishCuratorChallenge": {"version": "FNC", "tags": "", "description": "Handle repeated curator challenges. When rewards defined in the argument are exceeded, refilling points bar fill be offered instead. Number of challenges can be retrieved by", "example": "[BIS_curator,[\"DestroyVehicle\",BIS_curator],\"SUCCEEDED\"] call BIS_fnc_finishCuratorChallenge; _number = BIS_curator getVariable \"DestroyVehicle\";", "docSyntax": "[curator,input,taskState]] call BIS_fnc_finishCuratorChallenge", "syntax": "[curator,input,taskState]] call BIS_fnc_finishCuratorChallenge"}, "BIS_fnc_fire": {"version": "FNC", "tags": "", "description": "Makes a unit or a vehicle fire given muzzle. Make sure that there is some ammo to fire, and, in case of a unit, the weapon with given muzzle is already selected. It can be used to fire pretty much any muzzle on unit or vehicle from anywhere. Available weapons could usually be found with weapons, weaponsTurret and allTurrets commands.", "example": "marshall = \"B_APC_Wheeled_01_cannon_F\" createVehicle position player; createVehicleCrew marshall; [marshall, \"HE\"] call BIS_fnc_fire; //\u00a0fires HE muzzle of the main cannon [marshall, \"AP\"] call BIS_fnc_fire; //\u00a0fires AP muzzle of the main cannon [marshall, \"autocannon_40mm_CTWS\"] call BIS_fnc_fire; //\u00a0fires HE muzzle, because it is default [marshall, \"LMG_M200_body\"] call BIS_fnc_fire; //\u00a0fires machine gun [marshall, \"SmokeLauncher\"] call BIS_fnc_fire; //\u00a0fires smoke launcher [marshall, \"TruckHorn\"] call BIS_fnc_fire; //\u00a0beeps the horn", "docSyntax": "[entity, muzzle, turret] call BIS_fnc_fire", "syntax": "[entity,muzzle,turret] call BIS_fnc_fire"}, "BIS_fnc_firedBombDemine": {"version": "FNC", "tags": "", "description": "Function used inside the IDAP showcase.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_fireSupport": {"version": "FNC", "tags": "", "description": "Mortar/artillery fire support.", "example": "[BIS_Mortar, [3600,3600,0], \"\", 100, 24, 10] spawn BIS_fnc_fireSupport;", "docSyntax": "[arty,target,mag,radius,rounds,delay,conditionEnd,safezone] spawn BIS_fnc_fireSupport", "syntax": "[arty,<object>,mag,radius,rounds,<scalar>,conditionEnd,safezone] spawn BIS_fnc_fireSupport"}, "BIS_fnc_fireSupportCluster": {"version": "FNC", "tags": "", "description": "Virtual fire support - cluster shell.", "example": "[BIS_Player, \"G_40mm_HEDP\", 100, [4,10], 10] spawn BIS_fnc_fireSupportCluster;", "docSyntax": "[position,ammo,radius,rounds,delay,conditionEnd,safezone,altitude,velocity,sounds] spawn BIS_fnc_fireSupportCluster", "syntax": "[position,ammo,radius,rounds,<scalar>,conditionEnd,safezone,<scalar>,velocity,sounds] spawn BIS_fnc_fireSupportCluster"}, "BIS_fnc_fireSupportVirtual": {"version": "FNC", "tags": "", "description": "Fires virtual mortar/artillery fire support.", "example": "[BIS_Player, \"Sh_82mm_AMOS\", 100, 24, 10] spawn BIS_fnc_fireSupportVirtual;", "docSyntax": "[target, ammo, radius, rounds, delay, conditionEnd, safezone, alt, speed, sounds] spawn BIS_fnc_fireSupportVirtual", "syntax": "[<object>,ammo,radius,rounds,<scalar>,conditionEnd,safezone,alt,<scalar>,sounds] spawn BIS_fnc_fireSupportVirtual"}, "BIS_fnc_fixDate": {"version": "FNC", "tags": "", "description": "Checks the array with date data and makes sure the values are within the boundries.", "example": "private _fixedDate = [2033, -2, 89, 25, 75] call BIS_fnc_fixDate;", "docSyntax": "date call BIS_fnc_fixDate", "syntax": "date call BIS_fnc_fixDate"}, "BIS_fnc_flamesEffect": {"version": "FNC", "tags": "", "description": "Flames (texture) postprocess.", "example": "call BIS_fnc_flamesEffect;", "docSyntax": "call BIS_fnc_flamesEffect", "syntax": "call BIS_fnc_flamesEffect"}, "BIS_fnc_flies": {"version": "FNC", "tags": "", "description": "Spawns flies around position.", "example": "private _flies = [position deadBody, 0.05, 1.5] call BIS_fnc_flies;", "docSyntax": "[position, interval, areaSize] call BIS_fnc_flies", "syntax": "[position,interval,areaSize] call BIS_fnc_flies"}, "BIS_fnc_forceCuratorInterface": {"version": "FNC", "tags": "", "description": "Force curator interface, so user cannot exit it by pressing Zeus key.", "example": "[true, true] call BIS_fnc_forceCuratorInterface;", "docSyntax": "[mode, waitUntil] call BIS_fnc_forceCuratorInterface", "syntax": "[mode,waitUntil] call BIS_fnc_forceCuratorInterface"}, "BIS_fnc_forceEnd": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_formatCuratorChallengeObjects": {"version": "FNC", "tags": "", "description": "Format the list of objects compatible with curator challenge to be displayed in the task descriptipon.", "example": "[\"class_1\",\"class_2\"] call BIS_fnc_formatCuratorChallengeObjects;", "docSyntax": "classes call BIS_fnc_formatCuratorChallengeObjects", "syntax": "classes call BIS_fnc_formatCuratorChallengeObjects"}, "BIS_fnc_fps": {"version": "FNC", "tags": "", "description": "Function to measure FPS. Spawns code running for given time and displays result on screen via titleText, globalChat and diag_log. Variable BIS_fps_output is filled with diag_log content too.", "example": "private _scriptHandle = [10, \"50 units on screen\", 3] call BIS_fnc_fps;", "docSyntax": "[duration, sceneId, startDelay] call BIS_fnc_fps", "syntax": "[duration,sceneId,startDelay] call BIS_fnc_fps"}, "BIS_fnc_friendlySides": {"version": "FNC", "tags": "", "description": "Returns sides allied to the given side / object.", "example": "player call BIS_fnc_friendlySides; //\u00a0-can- return [FRIENDLY,WEST,GUER,CIV]", "docSyntax": "toCheck call BIS_fnc_friendlySides", "syntax": "toCheck call BIS_fnc_friendlySides"}, "BIS_fnc_FTLmanager": {"version": "FNC", "tags": "", "description": "FTL (Friendly To Local) manager tracks relationship between player and civilian side.", "example": "[\"Init\"] call BIS_fnc_FTLmanager;", "docSyntax": "[functionCalled, type] call BIS_fnc_FTLmanager", "syntax": "[functionCalled,type] call BIS_fnc_FTLmanager"}, "BIS_fnc_functionMeta": {"version": "FNC", "tags": "", "description": "Returns function's meta data.", "example": "//\u00a0returns [\"A3\\functions_f\\Debug\\fn_functionMeta.sqf\", \".sqf\", 0, false, false, false, \"A3\", \"Debug\", \"functionMeta\"] \"BIS_fnc_functionMeta\" call BIS_fnc_functionMeta;", "docSyntax": "functionName call BIS_fnc_functionMeta", "syntax": "functionName call BIS_fnc_functionMeta"}, "BIS_fnc_functionPath": {"version": "FNC", "tags": "", "description": "Returns path to function file.", "example": "private _path = \"BIS_fnc_wpLand\" call BIS_fnc_functionPath;", "docSyntax": "functionName call BIS_fnc_functionPath", "syntax": "functionName call BIS_fnc_functionPath"}, "BIS_fnc_functionsDebug": {"version": "FNC", "tags": "", "description": "Changes debug mode used when compiling functions from the Arma 3: Functions Library. Also recompiles all functions. See Arma 3: Functions Library for more information.", "example": "2 call BIS_fnc_functionsDebug;", "docSyntax": "mode call BIS_fnc_functionsDebug", "syntax": "mode call BIS_fnc_functionsDebug"}, "BIS_fnc_garage": {"version": "FNC", "tags": "", "description": "Splendid\u2122 Virtual Arsenal Garage.", "example": "[] call BIS_fnc_garage;", "docSyntax": "[mode, params] call BIS_fnc_garage", "syntax": "[mode,<any>] call BIS_fnc_garage"}, "BIS_fnc_garage3DEN": {"version": "FNC", "tags": "", "description": "The code is identical to the one of BIS_fnc_garage, except that FNC_IS3DEN is set to 1. For more information about the garage, visit BIS_fnc_garage", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_GC": {"version": "FNC", "tags": "", "description": "Sends an entity to the garbage collection queue. Replaces Arma 2 Garbage Collector.", "example": "[dude1] spawn BIS_fnc_GC;", "docSyntax": "entity spawn BIS_fnc_GC", "syntax": "entity spawn BIS_fnc_GC"}, "BIS_fnc_GCinit": {"version": "FNC", "tags": "", "description": "Initializes Garbage Collection.", "example": "[] call BIS_fnc_GCinit;", "docSyntax": "[] call BIS_fnc_GCinit", "syntax": "[] call BIS_fnc_GCinit"}, "BIS_fnc_genericSentence": {"version": "FNC", "tags": "", "description": "Play generic sentence with probablity set by bis_genericSentenceMode variable (0.5 = 50%, 1 = 100%)", "example": "[\"FeedbackFlightNegativeHeightTooHigh\"] call BIS_fnc_genericSentence;", "docSyntax": "[class, speaker, delay, canRepeat] call BIS_fnc_genericSentence", "syntax": "[class,speaker,<scalar>,canRepeat] call BIS_fnc_genericSentence"}, "BIS_fnc_genericSentenceInit": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_geometricMean": {"version": "FNC", "tags": "", "description": "Returns the geometric mean of an array of numbers.", "example": "[0,1,3] call BIS_fnc_geometricMean;//Returns 1.73205", "docSyntax": "array call BIS_fnc_geometricMean", "syntax": "<array> call BIS_fnc_geometricMean"}, "BIS_fnc_getAngleDelta": {"version": "FNC", "tags": "", "description": "Returns the smallest difference between two angles in degrees.", "example": "private _delta = [90,193] call BIS_fnc_getAngleDelta;//-103", "docSyntax": "[angleA, angleB] call BIS_fnc_getAngleDelta", "syntax": "[angleA,angleB] call BIS_fnc_getAngleDelta"}, "BIS_fnc_getArea": {"version": "FNC", "tags": "", "description": "Extracts area information from trigger, marker, location or array", "example": "private _area = [player, 100] call BIS_fnc_getArea;", "docSyntax": "param call BIS_fnc_getArea", "syntax": "param call BIS_fnc_getArea"}, "BIS_fnc_getBorderMarkers": {"version": "FNC", "tags": "", "description": "Retrieves marker names used in the border restrictions module.", "example": "call BIS_fnc_getBorderMarkers;", "docSyntax": "call BIS_fnc_getBorderMarkers", "syntax": "call BIS_fnc_getBorderMarkers"}, "BIS_fnc_getCfg": {"version": "FNC", "tags": "", "description": "Smart-return config (extension for BIS_fnc_getCfgXXXX functions). Can by called 2 ways:", "example": "( configFile >> \"BulletBubbles\" >> \"BulletBubbles1\" ) call BIS_fnc_getCfg;", "docSyntax": "input call BIS_fnc_getCfg", "syntax": "input call BIS_fnc_getCfg"}, "BIS_fnc_getCfgData": {"version": "FNC", "tags": "", "description": "Smart-return number, text or array value from config.", "example": "private _value = (configFile >> \"BulletBubbles\" >> \"BulletBubbles1\" >> \"type\") call BIS_fnc_getCfgData;", "docSyntax": "config call BIS_fnc_getCfgData", "syntax": "config call BIS_fnc_getCfgData"}, "BIS_fnc_getCfgDataArray": {"version": "FNC", "tags": "", "description": "Gets an array defined in Config. If the value is not an array, it is retyped into one.", "example": "private _array = (missionConfigFile >> \"Characters\" >> \"Default\" >> \"equipAdjust\") call BIS_fnc_getCfgDataArray;", "docSyntax": "config call BIS_fnc_getCfgDataArray", "syntax": "config call BIS_fnc_getCfgDataArray"}, "BIS_fnc_getCfgDataBool": {"version": "FNC", "tags": "", "description": "Gets a number defined in config and retype it into a boolean. Everything greater than 0 is true, otherwise it is false.", "example": "private _value = (missionConfigFile >> \"Characters\" >> \"Default\" >> \"equipAdjust\") call BIS_fnc_getCfgDataBool;", "docSyntax": "config call BIS_fnc_getCfgDataBool", "syntax": "config call BIS_fnc_getCfgDataBool"}, "BIS_fnc_getCfgDataObject": {"version": "FNC", "tags": "", "description": "/* Description: Get the object defined in cfg by its name (global variable). Remark(s): * Can by called 2 ways: * 1st way (general) works for any config. * 2nd way is for comfortable working with mission description.ext. Parameter(s): _this: CFG _this: ARRAY of STRINGS - missionConfigFile classes and an attribute. Example: * 1st way of calling: _value = (missionconfigfile >> \"Hubs\" >> \"A1\" >> \"QuickStart\" >> \"trigger\") call BIS_fnc_getCfgDataObject; * 2nd way of calling: _value = [\"Hubs\",\"A1\",\"QuickStart\",\"trigger\"] call BIS_fnc_getCfgDataObject; Returns: OBJECT or OBJNULL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_getCfgDataPool": {"version": "FNC", "tags": "", "description": "/* Description: * Get array of attribute values out of the parent config class. * Attributes need to be in this format: \"_n\", where n is an index number (starting from 0). * If any discrepancy in indexing is detected, loading will stop and only the correctly indexed values will be returned. * Max. index supported is 99. * If more then 9 attributes used, 0-9 need to use leading zeroes. CFG example: class Timeline { class StageA { _0[] = {2035,7,7,04,30}; _1[] = {2035,7,7,06,15}; _2[] = {2035,7,7,18,35}; _3[] = {2035,7,8,09,05}; _4[] = {2035,7,8,13,25}; _5[] = {2035,7,8,17,10}; _6[] = {2035,7,8,21,40}; _7[] = {2035,7,9,19,55}; }; }; Remark(s): * Can by called 2 ways: * 1st way (general) works for any config. * 2nd way is for comfortable working with mission description.ext. Parameter(s): _this: CFG _this: ARRAY of STRINGS - missionConfigFile classes. Example: * 1st way of calling: _array = (configfile >> \"BulletBubbles\" >> \"BulletBubbles1\") call BIS_fnc_getCfgData; _array = (missionconfigfile >> \"Timeline\" >> \"StageA\") call BIS_fnc_getCfgData; * 2nd way of calling: _array = [\"Timeline\",\"StageA\"] call BIS_fnc_getCfgData; Returns: ARRAY or nil, if parent class is not found */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_getCfgIsClass": {"version": "FNC", "tags": "", "description": "Return true if it is a class. Can by called in two ways:", "example": "private _isClass = (missionConfigFile >> \"Hubs\" >> \"A1\" >> \"QuickStart\") call BIS_fnc_getCfgIsClass;", "docSyntax": "configEntry call BIS_fnc_getCfgIsClass", "syntax": "configEntry call BIS_fnc_getCfgIsClass"}, "BIS_fnc_getCfgSubClasses": {"version": "FNC", "tags": "", "description": "/* Description: Return all child classes of given class. Remark(s): * Can by called 2 ways: * 1st way (general) works for any config. * 2nd way is for comfortable working with mission description.ext. Parameter(s): _this: CFG _this: ARRAY of STRINGS - missionConfigFile classes and an attribute. Example: * 1st way of calling: _subclasses = (missionconfigfile >> \"Hubs\" >> \"A1\" >> \"QuickStart\") call Bis_fnc_getCfgSubClasses; * 2nd way of calling: _subclasses = [\"Hubs\"] call Bis_fnc_getCfgSubClasses; Returns: ARRAY (of STRINGS with sub-classes names) */", "example": "private _allVehHitPoints = (configfile >> \"CfgVehicles\" >> \"C_Hatchback_01_sport_F\" >> \"HitPoints\") call BIS_fnc_getCfgSubClasses;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_getCloudletParams": {"version": "FNC", "tags": "", "description": "Return particle params of CfgCloudlets class.", "example": "[\"AmmoLightSmokeParticles\"] call BIS_fnc_getCloudletParams;", "docSyntax": "[cfgCloudletClass] call BIS_fnc_getCloudletParams", "syntax": "[cfgCloudletClass] call BIS_fnc_getCloudletParams"}, "BIS_fnc_getFactions": {"version": "FNC", "tags": "", "description": "Gets list and sides of current factions.", "example": "call BIS_fnc_getFactions; //\u00a0returns all factions", "docSyntax": "[parameter] call BIS_fnc_getFactions", "syntax": "[parameter] call BIS_fnc_getFactions"}, "BIS_fnc_getFromPairs": {"version": "FNC", "tags": "", "description": "Searches the associative array for the 1st occurance of the key string and returns the value associated with it. Search is not case sensitiv.", "example": "[[[\"apple\",3],[\"pear\",\"test\"]],\"pear\"] call BIS_fnc_getFromPairs; //\u00a0Returns \"test\"", "docSyntax": "[array, key, defaultValue] call BIS_fnc_getFromPairs", "syntax": "[<array>,key,defaultValue] call BIS_fnc_getFromPairs"}, "BIS_fnc_getIDC": {"version": "FNC", "tags": "", "description": "Returns IDD of given display.", "example": "private _IDC = [configFile >> \"Display3DENPlace\", \"ButtonCancel\"] call BIS_fnc_getIDC;", "docSyntax": "[config, ctrlName] call BIS_fnc_getIDC", "syntax": "[config,ctrlName] call BIS_fnc_getIDC"}, "BIS_fnc_getIDD": {"version": "FNC", "tags": "", "description": "Returns IDD of given display.", "example": "private _IDD = [configFile >> \"display3DENPublishMissionSelectImage\"] call BIS_fnc_getIDD;", "docSyntax": "[config] call BIS_fnc_getIDD", "syntax": "[config] call BIS_fnc_getIDD"}, "BIS_fnc_getIntersectionsUnderCursor": {"version": "FNC", "tags": "", "description": "Returns intersections under cursor. For more information see lineIntersectsSurfaces.", "example": "[0.5, 0.5, player, objNull, true, \"VIEW\"] call BIS_fnc_getIntersectionsUnderCursor;", "docSyntax": "[screenX, screenY, ignoreObj1, ignoreObj2, sortMode, maxResults, LOD1, LOD2] call BIS_fnc_getIntersectionsUnderCursor", "syntax": "[screenX,screenY,ignoreObj1,ignoreObj2,sortMode,maxResults,LOD1,LOD2] call BIS_fnc_getIntersectionsUnderCursor"}, "BIS_fnc_getLineDist": {"version": "FNC", "tags": "", "description": "Return the distance between two sections of a virtual straight line.", "example": "private _distance = [0,5,15,20] call BIS_fnc_getLineDist; //\u00a0returns 10", "docSyntax": "[start1, length1, start2, length2] call BIS_fnc_getLineDist", "syntax": "[start1,length1,start2,length2] call BIS_fnc_getLineDist"}, "BIS_fnc_getMarkers": {"version": "FNC", "tags": "", "description": "Returns markers in format PREFIX_N where PREFIX_ is the provided argument and N is an integer between 1 and 128. If there are 128 markers but marker 123 is missing, then only the first 122 marker will be returned.", "example": "[\"BIS_marker_\"] call BIS_fnc_getMarkers; //\u00a0[\"BIS_marker_1\",\"BIS_marker_2\",...]", "docSyntax": "[markerPrefix] call BIS_fnc_getMarkers", "syntax": "[markerPrefix] call BIS_fnc_getMarkers"}, "BIS_fnc_getMarkerState": {"version": "FNC", "tags": "", "description": "Returns the state of a marker.", "example": "private _state = [\"BIS_marker_1\"] call BIS_fnc_getMarkerState;", "docSyntax": "[marker] call BIS_fnc_getMarkerState", "syntax": "[marker] call BIS_fnc_getMarkerState"}, "BIS_fnc_getName": {"version": "FNC", "tags": "", "description": "Returns name of a unit. Name of unit is stored in it is namespace so it can be retrieved later, mainly for when unit dies. Name is stored in the variable BIS_fnc_getName_name.", "example": "[player] call BIS_fnc_getName;", "docSyntax": "[object] call BIS_fnc_getName", "syntax": "[<object>] call BIS_fnc_getName"}, "BIS_fnc_getNetMode": {"version": "FNC", "tags": "", "description": "Returns the current net mode as a string.", "example": "private _netMode = call BIS_fnc_getNetMode;", "docSyntax": "call BIS_fnc_getNetMode", "syntax": "call BIS_fnc_getNetMode"}, "BIS_fnc_getObjectBBD": {"version": "FNC", "tags": "", "description": "Get object boundingBoxReal max values and store them with setVariable [\"BIS_EGSpectator_objectBBD\", [maxWidth, maxLength, maxHeight]] for later calls.", "example": "[player] call BIS_fnc_getObjectBBD;", "docSyntax": "[object] call BIS_fnc_getObjectBBD", "syntax": "[<object>] call BIS_fnc_getObjectBBD"}, "BIS_fnc_getParamValue": {"version": "FNC", "tags": "", "description": "Returns the value of mission param given by the class name. This function is global and will return selected param value on any PC including JIP. For backward compatibility it also supports \"param1\" and \"param2\".", "example": "private _viewDistance = \"ViewDistance\" call BIS_fnc_getParamValue;", "docSyntax": "paramClass call BIS_fnc_getParamValue", "syntax": "paramClass call BIS_fnc_getParamValue"}, "BIS_fnc_getPitchBank": {"version": "FNC", "tags": "", "description": "Returns the pitch and bank of an object, in degrees. Yaw can be found using the getDir command.", "example": "private _pitchBank = vehicle player call BIS_fnc_getPitchBank;", "docSyntax": "object call BIS_fnc_getPitchBank", "syntax": "<object> call BIS_fnc_getPitchBank"}, "BIS_fnc_getRespawnInventories": {"version": "FNC", "tags": "", "description": "Return respawn inventories available for the given target.", "example": "private _respawnInfo = [player] call BIS_fnc_getRespawnInventories;", "docSyntax": "[target, showDisabled, returnAllInfo] call BIS_fnc_getRespawnInventories", "syntax": "[<object>,showDisabled,returnAllInfo] call BIS_fnc_getRespawnInventories"}, "BIS_fnc_getRespawnMarkers": {"version": "FNC", "tags": "", "description": "Returns all respawn markers for given side.", "example": "[west, false] call BIS_fnc_getRespawnMarkers;", "docSyntax": "[side, vehicleMarkers] call BIS_fnc_getRespawnMarkers", "syntax": "[<objSide>,vehicleMarkers] call BIS_fnc_getRespawnMarkers"}, "BIS_fnc_getRespawnPositions": {"version": "FNC", "tags": "", "description": "Return scripted respawn positions available for the given unit.", "example": "private _respawnPositions = missionNamespace call BIS_fnc_getRespawnPositions; //\u00a0can be e.g [bis_o1, [1337, 4200, 0.01], \"myMarker\", myVehicle]", "docSyntax": "input call BIS_fnc_getRespawnPositions", "syntax": "input call BIS_fnc_getRespawnPositions"}, "BIS_fnc_getServerVariable": {"version": "FNC", "tags": "", "description": "Fetch a variable saved on server. Used when you want to share variables only to specific clients to prevent large traffic. Must be run in scheduled environment because communication with server takes some time.", "example": "[missionNamespace, \"BIS_someVar\", \"defaultValue\"] call BIS_fnc_getServerVariable;", "docSyntax": "[target, varName, default] call BIS_fnc_getServerVariable", "syntax": "[<object>,varName,default] call BIS_fnc_getServerVariable"}, "BIS_fnc_getTurrets": {"version": "FNC", "tags": "", "description": "Returns vehicle turrets.", "example": "[vehicle player] call BIS_fnc_getTurrets;", "docSyntax": "[input, outputType] call BIS_fnc_getTurrets", "syntax": "[input,outputType] call BIS_fnc_getTurrets"}, "BIS_fnc_getUnitByUID": {"version": "FNC", "tags": "", "description": "Returns player-controlled unit (if any) according to the provided player UID.", "example": "private _unitPlayedByUID550055 = \"550055\" call BIS_fnc_getUnitByUID;", "docSyntax": "playerUID call BIS_fnc_getUnitByUID", "syntax": "playerUID call BIS_fnc_getUnitByUID"}, "BIS_fnc_getUnitInsignia": {"version": "FNC", "tags": "", "description": "Get a unit's uniform insignia class set with BIS_fnc_setUnitInsignia.", "example": "private _insigniaClass = [player] call BIS_fnc_getUnitInsignia", "docSyntax": "[target] call BIS_fnc_getUnitInsignia", "syntax": "[<object>] call BIS_fnc_getUnitInsignia"}, "BIS_fnc_getVehicleCustomization": {"version": "FNC", "tags": "", "description": "Return vehicle customization settings.", "example": "[vehicle player] call BIS_fnc_getVehicleCustomization;", "docSyntax": "[object, class] call BIS_fnc_getVehicleCustomization", "syntax": "[<object>,class] call BIS_fnc_getVehicleCustomization"}, "BIS_fnc_getVirtualBackpackCargo": {"version": "FNC", "tags": "", "description": "Get virtual backpacks from an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "BIS_ammoBox call BIS_fnc_getVirtualBackpackCargo;", "docSyntax": "object call BIS_fnc_getVirtualBackpackCargo", "syntax": "<object> call BIS_fnc_getVirtualBackpackCargo"}, "BIS_fnc_getVirtualItemCargo": {"version": "FNC", "tags": "", "description": "Get virtual items from an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "BIS_ammoBox call BIS_fnc_getVirtualItemCargo;", "docSyntax": "object call BIS_fnc_getVirtualItemCargo", "syntax": "<object> call BIS_fnc_getVirtualItemCargo"}, "BIS_fnc_getVirtualMagazineCargo": {"version": "FNC", "tags": "", "description": "Get virtual magazines from an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "BIS_ammoBox call BIS_fnc_getVirtualMagazineCargo;", "docSyntax": "object call BIS_fnc_getVirtualMagazineCargo", "syntax": "<object> call BIS_fnc_getVirtualMagazineCargo"}, "BIS_fnc_getVirtualWeaponCargo": {"version": "FNC", "tags": "", "description": "Get virtual weapons from an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "BIS_ammoBox call BIS_fnc_getVirtualWeaponCargo;", "docSyntax": "object call BIS_fnc_getVirtualWeaponCargo", "syntax": "<object> call BIS_fnc_getVirtualWeaponCargo"}, "BIS_fnc_greatestNum": {"version": "FNC", "tags": "", "description": "Returns the greatest number out of the passed set.", "example": "private _result = [7,2,1,5,10] call BIS_fnc_greatestNum; //_result = 10", "docSyntax": "numbers call BIS_fnc_greatestNum", "syntax": "numbers call BIS_fnc_greatestNum"}, "BIS_fnc_gridToPos": {"version": "FNC", "tags": "", "description": "Converts grid coordinates to world position.", "example": "private _realPosition = \"183221\" call BIS_fnc_gridToPos;", "docSyntax": "gridPosition call BIS_fnc_gridToPos", "syntax": "gridPosition call BIS_fnc_gridToPos"}, "BIS_fnc_groupFromNetId": {"version": "FNC", "tags": "", "description": "Extends MP-only groupFromNetId functionality to SP", "example": "private _grp = \"0:3\" call BIS_fnc_groupFromNetId;", "docSyntax": "netId call BIS_fnc_groupFromNetId", "syntax": "netId call BIS_fnc_groupFromNetId"}, "BIS_fnc_groupIndicator": {"version": "FNC", "tags": "", "description": "Displays Group Indicator (to the right of the screen in 1.82)", "example": "[] call BIS_fnc_groupIndicator; //\u00a0starts group indicator", "docSyntax": "argument call BIS_fnc_groupIndicator", "syntax": "argument call BIS_fnc_groupIndicator"}, "BIS_fnc_groupVehicles": {"version": "FNC", "tags": "", "description": "Returns all vehicles a group possesses, assigned vehicles can be included.", "example": "[group player, true] call BIS_fnc_groupVehicles;", "docSyntax": "[target, assignedVeh] call BIS_fnc_groupVehicles", "syntax": "[<object>,assignedVeh] call BIS_fnc_groupVehicles"}, "BIS_fnc_GUIbackground": {"version": "FNC", "tags": "", "description": "Creates GUI background.", "example": "[1,1,1,1] call BIS_fnc_GUIbackground;", "docSyntax": "[position] call BIS_fnc_GUIbackground", "syntax": "[position] call BIS_fnc_GUIbackground"}, "BIS_fnc_GUIeditor": {"version": "FNC", "tags": "", "description": "Opens the Arma 3: User Interface Editor.", "example": "call BIS_fnc_GUIeditor;", "docSyntax": "call BIS_fnc_GUIeditor", "syntax": "call BIS_fnc_GUIeditor"}, "BIS_fnc_guiEffectTiles": {"version": "FNC", "tags": "", "description": "Used in dialogs to animate background UAV tiles. See notes for a full working example.", "example": "[findDisplay 49] call BIS_fnc_guiEffectTiles //\u00a0display 49 - pause menu", "docSyntax": "[display] call BIS_fnc_guiEffectTiles", "syntax": "[<uiDisplay>] call BIS_fnc_guiEffectTiles"}, "BIS_fnc_GUIgrid": {"version": "FNC", "tags": "", "description": "Returns grid params and stores it into uiNamespace.", "example": "call BIS_fnc_GUIgrid; //[-0.452381,0.214286,1.2,1]", "docSyntax": "[category, grid] call BIS_fnc_GUIgrid", "syntax": "[category,grid] call BIS_fnc_GUIgrid"}, "BIS_fnc_GUIgridToProfile": {"version": "FNC", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_GUIhint": {"version": "FNC", "tags": "", "description": "/* Description: Creates advanced hintC dialog Parameter(s): _this select 0: ARRAY in format [text,picture] * text: STRING - hint text * picture: STRING - picture [item1,item2...] - Listbox item ARRAYs in format [itemText,itemDescription,picture,icon] * itemText: STRING - Text displayed in listbox * itemDescription (Optional): STRING - text displayed after clicking on item * picture (Optional): STRING - picture displayed after clicking on item * icon (Optional): STRING - icon displayed in listbox left from text _this select 1 (Optional): STRING - hint header _this select 2 (Optional): ARRAY - [STRING,CODE,NUMBER] - text on left button (when \"\", button is hidden), code executed upon clicking and fade out delay. If only text is present, button is disabled. _this select 3 (Optional): ARRAY - [STRING,CODE,NUMBER] - STRING - text on right button and code executed upon clicking _this select 4 (Optional): ARRAY - [STRING,CODE,NUMBER] - STRING - text on middle button and code executed upon clicking _this select 5 (Optional): NUMBER or ARRAY - width or [width,height] of picture (in grid coordinates). Width > 17 means only picture is used. Returns: ARRAY - [endState(,lbId)] * endState: NUMBER - 1 when clicked on right button, -1 when clicked on left button, 0 when escaped * lbId: NUMBER - selected listbox item (when listbox was used) */ #define DISPLAY_CLASS 'Hsim_RscDisplayCommonHint_guiHint' #define DISPLAY_CONFIG (configfile >> \"RscDisplayCommonHint\") #define DISPLAY (uinamespace getvariable DISPLAY_CLASS) #define CONTROL (DISPLAY displayctrl _idc) #define CONTROL_FADEINTIME 0.3 #define CONTROL_FADEIN \\ CONTROL ctrlsetfade 1; \\ CONTROL ctrlcommit 0; \\ CONTROL ctrlsetfade 0; \\ CONTROL ctrlcommit CONTROL_FADEINTIME;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_guiMessage": {"version": "FNC", "tags": "", "description": "Shows customized native message box to user.", "example": "[\"Hello World\"] spawn BIS_fnc_guiMessage;", "docSyntax": "[message, header, position, isCancel, parent, pause] spawn BIS_fnc_guiMessage", "syntax": "[message,header,position,isCancel,parent,pause] spawn BIS_fnc_guiMessage"}, "BIS_fnc_GUInewsfeed": {"version": "FNC", "tags": "", "description": "Load newsfeed.", "example": "[_display] call BIS_fnc_GUInewsfeed;", "docSyntax": "[display] call BIS_fnc_GUInewsfeed", "syntax": "[<uiDisplay>] call BIS_fnc_GUInewsfeed"}, "BIS_fnc_halo": {"version": "FNC", "tags": "", "description": "Makes a High Altitude Low Opening (HALO) parachute jump.", "example": "[player] call BIS_fnc_halo; //\u00a0instantly parachutes the player object", "docSyntax": "[unit, altitude] call BIS_fnc_halo", "syntax": "[<objUnit>,<scalar>] call BIS_fnc_halo"}, "BIS_fnc_halt": {"version": "FNC", "tags": "", "description": "Halts current function and all its parents and logs an error message.", "example": "[\"You are now supposed to be %1\", rank player] call BIS_fnc_halt;", "docSyntax": "[param1, param2, ..., param10] call BIS_fnc_halt", "syntax": "[param1,param2,...,param10] call BIS_fnc_halt"}, "BIS_fnc_hasItem": {"version": "FNC", "tags": "", "description": "Returns true if object contains given item in inventory / cargo storage.", "example": "[player, \"ItemMap\"] call BIS_fnc_hasItem;", "docSyntax": "[object, item, searchCrew] call BIS_fnc_hasItem", "syntax": "[<object>,<objItem>,searchCrew] call BIS_fnc_hasItem"}, "BIS_fnc_hatchClose": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_hatchClose", "syntax": "[] call BIS_fnc_hatchClose"}, "BIS_fnc_hatchOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_hatchOpen", "syntax": "[] call BIS_fnc_hatchOpen"}, "BIS_fnc_healing": {"version": "FNC", "tags": "", "description": "Healing postprocess. Supposed to give healing postprocess effects.", "example": "call BIS_fnc_healing; //\u00a0do NOT use", "docSyntax": "call BIS_fnc_healing", "syntax": "call BIS_fnc_healing"}, "BIS_fnc_healthEffects": {"version": "FNC", "tags": "", "description": "Effects when player is hit. Parameters are sent by the HandleDamage event handler.", "example": "call BIS_fnc_healthEffects;", "docSyntax": "call BIS_fnc_healthEffects", "syntax": "call BIS_fnc_healthEffects"}, "BIS_fnc_helicopterCanFly": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_helicopterDamage": {"version": "FNC", "tags": "", "description": "Handling EH-based helicopter damage, event handler in question being Dammagedsic.", "example": "myHelicopter addEventHandler [\"Dammaged\", { _this call BIS_fnc_helicopterDamage; }];", "docSyntax": "[helicopter, selection, damage] call BIS_fnc_helicopterDamage", "syntax": "[helicopter,selection,<scalar>] call BIS_fnc_helicopterDamage"}, "BIS_fnc_helicopterGetHitpoints": {"version": "FNC", "tags": "", "description": "Return all hitpoints for a helicopter.", "example": "[BIS_helicopter] call BIS_fnc_helicopterGetHitpoints;", "docSyntax": "object call BIS_fnc_helicopterGetHitpoints", "syntax": "<object> call BIS_fnc_helicopterGetHitpoints"}, "BIS_fnc_helicopterSeat": {"version": "FNC", "tags": "", "description": "Check if unit sits on right or left seat.", "example": "player call BIS_fnc_helicopterSeat;", "docSyntax": "unit call BIS_fnc_helicopterSeat", "syntax": "<objUnit> call BIS_fnc_helicopterSeat"}, "BIS_fnc_helicopterSeatMove": {"version": "FNC", "tags": "", "description": "Plays cockpit animation. Take On Helicopters only.", "example": "[instructor, \"thumbUp\"] call BIS_fnc_helicopterSeatMove;", "docSyntax": "[unit, gesture] call BIS_fnc_helicopterSeatMove", "syntax": "[<objUnit>,gesture] call BIS_fnc_helicopterSeatMove"}, "BIS_fnc_helicopterType": {"version": "FNC", "tags": "", "description": "Returns helicopter type.", "example": "private _helicopterType = [vehicle player] call BIS_fnc_helicopterType;", "docSyntax": "[object] call BIS_fnc_helicopterType", "syntax": "[<object>] call BIS_fnc_helicopterType"}, "BIS_fnc_help": {"version": "FNC", "tags": "", "description": "Opens the Functions Viewer which lists all functions defined in:", "example": "call BIS_fnc_help;", "docSyntax": "parentDisplay call BIS_fnc_help", "syntax": "parentDisplay call BIS_fnc_help"}, "BIS_fnc_hermite": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_hermite", "syntax": "[] call BIS_fnc_hermite"}, "BIS_fnc_hermiteVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_hermiteVector", "syntax": "[] call BIS_fnc_hermiteVector"}, "BIS_fnc_HEXtoRGB": {"version": "FNC", "tags": "", "description": "Convert hexcode color into RGBA array format.", "example": "[\"025D00FF\"] call BIS_fnc_HEXtoRGB; //\u00a0[1,0.843138,0,1]", "docSyntax": "[hexString] call BIS_fnc_HEXtoRGB", "syntax": "[hexString] call BIS_fnc_HEXtoRGB"}, "BIS_fnc_hideMarker": {"version": "FNC", "tags": "", "description": "Gradual hiding of a marker by setting its alpha to 0.", "example": "[\"BIS_marker\",2] spawn BIS_fnc_hideMarker;", "docSyntax": "[marker, duration] spawn BIS_fnc_hideMarker", "syntax": "[marker,duration] spawn BIS_fnc_hideMarker"}, "BIS_fnc_hideMarkerArray": {"version": "FNC", "tags": "", "description": "Hides a list of markers one by one.", "example": "[[\"BIS_marker_1\", \"BIS_marker_2\", \"BIS_marker_3\"], 5] spawn BIS_fnc_hideMarkerArray;", "docSyntax": "[markerArray, duration] spawn BIS_fnc_hideMarkerArray", "syntax": "[markerArray,duration] spawn BIS_fnc_hideMarkerArray"}, "BIS_fnc_highlightControl": {"version": "FNC", "tags": "", "description": "Highlights given control by drawing a border around it and letting it pulsate. The effect is visible until explicitly removed.", "example": "[findDisplay 313 displayCtrl 1023] call BIS_fnc_highlightControl; //\u00a0highlights the play button in Eden Editor [findDisplay 313] call BIS_fnc_highlightControl; //\u00a0removes the previously created highlight effect", "docSyntax": "[displayOrControl, thickness] call BIS_fnc_highlightControl", "syntax": "[displayOrControl,thickness] call BIS_fnc_highlightControl"}, "BIS_fnc_holdActionAdd": {"version": "FNC", "tags": "", "description": "Note: This image does not contain all available icons.", "example": "[ player, \"Kill\", \"\", \"\", \"true\", \"true\", { hint \"Started!\" }, { systemChat str (_this select 3) }, { player setDamage 1 }, { hint \"Afraid of death?\" }, [], 10, nil, true, false ] call BIS_fnc_holdActionAdd;", "docSyntax": "[target, title, idleIcon, progressIcon, conditionShow, conditionProgress, codeStart, codeProgress, codeCompleted, codeInterrupted, arguments, duration, priority, removeCompleted, showUnconscious, showWindow] call BIS_fnc_holdActionAdd", "syntax": "[<object>,title,idleIcon,progressIcon,conditionShow,conditionProgress,codeStart,codeProgress,codeCompleted,codeInterrupted,arguments,duration,priority,removeCompleted,showUnconscious,showWindow] call BIS_fnc_holdActionAdd"}, "BIS_fnc_holdActionRemove": {"version": "FNC", "tags": "", "description": "Removes a hold action. This does exactly the same as removeAction.", "example": "[player,10] call BIS_fnc_holdActionRemove;", "docSyntax": "[target,ID] call BIS_fnc_holdActionRemove", "syntax": "[<object>,<scalar>] call BIS_fnc_holdActionRemove"}, "BIS_fnc_holdKey": {"version": "FNC", "tags": "", "description": "Function that executes code when a key has been held down for a long enough time - \"Hold X to Advance\" text is displayed when any key is pressed.", "example": "[findDisplay 46, 36, 5, { hint \"Key 'J' pressed for 5 seconds\" }] spawn BIS_fnc_holdKey; //\u00a0action is added to the mission display", "docSyntax": "[display, key, time, code, control] call BIS_fnc_holdKey", "syntax": "[<uiDisplay>,key,<scalar>,<code>,<uiControl>] call BIS_fnc_holdKey"}, "BIS_fnc_HUDLimits": {"version": "FNC", "tags": "", "description": "Set helicopter advanced flight model HUD limits and prevents overwriting existing values. See also setHUDMovementLevels.", "example": "[[0,0,0], [1, 0, 50], [0,0,0]] call BIS_fnc_HUDLimits; //\u00a0limits altitude on HUD to 50m max", "docSyntax": "[speedLimit, altLimit, dirLimit] call BIS_fnc_HUDLimits", "syntax": "[speedLimit,altLimit,dirLimit] call BIS_fnc_HUDLimits"}, "BIS_fnc_importImageLinks": {"version": "FNC", "tags": "", "description": "Imports CfgVehicles image links from Community Wiki (https://community.bistudio.com/).", "example": "call BIS_fnc_importImageLinks;", "docSyntax": "call BIS_fnc_importImageLinks", "syntax": "call BIS_fnc_importImageLinks"}, "BIS_fnc_inAngleSector": {"version": "FNC", "tags": "", "description": "Checks if a position lies within an angle sector.", "example": "[getPosWorld player, getDir player, 30, getPosWorld enemy_tank] call BIS_fnc_inAngleSector;", "docSyntax": "[center, centerAngle, sectorWidth, position] call BIS_fnc_inAngleSector", "syntax": "[center,centerAngle,sectorWidth,position] call BIS_fnc_inAngleSector"}, "BIS_fnc_incapacitatedEffect": {"version": "FNC", "tags": "", "description": "A draft of incapacitated effects function.", "example": "call BIS_fnc_incapacitatedEffect;", "docSyntax": "call BIS_fnc_incapacitatedEffect", "syntax": "call BIS_fnc_incapacitatedEffect"}, "BIS_fnc_indicateBleeding": {"version": "FNC", "tags": "", "description": "Shows a PP effect which indicates bleeding.", "example": "call BIS_fnc_indicateBleeding;", "docSyntax": "call BIS_fnc_indicateBleeding", "syntax": "call BIS_fnc_indicateBleeding"}, "BIS_fnc_infoText": {"version": "FNC", "tags": "", "description": "Example (Click to enlarge)", "example": "[\"Somewhere on Altis\", format [\"Year %1\", date select 0], mapGridPosition player] spawn BIS_fnc_infoText;", "docSyntax": "[string_1, string_2, string_n] spawn BIS_fnc_infoText", "syntax": "[string_1,string_2,string_n] spawn BIS_fnc_infoText"}, "BIS_fnc_initAmmoBox": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_initCuratorAttribute": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_initDisplay": {"version": "FNC", "tags": "", "description": "This function is a central part of how BI handles UIs. For a full explanation see this page.", "example": "[\"onLoad\", _this, \"RscDisplayAAR\", \"GUI\", true] call (uiNamespace getVariable \"BIS_fnc_initDisplay\");", "docSyntax": "parameters call BIS_fnc_initDisplay", "syntax": "parameters call BIS_fnc_initDisplay"}, "BIS_fnc_initExpo": {"version": "FNC", "tags": "", "description": "Disable parts of the main menu during public presentation. Press Ctrl + \u21e7 Shift + U to toggle the lock.", "example": "call BIS_fnc_initExpo;", "docSyntax": "call BIS_fnc_initExpo", "syntax": "call BIS_fnc_initExpo"}, "BIS_fnc_initInspectable": {"version": "FNC", "tags": "", "description": "Initialize inspectable object: add \"Inspect\" action to the object. When a player activates it, full-screen detail of the objects is shown.", "example": "[myLeaflet, \"#(argb,8,8,3)color(1,0,1,1)\", \"This is some Magic Pink\"] call BIS_fnc_initInspectable; //\u00a0initialize", "docSyntax": "[inspectable, textureInfos, fullScreenText, soundName] call BIS_fnc_initInspectable", "syntax": "[inspectable,textureInfos,fullScreenText,<string>] call BIS_fnc_initInspectable"}, "BIS_fnc_initIntelObject": {"version": "FNC", "tags": "", "description": "This function sets up an object as intel retrievable by the players by adding a \"Take Intel\" addAction to it.", "example": "Setup an object as intel from its init attribute in the editor.", "docSyntax": "[object] call BIS_fnc_initIntelObject", "syntax": "[<object>] call BIS_fnc_initIntelObject"}, "BIS_fnc_initLeaflet": {"version": "FNC", "tags": "", "description": "Initialize interactive leaflet.", "example": "[\"init\", [myLeaflet, \"#(argb,8,8,3)color(1,1,0,1)\", \"Yellow pages\"]] call BIS_fnc_initLeaflet;", "docSyntax": "[mode, parameters] call BIS_fnc_initLeaflet", "syntax": "[mode,parameters] call BIS_fnc_initLeaflet"}, "BIS_fnc_initListNBoxSorting": {"version": "FNC", "tags": "", "description": "A GUI using BIS_fnc_initListNBoxSorting", "example": "[_lnbFilter, _lnbContent, [0,1,2,3]] call BIS_fnc_initListNBoxSorting;", "docSyntax": "[ctrlFilter, ctrlContent, columnIndexes, idc] call BIS_fnc_initListNBoxSorting", "syntax": "[ctrlFilter,ctrlContent,columnIndexes,<scalar>] call BIS_fnc_initListNBoxSorting"}, "BIS_fnc_initModules": {"version": "FNC", "tags": "", "description": "Wait until all modules using the Arma 3: Module Framework are initialised.", "example": "[module_1,module_2] call BIS_fnc_initModules;", "docSyntax": "[modules] call BIS_fnc_initModules", "syntax": "[modules] call BIS_fnc_initModules"}, "BIS_fnc_initMultiplayer": {"version": "FNC", "tags": "", "description": "Multiplayer mission init, executed automatically upon mission start.", "example": "call BIS_fnc_initMultiplayer;", "docSyntax": "call BIS_fnc_initMultiplayer", "syntax": "call BIS_fnc_initMultiplayer"}, "BIS_fnc_initParams": {"version": "FNC", "tags": "", "description": "Initialize mission params and create log in the diary.", "example": "call BIS_fnc_initParams;", "docSyntax": "[modules] call BIS_fnc_initParams", "syntax": "[modules] call BIS_fnc_initParams"}, "BIS_fnc_initPlayable": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_initRespawn": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_initRespawnBackpack": {"version": "FNC", "tags": "", "description": "Init respawn backpack. Whover \"assembles\" it will receive a new respawn position. When backpack object has 'respawnNearbyPlayers' attribute set to 1, nearby player will receive the respawn as well.", "example": "call BIS_fnc_initRespawnBackpack;", "docSyntax": "call BIS_fnc_initRespawnBackpack", "syntax": "call BIS_fnc_initRespawnBackpack"}, "BIS_fnc_initSliderValue": {"version": "FNC", "tags": "", "description": "Initialises a slider attribute control within the Eden Editor. Can also be used outside of Eden Editor.", "example": "[_this controlsGroupCtrl 100, _this controlsGroupCtrl 101, \"m\", 50] call BIS_fnc_initSliderValue;", "docSyntax": "[ctrlSlider, ctrlEdit, unit, default] call BIS_fnc_initSliderValue", "syntax": "[ctrlSlider,ctrlEdit,<objUnit>,default] call BIS_fnc_initSliderValue"}, "BIS_fnc_initVehicle": {"version": "FNC", "tags": "", "description": "This function changes the textures, animation sources and/or mass of a given vehicle.", "example": "result = [this, \"\", []] call BIS_fnc_initVehicle;", "docSyntax": "[vehicle, variant, animations, mass] call BIS_fnc_initVehicle", "syntax": "[<objVehicle>,variant,animations,mass] call BIS_fnc_initVehicle"}, "BIS_fnc_initVehicleCrew": {"version": "FNC", "tags": "", "description": "Moves units into vehicle seats. When units don't exist, it will create them in a group of vehicle's side.", "example": "[someVehicle, [player, \"driver\", 0], true, true] call BIS_fnc_initVehicleCrew;", "docSyntax": "[object, params, deleteCrew, anySeat, agents] call BIS_fnc_initVehicleCrew", "syntax": "[<object>,<any>,deleteCrew,anySeat,agents] call BIS_fnc_initVehicleCrew"}, "BIS_fnc_initVehicleKart": {"version": "FNC", "tags": "", "description": "Customise given kart and its driver.", "example": "[BIS_kart, [9,7], -1, -1] call BIS_fnc_initVehicleKart;", "docSyntax": "[kart,number,livery,raceTeam] call BIS_fnc_initVehicleKart", "syntax": "[kart,<scalar>,livery,raceTeam] call BIS_fnc_initVehicleKart"}, "BIS_fnc_initVirtualUnit": {"version": "FNC", "tags": "", "description": "Initialize virtual unit. Disable it, turn the camera upwards and save its correct side.", "example": "someObject call BIS_fnc_initVirtualUnit;", "docSyntax": "[object] call BIS_fnc_initVirtualUnit", "syntax": "[<object>] call BIS_fnc_initVirtualUnit"}, "BIS_fnc_initWorldScene": {"version": "FNC", "tags": "", "description": "/* Author: Karel Moricky Description: Initialize world scene Parameter(s): ARRAY of CODEs - random code will be selected and called. The code should contain scene init Returns: Nothing */", "docSyntax": "[] call BIS_fnc_initWorldScene", "syntax": "[] call BIS_fnc_initWorldScene"}, "BIS_fnc_inString": {"version": "FNC", "tags": "", "description": "Find a string within a string.", "example": "[\"rabbit\", \"I ate a rabbit today\"] call BIS_fnc_inString //\u00a0will return true", "docSyntax": "[searchTerm, searchText, caseSensitive] call BIS_fnc_inString", "syntax": "[searchTerm,searchText,caseSensitive] call BIS_fnc_inString"}, "BIS_fnc_instructorFigure": {"version": "FNC", "tags": "", "description": "/******************************************************************************* Version: 0.1 Name: Instructor Figure DESCRIPTION: www. PARAMETERS: 1) function called - string, list of functions: - Init - Destroy 2) parameter for the function For more information see https://wiki.bistudio.com/index.php/A3_InstructorFigure RETURNED VALUE: depends on the function called TODO: + PlayTopic + Fade out New Intel text + wait for TAB press + use functions for dynamic text - kbTell support - logging + rework data structure (add, remove, search) - ContainerExists function + display only if difficulty is low + disableSerialization + GetTopics should return array, not just debuglog info + deny play more than one topic in a time + Localize + check and fix return values of functions + correct debuglog information - deny addtopic during playing + safe work with BIS_GroupCommunication - dont overwrite user menus + remove INSTRUCTOR FIGURE from BIS_GroupCommunication + PlayTopicRandom - rule exceeding selection of a previous sentence *******************************************************************************/ //Variables", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_interpolate": {"version": "FNC", "tags": "", "description": "Interpolates scalar to target, starts fast, eases out", "example": "private _value = [4,8,0.2,0.1] call BIS_fnc_interpolate;", "docSyntax": "[currentValue, targetValue, delta, interpSpeed] call BIS_fnc_interpolate", "syntax": "[currentValue,targetValue,delta,interpSpeed] call BIS_fnc_interpolate"}, "BIS_fnc_interpolateConstant": {"version": "FNC", "tags": "", "description": "Interpolates scalar to target linearly.", "example": "private _value = [4,8,0.2,0.1] call BIS_fnc_interpolateConstant;", "docSyntax": "[currentValue, targetValue, delta, interpSpeed] call BIS_fnc_interpolateConstant", "syntax": "[currentValue,targetValue,delta,interpSpeed] call BIS_fnc_interpolateConstant"}, "BIS_fnc_interpolateVector": {"version": "FNC", "tags": "", "description": "Interpolates vector to target, scaled by distance. Starts very fast and smoothes out.", "example": "[[1,1,1], [20,20,20], 0.2, 0.1] call BIS_fnc_interpolateVector;", "docSyntax": "[currentValue, targetValue, delta, interpSpeed] call BIS_fnc_interpolateVector", "syntax": "[currentValue,targetValue,delta,interpSpeed] call BIS_fnc_interpolateVector"}, "BIS_fnc_interpolateVectorConstant": {"version": "FNC", "tags": "", "description": "Interpolates vector to target linearly.", "example": "[[1,1,1], [20,20,20], 0.2, 0.1] call BIS_fnc_interpolateVectorConstant;", "docSyntax": "[currentValue, targetValue, delta, interpSpeed] call BIS_fnc_interpolateVectorConstant", "syntax": "[currentValue,targetValue,delta,interpSpeed] call BIS_fnc_interpolateVectorConstant"}, "BIS_fnc_interpolateWeather": {"version": "FNC", "tags": "", "description": "/* Description: Interpolate weather (overcast and fog) according to 2 boundry dates and their weather conditions. Parameter(s): _this select 0: array - _date1 [_year1,_month1,_day1,_hour1,_min1] _this select 1: array - _weather1 [_overcast1,_fog1] _this select 2: array - _date2 [_year2,_month2,_day2,_hour2,_min2] _this select 3: array - _weather2 [_overcast2,_fog2] _this select 4: array - _subjectDate [_year,_month,_day,_hour,_min] (default: current date) Returns: [_interpolatedOvercast,_interpolatedFog] Example: [_overcast,_fog] = [[2035,1,5,24,00],[0.1,0.5],[2035,1,10,24,00],[0.3,0.2],[2035,1,7,24,00]] call BIS_fnc_interpolateWeather; */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_inTrigger": {"version": "FNC", "tags": "", "description": "Detects whether position is within area or calculates distance to the nearest edge of trigger area by using optional params.", "example": "private _trigger = createTrigger [\"EmptyDetector\", getPosATL player]; _trigger setTriggerArea [10, 10, 0, false]; _inTrigger = [_trigger, player] call BIS_fnc_inTrigger; //\u00a0_inTrigger = true", "docSyntax": "[area, position, returnDistance, includeFloorCeiling] call BIS_fnc_inTrigger", "syntax": "[area,position,returnDistance,includeFloorCeiling] call BIS_fnc_inTrigger"}, "BIS_fnc_inv": {"version": "FNC", "tags": "", "description": "Returns inventory contents of given vehicle (unit). For vehicles it returns mounted gun and its ammo, not cargo weapons and ammo.", "example": "[player] call BIS_fnc_inv;", "docSyntax": "[unit] call BIS_fnc_inv", "syntax": "[<objUnit>] call BIS_fnc_inv"}, "BIS_fnc_invAdd": {"version": "FNC", "tags": "", "description": "Adds item to inventory - checks if there is room for it. Checks if add was done by engine.", "example": "[player,\"someClass\"] call BIS_fnc_invAdd;", "docSyntax": "[object,class,force] call BIS_fnc_invAdd", "syntax": "[<object>,class,force] call BIS_fnc_invAdd"}, "BIS_fnc_invCodeToArray": {"version": "FNC", "tags": "", "description": "Converts inventory code (used in configs) to array with numbers for weapons and magazines (and their counts).", "example": "[call compile getText (configfile >> \"CfgVehicles\" >> typeOf player >> \"weaponSlots\")] call BIS_fnc_invCodeToArray;//Can return [1,0,0,0,0,0,0,0]", "docSyntax": "[configCode] call BIS_fnc_invCodeToArray", "syntax": "[configCode] call BIS_fnc_invCodeToArray"}, "BIS_fnc_inventoryExists": {"version": "FNC", "tags": "", "description": "Check if loadout with given name exists.", "example": "private _hasSuperLoadout = [missionNamespace, \"mySuperLoadout\"] call BIS_fnc_inventoryExists;", "docSyntax": "[source, name] call BIS_fnc_inventoryExists", "syntax": "[source,<string>] call BIS_fnc_inventoryExists"}, "BIS_fnc_inverseLerp": {"version": "FNC", "tags": "", "description": "Inverse of BIS_fnc_lerp.", "example": "[10,20,0.5] call BIS_fnc_inverseLerp;", "docSyntax": "[currentValue, targetValue, alpha] call BIS_fnc_inverseLerp", "syntax": "[currentValue,targetValue,alpha] call BIS_fnc_inverseLerp"}, "BIS_fnc_invRemove": {"version": "FNC", "tags": "", "description": "Removes from inventory. Given number of items. Returns actually removed items count.", "example": "[player,\"someClass\",5] call BIS_fnc_invRemove;", "docSyntax": "[object,class,count] call BIS_fnc_invRemove", "syntax": "[<object>,class,count] call BIS_fnc_invRemove"}, "BIS_fnc_invSlots": {"version": "FNC", "tags": "", "description": "Returns config inventory slots of given unit (total numbers of available slots in array).", "example": "[player] call BIS_fnc_invSlots;//Returns [1,1,1,8,12,1,0,12] for \"B_T_Recon_TL_F\" class. Means: 1 x WeaponSlotPrimary, 1 x WeaponSlotHangun, ... , 12 x WeaponSlotInventory", "docSyntax": "[object] call BIS_fnc_invSlots", "syntax": "[<object>] call BIS_fnc_invSlots"}, "BIS_fnc_invSlotsEmpty": {"version": "FNC", "tags": "", "description": "Returns empty inventory slots of given unit.", "example": "[player] call BIS_fnc_invSlotsEmpty;//Can return [0,0,-1,-7,0,-1,0,-12]", "docSyntax": "[object] call BIS_fnc_invSlotsEmpty", "syntax": "[<object>] call BIS_fnc_invSlotsEmpty"}, "BIS_fnc_invSlotType": {"version": "FNC", "tags": "", "description": "Returns empty inventory slots of given unit.", "example": "[currentWeapon player] call BIS_fnc_invSlotType;//Can return [1,0,0,0,0,0,0,0]", "docSyntax": "[class] call BIS_fnc_invSlotType", "syntax": "[class] call BIS_fnc_invSlotType"}, "BIS_fnc_invString": {"version": "FNC", "tags": "", "description": "Returns inventory contents of given vehicle (unit). Note: for vehicles it returns mounted gun and its ammo, not cargo weapons and ammo.", "example": "[player] call BIS_fnc_invString;", "docSyntax": "[object] call BIS_fnc_invString", "syntax": "[<object>] call BIS_fnc_invString"}, "BIS_fnc_isBuildingEnterable": {"version": "FNC", "tags": "", "description": "Check whether a building or structure has available positions defined within model.", "example": "[_building] call BIS_fnc_isBuildingEnterable;", "docSyntax": "param call BIS_fnc_isBuildingEnterable", "syntax": "param call BIS_fnc_isBuildingEnterable"}, "BIS_fnc_isCampaign": {"version": "FNC", "tags": "", "description": "Checks to see if a mission is being run in a campaign.", "example": "[] call BIS_fnc_isCampaign;", "docSyntax": "[] call BIS_fnc_isCampaign", "syntax": "[] call BIS_fnc_isCampaign"}, "BIS_fnc_isCurator": {"version": "FNC", "tags": "", "description": "Returns if given object is curator logic. Despite the misleading name this does not check if a player has access to Zeus. It just check if the given object's simulation is of type \"curator\".", "example": "player call BIS_fnc_isCurator;", "docSyntax": "object call BIS_fnc_isCurator", "syntax": "<object> call BIS_fnc_isCurator"}, "BIS_fnc_isCuratorEditable": {"version": "FNC", "tags": "", "description": "Return true if given object is editable by player (when he's curator).", "example": "[object_1] call BIS_fnc_isCuratorEditable;", "docSyntax": "[object] call BIS_fnc_isCuratorEditable", "syntax": "[<object>] call BIS_fnc_isCuratorEditable"}, "BIS_fnc_isDateTimeNewer": {"version": "FNC", "tags": "", "description": "Returns true if the first passed datetime is newer than the second one.", "example": "private _isNewer = [[2035,5,28,13,37], [2032,5,28,13,37]] call BIS_fnc_isDateTimeNewer;", "docSyntax": "[date1, date2] call BIS_fnc_isDateTimeNewer", "syntax": "[date1,date2] call BIS_fnc_isDateTimeNewer"}, "BIS_fnc_isDebugConsoleAllowed": {"version": "FNC", "tags": "", "description": "Returns true if debug console is allowed in current context", "example": "call BIS_fnc_isDebugConsoleAllowed;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_isDemo": {"version": "FNC", "tags": "", "description": "Returns true when game version is demo.", "example": "private _isDemo = call BIS_fnc_isDemo;", "docSyntax": "call BIS_fnc_isDemo", "syntax": "call BIS_fnc_isDemo"}, "BIS_fnc_isEqualVector": {"version": "FNC", "tags": "", "description": "Checks whether two vectors are equal with given tolerance.", "example": "[[1,1,1], [2,2,2], 1] call BIS_fnc_isEqualVector; //\u00a0returns true", "docSyntax": "[vector1, vector2, tolerance] call BIS_fnc_isEqualVector", "syntax": "[vector1,vector2,tolerance] call BIS_fnc_isEqualVector"}, "BIS_fnc_isForcedCuratorInterface": {"version": "FNC", "tags": "", "description": "Return if curator interface is forced (user cannot leave it by pressing Zeus key).", "example": "private _isForced = call BIS_fnc_isForcedCuratorInterface;", "docSyntax": "[] call BIS_fnc_isForcedCuratorInterface", "syntax": "[] call BIS_fnc_isForcedCuratorInterface"}, "BIS_fnc_isInFrontOf": {"version": "FNC", "tags": "", "description": "Check if an object is in front of another object (in the front 180\u00b0)", "example": "private _isInstructorInFrontOfPlayer = [player, instructor, 0] call BIS_fnc_isInFrontOf;", "docSyntax": "[reference, checked, offset] call BIS_fnc_isInFrontOf", "syntax": "[reference,checked,offset] call BIS_fnc_isInFrontOf"}, "BIS_fnc_isInsideArea": {"version": "FNC", "tags": "", "description": "Detects whether a position is within a square area of given size about center.", "example": "//\u00a0Check an area, centered on the player that is 10m wide and 10m tall _size = [5, 5]; _checkPos = getPos player; _inArea = [_checkPos, _size, _checkPos] call BIS_fnc_isInsideArea;", "docSyntax": "[center, size, position] call BIS_fnc_isInsideArea", "syntax": "[center,size,position] call BIS_fnc_isInsideArea"}, "BIS_fnc_isInZoom": {"version": "FNC", "tags": "", "description": "Checks if map zoom level is in between given interval.", "example": "if ([[0.001, 0.02]] call BIS_fnc_isInZoom) then { hint \"Zoom level is in between 0.001 and 0.02\"; };", "docSyntax": "[[min, max]] call BIS_fnc_isInZoom", "syntax": "[[min,max]] call BIS_fnc_isInZoom"}, "BIS_fnc_isLeapYear": {"version": "FNC", "tags": "", "description": "Returns true if given year is a leap year, otherwise false.", "example": "private _isLeapYear = 2035 call BIS_fnc_isLeapYear;", "docSyntax": "year call BIS_fnc_isLeapYear", "syntax": "year call BIS_fnc_isLeapYear"}, "BIS_fnc_isLoading": {"version": "FNC", "tags": "", "description": "Check if a loading screen is opened.", "example": "private _isLoading = call BIS_fnc_isLoading;", "docSyntax": "call BIS_fnc_isLoading", "syntax": "call BIS_fnc_isLoading"}, "BIS_fnc_isLocalized": {"version": "FNC", "tags": "", "description": "Checks if string is localized. Obsolete variant before isLocalized command was introduced.", "example": "[\"STR_someLocalizedString\"] call BIS_fnc_isLocalized;", "docSyntax": "[localizationString] call BIS_fnc_isLocalized", "syntax": "[localizationString] call BIS_fnc_isLocalized"}, "BIS_fnc_isPosBlacklisted": {"version": "FNC", "tags": "", "description": "Function checks a blacklist and sees if the given position is in it or not.", "example": "[[50,50], [[0,0], [100,100]]] call BIS_fnc_isPosBlacklisted;", "docSyntax": "[position, blacklistArea] call BIS_fnc_isPosBlacklisted", "syntax": "[position,blacklistArea] call BIS_fnc_isPosBlacklisted"}, "BIS_fnc_isThrowable": {"version": "FNC", "tags": "", "description": "Returns true if given magazine is throwable", "example": "private _isThrowable = \"SmokeShellGreen\" call BIS_fnc_isThrowable;", "docSyntax": "magazine call BIS_fnc_isThrowable", "syntax": "<string> call BIS_fnc_isThrowable"}, "BIS_fnc_isUnitVirtual": {"version": "FNC", "tags": "", "description": "Return if unit is virtual (used for example for Zeus players).", "example": "private _isVirtual = someObject call BIS_fnc_isUnitVirtual;", "docSyntax": "[object] call BIS_fnc_isUnitVirtual", "syntax": "[<object>] call BIS_fnc_isUnitVirtual"}, "BIS_fnc_itemType": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "\"arifle_MX_pointer_F\" call BIS_fnc_itemType;", "docSyntax": "weaponClass call BIS_fnc_itemType", "syntax": "weaponClass call BIS_fnc_itemType"}, "BIS_fnc_jukebox": {"version": "FNC", "tags": "", "description": "Plays music, depending on the player group status.", "example": "[] call BIS_fnc_jukebox;", "docSyntax": "[function, parameters] call BIS_fnc_jukebox", "syntax": "[function,parameters] call BIS_fnc_jukebox"}, "BIS_fnc_kbCanSpeak": {"version": "FNC", "tags": "", "description": "Check if person is not locked by some conversation.", "example": "private _canPlayerTalk = player call BIS_fnc_kbCanSpeak;", "docSyntax": "unit call BIS_fnc_kbCanSpeak", "syntax": "<objUnit> call BIS_fnc_kbCanSpeak"}, "BIS_fnc_kbCreateDummy": {"version": "FNC", "tags": "", "description": "Creates a dummy speaker (as a Game Logic). If given dummy variable has already been created, returns this one.", "example": "private _dummySpeaker = \"BIS_dummySpeaker\" call BIS_fnc_kbCreateDummy; //\u00a0_dummySpeaker == BIS_dummySpeaker now", "docSyntax": "dummyVarName call BIS_fnc_kbCreateDummy", "syntax": "dummyVarName call BIS_fnc_kbCreateDummy"}, "BIS_fnc_kbIsSpeaking": {"version": "FNC", "tags": "", "description": "Check if speaker is locked for different conversation.", "example": "player call BIS_fnc_kbIsSpeaking;", "docSyntax": "unit call BIS_fnc_kbIsSpeaking", "syntax": "<objUnit> call BIS_fnc_kbIsSpeaking"}, "BIS_fnc_kbMenu": {"version": "FNC", "tags": "", "description": "/* Description: Opens conversation menu. Script terminates itself when menu selection is finished. Parameter(s): _this select 0: ARRAY or STRING - List of responses (of type ARRAY) or Menu name Responses are in format: _response select 0: STRING or ANY - Display name when STRING, otherwise used as default option when menu is closed without selecting anything. _response select 1: STRING - expression ARRAY - BIS_fnc_kbTell params Returns: NUMBER - ID of select option */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_kbPriority": {"version": "FNC", "tags": "", "description": "/* Description: Set conversation priority. Conversations with priority not in the list won't be played Parameter(s): _this: ARRAY - List of priorities. Empty array will just return current value. NUMBER >0 - add priority to already existing list <0 - remove priority from already existing list Priority 0 cannot be tempered with Returns: ARRAY - List of priorities */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_kbSentence": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_kbSkip": {"version": "FNC", "tags": "", "description": "Skip a conversation started with BIS_fnc_kbTell. Currently played sentence will be finished.", "example": "[\"topic1\", \"currentMission\"] call BIS_fnc_kbSkip;", "docSyntax": "[topicName, mission, wait] call BIS_fnc_kbSkip", "syntax": "[topicName,mission,wait] call BIS_fnc_kbSkip"}, "BIS_fnc_kbTell": {"version": "FNC", "tags": "", "description": "Play given sentence/conversation. Script terminates itself when conversation is finished.", "example": "[\"01_Wave\", \"A_in\", nil, \"SIDE\", nil, nil, 1, false] spawn BIS_fnc_kbTell;", "docSyntax": "[topic, container, section, radioMode, code, speakers, soundVolume, radioProtocol] spawn BIS_fnc_kbTell", "syntax": "[topic,container,section,radioMode,<code>,speakers,soundVolume,radioProtocol] spawn BIS_fnc_kbTell"}, "BIS_fnc_kbTellLocal": {"version": "FNC", "tags": "", "description": "Play given sentence, disable radio and/or lower sounds. Will use BIS_fnc_showSubtitle for better effects if channel is DIRECT or VEHICLE.", "example": "[\"sentence\", [player, [BIS_HQ, \"myTopic\", \"playerSentence1\"]]] call BIS_fnc_kbTellLocal;", "docSyntax": "[mode, parameters] call BIS_fnc_kbTellLocal", "syntax": "[mode,parameters] call BIS_fnc_kbTellLocal"}, "BIS_fnc_kbTopicConfig": {"version": "FNC", "tags": "", "description": "Reads the configs to return a matching config >> CfgSentences >> missionName >> topic entry.", "example": "private _configTopic = [\"missionName\", \"topic\"] call BIS_fnc_kbTopicConfig;", "docSyntax": "[missionName, topic] call BIS_fnc_kbTopicConfig", "syntax": "[missionName,topic] call BIS_fnc_kbTopicConfig"}, "BIS_fnc_key_compute": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Computes data for a key Parameter(s): _this select 0: Object - The key Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_compute", "syntax": "[] call BIS_fnc_key_compute"}, "BIS_fnc_key_computeOwnerCurve": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Computes the curve that owns key Parameter(s): _this select 0: Object - The key Returns: Curve - The owner curve object */", "docSyntax": "[] call BIS_fnc_key_computeOwnerCurve", "syntax": "[] call BIS_fnc_key_computeOwnerCurve"}, "BIS_fnc_key_computeTime": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Computes the time of given key Parameter(s): _this select 0: Object - The key Returns: Float - The key time */", "docSyntax": "[] call BIS_fnc_key_computeTime", "syntax": "[] call BIS_fnc_key_computeTime"}, "BIS_fnc_key_edenAreControlPointsLocked": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Whether control points of given key are set to locked Parameter(s): _this select 0: Object - The key object Returns: Bool - True if control points are locked, false if not */", "docSyntax": "[] call BIS_fnc_key_edenAreControlPointsLocked", "syntax": "[] call BIS_fnc_key_edenAreControlPointsLocked"}, "BIS_fnc_key_edenAttributesChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Attributes change in EDEN for a key Parameter(s): _this select 0: Object - The key Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_edenAttributesChanged", "syntax": "[] call BIS_fnc_key_edenAttributesChanged"}, "BIS_fnc_key_edenConnectionChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Attributes change in EDEN for a key Parameter(s): _this select 0: Object - The key Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_edenConnectionChanged", "syntax": "[] call BIS_fnc_key_edenConnectionChanged"}, "BIS_fnc_key_edenDragged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Entity is dragged in 3DEN Parameter(s): _this select 0: Object - The key Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_edenDragged", "syntax": "[] call BIS_fnc_key_edenDragged"}, "BIS_fnc_key_edenIsSelected": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Whether given key is selected in 3den Parameter(s): _this select 0: Object - The key object Returns: Bool - True if selected, false if not */", "docSyntax": "[] call BIS_fnc_key_edenIsSelected", "syntax": "[] call BIS_fnc_key_edenIsSelected"}, "BIS_fnc_key_edenRegisteredToWorld": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Attributes change in EDEN for a key Parameter(s): _this select 0: Object - The key Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_edenRegisteredToWorld", "syntax": "[] call BIS_fnc_key_edenRegisteredToWorld"}, "BIS_fnc_key_edenUnregisteredFromWorld": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Attributes change in EDEN for a key Parameter(s): _this select 0: Object - The key Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_edenUnregisteredFromWorld", "syntax": "[] call BIS_fnc_key_edenUnregisteredFromWorld"}, "BIS_fnc_key_getArriveControlPoint": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the arrive control point of a key Parameter(s): _this select 0: Object - The key Returns: Object - The control point */", "docSyntax": "[] call BIS_fnc_key_getArriveControlPoint", "syntax": "[] call BIS_fnc_key_getArriveControlPoint"}, "BIS_fnc_key_getArriveTangent": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the key arrive tangent Parameter(s): _this select 0: Object - The key Returns: Float - The key arrive tangent */", "docSyntax": "[] call BIS_fnc_key_getArriveTangent", "syntax": "[] call BIS_fnc_key_getArriveTangent"}, "BIS_fnc_key_getArriveTangentWeight": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the key arrive tangent weight Parameter(s): _this select 0: Object - The key Returns: Float - The key arrive tangent weight */", "docSyntax": "[] call BIS_fnc_key_getArriveTangentWeight", "syntax": "[] call BIS_fnc_key_getArriveTangentWeight"}, "BIS_fnc_key_getConfigTime": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the time of given key Parameter(s): _this select 0: Object - The key Returns: Float - The key time */", "docSyntax": "[] call BIS_fnc_key_getConfigTime", "syntax": "[] call BIS_fnc_key_getConfigTime"}, "BIS_fnc_key_getFOV": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the FOV value of a key Parameter(s): _this select 0: Object - The key Returns: Float - The fov value */", "docSyntax": "[] call BIS_fnc_key_getFOV", "syntax": "[] call BIS_fnc_key_getFOV"}, "BIS_fnc_key_getInterpMode": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the key interp mode index * 0 - Linear * 1 - Cubic * 2 - EaseIn * 3 - EaseOut * 4 - EaseInOut * 5 - Hermite * 6 - Berp * 7 - BounceIn * 8 - BounceOut * 9 - BounceInOut * 10 - QuinticIn * 11 - QuinticOut * 12 - QuinticInOut * 13 - ElasticIn * 14 - ElasticOut * 15 - ElasticInOut Parameter(s): _this select 0: Object - The key Returns: Integer - The mode as integer */", "docSyntax": "[] call BIS_fnc_key_getInterpMode", "syntax": "[] call BIS_fnc_key_getInterpMode"}, "BIS_fnc_key_getLeaveControlPoint": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the leave control point of key Parameter(s): _this select 0: Object - The key Returns: Object - The control point */", "docSyntax": "[] call BIS_fnc_key_getLeaveControlPoint", "syntax": "[] call BIS_fnc_key_getLeaveControlPoint"}, "BIS_fnc_key_getLeaveTangent": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the key leave tangent Parameter(s): _this select 0: Object - The key Returns: Float - The key leave tangent */", "docSyntax": "[] call BIS_fnc_key_getLeaveTangent", "syntax": "[] call BIS_fnc_key_getLeaveTangent"}, "BIS_fnc_key_getLeaveTangentWeight": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the key leave tangent weight Parameter(s): _this select 0: Object - The key Returns: Float - The key leave tangent weight */", "docSyntax": "[] call BIS_fnc_key_getLeaveTangentWeight", "syntax": "[] call BIS_fnc_key_getLeaveTangentWeight"}, "BIS_fnc_key_getOwnerCurve": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the curve that owns key Parameter(s): _this select 0: Object - The key Returns: Curve - The owner curve object */", "docSyntax": "[] call BIS_fnc_key_getOwnerCurve", "syntax": "[] call BIS_fnc_key_getOwnerCurve"}, "BIS_fnc_key_getTime": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the time of given key Parameter(s): _this select 0: Object - The key Returns: Float - The key time */", "docSyntax": "[] call BIS_fnc_key_getTime", "syntax": "[] call BIS_fnc_key_getTime"}, "BIS_fnc_key_getValue": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the value of given key Parameter(s): _this select 0: Object - The key Returns: Float - The key value */", "docSyntax": "[] call BIS_fnc_key_getValue", "syntax": "[] call BIS_fnc_key_getValue"}, "BIS_fnc_key_isFloat": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns true if this is a key with float value, false if not Parameter(s): _this select 0: Object - The key Returns: Bool - True if key is of float data type, false if not */", "docSyntax": "[] call BIS_fnc_key_isFloat", "syntax": "[] call BIS_fnc_key_isFloat"}, "BIS_fnc_key_isVector": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns true if this is a key with vector value, false if not Parameter(s): _this select 0: Object - The key Returns: Bool - True if key is of vector data type, false if not */", "docSyntax": "[] call BIS_fnc_key_isVector", "syntax": "[] call BIS_fnc_key_isVector"}, "BIS_fnc_key_setArriveTangent": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Set's the key arrive tangent Parameter(s): _this select 0: Object - The key _this select 1: float - The new arrive tangent Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_setArriveTangent", "syntax": "[] call BIS_fnc_key_setArriveTangent"}, "BIS_fnc_key_setArriveTangentWeight": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Set's the key arrive tangent weight Parameter(s): _this select 0: Object - The key _this select 1: Float - The new arrive tangent weight Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_setArriveTangentWeight", "syntax": "[] call BIS_fnc_key_setArriveTangentWeight"}, "BIS_fnc_key_setInterpMode": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Set's the interpolation mode of the key Parameter(s): _this select 0: Object - The key _this select 1: Integer - The new key interp mode Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_setInterpMode", "syntax": "[] call BIS_fnc_key_setInterpMode"}, "BIS_fnc_key_setLeaveTangent": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Set's the key leave tangent Parameter(s): _this select 0: Object - The key _this select 1: Float - The new leave tangent Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_setLeaveTangent", "syntax": "[] call BIS_fnc_key_setLeaveTangent"}, "BIS_fnc_key_setLeaveTangentWeight": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Set's the key leave tangent weight Parameter(s): _this select 0: Object - The key _this select 1: Float - The new leave tangent weight Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_setLeaveTangentWeight", "syntax": "[] call BIS_fnc_key_setLeaveTangentWeight"}, "BIS_fnc_key_setTime": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Set's the time of given key Parameter(s): _this select 0: Object - The key _this select 1: Float - The new time Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_setTime", "syntax": "[] call BIS_fnc_key_setTime"}, "BIS_fnc_key_setValue": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Set's the value of given key Parameter(s): _this select 0: Object - The key _this select 1: Float - The new value Returns: Nothing */", "docSyntax": "[] call BIS_fnc_key_setValue", "syntax": "[] call BIS_fnc_key_setValue"}, "BIS_fnc_keyCode": {"version": "FNC", "tags": "", "description": "Returns DIK code of a given key.", "example": "13 call BIS_fnc_keyCode; //\u00a0Returns \"EQUALS\"", "docSyntax": "input call BIS_fnc_keyCode", "syntax": "input call BIS_fnc_keyCode"}, "BIS_fnc_keyframeAnimation_deltaTime": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_keyframeAnimation_deltaTime", "syntax": "[] call BIS_fnc_keyframeAnimation_deltaTime"}, "BIS_fnc_keyframeAnimation_init": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_keyframeAnimation_init", "syntax": "[] call BIS_fnc_keyframeAnimation_init"}, "BIS_fnc_keyHold": {"version": "FNC", "tags": "", "description": "Allows for hold button interactions. Hold action is started by pressing Space.", "example": "[\"Hold that key!\", 2, { alive player }] spawn BIS_fnc_keyHold;", "docSyntax": "[description, duration, condition, arguments, loaded] spawn BIS_fnc_keyHold", "syntax": "[description,duration,condition,arguments,loaded] spawn BIS_fnc_keyHold"}, "BIS_fnc_keypointsExport": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_keypointsExportFromKML": {"version": "FNC", "tags": "", "description": "/* Description: Imports and marks positions from KLM file. Parameter(s): _this: STRING - path to .kml file Returns: STRING - config output (also copied to clipboard) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_KMLimport": {"version": "FNC", "tags": "", "description": "Read positions from a KML file.", "example": "private _data = \"subDir\\myFile.kml\" call BIS_fnc_KMLimport;", "docSyntax": "filePath call BIS_fnc_KMLimport", "syntax": "filePath call BIS_fnc_KMLimport"}, "BIS_fnc_laptopInit": {"version": "FNC", "tags": "", "description": "Adds an Easter egg to the laptop, that is active only if the mission date is set to 2001-06-22.", "example": "private _actionId = _myLaptop call BIS_fnc_laptopInit;", "docSyntax": "laptop call BIS_fnc_laptopInit", "syntax": "laptop call BIS_fnc_laptopInit"}, "BIS_fnc_laptopPlayVideo": {"version": "FNC", "tags": "", "description": "Plays an easter egg video on the screen of an old laptop.", "example": "this call BIS_fnc_laptopPlayVideo;", "docSyntax": "laptop call BIS_fnc_laptopPlayVideo", "syntax": "laptop call BIS_fnc_laptopPlayVideo"}, "BIS_fnc_lerp": {"version": "FNC", "tags": "", "description": "Linear floating point interpolation. Linear Interpolation (Wikipedia)", "example": "[1,10,0.5] call BIS_fnc_lerp; //\u00a0Returns 5.5", "docSyntax": "[currentValue,targetValue,alpha] call BIS_fnc_lerp", "syntax": "[currentValue,targetValue,alpha] call BIS_fnc_lerp"}, "BIS_fnc_lerpVector": {"version": "FNC", "tags": "", "description": "Given two different vectors A and B, think of a straight line drawn between them, alpha saying how far along that line is the wanted vector.", "example": "[[1592.74,6558.36,0], [2240.43,7459.69,0], 0.3] call BIS_fnc_lerpVector; //\u00a0returns [1787.05,6828.76,0]", "docSyntax": "[currentValue, targetValue, alpha] call BIS_fnc_lerpVector", "syntax": "[currentValue,targetValue,alpha] call BIS_fnc_lerpVector"}, "BIS_fnc_limitAmmunition": {"version": "FNC", "tags": "", "description": "Limits the number of magazines carried by individual unit. Each container (uniform, vest and backpack) can be limited separately or left untouched. The function limits the number of magazines of each unique ammo category in respective container. Items like First Aid Kit or Mine Detector are not affected by the function", "example": "player call BIS_fnc_limitAmmunition;", "docSyntax": "[unit,uniformMags,vestMags,BackpackMags] call BIS_fnc_limitAmmunition", "syntax": "[<objUnit>,uniformMags,vestMags,BackpackMags] call BIS_fnc_limitAmmunition"}, "BIS_fnc_limitItems": {"version": "FNC", "tags": "", "description": "Keeps or removes unit's items (including NVGs and binocular/designator) based on probability user sets.", "example": "player call BIS_fnc_limitItems;", "docSyntax": "[unit, chanceNVG, chanceBino, chanceGPS, chanceMap, chanceRadio, chanceCompass, chanceWatch] call BIS_fnc_limitItems", "syntax": "[<objUnit>,chanceNVG,chanceBino,chanceGPS,chanceMap,chanceRadio,chanceCompass,chanceWatch] call BIS_fnc_limitItems"}, "BIS_fnc_limitSupport": {"version": "FNC", "tags": "", "description": "Limits support runs during a mission.", "example": "[reqModule, \"Transport\", -1] call BIS_fnc_limitSupport;", "docSyntax": "[module, supportType, quantity] call BIS_fnc_limitSupport", "syntax": "[module,supportType,quantity] call BIS_fnc_limitSupport"}, "BIS_fnc_limitWeaponItems": {"version": "FNC", "tags": "", "description": "Keeps or remove unit's weapon attachments based on probability user sets. Apply for primary, secondary or handgun weapon separately.", "example": "player call BIS_fnc_limitWeaponItems;", "docSyntax": "[unit, mode, chanceOptics, chanceAttach, chanceMuzzle, chanceUnderbarrel] call BIS_fnc_limitWeaponItems", "syntax": "[<objUnit>,mode,chanceOptics,chanceAttach,chanceMuzzle,chanceUnderbarrel] call BIS_fnc_limitWeaponItems"}, "BIS_fnc_linearConversion": {"version": "FNC", "tags": "", "description": "Linear conversion of a value from one set to another", "example": "[[-50, 50], -50, [0, 1]] call BIS_fnc_linearConversion; //\u00a0returns 0 [[-50, 50], 0, [0, 1]] call BIS_fnc_linearConversion; //\u00a0returns 0.5 [[-50, 50], +50, [0, 1]] call BIS_fnc_linearConversion; //\u00a0returns 1", "docSyntax": "[[minFrom, maxFrom], value, [minTo, maxTo]] call BIS_fnc_linearConversion", "syntax": "[[minFrom,maxFrom],<scalar>,[minTo,maxTo]] call BIS_fnc_linearConversion"}, "BIS_fnc_listCuratorPlayers": {"version": "FNC", "tags": "", "description": "Returns list of playable units with access to curator.", "example": "call BIS_fnc_listCuratorPlayers;", "docSyntax": "[] call BIS_fnc_listCuratorPlayers", "syntax": "[] call BIS_fnc_listCuratorPlayers"}, "BIS_fnc_listPlayers": {"version": "FNC", "tags": "", "description": "Returns a list of currently played units, alive or dead.", "example": "private _allPlayers = call BIS_fnc_listPlayers;", "docSyntax": "call BIS_fnc_listPlayers", "syntax": "call BIS_fnc_listPlayers"}, "BIS_fnc_liveFeed": {"version": "FNC", "tags": "", "description": "Display a live feed.", "example": "[myUAV, player, player, 2] call BIS_fnc_liveFeed;", "docSyntax": "[source, target, receiver, effect] call BIS_fnc_liveFeed", "syntax": "[source,<object>,receiver,effect] call BIS_fnc_liveFeed"}, "BIS_fnc_liveFeedEffects": {"version": "FNC", "tags": "", "description": "Add effect to the current live feed.", "example": "1 call BIS_fnc_liveFeedEffects;", "docSyntax": "effect call BIS_fnc_liveFeedEffects", "syntax": "effect call BIS_fnc_liveFeedEffects"}, "BIS_fnc_liveFeedModuleEffects": {"version": "FNC", "tags": "", "description": "/* Description: Add effects to a live feed via a module. Parameters: _this: OBJECT - Live Feed - Effects module */ // They ran me on a dedicated server. I stopped their function.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_liveFeedModuleInit": {"version": "FNC", "tags": "", "description": "/* Description: Display a live feed via a module. Parameters: _this: OBJECT - Live Feed - Init module */ // Need not be run on dedicated servers", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_liveFeedModuleSetSource": {"version": "FNC", "tags": "", "description": "/* Description: Set a live feed's source via a module. Parameters: _this: OBJECT - Live Feed - Set Source module */ // <insert smart comment about dedicated servers here>", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_liveFeedModuleSetTarget": {"version": "FNC", "tags": "", "description": "/* Description: Set a live feed's target via a module. Parameters: _this: OBJECT - Live Feed - Set Target module */ // On dedicated servers, player is not you", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_liveFeedSetSource": {"version": "FNC", "tags": "", "description": "Set the source of the current live feed.", "example": "[player, [0, 0.25, 1.6]] call BIS_fnc_liveFeedSetSource;", "docSyntax": "source call BIS_fnc_liveFeedSetSource", "syntax": "source call BIS_fnc_liveFeedSetSource"}, "BIS_fnc_liveFeedSetTarget": {"version": "FNC", "tags": "", "description": "Set the target of the current live feed.", "example": "player call BIS_fnc_liveFeedSetTarget;", "docSyntax": "target call BIS_fnc_liveFeedSetTarget", "syntax": "<object> call BIS_fnc_liveFeedSetTarget"}, "BIS_fnc_liveFeedTerminate": {"version": "FNC", "tags": "", "description": "Terminate a live feed.", "example": "call BIS_fnc_liveFeedTerminate;", "docSyntax": "call BIS_fnc_liveFeedTerminate", "syntax": "call BIS_fnc_liveFeedTerminate"}, "BIS_fnc_loadClass": {"version": "FNC", "tags": "", "description": "Searches for class in mission, campaign and then in global config file.", "example": "[[\"bin\\config.bin\"], configFile >> \"Cfg3DEN\" >> \"Camera\"] call BIS_fnc_loadClass", "docSyntax": "[input, defaultValue] call BIS_fnc_loadClass", "syntax": "[input,defaultValue] call BIS_fnc_loadClass"}, "BIS_fnc_loadEntry": {"version": "FNC", "tags": "", "description": "Searches for config entry in mission, campaign and then in global config file.", "example": "[[\"CfgWeapons\",\"hgun_Rook40_snds_F\",\"bullet3\"], configfile >> \"CfgWeapons\" >> \"hgun_Rook40_snds_F\" >> \"baseWeapon\"] call BIS_fnc_loadEntry;", "docSyntax": "[path,defaultConfig] call BIS_fnc_loadEntry", "syntax": "[path,defaultConfig] call BIS_fnc_loadEntry"}, "BIS_fnc_loadFunctions": {"version": "FNC", "tags": "", "description": "Compile scripts and save them into globally available functions. Defines _fnc_scriptName variable.", "example": "[\"scripts\\myDir\\\", \"MY_fnc_\", [\"script1\", \"script2\"], true] call BIS_fnc_loadFunctions;", "docSyntax": "[fileDirectory, prefix, nameVars, global] call BIS_fnc_loadFunctions", "syntax": "[fileDirectory,prefix,nameVars,global] call BIS_fnc_loadFunctions"}, "BIS_fnc_loadInventory": {"version": "FNC", "tags": "", "description": "Adds a predefined loadout (either via CfgVehicles, CfgRespawnInventory, or a custom inventory saved via BIS_fnc_saveInventory) to a specified unit.", "example": "_loadout = [player, configFile >> \"CfgVehicles\" >> \"B_Soldier_SL_F\"] call BIS_fnc_loadInventory; //\u00a0gives BLUFOR Squad Leader's loadout to player unit", "docSyntax": "param call BIS_fnc_loadInventory", "syntax": "param call BIS_fnc_loadInventory"}, "BIS_fnc_loadVehicle": {"version": "FNC", "tags": "", "description": "Load vehicle look saved with BIS_fnc_saveVehicle.", "example": "[BIS_tank, [missionNamespace, \"BIS_someTankSave\"]] call BIS_fnc_loadVehicle;", "docSyntax": "[object,target] call BIS_fnc_loadVehicle", "syntax": "[<object>,<object>] call BIS_fnc_loadVehicle"}, "BIS_fnc_localize": {"version": "FNC", "tags": "", "description": "Checks if passed string is localization key and if so, return the localized text. Else, returns the passed string itself.", "example": "//\u00a0assuming the stringtable contains a key \"STR_someString\" with the value \"Hello world\" \"STR_someString\" call BIS_fnc_localize; //\u00a0returns \"Hello world\" //\u00a0assuming the stringtable does not contain a key \"STR_anotherString\" \"STR_anotherString\" call BIS_fnc_localize; //\u00a0returns \"STR_anotherString\"", "docSyntax": "localizationString call BIS_fnc_localize", "syntax": "localizationString call BIS_fnc_localize"}, "BIS_fnc_locationDescription": {"version": "FNC", "tags": "", "description": "Return location description (e.g. \"NE of Agia Marina\")", "example": "hint format [\"Player's position: %1\", player call BIS_fnc_locationDescription];", "docSyntax": "position call BIS_fnc_locationDescription", "syntax": "position call BIS_fnc_locationDescription"}, "BIS_fnc_locations": {"version": "FNC", "tags": "", "description": "Creates or registers location logics (used in various modules, like Ambient Civilians, Ambient Civilian Vehicles or Warfare 2). Upon registering, function will set following variables into location logic's variable space:", "example": "[\"CityCenter\", [getPosATL player, 1000]] call BIS_fnc_locations;", "docSyntax": "[types, area, debug] call BIS_fnc_locations", "syntax": "[types,area,debug] call BIS_fnc_locations"}, "BIS_fnc_lockedDoorNoHandleOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_lockedDoorNoHandleOpen", "syntax": "[] call BIS_fnc_lockedDoorNoHandleOpen"}, "BIS_fnc_lockedDoorOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_lockedDoorOpen", "syntax": "[] call BIS_fnc_lockedDoorOpen"}, "BIS_fnc_locWeaponInfo": {"version": "FNC", "tags": "", "description": "Shows a utility tool checking length of weapon info texts.", "example": "call BIS_fnc_locWeaponInfo;", "docSyntax": "call BIS_fnc_locWeaponInfo", "syntax": "call BIS_fnc_locWeaponInfo"}, "BIS_fnc_log": {"version": "FNC", "tags": "", "description": "Log debug message.", "example": "diag_tickTime call BIS_fnc_log;", "docSyntax": "param call BIS_fnc_log", "syntax": "param call BIS_fnc_log"}, "BIS_fnc_logFormat": {"version": "FNC", "tags": "", "description": "Display debug message.", "example": "[\"My logged name: %1, My position: %2\", name player, getPos player] call BIS_fnc_logFormat; //\u00a0RPT output: //\u00a012:34:56 \"BIS_fnc_log: [BIS_fnc_debugConsoleExec] My logged name: Miller, My position: [4866.73,21947.9,0.00143433]\"", "docSyntax": "[text, parameters] call BIS_fnc_logFormat", "syntax": "[<string>,parameters] call BIS_fnc_logFormat"}, "BIS_fnc_logFormatServer": {"version": "FNC", "tags": "", "description": "Logs (using diag_log) a debug message (profileName, playerUID, _fnc_scriptName, provided text) to server's .RPT. In singleplayer, BIS_fnc_logFormat is used.", "example": "private _currentFPS = diag_fps; if (_currentFPS < 10) then { [\"Player %1 has performance issues (%2 FPS)\", name player, _currentFPS] call BIS_fnc_logFormatServer; };", "docSyntax": "[text, argument1, argument2, ...] call BIS_fnc_logFormatServer", "syntax": "[<string>,argument1,argument2,...] call BIS_fnc_logFormatServer"}, "BIS_fnc_lookAtArray": {"version": "FNC", "tags": "", "description": "Executes a code when one of the specified objects is looked at (player's cursor pointed towards it) for enough time", "example": "private _lookAtArray = [ [ BIS_apc, //\u00a0name of object 2, //\u00a0time we have to look at it false, //\u00a0do we destroy the entry after we looked at it { [\"What a wonderful APC\"] call BIS_fnc_log; } //\u00a0code ], [ BIS_otherUnit, 2, false, { [\"apc looked at\"] call BIS_fnc_log; } ] ]; [true, _lookAtArray] spawn \"BIS_fnc_lookAtArray\"; sleep 15; [false] spawn \"BIS_fnc_lookAtArray\";", "docSyntax": "[initialize, lookAtData] call BIS_fnc_lookAtArray", "syntax": "[initialize,lookAtData] call BIS_fnc_lookAtArray"}, "BIS_fnc_lookAtArrayEH": {"version": "FNC", "tags": "", "description": "Event handler function for the BIS_fnc_lookAtArray function.", "example": "-", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_loop": {"version": "FNC", "tags": "", "description": "Loop stacked code/function with timing and conditional control. Code and conditions are executed in non-scheduled environment.", "example": "//\u00a0hints time every five seconds [\"itemAdd\", [\"uniqueId\", { hint str time; }, 5]] call BIS_fnc_loop;", "docSyntax": "[action, parameters] call BIS_fnc_loop", "syntax": "[action,parameters] call BIS_fnc_loop"}, "BIS_fnc_lowestNum": {"version": "FNC", "tags": "", "description": "Returns the lowest number out of the passed set.", "example": "private _result = [7,2,1,5,10] call BIS_fnc_lowestNum; //_result = 1", "docSyntax": "numbers call BIS_fnc_lowestNum", "syntax": "numbers call BIS_fnc_lowestNum"}, "BIS_fnc_magazinesEntityType": {"version": "FNC", "tags": "", "description": "Return object's magazines as defined in config. Scans also turrets and pylons.", "example": "\"O_MBT_04_cannon_F\" call BIS_fnc_magazinesEntityType; //Returns [\"20Rnd_125mm_APFSDS_T_Green\",\"12Rnd_125mm_HEAT_T_Green\",\"12Rnd_125mm_HE_T_Green\",\"1000Rnd_762x51_Belt_Green\",\"1000Rnd_762x51_Belt_Green\",\"500Rnd_127x99_mag_Tracer_Yellow\",\"SmokeLauncherMag\"]", "docSyntax": "class call BIS_fnc_magazinesEntityType", "syntax": "class call BIS_fnc_magazinesEntityType"}, "BIS_fnc_magnitude": {"version": "FNC", "tags": "", "description": "Returns the magnitude of an array of numbers. The vector can have any number of elements.", "example": "[5,3] call BIS_fnc_magnitude;", "docSyntax": "vector call BIS_fnc_magnitude", "syntax": "vector call BIS_fnc_magnitude"}, "BIS_fnc_magnitudeSqr": {"version": "FNC", "tags": "", "description": "Returns the square magnitude of an array of numbers. The vector can have any number of elements.", "example": "[5,3] call BIS_fnc_magnitudeSqr;", "docSyntax": "vector call BIS_fnc_magnitudeSqr", "syntax": "vector call BIS_fnc_magnitudeSqr"}, "BIS_fnc_manageCuratorAddons": {"version": "FNC", "tags": "", "description": "Set which vision modes curator can access.", "example": "[BIS_curator,[\"A3_Air_F_Heli\"],{count allPlayers > 15},\"Helicopters unlocked!\"] call BIS_fnc_manageCuratorAddons;", "docSyntax": "[curators,classes,condition,text] call BIS_fnc_manageCuratorAddons", "syntax": "[curators,classes,condition,<string>] call BIS_fnc_manageCuratorAddons"}, "BIS_fnc_manageCuratorChallenges": {"version": "FNC", "tags": "", "description": "Handle repeated curator challenges. When rewards defined in the argument are exceeded, refilling points bar fill be offered instead.", "example": "[BIS_curator, nil, 1, [[{ hint \"Message\" }, \"Description\"]]] call BIS_fnc_manageCuratorChallenges;", "docSyntax": "[curator,challenges,numChallenges,rewards,defaultRewards]] call BIS_fnc_manageCuratorChallenges", "syntax": "[curator,challenges,numChallenges,rewards,defaultRewards]] call BIS_fnc_manageCuratorChallenges"}, "BIS_fnc_mapAnimAdd": {"version": "FNC", "tags": "", "description": "Similar to mapAnimAdd, yet it provides additional parameters to allow for a non-linear zoom and various position interpolation modes.", "example": "openMap true; //\u00a0the function will not work if the map is not open [2.0, 0.05, getPosASL player] call BIS_fnc_mapAnimAdd;", "docSyntax": "[duration, toZoom, toPosition, interpModeZoom, interpModePosition, fromZoom, fromPosition] call BIS_fnc_mapAnimAdd", "syntax": "[duration,toZoom,toPosition,interpModeZoom,interpModePosition,fromZoom,fromPosition] call BIS_fnc_mapAnimAdd"}, "BIS_fnc_mapAnimClear": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: Same as mapAnimClear Parameters: Nothing Returns: Nothing Examples: [] call BIS_fnc_mapAnimClear; */", "docSyntax": "[] call BIS_fnc_mapAnimClear", "syntax": "[] call BIS_fnc_mapAnimClear"}, "BIS_fnc_mapAnimDone": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte Description: Same as mapAnimAdd but with possibility for non linear zoom and position interpolation modes Parameters: Nothing Returns: Bool - False if map animation is in progress, true if not Examples: [] call BIS_fnc_mapAnimDone; */", "docSyntax": "[] call BIS_fnc_mapAnimDone", "syntax": "[] call BIS_fnc_mapAnimDone"}, "BIS_fnc_mapGridSize": {"version": "FNC", "tags": "", "description": "Returns the size of map grid square at current zoom level.", "example": "private _gridSize = [] call BIS_fnc_mapGridSize;", "docSyntax": "[map] call BIS_fnc_mapGridSize", "syntax": "[<objMap>] call BIS_fnc_mapGridSize"}, "BIS_fnc_mapSize": {"version": "FNC", "tags": "", "description": "Returns map size from config. Do not confuse with worldSize. The engine command calculates the map size and doesn't read it from config.", "example": "\"Altis\" call BIS_fnc_mapSize;", "docSyntax": "terrainName call BIS_fnc_mapSize", "syntax": "terrainName call BIS_fnc_mapSize"}, "BIS_fnc_markerCreate": {"version": "FNC", "tags": "", "description": "/* Description: Creates marker with given params. Reads config to recognize settings - use for quick debugging only. Parameter(s): _this: ARRAY of values: STRING - one of type, color, brush or shape. If no corresponding class is found, value is used as marker text ARRAY [STRING(,ANY,ANY,...)] - marker name with optional arguments [NUMBER] - marker size [a,a] [NUMBER,NUMBER] - marker size [x,y] [NUMBER,NUMBER,NUMBER] - marker position [x,y,z] OBJECT - object's position NUMBER - marker dir BOOL - marker locality (true if global) Returns: STRING - created marker */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_markerParams": {"version": "FNC", "tags": "", "description": "Returns marker params in format compatible with BIS_fnc_markerCreate.", "example": "private _params = \"marker_1\" call BIS_fnc_markerParams;", "docSyntax": "varName call BIS_fnc_markerParams", "syntax": "varName call BIS_fnc_markerParams"}, "BIS_fnc_markerPath": {"version": "FNC", "tags": "", "description": "Create marker(s) between two points.", "example": "[\"markerStart\", \"markerEnd\"] call BIS_fnc_markerPath;", "docSyntax": "[start, end, spacing, params] call BIS_fnc_markerPath", "syntax": "[start,end,spacing,<any>] call BIS_fnc_markerPath"}, "BIS_fnc_markerToString": {"version": "FNC", "tags": "", "description": "Converts existing marker to String, for example: \"|marker_0|[3799.0110,2781.9880,0.0000]|mil_pickup|ICON|[1,1]|0|Solid|Default|1|You are here\"", "example": "\"marker1\" call BIS_fnc_markerToString;", "docSyntax": "[markerName, delimiter] call BIS_fnc_markerToString", "syntax": "[<string>,delimiter] call BIS_fnc_markerToString"}, "BIS_fnc_markerToTrigger": {"version": "FNC", "tags": "", "description": "Makes an existing or new marker cover a trigger area.", "example": "private _createdMarker = [\"marker1\", myTrigger] call BIS_fnc_markerToTrigger;", "docSyntax": "[markerName, trigger, localChange] call BIS_fnc_markerToTrigger", "syntax": "[<string>,<objTrigger>,localChange] call BIS_fnc_markerToTrigger"}, "BIS_fnc_markWaypoints": {"version": "FNC", "tags": "", "description": "/* Description: Creates a marker on each uncompleted waypoint and marks it checked after completing that WP. Note: \"On Activation\" WP code is used for handling the markers; if this code is overwritten during the course, it can break this functionality Parameter(s): _this select 0: OBJECT - unit who will have its waypoints marked _this select 1 (Optional, use \"\" for default): STRING - text of hint shown after completing a waypoint, %1 is used for WP number (default \"\") _this select 2 (Optional, use [] for default): ARRAY of STRINGS - marker text format for [uncompleted, completed] waypoints, %1 is used for WP number (default [\"%1\", \"%1\"]) _this select 3 (Optional, use [] for default): ARRAY of STRINGS - marker icon for [uncompleted, completed] waypoints (default [\"mil_circle\", \"mil_circle\"]) _this select 4 (Optional, use [] for default): ARRAY of STRINGS - marker color for [uncompleted, completed] waypoints (default [\"ColorRed\", \"ColorGreen\"]) _this select 5 (Optional, use [] for default): ARRAY of NUMBERS - marker size for [uncompleted, completed] waypoints (default [0.75, 0.75]) Returns: NOTHING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_maxDiffArray": {"version": "FNC", "tags": "", "description": "Function to return the maximum difference between all values in an array.", "example": "private _maxDiff = [[0, 5, 10, -5]] call BIS_fnc_maxDiffArray; //\u00a0will return 15 (-5 to 10)", "docSyntax": "[arrayOfNumbers] call BIS_fnc_maxDiffArray", "syntax": "[arrayOfNumbers] call BIS_fnc_maxDiffArray"}, "BIS_fnc_mirrorCuratorSettings": {"version": "FNC", "tags": "", "description": "Mirrors settings from one curator to another.", "example": "[ [curator_1, curator_2], [curator_3, curator_4], [\"addons\", \"objects\", \"coefs\"] ] call BIS_fnc_mirrorCuratorSettings;", "docSyntax": "[from, to, modes, shareType] call BIS_fnc_mirrorCuratorSettings", "syntax": "[from,to,modes,shareType] call BIS_fnc_mirrorCuratorSettings"}, "BIS_fnc_miscAnim": {"version": "FNC", "tags": "", "description": "Setting up the animations with correct positions for object - choose correct performance. For ex. fixingTowingTractor (read the description).", "example": "[\"twoTalking1\", unit1, myCar, unit2] call BIS_fnc_miscAnim;", "docSyntax": "[anim, person1, vehicle, person2, isOnBoard, altitude, doMove] call BIS_fnc_miscAnim", "syntax": "[anim,person1,<objVehicle>,person2,isOnBoard,<scalar>,doMove] call BIS_fnc_miscAnim"}, "BIS_fnc_missileLaunchPositionFix": {"version": "FNC", "tags": "", "description": "Workaround fix for ATGM/SAM launch positions", "example": "[_vehicle,_missile,\"missile_move\",\"MissileBase\"] call BIS_fnc_missileLaunchPositionFix;", "docSyntax": "[vehicle, projectile, selection, projectileType] call BIS_fnc_missileLaunchPositionFix", "syntax": "[<objVehicle>,projectile,selection,projectileType] call BIS_fnc_missileLaunchPositionFix"}, "BIS_fnc_missionConversations": {"version": "FNC", "tags": "", "description": "/* Description: Header function of local mission conversations Parameter(s): 0: STRING - unique mode 1 (Optional): ANY - additional params Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_missionConversationsLocal": {"version": "FNC", "tags": "", "description": "\u24d8", "example": "call BIS_fnc_missionConversationsLocal;", "docSyntax": "call BIS_fnc_missionConversationsLocal", "syntax": "call BIS_fnc_missionConversationsLocal"}, "BIS_fnc_missionFlow": {"version": "FNC", "tags": "", "description": "This function is automatically run in post-init by a CfgFunctions declaration. If the mission contains a missionFlow.fsm file, it will be loaded, otherwise an empty, default one will be used.", "example": "call BIS_fnc_missionFlow;", "docSyntax": "call BIS_fnc_missionFlow", "syntax": "call BIS_fnc_missionFlow"}, "BIS_fnc_missionHandlers": {"version": "FNC", "tags": "", "description": "#define VAR_RELOADS (missionname + \"_reloads_\" + str ismultiplayer) //--- Mission end type and rating", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_missionRespawnType": {"version": "FNC", "tags": "", "description": "Return respawn type defined in Description.ext. Can return as Number (e.g 1) or String (e.g \"BIRD\").", "example": "private _respawnAsNumber = 0 call BIS_fnc_missionRespawnType;", "docSyntax": "type call BIS_fnc_missionRespawnType", "syntax": "type call BIS_fnc_missionRespawnType"}, "BIS_fnc_missionSelector": {"version": "FNC", "tags": "", "description": "Function that draws clickable, hoverable and animated icons on the map that execute a user-defined code when pressed.", "example": "private _area = [750, 400]; private _missionsList = [ [ getMarkerPos \"BIS_briefMarkerINFANTRY\", \"Infantry\", \"Your mission is to do stuff\", \"AnimBriefing\\intro_stage1a_CA.paa\", { hint \"infantry mission selected\" } ], [ getMarkerPos \"BIS_briefMarkerSPECIALFORCES\", \"Special Forces\", \"Your mission is to do stuff but in a more special way\", \"AnimBriefing\\intro_stage1a_CA.paa\", { hint \"special forces mission selected\" } ] ]; private _index = [_area, getMarkerPos \"BIS_cameraCenter\", _missionsList] call BIS_fnc_missionSelector; private _missionDetails = _missionsList select _index;", "docSyntax": "[area, mapCenter, missionsArray] call BIS_fnc_missionSelector", "syntax": "[area,mapCenter,missionsArray] call BIS_fnc_missionSelector"}, "BIS_fnc_missionTasks": {"version": "FNC", "tags": "", "description": "/* Description: Header function of local mission tasks. Automatically declares following variables: _taskID: STRING _taskState: STRING _taskExists: BOOL Parameter(s): 0: STRING - unique mode 1 (Optional): ANY - additional params 2 (Optional): CODE - specific task function (default: \"BIS_fnc_missionTasksLocal\") Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_missionTasksLocal": {"version": "FNC", "tags": "", "description": "\u24d8", "example": "call BIS_fnc_missionTasksLocal;", "docSyntax": "call BIS_fnc_missionTasksLocal", "syntax": "call BIS_fnc_missionTasksLocal"}, "BIS_fnc_missionTimeLeft": {"version": "FNC", "tags": "", "description": "Returns time in seconds until the mission end. Remaining time can be set using estimatedTimeLeft command or using BIS_fnc_countdown.", "example": "call BIS_fnc_missionTimeLeft;", "docSyntax": "call BIS_fnc_missionTimeLeft", "syntax": "call BIS_fnc_missionTimeLeft"}, "BIS_fnc_moduleAI": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleAmmo": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleAnimals": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleArsenal": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleBleedTickets": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleBootcampStage": {"version": "FNC", "tags": "", "description": "/* Description: Change the current Stage in Bootcamp MP Guided Mode Parameter(s): http://community.bistudio.com/wiki/Arma_3_Modules Returns: NONE */ // Parameters", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCAS": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleChat": {"version": "FNC", "tags": "", "description": "Make a list of units use any *chat command (groupChat, vehicleChat, sideChat, commandChat, globalChat).", "example": "myLogic setVariable [\"Channel\", \"2\"]; myLogic setVariable [\"Text\", \"Hello everyone, this is side chat!\"]; [myLogic, [player], true] call BIS_fnc_moduleChat;", "docSyntax": "[logic, units, isActivated] call BIS_fnc_moduleChat", "syntax": "[logic,units,isActivated] call BIS_fnc_moduleChat"}, "BIS_fnc_moduleCivilianPresence": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- Example: [\"getObjects\",[_module,\"ModuleCivilianPresenceSafeSpot_F\"]] call BIS_fnc_moduleCivilianPresence; --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleCivilianPresence", "syntax": "[] call BIS_fnc_moduleCivilianPresence"}, "BIS_fnc_moduleCivilianPresenceSafeSpot": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleCivilianPresenceSafeSpot", "syntax": "[] call BIS_fnc_moduleCivilianPresenceSafeSpot"}, "BIS_fnc_moduleCivilianPresenceUnit": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleCivilianPresenceUnit", "syntax": "[] call BIS_fnc_moduleCivilianPresenceUnit"}, "BIS_fnc_moduleCombatGetIn": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCountdown": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCoverMap": {"version": "FNC", "tags": "", "description": "Covers the map except for a defined area. This function was designed to be used by the Modules framework, but it can also be used without the module. The effect does not move with the centerObject.", "example": "//\u00a0covers the whole map except an area of 1000m by 1000m //\u00a0can be used to dynamically change size of the area during mission centerObject setVariable [\"objectArea\",[1000, 1000, 0, false, 0]]; [_centerObject, [], true] call BIS_fnc_moduleCoverMap;", "docSyntax": "[centerUnit,units,init] call BIS_fnc_moduleCoverMap", "syntax": "[centerUnit,units,init] call BIS_fnc_moduleCoverMap"}, "BIS_fnc_moduleCreateDiaryRecord": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCreateProjectile": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCurator": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorAddAddons": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorAddCameraArea": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorAddEditableObjects": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorAddEditingArea": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorAddEditingAreaPlayers": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorAddIcon": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorAddPoints": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorSetAttributes": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorSetCamera": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorSetCoefs": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorSetCostsDefault": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorSetCostsSide": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorSetCostsVehicleClass": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorSetEditingAreaType": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleCuratorSetObjectCost": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleDamage": {"version": "FNC", "tags": "", "description": "Damage given vehicles.", "example": "[myLogic, vehicle player, true] call BIS_fnc_moduleDamage;", "docSyntax": "[logic, vehicles, isActivated] call BIS_fnc_moduleDamage", "syntax": "[logic,vehicles,isActivated] call BIS_fnc_moduleDamage"}, "BIS_fnc_moduleDate": {"version": "FNC", "tags": "", "description": "Used by the Date module.", "example": "[logic, nil, true] call BIS_fnc_moduleDate;", "docSyntax": "[logic, null, activated] call BIS_fnc_moduleDate", "syntax": "[logic,null,activated] call BIS_fnc_moduleDate"}, "BIS_fnc_moduleDiary": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleDoorOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleEditTerrainObject": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- Setups given terrain object. --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleEditTerrainObject", "syntax": "[] call BIS_fnc_moduleEditTerrainObject"}, "BIS_fnc_moduleEffectsBubbles": {"version": "FNC", "tags": "", "description": "Creates underwater bubble effect on defined place (called usually by BIS_fnc_moduleEffectsEmitterCreator).", "example": "[BIS_module] call BIS_fnc_moduleEffectsBubbles;", "docSyntax": "[module] call BIS_fnc_moduleEffectsBubbles", "syntax": "[module] call BIS_fnc_moduleEffectsBubbles"}, "BIS_fnc_moduleEffectsEmitterCreator": {"version": "FNC", "tags": "", "description": "/* File: fn_moduleEffectsEmitterCreator.sqf Description: Module function. Creates particle emitters and calls effect function. Parameter(s): _this select 0 (Object) - Module logic. _this select 1 (String) - Function name. _this select 2 (Number) - Optional - Number of emitters. Returned value: None. */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleEffectsFire": {"version": "FNC", "tags": "", "description": "Creates fire on position of module (called usually by BIS_fnc_moduleEffectsEmitterCreator).", "example": "[BIS_module] call BIS_fnc_moduleEffectsFire;", "docSyntax": "[module] call BIS_fnc_moduleEffectsFire", "syntax": "[module] call BIS_fnc_moduleEffectsFire"}, "BIS_fnc_moduleEffectsPlankton": {"version": "FNC", "tags": "", "description": "Creates underwater plankton effect around player (called usually by BIS_fnc_moduleEffectsEmitterCreator).", "example": "[BIS_module] call BIS_fnc_moduleEffectsPlankton;", "docSyntax": "[module] call BIS_fnc_moduleEffectsPlankton", "syntax": "[module] call BIS_fnc_moduleEffectsPlankton"}, "BIS_fnc_moduleEffectsShells": {"version": "FNC", "tags": "", "description": "Creates empty ammo cartridges on position of the module logic.", "example": "[BIS_module] call BIS_fnc_moduleEffectsShells;", "docSyntax": "[module] call BIS_fnc_moduleEffectsShells", "syntax": "[module] call BIS_fnc_moduleEffectsShells"}, "BIS_fnc_moduleEffectsSmoke": {"version": "FNC", "tags": "", "description": "Creates smoke on position of module (called usually by BIS_fnc_moduleEffectsEmitterCreator).", "example": "[BIS_module] call BIS_fnc_moduleEffectsSmoke;", "docSyntax": "[module] call BIS_fnc_moduleEffectsSmoke", "syntax": "[module] call BIS_fnc_moduleEffectsSmoke"}, "BIS_fnc_moduleEndMission": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleExecute": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleFDBalloonAirDestruction": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleFDBalloonWaterDestruction": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleFDCPClear": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleFDCPIn": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleFDCPOut": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleFDFadeMarker": {"version": "FNC", "tags": "", "description": "Gradually change the alpha of the given marker.", "example": "[\"tankMarker\", 0.25] spawn BIS_fnc_moduleFDFadeMarker;", "docSyntax": "[markerName, alpha] spawn BIS_fnc_moduleFDFadeMarker", "syntax": "[<string>,alpha] spawn BIS_fnc_moduleFDFadeMarker"}, "BIS_fnc_moduleFDSkeetDestruction": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleFDStatsClear": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleFiringDrill": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleFriendlyFire": {"version": "FNC", "tags": "", "description": "/******************************************************************************* Version: 2.0 Name: Friendly Fire Author: Zozo DESCRIPTION: Handles the friendly fire. Use either the module interface in the editor, or call individual functions. PARAMETERS: 1) function called - string, list of functions: - Init - Destroy - AddUnits - RemoveUnits - ChangePriority - ListActiveUnit 2) parameter for the function RETURNED VALUE: depends on the function called EXAMPLES: // Initializes the module if not added in editor // No units are directly checked for friendly fire, but renegade state is checked anyway _ret = [\"Init\", []] call BIS_fnc_moduleFriendlyFire // Initializes the module if not added in editor // BIS_vip1, BIS_vip2, BIS_noVip units are directly checked for friendly fire x = [\"Init\", [[BIS_vip1, BIS_vip2, BIS_noVip],true]] call BIS_fnc_moduleFriendlyFire // De-initializes the module _ret = [\"Destroy\"] call BIS_fnc_moduleFriendlyFire // Add BIS_vip3 unit to be checked for friendly fire x = [\"AddUnits\", [[BIS_vip3]]] call BIS_fnc_moduleFriendlyFire // Remove BIS_vip1 unit from active units x = [\"RemoveUnits\", [[BIS_vip1]]] call BIS_fnc_moduleFriendlyFire // set another priority for a vehicle- if it is hit once, considered as friendly fire x = [\"ChangePriority\", [BIS_vip,1]] call BIS_fnc_moduleFriendlyFire *******************************************************************************/", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleFuel": {"version": "FNC", "tags": "", "description": "Set fuel of linked units' vehicles.", "example": "[myLogic, [unit1, unit2, vehicle1], true] call BIS_fnc_moduleFuel;", "docSyntax": "[logic, units, isActivated] call BIS_fnc_moduleFuel", "syntax": "[logic,units,isActivated] call BIS_fnc_moduleFuel"}, "BIS_fnc_moduleGenericRadio": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleGrenade": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleGrenade", "syntax": "[] call BIS_fnc_moduleGrenade"}, "BIS_fnc_moduleGroupID": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleHandle": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleHealth": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleHideTerrainObjects": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- 3DEN MOD: Hiddes closest terrain object. --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleHideTerrainObjects", "syntax": "[] call BIS_fnc_moduleHideTerrainObjects"}, "BIS_fnc_moduleHint": {"version": "FNC", "tags": "", "description": "/* Description: Show a hint to all players of side Parameter(s): http://community.bistudio.com/wiki/Arma_3_Modules Returns: NONE */ // Parameters", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleHQ": {"version": "FNC", "tags": "", "description": "/* Description: Register or return side HQ speaker Parameter(s): 0: OBJECT - register the HQ SIDE - return HQ of the side Returns: OBJECT - the HQ */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleHvtInit": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleHvtInit", "syntax": "[] call BIS_fnc_moduleHvtInit"}, "BIS_fnc_moduleHvtObjective": {"version": "FNC", "tags": "", "description": "/*, _objects*/", "docSyntax": "[] call BIS_fnc_moduleHvtObjective", "syntax": "[] call BIS_fnc_moduleHvtObjective"}, "BIS_fnc_moduleHvtObjectives": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleHvtObjectives", "syntax": "[] call BIS_fnc_moduleHvtObjectives"}, "BIS_fnc_moduleHvtObjectivesInstance": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleHvtObjectivesInstance", "syntax": "[] call BIS_fnc_moduleHvtObjectivesInstance"}, "BIS_fnc_moduleInit": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleLightning": {"version": "FNC", "tags": "", "description": "Zeus lightning strike.", "example": "player addAction [ \"Eat that!\", { private _tempTarget = createSimpleObject [\"Land_HelipadEmpty_F\", getPosASL cursorTarget]; [_tempTarget, nil, true] spawn BIS_fnc_moduleLightning; cursorTarget setDamage 1; }, [], 1.5, true, true, \"\", \"!isNull cursorTarget\" ];", "docSyntax": "[target, nil, activate] call BIS_fnc_moduleLightning", "syntax": "[<object>,nil,activate] call BIS_fnc_moduleLightning"}, "BIS_fnc_moduleMine": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleMissionName": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleMode": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleModules": {"version": "FNC", "tags": "", "description": "Scans synchronized objects and returns synchronized modules", "docSyntax": "[module] call BIS_fnc_moduleModules", "syntax": "[module] call BIS_fnc_moduleModules"}, "BIS_fnc_moduleMPTypeDefense": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleMPTypeGameMaster": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleMPTypeGroundSupport": {"version": "FNC", "tags": "", "description": "// Debug log", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleMPTypeGroundSupportBase": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleMPTypeSectorControl": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleMPTypeSeize": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleObjective": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleObjectiveFind": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleObjectiveGetIn": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleObjectiveMove": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleObjectiveRaceCP": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleObjectiveRaceFinish": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleObjectiveRaceStart": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleObjectiveSector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleObjectiveTarget": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_modulePositioning": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_modulePoster": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_modulePostprocess": {"version": "FNC", "tags": "", "description": "\u24d8", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_moduleProjectile": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_modulePunishment": {"version": "FNC", "tags": "", "description": "/* Description: Make a unit play a punishment animation Parameter(s): http://community.bistudio.com/wiki/Arma_3_Modules Returns: NONE */ // Parameters", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleRadioChannelCreate": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleRank": {"version": "FNC", "tags": "", "description": "Used by the Set Rank module.", "example": "[rankLogic, [player]] call BIS_fnc_moduleRank;", "docSyntax": "[logic, units, activated] call BIS_fnc_moduleRank", "syntax": "[logic,units,activated] call BIS_fnc_moduleRank"}, "BIS_fnc_moduleRating": {"version": "FNC", "tags": "", "description": "Function used by the Rating module.", "example": "[myLogic, units group player, true] call BIS_fnc_moduleRating;", "docSyntax": "[logic, units, activated] call BIS_fnc_moduleRating", "syntax": "[logic,units,activated] call BIS_fnc_moduleRating"}, "BIS_fnc_moduleRemoteControl": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleRespawnInventory": {"version": "FNC", "tags": "", "description": "/* Description: Set respawn loadouts a curator can assign to players Parameter(s): 0: OBJECT - curator logic 1: BOOL - true to make all loadouts availale, false to base them on units the curator can place Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleRespawnPosition": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleRespawnTickets": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleRespawnVehicle": {"version": "FNC", "tags": "", "description": "/* Description: Set vehicle respawn, compatible both with SP and MP. Parameter(s): 0: OBJECT - vehicle 1: NUMBER - respawn delay in seconds (default is 0) BOOL - true to remove vehicle respawn (further params are ignored), false to check if the vehicle is marked for respawn 2: NUMBER - how long until the vehicle is automatically respawned after its crew leaves it (default is -1, i.e., disabled) 3: NUMBER - number of time the vehicle can be respawned (default is -1, i.e., unlimited) 4: CODE - code executed upon respawn. Passed arguments are [<newVehicle>,<oldVehicle>]. The old vehicle is deleted only after this code is completed. 5: POSITION - type of respawn position: 0 = where it started 1 = where it was destroyed 2 = on vehicle's side respawn marker (e.g., \"respawn_vehicle_west\") 3 = on BLUFOR respawn marker 4 = on OPFOR respawn marker 5 = on Independent respawn marker 6 = on Civilian respawn marker 7 = on side respawn marker of unit which destroyed the vehicle 6: NUMBER - position selection type (0 = random, 1 = newest, 2 = oldest) 7: NUMBER - type of old vehicle deletion (0 = don't delete, 1 = delete, 2 = delete with an explosion effect) 8: BOOL - true to show notifcation when the vehicle is respawned Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleSaveGame": {"version": "FNC", "tags": "", "description": "Saves the game. Saving has to be enabled.", "example": "call BIS_fnc_moduleSaveGame;", "docSyntax": "[nil,nil,activated] call BIS_fnc_moduleSaveGame", "syntax": "[nil,nil,activated] call BIS_fnc_moduleSaveGame"}, "BIS_fnc_moduleSector": {"version": "FNC", "tags": "", "description": "/* Description: Initialize a sector module. Can be also used to get sector parameters. --- Get all sectors --- Parameter(s): 0: BOOL Returns: ARRAY of OBJECTs --- Get number of sectors held by a side --- Parameter(s): 0: SIDE Returns: NUMBER - number of sectors owned by the side --- Set sector owner --- Parameter(s): 0: OBJECT - sector module 1: SIDE Returns: BOOL --- Initialize --- Parameter(s): 0: OBJECT - sector module Returns: NOTHING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleSFX": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleShowHide": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleSimulationManager": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleSimulationManager_grab": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleSimulationManager_grab", "syntax": "[] call BIS_fnc_moduleSimulationManager_grab"}, "BIS_fnc_moduleSiteInit": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleSiteInit", "syntax": "[] call BIS_fnc_moduleSiteInit"}, "BIS_fnc_moduleSkill": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleSkiptime": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleSlingload": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleSlingload", "syntax": "[] call BIS_fnc_moduleSlingload"}, "BIS_fnc_moduleSound": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleSpawnAI": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- DEBUG LOG FLAG --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleSpawnAI", "syntax": "[] call BIS_fnc_moduleSpawnAI"}, "BIS_fnc_moduleSpawnAIOptions": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- TERMINATE ALL BUT 1ST MODULE --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleSpawnAIOptions", "syntax": "[] call BIS_fnc_moduleSpawnAIOptions"}, "BIS_fnc_moduleSpawnAIPoint": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleSpawnAIPoint", "syntax": "[] call BIS_fnc_moduleSpawnAIPoint"}, "BIS_fnc_moduleSpawnAISectorTactic": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- RUN ONCE --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleSpawnAISectorTactic", "syntax": "[] call BIS_fnc_moduleSpawnAISectorTactic"}, "BIS_fnc_moduleStrategicMapImage": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleStrategicMapInit": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleStrategicMapMission": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleStrategicMapOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleStrategicMapORBAT": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleSupportsInitProvider": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleSupportsInitProvider", "syntax": "[] call BIS_fnc_moduleSupportsInitProvider"}, "BIS_fnc_moduleSupportsInitProviderVirtual": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleSupportsInitProviderVirtual", "syntax": "[] call BIS_fnc_moduleSupportsInitProviderVirtual"}, "BIS_fnc_moduleSupportsInitRequester": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleSupportsInitRequester", "syntax": "[] call BIS_fnc_moduleSupportsInitRequester"}, "BIS_fnc_moduleTaskCreate": {"version": "FNC", "tags": "", "description": "/* Description: Create Task module function */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleTaskSetDescription": {"version": "FNC", "tags": "", "description": "/* Description: Set Task Description module function */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleTaskSetDestination": {"version": "FNC", "tags": "", "description": "/* Description: Set Task Destination module function */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleTaskSetState": {"version": "FNC", "tags": "", "description": "/* Description: Set Task State module function */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleTimeMultiplier": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_moduleTimeMultiplier", "syntax": "[] call BIS_fnc_moduleTimeMultiplier"}, "BIS_fnc_moduleTimeTrial": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_moduleTracers": {"version": "FNC", "tags": "", "description": "Function used by the Tracers module.", "example": "[myLogic, true] call BIS_fnc_moduleTracers;", "docSyntax": "[logic, activated] call BIS_fnc_moduleTracers", "syntax": "[logic,activated] call BIS_fnc_moduleTracers"}, "BIS_fnc_moduleTrident": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleTriggers": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleTTCPClear": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_moduleTTCPIn": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_moduleTTCPOut": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_moduleTTCPTrigger": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleTTCPTriggerBehind": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleTTStatsClear": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleUnits": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleUnlockArea": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleUnlockObject": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleVanguardFob": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleVanguardFob", "syntax": "[] call BIS_fnc_moduleVanguardFob"}, "BIS_fnc_moduleVanguardObjective": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleVanguardObjective", "syntax": "[] call BIS_fnc_moduleVanguardObjective"}, "BIS_fnc_moduleVanguardScorePersistence": {"version": "FNC", "tags": "", "description": "/*-------------------------------------------------------------------------------------------------- --------------------------------------------------------------------------------------------------*/", "docSyntax": "[] call BIS_fnc_moduleVanguardScorePersistence", "syntax": "[] call BIS_fnc_moduleVanguardScorePersistence"}, "BIS_fnc_moduleVolume": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleWeather": {"version": "FNC", "tags": "", "description": "/* Description: Set overcast and fog Parameter(s): 0: STRING - mode, can be one of following \"enableDelay\" - enable delayed activation (i.e., weather changes are not applied manually and have to be confirmed by mission) 1: BOOL - true to enbale, false to disable Returns: Nothing \"isDelayEnabled\" Returns: true if delayed activation is enabled, otherwise false \"commit\" - apply weather changes Returns: Nothing */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleZoneProtection": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_moduleZoneRestriction": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_monthDays": {"version": "FNC", "tags": "", "description": "Returns number of days in given month. Takes in account for leap year.", "example": "private _daysInThisMonth = [date select 0, date select 1] call BIS_fnc_monthDays;", "docSyntax": "[year, month] call BIS_fnc_monthDays", "syntax": "[year,month] call BIS_fnc_monthDays"}, "BIS_fnc_moveAction": {"version": "FNC", "tags": "", "description": "Return current move action (used in playAction, playActionNow and switchAction)", "example": "_actionName = [player, false] call BIS_fnc_moveAction; _actionConfig = [player, true] call BIS_fnc_moveAction;", "docSyntax": "[unit, returnConfig] call BIS_fnc_moveAction", "syntax": "[<objUnit>,returnConfig] call BIS_fnc_moveAction"}, "BIS_fnc_moveIn": {"version": "FNC", "tags": "", "description": "Moves a unit into vehicle. Compatible with assignedVehicleRole output.", "example": "[myCar, player, \"cargo\"] call BIS_fnc_moveIn;", "docSyntax": "[vehicle, unit, role] call BIS_fnc_moveIn", "syntax": "[<objVehicle>,<objUnit>,role] call BIS_fnc_moveIn"}, "BIS_fnc_moveMarker": {"version": "FNC", "tags": "", "description": "Moves marker to a new position", "example": "[\"BIS_marker\", [1111,2222,0]] call BIS_fnc_moveMarker;", "docSyntax": "[marker, newPosition, duration, interpolationType] call BIS_fnc_moveMarker", "syntax": "[marker,newPosition,duration,interpolationType] call BIS_fnc_moveMarker"}, "BIS_fnc_moveToRespawnPosition": {"version": "FNC", "tags": "", "description": "Move given unit to given respawn position. Units moved to height >= 30m will start on parachute. Position [0,0,0] is blacklisted. This function must be executed where unit to be moved is local.", "example": "[player, \"SpawnMarker1\"] call BIS_fnc_moveToRespawnPosition;", "docSyntax": "[unit, position, canBeDead] call BIS_fnc_moveToRespawnPosition", "syntax": "[<objUnit>,position,canBeDead] call BIS_fnc_moveToRespawnPosition"}, "BIS_fnc_MP": {"version": "FNC", "tags": "", "description": "Send function for remote execution (and executes locally if conditions are met).", "example": "Log a message for every connected player:", "docSyntax": "[params, functionName, target, isSpawn, isPersistent] call BIS_fnc_MP", "syntax": "[<any>,functionName,<object>,isSpawn,isPersistent] call BIS_fnc_MP"}, "BIS_fnc_MPexec": {"version": "FNC", "tags": "", "description": "Execute received remote execution. This function is used by BIS_fnc_MP and should not be called directly.", "example": "[\"BIS_fnc_MP_packet\", [\"Hello World\", \"hint\", true, true]] call BIS_fnc_MPexec;", "docSyntax": "[packetName, packetValue] call BIS_fnc_MPexec", "syntax": "[packetName,packetValue] call BIS_fnc_MPexec"}, "BIS_fnc_multiplySquareMatrixByVector": {"version": "FNC", "tags": "", "description": "/* * Author: Zozo * Multiplies the square matrix by a vector: A(m,m) x V(m) * * Arguments: * 0: _matrix ARRAY (multi-dimensional) * 1: _vector ARRAY ([x,y,z] or [x,y,z,1]) * * Return Value: * ARRAY [x,y,z] * * Example: * [_transformMatrix, vectorDir player] call BIS_multiplySquareMatrixVector * */", "docSyntax": "[] call BIS_fnc_multiplySquareMatrixByVector", "syntax": "[] call BIS_fnc_multiplySquareMatrixByVector"}, "BIS_fnc_music": {"version": "FNC", "tags": "", "description": "Randomly play provided tracks defined in CfgMusic and does a 3 seconds fade out. This function takes accTime into account. See also BIS_fnc_jukebox.", "example": "[[\"myMusic1\", \"myMusic2\"], 1] call BIS_fnc_music;", "docSyntax": "[tracklist, delay] call BIS_fnc_music", "syntax": "[tracklist,<scalar>] call BIS_fnc_music"}, "BIS_fnc_nearestHelipad": {"version": "FNC", "tags": "", "description": "Finds the nearest helipad of given type.", "docSyntax": "[position, radius, random, types] call BIS_fnc_nearestHelipad", "syntax": "[position,radius,random,types] call BIS_fnc_nearestHelipad"}, "BIS_fnc_nearestNum": {"version": "FNC", "tags": "", "description": "Returns the provided set closest number to the target number.", "example": "private _closestValueTo4 = [[1,5,10], 4] call BIS_fnc_nearestNum; //\u00a0returns 5", "docSyntax": "[values, value] call BIS_fnc_nearestNum", "syntax": "[values,<scalar>] call BIS_fnc_nearestNum"}, "BIS_fnc_nearestPoint": {"version": "FNC", "tags": "", "description": "Computes nearest point in a line.", "example": "private _idealLocation = [getMarkerPos \"base\", getMarkerPos \"destination\", getPos player, true] call BIS_fnc_nearestPoint;", "docSyntax": "[start, end, point, is2D] call BIS_fnc_nearestPoint", "syntax": "[start,end,point,is2D] call BIS_fnc_nearestPoint"}, "BIS_fnc_nearestPosition": {"version": "FNC", "tags": "", "description": "Function to find the nearest Object or position from a list, when compared to a given reference.", "example": "//\u00a0Find the nearest marker from player _nearestMarker = [allMapMarkers, player] call BIS_fnc_nearestPosition;", "docSyntax": "[items, origin] call BIS_fnc_nearestPosition", "syntax": "[items,origin] call BIS_fnc_nearestPosition"}, "BIS_fnc_nearestRoad": {"version": "FNC", "tags": "", "description": "Find the nearest road segment to certain position, within given radius.", "example": "private _nearestRoad = [getPosATL player, 500] call BIS_fnc_nearestRoad;", "docSyntax": "[center, radius, blacklist] call BIS_fnc_nearestRoad", "syntax": "[center,radius,blacklist] call BIS_fnc_nearestRoad"}, "BIS_fnc_netId": {"version": "FNC", "tags": "", "description": "Extends MP-only netId functionality to SP", "example": "private _objNetId = player call BIS_fnc_netId; //\u00a0\"0:2\"", "docSyntax": "objOrGrp call BIS_fnc_netId", "syntax": "objOrGrp call BIS_fnc_netId"}, "BIS_fnc_neutralizeUnit": {"version": "FNC", "tags": "", "description": "Neutralize an object by intrinsic means:", "example": "cursorTarget call BIS_fnc_neutralizeUnit;", "docSyntax": "object call BIS_fnc_neutralizeUnit", "syntax": "<object> call BIS_fnc_neutralizeUnit"}, "BIS_fnc_noFlyZone": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_noFlyZonesCreate": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_noFlyZonesExport": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_numberDigits": {"version": "FNC", "tags": "", "description": "Break number into array of digits.", "example": "12345678 call BIS_fnc_numberDigits; //\u00a0returns [1,2,3,4,5,6,7,8]", "docSyntax": "number call BIS_fnc_numberDigits", "syntax": "<scalar> call BIS_fnc_numberDigits"}, "BIS_fnc_numberText": {"version": "FNC", "tags": "", "description": "Convert a number into string (avoiding scientific notation).", "example": "[4096] call BIS_fnc_numberText; //\u00a0\"4 096\"", "docSyntax": "[number, modulo] call BIS_fnc_numberText", "syntax": "[<scalar>,modulo] call BIS_fnc_numberText"}, "BIS_fnc_objectFromNetId": {"version": "FNC", "tags": "", "description": "Extends MP-only objectFromNetId functionality to SP", "example": "private _obj = \"0:2\" call BIS_fnc_objectFromNetId;", "docSyntax": "netId call BIS_fnc_objectFromNetId", "syntax": "netId call BIS_fnc_objectFromNetId"}, "BIS_fnc_objectHeight": {"version": "FNC", "tags": "", "description": "Return object height defined by its bounding box and eventual offset fix. For the following classes an offset is used.", "example": "player call BIS_fnc_objectHeight;", "docSyntax": "object call BIS_fnc_objectHeight", "syntax": "<object> call BIS_fnc_objectHeight"}, "BIS_fnc_objectInventoryAnimatedClose": {"version": "FNC", "tags": "", "description": "Animates an object being closed, for example a drawer. The counter set by BIS_fnc_objectInventoryAnimatedOpen gets reset when this function is called.", "docSyntax": "[object, animationArray] call BIS_fnc_objectInventoryAnimatedClose", "syntax": "[<object>,animationArray] call BIS_fnc_objectInventoryAnimatedClose"}, "BIS_fnc_objectInventoryAnimatedOpen": {"version": "FNC", "tags": "", "description": "Animates an object being opened, for example a drawer. It also sets a counter which prevents animation to be played multiple time if more than one player accesses that drawer.", "docSyntax": "[object, animationArray] call BIS_fnc_objectInventoryAnimatedOpen", "syntax": "[<object>,animationArray] call BIS_fnc_objectInventoryAnimatedOpen"}, "BIS_fnc_objectsGrabber": {"version": "FNC", "tags": "", "description": "Converts a set of placed objects to an object array (as a String) for the DynO mapper.", "example": "[getPos player, 20, true] call BIS_fnc_objectsGrabber;", "docSyntax": "[position, size, objectOrientation] call BIS_fnc_objectsGrabber", "syntax": "[position,size,objectOrientation] call BIS_fnc_objectsGrabber"}, "BIS_fnc_objectSide": {"version": "FNC", "tags": "", "description": "Returns object side as defined in config (i.e. not affected by dynamic changing like rating)", "example": "private _realVehicleSide = [vehicle player, true] call BIS_fnc_objectSide;", "docSyntax": "[target, boolean] call BIS_fnc_objectSide", "syntax": "[<object>,<bool>] call BIS_fnc_objectSide"}, "BIS_fnc_objectsMapper": {"version": "FNC", "tags": "", "description": "Takes an array of data about a dynamic object template and creates the objects.", "example": "private _objectsArray = [ [\"B_UAV_01_F\",[-5.23706,-0.183594,-0.00126648],167.39,1,0,[],\"\",\"\",true,false], [\"C_Offroad_01_F\",[-4.25903,4.62158,0.0630951],224.14,1,0,[],\"\",\"\",true,false] ]; [getMarkerPos \"myBase\", 0, _objectsArray, 0.5] call BIS_fnc_objectsMapper;", "docSyntax": "[position, azimuth, objectsArray, badChance] call BIS_fnc_objectsMapper", "syntax": "[position,azimuth,objectsArray,badChance] call BIS_fnc_objectsMapper"}, "BIS_fnc_objectType": {"version": "FNC", "tags": "", "description": "Return object category and type.", "example": "private _myType = player call BIS_fnc_objectType;", "docSyntax": "anObject call BIS_fnc_objectType", "syntax": "<objUnit> call BIS_fnc_objectType"}, "BIS_fnc_objectVar": {"version": "FNC", "tags": "", "description": "Return a unique object variable. The variable is preserved after unit respawn.", "example": "hint str (player call BIS_fnc_objectVar); //\u00a0\"bis_o1\" hint str (player == (missionNamespace getVariable \"bis_o1\")); //\u00a0true", "docSyntax": "[object, varNameRoot] call BIS_fnc_objectVar", "syntax": "[<object>,varNameRoot] call BIS_fnc_objectVar"}, "BIS_fnc_OM_addLoadedEH": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_allInfectedDeadCode": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_AS_ShowStaticText": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_BuildSectorsData": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_camera": {"version": "FNC", "tags": "", "description": "This article is a Stub. You can help BI Community Wiki by expanding it.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_conversation": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_createConversation": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_credits": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_Epicentrum": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_EXEC": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_HandleMapControls": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_infectedGroupHandle": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_init": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_medicineDeliveredCode": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_medicineRanOutCode": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_Module_initSmallValueSilder": {"version": "FNC", "tags": "", "description": "Initialize slider with edit box showing its value supporting small decimal numbers.", "example": "[_ctrlSlider,_ctrlEdit,\"m\",500] call BIS_fnc_OM_Module_initSmallValueSilder;//Set default value only.", "docSyntax": "[ctrlSlider, ctrlEdit, unit, defaultValue] call BIS_fnc_OM_Module_initSmallValueSilder", "syntax": "[ctrlSlider,ctrlEdit,<objUnit>,defaultValue] call BIS_fnc_OM_Module_initSmallValueSilder"}, "BIS_fnc_OM_moduleActionQueue": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleAwareness": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleCheckpoint_checkAngleToObject": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleCheckpoint_checkDistanceFromObject": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleCheckpoint_handleStates": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleCheckpoint_intersect": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleCheckpoint_navigateVehicleToCheck": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleCheckpoint_playAnim": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleDepot": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleEconomy": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleFastTravel": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleMarket": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_ModuleQuest_defend": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_ModuleQuest_destroyObject": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleRadio": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleRandomConversation": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleReputation": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleRestPoint": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleSmartMarkers": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleSyndikatAgent": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_moduleSyndikatTeam": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_pause": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_addCall": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_addContact": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_core": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_customSectionInit": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_customSectionShow": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_customSectionWeatherShow": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_getDiaryListIndexByName": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_incomingCall": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_menuHandler": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_menuInit": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_removeCall": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_SMS": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_phone_SMSSend": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_saveGame": {"version": "FNC", "tags": "", "description": "Saves the game - simply calls saveGame.", "example": "call BIS_fnc_OM_saveGame;", "docSyntax": "call BIS_fnc_OM_saveGame", "syntax": "call BIS_fnc_OM_saveGame"}, "BIS_fnc_OM_savingEnabled": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_sectorGetSectors": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_sellEquipment": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_SentryDrone": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_skip": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_warnCriticalCode": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OM_warnMildCode": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OMSetForecastLimit": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OMWeatherManagerCore": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OMWeatherManagerMain": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OMWeatherManagerRain": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OMWeatherReport": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_OMWeatherUICalc": {"version": "FNC", "tags": "", "description": "This function is used by the Arma 3 Apex: Old Man content. It might only work properly inside this scenario.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_onDiaryChanged": {"version": "FNC", "tags": "", "description": "/* Description: Register code to be executed when diary item changes. Arguments passed into code are: 0: DISPLAY - map display 1: BOOL - true if clicked on subject list, false when on record list (clicking on subject may also trigger record) 2: STRING - subject name 3: STRING - record name 4: ANY - passed arguments (index of onDiaryChanged code when no custom arguments were used) Parameter(s): _this: CODE ARRAY - code with custom arguments in format [CODE,ARG1,ARG2,...] NUMBER - remove code of given index Returns: NUMBER - index of onDiaryChanged code */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_onEnd": {"version": "FNC", "tags": "", "description": "Register code to be executed after mission end.", "example": "private _onEndIndex = { player addRating 10000; } call BIS_fnc_onEnd;", "docSyntax": "argument call BIS_fnc_onEnd", "syntax": "argument call BIS_fnc_onEnd"}, "BIS_fnc_onLoad": {"version": "FNC", "tags": "", "description": "Register code to be executed after a mission load (from a save, for example).", "example": "private _codeIndex = { hint \"Welcome back!\"; } call BIS_fnc_onLoad;", "docSyntax": "parameter call BIS_fnc_onLoad", "syntax": "parameter call BIS_fnc_onLoad"}, "BIS_fnc_onPlayerConnected": {"version": "FNC", "tags": "", "description": "Executes a function on server every time a player connects the mission.", "example": "[ { params [\"_player\", \"_params\"]; hint name _player; hint _params; }, \"Parameter\" ] call BIS_fnc_onPlayerConnected;", "docSyntax": "[code, params]] call BIS_fnc_onPlayerConnected", "syntax": "[<code>,<any>]] call BIS_fnc_onPlayerConnected"}, "BIS_fnc_openFieldManual": {"version": "FNC", "tags": "", "description": "Opens Field Manual in briefing (SP, MP Server, MP Client) and players's map or journal. Selects the topic and hint passed as parameters. Can apply a (search) filter if desired.", "example": "[\"Damage\", \"HitDamage\"] call BIS_fnc_openFieldManual;", "docSyntax": "[topic, hint, display, filter] call BIS_fnc_openFieldManual", "syntax": "[topic,hint,<uiDisplay>,filter] call BIS_fnc_openFieldManual"}, "BIS_fnc_ORBATAddGroupOverlay": {"version": "FNC", "tags": "", "description": "Register texture(s) to be displayed over CfgORBAT group.", "example": "[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1\", \"\\A3\\weapons_f\\data\\UI\\icon_MG_CA.paa\", [0,0,01], 3, 3, 0, \"Some Text\", true] call BIS_fnc_ORBATAddGroupOverlay;", "docSyntax": "[target, texture, colour, widthMulti, heightMulti, angle, text, shadow] call BIS_fnc_ORBATAddGroupOverlay", "syntax": "[<object>,<string>,colour,widthMulti,heightMulti,angle,<string>,shadow] call BIS_fnc_ORBATAddGroupOverlay"}, "BIS_fnc_ORBATAnimate": {"version": "FNC", "tags": "", "description": "Animates an ORBAT viewer.", "example": "[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1\", 0.5, 3] spawn BIS_fnc_ORBATAnimate;", "docSyntax": "[target, zoom, duration] spawn BIS_fnc_ORBATAnimate", "syntax": "[<object>,<scalar>,duration] spawn BIS_fnc_ORBATAnimate"}, "BIS_fnc_ORBATConfigPreview": {"version": "FNC", "tags": "", "description": "Opens config viewer and shows CfgORBAT. Used to retrieve CfgOrbat data", "example": "[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1\"] call BIS_fnc_ORBATConfigPreview;", "docSyntax": "[class] call BIS_fnc_ORBATConfigPreview", "syntax": "[class] call BIS_fnc_ORBATConfigPreview"}, "BIS_fnc_ORBATGetGroupParams": {"version": "FNC", "tags": "", "description": "Returns group params from CfgORBAT.", "example": "[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1\"] call BIS_fnc_ORBATGetGroupParams;", "docSyntax": "[path] call BIS_fnc_ORBATGetGroupParams", "syntax": "[path] call BIS_fnc_ORBATGetGroupParams"}, "BIS_fnc_ORBATOpen": {"version": "FNC", "tags": "", "description": "Opens the ORBAT Viewer.", "example": "[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"O_Brigade\", findDisplay 46, [], 4, [\"ConfigClass_1\", { systemChat \"ConfigClass_1\" }]] call BIS_fnc_ORBATOpen;", "docSyntax": "[path, display, tags, numTiers, parameters] call BIS_fnc_ORBATOpen", "syntax": "[path,<uiDisplay>,tags,numTiers,parameters] call BIS_fnc_ORBATOpen"}, "BIS_fnc_ORBATRemoveGroupOverlay": {"version": "FNC", "tags": "", "description": "Unregister texture(s) to be displayed over CfgORBAT group.", "example": "[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"O_Brigade\", 4] call BIS_fnc_ORBATRemoveGroupOverlay;", "docSyntax": "[path, number] call BIS_fnc_ORBATRemoveGroupOverlay", "syntax": "[path,<scalar>] call BIS_fnc_ORBATRemoveGroupOverlay"}, "BIS_fnc_ORBATSetGroupFade": {"version": "FNC", "tags": "", "description": "Set fade value of CfgORBAT group and all groups below it.", "example": "[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"O_Brigade\", 0.5, 5] call BIS_fnc_ORBATSetGroupFade;", "docSyntax": "[path, alpha, time] call BIS_fnc_ORBATSetGroupFade", "syntax": "[path,alpha,<scalar>] call BIS_fnc_ORBATSetGroupFade"}, "BIS_fnc_ORBATSetGroupParams": {"version": "FNC", "tags": "", "description": "Overrides group params from CfgORBAT. See ORBAT Viewer for a detailed explanation.", "example": "[ configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1\", 1, \"Platoon\", \"Infantry\", \"West\", \"Name: %1 %2 %3\", \"Short Name: %1 %2 %3\", \"b_air\", 3, \"\\A3\\Air_F_EPB\\Heli_Light_03\\data\\UI\\Heli_Light_03_CA.paa\", [0,0,0,1], \"Commander Name\", \"General\", \"Description\", [[\"B_MRAP_01_F\",5]] ] call BIS_fnc_ORBATSetGroupParams;", "docSyntax": "[target, idType, size, type, side, name, shortName, texture, textSizeCoef, insignia, textColour, commName, commRank, description, assets] call BIS_fnc_ORBATSetGroupParams", "syntax": "[<object>,idType,size,type,<objSide>,<string>,shortName,<string>,textSizeCoef,insignia,textColour,commName,commRank,description,assets] call BIS_fnc_ORBATSetGroupParams"}, "BIS_fnc_ORBATTooltip": {"version": "FNC", "tags": "", "description": "Animates an ORBAT viewer.", "docSyntax": "[target, control, position] call BIS_fnc_ORBATTooltip", "syntax": "[<object>,<uiControl>,position] call BIS_fnc_ORBATTooltip"}, "BIS_fnc_ordinalNumber": {"version": "FNC", "tags": "", "description": "Return number as ordinal number (e.g. 1 become \"1st\")", "example": "private _second = [42] call BIS_fnc_ordinalNumber; //\u00a0will return \"42nd\" for English-speaking players", "docSyntax": "[number, language, isFeminine] call BIS_fnc_ordinalNumber", "syntax": "[<scalar>,language,isFeminine] call BIS_fnc_ordinalNumber"}, "BIS_fnc_overviewAuthor": {"version": "FNC", "tags": "", "description": "Returns the mission author's name preceded by \"by\", e.g \"by Username\". See Description.ext - author.", "example": "hint format [\"%1, %2\", briefingName, call BIS_fnc_overviewAuthor];", "docSyntax": "[config, control] call BIS_fnc_overviewAuthor", "syntax": "[config,<uiControl>] call BIS_fnc_overviewAuthor"}, "BIS_fnc_overviewDifficulty": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_overviewMission": {"version": "FNC", "tags": "", "description": "#define CONTROL_SHOW(CONTROL) \\ CONTROL ctrlshow true; \\ CONTROL ctrlsetfade 0; \\ CONTROL ctrlcommit 0; #define CONTROL_HIDE(CONTROL) \\ CONTROL ctrlshow false; \\ CONTROL ctrlsetfade 1; \\ CONTROL ctrlcommit 0;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_overviewTerrain": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_overviewTimeTrial": {"version": "FNC", "tags": "", "description": "Returns the dynamically composed overview text for Time Trial scenarios.", "example": "\"BIS_someTimeTrail\" call BIS_fnc_overviewTimeTrial;", "docSyntax": "class call BIS_fnc_overviewTimeTrial", "syntax": "class call BIS_fnc_overviewTimeTrial"}, "BIS_fnc_packStaticWeapon": {"version": "FNC", "tags": "", "description": "This function will make weapon team pack a static weapon. The weapon crew will pack carried weapon (or given weapon if different) and follow leader. Requires three personnel in the team: Team Leader, Gunner and Asst. Gunner. This function is MP compatible", "example": "[leader1] call BIS_fnc_packStaticWeapon;", "docSyntax": "[group, weapon, leaderPos] call BIS_fnc_packStaticWeapon", "syntax": "[<objGroup>,<string>,<array>] call BIS_fnc_packStaticWeapon"}, "BIS_fnc_param": {"version": "FNC", "tags": "", "description": "Load a script parameter. See Arma 3: Functions Library for detailed description.", "example": "_target = [_this, 0, objNull, [objNull,[]], [2,3]] call BIS_fnc_param;", "docSyntax": "[input, index, defaultValue, dataTypes, requiredCount] call BIS_fnc_param", "syntax": "[input,<scalar>,defaultValue,dataTypes,requiredCount] call BIS_fnc_param"}, "BIS_fnc_paramCountdown": {"version": "FNC", "tags": "", "description": "Set side mission time.", "example": "360 call BIS_fnc_paramCountdown;", "docSyntax": "number call BIS_fnc_paramCountdown", "syntax": "<scalar> call BIS_fnc_paramCountdown"}, "BIS_fnc_paramDaytime": {"version": "FNC", "tags": "", "description": "Sets time of the day to the hour. Minutes will always be zero.", "example": "private _date = 12 call BIS_fnc_paramDaytime;", "docSyntax": "datetime call BIS_fnc_paramDaytime", "syntax": "datetime call BIS_fnc_paramDaytime"}, "BIS_fnc_paramGuerFriendly": {"version": "FNC", "tags": "", "description": "Set relationship between Independents and remaining sides.", "example": "2 call BIS_fnc_paramGuerFriendly;", "docSyntax": "number call BIS_fnc_paramGuerFriendly", "syntax": "<scalar> call BIS_fnc_paramGuerFriendly"}, "BIS_fnc_paramIn": {"version": "FNC", "tags": "", "description": "See BIS_fnc_param. Overloading default values is disabled in this variant. It's intended to be used where _this is not used as an input param.", "example": "private _array = [_this, 0, [], [[]]] call BIS_fnc_param; _item = [_array,0,true,[true]] call BIS_fnc_paramIn;", "docSyntax": "See BIS_fnc_param", "syntax": "See BIS_fnc_param"}, "BIS_fnc_paramRespawnTickets": {"version": "FNC", "tags": "", "description": "Set side respawn tickets.", "example": "360 call BIS_fnc_paramRespawnTickets;", "docSyntax": "number call BIS_fnc_paramRespawnTickets", "syntax": "<scalar> call BIS_fnc_paramRespawnTickets"}, "BIS_fnc_paramReviveBleedOutDuration": {"version": "FNC", "tags": "", "description": "Grabs server param into global variable. (bis_reviveParam_bleedOutDuration)", "example": "call BIS_fnc_paramReviveBleedOutDuration;", "docSyntax": "call BIS_fnc_paramReviveBleedOutDuration", "syntax": "call BIS_fnc_paramReviveBleedOutDuration"}, "BIS_fnc_paramReviveDuration": {"version": "FNC", "tags": "", "description": "Grabs server param into global variable. (bis_reviveParam_duration)", "example": "call BIS_fnc_paramReviveDuration;", "docSyntax": "call BIS_fnc_paramReviveDuration", "syntax": "call BIS_fnc_paramReviveDuration"}, "BIS_fnc_paramReviveForceRespawnDuration": {"version": "FNC", "tags": "", "description": "Grabs server param into global variable. (bis_reviveParam_forceRespawnDuration)", "example": "call BIS_fnc_paramReviveForceRespawnDuration;", "docSyntax": "call BIS_fnc_paramReviveForceRespawnDuration", "syntax": "call BIS_fnc_paramReviveForceRespawnDuration"}, "BIS_fnc_paramReviveMedicSpeedMultiplier": {"version": "FNC", "tags": "", "description": "Grabs server param into global variable. (bis_reviveParam_medicSpeedMultiplier)", "example": "call BIS_fnc_paramReviveMedicSpeedMultiplier;", "docSyntax": "call BIS_fnc_paramReviveMedicSpeedMultiplier", "syntax": "call BIS_fnc_paramReviveMedicSpeedMultiplier"}, "BIS_fnc_paramReviveMode": {"version": "FNC", "tags": "", "description": "Grabs server param into global variable. (bis_reviveParam_mode)", "example": "call BIS_fnc_paramReviveMode;", "docSyntax": "call BIS_fnc_paramReviveMode", "syntax": "call BIS_fnc_paramReviveMode"}, "BIS_fnc_paramReviveRequiredItems": {"version": "FNC", "tags": "", "description": "Grabs server param into global variable. (bis_reviveParam_requiredItems)", "example": "call BIS_fnc_paramReviveRequiredItems;", "docSyntax": "call BIS_fnc_paramReviveRequiredItems", "syntax": "call BIS_fnc_paramReviveRequiredItems"}, "BIS_fnc_paramReviveRequiredTrait": {"version": "FNC", "tags": "", "description": "Grabs server param into global variable. (bis_reviveParam_requiredTrait)", "example": "call BIS_fnc_paramReviveRequiredTrait;", "docSyntax": "call BIS_fnc_paramReviveRequiredTrait", "syntax": "call BIS_fnc_paramReviveRequiredTrait"}, "BIS_fnc_paramReviveUnconsciousStateMode": {"version": "FNC", "tags": "", "description": "Grabs server param into global variable. (bis_reviveParam_unconsciousStateMode)", "example": "call BIS_fnc_paramReviveUnconsciousStateMode;", "docSyntax": "call BIS_fnc_paramReviveUnconsciousStateMode", "syntax": "call BIS_fnc_paramReviveUnconsciousStateMode"}, "BIS_fnc_paramTimeAcceleration": {"version": "FNC", "tags": "", "description": "Manages setTimeMultiplier Multiplayer setting (set with paramTimeAcceleration.hpp)", "example": "5 call BIS_fnc_paramTimeAcceleration;", "docSyntax": "timeMultiplier call BIS_fnc_paramTimeAcceleration", "syntax": "timeMultiplier call BIS_fnc_paramTimeAcceleration"}, "BIS_fnc_paramViewDistance": {"version": "FNC", "tags": "", "description": "Set view distance.", "example": "7500 call BIS_fnc_paramViewDistance;", "docSyntax": "viewDistance call BIS_fnc_paramViewDistance", "syntax": "viewDistance call BIS_fnc_paramViewDistance"}, "BIS_fnc_paramWeather": {"version": "FNC", "tags": "", "description": "Sets overcast using BIS_fnc_setOvercast.", "example": "overCastValue = [1] call BIS_fnc_paramWeather;", "docSyntax": "[0] call BIS_fnc_paramWeather", "syntax": "[0] call BIS_fnc_paramWeather"}, "BIS_fnc_parseNumber": {"version": "FNC", "tags": "", "description": "Return number from expression", "example": "private _result = 7.62 call BIS_fnc_parseNumber; _result = \"7.62\" call BIS_fnc_parseNumber; _result = { 7.62 } call BIS_fnc_parseNumber;", "docSyntax": "value call BIS_fnc_parseNumber", "syntax": "<scalar> call BIS_fnc_parseNumber"}, "BIS_fnc_parseNumberSafe": {"version": "FNC", "tags": "", "description": "Converts expression into a number. Can also convert array of expressions into an array of numbers. If expression does not return a number, 0 is returned.", "example": "[safeZoneX, safeZoneWAbs, configFile] call BIS_fnc_parseNumberSafe; //\u00a0returns [-0.452381,1.90476,0]", "docSyntax": "[input] call BIS_fnc_parseNumberSafe", "syntax": "[input] call BIS_fnc_parseNumberSafe"}, "BIS_fnc_phoneticalWord": {"version": "FNC", "tags": "", "description": "Convert number to NATO phonetical alphabet word (e.g. 2 becomes \"Bravo\") or letter of alphabet.", "example": "[1] call BIS_fnc_phoneticalWord; //\u00a0returns \"Alpha\"", "docSyntax": "[integer, short] call BIS_fnc_phoneticalWord", "syntax": "[integer,short] call BIS_fnc_phoneticalWord"}, "BIS_fnc_PIP": {"version": "FNC", "tags": "", "description": "Displays Picture in Picture.", "example": "[\"rendertarget0\", [heli1, heli1 selectionPosition \"slingload0\"], cargo1], heli1, false] call BIS_fnc_PIP;", "docSyntax": "[renderTarget, cameraParams, vehicle, replace] call BIS_fnc_PIP", "syntax": "[renderTarget,cameraParams,<objVehicle>,replace] call BIS_fnc_PIP"}, "BIS_fnc_planeAiEject": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This function is designed as part of set of functions to implement semi-authenthic ejection system on fixed wing aircrfat that have such functionality enabled/configured. - AI behaviour handler. Exucution: - Call the function via attached EH to the aircrfat itself. Example: class Eventhandlers\u00a0: Eventhandlers { Hit = \"_this call BIS_fnc_planeAiEject\"; }; Requirments: - Compatible aircrfat must have a config definition for all subsytems that will be invoked by ejection system (see BIS_fnc_PlaneEjection). Parameter(s): _this select 0: mode (Scalar) 0: plane/object Returns: nothing Result: AI pilot will be forced to eject from aircrfat upon damage treshold reached. Semi-authenthic behaviour. */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_planeEjection": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This function is designed to implement semi-authenthic ejection system on fixed wing aircrfat that have such functionality enabled/configured. Exucution: - Call the function via user action added to the aircrfat itself. class Plane_Eject_UserActionExample { priority = 0.05; shortcut = \"Eject\"; displayName = \"$STR_A3_action_eject\"; condition = \"player in this\"; statement = \"[this] spawn BIS_fnc_planeEjection\"; position = \"pilotcontrol\"; radius = 10; onlyforplayer = 1; showWindow = 0; hideOnUse = 1; }; Requirments: - Compatible aircrfat must have a config definition for all sub-sytems that will be invoked by this function. 1. Old legacy ejection must be disabled in aircrfat's cfgVehicles configuration. driverCanEject = 0; gunnerCanEject = 0; cargoCanEject = 0; 2. Aircrfat must have a set of parameters defined in CfgVehicles subClass (EjectionSystem) for ejection system. Theese parameters will affect the ejection behaviour. example of cfgVehicles subclass definitions; class EjectionSystem { EjectionSeatEnabled = 1; //enable advanced ejection system EjectionDual = 0; //currently only single seat aircraft ejectiion supported (to do for latter) EjectionSeatClass = \"B_Ejection_Seat_Plane_Fighter_01_F\"; //class name of ejector seat to use (separate vehicle/object) CanopyClass = \"Plane_Fighter_01_Canopy_F\"; //class name of canopy to use (separate vehicle/object) EjectionSeatHideAnim = \"ejection_seat_hide\"; //name of the hide animation that will hide ejector seat mesh in plane EjectionSeatRailAnim = \"ejection_seat_motion\"; //name of the animation that will be played to start a smooth ejection motion out of cockpit CanopyHideAnim = \"canopy_hide\"; //name of the hide animation that will hide canopy mesh in plane EjectionSeatPos = \"pos_eject\"; //position memory point whwre to attach ejector seat CanopyPos = \"pos_eject_canopy\"; //position memory point where to attach dummy canopy EjectionSoundExt = \"Plane_Fighter_01_ejection_ext_sound\"; //sound to play when ejection trigered (external) EjectionSoundInt = \"Plane_Fighter_01_ejection_in_sound\"; //sound to play when ejection trigered (in-ternal) EjectionParachute = \"Steerable_Parachute_F\"; //class name parachute used in ejection EjectionSeatForce = 50; //ejection seat blast force CanopyForce = 30; //canopy bast force }; 3. Aircrfat model must have momory points definig positions where to attach new vehicle ejector seat, new vehicle canopy. 4. Aircrfat model (in model cfg & class AnimationSources) must have a set of hide animations defined to hide ejector seat and canopy in model when new seaparate vehicles are spawned. In model.cfg class canopy_hide { type=\"hide\"; source=\"user\"; selection=\"canopy_hide\"; minValue = 0.0; maxValue = 1.0; minPhase = 0.0; maxPhase = 1.0; initPhase = 0; hideValue = 0.001; }; class ejection_seat_hide { type=\"hide\"; source=\"user\"; selection=\"ejection_seat\"; minValue = 0.0; maxValue = 1.0; minPhase = 0.0; maxPhase = 1.0; initPhase = 0; hideValue = 0.001; } In cfgVehicles >> class AnimationSources class canopy_hide { source = \"user\"; animPeriod = 0.001; initPhase = 0; }; class ejection_seat_hide { source = \"user\"; animPeriod = 0.001; initPhase = 0; }; 5. Aircrfat model must have an animation for initial ejection stage, where new ejector seat with pilot is pushed gradualy out of cockpit (done to avaoid PhysX colisions and make this feature look good, rathre than spawnig ejetor seat above plane). New ejector seat with pilot will be attached to this animation (via animated meory point). Memory point EjectionSeatPos must be part of this animated selection. In model.cfg class ejection_seat_motion { type = \"translation\"; source = \"user\"; selection = \"ejection_seat\"; begin = \"tns_ejection_seat\"; end = \"tns_ejection_seat_e\"; animPeriod = 0; memory = 1; minValue = 0.0; maxValue = 1.0; offset0 = 0.0; offset1 = 3.0; }; In cfgVehicles >> class AnimationSources class ejection_seat_motion { source = \"user\"; animPeriod = 0.25; initPhase = 0; }; 6. Ejector seat and canopy must be created/defined as separate objects. Can be reused. Parameter(s): _this select 0: mode (Scalar) 0: plane/object other parameters are gathered from configuration files. Returns: nothing Result: Pilot will be ejected from aircraft. Semi-authenthic behaviour. */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_planeEjectionFX": {"version": "FNC", "tags": "", "description": "/* Author: Bravo Zero One development - John_Spartan Description: - This function is designed as part of set of functions to implement semi-authenthic ejection system on fixed wing aircrfat that have such functionality enabled/configured. - Function created to add FX (sound/particles) for ejection feature. Exucution: - Call from within the main ejection fnc (on demand). Example: [_plane, _ejectionSeat] spawn BIS_fnc_planeEjectionFX; Requirments: - Compatible ejector seat must have a hide animation for rocket motor flash and position for FX to be attached. (TO DO PARAMETARIZE) Inehector seats model.cfg class Animations { class Rocket_Flash_hide { type = \"hide\"; source = \"user\"; selection = \"rocket_flash\"; sourceAddress = \"mirror\"; minValue = -1.5; maxValue = 0; hideValue = 0.99; }; }; Parameter(s): _this select 0: mode (Scalar) 0: plane/object 1: ejector seat/object Returns: nothing Result: Set of particle FX and sound FX will be aplied to ejection feature. */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_playEndMusic": {"version": "FNC", "tags": "", "description": "Play mission end music (when it is nearing the end)", "example": "true call BIS_fnc_playEndMusic;", "docSyntax": "play call BIS_fnc_playEndMusic", "syntax": "play call BIS_fnc_playEndMusic"}, "BIS_fnc_playerName": {"version": "FNC", "tags": "", "description": "Return current profile's name. Deprecated since Arma 3, use profileName instead.", "example": "private _myPlayerName = call BIS_fnc_playerName;", "docSyntax": "call BIS_fnc_playerName", "syntax": "call BIS_fnc_playerName"}, "BIS_fnc_playerSideFaction": {"version": "FNC", "tags": "", "description": "Return representative faction of the given side. Faction of the first detected player is used.", "example": "west call BIS_fnc_playerSideFaction;", "docSyntax": "side call BIS_fnc_playerSideFaction", "syntax": "<objSide> call BIS_fnc_playerSideFaction"}, "BIS_fnc_playMusic": {"version": "FNC", "tags": "", "description": "Plays given song.", "example": "[\"LeadTrack04_F\", 10, 0.5] call BIS_fnc_playMusic; //\u00a0song starts at 10 seconds with 50% volume.", "docSyntax": "[class,start,volume] call BIS_fnc_playMusic", "syntax": "[class,start,volume] call BIS_fnc_playMusic"}, "BIS_fnc_playSound": {"version": "FNC", "tags": "", "description": "Plays given sound. Identical to playSound.", "example": "\"3DEN_visionMode\" call BIS_fnc_playSound;", "docSyntax": "[sound, forced] call BIS_fnc_playSound", "syntax": "[sound,forced] call BIS_fnc_playSound"}, "BIS_fnc_playVideo": {"version": "FNC", "tags": "", "description": "Plays in-game video with a range of options. The function can be called or spawned. If spawned, scriptDone command can be used to see if video is stopped or finished. If called in scheduled environment, the next line of code will not process until the video is stopped or finished.", "example": "private _video = [\"A3\\Missions_F_EPA\\video\\A_in_intro.ogv\"] spawn BIS_fnc_playVideo;", "docSyntax": "[content, size, color, skipVarName, bgColor, keepAspect] spawn BIS_fnc_playVideo", "syntax": "[content,size,<scalar>,skipVarName,bgColor,keepAspect] spawn BIS_fnc_playVideo"}, "BIS_fnc_posDegToUTM": {"version": "FNC", "tags": "", "description": "Generate a UTM Zone, Easting and Northing from lat and long fields. It uses NAD83 constants.", "example": "private _utmZone = [47.63959,-122.127249] call BIS_fnc_posDegToUTM;", "docSyntax": "[longitude, latitude, zone] call BIS_fnc_posDegToUTM", "syntax": "[longitude,latitude,zone] call BIS_fnc_posDegToUTM"}, "BIS_fnc_posDegToWorld": {"version": "FNC", "tags": "", "description": "Convert latitude/longtitude coordinates into game world position.", "example": "[47.63959,-122.127249] call BIS_fnc_posDegToWorld;", "docSyntax": "[longitude, latitude, world] call BIS_fnc_posDegToWorld", "syntax": "[longitude,latitude,world] call BIS_fnc_posDegToWorld"}, "BIS_fnc_position": {"version": "FNC", "tags": "", "description": "Returns PositionAGL, unless passed argument is Array, then the same array is returned. When position is Object and alternative position is stored in \"BIS_fnc_position_forced\" variable on this object, the stored position is used rather than actual object position. This function is a pretty safe way to get the position of an entity.", "example": "private _pos = player call BIS_fnc_position;", "docSyntax": "argument call BIS_fnc_position", "syntax": "argument call BIS_fnc_position"}, "BIS_fnc_posToGrid": {"version": "FNC", "tags": "", "description": "Converts array position to map grid position.", "example": "player call BIS_fnc_posToGrid; //\u00a0[\"046\", \"049\"]", "docSyntax": "element call BIS_fnc_posToGrid", "syntax": "element call BIS_fnc_posToGrid"}, "BIS_fnc_posUTMToDeg": {"version": "FNC", "tags": "", "description": "Generate Lat and Long fields from UTM Zone, Easting and Northing. It uses NAD83 constants.", "example": "[5273702, 560561, 10] call BIS_fnc_posUTMToDeg;", "docSyntax": "[easting, northing, zone, hemisphere] call BIS_fnc_posUTMToDeg", "syntax": "[easting,northing,zone,hemisphere] call BIS_fnc_posUTMToDeg"}, "BIS_fnc_pow": {"version": "FNC", "tags": "", "description": "Return value1 raised to the power of value2. Identical to a ^ b.", "example": "[2, 10] call BIS_fnc_pow; //\u00a0returns 2^10 = 1024", "docSyntax": "[value1, value2] call BIS_fnc_pow", "syntax": "[value1,value2] call BIS_fnc_pow"}, "BIS_fnc_preload": {"version": "FNC", "tags": "", "description": "Start automatic loading screen upon mission start. On client, it will finish only when server is finished.", "example": "call BIS_fnc_preload;", "docSyntax": "call BIS_fnc_preload", "syntax": "call BIS_fnc_preload"}, "BIS_fnc_prepareAO": {"version": "FNC", "tags": "", "description": "Spawns random patrols and/or vehicles in trigger areas with proper names. Side selected in the triggers \"Activation\" listbox will determine the side of the spawned asset(s).", "example": "0.75 call BIS_fnc_prepareAO;", "docSyntax": "density call BIS_fnc_prepareAO", "syntax": "density call BIS_fnc_prepareAO"}, "BIS_fnc_priorityQueue_GetHighestPriority": {"version": "FNC", "tags": "", "description": "/* Author: Zozo Description: Get the highest priority in the queue Parameters: _handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init) Returns: _priority:SCALAR - the priority Syntax: _item:ANY = [_handle] call BIS_fnc_PriorityQueue_GetHighestPriority; Example: _myItem = [_priorityQueue_1] call BIS_fnc_PriorityQueue_PopItem; */", "docSyntax": "[] call BIS_fnc_priorityQueue_GetHighestPriority", "syntax": "[] call BIS_fnc_priorityQueue_GetHighestPriority"}, "BIS_fnc_priorityQueue_GetLowestPriority": {"version": "FNC", "tags": "", "description": "/* Author: Zozo Description: Get the highest priority in the queue Parameters: _handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init) Returns: _priority:SCALAR - the priority Syntax: _item:ANY = [_handle] call BIS_fnc_PriorityQueue_GetHighestPriority; Example: _myItem = [_priorityQueue_1] call BIS_fnc_PriorityQueue_PopItem; */", "docSyntax": "[] call BIS_fnc_priorityQueue_GetLowestPriority", "syntax": "[] call BIS_fnc_priorityQueue_GetLowestPriority"}, "BIS_fnc_priorityQueue_Init": {"version": "FNC", "tags": "", "description": "/* Author: Zozo Description: Initialize the Priority Queue data structure. The Priority Queue is sorted on inserting. Bigger numbers are set on higher indexes. Parameters: _maxSize:INT - OPTIONAL, sets the Queue MAX SIZE (otherwise it is set to the constant defined in the .inc file) Returns: _handle: Handle to the Queue (essential for manipulation with the Queue) Syntax: _handle:INT = [_maxSize] call BIS_fnc_PriorityQueue_Init; Example: _priorityQueue_1 = [10] call BIS_fnc_PriorityQueue_Init; *", "docSyntax": "[] call BIS_fnc_priorityQueue_Init", "syntax": "[] call BIS_fnc_priorityQueue_Init"}, "BIS_fnc_priorityQueue_IsEmpty": {"version": "FNC", "tags": "", "description": "/* Author: Zozo Description: Checks if the Queue is empty Parameters: _handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init) Returns: _empty:BOOL - true if the Queue is empty Syntax: _empty:BOOL = [_handle] call BIS_fnc_PriorityQueue_IsEmpty; Example: _isTheQueueEmpty = [_priorityQueue_1] call BIS_fnc_PriorityQueue_IsEmpty; *", "docSyntax": "[] call BIS_fnc_priorityQueue_IsEmpty", "syntax": "[] call BIS_fnc_priorityQueue_IsEmpty"}, "BIS_fnc_priorityQueue_IsFull": {"version": "FNC", "tags": "", "description": "/* Author: Zozo Description: Checks if the Queue is full Parameters: _handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init) Returns: _full:BOOL - true if the Queue is full Syntax: _full:BOOL = [_handle] call BIS_fnc_PriorityQueue_IsFull; Example: _isTheQueueFull = [_priorityQueue_1] call BIS_fnc_PriorityQueue_IsFull; */", "docSyntax": "[] call BIS_fnc_priorityQueue_IsFull", "syntax": "[] call BIS_fnc_priorityQueue_IsFull"}, "BIS_fnc_priorityQueue_PopItem": {"version": "FNC", "tags": "", "description": "/* Author: Zozo Description: Pops the item with the highest priority from the Queue (item with highest index). The item is removed from the Queue. Complexity: O(1) Parameters: _handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init) _keep:BOOL - if true, the item is not removed from the Queue Returns: _item:ANY - the item stored in the Queue Syntax: _item:ANY = [_handle] call BIS_fnc_PriorityQueue_PopItem; Example: _myItem = [_priorityQueue_1] call BIS_fnc_PriorityQueue_PopItem; *", "docSyntax": "[] call BIS_fnc_priorityQueue_PopItem", "syntax": "[] call BIS_fnc_priorityQueue_PopItem"}, "BIS_fnc_priorityQueue_PushItem": {"version": "FNC", "tags": "", "description": "/* Author: Zozo Description: Inserts item with a defined priority to the Queue The Priority Queue is sorted on inserting. Bigger numbers are set on higher indexes. Complexity: O(n) Parameters: _handle:INT - Queue handle (get it with BIS_fnc_PriorityQueue_Init) _item:ANY - item, can be whatever _priority:INT - the priority the item is inserted with Returns: _success:BOOL - true if item was inserted into the Queue, otherwise false Syntax: _success:BOOL = [_handle, _item, _priority] call BIS_fnc_PriorityQueue_InsertItem; Example: _s = [_priorityQueue_1, \"myItem\", 5] call BIS_fnc_PriorityQueue_InsertItem; *", "docSyntax": "[] call BIS_fnc_priorityQueue_PushItem", "syntax": "[] call BIS_fnc_priorityQueue_PushItem"}, "BIS_fnc_progressLoadingScreen": {"version": "FNC", "tags": "", "description": "Progress scripted loading screen. The value will be preserved even when a new screen is opened.", "example": "private _IDD = _prog = [0.75] call BIS_fnc_progressLoadingScreen;", "docSyntax": "[progress] call BIS_fnc_progressLoadingScreen", "syntax": "[progress] call BIS_fnc_progressLoadingScreen"}, "BIS_fnc_pulsate": {"version": "FNC", "tags": "", "description": "Pulsates a value from 0 to 1.", "example": "200 call BIS_fnc_pulsate; //\u00a00.113001", "docSyntax": "[frequency] call BIS_fnc_pulsate", "syntax": "[frequency] call BIS_fnc_pulsate"}, "BIS_fnc_quinticIn": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_quinticIn", "syntax": "[] call BIS_fnc_quinticIn"}, "BIS_fnc_quinticInOut": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_quinticInOut", "syntax": "[] call BIS_fnc_quinticInOut"}, "BIS_fnc_quinticInOutVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_quinticInOutVector", "syntax": "[] call BIS_fnc_quinticInOutVector"}, "BIS_fnc_quinticInVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_quinticInVector", "syntax": "[] call BIS_fnc_quinticInVector"}, "BIS_fnc_quinticOut": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_quinticOut", "syntax": "[] call BIS_fnc_quinticOut"}, "BIS_fnc_quinticOutVector": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_quinticOutVector", "syntax": "[] call BIS_fnc_quinticOutVector"}, "BIS_fnc_quotations": {"version": "FNC", "tags": "", "description": "Display a quotation video.", "example": "[\"a3\\missions_f_mark\\video\\ffv.ogv\"] spawn BIS_fnc_quotations;", "docSyntax": "[videoPath, subtitle] call BIS_fnc_quotations", "syntax": "[videoPath,subtitle] call BIS_fnc_quotations"}, "BIS_fnc_radialRed": {"version": "FNC", "tags": "", "description": "Red radial postprocess (hit damage, fire damage). Parameters are the same as the first four of HandleDamage EH.", "example": "player addEventHandler [\"HandleDamage\", { _this call BIS_fnc_radialRed; }];", "docSyntax": "[victim, bodyPart, damage, shooter] call BIS_fnc_radialRed", "syntax": "[victim,bodyPart,<scalar>,shooter] call BIS_fnc_radialRed"}, "BIS_fnc_radialRedOut": {"version": "FNC", "tags": "", "description": "Removes red radial postprocess (fire damage) created by BIS_fnc_radialRed.", "example": "call BIS_fnc_radialRedOut;", "docSyntax": "call BIS_fnc_radialRedOut", "syntax": "call BIS_fnc_radialRedOut"}, "BIS_fnc_radioSetChannel": {"version": "FNC", "tags": "", "description": "/* Description: Set a specific or random music channel. Parameter(s): _this select 0: channel (String) _this select 1: next (Bool) _this select 2: override (Bool) Returns: Bool */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_radioSetPlaylist": {"version": "FNC", "tags": "", "description": "Set a random music playlist for the current set channel (default \"Rock\"). Musics with \"genre\" set in CfgMusic are selected and shuffled.", "example": "call BIS_fnc_radioSetPlaylist;", "docSyntax": "call BIS_fnc_radioSetPlaylist", "syntax": "call BIS_fnc_radioSetPlaylist"}, "BIS_fnc_radioSetTrack": {"version": "FNC", "tags": "", "description": "/* Description: Set a specific or random music track. Parameter(s): _this select 0: track (String) _this select 1: override (Bool) _this select 2: Bool (first track? -> start randomly within the track) Returns: Array (duration (s): Scalar, start time (s): Scalar) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_randomIndex": {"version": "FNC", "tags": "", "description": "Return a random integer representing an index in the passed array.", "example": "[\"a\", 0, objNull] call BIS_fnc_randomIndex; //\u00a0returns 0, 1 or 2", "docSyntax": "array call BIS_fnc_randomIndex", "syntax": "<array> call BIS_fnc_randomIndex"}, "BIS_fnc_randomInt": {"version": "FNC", "tags": "", "description": "Returns a random integer between the two passed numbers (inclusive). The order of parameters doesn't matter: it can be [min, max] or [max, min].", "example": "[1, 3] call BIS_fnc_randomInt; //\u00a0will return 1, 2 or 3", "docSyntax": "[min, max] call BIS_fnc_randomInt", "syntax": "[min,max] call BIS_fnc_randomInt"}, "BIS_fnc_randomNum": {"version": "FNC", "tags": "", "description": "Returns a random (float) number between the two passed numbers. The order of parameters doesn't matter: it can be [min, max] or [max, min].", "example": "[1, 3] call BIS_fnc_randomNum; //\u00a0return a number between 1 and 3, including 1", "docSyntax": "[min, max] call BIS_fnc_randomNum", "syntax": "[min,max] call BIS_fnc_randomNum"}, "BIS_fnc_randomPos": {"version": "FNC", "tags": "", "description": "Selects random position according to given params within given area", "example": "private _randomPosMapNoWater = [] call BIS_fnc_randomPos;", "docSyntax": "[whitelist, blacklist, code] call BIS_fnc_randomPos", "syntax": "[whitelist,blacklist,<code>] call BIS_fnc_randomPos"}, "BIS_fnc_randomPosIntersection": {"version": "FNC", "tags": "", "description": "Returns random 2D position inside the intersection of two circles. [-1,-1] is returned if the circles do not intersect.", "example": "[trigger1, trigger2, 0.75, 0.75] call BIS_fnc_randomPosIntersection;", "docSyntax": "[firstCircle, secondCircle, positioning1, positioning2] call BIS_fnc_randomPosIntersection", "syntax": "[firstCircle,secondCircle,positioning1,positioning2] call BIS_fnc_randomPosIntersection"}, "BIS_fnc_randomPosTrigger": {"version": "FNC", "tags": "", "description": "Selects random position within trigger, marker, location area or area defined by array", "example": "marker1 call BIS_fnc_randomPosTrigger;", "docSyntax": "param call BIS_fnc_randomPosTrigger", "syntax": "param call BIS_fnc_randomPosTrigger"}, "BIS_fnc_rankParams": {"version": "FNC", "tags": "", "description": "Return information about military rank. 1: STRING - requited data, can be one of following: \"displayName\" - full localized name (e.g. \"Major\") \"displayNameShort\" - short localized name (e.g. \"Maj.\") \"classname\" - system name (e.g. \"MAJOR\") \"texture\" - path to rank insignia", "example": "private _shortRank = [player, \"displayNameShort\"] call BIS_fnc_rankParams;", "docSyntax": "[source, infoType] call BIS_fnc_rankParams", "syntax": "[source,infoType] call BIS_fnc_rankParams"}, "BIS_fnc_recompile": {"version": "FNC", "tags": "", "description": "Can be used to recompile functions.", "example": "[] call BIS_fnc_recompile;", "docSyntax": "[mode] call BIS_fnc_recompile", "syntax": "[mode] call BIS_fnc_recompile"}, "BIS_fnc_reenableRevive": {"version": "FNC", "tags": "", "description": "Enable revive on given unit. Revive system needs to be initialized and running.", "example": "[BIS_unit] call BIS_fnc_reenableRevive;", "docSyntax": "[player] call BIS_fnc_reenableRevive", "syntax": "[<objUnit>] call BIS_fnc_reenableRevive"}, "BIS_fnc_refreshCommMenu": {"version": "FNC", "tags": "", "description": "Refresh the communication menu variable.", "example": "call BIS_fnc_refreshCommMenu;", "docSyntax": "call BIS_fnc_refreshCommMenu", "syntax": "call BIS_fnc_refreshCommMenu"}, "BIS_fnc_registerCuratorObject": {"version": "FNC", "tags": "", "description": "Get individual cost of an object.", "example": "[\"someClass\", true, 5] call BIS_fnc_registerCuratorObject;", "docSyntax": "[class, status, cost] call BIS_fnc_registerCuratorObject", "syntax": "[class,status,cost] call BIS_fnc_registerCuratorObject"}, "BIS_fnc_relativeDirTo": {"version": "FNC", "tags": "", "description": "Returns the relative direction from object 1 to object/position 2. Return value is always in between 0 and 360.", "example": "[[0,0,0], player] call BIS_fnc_relativeDirTo;", "docSyntax": "[from, to] call BIS_fnc_relativeDirTo", "syntax": "[from,to] call BIS_fnc_relativeDirTo"}, "BIS_fnc_relPos": {"version": "FNC", "tags": "", "description": "Returns a position that is a specified distance and compass direction from the passed position or object.", "example": "[[0,0,0], 1000, 50] call BIS_fnc_relPos; //\u00a0[766.044,642.788,0]", "docSyntax": "[origin, distance, direction] call BIS_fnc_relPos", "syntax": "[origin,<scalar>,direction] call BIS_fnc_relPos"}, "BIS_fnc_relPosObject": {"version": "FNC", "tags": "", "description": "Place an object relative to another object, like a setRelPos command.", "example": "[BIS_briefingTable, BIS_map, [0, -0.58, 0.857], 98] call BIS_fnc_relPosObject;", "docSyntax": "[parent, child, relPos, direction] call BIS_fnc_relPosObject", "syntax": "[parent,child,relPos,direction] call BIS_fnc_relPosObject"}, "BIS_fnc_relScaledDist": {"version": "FNC", "tags": "", "description": "Exponentially inflated rational number between 0 and 1, with 1 being center and 0 being edge of the trigger. This function can be used to check where in a trigger area an object is. Is it near the border of the trigger area the number will go against 0.", "example": "[myTrigger, player] call BIS_fnc_relScaledDist;", "docSyntax": "[referenceObject, relativeObject] call BIS_fnc_relScaledDist", "syntax": "[referenceObject,relativeObject] call BIS_fnc_relScaledDist"}, "BIS_fnc_removeAllScriptedEventHandlers": {"version": "FNC", "tags": "", "description": "Removes all scripted event handler with given name. Additionally \"ScriptedEventHandlerRemoved\" scripted EH is called for every removed event handler.", "example": "[missionNamespace, \"event\"] call BIS_fnc_removeAllScriptedEventHandlers;", "docSyntax": "[namespace, name] call BIS_fnc_removeAllScriptedEventHandlers", "syntax": "[namespace,<string>] call BIS_fnc_removeAllScriptedEventHandlers"}, "BIS_fnc_removeCommMenuItem": {"version": "FNC", "tags": "", "description": "Remove an item from the communication menu.", "example": "[player, 2] call BIS_fnc_removeCommMenuItem;", "docSyntax": "[owner,itemID] call BIS_fnc_removeCommMenuItem", "syntax": "[owner,itemID] call BIS_fnc_removeCommMenuItem"}, "BIS_fnc_removeCuratorIcon": {"version": "FNC", "tags": "", "description": "Remove icon displayed in curator interface.", "example": "[curatorModule, 5] call BIS_fnc_removeCuratorIcon;", "docSyntax": "[object, id] call BIS_fnc_removeCuratorIcon", "syntax": "[<object>,<scalar>] call BIS_fnc_removeCuratorIcon"}, "BIS_fnc_removeDestroyedCuratorEditableObjects": {"version": "FNC", "tags": "", "description": "Make destroyed curator objects non-editable.", "example": "[curatorModule, [\"Man\"]] call BIS_fnc_removeDestroyedCuratorEditableObjects;", "docSyntax": "[object, parentClasses] call BIS_fnc_removeDestroyedCuratorEditableObjects", "syntax": "[<object>,parentClasses] call BIS_fnc_removeDestroyedCuratorEditableObjects"}, "BIS_fnc_removeFromPairs": {"version": "FNC", "tags": "", "description": "Removes an item from pair array modifying the original array. This can be overridden by setting _copyArray to true.", "example": "private _pairs = [[[\"apple\", 3], [\"pear\", 2]], \"pear\"]; [_pairs, \"pear\", true] call BIS_fnc_removeFromPairs; //\u00a0returns \"apple\", 3 - _pairs is not modified [_pairs, \"pear\"] call BIS_fnc_removeFromPairs; //\u00a0returns \"apple\", 3 - _pairs is now \"apple\", 3", "docSyntax": "[array, key, copyArray] call BIS_fnc_removeFromPairs", "syntax": "[<array>,key,copyArray] call BIS_fnc_removeFromPairs"}, "BIS_fnc_removeIndex": {"version": "FNC", "tags": "", "description": "Takes an array, and returns a new array with the specified index(es) removed. This takes the array passed in the first parameter, and returns an array that has the index number in the second parameter removed. If a third parameter is passed, then a range of indexes will be removed. Alternatively, an array of indices to remove can be passed in the second parameter.", "example": "private _array = [0,1,2,3,4]; [array, 0] call BIS_fnc_removeIndex; //\u00a0returns [1,2,3,4]", "docSyntax": "[array, startIndex, endIndex] call BIS_fnc_removeIndex", "syntax": "[<array>,startIndex,endIndex] call BIS_fnc_removeIndex"}, "BIS_fnc_removeNestedElement": {"version": "FNC", "tags": "", "description": "Function to remove an item in a nested array. Modifies the array by reference.", "example": "private _array = [[1, 2], [3, 3, 4]]; private _success = [_array, 3] call BIS_fnc_removeNestedElement; //\u00a0_array is now [[1, 2], [4]]", "docSyntax": "[array, itemToRemove] call BIS_fnc_removeNestedElement", "syntax": "[<array>,itemToRemove] call BIS_fnc_removeNestedElement"}, "BIS_fnc_removeRespawnInventory": {"version": "FNC", "tags": "", "description": "Remove a respawn inventory added by BIS_fnc_addRespawnInventory.", "example": "[west, 1] call BIS_fnc_removeRespawnInventory;", "docSyntax": "[target, id] call BIS_fnc_removeRespawnInventory", "syntax": "[<object>,<scalar>] call BIS_fnc_removeRespawnInventory"}, "BIS_fnc_removeRespawnPosition": {"version": "FNC", "tags": "", "description": "Remove a respawn position added by BIS_fnc_addRespawnPosition.", "example": "[west, 1] call BIS_fnc_removeRespawnPosition;", "docSyntax": "[target, id] call BIS_fnc_removeRespawnPosition", "syntax": "[<object>,<scalar>] call BIS_fnc_removeRespawnPosition"}, "BIS_fnc_removeScriptedEventHandler": {"version": "FNC", "tags": "", "description": "Removes scripted event handler with given name and id. Additionally \"ScriptedEventHandlerRemoved\" scripted EH is called.", "example": "[missionNamespace, \"event\", 2] call BIS_fnc_removeScriptedEventHandler;", "docSyntax": "[namespace, name, id] call BIS_fnc_removeScriptedEventHandler", "syntax": "[namespace,<string>,<scalar>] call BIS_fnc_removeScriptedEventHandler"}, "BIS_fnc_removeStackedEventHandler": {"version": "FNC", "tags": "", "description": "Removes a stacked event handler with specified custom id.", "example": "[\"someId\", \"onEachFrame\"] call BIS_fnc_removeStackedEventHandler;", "docSyntax": "[id, event] call BIS_fnc_removeStackedEventHandler", "syntax": "[<scalar>,event] call BIS_fnc_removeStackedEventHandler"}, "BIS_fnc_removeSupportLink": {"version": "FNC", "tags": "", "description": "Removes support types during a mission.", "example": "[requesterMod, providerMod] call BIS_fnc_removeSupportLink;", "docSyntax": "[requester, provider] call BIS_fnc_removeSupportLink", "syntax": "[requester,provider] call BIS_fnc_removeSupportLink"}, "BIS_fnc_removeVirtualBackpackCargo": {"version": "FNC", "tags": "", "description": "Remove virtual backpacks from an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "[BIS_ammoBox, [\"class_1\",\"class_2\"], true] call BIS_fnc_removeVirtualBackpackCargo;", "docSyntax": "[object,backpackClasses,removeGlobally] call BIS_fnc_removeVirtualBackpackCargo", "syntax": "[<object>,backpackClasses,removeGlobally] call BIS_fnc_removeVirtualBackpackCargo"}, "BIS_fnc_removeVirtualItemCargo": {"version": "FNC", "tags": "", "description": "Remove virtual items from an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "[BIS_ammoBox, [\"class_1\",\"class_2\"], true] call BIS_fnc_removeVirtualItemCargo;", "docSyntax": "[object,itemClasses,removeGlobally] call BIS_fnc_removeVirtualItemCargo", "syntax": "[<object>,itemClasses,removeGlobally] call BIS_fnc_removeVirtualItemCargo"}, "BIS_fnc_removeVirtualMagazineCargo": {"version": "FNC", "tags": "", "description": "Remove virtual magazines from an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "[BIS_ammoBox, [\"class_1\",\"class_2\"], true] call BIS_fnc_removeVirtualMagazineCargo;", "docSyntax": "[object,magClasses,removeGlobally] call BIS_fnc_removeVirtualMagazineCargo", "syntax": "[<object>,magClasses,removeGlobally] call BIS_fnc_removeVirtualMagazineCargo"}, "BIS_fnc_removeVirtualWeaponCargo": {"version": "FNC", "tags": "", "description": "Remove virtual weapons from an object (e.g., ammo box). Virtual items can be selected in the Arsenal.", "example": "[BIS_ammoBox, [\"class_1\",\"class_2\"], true] call BIS_fnc_removeVirtualWeaponCargo;", "docSyntax": "[object,weaponClasses,removeGlobally] call BIS_fnc_removeVirtualWeaponCargo", "syntax": "[<object>,weaponClasses,removeGlobally] call BIS_fnc_removeVirtualWeaponCargo"}, "BIS_fnc_replaceWithSimpleObject": {"version": "FNC", "tags": "", "description": "Replaces a normal object with a Simple Object. Object must not contain any crew and must be placed on the ground.", "example": "[tank] call BIS_fnc_replaceWithSimpleObject;", "docSyntax": "[object] call BIS_fnc_replaceWithSimpleObject", "syntax": "[<object>] call BIS_fnc_replaceWithSimpleObject"}, "BIS_fnc_resizeMarker": {"version": "FNC", "tags": "", "description": "Resize marker. Use either absolute values or proportional values.", "example": "[\"BIS_marker\",[2,2],3] spawn BIS_fnc_resizeMarker;", "docSyntax": "[marker, size, duration] spawn BIS_fnc_resizeMarker", "syntax": "[marker,size,duration] spawn BIS_fnc_resizeMarker"}, "BIS_fnc_respawnBackpack": {"version": "FNC", "tags": "", "description": "Handles respawn camps functionality. Whoever \"assembles\" a camp from backpack it will receive a new respawn position. When backpack object has 'respawnNearbyPlayers' attribute set to 1, nearby players will receive the respawn position as well.", "example": "-", "docSyntax": "[] call BIS_fnc_respawnBackpack", "syntax": "[] call BIS_fnc_respawnBackpack"}, "BIS_fnc_respawnBase": {"version": "FNC", "tags": "", "description": "\u24d8", "example": "-", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_respawnConfirm": {"version": "FNC", "tags": "", "description": "Shows a message box which the user needs to accept in order to respawn.", "example": "[3] spawn BIS_fnc_respawnConfirm;", "docSyntax": "[respawnDelay] spawn BIS_fnc_respawnConfirm", "syntax": "[respawnDelay] spawn BIS_fnc_respawnConfirm"}, "BIS_fnc_respawnCounter": {"version": "FNC", "tags": "", "description": "Set or execute respawn counter params.", "example": "[\"Some text\", 2] call BIS_fnc_respawnCounter;", "docSyntax": "[text,colour] call BIS_fnc_respawnCounter", "syntax": "[<string>,colour] call BIS_fnc_respawnCounter"}, "BIS_fnc_respawnEndMission": {"version": "FNC", "tags": "", "description": "End a mission if all players are dead and there are no more respawn tickets (if any).", "example": "call BIS_fnc_respawnEndMission;", "docSyntax": "call BIS_fnc_respawnEndMission", "syntax": "call BIS_fnc_respawnEndMission"}, "BIS_fnc_respawnGroup": {"version": "FNC", "tags": "", "description": "Camera script used by the \"group respawn\" template - when the player dies and gets transferred to the new group member.", "example": "//\u00a0in onPlayerRespawn.sqf params [\"_newUnit\", \"_oldUnit\", \"_respawn\", \"_respawnDelay\"]; [_oldUnit, _newUnit] spawn BIS_fnc_respawnGroup;", "docSyntax": "[oldUnit, newUnit] call BIS_fnc_respawnGroup", "syntax": "[oldUnit,newUnit] call BIS_fnc_respawnGroup"}, "BIS_fnc_respawnInstant": {"version": "FNC", "tags": "", "description": "\u24d8", "example": "-", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_respawnManager": {"version": "FNC", "tags": "", "description": "/******************************************************************************* Version: 2.0 Name: Respawn manager DESCRIPTION: All checkpoints must be markers with name prefix BIS_checkpointnr PARAMETERS: 1) function called - string, list of functions: - Init - Destroy - AddCheckpoint - RemoveCheckpoint 2) parameter for the function For more information see https://wiki.bistudio.com/index.php/RespawnManager RETURNED VALUE: depends on the function called TODO: -performance: add markers positions to the array instead of the testing their positions every loop in _CheckNearestCheckpoint function - DONE -pridat funkci GetActualCheckpoint(character) - DONE -osetrit pripad, kdy postava neexistuje (je prave v respawnu/zahynula) - NEPOTREBUJEME -typy markeru podle modu: normal/debug - DONE -optional parameter marker name - DONE -optional prefix marker name as a parameter to the Init procedure -add functionality for 3 parameters function call - DONE -vlastni lokalni checkpointy(markery) pro hratelne postavy(AddCheckpoint/RemoveCheckpoint) *******************************************************************************/", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_respawnMenuInventory": {"version": "FNC", "tags": "", "description": "Handles respawn inventory menu.", "example": "[player,5] call BIS_fnc_respawnMenuInventory;", "docSyntax": "[player, respawnDelay, revive] call BIS_fnc_respawnMenuInventory", "syntax": "[<objUnit>,respawnDelay,revive] call BIS_fnc_respawnMenuInventory"}, "BIS_fnc_respawnMenuPosition": {"version": "FNC", "tags": "", "description": "Shows respawn menu. Closes it if the player is alive.", "example": "[player,5] call BIS_fnc_respawnMenuPosition;", "docSyntax": "[player, respawnDelay, revive] call BIS_fnc_respawnMenuPosition", "syntax": "[<objUnit>,respawnDelay,revive] call BIS_fnc_respawnMenuPosition"}, "BIS_fnc_respawnMenuSpectator": {"version": "FNC", "tags": "", "description": "Handles the spectator mode.", "example": "[player,5] call BIS_fnc_respawnMenuSpectator;", "docSyntax": "[player, respawnDelay] call BIS_fnc_respawnMenuSpectator", "syntax": "[<objUnit>,respawnDelay] call BIS_fnc_respawnMenuSpectator"}, "BIS_fnc_respawnNone": {"version": "FNC", "tags": "", "description": "Create a death screen.", "example": "[player, someUnit] spawn BIS_fnc_respawnNone;", "docSyntax": "[killed, killer] spawn BIS_fnc_respawnNone", "syntax": "[<objUnit>,<objUnit>] spawn BIS_fnc_respawnNone"}, "BIS_fnc_respawnRounds": {"version": "FNC", "tags": "", "description": "/* Description: Disable respawn until players of only one side (including its allies) remains, then respawn everyone at once. When \"Rounds\" respawn is used by only one side, wait until all its players are dead. Parameter(s): BOOL - true to force round end SIDE - use any side to return side affected by round system (based on description.ext respawnTemplates settings) ARRAY - empty array to return if a round is still on (players of more than one involved faction are alive) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_respawnSeagull": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_respawnSide": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_respawnSpectator": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_respawnTickets": {"version": "FNC", "tags": "", "description": "Manage respawn tickets used by Tickets respawn template.", "example": "Add 5 tickets for BLUFOR:", "docSyntax": "[target, tickets, dynamicTarget] call BIS_fnc_respawnTickets", "syntax": "[<object>,tickets,dynamicTarget] call BIS_fnc_respawnTickets"}, "BIS_fnc_respawnTimePenalty": {"version": "FNC", "tags": "", "description": "/* Description: Set or execute respawn time penalty Parameter(s): 0: CODE - penalty condition 1: NUMBER - penalty delay 2: TEXT - text displayed when penalty is in effect Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_respawnWave": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_respect": {"version": "FNC", "tags": "", "description": "RESpect - The Effective Calculation Process.", "docSyntax": "[mode, param1, param2, param3] call BIS_fnc_respect", "syntax": "[mode,param1,param2,param3] call BIS_fnc_respect"}, "BIS_fnc_returnChildren": {"version": "FNC", "tags": "", "description": "Returns all subclasses within given class.", "example": "[configFile >> \"CfgFunctions\", 2] call BIS_fnc_returnChildren; //\u00a0returns config paths of all functions", "docSyntax": "[config, depth, lastTier, firstTier] call BIS_fnc_returnChildren", "syntax": "[config,depth,lastTier,firstTier] call BIS_fnc_returnChildren"}, "BIS_fnc_returnConfigEntry": {"version": "FNC", "tags": "", "description": "Explores parent classes in the run-time config for the value of a config entry.", "example": "[configfile >> \"Cfg3DEN\" >> \"Attributes\" >> \"ActivationType\",\"idc\"] call BIS_fnc_returnConfigEntry;", "docSyntax": "[config,attribute,defaultValue] call BIS_fnc_returnConfigEntry", "syntax": "[config,attribute,defaultValue] call BIS_fnc_returnConfigEntry"}, "BIS_fnc_returnGroupComposition": {"version": "FNC", "tags": "", "description": "/* File: returnGroupComp.sqf Description: Function which returns a logical group composition based on a number of parameters. Parameter(s): _this select 0: side (Side). _this select 1: number of characters (Number). _this select 2: (optional) type (String): - \"riflesquad\": (default) standard rifle squad. - \"sniper\": sniper team. Returns: Array of Strings - object types. TODO: use CfgGroups instead? */ //Validate parameter count", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_returnNestedElement": {"version": "FNC", "tags": "", "description": "Function to return an item at a path in an array.", "example": "private _array = [[1, 2], [3, 4]]; _value = [_array, [0, 1]] call BIS_fnc_returnNestedElement; //\u00a0returns 2", "docSyntax": "[array, path] call BIS_fnc_returnNestedElement", "syntax": "[<array>,path] call BIS_fnc_returnNestedElement"}, "BIS_fnc_returnParents": {"version": "FNC", "tags": "", "description": "Returns list of all parent classes.", "example": "[configFile >> \"CfgVehicles\" >> \"Land_FirePlace_F\", true] call BIS_fnc_returnParents; //Returns [\"Land_FirePlace_F\",\"House_F\",\"House\",\"HouseBase\",\"NonStrategic\",\"Building\",\"Static\",\"All\"]", "docSyntax": "[config, onlyClassNames] call BIS_fnc_returnParents", "syntax": "[config,onlyClassNames] call BIS_fnc_returnParents"}, "BIS_fnc_returnVehicleTurrets": {"version": "FNC", "tags": "", "description": "Return the path to all turrets and sub-turrets in a vehicle.", "example": "[configFile >> \"CfgVehicles\" >> \"B_MBT_01_TUSK_F\"] call BIS_fnc_returnVehicleTurrets;", "docSyntax": "[configEntry] call BIS_fnc_returnVehicleTurrets", "syntax": "[configEntry] call BIS_fnc_returnVehicleTurrets"}, "BIS_fnc_reviveAllowed": {"version": "FNC", "tags": "", "description": "Returns true if unit is in general able to revive someone.", "example": "private _canRevive = [medic,target] call BIS_fnc_reviveAllowed;", "docSyntax": "[medic, unit] call BIS_fnc_reviveAllowed", "syntax": "[medic,<objUnit>] call BIS_fnc_reviveAllowed"}, "BIS_fnc_reviveBleedOut": {"version": "FNC", "tags": "", "description": "Make a unit bleed out over time while incapacitated.", "example": "[BIS_unit] call BIS_fnc_reviveBleedOut;", "docSyntax": "[player] call BIS_fnc_reviveBleedOut", "syntax": "[<objUnit>] call BIS_fnc_reviveBleedOut"}, "BIS_fnc_reviveDamageReset": {"version": "FNC", "tags": "", "description": "Resets player's damage data and recieved damage.", "example": "[player] call BIS_fnc_reviveDamageReset;", "docSyntax": "[player] call BIS_fnc_reviveDamageReset", "syntax": "[<objUnit>] call BIS_fnc_reviveDamageReset"}, "BIS_fnc_reviveDebug": {"version": "FNC", "tags": "", "description": "Debug script for revive system.", "example": "[1] call BIS_fnc_reviveDebug;", "docSyntax": "[mode] call BIS_fnc_reviveDebug", "syntax": "[mode] call BIS_fnc_reviveDebug"}, "BIS_fnc_reviveEhDammaged": {"version": "FNC", "tags": "", "description": "/* unit: Object - Object the event handler is assigned to hitSelection: String - Name of the selection where the unit was damaged damage: Number - Resulting level of damage hitPartIndex: Number - hit index of the hit selection hitPoint: String - hit point Cfg name shooter: Object - shooter reference (to get instigator use getShotParents on projectile) projectile: Object - the projectile that caused damage */", "docSyntax": "[] call BIS_fnc_reviveEhDammaged", "syntax": "[] call BIS_fnc_reviveEhDammaged"}, "BIS_fnc_reviveEhHandleDamage": {"version": "FNC", "tags": "", "description": "Should be excuted by HandleDamage event handler. See example. Handles damage calculation.", "example": "BIS_unit addEventHandler [\"HandleDamage\", { _this call BIS_fnc_reviveEhHandleDamage; }];", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_reviveEhHandleHeal": {"version": "FNC", "tags": "", "description": "Handles healing of unit. Unit gets fully healed after 10 seconds if current damage is smaller than initial damage, e.g. a medic healed the unit.", "example": "[BIS_unit] call BIS_fnc_reviveEhHandleHeal;", "docSyntax": "[unit] call BIS_fnc_reviveEhHandleHeal", "syntax": "[<objUnit>] call BIS_fnc_reviveEhHandleHeal"}, "BIS_fnc_reviveEhKilled": {"version": "FNC", "tags": "", "description": "Should be called from Killed event handler. Handles what happens if unit dies if revive system is enabled.", "example": "BIS_unit addEventHandler [\"Killed\", { _this call BIS_fnc_reviveEhKilled; }];", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_reviveEhRespawn": {"version": "FNC", "tags": "", "description": "Sets unit's state to respawned. Should probably only be called on respawn event.", "example": "BIS_unit call BIS_fnc_reviveEhRespawn;", "docSyntax": "[unit] call BIS_fnc_reviveEhRespawn", "syntax": "[<objUnit>] call BIS_fnc_reviveEhRespawn"}, "BIS_fnc_reviveEnabled": {"version": "FNC", "tags": "", "description": "Returns is revive is enabled or not for the unit.", "example": "private _reviveEnabled = [BIS_unit] call BIS_fnc_reviveEnabled;", "docSyntax": "[unit] call BIS_fnc_reviveEhRespawn", "syntax": "[<objUnit>] call BIS_fnc_reviveEhRespawn"}, "BIS_fnc_reviveGet3dIcons": {"version": "FNC", "tags": "", "description": "Returns structured text that can be displayed in 'Hold Action' tech as animated unconscious state icon.", "example": "private _structuredText = [BIS_unit] call BIS_fnc_reviveGet3dIcons;", "docSyntax": "[unit] call BIS_fnc_reviveGet3dIcons", "syntax": "[<objUnit>] call BIS_fnc_reviveGet3dIcons"}, "BIS_fnc_reviveGetActionIcon": {"version": "FNC", "tags": "", "description": "Returns structured text that can be displayed in 'Hold Action' tech as animated unconscious state icon.", "example": "private _structuredText = [BIS_unit] call BIS_fnc_reviveGetActionIcon;", "docSyntax": "[unit] call BIS_fnc_reviveGetActionIcon", "syntax": "[<objUnit>] call BIS_fnc_reviveGetActionIcon"}, "BIS_fnc_reviveIconControl": {"version": "FNC", "tags": "", "description": "Manage the adding, removing, and effects applied to 3D icons used for visualizing incapacitated units.", "docSyntax": "[mode, unitVar] call BIS_fnc_reviveIconControl", "syntax": "[mode,unitVar] call BIS_fnc_reviveIconControl"}, "BIS_fnc_reviveInit": {"version": "FNC", "tags": "", "description": "Initialize the Revive system on all machines.", "example": "call BIS_fnc_reviveInit;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_reviveIsValid": {"version": "FNC", "tags": "", "description": "Check if player can perform revive action on given unit.", "example": "[BIS_player] call BIS_fnc_reviveIsValid;", "docSyntax": "[unit] call BIS_fnc_reviveIsValid", "syntax": "[<objUnit>] call BIS_fnc_reviveIsValid"}, "BIS_fnc_reviveIsValidSecure": {"version": "FNC", "tags": "", "description": "Check if player can perform secure action on given unit.", "example": "[BIS_player] call BIS_fnc_reviveIsValidSecure;", "docSyntax": "[unit] call BIS_fnc_reviveIsValidSecure", "syntax": "[<objUnit>] call BIS_fnc_reviveIsValidSecure"}, "BIS_fnc_reviveOnBeingRevived": {"version": "FNC", "tags": "", "description": "Used to execute specific code locally on every client whenever \"being revived\" flag changes.", "example": "[nil, true, squadLeader] call BIS_fnc_reviveOnBeingRevived;", "docSyntax": "[nil, flagState, unit] call BIS_fnc_reviveOnBeingRevived", "syntax": "[nil,flagState,<objUnit>] call BIS_fnc_reviveOnBeingRevived"}, "BIS_fnc_reviveOnForcingRespawn": {"version": "FNC", "tags": "", "description": "/* Author: Jiri Wainar Description: Used to execute specific code localy on every client whenever 'forcing respawn' flag changes. Parameters: _this select 0: STRING - Variable that carries the 'being revived' flag over the network, defined by macro VAR_TRANSFER_FORCING_RESPAWN. _this select 1: BOOL - Flag state - true or false. _this select 2: OBJECT - Unit to set the flag for. Returns: True if successful, false if not. */", "docSyntax": "[] call BIS_fnc_reviveOnForcingRespawn", "syntax": "[] call BIS_fnc_reviveOnForcingRespawn"}, "BIS_fnc_reviveOnState": {"version": "FNC", "tags": "", "description": "/* Author: Jiri Wainar Description: Used to execute specific code localy on every client whenever unit's state changes. Parameters: _this select 0: STRING - Variable that carries the state value over the network, defined by macro VAR_TRANSFER_STATE. _this select 1: SCALAR - State. _this select 2: OBJECT - Unit to set the status for. Returns: True if successful, false if not. States: #define STATE_RESPAWNED 0 #define STATE_REVIVED 1 #define STATE_INCAPACITATED 2 #define STATE_DEAD 3 */", "example": "{ [objNull, 1, _x] call BIS_fnc_reviveOnState; } forEach (curatorSelected select 0);", "docSyntax": "[] call BIS_fnc_reviveOnState", "syntax": "[] call BIS_fnc_reviveOnState"}, "BIS_fnc_reviveOnStateJIP": {"version": "FNC", "tags": "", "description": "/* Author: Jiri Wainar Description: Used to execute state specific code localy on client that is JIPping. Parameters: _this select 0: STRING - Variable that carries the state value over the network, defined by macro VAR_TRANSFER_STATE. _this select 1: SCALAR - State. _this select 2: OBJECT - Unit to set the status for. Returns: True if successful, false if not. States: #define STATE_RESPAWNED 0 #define STATE_REVIVED 1 #define STATE_INCAPACITATED 2 #define STATE_DEAD 3 */", "docSyntax": "[] call BIS_fnc_reviveOnStateJIP", "syntax": "[] call BIS_fnc_reviveOnStateJIP"}, "BIS_fnc_reviveSecureUnit": {"version": "FNC", "tags": "", "description": "Make player secured (killed without execution penalties) by _source unit.", "example": "[player_1,player2] call BIS_fnc_reviveSecureUnit;", "docSyntax": "[unit, source] call BIS_fnc_reviveSecureUnit", "syntax": "[<objUnit>,source] call BIS_fnc_reviveSecureUnit"}, "BIS_fnc_richCurve_compute": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Computes curve data Parameter(s): _this select 0: Object - The curve _this select 1: Bool - Whether this is a forced computation (from on attributes changed and not from on drag) Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_compute", "syntax": "[] call BIS_fnc_richCurve_compute"}, "BIS_fnc_richCurve_computeCurveArcLength": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Computes curve arc lenght Parameter(s): _this select 0: Object - The curve Returns: Float - The curve arc length */", "docSyntax": "[] call BIS_fnc_richCurve_computeCurveArcLength", "syntax": "[] call BIS_fnc_richCurve_computeCurveArcLength"}, "BIS_fnc_richCurve_computeKeys": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's keys assigned to given curve Parameter(s): _this select 0: Object - The curve _this select 1: Bool - Whether or not to sort the keys by time Returns: Array - List of assigned keys */", "docSyntax": "[] call BIS_fnc_richCurve_computeKeys", "syntax": "[] call BIS_fnc_richCurve_computeKeys"}, "BIS_fnc_richCurve_computeOwnerTimeline": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Stores owner timeline Parameter(s): _this select 0: Object - The curve Returns: Object - The owner timeline object */", "docSyntax": "[] call BIS_fnc_richCurve_computeOwnerTimeline", "syntax": "[] call BIS_fnc_richCurve_computeOwnerTimeline"}, "BIS_fnc_richCurve_computeSimulatedObjects": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's all simulated objects Parameter(s): _this select 0: Object - The curve Returns: Array - List of objects simulated by given curve */", "docSyntax": "[] call BIS_fnc_richCurve_computeSimulatedObjects", "syntax": "[] call BIS_fnc_richCurve_computeSimulatedObjects"}, "BIS_fnc_richCurve_edenAttributesChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: 3DEN attributes of a curve change Parameter(s): _this select 0: Object - The curve Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_edenAttributesChanged", "syntax": "[] call BIS_fnc_richCurve_edenAttributesChanged"}, "BIS_fnc_richCurve_edenBakeCurve3D": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Bakes a curve to a set of points Parameter(s): _this select 0: Object - The curve _this select 1: Integer - The amount of segments for curve baking (higher numbers mean more detail but also a lot more cpu time) Returns: ARRAY - All the baked curve points */", "docSyntax": "[] call BIS_fnc_richCurve_edenBakeCurve3D", "syntax": "[] call BIS_fnc_richCurve_edenBakeCurve3D"}, "BIS_fnc_richCurve_edenComputeNearestSegment": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Computes the nearest baked segment from given 3D position Parameter(s): _this select 0: Object - The curve Returns: Array - The start and end vectors of segment */", "docSyntax": "[] call BIS_fnc_richCurve_edenComputeNearestSegment", "syntax": "[] call BIS_fnc_richCurve_edenComputeNearestSegment"}, "BIS_fnc_richCurve_edenConnectionChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: 3DEN connection of a curve change Parameter(s): _this select 0: Object - The curve Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_edenConnectionChanged", "syntax": "[] call BIS_fnc_richCurve_edenConnectionChanged"}, "BIS_fnc_richCurve_edenDragged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Entity is dragged in 3DEN Parameter(s): _this select 0: Object - The curve Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_edenDragged", "syntax": "[] call BIS_fnc_richCurve_edenDragged"}, "BIS_fnc_richCurve_edenDrawControlPoints3D": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Draws all control points of a curve Parameter(s): _this select 0: Curve - The curve _this select 1: Array - The color of the icons rendering Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_edenDrawControlPoints3D", "syntax": "[] call BIS_fnc_richCurve_edenDrawControlPoints3D"}, "BIS_fnc_richCurve_edenDrawCurve3D": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Draws a location curve in 3D Parameter(s): _this select 0: Array - The baked curve _this select 1: Array - The color of the curve rendering Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_edenDrawCurve3D", "syntax": "[] call BIS_fnc_richCurve_edenDrawCurve3D"}, "BIS_fnc_richCurve_edenIsSelected": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Whether given curve is selected in 3den Parameter(s): _this select 0: Object - The curve object Returns: Bool - True if selected, false if not */", "docSyntax": "[] call BIS_fnc_richCurve_edenIsSelected", "syntax": "[] call BIS_fnc_richCurve_edenIsSelected"}, "BIS_fnc_richCurve_edenMarkStateDirty": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Marks a curve state as dirty, so it knows it needs to recalculate For example, moving a key in EDEN Parameter(s): _this select 0: Object - The Curve Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_edenMarkStateDirty", "syntax": "[] call BIS_fnc_richCurve_edenMarkStateDirty"}, "BIS_fnc_richCurve_edenTick": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: 3DEN 3D drawing Parameter(s): _this select 0: Object - The curve Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_edenTick", "syntax": "[] call BIS_fnc_richCurve_edenTick"}, "BIS_fnc_richCurve_getCurveLength": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Calculates distance between all keys, returning the total length Parameter(s): _this select 0: Object - The curve Returns: Float - The curve length */", "docSyntax": "[] call BIS_fnc_richCurve_getCurveLength", "syntax": "[] call BIS_fnc_richCurve_getCurveLength"}, "BIS_fnc_richCurve_getCurvePoints": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the computed curve points Parameter(s): _this select 0: Object - The curve Returns: Array - The curve points (array of 3D vectors) */", "docSyntax": "[] call BIS_fnc_richCurve_getCurvePoints", "syntax": "[] call BIS_fnc_richCurve_getCurvePoints"}, "BIS_fnc_richCurve_getCurveValueFloat": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's curve value at given time Parameter(s): _this select 0: Object - The curve _this select 1: Float - The time _this select 2: Integer - Value type Returns: float - The value at given time */", "docSyntax": "[] call BIS_fnc_richCurve_getCurveValueFloat", "syntax": "[] call BIS_fnc_richCurve_getCurveValueFloat"}, "BIS_fnc_richCurve_getCurveValueVector": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's curve value at given time Parameter(s): _this select 0: Object - The curve _this select 1: Float - The time _this select 2: Integer - Value type Returns: Array - The vector value at given time */", "docSyntax": "[] call BIS_fnc_richCurve_getCurveValueVector", "syntax": "[] call BIS_fnc_richCurve_getCurveValueVector"}, "BIS_fnc_richCurve_getFirstKey": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's the first key on given curve Parameter(s): _this select 0: Object - The curve Returns: Object - The first key of given curve */", "docSyntax": "[] call BIS_fnc_richCurve_getFirstKey", "syntax": "[] call BIS_fnc_richCurve_getFirstKey"}, "BIS_fnc_richCurve_getKeyFromIndex": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's the key in given index of given curve Parameter(s): _this select 0: Object - The curve _this select 1: Integer - The key index Returns: Object - The key at given index */", "docSyntax": "[] call BIS_fnc_richCurve_getKeyFromIndex", "syntax": "[] call BIS_fnc_richCurve_getKeyFromIndex"}, "BIS_fnc_richCurve_getKeyIndex": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's the index of given key in given curve Parameter(s): _this select 0: Object - The curve _this select 1: Object - The key Returns: Integer - The index of the given key in given curve */", "docSyntax": "[] call BIS_fnc_richCurve_getKeyIndex", "syntax": "[] call BIS_fnc_richCurve_getKeyIndex"}, "BIS_fnc_richCurve_getKeys": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's keys assigned to given curve Parameter(s): _this select 0: Object - The curve Returns: Array - List of assigned keys */", "docSyntax": "[] call BIS_fnc_richCurve_getKeys", "syntax": "[] call BIS_fnc_richCurve_getKeys"}, "BIS_fnc_richCurve_getKeysAtTime": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's keys (prev / next) at given time Parameter(s): _this select 0: Object - The curve _this select 1: Float - The time Returns: Array - Previous and next keys */", "docSyntax": "[] call BIS_fnc_richCurve_getKeysAtTime", "syntax": "[] call BIS_fnc_richCurve_getKeysAtTime"}, "BIS_fnc_richCurve_getKeyTime": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns given key time in alpha Parameter(s): _this select 0: Object - The curve Returns: Float - The time in alpha of given key (from 0 to 1) */", "docSyntax": "[] call BIS_fnc_richCurve_getKeyTime", "syntax": "[] call BIS_fnc_richCurve_getKeyTime"}, "BIS_fnc_richCurve_getLastKey": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's the last key on given curve Parameter(s): _this select 0: Object - The curve Returns: Object - The last key of given curve */", "docSyntax": "[] call BIS_fnc_richCurve_getLastKey", "syntax": "[] call BIS_fnc_richCurve_getLastKey"}, "BIS_fnc_richCurve_getLookAtPosition": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns the look at position of this curve, [0.0, 0.0, 0.0] if not set Parameter(s): _this select 0: Object - The curve Returns: Array - Target position, [0.0, 0.0, 0.0] if not set */", "docSyntax": "[] call BIS_fnc_richCurve_getLookAtPosition", "syntax": "[] call BIS_fnc_richCurve_getLookAtPosition"}, "BIS_fnc_richCurve_getNextKey": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's the next key from given key, null if none exists Parameter(s): _this select 0: Object - The curve _this select 1: Object - The key Returns: Object - The next key */", "docSyntax": "[] call BIS_fnc_richCurve_getNextKey", "syntax": "[] call BIS_fnc_richCurve_getNextKey"}, "BIS_fnc_richCurve_getOrientationMode": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns orientation mode for objects animated by this curve Parameter(s): _this select 0: Object - The curve Returns: Integer - The mode (0 = None, 1 = Look At, 2 = Movement Direction) */", "docSyntax": "[] call BIS_fnc_richCurve_getOrientationMode", "syntax": "[] call BIS_fnc_richCurve_getOrientationMode"}, "BIS_fnc_richCurve_getOwnerTimeline": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns a curve's simulated objects Parameter(s): _this select 0: Object - The curve Returns: Object - The owner timeline object */", "docSyntax": "[] call BIS_fnc_richCurve_getOwnerTimeline", "syntax": "[] call BIS_fnc_richCurve_getOwnerTimeline"}, "BIS_fnc_richCurve_getPreviousKey": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Get's the previous key from given key, null if none exists Parameter(s): _this select 0: Object - The curve _this select 1: Object - The key Returns: Object - The previous key */", "docSyntax": "[] call BIS_fnc_richCurve_getPreviousKey", "syntax": "[] call BIS_fnc_richCurve_getPreviousKey"}, "BIS_fnc_richCurve_getSimulatedObjects": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns a curve's simulated objects Parameter(s): _this select 0: Object - The curve Returns: Array - List of objects simulated by given curve */", "docSyntax": "[] call BIS_fnc_richCurve_getSimulatedObjects", "syntax": "[] call BIS_fnc_richCurve_getSimulatedObjects"}, "BIS_fnc_richCurve_getTimeRange": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns min / max time range of given curve Parameter(s): _this select 0: Object - The curve Returns: Array - Min / Max time range */", "docSyntax": "[] call BIS_fnc_richCurve_getTimeRange", "syntax": "[] call BIS_fnc_richCurve_getTimeRange"}, "BIS_fnc_richCurve_isTimeInSeconds": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Whether the time of the keys belonging to this curve are in seconds Parameter(s): _this select 0: Object - The curve Returns: Bool - True if in seconds, false if in alpha */", "docSyntax": "[] call BIS_fnc_richCurve_isTimeInSeconds", "syntax": "[] call BIS_fnc_richCurve_isTimeInSeconds"}, "BIS_fnc_richCurve_numKeys": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Returns number of keys registered with given curve Parameter(s): _this select 0: Object - The curve Returns: Integer - Number of keys assigned to this curve */", "docSyntax": "[] call BIS_fnc_richCurve_numKeys", "syntax": "[] call BIS_fnc_richCurve_numKeys"}, "BIS_fnc_richCurve_reset": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Clears all curves (and deletes them) Parameter(s): _this select 0: Object - The curve Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_reset", "syntax": "[] call BIS_fnc_richCurve_reset"}, "BIS_fnc_richCurve_resetKeysEventState": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Reset's flag on all keys about handled events Parameter(s): _this select 0: Object - The curve Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_resetKeysEventState", "syntax": "[] call BIS_fnc_richCurve_resetKeysEventState"}, "BIS_fnc_richCurve_setKeys": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Set's keys assigned to given curve Parameter(s): _this select 0: Object - The curve _this select 1: Array - The keys Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_setKeys", "syntax": "[] call BIS_fnc_richCurve_setKeys"}, "BIS_fnc_richCurve_setOrientationMode": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Set's the curve's orientation mode Parameter(s): _this select 0: Object - The curve _this select 1: Integer - The orientation mode (0 = None / 1 = Animation / 2 = Look At / 3 = Movement Direction) Returns: Nothing */", "docSyntax": "[] call BIS_fnc_richCurve_setOrientationMode", "syntax": "[] call BIS_fnc_richCurve_setOrientationMode"}, "BIS_fnc_romanNumeral": {"version": "FNC", "tags": "", "description": "Convert integer to roman numerals (e.g. 42 becomes \"XLII\").", "example": "1 call BIS_fnc_romanNumeral; //\u00a0returns \"I\" 2035 call BIS_fnc_romanNumeral; //\u00a0returns \"MMXXXV\" 3999 call BIS_fnc_romanNumeral; //\u00a0returns \"MMMCMXCIX\"", "docSyntax": "integer call BIS_fnc_romanNumeral", "syntax": "integer call BIS_fnc_romanNumeral"}, "BIS_fnc_rotateMarker": {"version": "FNC", "tags": "", "description": "Rotating a marker to new azimuth, using shortest turn, clockwise or anticlockwise movement.", "example": "[\"BIS_marker\",90] spawn BIS_fnc_rotateMarker;", "docSyntax": "[marker, newAzimuth, absoluteOrRelativ, shortestTurn, duraton] spawn BIS_fnc_rotateMarker", "syntax": "[marker,newAzimuth,absoluteOrRelativ,shortestTurn,duraton] spawn BIS_fnc_rotateMarker"}, "BIS_fnc_rotateVector2D": {"version": "FNC", "tags": "", "description": "This function returns a 2D vector rotated a specified number of degrees around the origin.", "example": "[[5,3], 60] call BIS_fnc_rotateVector2D;//Returns[-0.0980766,5.83013]", "docSyntax": "[vector2D, angle] call BIS_fnc_rotateVector2D", "syntax": "[vector2D,angle] call BIS_fnc_rotateVector2D"}, "BIS_fnc_rotateVector3D": {"version": "FNC", "tags": "", "description": "Rotates the vector around the given axis by the given angle", "example": "[vectorDir player, 90, 2] call BIS_fnc_rotateVector3D;", "docSyntax": "[vector, angle, axis] call BIS_fnc_rotateVector3D", "syntax": "[vector,angle,axis] call BIS_fnc_rotateVector3D"}, "BIS_fnc_roundDir": {"version": "FNC", "tags": "", "description": "Round direction to nearest set rounding; used for determining cardinal direction.", "example": "player setDir ([getDir player, 45] call BIS_fnc_roundDir);", "docSyntax": "[rawDirection, rounding] call BIS_fnc_roundDir", "syntax": "[rawDirection,rounding] call BIS_fnc_roundDir"}, "BIS_fnc_roundNum": {"version": "FNC", "tags": "", "description": "Round a number to the provided factor.", "example": "[10.254,2,3] call BIS_fnc_roundNum;//Returns 9", "docSyntax": "[number, factor, secondary factor] call BIS_fnc_roundNum", "syntax": "[<scalar>,factor,secondary factor] call BIS_fnc_roundNum"}, "BIS_fnc_rscLayer": {"version": "FNC", "tags": "", "description": "Register RSC layer and returns a unique ID.", "example": "private _id = [\"myLayerName\"] call BIS_fnc_rscLayer;", "docSyntax": "[layerName] call BIS_fnc_rscLayer", "syntax": "[layerName] call BIS_fnc_rscLayer"}, "BIS_fnc_runLater": {"version": "FNC", "tags": "", "description": "Stack code/function that should be run later, after some time/frames or/and custom condition. Internally calls BIS_fnc_loop.", "example": "//\u00a0Hints current game time in the next frame after 5 seconds have passed [\"uniqueId\", { hint str time; }, 5] call BIS_fnc_runLater;", "docSyntax": "[id, code, timer, timerType, condition] call BIS_fnc_runLater", "syntax": "[<scalar>,<code>,timer,timerType,condition] call BIS_fnc_runLater"}, "BIS_fnc_sandstorm": {"version": "FNC", "tags": "", "description": "Creates particle sandstorm round given object.", "example": "[player, 0.04, 0.8, false] call BIS_fnc_sandstorm;", "docSyntax": "[object, interval, brightness, newspapers] call BIS_fnc_sandstorm", "syntax": "[<object>,interval,brightness,newspapers] call BIS_fnc_sandstorm"}, "BIS_fnc_saveGame": {"version": "FNC", "tags": "", "description": "Evaluates the current battlefield situation and saves the game when appropriate.", "example": "[unit_1, unit_2] call BIS_fnc_saveGame;", "docSyntax": "[objects] call BIS_fnc_saveGame", "syntax": "[objects] call BIS_fnc_saveGame"}, "BIS_fnc_saveInventory": {"version": "FNC", "tags": "", "description": "Save unit's loadout.", "example": "[player, [missionNamespace, \"BIS_inv\"], [], true] call BIS_fnc_saveInventory;", "docSyntax": "[unit,input,params,delete] call BIS_fnc_saveInventory", "syntax": "[<objUnit>,input,<any>,delete] call BIS_fnc_saveInventory"}, "BIS_fnc_saveVehicle": {"version": "FNC", "tags": "", "description": "Save vehicle's params (textures, animations, crew).", "example": "[BIS_tank, [missionNamespace, \"BIS_someTankSave\"], [\"SomeRandomParam\"], false] call BIS_fnc_saveVehicle;", "docSyntax": "[object,target,params,delete] call BIS_fnc_saveVehicle", "syntax": "[<object>,<object>,<any>,delete] call BIS_fnc_saveVehicle"}, "BIS_fnc_sayMessage": {"version": "FNC", "tags": "", "description": "Make a speaker say a message.", "example": "[leader player, \"to_c01_m01_brief_001_br_briefing_a_CENTAUR_0\", \"say3D\"] call BIS_fnc_sayMessage;", "docSyntax": "[speaker, message, channel] call BIS_fnc_sayMessage", "syntax": "[speaker,message,channel] call BIS_fnc_sayMessage"}, "BIS_fnc_scaleAndTranslate": {"version": "FNC", "tags": "", "description": "/* Author: Riccardo Argiolas Description: Translates and scales (with pivot) and fades a picture over time. Parameters: Select 0 - CONTROL: picture that has to be modified Select 1 - NUMBER: how much the picture has to be scaled (>1 makes it bigger, 1 keeps it the same, <1 makes it smaller) Select 2 - STRING: select the pivot's position (i.e. center of the scaling process) Select 3 - ARRAY: how much the picture has to be translated/moved in [X,Y] format Select 4 - NUMBER: either the duration of the animation(default) or the speed of the translation, depending on what the next parameter is set to. Select 5 - BOOL: true = duration will be used, false = speed will be used. Select 6 - NUMBER: transparency of the image at the end of the animation (1 = invisible) Returns: NUMBER: Duration of the animation. (Useful for determining how much sleep time is needed between animations) Examples: [_controlFront, 0.8, \"topLeft\"] call BIS_fnc_scaleAndTranslate; _t = [_controlFront, 1, \"bottomRight\", [0.1, 0.1], 0.5, false] call BIS_fnc_scaleAndTranslate; sleep (_t * 2); [_controlFront, 0.8, \"topRight\", [0.5, 0.3]] call BIS_fnc_scaleAndTranslate; */", "docSyntax": "[] call BIS_fnc_scaleAndTranslate", "syntax": "[] call BIS_fnc_scaleAndTranslate"}, "BIS_fnc_sceneAreaClearance": {"version": "FNC", "tags": "", "description": "Removes object clutter within a set trigger, for use within cutscenes.", "example": "[triggerArea1] spawn BIS_fnc_sceneAreaClearance;", "docSyntax": "[trigger, objects, destination] spawn BIS_fnc_sceneAreaClearance", "syntax": "[<objTrigger>,objects,destination] spawn BIS_fnc_sceneAreaClearance"}, "BIS_fnc_sceneCheckWeapons": {"version": "FNC", "tags": "", "description": "Checks if participants have not missing weapon or have not it selected before scene", "example": "[ [BIS_Cooper, \"primary\"], [BIS_Ohara, \"primary\"], [BIS_Rodriguez, \"primary\"], [BIS_Sykes, \"primary\"], [BIS_Miles, \"primary\"] ] call BIS_fnc_sceneCheckWeapons;", "docSyntax": "[participants] call BIS_fnc_sceneCheckWeapons", "syntax": "[participants] call BIS_fnc_sceneCheckWeapons"}, "BIS_fnc_sceneCreateSceneTrigger": {"version": "FNC", "tags": "", "description": "Create trigger for scene which can interrupt scene with name passed during creating the trigger. Scene name is saved in format BIS_SceneIntDetector%1 where %1 is sceneName.", "example": "[\"BIS_scene\", west, 5, 500, [1337,1337,0], false] call BIS_fnc_sceneCreateSceneTrigger;", "docSyntax": "[sceneName, side, timeout, triggerSize, triggerPosition] call BIS_fnc_sceneCreateSceneTrigger", "syntax": "[sceneName,<objSide>,timeout,triggerSize,triggerPosition] call BIS_fnc_sceneCreateSceneTrigger"}, "BIS_fnc_sceneCreateSoundEntities": {"version": "FNC", "tags": "", "description": "/******************************************************************************* * version: 1.0 * name: create sound entities * description: creates sound entities(logic objects) and attaches to * an objects passed as parameter * After scene end it will detach and delete all created * sound entities (if scene was executed from scenes * controller. * * paramater: objects - ARRAY of OBJECTS in format without \"BIS_\" * prefix. For example, if you have BIS_Cooper in mission * than parameter will be [Cooper]. Then you can use * created sound entities as BIS_ZvukCooper say \"something\" * * return value: nothing *", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_sceneGetObjects": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "[player, 20, \"Car\"] call BIS_fnc_sceneGetObjects;", "docSyntax": "[centre, radius, type] call BIS_fnc_sceneGetObjects", "syntax": "[centre,radius,type] call BIS_fnc_sceneGetObjects"}, "BIS_fnc_sceneGetParticipants": {"version": "FNC", "tags": "", "description": "gets members of unit's group who are in unit's range.", "example": "[player, 20] call BIS_fnc_sceneGetParticipants;", "docSyntax": "[unit, maxDistance] call BIS_fnc_sceneGetParticipants", "syntax": "[<objUnit>,maxDistance] call BIS_fnc_sceneGetParticipants"}, "BIS_fnc_sceneGetPositionByAngle": {"version": "FNC", "tags": "", "description": "/******************************************************************************* * * version: 1.0 * name: sceneGetPositionByAngle * description: returns new calculated position of object from angle and distance from specified object * parameters: described below * return value: array of new coordinates [x, y] *", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_sceneIntruderDetector": {"version": "FNC", "tags": "", "description": "Checks if there are intruders during scene. All intruders during scene will be disabled if they will get into the detector trigger. Checking is deactivated by passing", "example": "[[1337,1337,0],[42,42]] call BIS_fnc_sceneCreateSceneTrigger;", "docSyntax": "[sceneCenter, triggerSize] call BIS_fnc_sceneIntruderDetector", "syntax": "[sceneCenter,triggerSize] call BIS_fnc_sceneIntruderDetector"}, "BIS_fnc_sceneMiscStuff": {"version": "FNC", "tags": "", "description": "/********************************************************************* Version: 1.0 Name: sceneMiscStuff DESCRIPTION: Does the basic minor stuff for scene - cinema borders, map is denied etc. PARAMETERS: 1) _cameraPositions - [[cameraTarget],[cameraPos]] - Coordinates. If BIS_debugScene is true then external camera is activated 2) _skipInitBlackout - BOOL - if true, initial blackout is skipped 3) _skipFinalBlackout - BOOL - if true, final blackout is skipped 4) _noUseCheckTheWeapons - BOOL - if true, checking of weapon before scene is skipped 5) _noUseLoadingScreen - BOOL - if true, loadingscreen is bypassed 6) __excludedObjectsForIntruderDetector - ARRAY of objects - objects will be excluded from intruder detector RETURNED VALUE: **********************************************************************/", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_sceneRotate": {"version": "FNC", "tags": "", "description": "Compute new object coordinates from given center and angle from MOTION BUILDER", "example": "[[1337,1337,0], 42, 120, [200,200,0]] call BIS_fnc_sceneRotate; //\u00a0returns [[1337.15,1334.18,0],-258]", "docSyntax": "[center, centerAngle, angle, iniPosition] call BIS_fnc_sceneRotate", "syntax": "[center,centerAngle,angle,iniPosition] call BIS_fnc_sceneRotate"}, "BIS_fnc_sceneSetAnimationsForGroup": {"version": "FNC", "tags": "", "description": "Plays a range of animations for a specific set of units, intended for use during cutscenes.", "example": "private _setAnims = [group player, [\"AmovPercMstpSrasWrflDnon\"]] call BIS_fnc_sceneSetAnimationsForGroup;", "docSyntax": "param call BIS_fnc_sceneSetAnimationsForGroup", "syntax": "param call BIS_fnc_sceneSetAnimationsForGroup"}, "BIS_fnc_sceneSetBehaviour": {"version": "FNC", "tags": "", "description": "Enables / disables a specific set of AI units, usable for cutscenes.", "example": "[\"disableAI\", [unit1, player, unit2, unit3]] call BIS_fnc_sceneSetBehaviour;", "docSyntax": "param call BIS_fnc_sceneSetBehaviour", "syntax": "param call BIS_fnc_sceneSetBehaviour"}, "BIS_fnc_sceneSetObjects": {"version": "FNC", "tags": "", "description": "This function sets objects positions and direction relative to the chosen object.", "example": "[player, _arrayOfObjects, false] call BIS_fnc_sceneSetObjects;", "docSyntax": "[centre, objectsArray, applyOffset, stopped] call BIS_fnc_sceneSetObjects", "syntax": "[centre,objectsArray,applyOffset,stopped] call BIS_fnc_sceneSetObjects"}, "BIS_fnc_sceneSetPosFormation": {"version": "FNC", "tags": "", "description": "Adjusts units into a pre-determined formation, using a few variables. Part of S.C.E.N.E.S function group.", "example": "[units group player, bluforCommander, player, \"HALFCIRCLE\", 0] spawn BIS_fnc_sceneSetPosFormation;", "docSyntax": "param spawn BIS_fnc_sceneSetPosFormation", "syntax": "param spawn BIS_fnc_sceneSetPosFormation"}, "BIS_fnc_scriptedMove": {"version": "FNC", "tags": "", "description": "Forces a unit to turn towards and walk to provided destination(s). Will not work on player. When Group is used as argument, the function will be automatically executed for each unit in the group.", "example": "[myUnit, [getMarkerPos \"wp1\", getMarkerPos \"wp2\", getMarkerPos \"wp3\"]] call BIS_fnc_scriptedMove;", "docSyntax": "[unitOrGroup, waypoints, code, walkAnim, completionRadius, endAnim] call BIS_fnc_scriptedMove", "syntax": "[unitOrGroup,waypoints,<code>,walkAnim,completionRadius,endAnim] call BIS_fnc_scriptedMove"}, "BIS_fnc_scriptedWaypointType": {"version": "FNC", "tags": "", "description": "Return CfgWaypoints type of scripted waypoint. Returns empty string/config when waypoint is not scripted Returns \"Custom\"/CfgWaypoints root when waypoint is using custom script.", "example": "[BIS_scripted_WP_01,\"returnString\"] call BIS_fnc_scriptedWaypointType;", "docSyntax": "[waypoint,type] call BIS_fnc_scriptedWaypointType", "syntax": "[waypoint,type] call BIS_fnc_scriptedWaypointType"}, "BIS_fnc_secondsToString": {"version": "FNC", "tags": "", "description": "Convert seconds to formatted string.", "example": "hint format [\"Hi, it is currently %1.\", [time, \"HH:MM\"] call BIS_fnc_secondsToString];", "docSyntax": "[totalSeconds, format, returnArray] call BIS_fnc_secondsToString", "syntax": "[totalSeconds,format,returnArray] call BIS_fnc_secondsToString"}, "BIS_fnc_selectCrew": {"version": "FNC", "tags": "", "description": "Return an appropriate crew type for a certain vehicle.", "example": "private _crewType = [blufor, configFile >> \"CfgVehicles\" >> \"B_MRAP_01_F\"] call BIS_fnc_selectCrew;", "docSyntax": "[side, configEntry] call BIS_fnc_selectCrew", "syntax": "[<objSide>,configEntry] call BIS_fnc_selectCrew"}, "BIS_fnc_selectDiarySubject": {"version": "FNC", "tags": "", "description": "Selects a diary subject.", "example": "[\"someSubject\"] call BIS_fnc_selectDiarySubject;", "docSyntax": "[diaryName] call BIS_fnc_selectDiarySubject", "syntax": "[diaryName] call BIS_fnc_selectDiarySubject"}, "BIS_fnc_selectRandom": {"version": "FNC", "tags": "", "description": "Selects one of the arguments at random.", "example": "private _bestShooter = [_rento, _ben, _trit] call BIS_fnc_selectRandom; //\u00a0returns one of the variables _bestSeries = [[\"halo1\",\"halo2\"],[\"ofp\",\"arma2\"]] call BIS_fnc_selectRandom; //\u00a0returns one of the arrays", "docSyntax": "values call BIS_fnc_selectRandom", "syntax": "values call BIS_fnc_selectRandom"}, "BIS_fnc_selectRandomWeighted": {"version": "FNC", "tags": "", "description": "Selects a random item from an array, taking into account item weight.", "example": "[\"apples\",.3,\"pears\",.2,\"bananas\",.4,\"diamonds\",.1,\"unicorns\",.00001] call BIS_fnc_selectRandomWeighted;", "docSyntax": "itemsAndWeights call BIS_fnc_selectRandomWeighted", "syntax": "itemsAndWeights call BIS_fnc_selectRandomWeighted"}, "BIS_fnc_selectRespawnTemplate": {"version": "FNC", "tags": "", "description": "Select respawn template from CfgRespawnTemplates and execute its script / function. Internal use.", "example": "[\"playerKilledScript\", []] call BIS_fnc_selectRespawnTemplate;", "docSyntax": "[mode, arguments] call BIS_fnc_selectRespawnTemplate", "syntax": "[mode,arguments] call BIS_fnc_selectRespawnTemplate"}, "BIS_fnc_setCuratorAttributes": {"version": "FNC", "tags": "", "description": "/* Description: Set which attributes are available for given entity or entity type. Parameter(s): 0: OBJECT - curator 1: STRING - general setting for all entities of the given type, can be \"object\", \"player\", \"group', \"waypoint\" or \"marker\" OBJECT - setting for specific object, overrides general settings GROUP - setting for specific group, overrides general settings 2: ARRAY of STRINGs - attributes object: Skill UnitPos Rank Damage Fuel Lock RespawnVehicle RespawnPosition Exec group: GroupID Behaviour Formation waypoint: Behaviour Formation marker: MarkerText MarkerColor Returns: BOOL */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_setCuratorCamera": {"version": "FNC", "tags": "", "description": "Move curator camera to a position and direction. Finished when animation ends.", "example": "[nil, player, 5] spawn BIS_fnc_setCuratorCamera;", "docSyntax": "[camPos, targetPos, time] spawn BIS_fnc_setCuratorCamera", "syntax": "[camPos,targetPos,<scalar>] spawn BIS_fnc_setCuratorCamera"}, "BIS_fnc_setCuratorVisionModes": {"version": "FNC", "tags": "", "description": "Set which vision modes curator can access.", "example": "[BIS_curator,[-1,-2]] call BIS_fnc_setCuratorVisionModes;", "docSyntax": "[curator,mode] call BIS_fnc_setCuratorVisionModes", "syntax": "[curator,mode] call BIS_fnc_setCuratorVisionModes"}, "BIS_fnc_setCustomSoundController": {"version": "FNC", "tags": "", "description": "/* BIS_fnc_setCustomSoundController a: reyhard */", "docSyntax": "call BIS_fnc_setCustomSoundController", "syntax": "call BIS_fnc_setCustomSoundController"}, "BIS_fnc_setDate": {"version": "FNC", "tags": "", "description": "Instantly set date and share it across network with optional transition effect.", "example": "[[2035, 12, 31, 23, 59], true, true] call BIS_fnc_setDate;", "docSyntax": "[value, global, transition] call BIS_fnc_setDate", "syntax": "[<scalar>,global,transition] call BIS_fnc_setDate"}, "BIS_fnc_setFog": {"version": "FNC", "tags": "", "description": "Instantly set weather conditions and share it across network.", "example": "[1,1,100] call BIS_fnc_setFog; //\u00a0returns [1,1,100]", "docSyntax": "[strength, density, altitude] call BIS_fnc_setFog", "syntax": "[strength,density,<scalar>] call BIS_fnc_setFog"}, "BIS_fnc_setHeight": {"version": "FNC", "tags": "", "description": "Set an object's altitude.", "example": "//\u00a0will place player's vehicle on \"myHeightMarker\", 50m above terrain [vehicle player, 50, getMarkerPos \"myHeightMarker\", \"ATL\"] call BIS_fnc_setHeight;", "docSyntax": "[target, height, position, mode] call BIS_fnc_setHeight", "syntax": "[<object>,height,position,mode] call BIS_fnc_setHeight"}, "BIS_fnc_setHitPointDamage": {"version": "FNC", "tags": "", "description": "Sets damage to HitPoint with dependency or not.", "example": "[player, \"HitFace\", 0.9] call BIS_fnc_setHitPointDamage;", "docSyntax": "[object, hitPoint, damage, useDependency] call BIS_fnc_setHitPointDamage", "syntax": "[<object>,hitPoint,<scalar>,useDependency] call BIS_fnc_setHitPointDamage"}, "BIS_fnc_setIDCStreamFriendly": {"version": "FNC", "tags": "", "description": "Shows or hides UI control according to state of the Stream Friendly UI switch in Game Options.", "example": "[(findDisplay 1337) displayCtrl 42] call BIS_fnc_setIDCStreamFriendly;", "docSyntax": "[target,IDC] call BIS_fnc_setIDCStreamFriendly", "syntax": "[<object>,<scalar>] call BIS_fnc_setIDCStreamFriendly"}, "BIS_fnc_setIdentity": {"version": "FNC", "tags": "", "description": "Sets the unit's identity.", "example": "[player, \"Kerry\", \"Male01ENGB\", 1.05, \"Big Daddy\"] call BIS_fnc_setIdentity;", "docSyntax": "[object, face, speaker, pitch, callsign] call BIS_fnc_setIdentity", "syntax": "[<object>,face,speaker,pitch,callsign] call BIS_fnc_setIdentity"}, "BIS_fnc_setMissionStatusSlot": {"version": "FNC", "tags": "", "description": "Set a slot for mission status with sectors, respawn tickets, etc.", "docSyntax": "[id, text, texture, color, fade, position, barHeight] call BIS_fnc_setMissionStatusSlot", "syntax": "[<scalar>,<string>,<string>,<scalar>,fade,position,barHeight] call BIS_fnc_setMissionStatusSlot"}, "BIS_fnc_setNestedElement": {"version": "FNC", "tags": "", "description": "Function to set an item in a nested array using a path. Modifies the array by reference.", "example": "private _array = [[1, 2], [3, 4]]; _bool = [_array, [0, 0], 0] call BIS_fnc_setNestedElement; //\u00a0_array is now [[0, 2], [3, 4]]", "docSyntax": "[array, path, value] call BIS_fnc_setNestedElement", "syntax": "[<array>,path,<scalar>] call BIS_fnc_setNestedElement"}, "BIS_fnc_setObjectRotation": {"version": "FNC", "tags": "", "description": "Set object rotation.", "example": "[cursorObject, [100,100,100]] call BIS_fnc_setObjectRotation;", "docSyntax": "[object, rotation] call BIS_fnc_setObjectRotation", "syntax": "[<object>,<array>] call BIS_fnc_setObjectRotation"}, "BIS_fnc_setObjectShotParents": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_setObjectTexture": {"version": "FNC", "tags": "", "description": "Set object textures.", "example": "[player, \"#(rgb,8,8,3)color(0,0,1,1)\"] call BIS_fnc_setObjectTexture;", "docSyntax": "[object, textures] call BIS_fnc_setObjectTexture", "syntax": "[<object>,textures] call BIS_fnc_setObjectTexture"}, "BIS_fnc_setOvercast": {"version": "FNC", "tags": "", "description": "Instantly set weather conditions and share it across network. Must be executed in scheduled environment.", "example": "[0.5] call BIS_fnc_setOvercast;", "docSyntax": "[value] call BIS_fnc_setOvercast", "syntax": "[<scalar>] call BIS_fnc_setOvercast"}, "BIS_fnc_setPitchBank": {"version": "FNC", "tags": "", "description": "Rotate an object, giving it the specified pitch and bank, in degrees.", "example": "[player, 45, -45] call BIS_fnc_setPitchBank;", "docSyntax": "[object, pitch, bank] call BIS_fnc_setPitchBank", "syntax": "[<object>,pitch,bank] call BIS_fnc_setPitchBank"}, "BIS_fnc_setPPeffectTemplate": {"version": "FNC", "tags": "", "description": "Apply post-process effects according to template from CfgPostprocessTemplates.", "example": "[\"Mediterranean\", 3, false] call BIS_fnc_setPPeffectTemplate;", "docSyntax": "[template, transition, global] call BIS_fnc_setPPeffectTemplate", "syntax": "[template,transition,global] call BIS_fnc_setPPeffectTemplate"}, "BIS_fnc_setRain": {"version": "FNC", "tags": "", "description": "A helper function for setting rainParams in multiplayer. The call to the function could be placed in init.sqf to sync rainParams between all clients and JIP. Alternatively execute on server.", "example": "0 setOvercast 1; 0 setRain 1; 0 setFog 0.1; //\u00a0snow affects visibility at distance setHumidity 0.9; //\u00a0don't want to see dust clouds enableEnvironment [false, true]; //\u00a0don't want to see snakes and butterflies either forceWeatherChange; [ \"a3\\data_f\\rainnormal_ca.paa\", //\u00a0rainDropTexture 1, //\u00a0texDropCount 0.01, //\u00a0minRainDensity 15, //\u00a0effectRadius 0.1, //\u00a0windCoef 2, //\u00a0dropSpeed 0.5, //\u00a0rndSpeed 0.5, //\u00a0rndDir 0.02, //\u00a0dropWidth 0.02, //\u00a0dropHeight [0.1, 0.1, 0.1, 1], //\u00a0dropColor 0.1, //\u00a0lumSunFront 0.1, //\u00a0lumSunBack 5.5, //\u00a0refractCoef 0.3, //\u00a0refractSaturation true, //\u00a0snow false //\u00a0dropColorStrong ] call BIS_fnc_setRain;", "docSyntax": "rainParams call BIS_fnc_setRain", "syntax": "rainParams call BIS_fnc_setRain"}, "BIS_fnc_setRank": {"version": "FNC", "tags": "", "description": "Set rank of vehicle crew.", "example": "[vehicle player, \"Captain\"] call BIS_fnc_setRank;", "docSyntax": "[target, rank] call BIS_fnc_setRank", "syntax": "[<object>,rank] call BIS_fnc_setRank"}, "BIS_fnc_setRespawnDelay": {"version": "FNC", "tags": "", "description": "/* Description: Increase the respawn time based on a condition Parameter(s): 0: CODE - Condition, must return BOOL 1: NUMBER - delay in seconds which is applied when the condition is true 2: STRING - description displayed when the delay is in effect Returns: NOTHING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_setRespawnInventory": {"version": "FNC", "tags": "", "description": "Set respawn loadouts.", "example": "[player, [\"B_T_Recon_TL_F\"]] call BIS_fnc_setRespawnInventory;", "docSyntax": "[target, inventory] call BIS_fnc_setRespawnInventory", "syntax": "[<object>,inventory] call BIS_fnc_setRespawnInventory"}, "BIS_fnc_setServerVariable": {"version": "FNC", "tags": "", "description": "Set variable stored only on server. Clients can the download it using BIS_fnc_getServerVariable. Used when you want to share variables only to specific clients to prevent large traffic.", "example": "[nil, \"playerHealth\", damage player] call BIS_fnc_setServerVariable;", "docSyntax": "[namespace, varName, value] call BIS_fnc_setServerVariable", "syntax": "[namespace,varName,<scalar>] call BIS_fnc_setServerVariable"}, "BIS_fnc_setTask": {"version": "FNC", "tags": "", "description": "Set task parameters.", "example": "[\"Task_01\", true, [\"Protect the respawn point.\",\"Respawn Point West\",\"respawn_west\"], [MHQ,false], \"ASSIGNED\", 5, true, true, \"Defend\", true] call BIS_fnc_setTask;", "docSyntax": "[taskId, target, description, (destination, state, priority, showNotification, isGlobal, type, visibleIn3D)] call BIS_fnc_setTask", "syntax": "[taskId,<object>,description,(destination,state,priority,showNotification,isGlobal,type,visibleIn3D)] call BIS_fnc_setTask"}, "BIS_fnc_setTaskLocal": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_setToPairs": {"version": "FNC", "tags": "", "description": "Works similar to the BIS_fnc_addToPairs but it doesn't try to add values. It just overwrites the volue if the key already exists.", "example": "[[[\"apple\",3],[\"pear\",2]],\"pear\",10] call BIS_fnc_setToPairs; //\u00a0Returns [[\"apple\",3],[\"pear\",10]]", "docSyntax": "[array, key, newValue] call BIS_fnc_setToPairs", "syntax": "[<array>,key,newValue] call BIS_fnc_setToPairs"}, "BIS_fnc_setUnitInsignia": {"version": "FNC", "tags": "", "description": "Sets unit insignia (e.g., shoulder insignia on soldiers). See Arma 3: Unit Insignia for more details and a list of official insignias.", "example": "Place insignia:", "docSyntax": "[target, className] call BIS_fnc_setUnitInsignia", "syntax": "[<object>,className] call BIS_fnc_setUnitInsignia"}, "BIS_fnc_setVehicleMass": {"version": "FNC", "tags": "", "description": "Set mass relative to the default vehicle mass (default mass being vehicle mass on first execution of this function).", "example": "//\u00a0default behaviour, change the mass according to the current phase of the animation sources result = [this] call BIS_fnc_setVehicleMass; result = [this, [], 0] call BIS_fnc_setVehicleMass;", "docSyntax": "[vehicle, animationInformation, massDifference] call BIS_fnc_setVehicleMass", "syntax": "[<objVehicle>,animationInformation,massDifference] call BIS_fnc_setVehicleMass"}, "BIS_fnc_shakeCuratorCamera": {"version": "FNC", "tags": "", "description": "Shake curator camera.", "example": "[] spawn BIS_fnc_shakeCuratorCamera;", "docSyntax": "[strength,duration,area] spawn BIS_fnc_shakeCuratorCamera", "syntax": "[strength,duration,area] spawn BIS_fnc_shakeCuratorCamera"}, "BIS_fnc_shakeGauges": {"version": "FNC", "tags": "", "description": "/* Description: Shake analogue gauges Parameter(s): _this select 0 (Optional): NUMBER - shake limit (max distance gauges can move on screen from original position) _this select 1 (Optional): NUMBER - number of repeats _this select 2 (Optional): NUMBER - delay between every position change _this select 3 (Optional): ARRAY - list of IDCs Returns: NOTHING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_shakeMap": {"version": "FNC", "tags": "", "description": "\"Camera shake\" function for the map. Shakes the map for a given amount of time with a given amount of force around the given camera center. Exits if map is not open.", "example": "[2,20,getMarkerPos \"BIS_markerExtraction0\"] call BIS_fnc_shakeMap;", "docSyntax": "[duration, magnitude, center] call BIS_fnc_shakeMap", "syntax": "[duration,magnitude,center] call BIS_fnc_shakeMap"}, "BIS_fnc_shakeMapEH": {"version": "FNC", "tags": "", "description": "/* Author: Riccardo Argiolas Description: Event handler function for the shakeMap.sqf function Parameters: Select 0 - NUMBER: duration of shake effect. Select 1 - NUMBER: magnitude of the shaking force. Select 2 - ARRAY: position of the camera center around which the shake effect occurs. Select 3 - NUMBER: starting shake time (i.e. time elapsed since mission started till the start of the shake animation). Returns: None Examples: private _shakeEventCode = format [\"[%1, %2, %3, %4] call BIS_fnc_drawMapShake\", _shakeDuration, _shakeMagnitude, _shakeCenter, time]; BIS_shakeEventHandler = _map ctrladdeventhandler [\"draw\",_shakeEventCode]; */", "docSyntax": "[] call BIS_fnc_shakeMapEH", "syntax": "[] call BIS_fnc_shakeMapEH"}, "BIS_fnc_sharedObjectives": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_showAANArticle": {"version": "FNC", "tags": "", "description": "Show an AAN article.", "example": "Result", "docSyntax": "[arrayOfArrays, display, fade] call BIS_fnc_showAANArticle", "syntax": "[arrayOfArrays,<uiDisplay>,fade] call BIS_fnc_showAANArticle"}, "BIS_fnc_showCuratorAttributes": {"version": "FNC", "tags": "", "description": "Show attributes window of an entity. When no attributes are available, no window is opened.", "example": "[BIS_vehicle] call BIS_fnc_showCuratorAttributes;", "docSyntax": "[target] call BIS_fnc_showCuratorAttributes", "syntax": "[<object>] call BIS_fnc_showCuratorAttributes"}, "BIS_fnc_showCuratorFeedbackMessage": {"version": "FNC", "tags": "", "description": "Show feedback message when illegal operation is attempted in curator interface.", "example": "[objNull, 404] call BIS_fnc_showCuratorFeedbackMessage;", "docSyntax": "[curator, messageInfo] call BIS_fnc_showCuratorFeedbackMessage", "syntax": "[curator,messageInfo] call BIS_fnc_showCuratorFeedbackMessage"}, "BIS_fnc_showMarker": {"version": "FNC", "tags": "", "description": "Gradual revealing of a marker by setting its alpha to its original alpha or to a user-specified alpha.", "example": "[\"BIS_marker\",2] spawn BIS_fnc_showMarker;", "docSyntax": "[marker, duration, finalAlpha] spawn BIS_fnc_showMarker", "syntax": "[marker,duration,finalAlpha] spawn BIS_fnc_showMarker"}, "BIS_fnc_showMarkerArray": {"version": "FNC", "tags": "", "description": "Unhide the markers sequentially.", "example": "[[\"marker_1\",\"marker_2\",\"marker_n\"], 3, false] spawn BIS_fnc_showMarkers;", "docSyntax": "[marker, duration, hideAfter] spawn BIS_fnc_showMarkerArray", "syntax": "[marker,duration,hideAfter] spawn BIS_fnc_showMarkerArray"}, "BIS_fnc_showMarkers": {"version": "FNC", "tags": "", "description": "Show or hide given markers using fade effect.", "example": "[\"hide\", [\"respawn_west\", \"respawn_east\"]] call BIS_fnc_showMarkers;", "docSyntax": "[action, markers] call BIS_fnc_showMarkers", "syntax": "[action,markers] call BIS_fnc_showMarkers"}, "BIS_fnc_showMissionStatus": {"version": "FNC", "tags": "", "description": "Show mission status with sectors, respawn tickets, etc.", "example": "call BIS_fnc_showMissionStatus;", "docSyntax": "[] call BIS_fnc_showMissionStatus", "syntax": "[] call BIS_fnc_showMissionStatus"}, "BIS_fnc_showNotification": {"version": "FNC", "tags": "", "description": "Show a config-defined notification.", "example": "[\"TaskSucceeded\", [\"\", \"Disable the nuke\"]] call BIS_fnc_showNotification;", "docSyntax": "[template, arguments] call BIS_fnc_showNotification", "syntax": "[template,arguments] call BIS_fnc_showNotification"}, "BIS_fnc_showRespawnMenu": {"version": "FNC", "tags": "", "description": "Triggers the respawn screen in the given mode", "example": "[\"open\"] call BIS_fnc_showRespawnMenu; //\u00a0spawn does work as well", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuDisableItem": {"version": "FNC", "tags": "", "description": "Disables respawn loadout, role or position for Arma 3: Respawn.", "example": "[ \"disable\", uiNamespace getVariable \"BIS_RscRespawnControlsMap_ctrlLocList\", 2, \"Restricted for this part of mission!\", myRespawnModule call BIS_fnc_objectVar ] call BIS_fnc_showRespawnMenuDisableItem;", "docSyntax": "[mode, uiControl, listboxItem, message, respawnReference] call BIS_fnc_showRespawnMenuDisableItem", "syntax": "[mode,uiControl,listboxItem,message,respawnReference] call BIS_fnc_showRespawnMenuDisableItem"}, "BIS_fnc_showRespawnMenuDisableItemCheck": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuDisableItemDraw": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuHeader": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuInventory": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuInventoryDetails": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuInventoryItems": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuInventoryLimit": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuInventoryLimitRefresh": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuInventoryLimitRespawn": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuInventoryList": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuInventoryLoadout": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuInventoryMetadata": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuPosition": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuPositionList": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuPositionMap": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuPositionMapDraw": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_showRespawnMenuPositionMapHandle": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showRespawnMenuPositionMetadata": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_showRespawnMenuPositionName": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_showRespawnMenuPositionRefresh": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_showSubtitle": {"version": "FNC", "tags": "", "description": "Displays a subtitle at the bottom of the screen.", "example": "[\"CROSSROAD\", \"Mission is a go, I repeat, mission is a go, Crossroad, out.\"] spawn BIS_fnc_showSubtitle;", "docSyntax": "[name, subtitle] spawn BIS_fnc_showSubtitle", "syntax": "[<string>,subtitle] spawn BIS_fnc_showSubtitle"}, "BIS_fnc_showTime": {"version": "FNC", "tags": "", "description": "Shows time gap between two dates.", "example": "private _dayStart = date; _dayStart set [3, 0]; //\u00a0set hours to 0 _dayStart set [4, 0]; //\u00a0set minutes to 0 _now = date; [_dayStart, _now] spawn BIS_fnc_showTime;", "docSyntax": "[startDate, endDate] spawn BIS_fnc_showTime", "syntax": "[startDate,endDate] spawn BIS_fnc_showTime"}, "BIS_fnc_showUnitInfo": {"version": "FNC", "tags": "", "description": "Hides or shows weapon information. Also hides grenades information.", "example": "false call BIS_fnc_showUnitInfo; //\u00a0hides weapon information", "docSyntax": "[showUnitInfo] call BIS_fnc_showUnitInfo", "syntax": "[showUnitInfo] call BIS_fnc_showUnitInfo"}, "BIS_fnc_showWelcomeScreen": {"version": "FNC", "tags": "", "description": "Show welcome screen. Used in the main menu (works fine in Eden Editor).", "example": "[findDisplay 313, true] call BIS_fnc_showWelcomeScreen;", "docSyntax": "[display, forceLatest] call BIS_fnc_showWelcomeScreen", "syntax": "[<uiDisplay>,forceLatest] call BIS_fnc_showWelcomeScreen"}, "BIS_fnc_shutdown": {"version": "FNC", "tags": "", "description": "Shut downs the game.", "example": "call BIS_fnc_shutdown;", "docSyntax": "call BIS_fnc_shutdown", "syntax": "call BIS_fnc_shutdown"}, "BIS_fnc_sideColor": {"version": "FNC", "tags": "", "description": "Returns colour of define side either as Array in format RGBA or the name of the colour as String", "example": "[blufor, false] call BIS_fnc_sideColor; //\u00a0returns [0,0.3,0.6,1]", "docSyntax": "[side, returnString] call BIS_fnc_sideColor", "syntax": "[<objSide>,returnString] call BIS_fnc_sideColor"}, "BIS_fnc_sideID": {"version": "FNC", "tags": "", "description": "Return config side number.", "example": "west call BIS_fnc_sideID; //\u00a0returns 1", "docSyntax": "testedSide call BIS_fnc_sideID", "syntax": "testedSide call BIS_fnc_sideID"}, "BIS_fnc_sideIsEnemy": {"version": "FNC", "tags": "", "description": "Determines if side B is enemy to side A the way the game engine does it. The relationship table can be found here: Side Relations.", "example": "private _isEnemy = [west, east] call BIS_fnc_sideIsEnemy; //Checks if EAST is enemy to WEST.", "docSyntax": "[sideA, sideB] call BIS_fnc_sideIsEnemy", "syntax": "[sideA,sideB] call BIS_fnc_sideIsEnemy"}, "BIS_fnc_sideIsFriendly": {"version": "FNC", "tags": "", "description": "Determines if side B is friendly to side A the way the game engine does it. The relationship table can be found here: Side Relations.", "example": "private _isFriendly = [west, east] call BIS_fnc_sideIsFriendly; //Checks if EAST is friendly to WEST.", "docSyntax": "[sideA, sideB] call BIS_fnc_sideIsFriendly", "syntax": "[sideA,sideB] call BIS_fnc_sideIsFriendly"}, "BIS_fnc_sideName": {"version": "FNC", "tags": "", "description": "Returns localized side name.", "example": "[2] call BIS_fnc_sideName;", "docSyntax": "[input] call BIS_fnc_sideName", "syntax": "[input] call BIS_fnc_sideName"}, "BIS_fnc_sideNameUnlocalized": {"version": "FNC", "tags": "", "description": "Returns unlocalized side name.", "example": "west call BIS_fnc_sideNameUnlocalized;//Returns \"WEST\"", "docSyntax": "input call BIS_fnc_sideNameUnlocalized", "syntax": "input call BIS_fnc_sideNameUnlocalized"}, "BIS_fnc_sideType": {"version": "FNC", "tags": "", "description": "Returns side type based on side ID. See BIS_fnc_sideID for more information.", "example": "0 call BIS_fnc_sideType; //\u00a0returns EAST", "docSyntax": "sideID call BIS_fnc_sideType", "syntax": "sideID call BIS_fnc_sideType"}, "BIS_fnc_simpleMoveMarker": {"version": "FNC", "tags": "", "description": "Moves marker to a new position. Simple version of BIS_fnc_moveMarker.", "example": "[\"BIS_marker\",[1111,2222,0]] call BIS_fnc_moveMarker;", "docSyntax": "[marker, newPosition, duration] call BIS_fnc_simpleMoveMarker", "syntax": "[marker,newPosition,duration] call BIS_fnc_simpleMoveMarker"}, "BIS_fnc_simpleObjectData": {"version": "FNC", "tags": "", "description": "Get complete data needed for simple object creation.", "example": "[\"B_Boat_Armed_01_minigun_F\"] call BIS_fnc_simpleObjectData; /* [ \"B_Boat_Armed_01_minigun_F\", \"A3\\Boat_F\\Boat_Armed_01\\Boat_Armed_01_minigun_F.p3d\", 1, 3.323, [ [\"damagehide\", 0], [\"turret_shake\", 0], [\"turret_shake_aside\", 0], [\"magazine_hide\", 0], [\"mainturret\", 0], [\"damagehideotocvez\", 0], [\"maingun\", 0.09], [\"damagehideotochlaven\", 0], [\"rearturret\", -3.16], [\"reargun\", 0.09], [\"muzzleflash\", 0], [\"zaslehrot\", 79], [\"zasleh2rot\", 600], [\"fuel\", 1], [\"mph\", 0], [\"rpm\", 0], [\"amps_random\", 0], [\"oil_random\", 0], [\"trim_random\", 0], [\"tmp_random\", 0], [\"volt_random\", 0], [\"drivingwheel\", 0], [\"ammobelt_hide\", 0], [\"bullet001_2_hide\", 0.33], [\"bullet002_2_hide\", 0.33], [\"bullet003_2_hide\", 0.33], [\"bullet004_2_hide\", 0.33], [\"bullet005_2_hide\", 0.33], [\"bullet006_2_hide\", 0.33], [\"positionlights\", 0], [\"gun_revolving\", 0.33], [\"muzzleflash2\", 0], [\"reargunner\", 0.09] ], [\"zasleh\", \"p svetlo\", \"zadni svetlo\", \"brzdove svetlo\", \"clan\", \"podsvit pristroju\", \"poskozeni\"], -0.148, [ \"\\A3\\boat_f\\Boat_Armed_01\\data\\Boat_Armed_01_ext_co.paa\", \"\\A3\\boat_f\\Boat_Armed_01\\data\\Boat_Armed_01_int_co.paa\", \"\\A3\\boat_f\\Boat_Armed_01\\data\\Boat_Armed_01_crows_blufor_co.paa\" ], false, false ] */", "docSyntax": "[classname] call BIS_fnc_simpleObjectData", "syntax": "[classname] call BIS_fnc_simpleObjectData"}, "BIS_fnc_singleMissionConfig": {"version": "FNC", "tags": "", "description": "Returns config of current single mission.", "example": "private _config = call BIS_fnc_singleMissionConfig;", "docSyntax": "call BIS_fnc_singleMissionConfig", "syntax": "call BIS_fnc_singleMissionConfig"}, "BIS_fnc_singleMissionKeys": {"version": "FNC", "tags": "", "description": "Activate mission related keys.", "example": "private _activatedKeys = call BIS_fnc_singleMissionKeys;", "docSyntax": "call BIS_fnc_singleMissionKeys", "syntax": "call BIS_fnc_singleMissionKeys"}, "BIS_fnc_singleMissionName": {"version": "FNC", "tags": "", "description": "Returns name of currently selected single mission.", "example": "private _missionName = call BIS_fnc_singleMissionName;", "docSyntax": "call BIS_fnc_singleMissionName", "syntax": "call BIS_fnc_singleMissionName"}, "BIS_fnc_singleWingSlideDoorClose": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_singleWingSlideDoorClose", "syntax": "[] call BIS_fnc_singleWingSlideDoorClose"}, "BIS_fnc_singleWingSlideDoorOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_singleWingSlideDoorOpen", "syntax": "[] call BIS_fnc_singleWingSlideDoorOpen"}, "BIS_fnc_skirmishTrigger": {"version": "FNC", "tags": "", "description": "An internally used .fsm.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_slerp": {"version": "FNC", "tags": "", "description": "Spherical lerp, for correct lerping of normalized direction vectors", "docSyntax": "[currentValue, targetValue, alpha] call BIS_fnc_slerp", "syntax": "[currentValue,targetValue,alpha] call BIS_fnc_slerp"}, "BIS_fnc_smoothStep": {"version": "FNC", "tags": "", "description": "Interpolates between 0 and 1 with smoothing at the limits. Formula is n2 \u00d7 (3 - 2n).", "example": "private _smoothedStep = 0.75 call BIS_fnc_smoothStep;", "docSyntax": "number call BIS_fnc_smoothStep", "syntax": "<scalar> call BIS_fnc_smoothStep"}, "BIS_fnc_sortAlphabetically": {"version": "FNC", "tags": "", "description": "Alphabetically sort an array of strings without modifying the original. See also sort.", "example": "private _sortedNames = [\"John\", \"Jane\", \"Julia\", \"Geronimo\"] call BIS_fnc_sortAlphabetically; //\u00a0will return [\"Geronimo\", \"Jane\", \"John\", \"Julia\"]", "docSyntax": "arrayOfStrings call BIS_fnc_sortAlphabetically", "syntax": "arrayOfStrings call BIS_fnc_sortAlphabetically"}, "BIS_fnc_sortBy": {"version": "FNC", "tags": "", "description": "Sorts an array according to given algorithm. See sort for simple sorts.", "example": "//\u00a0sort numbers from lowest to highest _sortedNumbers = [[1,-80,0,480,15,-40], [], {_x}, \"ASCEND\"] call BIS_fnc_sortBy;", "docSyntax": "[array, parameters, algorithm, direction, filter] call BIS_fnc_sortBy", "syntax": "[<array>,parameters,algorithm,direction,filter] call BIS_fnc_sortBy"}, "BIS_fnc_sortNum": {"version": "FNC", "tags": "", "description": "Sorts an array of numbers from lowest (left) to highest (right). The passed array is modified by reference. This function uses the quick sort algorithm.", "example": "[5,9,987,6,97,8,6] call BIS_fnc_sortNum; //\u00a0returns [5,6,6,8,9,97,987]", "docSyntax": "array call BIS_fnc_sortNum", "syntax": "<array> call BIS_fnc_sortNum"}, "BIS_fnc_spawn": {"version": "FNC", "tags": "", "description": "Execute given code with or without parameter.", "example": "Show a message for the current player:", "docSyntax": "[params, code] spawn BIS_fnc_spawn", "syntax": "[<any>,<code>] spawn BIS_fnc_spawn"}, "BIS_fnc_spawnCrew": {"version": "FNC", "tags": "", "description": "Function to fill all crew positions in a vehicle, including turrets. In dummy mode no objects are created and the returned array contains only ones; this mode can be used to count the actual crew of an existing vehicle or vehicle type (see also crew, fullCrew).", "example": "[BIS_vehicle, group player] call BIS_fnc_spawnCrew;", "docSyntax": "[vehicle, group, dummyMode, dummyType, crewType]] call BIS_fnc_spawnCrew", "syntax": "[<objVehicle>,<objGroup>,dummyMode,dummyType,crewType]] call BIS_fnc_spawnCrew"}, "BIS_fnc_spawnEnemy": {"version": "FNC", "tags": "", "description": "Constantly spawns enemies around a player according to array of enemy classes. The units will try to hunt down the player.", "example": "[player, player, opfor, [\"O_Soldier_F\"]] spawn BIS_fnc_spawnEnemy;", "docSyntax": "[aPlayer, target, side, classes, maxEnemies, delay, code] spawn BIS_fnc_spawnEnemy", "syntax": "[aPlayer,<object>,<objSide>,classes,maxEnemies,<scalar>,<code>] spawn BIS_fnc_spawnEnemy"}, "BIS_fnc_spawnGroup": {"version": "FNC", "tags": "", "description": "Function which handles the spawning of a dynamic group of characters. The composition of the group can be passed to the function. Alternatively a number can be passed and the function will spawn that amount of characters with a random type.", "example": "Spawn five random EAST units at aPosition:", "docSyntax": "[position, side, toSpawn, relPositions, ranks, skillRange, ammoRange, randomControls, azimuth, precisePos, maxVehicles] call BIS_fnc_spawnGroup", "syntax": "[position,<objSide>,toSpawn,relPositions,ranks,skillRange,ammoRange,randomControls,azimuth,precisePos,maxVehicles] call BIS_fnc_spawnGroup"}, "BIS_fnc_spawnObjects": {"version": "FNC", "tags": "", "description": "Create a stack of objects at given position or on top of given object (eg. table).", "example": "private _randomPos = [(random 0.2) -0.1, (random 0.2) -0.1, 0]; _objects = [[_table, \"TOP\"], \"Box_NATO_Wps_F\", 3, _randomPos,(random 20)-10] call BIS_fnc_spawnObjects;", "docSyntax": "[position, className, count, offsetMatrix, offsetDir, dirNoise, enableSimulation] call BIS_fnc_spawnObjects", "syntax": "[position,className,count,offsetMatrix,offsetDir,dirNoise,enableSimulation] call BIS_fnc_spawnObjects"}, "BIS_fnc_spawnOrdered": {"version": "FNC", "tags": "", "description": "Spawns given function and executes it in the order it was called in case multiple calls are made. If mutex name is not specified, function name is used.", "example": "myFnc = { diag_log [_this, canSuspend] }; for \"_i\" from 0 to 1000 do { [_i, \"myFnc\"] call BIS_fnc_spawnOrdered };", "docSyntax": "[params, functionName, mutexName] call BIS_fnc_spawnOrdered", "syntax": "[<any>,functionName,mutexName] call BIS_fnc_spawnOrdered"}, "BIS_fnc_spawnVehicle": {"version": "FNC", "tags": "", "description": "Function to spawn a certain vehicle type with all crew (including turrets). The vehicle can either become part of an existing group or create a new group.", "example": "[getPos player, 180, \"BMP3\", east] call BIS_fnc_spawnVehicle;", "docSyntax": "[position, direction, type, sideOrGroup] call BIS_fnc_spawnVehicle", "syntax": "[position,direction,type,sideOrGroup] call BIS_fnc_spawnVehicle"}, "BIS_fnc_splitString": {"version": "FNC", "tags": "", "description": "Splits given string according to given separator(s).", "example": "[\"this is a test\", \" \"] call BIS_fnc_splitString; //\u00a0returns [\"this\", \"is\", \"a\", \"test\"]", "docSyntax": "[stringToSplit, separators, byWord] call BIS_fnc_splitString", "syntax": "[stringToSplit,separators,byWord] call BIS_fnc_splitString"}, "BIS_fnc_spotter": {"version": "FNC", "tags": "", "description": "Make spotter report target distance to sniper. Will only stop if one of the two units dies.", "example": "[player, spotter] spawn BIS_fnc_spotter;", "docSyntax": "[sniper, spotter] spawn BIS_fnc_spotter", "syntax": "[sniper,spotter] spawn BIS_fnc_spotter"}, "BIS_fnc_stalk": {"version": "FNC", "tags": "", "description": "Continuously set WP of one group to a different group to hunt it. It does not change the group's behaviour.", "example": "private _stalking = [BIS_grpStalkers, BIS_grpPlayer] spawn BIS_fnc_stalk;", "docSyntax": "[stalker, stalked, refresh, radius, endCondition, endDestination] spawn BIS_fnc_stalk", "syntax": "[stalker,stalked,refresh,radius,endCondition,endDestination] spawn BIS_fnc_stalk"}, "BIS_fnc_startLoadingScreen": {"version": "FNC", "tags": "", "description": "Register a loading screen. Start the loading when it is the first one registered.", "example": "[\"myLoadingScreen\", \"Loading\u2026 wait for my splendid\u2122 mission!\"] call BIS_fnc_startLoadingScreen; uiSleep 3; \"myLoadingScreen\" call BIS_fnc_endLoadingScreen;", "docSyntax": "[screenId, layout] call BIS_fnc_startLoadingScreen", "syntax": "[screenId,layout] call BIS_fnc_startLoadingScreen"}, "BIS_fnc_storeParamsValues": {"version": "FNC", "tags": "", "description": "Parses mission params and stores them into public variable \"BIS_fnc_storeParamsValues_data\". Use BIS_fnc_getParamValue to retrieve params values from the variable.", "example": "call BIS_fnc_storeParamsValues;", "docSyntax": "call BIS_fnc_storeParamsValues", "syntax": "call BIS_fnc_storeParamsValues"}, "BIS_fnc_strategicMapAnimate": {"version": "FNC", "tags": "", "description": "Animates a Strategic Map.", "example": "[configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1_2\", 5] spawn BIS_fnc_strategicMapAnimate;", "docSyntax": "[target,time] spawn BIS_fnc_strategicMapAnimate", "syntax": "[<object>,<scalar>] spawn BIS_fnc_strategicMapAnimate"}, "BIS_fnc_strategicMapMouseButtonClick": {"version": "FNC", "tags": "", "description": "Internal function used by BIS_fnc_strategicMapOpen.", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_strategicMapOpen": {"version": "FNC", "tags": "", "description": "Creates a strategic map.", "example": "[ findDisplay 46, [2000,2000,0], [ [ [2000,2000,0], {systemChat format [\"%1\",name ((_this # 9) # 0)]}, \"1st Mission\", \"This is mission one\", \"Name of mission's player\", \"\\A3\\Data_F_Exp\\Logos\\arma3_exp_icon_ca.paa\", 1.5, [player] ], [ [1000,1000,0], {systemChat format [\"%1\",name ((_this # 9) # 0)]}, \"2nd Mission\", \"This is mission two\", \"Name of mission's player\", \"\\A3\\Data_F_Argo\\Logos\\arma3_argo_logoTitle_ca.paa\", 1.5, [player] ] ], [ [ [3000,3000,0], configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1_A_1_2\", configFile >> \"CfgORBAT\" >> \"BIS\" >> \"B_1\", [], 10 ] ], [ \"marker_1\", \"marker_2\" ], [ [ \"\\A3\\Ui_f\\data\\Logos\\arma3_white_ca.paa\", [0,0,0,1], [4000,4000,0], 8, 8, 0, \"Arma 3 Logo\", true ] ], 0, false, 1, true, \"Strategic Map Example\", false, \"\\A3\\Ui_f\\data\\Logos\\arma3_white_ca.paa\" ] call BIS_fnc_strategicMapOpen;", "docSyntax": "[display, pos, missions, ORBATs, markers, images, weather, night, scale, simulation, label, missionName, missionIcon] call BIS_fnc_strategicMapOpen", "syntax": "[<uiDisplay>,<array>,missions,ORBATs,markers,images,weather,night,<scalar>,simulation,label,missionName,missionIcon] call BIS_fnc_strategicMapOpen"}, "BIS_fnc_stringToMarker": {"version": "FNC", "tags": "", "description": "Converts serialized data from BIS_fnc_markerToString into a global map marker", "example": "\"|marker_0|[3799.0110,2781.9880,0.0000]|mil_pickup|ICON|[1,1]|0|Solid|Default|1|You are here\" call BIS_fnc_stringToMarker;", "docSyntax": "data call BIS_fnc_stringToMarker", "syntax": "data call BIS_fnc_stringToMarker"}, "BIS_fnc_stringToMarkerLocal": {"version": "FNC", "tags": "", "description": "Converts serialized data from BIS_fnc_markerToString into a local map marker", "example": "\"|marker_0|[3799.0110,2781.9880,0.0000]|mil_pickup|ICON|[1,1]|0|Solid|Default|1|You are here\" call BIS_fnc_stringToMarkerLocal;", "docSyntax": "data call BIS_fnc_stringToMarkerLocal", "syntax": "data call BIS_fnc_stringToMarkerLocal"}, "BIS_fnc_subClasses": {"version": "FNC", "tags": "", "description": "Same function as BIS_fnc_returnChildren", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_subSelect": {"version": "FNC", "tags": "", "description": "Returns a sub-selection of the passed array.", "example": "private _array = [\"a\", \"b\", true, 3, 8]; [_array, 2] call BIS_fnc_subSelect; //\u00a0returns [true,3,8]", "docSyntax": "[array, start, endOrLength] call BIS_fnc_subSelect", "syntax": "[<array>,start,endOrLength] call BIS_fnc_subSelect"}, "BIS_fnc_sunriseSunsetTime": {"version": "FNC", "tags": "", "description": "Calculate sunrise and sunset time.", "example": "private _sunriseSunsetTime = date call BIS_fnc_sunriseSunsetTime; //\u00a0get sunrise/sunset time for the current date", "docSyntax": "date call BIS_fnc_sunriseSunsetTime", "syntax": "date call BIS_fnc_sunriseSunsetTime"}, "BIS_fnc_supplydrop": {"version": "FNC", "tags": "", "description": "Script for para-drop of objects. Spawns waitUntil that handles ground hit (detaching of object from parachute). Used by supplydrop service.", "example": "[BIS_airDropVeh, \"reammobox\"] spawn BIS_fnc_supplydrop;", "docSyntax": "[airUnit,class] spawn BIS_fnc_supplydrop", "syntax": "[airUnit,class] spawn BIS_fnc_supplydrop"}, "BIS_fnc_supplydropService": {"version": "FNC", "tags": "", "description": "/* File: supplydropService.sqf Description: Supply drop service - controls approach and departure of transporting air vehicle and actual cargo drop. Used by Supply drop support request. Parameter(s): 1: <object> unit allowed to use the transport system 2: <object> vehicle providing transport 4: <array> positions to be cosen by player; accepted strings are \"pickup\" and \"unload\", the second position is defined by the next paramter (OPTIONAL) 5: <position> (NEEDED ONLY IF PARAMETER #4 IS USED) Returns: N/A */ //MP framework init (used for move command given to transporter vehicle)", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_swapVars": {"version": "FNC", "tags": "", "description": "Swaps the values of two variables passed as String.", "example": "private _a = 1; _b = 2; [\"_a\", \"_b\"] call BIS_fnc_swapVars; _a == 2; //\u00a0true _b == 1; //\u00a0true", "docSyntax": "[variableName1, variableName2] call BIS_fnc_swapVars", "syntax": "[variableName1,variableName2] call BIS_fnc_swapVars"}, "BIS_fnc_switchLamp": {"version": "FNC", "tags": "", "description": "Switch streetlamp on/off.", "example": "//\u00a0switches all lamps off in a radius of 200m private _lampsIn200m = nearestObjects [player, [\"Lamps_base_F\", \"PowerLines_base_F\", \"PowerLines_Small_base_F\"], 200]; { [_x, false] call BIS_fnc_switchLamp; } forEach _lampsIn200m;", "docSyntax": "[object, state] call BIS_fnc_switchLamp", "syntax": "[<object>,state] call BIS_fnc_switchLamp"}, "BIS_fnc_synchronizedObjects": {"version": "FNC", "tags": "", "description": "Get all objects of given type directly synchronized to the given object. Works in Eden Editor too.", "example": "[BIS_Poliakko, \"LocationArea_F\"] call BIS_fnc_synchronizedObjects;", "docSyntax": "[object, filter, preciseMatch] call BIS_fnc_synchronizedObjects", "syntax": "[<object>,filter,preciseMatch] call BIS_fnc_synchronizedObjects"}, "BIS_fnc_synchronizedObjectsQueue": {"version": "FNC", "tags": "", "description": "/* Author: Jiri Wainar Description: Return sequence of all synchronized objects forming either line or circle. Parameter(s): 0: OBJECT - starting object 1: STRING or ARRAY of STRINGs (Optional) - object types that are considered 2: BOOL (Optional) - class filter uses exact match true (default): objects need to match exectly one of the filter classes false: exact match is not required, objects can inherit from one of the listed classes 3: NUMBER (Optional) - expected connection shape 0 (default): none, can be either line or circle 1: line expected 2: circle expected Returns: ARRAY of OBJECTs or empty ARRAY if error is encountered Errors: * There are more then 2 objects matching class filter connected. * Circle is required but closing connection is not detected. Example: [_start,[\"ModuleToWAreaVertex_F\",\"ModuleToWAreaOptions_F\"],true,0] call BIS_fnc_synchronizedObjectsQueue; */", "docSyntax": "[] call BIS_fnc_synchronizedObjectsQueue", "syntax": "[] call BIS_fnc_synchronizedObjectsQueue"}, "BIS_fnc_target": {"version": "FNC", "tags": "", "description": "Target Board display", "example": "//\u00a0open the Score Board [\"uiOpen\", [myTarget]] call BIS_fnc_target;", "docSyntax": "[action, parameters] call BIS_fnc_target", "syntax": "[action,parameters] call BIS_fnc_target"}, "BIS_fnc_taskAlwaysVisible": {"version": "FNC", "tags": "", "description": "Returns true if task is forced to be always visible (default: false).", "example": "private _isForcedVisible = \"task_1\" call BIS_fnc_taskAlwaysVisible;", "docSyntax": "taskID call BIS_fnc_taskAlwaysVisible", "syntax": "taskID call BIS_fnc_taskAlwaysVisible"}, "BIS_fnc_taskAttack": {"version": "FNC", "tags": "", "description": "This function adds a Seek and Destroy waypoint on defined position to the group and set its behaviour to \"AWARE\". If the group has other waypoints, the waypoint will be added at the end of the list.", "example": "[opforGroup, getPosATL player] call BIS_fnc_taskAttack;", "docSyntax": "[group, position] call BIS_fnc_taskAttack", "syntax": "[<objGroup>,position] call BIS_fnc_taskAttack"}, "BIS_fnc_taskChildren": {"version": "FNC", "tags": "", "description": "Return a task's sub-tasks.", "example": "\"task_1\" call BIS_fnc_taskChildren;", "docSyntax": "taskID call BIS_fnc_taskChildren", "syntax": "taskID call BIS_fnc_taskChildren"}, "BIS_fnc_taskCompleted": {"version": "FNC", "tags": "", "description": "Checks if task is completed.", "example": "private _completed = \"task_1\" call BIS_fnc_taskCompleted;", "docSyntax": "taskID call BIS_fnc_taskCompleted", "syntax": "taskID call BIS_fnc_taskCompleted"}, "BIS_fnc_taskCreate": {"version": "FNC", "tags": "", "description": "Create a task.", "example": "[civilian, \"task1\", [\"Do this and you get a cookie\", \"Earn Cookie\", \"cookiemarker\"], [0,0,0], \"ASSIGNED\", 2, true] call BIS_fnc_taskCreate;", "docSyntax": "[owner, taskID, description, destination, state, priority, showNotification, type, visibleIn3D] call BIS_fnc_taskCreate", "syntax": "[owner,taskID,description,destination,state,priority,showNotification,type,visibleIn3D] call BIS_fnc_taskCreate"}, "BIS_fnc_taskCurrent": {"version": "FNC", "tags": "", "description": "Returns unit's current task.", "example": "private _currentTask = player call BIS_fnc_taskCurrent;", "docSyntax": "unit call BIS_fnc_taskCurrent", "syntax": "<objUnit> call BIS_fnc_taskCurrent"}, "BIS_fnc_taskDefend": {"version": "FNC", "tags": "", "description": "Group will man nearby static defenses within a 100 metre radius of the defense position and guard the position. Some units will man weapons, others will patrol and the remainder will sit on the ground.", "example": "[group player, getPosATL leader player] call BIS_fnc_taskDefend;", "docSyntax": "[group, position] call BIS_fnc_taskDefend", "syntax": "[<objGroup>,position] call BIS_fnc_taskDefend"}, "BIS_fnc_taskDescription": {"version": "FNC", "tags": "", "description": "Return a task's description.", "example": "\"BIS_task_01\" call BIS_fnc_taskDescription;", "docSyntax": "taskName call BIS_fnc_taskDescription", "syntax": "<string> call BIS_fnc_taskDescription"}, "BIS_fnc_taskDestination": {"version": "FNC", "tags": "", "description": "Return a task's destination.", "example": "\"BIS_task_01\" call BIS_fnc_taskDestination;", "docSyntax": "taskName call BIS_fnc_taskDestination", "syntax": "<string> call BIS_fnc_taskDestination"}, "BIS_fnc_taskExists": {"version": "FNC", "tags": "", "description": "Return true if a task exists.", "example": "private _exists = [\"MyTask\"] call BIS_fnc_taskExists;", "docSyntax": "[taskName] call BIS_fnc_taskExists", "syntax": "[<string>] call BIS_fnc_taskExists"}, "BIS_fnc_taskHandler": {"version": "FNC", "tags": "", "description": "/******************************************************************************* * * version: 1.0 * name: Task handler * description: automatically sets tasks as current * parameters: _this select 0: a unit whose tasks will be handled (Array) _this select 1: links to tasks created via MP Framwork with priorities (loewr number means higher priority) * return value: none * example: [ BIS_cooper, [ [\"objShaftoe\", 1], [\"objGorka\", 3], [\"objNikolayev\", 5], [\"objLagushina\", 5], [\"objSmugglers\", 5], [\"objFindBase\", 4], [\"objSentries\", 3], [\"objLeader\", 3], [\"objDestroyBase\", 3], [\"objEscortLagushina\", 1], [\"objRescueCrew\", 2], [\"objSafehouse\", 3], [\"objMaksim\", 6], [\"objEvidence\", 7] ] ] call BIS_fnc_taskHandler * TODO: * generalize so it can be used in WF * add support for standard tasks * randomize the selection of tasks with the same priority", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_taskHint": {"version": "FNC", "tags": "", "description": "Shows a task hint.", "example": "[\"BIS_task_01\",\"CANCELED\"] call BIS_fnc_taskHint;", "docSyntax": "[taskName, taskState] call BIS_fnc_taskHint", "syntax": "[<string>,taskState] call BIS_fnc_taskHint"}, "BIS_fnc_taskParent": {"version": "FNC", "tags": "", "description": "Return a sub-task's parent task.", "example": "\"BIS_task_01\" call BIS_fnc_taskParent;", "docSyntax": "taskName call BIS_fnc_taskParent", "syntax": "<string> call BIS_fnc_taskParent"}, "BIS_fnc_taskPatrol": {"version": "FNC", "tags": "", "description": "Create a random patrol of several waypoints around a given position.", "example": "[group _unit, getPos _unit, 1000] call BIS_fnc_taskPatrol;", "docSyntax": "[group, position, distance, blacklist] call BIS_fnc_taskPatrol", "syntax": "[<objGroup>,position,<scalar>,blacklist] call BIS_fnc_taskPatrol"}, "BIS_fnc_taskReal": {"version": "FNC", "tags": "", "description": "Find the actual task associated with a task name assigned to a unit.", "example": "[\"testTask\", player] call BIS_fnc_taskReal; //\u00a0returns \"Task testTask (id 0)\"", "docSyntax": "[taskName, owner] call BIS_fnc_taskReal", "syntax": "[<string>,owner] call BIS_fnc_taskReal"}, "BIS_fnc_taskSetAlwaysVisible": {"version": "FNC", "tags": "", "description": "Flags task to be or not to be always visible.", "example": "[\"BIS_Task_01\",true] call BIS_fnc_taskSetAlwaysVisible;", "docSyntax": "[taskID,alwaysVisible] call BIS_fnc_taskSetAlwaysVisible", "syntax": "[taskID,alwaysVisible] call BIS_fnc_taskSetAlwaysVisible"}, "BIS_fnc_taskSetCurrent": {"version": "FNC", "tags": "", "description": "Set a task to current. Identical to assigning a task.", "example": "\"BIS_task_01\" call BIS_fnc_taskSetCurrent;", "docSyntax": "taskName call BIS_fnc_taskSetCurrent", "syntax": "<string> call BIS_fnc_taskSetCurrent"}, "BIS_fnc_taskSetDescription": {"version": "FNC", "tags": "", "description": "Set a task description.", "example": "[ \"tsk_destroyAA\", [ \"You should plant Satchels under those Shilkas! Good luck.\", \"Destroy the Shilkas\", \"Shilkas\" ] ] call BIS_fnc_taskSetDescription;", "docSyntax": "[taskId, [taskDescription, taskTitle, taskMarker]] call BIS_fnc_taskSetDescription", "syntax": "[taskId,[taskDescription,taskTitle,taskMarker]] call BIS_fnc_taskSetDescription"}, "BIS_fnc_taskSetDestination": {"version": "FNC", "tags": "", "description": "Set a task's destination.", "example": "[\"BIS_task_01\", [1337, 1337, 0]] call BIS_fnc_taskSetDestination;", "docSyntax": "[taskName, destination] call BIS_fnc_taskSetDestination", "syntax": "[<string>,destination] call BIS_fnc_taskSetDestination"}, "BIS_fnc_taskSetState": {"version": "FNC", "tags": "", "description": "Set a task's state.", "example": "[\"BIS_task_01\",\"CANCELED\"] call BIS_fnc_taskSetState;", "docSyntax": "[taskName, taskState, showHint] call BIS_fnc_taskSetState", "syntax": "[<string>,taskState,showHint] call BIS_fnc_taskSetState"}, "BIS_fnc_taskSetType": {"version": "FNC", "tags": "", "description": "Sets task type to given task.", "example": "[\"BIS_Task_01\",\"attack\"] call BIS_fnc_taskSetType;", "docSyntax": "[taskID,type] call BIS_fnc_taskSetType", "syntax": "[taskID,type] call BIS_fnc_taskSetType"}, "BIS_fnc_taskState": {"version": "FNC", "tags": "", "description": "Returns task's state.", "example": "\"task_1\" call BIS_fnc_taskState;", "docSyntax": "taskID call BIS_fnc_taskState", "syntax": "taskID call BIS_fnc_taskState"}, "BIS_fnc_tasksUnit": {"version": "FNC", "tags": "", "description": "Grab all tasks currently created for a given unit.", "example": "player call BIS_fnc_tasksUnit;", "docSyntax": "target call BIS_fnc_tasksUnit", "syntax": "<object> call BIS_fnc_tasksUnit"}, "BIS_fnc_taskType": {"version": "FNC", "tags": "", "description": "Returns type of given task.", "example": "[\"BIS_Task_01\"] call BIS_fnc_taskType;", "docSyntax": "taskID call BIS_fnc_taskType", "syntax": "taskID call BIS_fnc_taskType"}, "BIS_fnc_taskTypeIcon": {"version": "FNC", "tags": "", "description": "Returns path to the icon texture associated with given task type.", "example": "[\"attack\",configFile >> \"CfgTaskTypes\" >> \"Run\" >> \"icon\"] call BIS_fnc_taskTypeIcon;", "docSyntax": "[type, default] call BIS_fnc_taskTypeIcon", "syntax": "[type,default] call BIS_fnc_taskTypeIcon"}, "BIS_fnc_taskVar": {"version": "FNC", "tags": "", "description": "Returns task's variable name.", "example": "\"task_1\" call BIS_fnc_taskVar;", "docSyntax": "taskID call BIS_fnc_taskVar", "syntax": "taskID call BIS_fnc_taskVar"}, "BIS_fnc_teamColor": {"version": "FNC", "tags": "", "description": "Convert number to color team name or color.", "example": "[2, true] call BIS_fnc_teamColor;", "docSyntax": "[teamId, getColour] call BIS_fnc_teamColor", "syntax": "[teamId,getColour] call BIS_fnc_teamColor"}, "BIS_fnc_terrainGradAngle": {"version": "FNC", "tags": "", "description": "Returns the gradient angle (in radians) of the terrain at a specified position and a compass direction. It is an angle of the slope of a tangent plane to the terrain at the specified position in the specified direction.", "example": "private _radGrad = [getPos player, getDir player] call BIS_fnc_terrainGradAngle;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_textTiles": {"version": "FNC", "tags": "", "description": "Shows an animated text with background tiles.", "example": "[parseText \"<t font='PuristaBold' size='1.6'>MyMission</t><br />by Username\", true, nil, 7, 0.7, 0] spawn BIS_fnc_textTiles;", "docSyntax": "[content, position, tileSize, duration, fadeInOutTime, tileTransparency] spawn BIS_fnc_textTiles", "syntax": "[content,position,tileSize,duration,fadeInOutTime,tileTransparency] spawn BIS_fnc_textTiles"}, "BIS_fnc_textureMarker": {"version": "FNC", "tags": "", "description": "Checks whether texture is defined in CfgMarkers and if so, returns the marker texture.", "example": "private _notWhiteFlag = [\"flag_France\"] call BIS_fnc_textureMarker;", "docSyntax": "[wantedMarker] call BIS_fnc_textureMarker", "syntax": "[wantedMarker] call BIS_fnc_textureMarker"}, "BIS_fnc_textureVehicleIcon": {"version": "FNC", "tags": "", "description": "Checks whether icon is defined in CfgVehicleIcons and if so, returns the icon.", "example": "private _mediTexture = [\"iconManMedic\"] call BIS_fnc_textureVehicleIcon;", "docSyntax": "[wantedIcon] call BIS_fnc_textureVehicleIcon", "syntax": "[wantedIcon] call BIS_fnc_textureVehicleIcon"}, "BIS_fnc_threat": {"version": "FNC", "tags": "", "description": "Calculates threat values of given unit.", "example": "private _threatLevel = [player] call BIS_fnc_threat;", "docSyntax": "[unit] call BIS_fnc_threat", "syntax": "[<objUnit>] call BIS_fnc_threat"}, "BIS_fnc_timeline_cleanup": {"version": "FNC", "tags": "", "description": "Destroys timeline and all related objects.", "example": "[timeline] call BIS_fnc_timeline_cleanup;", "docSyntax": "[timeline] call BIS_fnc_timeline_cleanup", "syntax": "[timeline] call BIS_fnc_timeline_cleanup"}, "BIS_fnc_timeline_deleted": {"version": "FNC", "tags": "", "description": "Deletes given timeline and updates", "example": "[timeline] call BIS_fnc_timeline_deleted;", "docSyntax": "[timeline] call BIS_fnc_timeline_deleted", "syntax": "[timeline] call BIS_fnc_timeline_deleted"}, "BIS_fnc_timeline_edenAttributesChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Attributes change in EDEN for a timeline Parameter(s): _this select 0: Object - The timeline Returns: Nothing */", "docSyntax": "[] call BIS_fnc_timeline_edenAttributesChanged", "syntax": "[] call BIS_fnc_timeline_edenAttributesChanged"}, "BIS_fnc_timeline_edenConnectionChanged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: 3DEN connections of a timeline is changed Parameter(s): _this select 0: Object - The timeline Returns: Nothing */", "docSyntax": "[] call BIS_fnc_timeline_edenConnectionChanged", "syntax": "[] call BIS_fnc_timeline_edenConnectionChanged"}, "BIS_fnc_timeline_edenDeleted": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Timeline is deleted Parameter(s): _this select 0: Object - The destroyed timeline Returns: Nothing */", "docSyntax": "[] call BIS_fnc_timeline_edenDeleted", "syntax": "[] call BIS_fnc_timeline_edenDeleted"}, "BIS_fnc_timeline_edenDragged": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Entity is dragged in 3DEN Parameter(s): _this select 0: Object - The timeline Returns: Nothing */", "docSyntax": "[] call BIS_fnc_timeline_edenDragged", "syntax": "[] call BIS_fnc_timeline_edenDragged"}, "BIS_fnc_timeline_edenInit": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Time line is initialized in 3den Parameter(s): _this select 0: Object - The timeline Returns: Nothing */", "docSyntax": "[] call BIS_fnc_timeline_edenInit", "syntax": "[] call BIS_fnc_timeline_edenInit"}, "BIS_fnc_timeline_edenIsSelected": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Whether this timeline is selected in 3den Parameter(s): _this select 0: Object - The timeline Returns: Bool - True if selected, false if not */", "docSyntax": "[] call BIS_fnc_timeline_edenIsSelected", "syntax": "[] call BIS_fnc_timeline_edenIsSelected"}, "BIS_fnc_timeline_finish": {"version": "FNC", "tags": "", "description": "Called when timeline finishes playing (reaches it is end).", "example": "[timeline] call BIS_fnc_timeline_finish;", "docSyntax": "[timeline] call BIS_fnc_timeline_finish", "syntax": "[timeline] call BIS_fnc_timeline_finish"}, "BIS_fnc_timeline_getAlpha": {"version": "FNC", "tags": "", "description": "Get's current alpha in given timeline.", "example": "private _alpha = [timeline] call BIS_fnc_timeline_getAlpha;", "docSyntax": "[timeline] call BIS_fnc_timeline_getAlpha", "syntax": "[timeline] call BIS_fnc_timeline_getAlpha"}, "BIS_fnc_timeline_getCurrentTime": {"version": "FNC", "tags": "", "description": "The current time of this timeline.", "example": "private _time = [timeline] call BIS_fnc_timeline_getCurrentTime;", "docSyntax": "[timeline] call BIS_fnc_timeline_getCurrentTime", "syntax": "[timeline] call BIS_fnc_timeline_getCurrentTime"}, "BIS_fnc_timeline_getInterpMode": {"version": "FNC", "tags": "", "description": "Returns the timeline interp mode index.", "example": "private _interpolationMode = [timeline] call BIS_fnc_timeline_getInterpMode;", "docSyntax": "[timeline] call BIS_fnc_timeline_getInterpMode", "syntax": "[timeline] call BIS_fnc_timeline_getInterpMode"}, "BIS_fnc_timeline_getLength": {"version": "FNC", "tags": "", "description": "The time left of given timeline.", "example": "private _timeLeft = [timeline] call BIS_fnc_timeline_getLength;", "docSyntax": "[timeline] call BIS_fnc_timeline_getLength", "syntax": "[timeline] call BIS_fnc_timeline_getLength"}, "BIS_fnc_timeline_getPlayFromStart": {"version": "FNC", "tags": "", "description": "Whether timeline is flagged as play from start on scenario begin.", "example": "private _playFromStart = [timeline] call BIS_fnc_timeline_getPlayFromStart;", "docSyntax": "[timeline] call BIS_fnc_timeline_getPlayFromStart", "syntax": "[timeline] call BIS_fnc_timeline_getPlayFromStart"}, "BIS_fnc_timeline_getPlayRate": {"version": "FNC", "tags": "", "description": "Returns the play rate of this timeline.", "example": "private _playRate = [timeline] call BIS_fnc_timeline_getPlayRate;", "docSyntax": "[timeline] call BIS_fnc_timeline_getPlayRate", "syntax": "[timeline] call BIS_fnc_timeline_getPlayRate"}, "BIS_fnc_timeline_getPlayTime": {"version": "FNC", "tags": "", "description": "The time at which timeline started playing.", "example": "private _startTime = [timeline] call BIS_fnc_timeline_getPlayTime;", "docSyntax": "[timeline] call BIS_fnc_timeline_getPlayTime", "syntax": "[timeline] call BIS_fnc_timeline_getPlayTime"}, "BIS_fnc_timeline_getPosition": {"version": "FNC", "tags": "", "description": "Returns the position of given timeline.", "example": "private _position = [timeline] call BIS_fnc_timeline_getPosition;", "docSyntax": "[timeline] call BIS_fnc_timeline_getPosition", "syntax": "[timeline] call BIS_fnc_timeline_getPosition"}, "BIS_fnc_timeline_getSimulatedCurves": {"version": "FNC", "tags": "", "description": "Returns the simulated curves of a timeline.", "example": "private _curves = [timeline] call BIS_fnc_timeline_getSimulatedCurves;", "docSyntax": "[timeline] call BIS_fnc_timeline_getSimulatedCurves", "syntax": "[timeline] call BIS_fnc_timeline_getSimulatedCurves"}, "BIS_fnc_timeline_getStopTime": {"version": "FNC", "tags": "", "description": "The time at which timeline stopped playing", "example": "private _timeStopped = [timeline] call BIS_fnc_timeline_getStopTime;", "docSyntax": "[timeline] call BIS_fnc_timeline_getStopTime", "syntax": "[timeline] call BIS_fnc_timeline_getStopTime"}, "BIS_fnc_timeline_getTimeLeft": {"version": "FNC", "tags": "", "description": "The time left of given timeline.", "example": "private _timeLeft = [timeline] call BIS_fnc_timeline_getTimeLeft;", "docSyntax": "[timeline] call BIS_fnc_timeline_getTimeLeft", "syntax": "[timeline] call BIS_fnc_timeline_getTimeLeft"}, "BIS_fnc_timeline_init": {"version": "FNC", "tags": "", "description": "Initialized a timeline.", "example": "[timeline] call BIS_fnc_timeline_init;", "docSyntax": "[timeline, initPosition, length, playRate, loop] call BIS_fnc_timeline_init", "syntax": "[timeline,initPosition,length,playRate,loop] call BIS_fnc_timeline_init"}, "BIS_fnc_timeline_isFinished": {"version": "FNC", "tags": "", "description": "Returns whether given timeline has finished.", "example": "private _isFinished = [timeline] call BIS_fnc_timeline_isFinished;", "docSyntax": "[timeline] call BIS_fnc_timeline_isFinished", "syntax": "[timeline] call BIS_fnc_timeline_isFinished"}, "BIS_fnc_timeline_isLooping": {"version": "FNC", "tags": "", "description": "Returns whether given timeline is in loop mode.", "example": "private _isLooping = [timeline] call BIS_fnc_timeline_isLooping;", "docSyntax": "[timeline] call BIS_fnc_timeline_isLooping", "syntax": "[timeline] call BIS_fnc_timeline_isLooping"}, "BIS_fnc_timeline_isPaused": {"version": "FNC", "tags": "", "description": "Returns whether given timeline is paused.", "example": "private _isPaused = [timeline] call BIS_fnc_timeline_isPaused;", "docSyntax": "[timeline] call BIS_fnc_timeline_isPaused", "syntax": "[timeline] call BIS_fnc_timeline_isPaused"}, "BIS_fnc_timeline_isPlaying": {"version": "FNC", "tags": "", "description": "Whether given timeline is playing (can be paused at same time!)", "example": "private _isPlaying = [timeline] call BIS_fnc_timeline_isPlaying;", "docSyntax": "[timeline] call BIS_fnc_timeline_isPlaying", "syntax": "[timeline] call BIS_fnc_timeline_isPlaying"}, "BIS_fnc_timeline_isReverse": {"version": "FNC", "tags": "", "description": "Whether given timeline is in reverse mode", "example": "private _isReverse = [timeline] call BIS_fnc_timeline_isReverse;", "docSyntax": "[timeline] call BIS_fnc_timeline_isReverse", "syntax": "[timeline] call BIS_fnc_timeline_isReverse"}, "BIS_fnc_timeline_play": {"version": "FNC", "tags": "", "description": "Play given timeline if currently not playing. If we are playing and paused, we unpause.", "example": "[timeline] call BIS_fnc_timeline_play;", "docSyntax": "[timeline] call BIS_fnc_timeline_play", "syntax": "[timeline] call BIS_fnc_timeline_play"}, "BIS_fnc_timeline_setInterpMode": {"version": "FNC", "tags": "", "description": "Set's the interpolation mode of the timeline.", "example": "[timeline,15] call BIS_fnc_timeline_setInterpMode;", "docSyntax": "[timeline, mode] call BIS_fnc_timeline_setInterpMode", "syntax": "[timeline,mode] call BIS_fnc_timeline_setInterpMode"}, "BIS_fnc_timeline_setLength": {"version": "FNC", "tags": "", "description": "Set's the length of this timeline in seconds.", "example": "[timeline,5.5] call BIS_fnc_timeline_setLength;", "docSyntax": "[timeline, length] call BIS_fnc_timeline_setLength", "syntax": "[timeline,length] call BIS_fnc_timeline_setLength"}, "BIS_fnc_timeline_setLoop": {"version": "FNC", "tags": "", "description": "Set's this timeline playback loop mode", "example": "[timeline] call BIS_fnc_timeline_setLoop;", "docSyntax": "[timeline, loop] call BIS_fnc_timeline_setLoop", "syntax": "[timeline,loop] call BIS_fnc_timeline_setLoop"}, "BIS_fnc_timeline_setPause": {"version": "FNC", "tags": "", "description": "Pauses or unpauses timeline.", "example": "[timeline] call BIS_fnc_timeline_setPause;", "docSyntax": "[timeline, pause] call BIS_fnc_timeline_setPause", "syntax": "[timeline,pause] call BIS_fnc_timeline_setPause"}, "BIS_fnc_timeline_setPlayRate": {"version": "FNC", "tags": "", "description": "Sets playrate of timeline.", "example": "[timeline,2] call BIS_fnc_timeline_setPlayRate;", "docSyntax": "[timeline, rate] call BIS_fnc_timeline_setPlayRate", "syntax": "[timeline,rate] call BIS_fnc_timeline_setPlayRate"}, "BIS_fnc_timeline_setPosition": {"version": "FNC", "tags": "", "description": "Sets position of timeline.", "example": "[timeline,2] call BIS_fnc_timeline_setPosition;", "docSyntax": "[timeline, position] call BIS_fnc_timeline_setPosition", "syntax": "[timeline,position] call BIS_fnc_timeline_setPosition"}, "BIS_fnc_timeline_setReverse": {"version": "FNC", "tags": "", "description": "Change direction of timeline.", "example": "[timeline, false] call BIS_fnc_timeline_setReverse;", "docSyntax": "[timeline, reverse] call BIS_fnc_timeline_setReverse", "syntax": "[timeline,reverse] call BIS_fnc_timeline_setReverse"}, "BIS_fnc_timeline_simulateCurves": {"version": "FNC", "tags": "", "description": "/* Author: Nelson Duarte <@Nelson_G_Duarte> Description: Sets this timeline playback as reverse or not. Parameter(s): _this select 0: Object - The timeline _this select 1: Alpha - Current timeline alpha _this select 1: DeltaT - Delta time Returns: Nothing */", "docSyntax": "[] call BIS_fnc_timeline_simulateCurves", "syntax": "[] call BIS_fnc_timeline_simulateCurves"}, "BIS_fnc_timeline_stop": {"version": "FNC", "tags": "", "description": "Stops a timeline.", "example": "[timeline] call BIS_fnc_timeline_stop;", "docSyntax": "[timeline] call BIS_fnc_timeline_stop", "syntax": "[timeline] call BIS_fnc_timeline_stop"}, "BIS_fnc_timeline_tick": {"version": "FNC", "tags": "", "description": "Ticks a timeline.", "example": "[timeline] call BIS_fnc_timeline_tick;", "docSyntax": "[timeline] call BIS_fnc_timeline_tick", "syntax": "[timeline] call BIS_fnc_timeline_tick"}, "BIS_fnc_timeToString": {"version": "FNC", "tags": "", "description": "This function returns a 24-hour time as a string (or array) from a decimal.", "example": "private _time = 7.36; [_time] call BIS_fnc_timeToString; //\u00a007:21:36", "docSyntax": "[time, format] call BIS_fnc_timeToString", "syntax": "[<scalar>,format] call BIS_fnc_timeToString"}, "BIS_fnc_titlecard": {"version": "FNC", "tags": "", "description": "Display a mission-specific titlecard before the mission begins. Only works the first time it is called.", "example": "[\"\\a3\\missions_f_epb\\video\\b_out2_quotation.ogv\", \"your translation\"] call BIS_fnc_titlecard;", "docSyntax": "[path, subtitle] call BIS_fnc_titlecard", "syntax": "[path,subtitle] call BIS_fnc_titlecard"}, "BIS_fnc_titleText": {"version": "FNC", "tags": "", "description": "Display given string as structured text.", "example": "\"Stratis, 2035-07-14 0130<br />A dark night ahead\u2026\" call BIS_fnc_titleText;", "docSyntax": "message call BIS_fnc_titleText", "syntax": "message call BIS_fnc_titleText"}, "BIS_fnc_toggleCuratorVisionMode": {"version": "FNC", "tags": "", "description": "Toggle curator vision mode.", "example": "[Curator, -2] call BIS_fnc_toggleCuratorVisionMode;", "docSyntax": "[curator, mode] call BIS_fnc_toggleCuratorVisionMode", "syntax": "[curator,mode] call BIS_fnc_toggleCuratorVisionMode"}, "BIS_fnc_toUpperDisplayTexts": {"version": "FNC", "tags": "", "description": "Converts text of selected classes in one display to upper-case except classes with name PlayersName. Also searches inside CT_CONTROLS_GROUPs.", "example": "[\"RscDisplayOptionsAudio\", [\"RscText\"]] call BIS_fnc_toUpperDisplayTexts;", "docSyntax": "[displayClass, controlClasses, blacklist] call BIS_fnc_toUpperDisplayTexts", "syntax": "[displayClass,controlClasses,blacklist] call BIS_fnc_toUpperDisplayTexts"}, "BIS_fnc_traceBullets": {"version": "FNC", "tags": "", "description": "Visualise unit's bullet trajectories. Can only be used on one shooter in a single instance.", "example": "[player] spawn BIS_fnc_traceBullets;", "docSyntax": "[unit, number] call BIS_fnc_traceBullets", "syntax": "[<objUnit>,<scalar>] call BIS_fnc_traceBullets"}, "BIS_fnc_trackMissionTime": {"version": "FNC", "tags": "", "description": "Tracks mission time by storing time in profileNamespace.", "example": "[true, true] call BIS_fnc_trackMissionTime; //\u00a0Delete saved mission time", "docSyntax": "[save, delete] call BIS_fnc_trackMissionTime", "syntax": "[save,delete] call BIS_fnc_trackMissionTime"}, "BIS_fnc_transformVectorDirAndUp": {"version": "FNC", "tags": "", "description": "Rotates both vectorDir and vectorUp on 3 axes: z (yaw), x (pitch) and y (roll). Positive angle direction is according to the right hand rule.", "example": "private _vDirUp = [[vectorDirVisual uav, vectorUpVisual uav], 0, 0, 90] call BIS_fnc_transformVectorDirAndUp;", "docSyntax": "[vectorDirAndUp, yaw, pitch, roll] call BIS_fnc_transformVectorDirAndUp", "syntax": "[vectorDirAndUp,yaw,pitch,roll] call BIS_fnc_transformVectorDirAndUp"}, "BIS_fnc_transportService": {"version": "FNC", "tags": "", "description": "/* File: transportService.sqf Description: Transportation system Parameter(s): 1: <object> unit allowed to use the transport system 2: <object> vehicle providing transport 3: <array> positions to be chosen by player; accepted strings are \"pickup\" and \"unload\", the second position is defined by the next paramter (OPTIONAL) 4: <position> (NEEDED ONLY IF PARAMETER #3 IS USED) Returns: N/A */", "docSyntax": "[caller, vehicle, position, mainScope, secopScope] call BIS_fnc_transportService", "syntax": "[caller,<objVehicle>,position,mainScope,secopScope] call BIS_fnc_transportService"}, "BIS_fnc_tridentClient": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_tridentExecute": {"version": "FNC", "tags": "", "description": "Execute a code based on Trident relationship.", "example": "[west, east, { params [\"_higherScore\", \"_lowerScore\", \"_areAllied\"] }] call BIS_fnc_tridentExecute;", "docSyntax": "[side_1, side_2, codeFriendly, codeEnemy] call BIS_fnc_tridentExecute", "syntax": "[side_1,side_2,codeFriendly,codeEnemy] call BIS_fnc_tridentExecute"}, "BIS_fnc_tridentGetRelationship": {"version": "FNC", "tags": "", "description": "Gets the relationship of competing Trident sides. The value slowly decreases towards 0.", "example": "[west, east] call BIS_fnc_tridentGetRelationship;", "docSyntax": "[sideA, sideB] call BIS_fnc_tridentGetRelationship", "syntax": "[sideA,sideB] call BIS_fnc_tridentGetRelationship"}, "BIS_fnc_tridentHandleDamage": {"version": "FNC", "tags": "", "description": "Register a unit as Trident unit. When competing sides are still friendly and the unit is killed by the competing side, the killer won't be punsihed by negative score. Instead, Trident relationship will decrease.", "example": "BIS_tridentObject call BIS_fnc_tridentHandleDamage;", "docSyntax": "object call BIS_fnc_tridentHandleDamage", "syntax": "<object> call BIS_fnc_tridentHandleDamage"}, "BIS_fnc_tridentSetRelationship": {"version": "FNC", "tags": "", "description": "Set relationship of competing Trident sides. When the value reaches threshold, side relationship will change. The value slowly decreases towards 0.", "example": "[west, east, 0.5, true] call BIS_fnc_tridentSetRelationship;", "docSyntax": "[side1, side2, value, absolute] call BIS_fnc_tridentSetRelationship", "syntax": "[side1,side2,<scalar>,absolute] call BIS_fnc_tridentSetRelationship"}, "BIS_fnc_triggerToMarker": {"version": "FNC", "tags": "", "description": "Makes an existing or new trigger cover a marker area.", "example": "private _createdTrigger = [objNull, myAreaTrigger] call BIS_fnc_triggerToMarker;", "docSyntax": "[trigger, markerName] call BIS_fnc_triggerToMarker", "syntax": "[<objTrigger>,<string>] call BIS_fnc_triggerToMarker"}, "BIS_fnc_trimString": {"version": "FNC", "tags": "", "description": "Get a substring out of the string.", "example": "[\"dreaded_is_the_man\", 0, 6] call BIS_fnc_trimString; //\u00a0will return \"dreaded\"", "docSyntax": "[someText, beginning, length] call BIS_fnc_trimString", "syntax": "[someText,beginning,length] call BIS_fnc_trimString"}, "BIS_fnc_turretConfig": {"version": "FNC", "tags": "", "description": "Returns vehicle turret config for the turret given by the turret path.", "example": "getNumber ([\"B_APC_Wheeled_01_cannon_F\", [0,0]] call BIS_fnc_turretConfig >> \"hasGunner\") > 0;", "docSyntax": "[vehicle, turret] call BIS_fnc_turretConfig", "syntax": "[<objVehicle>,turret] call BIS_fnc_turretConfig"}, "BIS_fnc_twoWingDoorNoHandleClose": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_twoWingDoorNoHandleClose", "syntax": "[] call BIS_fnc_twoWingDoorNoHandleClose"}, "BIS_fnc_twoWingDoorNoHandleOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_twoWingDoorNoHandleOpen", "syntax": "[] call BIS_fnc_twoWingDoorNoHandleOpen"}, "BIS_fnc_twoWingDoorOneHandleClose": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_twoWingDoorOneHandleClose", "syntax": "[] call BIS_fnc_twoWingDoorOneHandleClose"}, "BIS_fnc_twoWingDoorOneHandleOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_twoWingDoorOneHandleOpen", "syntax": "[] call BIS_fnc_twoWingDoorOneHandleOpen"}, "BIS_fnc_twoWingDoorTwoHandleClose": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_twoWingDoorTwoHandleClose", "syntax": "[] call BIS_fnc_twoWingDoorTwoHandleClose"}, "BIS_fnc_twoWingDoorTwoHandleOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_twoWingDoorTwoHandleOpen", "syntax": "[] call BIS_fnc_twoWingDoorTwoHandleOpen"}, "BIS_fnc_twoWingSlideDoorClose": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_twoWingSlideDoorClose", "syntax": "[] call BIS_fnc_twoWingSlideDoorClose"}, "BIS_fnc_twoWingSlideDoorOpen": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_twoWingSlideDoorOpen", "syntax": "[] call BIS_fnc_twoWingSlideDoorOpen"}, "BIS_fnc_typeText": {"version": "FNC", "tags": "", "description": "Types a structured text on the screen, letter by letter, cursor blinking.", "example": "[ [ [\"CAMP ROGAIN,\", \"<t align = 'center' shadow = '1' size = '0.7' font='PuristaBold'>%1</t>\"], [\"RESUPPLY POINT\", \"<t align = 'center' shadow = '1' size = '0.7'>%1</t><br/>\"], [\"10 MINUTES LATER ...\", \"<t align = 'center' shadow = '1' size = '1.0'>%1</t>\", 15] ] ] spawn BIS_fnc_typeText;", "docSyntax": "[stringLines, posX, posY, rootFormat] spawn BIS_fnc_typeText", "syntax": "[stringLines,posX,posY,rootFormat] spawn BIS_fnc_typeText"}, "BIS_fnc_typeText2": {"version": "FNC", "tags": "", "description": "Types a structured text on the screen, letter by letter, cursor blinking. Note that line returns are manual, unlike BIS_fnc_typeText.", "example": "[ [ [\"CAMP ROGAIN, \", \"align = 'center' shadow = '1' size = '0.7' font='PuristaBold'\"], [\"RESUPPLY POINT\", \"align = 'center' shadow = '1' size = '0.7'\", \"#aaaaaa\"], [\"\", \"<br/>\"], //\u00a0line break [\"10 MINUTES LATER...\", \"align = 'center' shadow = '1' size = '1.0'\"] ] ] spawn BIS_fnc_typeText2;", "docSyntax": "[stringLines, posX, posY, alignBottom, rootFormat, abortParams, abortCond, playSounds] call BIS_fnc_typeText2", "syntax": "[stringLines,posX,posY,alignBottom,rootFormat,abortParams,abortCond,playSounds] call BIS_fnc_typeText2"}, "BIS_fnc_uniqueClasses": {"version": "FNC", "tags": "", "description": "/* Description: Composes array of classes with unique param (based on returned value of passed code). If class inherits the param from parent, it is not listed. Parameter(s): 0: CONFIG - class which is searched 1: CODE - code executed on class, which is passed as _this Returns: ARRAY - classes in format [class,value] class: CONFIG - class with unique param value: ANY - value returned by the passed code for the given class */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_unitAddon": {"version": "FNC", "tags": "", "description": "Return addon from CfgPatches to which a given object belongs to.", "example": "[player] call BIS_fnc_unitAddon;", "docSyntax": "[object] call BIS_fnc_unitAddon", "syntax": "[<object>] call BIS_fnc_unitAddon"}, "BIS_fnc_unitCapture": {"version": "FNC", "tags": "", "description": "Records movement data of input unit over a specified period of time. Simplified. Pressing the Esc key, the duration ending, or the unit dying ends the recording.", "example": "[BIS_Vehicle, 50, 30, true, 10] spawn BIS_fnc_unitCapture;", "docSyntax": "[unit, duration, FPS, firing, startTime] spawn BIS_fnc_unitCapture", "syntax": "[<objUnit>,duration,FPS,firing,startTime] spawn BIS_fnc_unitCapture"}, "BIS_fnc_unitCaptureFiring": {"version": "FNC", "tags": "", "description": "Records weapon fire data of input unit over a specified period of time. Pressing the ESC key, the duration ending, or the unit dying ends the recording.", "example": "[BIS_Vehicle, 50, 10] spawn BIS_fnc_unitCaptureFiring;", "docSyntax": "[unit, duration, startTime] spawn BIS_fnc_unitCaptureFiring", "syntax": "[<objUnit>,duration,startTime] spawn BIS_fnc_unitCaptureFiring"}, "BIS_fnc_unitCaptureSimple": {"version": "FNC", "tags": "", "description": "Records movement data of input unit over a specified period of time. Simplified. Pressing the Esc key, the duration ending, or the unit dying ends the recording.", "example": "[BIS_Vehicle, 50, 30, true, 10] spawn BIS_fnc_unitCaptureSimple;", "docSyntax": "[unit, duration, FPS, firing, startTime] spawn BIS_fnc_unitCaptureSimple", "syntax": "[<objUnit>,duration,FPS,firing,startTime] spawn BIS_fnc_unitCaptureSimple"}, "BIS_fnc_unitHeadgear": {"version": "FNC", "tags": "", "description": "Randomise headgear and facewear of a character.", "example": "[this] call BIS_fnc_unitHeadgear; //\u00a0headgear and face wear, same as [this, [], []] [this, [], []] call BIS_fnc_unitHeadgear; //\u00a0headgear only [this, nil, []] call BIS_fnc_unitHeadgear; //\u00a0facewear only [this, \"myTemplate\"] call BIS_fnc_unitHeadgear; //\u00a0class defined in Description.ext - CfgUnitTemplates", "docSyntax": "[unit, headgear, facewear] call BIS_fnc_unitHeadgear", "syntax": "[<objUnit>,headgear,facewear] call BIS_fnc_unitHeadgear"}, "BIS_fnc_unitPlay": {"version": "FNC", "tags": "", "description": "Plays back input movement data on input unit.", "example": "[vehicle player, _unitCaptureData] spawn BIS_fnc_unitPlay", "docSyntax": "[unit, data, varDone, stateIgnore, obsolete_1, obsolete_2, skipTime] spawn BIS_fnc_unitPlay", "syntax": "[<objUnit>,data,varDone,stateIgnore,obsolete_1,obsolete_2,skipTime] spawn BIS_fnc_unitPlay"}, "BIS_fnc_unitPlayFiring": {"version": "FNC", "tags": "", "description": "Plays back input weapon fire data on input unit.", "example": "private _capturedFireData = [[2.135, \"GAU8\", \"<NULL-object>\"]]; [BIS_Vehicle, _capturedData, true] spawn BIS_fnc_unitPlayFiring;", "docSyntax": "[unit, data, stateIgnore] spawn BIS_fnc_unitPlayFiring", "syntax": "[<objUnit>,data,stateIgnore] spawn BIS_fnc_unitPlayFiring"}, "BIS_fnc_unitPlaySimple": {"version": "FNC", "tags": "", "description": "Plays back input movement data on input unit. Simplified.", "example": "private _capturedData = [[0, [8208.26, 1953.13, 296.04], 67]]; [BIS_Vehicle, _capturedData, [BIS_Object, \"DoneRecording\"], true, false, 0.2, 5] spawn BIS_fnc_unitPlaySimple;", "docSyntax": "[unit, data, varDone, stateIngnore, debug, sleep, skipTime] spawn BIS_fnc_unitPlaySimple", "syntax": "[<objUnit>,data,varDone,stateIngnore,debug,sleep,skipTime] spawn BIS_fnc_unitPlaySimple"}, "BIS_fnc_unitVector": {"version": "FNC", "tags": "", "description": "/************************************************************ Unit Vector Returns the unit vector for the passed vector (vector pointing in the same direction, but with magnitude == 1) This does not modify the original array. The array can have any number of elements (2, 3, etc). ************************************************************/", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_unpackStaticWeapon": {"version": "FNC", "tags": "", "description": "This function will move given support team to the given weapon position. The weapon crew will unpack carried weapon and start watching given target position. Requires three personnel in the team: Team Leader, Gunner and Asst. Gunner. This function is MP compatible.", "example": "[leader1, \"weapon_mrk\", \"target_mrk\"] call BIS_fnc_unpackStaticWeapon;", "docSyntax": "[group, weaponPos, targetPos, leaderPos] call BIS_fnc_unpackStaticWeapon", "syntax": "[<objGroup>,weaponPos,targetPos,<array>] call BIS_fnc_unpackStaticWeapon"}, "BIS_fnc_updatePlayerArray": {"version": "FNC", "tags": "", "description": "Updates dead player objects to their current respawned objects.", "example": "private _newPlayerObjects = _oldPlayerObjects call BIS_fnc_updatePlayerArray;", "docSyntax": "[input] call BIS_fnc_updatePlayerArray", "syntax": "[input] call BIS_fnc_updatePlayerArray"}, "BIS_fnc_validateParametersOO": {"version": "FNC", "tags": "", "description": "Validating the parameters of a certain method in a class.", "example": "[\"someClass\",\"someMethod\",[5,47,\"test\"]] call BIS_fnc_validateParametersOO;", "docSyntax": "[class,method,params] call BIS_fnc_validateParametersOO", "syntax": "[class,method,<any>] call BIS_fnc_validateParametersOO"}, "BIS_fnc_variableSpaceAdd": {"version": "FNC", "tags": "", "description": "Add element to variable from someone's variable space.", "example": "[player, \"someVar\", 1337, true, true] call BIS_fnc_variableSpaceAdd;", "docSyntax": "[object, varName, element, global, inArray] call BIS_fnc_variableSpaceAdd", "syntax": "[<object>,varName,element,global,inArray] call BIS_fnc_variableSpaceAdd"}, "BIS_fnc_variableSpaceRemove": {"version": "FNC", "tags": "", "description": "Remove element from variable from someone's variable space.", "example": "[player, \"someVar\", 1337, true] call BIS_fnc_variableSpaceRemove;", "docSyntax": "[object,varName,element,global,inArray] call BIS_fnc_variableSpaceRemove", "syntax": "[<object>,varName,element,global,inArray] call BIS_fnc_variableSpaceRemove"}, "BIS_fnc_vectorAdd": {"version": "FNC", "tags": "", "description": "Returns the sum of two vectors.", "example": "[[1, 1, 1, 1, 1], [2, 5, 3, 1, 1]] call BIS_fnc_vectorAdd; //\u00a0returns [3,6,4,2,2]", "docSyntax": "[vector1, vector2] call BIS_fnc_vectorAdd", "syntax": "[vector1,vector2] call BIS_fnc_vectorAdd"}, "BIS_fnc_vectorDiff": {"version": "FNC", "tags": "", "description": "Returns a vector that is the difference between two vectors.", "example": "private _vectorDiff = [[1,2,3], [5,6,7]] call BIS_fnc_vectorDiff;", "docSyntax": "[vector1, vector2] call BIS_fnc_vectorDiff", "syntax": "[vector1,vector2] call BIS_fnc_vectorDiff"}, "BIS_fnc_vectorDirAndUpRelative": {"version": "FNC", "tags": "", "description": "Returns vectorDirAndUp of object 1 relative to object 2", "example": "private _vectorDirAndUp = [tank, car] call BIS_fnc_vectorDirAndUpRelative;", "docSyntax": "[object1, object2, visual] call BIS_fnc_vectorDirAndUpRelative", "syntax": "[object1,object2,visual] call BIS_fnc_vectorDirAndUpRelative"}, "BIS_fnc_vectorDivide": {"version": "FNC", "tags": "", "description": "Divides vector by scalar, by dividing all vector elements.", "example": "[[123, 456, 789], 5] call BIS_fnc_vectorDivide;", "docSyntax": "[vector, divider] call BIS_fnc_vectorDivide", "syntax": "[vector,divider] call BIS_fnc_vectorDivide"}, "BIS_fnc_vectorFromXToY": {"version": "FNC", "tags": "", "description": "Returns a unit vector that 'points' from vector1 to vector2. This is a very useful function as it can be used with the velocity command to move an object from one position to another (i.e vector1 to vector2).", "example": "private _resultVector = [getPosASL vehicle player, getPosASL airTarget] call BIS_fnc_vectorFromXToY;", "docSyntax": "[vector1, vector2] call BIS_fnc_vectorFromXToY", "syntax": "[vector1,vector2] call BIS_fnc_vectorFromXToY"}, "BIS_fnc_vectorMultiply": {"version": "FNC", "tags": "", "description": "Multiplies 3D vector by a scalar.", "example": "private _newVector = [[1,2,3], 3] call BIS_fnc_vectorMultiply; //\u00a0returns [3,6,9]", "docSyntax": "[vector, factor] call BIS_fnc_vectorMultiply", "syntax": "[vector,factor] call BIS_fnc_vectorMultiply"}, "BIS_fnc_vehicleCrewTurrets": {"version": "FNC", "tags": "", "description": "Returns vehicle crew turrets, which will be filled with crew if createVehicleCrew command is executed on the vehicle. If vehicle class is passed as param, all vehicle crew turrets are returned.", "example": "\"B_APC_Wheeled_01_cannon_F\" call BIS_fnc_vehicleCrewTurrets;", "docSyntax": "vehicle call BIS_fnc_vehicleCrewTurrets", "syntax": "<objVehicle> call BIS_fnc_vehicleCrewTurrets"}, "BIS_fnc_vehicleRoles": {"version": "FNC", "tags": "", "description": "Returns vehicle roles.", "example": "cursorObject call BIS_fnc_vehicleRoles;", "docSyntax": "vehicle call BIS_fnc_vehicleRoles", "syntax": "<objVehicle> call BIS_fnc_vehicleRoles"}, "BIS_fnc_version": {"version": "FNC", "tags": "", "description": "Detects which Arma 2 expansions and addons are available. Only works in Arma 2/Arma 2: Operation Arrowhead.", "example": "private _availableExpansions = call BIS_fnc_version;", "docSyntax": "call BIS_fnc_version", "syntax": "call BIS_fnc_version"}, "BIS_fnc_versionInfo": {"version": "FNC", "tags": "", "description": "Fills the first passed control with game type and version number, and positions both controls according to the game type.", "example": "[_ctrlVersion, _ctrlModded] call BIS_fnc_versionInfo;", "docSyntax": "[gameTypeVersionControl, modControl] call BIS_fnc_versionInfo", "syntax": "[gameTypeVersionControl,modControl] call BIS_fnc_versionInfo"}, "BIS_fnc_VRCourseBallistics1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseBallistics2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseBallistics3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseBallistics4": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingActions1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingActions2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingActions3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingBehaviour1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingBehaviour2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingBehaviour3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingMovement1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingMovement2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingVehicles1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingVehicles2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseCommandingVehicles3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliAdvanced1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliAdvanced2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliAdvanced3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliAdvanced4": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliAdvanced5": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliAdvanced6": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliBasics1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliBasics2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliBasics3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliSlingload1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliWeapons1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliWeapons2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliWeapons3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseHeliWeapons4": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseLaunchers1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseLaunchers2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseLaunchers3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCoursePlaceables1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCoursePlaceables2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCoursePlaceables3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseTargetDesignation1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseTargetDesignation2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseTargetDesignation3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseWeaponHandlingA1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseWeaponHandlingA2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseWeaponHandlingA3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseWeaponHandlingB1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseWeaponHandlingB2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseWeaponHandlingB3": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseWeaponHandlingC1": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRCourseWeaponHandlingC2": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_VRDrawBorder": {"version": "FNC", "tags": "", "description": "Visualizes area border (used primarily for VR missions).", "example": "[[0,0,0], 200] call BIS_fnc_VRDrawBorder;", "docSyntax": "[center, radius] call BIS_fnc_VRDrawBorder", "syntax": "[center,radius] call BIS_fnc_VRDrawBorder"}, "BIS_fnc_VRDrawGrid": {"version": "FNC", "tags": "", "description": "Visualizes surface grid (used primarily for VR missions).", "example": "[getPosATL player, [0.078, 0.3647, 0.0]] call BIS_fnc_VRDrawGrid;", "docSyntax": "[location, colour] call BIS_fnc_VRDrawGrid", "syntax": "[location,colour] call BIS_fnc_VRDrawGrid"}, "BIS_fnc_VREffectKilled": {"version": "FNC", "tags": "", "description": "Delete body of a virtual soldier after he's killed.", "example": "[player] call BIS_fnc_VREffectKilled;", "docSyntax": "[object, instant, delay] call BIS_fnc_VREffectKilled", "syntax": "[<object>,instant,<scalar>] call BIS_fnc_VREffectKilled"}, "BIS_fnc_VRFadeIn": {"version": "FNC", "tags": "", "description": "Fade In effect for VR.", "example": "call BIS_fnc_VRFadeIn;", "docSyntax": "call BIS_fnc_VRFadeIn", "syntax": "call BIS_fnc_VRFadeIn"}, "BIS_fnc_VRFadeOut": {"version": "FNC", "tags": "", "description": "Fade Out effect for VR.", "example": "call BIS_fnc_VRFadeOut;", "docSyntax": "call BIS_fnc_VRFadeOut", "syntax": "call BIS_fnc_VRFadeOut"}, "BIS_fnc_VRHitpart": {"version": "FNC", "tags": "", "description": "Initialize hit effects on VR targets.", "example": "private _delta = [someObject, 60] call BIS_fnc_VRHitpart;", "docSyntax": "[object,time] call BIS_fnc_VRHitpart", "syntax": "[<object>,<scalar>] call BIS_fnc_VRHitpart"}, "BIS_fnc_VRSpawnEffect": {"version": "FNC", "tags": "", "description": "VR (unit) spawn effect.", "example": "[player, false, 5] call BIS_fnc_VRSpawnEffect;", "docSyntax": "[object, reverse, size] call BIS_fnc_VRSpawnEffect", "syntax": "[<object>,reverse,size] call BIS_fnc_VRSpawnEffect"}, "BIS_fnc_VRSpawnSelector": {"version": "FNC", "tags": "", "description": "Spawns the course selector (used primarily for VR missions).", "example": "[[0,0,0], \"exit\"] call BIS_fnc_VRSpawnSelector;", "docSyntax": "[center, type] call BIS_fnc_VRSpawnSelector", "syntax": "[center,type] call BIS_fnc_VRSpawnSelector"}, "BIS_fnc_VRTimer": {"version": "FNC", "tags": "", "description": "Timer for VR and time trials. The following missionNamespace variables can be used:", "example": "[] spawn BIS_fnc_VRTimer;", "docSyntax": "[colour] spawn BIS_fnc_VRTimer", "syntax": "[colour] spawn BIS_fnc_VRTimer"}, "BIS_fnc_weaponAddon": {"version": "FNC", "tags": "", "description": "Return addon from CfgPatches to which a given weapon class belongs to.", "example": "\"arifle_MX_F\" call BIS_fnc_weaponAddon; //\u00a0returns \"A3_Weapons_F_Rifles_MX\"", "docSyntax": "classname call BIS_fnc_weaponAddon", "syntax": "classname call BIS_fnc_weaponAddon"}, "BIS_fnc_weaponComponents": {"version": "FNC", "tags": "", "description": "Returns array with classname of the parent weapon (without attachments), followed by classnames of all its attachments.", "example": "\"arifle_mx_aco_pointer_f\" call BIS_fnc_weaponComponents; //\u00a0[\"arifle_mx_f\",\"optic_aco\",\"acc_pointer_ir\"]", "docSyntax": "[classname] call BIS_fnc_weaponComponents", "syntax": "[classname] call BIS_fnc_weaponComponents"}, "BIS_fnc_weaponDirectionRelative": {"version": "FNC", "tags": "", "description": "Returns relative direction vector of given weapon for the given vehicle", "example": "private _relweapondir = [tank, \"cannon_105mm\"] call BIS_fnc_weaponDirectionRelative;", "docSyntax": "[vehicle, weapon, visual] call BIS_fnc_weaponDirectionRelative", "syntax": "[<objVehicle>,<string>,visual] call BIS_fnc_weaponDirectionRelative"}, "BIS_fnc_weaponsEntityType": {"version": "FNC", "tags": "", "description": "Return object's weapons as defined in config. Scans also turrets and pylons.", "example": "[\"B_Soldier_GL_F\"] call BIS_fnc_weaponsEntityType; //\u00a0returns e.g [\"arifle_MX_GL_ACO_F\",\"hgun_P07_F\",\"Throw\",\"Put\"]", "docSyntax": "class call BIS_fnc_weaponsEntityType", "syntax": "class call BIS_fnc_weaponsEntityType"}, "BIS_fnc_WLAICore": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLAICore", "syntax": "[] call BIS_fnc_WLAICore"}, "BIS_fnc_WLAIPathSegmentation": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Sets up a path and behavior for AI to a specific sector. */", "docSyntax": "[] call BIS_fnc_WLAIPathSegmentation", "syntax": "[] call BIS_fnc_WLAIPathSegmentation"}, "BIS_fnc_WLAIPurchases": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLAIPurchases", "syntax": "[] call BIS_fnc_WLAIPurchases"}, "BIS_fnc_WLAircraftArrival": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Spawns a requested aircraft and makes it land properly. */", "docSyntax": "[] call BIS_fnc_WLAircraftArrival", "syntax": "[] call BIS_fnc_WLAircraftArrival"}, "BIS_fnc_WLAirdrop": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Spawns a requested asset and drops it on a specific location. */", "docSyntax": "[] call BIS_fnc_WLAirdrop", "syntax": "[] call BIS_fnc_WLAirdrop"}, "BIS_fnc_WLAISectorScan": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Sector scan routine for AI. */", "docSyntax": "[] call BIS_fnc_WLAISectorScan", "syntax": "[] call BIS_fnc_WLAISectorScan"}, "BIS_fnc_WLArsenalFilter": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLArsenalFilter", "syntax": "[] call BIS_fnc_WLArsenalFilter"}, "BIS_fnc_WLCalculateIncome": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Recalculate CP income for a specific side. */", "docSyntax": "[] call BIS_fnc_WLCalculateIncome", "syntax": "[] call BIS_fnc_WLCalculateIncome"}, "BIS_fnc_WLCalculateSectorConnections": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Evaluates sector grid so it can be drawn on map. */", "docSyntax": "[] call BIS_fnc_WLCalculateSectorConnections", "syntax": "[] call BIS_fnc_WLCalculateSectorConnections"}, "BIS_fnc_WLClientInit": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: System init (client-side). */", "docSyntax": "[] call BIS_fnc_WLClientInit", "syntax": "[] call BIS_fnc_WLClientInit"}, "BIS_fnc_WLDebug": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Debug logging. */", "docSyntax": "[] call BIS_fnc_WLDebug", "syntax": "[] call BIS_fnc_WLDebug"}, "BIS_fnc_WLDefenceSetup": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Requested static weapon positionining routine. */", "docSyntax": "[] call BIS_fnc_WLDefenceSetup", "syntax": "[] call BIS_fnc_WLDefenceSetup"}, "BIS_fnc_WLDropPurchase": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Airdrop location selection routine. */", "docSyntax": "[] call BIS_fnc_WLDropPurchase", "syntax": "[] call BIS_fnc_WLDropPurchase"}, "BIS_fnc_WLFundsInfo": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Funds & sector status UI handle */", "docSyntax": "[] call BIS_fnc_WLFundsInfo", "syntax": "[] call BIS_fnc_WLFundsInfo"}, "BIS_fnc_WLGarrisonRetreat": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLGarrisonRetreat", "syntax": "[] call BIS_fnc_WLGarrisonRetreat"}, "BIS_fnc_WLInit": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: System init. */", "docSyntax": "[] call BIS_fnc_WLInit", "syntax": "[] call BIS_fnc_WLInit"}, "BIS_fnc_WLInSectorArea": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Checks if the given unit is inside a specific sector. */", "docSyntax": "[] call BIS_fnc_WLInSectorArea", "syntax": "[] call BIS_fnc_WLInSectorArea"}, "BIS_fnc_WLLoadoutApply": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Reapply a saved loadout. */", "docSyntax": "[] call BIS_fnc_WLLoadoutApply", "syntax": "[] call BIS_fnc_WLLoadoutApply"}, "BIS_fnc_WLLoadoutGrab": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Save a loadout for later. */", "docSyntax": "[] call BIS_fnc_WLLoadoutGrab", "syntax": "[] call BIS_fnc_WLLoadoutGrab"}, "BIS_fnc_WLMostVotedSector": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Evaluates which sector was most voted for. */", "docSyntax": "[] call BIS_fnc_WLMostVotedSector", "syntax": "[] call BIS_fnc_WLMostVotedSector"}, "BIS_fnc_WLNavalArrival": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Spawns a requested naval asset. */", "docSyntax": "[] call BIS_fnc_WLNavalArrival", "syntax": "[] call BIS_fnc_WLNavalArrival"}, "BIS_fnc_WLOpenArsenal": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Opens Arsenal interface. */", "docSyntax": "[] call BIS_fnc_WLOpenArsenal", "syntax": "[] call BIS_fnc_WLOpenArsenal"}, "BIS_fnc_WLOSD": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Manages temporary info in hints. */", "docSyntax": "[] call BIS_fnc_WLOSD", "syntax": "[] call BIS_fnc_WLOSD"}, "BIS_fnc_WLOutlineIcons": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Handles icons selection visualization in map. */", "docSyntax": "[] call BIS_fnc_WLOutlineIcons", "syntax": "[] call BIS_fnc_WLOutlineIcons"}, "BIS_fnc_WLParseAssetList": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLParseAssetList", "syntax": "[] call BIS_fnc_WLParseAssetList"}, "BIS_fnc_WLPlayersTracking": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Keeps track of player unit & its marker. */", "docSyntax": "[] call BIS_fnc_WLPlayersTracking", "syntax": "[] call BIS_fnc_WLPlayersTracking"}, "BIS_fnc_WLPlayersTrackingServer": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Manage connecting and disconnecting players. */", "docSyntax": "[] call BIS_fnc_WLPlayersTrackingServer", "syntax": "[] call BIS_fnc_WLPlayersTrackingServer"}, "BIS_fnc_WLPurchaseMenu": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Purchase interface handle. */", "docSyntax": "[] call BIS_fnc_WLPurchaseMenu", "syntax": "[] call BIS_fnc_WLPurchaseMenu"}, "BIS_fnc_WLRandomPosRect": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Returns a random position in rectangle area. */", "docSyntax": "[] call BIS_fnc_WLRandomPosRect", "syntax": "[] call BIS_fnc_WLRandomPosRect"}, "BIS_fnc_WLRecalculateServices": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Refreshes a side's available services. */", "docSyntax": "[] call BIS_fnc_WLRecalculateServices", "syntax": "[] call BIS_fnc_WLRecalculateServices"}, "BIS_fnc_WLRemovalHandle": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Units & vehicles garbage collector. */", "docSyntax": "[] call BIS_fnc_WLRemovalHandle", "syntax": "[] call BIS_fnc_WLRemovalHandle"}, "BIS_fnc_WLReputation": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Calculate player's reputiation (how rapidly they lose subordinates). */", "docSyntax": "[] call BIS_fnc_WLReputation", "syntax": "[] call BIS_fnc_WLReputation"}, "BIS_fnc_WLRequestFastTravel": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Fast travel routine. */", "docSyntax": "[] call BIS_fnc_WLRequestFastTravel", "syntax": "[] call BIS_fnc_WLRequestFastTravel"}, "BIS_fnc_WLRequestFundsTransfer": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Funds transfer routine. */", "docSyntax": "[] call BIS_fnc_WLRequestFundsTransfer", "syntax": "[] call BIS_fnc_WLRequestFundsTransfer"}, "BIS_fnc_WLRequestPurchase": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Handles proper purchase subroutine based on asset type. */", "docSyntax": "[] call BIS_fnc_WLRequestPurchase", "syntax": "[] call BIS_fnc_WLRequestPurchase"}, "BIS_fnc_WLRequestSectorScan": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Sector scan routine (selection part). */", "docSyntax": "[] call BIS_fnc_WLRequestSectorScan", "syntax": "[] call BIS_fnc_WLRequestSectorScan"}, "BIS_fnc_WLRequestVotingReset": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Voting reset routine. */", "docSyntax": "[] call BIS_fnc_WLRequestVotingReset", "syntax": "[] call BIS_fnc_WLRequestVotingReset"}, "BIS_fnc_WLSectorFundsPayoff": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSectorFundsPayoff", "syntax": "[] call BIS_fnc_WLSectorFundsPayoff"}, "BIS_fnc_WLSectorHandle": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSectorHandle", "syntax": "[] call BIS_fnc_WLSectorHandle"}, "BIS_fnc_WLSectorHandleServer": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSectorHandleServer", "syntax": "[] call BIS_fnc_WLSectorHandleServer"}, "BIS_fnc_WLSectorIconUpdate": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Handles sector icons. */", "docSyntax": "[] call BIS_fnc_WLSectorIconUpdate", "syntax": "[] call BIS_fnc_WLSectorIconUpdate"}, "BIS_fnc_WLSectorInit": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Spawns sector garrison based on its size, sends a patrolling vehicle if feasible. */", "docSyntax": "[] call BIS_fnc_WLSectorInit", "syntax": "[] call BIS_fnc_WLSectorInit"}, "BIS_fnc_WLSectorListing": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Keeps track of sectors status for a given side. */", "docSyntax": "[] call BIS_fnc_WLSectorListing", "syntax": "[] call BIS_fnc_WLSectorListing"}, "BIS_fnc_WLSectorPopulate": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Spawns sector garrison. */", "docSyntax": "[] call BIS_fnc_WLSectorPopulate", "syntax": "[] call BIS_fnc_WLSectorPopulate"}, "BIS_fnc_WLSectorScanHandle": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSectorScanHandle", "syntax": "[] call BIS_fnc_WLSectorScanHandle"}, "BIS_fnc_WLSectorsCommonInit": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Sectors init (client-side). */", "docSyntax": "[] call BIS_fnc_WLSectorsCommonInit", "syntax": "[] call BIS_fnc_WLSectorsCommonInit"}, "BIS_fnc_WLSectorSelectionEnd": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Sector voting termination subroutine. */", "docSyntax": "[] call BIS_fnc_WLSectorSelectionEnd", "syntax": "[] call BIS_fnc_WLSectorSelectionEnd"}, "BIS_fnc_WLSectorSelectionHandle": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSectorSelectionHandle", "syntax": "[] call BIS_fnc_WLSectorSelectionHandle"}, "BIS_fnc_WLSectorSelectionHandleServer": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSectorSelectionHandleServer", "syntax": "[] call BIS_fnc_WLSectorSelectionHandleServer"}, "BIS_fnc_WLSectorSelectionStart": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Initializes sector voting. */", "docSyntax": "[] call BIS_fnc_WLSectorSelectionStart", "syntax": "[] call BIS_fnc_WLSectorSelectionStart"}, "BIS_fnc_WLSectorsSetup": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Sectors init (server-side). */", "docSyntax": "[] call BIS_fnc_WLSectorsSetup", "syntax": "[] call BIS_fnc_WLSectorsSetup"}, "BIS_fnc_WLSectorTaskHandle": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSectorTaskHandle", "syntax": "[] call BIS_fnc_WLSectorTaskHandle"}, "BIS_fnc_WLSectorUpdate": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Sector update after its owner changed. */", "docSyntax": "[] call BIS_fnc_WLSectorUpdate", "syntax": "[] call BIS_fnc_WLSectorUpdate"}, "BIS_fnc_WLSeizingBarHandle": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Handles the seizing bar element in UI. */", "docSyntax": "[] call BIS_fnc_WLSeizingBarHandle", "syntax": "[] call BIS_fnc_WLSeizingBarHandle"}, "BIS_fnc_WLSendResponseTeam": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Spawns and manages response teams. */", "docSyntax": "[] call BIS_fnc_WLSendResponseTeam", "syntax": "[] call BIS_fnc_WLSendResponseTeam"}, "BIS_fnc_WLShowInfo": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Hints buffer. */", "docSyntax": "[] call BIS_fnc_WLShowInfo", "syntax": "[] call BIS_fnc_WLShowInfo"}, "BIS_fnc_WLSideToFaction": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Returns the primary faction for a given side. */", "docSyntax": "[] call BIS_fnc_WLSideToFaction", "syntax": "[] call BIS_fnc_WLSideToFaction"}, "BIS_fnc_WLSmoothText": {"version": "FNC", "tags": "", "description": "Display given text smoothly.", "example": "[\"Hello, hidden FX\", 2, 3, [1,0,0,1], true] spawn BIS_fnc_WLSmoothText; //\u00a0no sounds, letters appear in a smooth transition", "docSyntax": "[text, nbOfLines, duration, color, outline] call BIS_fnc_WLSmoothText", "syntax": "[<string>,nbOfLines,duration,<scalar>,outline] call BIS_fnc_WLSmoothText"}, "BIS_fnc_WLSoundMsg": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Play a given announcer message. */", "docSyntax": "[] call BIS_fnc_WLSoundMsg", "syntax": "[] call BIS_fnc_WLSoundMsg"}, "BIS_fnc_WLSubroutine_purchaseMenuAssetAvailability": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuAssetAvailability", "syntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuAssetAvailability"}, "BIS_fnc_WLSubroutine_purchaseMenuGetUIScale": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuGetUIScale", "syntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuGetUIScale"}, "BIS_fnc_WLSubroutine_purchaseMenuHandleDLC": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuHandleDLC", "syntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuHandleDLC"}, "BIS_fnc_WLSubroutine_purchaseMenuRefresh": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuRefresh", "syntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuRefresh"}, "BIS_fnc_WLSubroutine_purchaseMenuSetAssetDetails": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuSetAssetDetails", "syntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuSetAssetDetails"}, "BIS_fnc_WLSubroutine_purchaseMenuSetItemsList": {"version": "FNC", "tags": "", "description": "N/A", "docSyntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuSetItemsList", "syntax": "[] call BIS_fnc_WLSubroutine_purchaseMenuSetItemsList"}, "BIS_fnc_WLSyncedTime": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Returns time synced between server and clients */", "docSyntax": "[] call BIS_fnc_WLSyncedTime", "syntax": "[] call BIS_fnc_WLSyncedTime"}, "BIS_fnc_WLSyncTime": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Introduces a synchronized time value for server and clients. OBSOLETE NOW AFTER SERVERTIME FIX */", "docSyntax": "[] call BIS_fnc_WLSyncTime", "syntax": "[] call BIS_fnc_WLSyncTime"}, "BIS_fnc_WLUpdateAO": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Recalculates AO info (sector distribution). */", "docSyntax": "[] call BIS_fnc_WLUpdateAO", "syntax": "[] call BIS_fnc_WLUpdateAO"}, "BIS_fnc_WLVarsInit": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Init variables. */", "docSyntax": "[] call BIS_fnc_WLVarsInit", "syntax": "[] call BIS_fnc_WLVarsInit"}, "BIS_fnc_WLVehicleHandle": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Keeps track of spawned vehicles. */", "docSyntax": "[] call BIS_fnc_WLVehicleHandle", "syntax": "[] call BIS_fnc_WLVehicleHandle"}, "BIS_fnc_WLVotingBarHandle": {"version": "FNC", "tags": "", "description": "/* WARLORDS-SPECIFIC FUNCTION Author: Josef Zem\u00e1nek Description: Handles the voting bar element in UI. */", "docSyntax": "[] call BIS_fnc_WLVotingBarHandle", "syntax": "[] call BIS_fnc_WLVotingBarHandle"}, "BIS_fnc_worldArea": {"version": "FNC", "tags": "", "description": "Creates (or returns if it already exists) trigger with size of map.", "example": "private _bigTrigger = call BIS_fnc_worldArea;", "docSyntax": "call BIS_fnc_worldArea", "syntax": "call BIS_fnc_worldArea"}, "BIS_fnc_wpArtillery": {"version": "FNC", "tags": "", "description": "Let group members fire artillery barrage on waypoint position. Units must have magazine type.", "example": "[group player, getMarkerPos \"artilleryStrike\", objNull, 30, \"8Rnd_82mm_Mo_shells\"] call BIS_fnc_wpArtillery;", "docSyntax": "[group, position, target, firedRounds, type] call BIS_fnc_wpArtillery", "syntax": "[<objGroup>,position,<object>,firedRounds,type] call BIS_fnc_wpArtillery"}, "BIS_fnc_wpDemine": {"version": "FNC", "tags": "", "description": "Scripted \"CLEAR MINES\" Advanced Waypoint. The script needs a unit with the abiility to demine (engineer or explosive specialist trait and a toolkit).", "example": "[group player, getMarkerPos \"mineField\", objNull, false] call BIS_fnc_wpDemine;", "docSyntax": "[group, position, target, clearUnknownMines] call BIS_fnc_wpDemine", "syntax": "[<objGroup>,position,<object>,clearUnknownMines] call BIS_fnc_wpDemine"}, "BIS_fnc_wpLand": {"version": "FNC", "tags": "", "description": "\"LAND\" custom waypoint. Land on specific spot.", "example": "[player, position dude, 10, [42, 20], true] spawn BIS_fnc_wpLand;", "docSyntax": "arguments: [dirParam, visualize]", "syntax": "arguments: [dirParam,visualize]"}, "BIS_fnc_wpPatrol": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_wpRelax": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_wpSuppress": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "-", "docSyntax": "-", "syntax": "-"}, "BIS_fnc_zoomLock": {"version": "FNC", "tags": "", "description": "Locks the camera in place when the map is open.", "example": "[[0, 0]] call BIS_fnc_zoomLock;", "docSyntax": "[cameraCenter] call BIS_fnc_zoomLock", "syntax": "[cameraCenter] call BIS_fnc_zoomLock"}, "BIS_fnc_zoomLockEH": {"version": "FNC", "tags": "", "description": "Event handler function for locking the camera.", "example": "[position player] call BIS_fnc_zoomLockEH;", "docSyntax": "position call BIS_fnc_zoomLockEH", "syntax": "position call BIS_fnc_zoomLockEH"}, "BIS_fnc_zoomOnArea": {"version": "FNC", "tags": "", "description": "Map will zoom on the given area. Function always takes the longer side of the area to zoom on.", "example": "openMap true; [markerSize \"BIS_areaMarker\", markerPos \"BIS_areaMarker\", 5] call BIS_fnc_zoomOnArea;", "docSyntax": "[area, center, time, handler, forceCam] call BIS_fnc_zoomOnArea", "syntax": "[area,center,<scalar>,handler,forceCam] call BIS_fnc_zoomOnArea"}, "BIS_fnc_zoomUnlock": {"version": "FNC", "tags": "", "description": "Function that unlocks the camera in which has been previously locked with BIS_fnc_zoomLock.", "example": "[] call BIS_fnc_zoomUnlock;", "docSyntax": "call BIS_fnc_zoomUnlock", "syntax": "call BIS_fnc_zoomUnlock"}, "BIS_fnc_zzRotate": {"version": "FNC", "tags": "", "description": "This function is non functional in Arma 3 because of undefined variables.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}}