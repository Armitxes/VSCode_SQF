{"addMagazinePool": {"version": "1.75", "tags": "", "description": "Add magazines to the magazine pool, of which the player may choose in the following mission. Available in campaigns only.", "example": "addMagazinePool [\"M16\", 20];", "docSyntax": "addMagazinePool [magazineName, count]", "syntax": "addMagazinePool [magazineName,count]"}, "addWeaponPool": {"version": "1.75", "tags": "", "description": "Add weapons to the weapon pool, of which the player may choose in the following mission. Available in campaigns only.", "example": "addWeaponPool [\"M16\",5];", "docSyntax": "addWeaponPool [weaponName, count]", "syntax": "addWeaponPool [weaponName,count]"}, "animate": {"version": "1.75", "tags": "[AG] [EG] ", "description": "Activates given object animation. Animation is defined in CfgModels animations class.", "example": "_building animate [\"maindoor\", 1];", "docSyntax": "objectName animate [animationName, phase, speed]", "syntax": "objectName animate [animationName,phase,<scalar>]"}, "animationPhase": {"version": "1.75", "tags": "[AG] ", "description": "Returns the phase of the given animation on the given object. Animation can be scripted (animate, animateSource, animateDoor) or engine driven. Animation names for an object could be found out with animationNames command. When animation is rotation, like with \"MainTurret\" for example, the output is in radians, to convert to degrees use deg command.", "example": "_building animate [\"maindoor\",1]; sleep 1; _p = _building animationPhase \"maindoor\"; returns 1 (if the animation speed is <= 2 seconds)", "docSyntax": "object animationPhase animationName", "syntax": "<object> animationPhase animationName"}, "cheatsEnabled": {"version": "1.75", "tags": "", "description": "Checks whether cheats are enabled (whether the designers' version is running).", "example": "_enabled = cheatsEnabled;", "docSyntax": "Boolean = cheatsEnabled", "syntax": "<bool> = cheatsEnabled"}, "clearMagazinePool": {"version": "1.75", "tags": "", "description": "Remove all magazines from the magazine pool, of which the player may choose in the following missions. Available in campaigns only.", "example": "clearMagazinePool;", "docSyntax": "clearMagazinePool", "syntax": "clearMagazinePool"}, "clearWeaponPool": {"version": "1.75", "tags": "", "description": "Remove all weapons from the weapon pool, of which the player may choose in the following missions. Available in campaigns only.", "example": "clearWeaponPool;", "docSyntax": "clearWeaponPool", "syntax": "clearWeaponPool"}, "deleteIdentity": {"version": "1.75", "tags": "[EL] ", "description": "Delete an identity (created with saveIdentity) from the campaign's progress file.", "example": "?deleteIdentity \"playerIdentity\":hint \"Delete ok\"", "docSyntax": "Boolean = deleteIdentity identityName", "syntax": "<bool> = deleteIdentity identityName"}, "deleteStatus": {"version": "1.75", "tags": "[EG] ", "description": "Delete a status (created with saveStatus) from the campaign's progress file.", "example": "? deleteStatus \"playerStatus\"\u00a0: \"saved status gone from campaign\"", "docSyntax": "Boolean = deleteStatus statusName", "syntax": "<bool> = deleteStatus statusName"}, "drop": {"version": "1.75", "tags": "[AG] [EL] ", "description": "Creates a particle effect. This command is used to create smoke, fire and similar effects. The particles are single polygons with single textures that always face the player. They can be set to dynamically change their position, size, direction, can be set to different weights and more or less dependant on the wind.", "example": "drop [\"cl_basic\", \"\", \"Billboard\", 1, 1, [-3.5 * (sin (direction xural)), -3.5 * (cos (direction xural)), 0], [random 0.1, random 0.1, random 0.5], 1, 0.005, 0.0042, 0.7, [0.3,3], [[0.5,0.5,0.5,0], [0.7,0.7,0.7,0.5], [0.9,0.9,0.9,0]], [0,1,0,1,0,1], 0.2, 0.2, \"\", \"\", xural];", "docSyntax": "drop parameters", "syntax": "drop parameters"}, "fillWeaponsFromPool": {"version": "1.75", "tags": "", "description": "Adds magazines from the campaign pool to the given unit, depending on his weapons.", "example": "fillWeaponsFromPool _soldier", "docSyntax": "fillWeaponsFromPool unitName", "syntax": "fillWeaponsFromPool <objUnit>"}, "loadIdentity": {"version": "1.75", "tags": "", "description": "Loads person's identity from Objects.sav file in campaign directory (from entry name).", "example": "_ok = player loadIdentity \"playerIdentity\"", "docSyntax": "person loadIdentity name", "syntax": "<objUnit> loadIdentity <string>"}, "loadStatus": {"version": "1.75", "tags": "", "description": "Loads object's properties from Objects.sav file in campaign directory (from entry name).", "example": "_ok = player loadStatus \"playerState\";", "docSyntax": "obj loadStatus entryName", "syntax": "<object> loadStatus entryName"}, "magazines": {"version": "1.75", "tags": "", "description": "Returns array of type names of all vehicle's magazines. When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use currentMagazine to get this information for a currently loaded magazine.", "example": "_mags = magazines player", "docSyntax": "magazines vehicle", "syntax": "magazines <objVehicle>"}, "object": {"version": "1.75", "tags": "", "description": "Return Object with given id. Object ID's can be checked in mission editor.", "example": "_obj = object 1", "docSyntax": "Object = object id", "syntax": "<object> = <object> <scalar>"}, "onBriefingGear": {"version": "1.75", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Gear tab is selected in the briefing.", "example": "onBriefingGear \"GearVoiceOver\"", "docSyntax": "onBriefingGear soundName", "syntax": "onBriefingGear <string>"}, "onBriefingGroup": {"version": "1.75", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Group tab is selected in the briefing.", "example": "onBriefingGroup \"GroupVoiceOver\"", "docSyntax": "onBriefingGroup soundName", "syntax": "onBriefingGroup <string>"}, "onBriefingNotes": {"version": "1.75", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Notes tab is selected in the briefing.", "example": "onBriefingNotes \"NotesVoiceOver\";", "docSyntax": "onBriefingNotes soundName", "syntax": "onBriefingNotes <string>"}, "onBriefingPlan": {"version": "1.75", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Plan tab is selected in the briefing.", "example": "onBriefingPlan \"PlanVoiceOver\"", "docSyntax": "onBriefingPlan soundName", "syntax": "onBriefingPlan <string>"}, "pickWeaponPool": {"version": "1.75", "tags": "", "description": "Transfer weapons and magazines from cargo of object into weapon pool (used in campaign to transfer weapons into next mission).", "example": "pickWeaponPool vehicle player", "docSyntax": "pickWeaponPool object", "syntax": "pickWeaponPool <object>"}, "primaryWeapon": {"version": "1.75", "tags": "[AG] ", "description": "Returns name of unit's primary weapon (empty string if none).", "example": "_pWeap = primaryWeapon player;", "docSyntax": "primaryWeapon unit", "syntax": "primaryWeapon <objUnit>"}, "putWeaponPool": {"version": "1.75", "tags": "", "description": "Transfer weapons and magazines from weapon pool into cargo of given object. Used in campaign to transfer weapons into next mission.", "docSyntax": "putWeaponPool object", "syntax": "putWeaponPool <object>"}, "queryMagazinePool": {"version": "1.75", "tags": "", "description": "Return number of magazines of type name in magazine pool (used in campaign to transfer magazines into next mission).", "example": "_num = queryMagazinePool \"M16\";", "docSyntax": "Number = queryMagazinePool name", "syntax": "<scalar> = queryMagazinePool <string>"}, "queryWeaponPool": {"version": "1.75", "tags": "", "description": "Return number of weapons of type name in weapon pool (used in campaign to transfer weapons into next mission).", "example": "_num=queryWeaponPool \"M16\"", "docSyntax": "Number = queryWeaponPool name", "syntax": "<scalar> = queryWeaponPool <string>"}, "resize": {"version": "1.75", "tags": "", "description": "Changes the size of the given array. The command does not return new array, it resizes the source array to the desired number of elements. If the new size is bigger than the current size, the new places are filled with nils.", "example": "_arrayNum = [0,1,2,3,4]; _arrayNum resize 2; // _arrayNum is now [0,1]", "docSyntax": "array resize count", "syntax": "<array> resize count"}, "saveIdentity": {"version": "1.75", "tags": "", "description": "Saves person's identity to Objects.sav file in campaign directory as entry name.", "example": "player saveIdentity \"playerid\"", "docSyntax": "unitName saveIdentity name", "syntax": "<objUnit> saveIdentity <string>"}, "saveStatus": {"version": "1.75", "tags": "", "description": "Saves object's properties to Objects.sav file in campaign directory as entry name.", "example": "player saveStatus \"playerstate\"", "docSyntax": "object saveStatus name", "syntax": "<object> saveStatus <string>"}, "secondaryWeapon": {"version": "1.75", "tags": "", "description": "Returns name of a unit's secondary weapon (empty string if none).", "example": "private _secondaryWeapon = secondaryWeapon player;", "docSyntax": "secondaryWeapon unit", "syntax": "secondaryWeapon <objUnit>"}, "set": {"version": "1.75", "tags": "", "description": "Changes the element at the given (zero-based) index of the array.", "example": "_arrayOne set [0, \"Hello\"];", "docSyntax": "array set [index, value]", "syntax": "<array> set [<scalar>,<scalar>]"}, "setObjectTexture": {"version": "1.75", "tags": "[AG] [EL] ", "description": "Textures object selection with texture named in array. Array has the form [selectionNumber, \"Texture\"].", "example": "_objectname setObjectTexture [0, \"\\pboname\\texture.paa\"]; _objectname setObjectTexture [1, \"\\pboname\\texture2.paa\"];", "docSyntax": "object setObjectTexture [selectionNumber,texture]", "syntax": "<object> setObjectTexture [selectionNumber,<string>]"}, "setRain": {"version": "1.75", "tags": "[SE] [EG] ", "description": "Set rain density smoothly over the given transition time (in seconds). A transition time of zero means an immediate change. A rain density of zero is no rain, one is maximum rain. Rain is not possible when overcast is less than 0.7.", "example": "60 setRain 1;", "docSyntax": "time setRain rain", "syntax": "<scalar> setRain rain"}, "setSkill": {"version": "1.75", "tags": "", "description": "Sets ability level of person (commander unit). Value of skill may vary from 0 to 1.", "example": "_hero setSkill 1;", "docSyntax": "unit setSkill skill", "syntax": "<objUnit> setSkill skill"}, "setTerrainGrid": {"version": "1.75", "tags": "[EL] ", "description": "Sets the desired terrain resolution (in meters). For default landscapes the supported resolutions are:", "example": "setTerrainGrid 12.5;", "docSyntax": "setTerrainGrid grid", "syntax": "setTerrainGrid grid"}, "skill": {"version": "1.75", "tags": "", "description": "Returns current level of ability of a unit, in range between 0 and 1, 1 being the highest level of skill.", "example": "_skill = skill unit1;", "docSyntax": "skill unitName", "syntax": "skill <objUnit>"}, "weapons": {"version": "1.75", "tags": "", "description": "Returns array of names of all unit's weapons.", "example": "_wArray = weapons player;", "docSyntax": "weapons vehicleName", "syntax": "weapons vehicleName"}, "dialog": {"version": "1.78", "tags": "", "description": "Tests whether any user dialog is open.", "example": "if (!dialog) then {createDialog \"Dialog1\";};", "docSyntax": "Boolean = dialog", "syntax": "<bool> = dialog"}, "enemy": {"version": "1.78", "tags": "", "description": "Enemy side (enemy to all units).", "example": "?_side==enemy: hint \"ouch\"", "docSyntax": "Side = enemy", "syntax": "<objSide> = enemy"}, "friendly": {"version": "1.78", "tags": "", "description": "Friendly side (friendly to all units).", "example": "-", "docSyntax": "friendly", "syntax": "friendly"}, "sideEnemy": {"version": "1.78", "tags": "", "description": "The enemy side (used for renegades). Unit of this side is enemy to everyone.", "example": "if (side player == sideEnemy) then { hint \"We've got a renegade!\"; };", "docSyntax": "sideEnemy", "syntax": "sideEnemy"}, "sideFriendly": {"version": "1.78", "tags": "", "description": "The Friendly side - friendly to all, see Side relations.", "example": "if (side player == sideFriendly) then { hint \"I feel friendly today!\"; };", "docSyntax": "sideFriendly", "syntax": "sideFriendly"}, "missionName": {"version": "1.80", "tags": "", "description": "Return currently loaded mission file (path to mission.pbo, relative to game exe).", "example": "hint format [\"You are playing mission \"\"%1\"\"\", missionName];", "docSyntax": "missionName", "syntax": "missionName"}, "missionStart": {"version": "1.80", "tags": "", "description": "Returns date and time when mission started in format [year, month, day, hour, minute, second] in MP, which differs from date format only by seconds. In SP returns [0,0,0,0,0,0].", "example": "setDate (missionStart select [0,5]);", "docSyntax": "missionStart", "syntax": "missionStart"}, "playersNumber": {"version": "1.80", "tags": "", "description": "Returns count of occupied role selection slots for given side. Players who claimed a slot in the lobby but didn't start the mission are counted as well. If disabledAI = 0; in description.ext or Enable AI option is checked in 3DEN, AI bots will be treated as valid players and will be counted too. Multiplayer only, in singleplayer always returns 0.", "example": "_west = playersNumber west; _east = playersNumber east; _civ = playersNumber civilian; hint format [\"West:%1 East:%2, Civ:%3\", _west, _east, _civ];", "docSyntax": "playersNumber side", "syntax": "playersNumber <objSide>"}, "setVelocity": {"version": "1.80", "tags": "[AL] [EG] ", "description": "Set velocity (speed vector) of a vehicle. Units are in metres per second.", "example": "_truck1 setVelocity [20, 0, 0];", "docSyntax": "vehicleName setVelocity [x, y, z]", "syntax": "vehicleName setVelocity [x,y,z]"}, "velocity": {"version": "1.80", "tags": "", "description": "Return velocity (speed vector) of Unit as an array with format [x, y, z].", "example": "_vector = velocity jeep;", "docSyntax": "velocity vehicleName", "syntax": "velocity vehicleName"}, "addEventHandler": {"version": "1.85", "tags": "[AL] [AG] [EL] ", "description": "Adds event handler (EH) to the given object and returns EH handle. If EH has some data to return upon event (e.g. the \"killed\" EH will return an array with 2 elements: the killed unit, and the killer), it is passed in _this variable. Since Arma 3 v.1.63.137807 the EH handle is also stored in _thisEventHandler variable and is available during EH code execution.", "example": "_EHkilledIdx = player addEventHandler [\"killed\", {_this exec \"playerKilled.sqs\"}]", "docSyntax": "object addEventHandler [type, command]", "syntax": "<object> addEventHandler [type,command]"}, "call": {"version": "1.85", "tags": "", "description": "Adds given set of compiled instructions to the current stack and waits for it to finish and return, provides an option to pass arguments to the executed Code.", "example": "call { hint str 123; };", "docSyntax": "call code", "syntax": "call <code>", "type": "executionStatement"}, "comment": {"version": "1.85", "tags": "", "description": "Define a comment. Mainly used in SQF Syntax, as you're able to introduce comment lines with semicolons in a SQS script.", "example": "script.sqs comment \"This is a commented line\"", "docSyntax": "comment commentMsg", "syntax": "comment commentMsg"}, "do": {"version": "1.85", "tags": "", "description": "Executes code. Used as part of a construct, such as while, with, for and switch. The code is always executed in missionNamespace unless do is used with with as an argument.", "example": "while { b > a } do { a = a + 1 };", "docSyntax": "construct do code", "syntax": "construct do <code>", "type": "controlStatement"}, "else": {"version": "1.85", "tags": "", "description": "Executes else code when if condition returns false", "example": "if (a > b) then { c = 0 } else { c = 1 };", "docSyntax": "ifCode else elseCode", "syntax": "ifCode else elseCode", "type": "controlStatement"}, "if": {"version": "1.85", "tags": "", "description": "This operator creates a If Type which is used in the if-construct as described here.", "example": "_retVal = if (1 > 0) then { \"It's true\" } else { \"It's false\" }; hint str _retVal", "docSyntax": "if condition", "syntax": "if condition", "type": "controlStatement"}, "onMapSingleClick": {"version": "1.85", "tags": "", "description": "Define action performed when user clicks in map by executing command string. The code is executed on every click, until the command is", "example": "ArmA: Creates a soldier unit at the position clicked: onMapSingleClick \"'SoldierWB' createUnit [_pos, group player]; true\";", "docSyntax": "onMapSingleClick command", "syntax": "onMapSingleClick command"}, "preprocessFile": {"version": "1.85", "tags": "", "description": "Reads and processes the content of the specified file. Preprocessor is C-like, supports comments using // or /* and */ and PreProcessor Commands.", "example": "_content = preprocessFile \"myFunction.sqf\";", "docSyntax": "String = preprocessFile fileName", "syntax": "<string> = preprocessFile fileName"}, "removeAllEventHandlers": {"version": "1.85", "tags": "", "description": "Removes all event handlers of given type that were added by addEventHandler and resets event handler's creation index to 0.", "example": "player removeAllEventHandlers \"Killed\";", "docSyntax": "objectName removeAllEventHandlers handlerType", "syntax": "objectName removeAllEventHandlers handlerType"}, "removeEventHandler": {"version": "1.85", "tags": "", "description": "Removes an event handler added by addEventHandler by its index.", "example": "player removeEventHandler [\"killed\", 0];", "docSyntax": "objectName removeEventHandler [type, index]", "syntax": "objectName removeEventHandler [type,<scalar>]"}, "sliderPosition": {"version": "1.85", "tags": "", "description": "Returns current thumb position of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.", "example": "_slidepos1 = sliderPosition 105;", "docSyntax": "sliderPosition idc", "syntax": "sliderPosition <scalar>"}, "sliderRange": {"version": "1.85", "tags": "", "description": "Returns limits, as an Array [min, max] of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.", "example": "_slidelimits1 = sliderRange 105;", "docSyntax": "sliderRange idc", "syntax": "sliderRange <scalar>"}, "sliderSetPosition": {"version": "1.85", "tags": "", "description": "Sets current thumb position of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.", "example": "sliderSetPosition [101, 50];", "docSyntax": "sliderSetPosition [idc, pos]", "syntax": "sliderSetPosition [<scalar>,<array>]"}, "sliderSetRange": {"version": "1.85", "tags": "", "description": "Sets limits of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.", "example": "sliderSetRange [101, 0, 100];", "docSyntax": "sliderSetRange [idc, min, max]", "syntax": "sliderSetRange [<scalar>,min,max]"}, "sliderSetSpeed": {"version": "1.85", "tags": "[AL] [EG] ", "description": "Set speed of slider with id idc of topmost user dialog.", "example": "sliderSetSpeed [101, 0.5, 2];", "docSyntax": "sliderSetSpeed [idc,line,page] or uiControl sliderSetSpeed [line, page]", "syntax": "sliderSetSpeed [<scalar>,<scalar>,<scalar>]", "returns": "void", "syntax2": "<uiControl> sliderSetSpeed [<scalar>,<scalar>]"}, "sliderSpeed": {"version": "1.85", "tags": "", "description": "Returns speed, as an Array [min, max] of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog", "example": "_slidespeed1 = sliderSpeed 105;", "docSyntax": "sliderSpeed idc", "syntax": "sliderSpeed <scalar>"}, "then": {"version": "1.85", "tags": "", "description": "First or second element of array is executed depending on result of if condition. Result of the expression executed is returned as a result (result may be Nothing).", "example": "if (a > b) then { c = 1 };", "docSyntax": "if then else", "syntax": "if then else", "type": "controlStatement"}, "while": {"version": "1.85", "tags": "", "description": "Repeats Code while condition is true. A part of while do construct.", "example": "while {a < b} do {a = a + 1};", "docSyntax": "while condition", "syntax": "while condition", "type": "controlStatement"}, "engineOn": {"version": "1.90", "tags": "[AL] [EG] ", "description": "Activates and deactivates the engine of a vehicle. This command has to be executed where vehicle is local. NOTE: Executed on a remote vehicle this command may turn the engine on but then it will get turned off by itself after a short while.", "example": "if (!isEngineOn _jeep) then { _jeep engineOn true; };", "docSyntax": "vehicle engineOn state", "syntax": "<objVehicle> engineOn state"}, "isEngineOn": {"version": "1.90", "tags": "[AG] ", "description": "Returns true if engine is on, false if it is off.", "example": "_carEngineIsOn = isEngineOn _carOne;", "docSyntax": "isEngineOn vehicle", "syntax": "isEngineOn <objVehicle>"}, "loadFile": {"version": "1.90", "tags": "", "description": "Return content of given filename as string. If you plan to compile said string, be aware that the file shouldn't contain comments or compile will throw an error. If there are comments, use preprocessFile/preprocessFileLineNumbers instead.", "example": "_contents = loadFile \"wantedString.txt\";", "docSyntax": "loadFile fileName", "syntax": "loadFile fileName"}, "sideLogic": {"version": "1.90", "tags": "", "description": "The Logic side.", "example": "if (side _obj == sideLogic) then { hint \"It's a logic!\"; };", "docSyntax": "sideLogic", "syntax": "sideLogic"}, "typeOf": {"version": "1.90", "tags": "", "description": "Returns the config class name of given object or \"\" if object does not have a config class.", "example": "if (typeOf vehicle player == \"B_Heli_Light_01_armed_F\") then { hint \"Player is in a AH-9 Pawnee\"; };", "docSyntax": "typeOf object", "syntax": "typeOf <object>"}}