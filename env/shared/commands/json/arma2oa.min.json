{"actionKeysNamesArray": {"version": "1.51", "tags": "", "description": "Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or user action names.", "example": "_actionList = actionKeysNamesArray \"ReloadMagazine\";", "docSyntax": "actionKeysNamesArray userAction", "syntax": "actionKeysNamesArray userAction"}, "addBackpack": {"version": "1.51", "tags": "[AL] [EG] ", "description": "Adds a backpack for a unit. If a unit already has a backpack, the old backpack will be placed on the ground under the unit.", "example": "this addBackpack \"TK_RPG_Backpack_EP1\";", "docSyntax": "unit addBackpack backpackClassName", "syntax": "<objUnit> addBackpack backpackClassName"}, "addCamShake": {"version": "1.51", "tags": "[EL] ", "description": "Creates the camera shaking effect, like when you are near an explosion", "example": "addCamShake [10, 1, 25];", "docSyntax": "addCamShake [power, duration, frequency]", "syntax": "addCamShake [power,duration,frequency]"}, "aimedAtTarget": {"version": "1.51", "tags": "", "description": "Returns how good the weapon of the vehicle is aimed at the target.", "example": "_aimingQuality = heli aimedAtTarget [target];", "docSyntax": "vehicle aimedAtTarget [target, weapon]", "syntax": "<objVehicle> aimedAtTarget [<object>,<string>]"}, "backpackSpaceFor": {"version": "1.51", "tags": "", "description": "Returns how much space is in backpack for given weapon or magazine", "example": "(backpack player) backpackSpaceFor \"m16\"; //\u00a0[weapons, magazines]", "docSyntax": "backpack backpackSpaceFor weaponName", "syntax": "backpack backpackSpaceFor weaponName"}, "BIS_fnc_AAN": {"version": "1.51", "tags": "", "description": "Add an AAN overlay to the screen, with one headline and a rolling text on the bottom.", "example": "[ parseText \"<t size='2'>AAN live in Takistan</t>\", parseText \"Weather coming up hot and steamy - Takistan shelled again from border area\" ] spawn BIS_fnc_AAN;", "docSyntax": "[headline, rollingText] spawn BIS_fnc_AAN", "syntax": "[headline,rollingText] spawn BIS_fnc_AAN"}, "BIS_fnc_boundingBoxCorner": {"version": "1.51", "tags": "", "description": "/* Description: Returns position of all four bounding box corners OR Returns position of the nearest corner to the given position Parameter(s): _this: OBJECT - object with bounding box OR _this: ARRAY in format: 0: OBJECT - object with bounding box 1: ARRAY or OBJECT - position for which the nearest corner is returned Returns: ARRAY in format [pos1, pos2, pos3, pos4] - 4 corners of the bounding box OR ARRAY in format [x,y,z] - position of the nearest corner Example 1: _corners = car call BIS_fnc_boundingBoxCorner; Example 2: _nearestCorner = [car, player] call BIS_fnc_boundingBoxCorner; */", "docSyntax": "Return Value:", "syntax": "Return <scalar>:"}, "BIS_fnc_infoText": {"version": "1.51", "tags": "", "description": "Display a text in the \"mission\" GUI area with some effects. Good for the beginning of a mission.", "example": "[ \"Somewhere on Altis\", format [\"Year %1\", date select 0], mapGridPosition player ] spawn BIS_fnc_infoText;", "docSyntax": "[string_1, string_2, string_n] spawn BIS_fnc_infoText", "syntax": "[string_1,string_2,string_n] spawn BIS_fnc_infoText"}, "BIS_fnc_scriptedMove": {"version": "1.51", "tags": "", "description": "Force a unit to turn towards and walk to", "example": "[myUnit, [getMarkerPos \"wp1\", getMarkerPos \"wp2\", getMarkerPos \"wp3\"]] call BIS_fnc_scriptedMove;", "docSyntax": "[unit, waypoints, code, walkAnim, animLength] call BIS_fnc_scriptedMove", "syntax": "[<objUnit>,waypoints,<code>,walkAnim,animLength] call BIS_fnc_scriptedMove"}, "currentMuzzle": {"version": "1.51", "tags": "", "description": "Returns current muzzle of unit's weapon.", "example": "_muzzle = currentMuzzle player;", "docSyntax": "currentMuzzle gunner", "syntax": "currentMuzzle gunner"}, "currentVisionMode": {"version": "1.51", "tags": "[AG] ", "description": "Returns current vision mode of unit's weapon.", "example": "_currMode = currentVisionMode gunner _tank", "docSyntax": "currentVisionMode unit", "syntax": "currentVisionMode <objUnit>"}, "currentWeaponMode": {"version": "1.51", "tags": "", "description": "Returns current weapon mode of unit's weapon. Result can be: \"Single\", \"Burst\", \"FullAuto\", \"manual\", \"player\"", "example": "_weaponMode = currentWeaponMode player;", "docSyntax": "currentWeaponMode gunner", "syntax": "currentWeaponMode gunner"}, "currentZeroing": {"version": "1.51", "tags": "", "description": "Returns zeroing of unit's weapon.", "example": "_zeroing = currentZeroing player;", "docSyntax": "currentZeroing gunner", "syntax": "currentZeroing gunner"}, "enableCamShake": {"version": "1.51", "tags": "", "description": "Allows camera shake effects via addCamShake. If set to false, then a currently active shake effect will stop immediately. By default, shake effects are enabled, but once they have been disabled by this command, they will have to be enabled first, in order to be visible.", "example": "enableCamShake false;", "docSyntax": "enableCamShake value", "syntax": "enableCamShake <scalar>"}, "enableGunLights Arma 2": {"version": "1.51", "tags": "[AL] [EG] ", "description": "Force the AI to use gun lights. This command can be used to force lights on, but not to force lights off.", "example": "_group enableGunLights true;", "docSyntax": "thing enableGunLights value", "syntax": "thing enableGunLights <scalar>"}, "enableIRLasers": {"version": "1.51", "tags": "[AL] [EG] ", "description": "Allows the AI to use IR lasers.", "example": "group player enableIRLasers true", "docSyntax": "unitOrGroup enableIRLasers value", "syntax": "unitOrGroup enableIRLasers <scalar>"}, "fadeSpeech": {"version": "1.51", "tags": "[EL] ", "description": "Cause a smooth change in the master speech volume. The change duration is given by time, the target volume by volume. The default master is 1.0.", "example": "5 fadeSpeech 0.1;", "docSyntax": "time fadeSpeech volume", "syntax": "<scalar> fadeSpeech volume"}, "fireAtTarget": {"version": "1.51", "tags": "", "description": "Remotely forces a unit to fire the given weapon. See also: BIS_fnc_fire", "example": "_handle = this fireAtTarget [groundtarget1,\"HellfireLauncher\"];", "docSyntax": "sourceVehicle fireAtTarget [targetVehicle, weaponMuzzleName]", "syntax": "sourceVehicle fireAtTarget [targetVehicle,weaponMuzzleName]"}, "forceWalk": {"version": "1.51", "tags": "[AL] ", "description": "Forces unit to walk even if run or sprint is selected.", "example": "player forceWalk true;", "docSyntax": "unit forceWalk value", "syntax": "<objUnit> forceWalk <scalar>"}, "getElevationOffset": {"version": "1.51", "tags": "", "description": "Returns the map elevation offset from [map]/config.cpp. Returns 0 if there's no elevationOffset defined in the config of the current world.", "example": "_offset = getElevationOffset;", "docSyntax": "getElevationOffset", "syntax": "getElevationOffset"}, "isAutoHoverOn": {"version": "1.51", "tags": "", "description": "Return true if vehicle has enabled auto hover. (always returns false if the vehicle can't set auto hover)", "example": "_isOn = isAutoHoverOn vehicle player;", "docSyntax": "isAutoHoverOn vehicle", "syntax": "isAutoHoverOn <objVehicle>"}, "isForcedWalk": {"version": "1.51", "tags": "", "description": "Returns true if player is forced to walk with forceWalk.", "example": "_bool = isForcedWalk player;", "docSyntax": "isForcedWalk unitName", "syntax": "isForcedWalk <objUnit>"}, "isManualFire": {"version": "1.51", "tags": "[AG] ", "description": "Returns true if manual fire is on. Manual fire could either be selected in vehicle action menu (if available) or with action \"ManualFire\" and \"ManualFireCancel\". Always returns false for a soldier.", "example": "_bool = isManualFire vehicle player;", "docSyntax": "isManualFire vehicleName", "syntax": "isManualFire vehicleName"}, "isWalking": {"version": "1.51", "tags": "[AG] ", "description": "Returns true if walk is toggled (default W+S in Arma 3).", "example": "_bool = isWalking player;", "docSyntax": "isWalking unitName", "syntax": "isWalking <objUnit>"}, "laserTarget": {"version": "1.51", "tags": "[AG] ", "description": "Returns laser target object created by given unit (vehicle or soldier) when using a laser targeting device.", "example": "private _target = laserTarget gunner heli;", "docSyntax": "laserTarget unitName", "syntax": "laserTarget <objUnit>"}, "removeBackpack": {"version": "1.51", "tags": "[AL] [EG] ", "description": "Removes unit's backpack", "example": "removeBackpack this;", "docSyntax": "removeBackpack unit", "syntax": "removeBackpack <objUnit>"}, "resetCamShake": {"version": "1.51", "tags": "", "description": "Stops any ongoing camera shake effects. Does not prevent new effects from being created. To disallow new effects altogether, enableCamShake should be used.", "example": "resetCamShake;", "docSyntax": "resetCamShake", "syntax": "resetCamShake"}, "scoreSide": {"version": "1.51", "tags": "", "description": "Returns score for the given side. MP Only.", "example": "_number = scoreSide west;", "docSyntax": "scoreSide side", "syntax": "scoreSide <objSide>"}, "sendUDPMessage": {"version": "1.51", "tags": "", "description": "Send message to given address using UDP protocol. Returns false if the message has not been delivered Note: Not implemented (see talk page for more info).", "example": "_bool = sendUDPMessage [\"192.168.0.1\", 2302, \"Here goes you message...\"];", "docSyntax": "sendUDPMessage [ip, port, message]", "syntax": "sendUDPMessage [ip,port,message]"}, "setCamShakeDefParams": {"version": "1.51", "tags": "", "description": "Sets camera shake default params, the default camshake when, for example, you freelook at your character shooting a 12.7mm sniper rifle or firing tank cannon. Would also work in 1st person.", "example": "setCamShakeDefParams [1, 2, 3, 4, 5, .5, .5];", "docSyntax": "setCamShakeDefParams [power, duration, frequency, minSpeed, minMass, caliberCoefHit, vehicleCoef]", "syntax": "setCamShakeDefParams [power,duration,frequency,minSpeed,minMass,caliberCoefHit,vehicleCoef]"}, "setCamShakeParams": {"version": "1.51", "tags": "", "description": "Set camera shake parameters. Will not have any effect until shake is started via addCamShake.", "example": "setCamShakeParams [0.1, 1, 1, 1, true];", "docSyntax": "setCamShakeParams [posCoef, vertCoef, horzCoef, bankCoef, interpolation]", "syntax": "setCamShakeParams [posCoef,vertCoef,horzCoef,bankCoef,interpolation]"}, "setCamUseTI": {"version": "1.51", "tags": "", "description": "Activates thermal vision. Mode index defines what sort of thermal vision it is:", "example": "true setCamUseTI 1;", "docSyntax": "Bool setCamUseTI modeIndex", "syntax": "<bool> setCamUseTI modeIndex"}, "setVehicleTIPars": {"version": "1.51", "tags": "[AG] [EL] ", "description": "Sets the \"heat\" state of different vehicle parts for Thermal Imaging detection. This allows simulation of heated up parts of a vehicle without it actually having to utilize them - on a range from 0 to 1, 0 being cold, 1 being hot.", "example": "vehicle player setVehicleTIPars [1, 1, 1]; //\u00a0set all parts hot vehicle player setVehicleTIPars [0, 0, 0]; //\u00a0set all parts cold vehicle player setVehicleTIPars [0.5, 0.5, 0.5]; //\u00a0set all parts warm", "docSyntax": "vehicle setVehicleTIPars [engine, wheels, weapon]", "syntax": "<objVehicle> setVehicleTIPars [engine,wheels,<string>]"}, "setVelocityTransformation": {"version": "1.51", "tags": "[AL] [EG] ", "description": "Interpolates and applies PositionASL, velocity, vectorDir and vectorUp to the given object based on the interval value.", "example": "_tracker setVelocityTransformation [ _currentPos, _nextPos, _currentVelocity, _nextVelocity, _currentVectorDir, _nextVectorDir, _currentVectorUp, _nextVectorUp, _interval ];", "docSyntax": "object setVelocityTransformation [fromPosASL, toPosASL, fromVelocity, toVelocity, fromVectorDir, toVectorDir, fromVectorUp, toVectorUp, interval]", "syntax": "<object> setVelocityTransformation [fromPosASL,toPosASL,fromVelocity,toVelocity,fromVectorDir,toVectorDir,fromVectorUp,toVectorUp,interval]"}, "unitBackpack": {"version": "1.51", "tags": "", "description": "Returns unit's backpack", "example": "private _myBackpack = unitBackpack player;", "docSyntax": "unitBackpack unit", "syntax": "unitBackpack <objUnit>"}, "addMagazineTurret": {"version": "1.52", "tags": "[AL] [EG] ", "description": "Adds a magazine to the turret. Use turret path [-1] for driver's turret. Note: you may create invalid combinations by using this function, for example by adding 20 grenades. When doing so, application behaviour is undefined. Since Arma 3 v1.55.133817 it is possible to set custom ammo count in added magazine.", "example": "_tank addMagazineTurret [\"SmokeLauncherMag\",[0,0]];", "docSyntax": "vehicle addMagazineTurret [magazineName, turretPath, ammoCount]", "syntax": "<objVehicle> addMagazineTurret [magazineName,turretPath,ammoCount]"}, "magazinesTurret": {"version": "1.52", "tags": "[AG] ", "description": "Returns all magazines of given turret. Use turret path [-1] for driver's turret. Alternatively, use magazinesAllTurrets.", "example": "_mags = vehicle player magazinesTurret [0, 0];", "docSyntax": "vehicle magazinesTurret turretPath", "syntax": "<objVehicle> magazinesTurret turretPath"}, "removeMagazinesTurret": {"version": "1.52", "tags": "[AL] [EG] ", "description": "Removes all magazines of the given type from given vehicle. Use turret path [-1] for driver's turret.", "example": "vehicle player removeMagazinesTurret [\"60rnd_cmflaremagazine\",[-1]]", "docSyntax": "vehicle removeMagazinesTurret [magazineName, turretPath]", "syntax": "<objVehicle> removeMagazinesTurret [magazineName,turretPath]"}, "removeMagazineTurret": {"version": "1.52", "tags": "[AL] [EG] ", "description": "Removes the magazine from the turret. Use turret path [-1] for driver's turret. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined.", "example": "vehicle player removeMagazineTurret [\"60rnd_cmflaremagazine\",[-1]]", "docSyntax": "vehicle removeMagazineTurret [magazineName, turretPath]", "syntax": "<objVehicle> removeMagazineTurret [magazineName,turretPath]"}, "weaponsTurret": {"version": "1.52", "tags": "[AG] ", "description": "Returns all weapons of given turret. Use turret path [-1] for driver's turret.", "example": "_weapons = vehicle player weaponsTurret [0,0]", "docSyntax": "vehicle weaponsTurret turretPath", "syntax": "<objVehicle> weaponsTurret turretPath"}, "disableTIEquipment": {"version": "1.54", "tags": "[AG] [EG] ", "description": "Disables TI (Thermal Imaging) equipment for given vehicle.", "example": "vehicle player disableTIEquipment true;", "docSyntax": "vehicle disableTIEquipment state", "syntax": "<objVehicle> disableTIEquipment state"}, "enableEngineArtillery": {"version": "1.54", "tags": "[EL] ", "description": "Enable/disable the artillery engine. This allows the user to use the artillery computer on mortar/artillery, and for AI to use it for indirect fire.", "example": "enableEngineArtillery false;", "docSyntax": "enableEngineArtillery enabled", "syntax": "enableEngineArtillery <bool>"}, "getMagazineCargo": {"version": "1.54", "tags": "[AG] ", "description": "Returns all magazines types and count from the cargo space", "example": "_content = getMagazineCargo carName;", "docSyntax": "getMagazineCargo object", "syntax": "getMagazineCargo <object>"}, "getWeaponCargo": {"version": "1.54", "tags": "[AG] ", "description": "Returns all weapons types and count from the cargo space", "example": "_content = getWeaponCargo carName;", "docSyntax": "getWeaponCargo object", "syntax": "getWeaponCargo <object>"}, "addBackpackCargo": {"version": "1.55", "tags": "[AL] [AG] [EL] ", "description": "Add backpack(s) to the cargo space of vehicle. Classname list of available backpacks is here.", "example": "this addBackpackCargo [\"TK_RPG_Backpack_EP1\", 2];", "docSyntax": "vehicle addBackpackCargo [backpackClassName, count]", "syntax": "<objVehicle> addBackpackCargo [backpackClassName,count]"}, "addBackpackCargoGlobal": {"version": "1.55", "tags": "[AG] [EG] ", "description": "Add backpack(s) to the cargo space of vehicle. MP synchronized. Classname list of available backpacks is here", "example": "this addBackpackCargoGlobal [\"TK_RPG_Backpack_EP1\", 2];", "docSyntax": "vehicle addBackpackCargoGlobal [packClassName, count]", "syntax": "<objVehicle> addBackpackCargoGlobal [packClassName,count]"}, "addMagazineCargoGlobal": {"version": "1.55", "tags": "[AG] [EG] ", "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units. MP Synchronized", "example": "_truck addMagazineCargoGlobal [\"M16\", 5];", "docSyntax": "vehicleName addMagazineCargoGlobal [magazineName, count]", "syntax": "vehicleName addMagazineCargoGlobal [magazineName,count]"}, "addMPEventHandler": {"version": "1.55", "tags": "[AG] [EG] ", "description": "Adds MP event handler (EH) to the given object and returns EH handle.", "example": "_index = player addMPEventHandler [\"MPKilled\", { _this execVM \"playerKilled.sqf\"; }];", "docSyntax": "object addMPEventHandler [type, expression]", "syntax": "<object> addMPEventHandler [type,expression]"}, "addWeaponCargoGlobal": {"version": "1.55", "tags": "[AG] [EG] ", "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units. MP Synchronized", "example": "_truck addWeaponCargoGlobal [\"M16\", 5];", "docSyntax": "vehicleName addWeaponCargoGlobal [weaponName, count]", "syntax": "vehicleName addWeaponCargoGlobal [weaponName,count]"}, "clearBackpackCargoGlobal": {"version": "1.55", "tags": "[AG] [EG] ", "description": "Removes all backpacks from the vehicle cargo space. MP synchronized.", "example": "clearBackpackCargoGlobal jeepOne;", "docSyntax": "clearBackpackCargoGlobal unit", "syntax": "clearBackpackCargoGlobal <objUnit>"}, "clearMagazineCargoGlobal": {"version": "1.55", "tags": "[AG] [EG] ", "description": "Removes all magazines from the vehicle cargo space. MP synchronized.", "example": "clearMagazineCargoGlobal jeepOne;", "docSyntax": "clearMagazineCargoGlobal object", "syntax": "clearMagazineCargoGlobal <object>"}, "clearWeaponCargoGlobal": {"version": "1.55", "tags": "[AG] [EG] ", "description": "Removes all weapons from the vehicle cargo space. MP synchronized.", "example": "clearWeaponCargoGlobal jeepOne;", "docSyntax": "clearWeaponCargoGlobal unit", "syntax": "clearWeaponCargoGlobal <objUnit>"}, "getBackpackCargo": {"version": "1.55", "tags": "", "description": "Returns all backpack types and count from the cargo space.", "example": "_content = getBackpackCargo carName;", "docSyntax": "getBackpackCargo object", "syntax": "getBackpackCargo <object>"}, "getResolution": {"version": "1.55", "tags": "", "description": "Returns an array containing all information about current client screen resolution in format:", "example": "_res = getResolution; //\u00a0a 16/9 single monitor setup [ 1360, //\u00a0width 768, //\u00a0height 867, //\u00a02D viewport width 653, //\u00a02D viewport height 1.77778, //\u00a0aspect ratio 0.85 //\u00a0UI scale ]", "docSyntax": "getResolution", "syntax": "getResolution"}, "getTerrainHeightASL": {"version": "1.55", "tags": "", "description": "Returns the terrain height above the sea for the given position.", "example": "_height = getTerrainHeightASL (position player);", "docSyntax": "getTerrainHeightASL position", "syntax": "getTerrainHeightASL position"}, "hostMission": {"version": "1.55", "tags": "", "description": "Host the mp mission described by config class. Should be called as reaction to some UI action in some dialog.", "example": "hostMission [configMissionName, display];", "docSyntax": "hostMission [pConfig, pDisplay]", "syntax": "hostMission [pConfig,pDisplay]"}, "removeAllMPEventHandlers": {"version": "1.55", "tags": "[AG] [EG] ", "description": "Removes all MP event handlers of the given type which were added by addMPEventHandler. Command needs to be executed only on one PC for MP event handler to be removed globally.", "example": "player removeAllMPEventHandlers \"mpkilled\";", "docSyntax": "objectName removeAllMPEventHandlers event", "syntax": "objectName removeAllMPEventHandlers event"}, "removeMPEventHandler": {"version": "1.55", "tags": "[AG] [EG] ", "description": "Removes MP event handler added by addMPEventHandler.", "example": "player removeMPEventHandler [\"MPKilled\", 0];", "docSyntax": "unitName removeMPEventHandler [event, index]", "syntax": "<objUnit> removeMPEventHandler [event,<scalar>]"}, "setSimpleTaskTarget": {"version": "1.55", "tags": "", "description": "Attach a target to the simple task.", "example": "task setSimpleTaskTarget [targetVehicle, true];", "docSyntax": "task setSimpleTaskTarget [target, precisePosition]", "syntax": "<objTask> setSimpleTaskTarget [<object>,precisePosition]"}, "setWaypointVisible": {"version": "1.55", "tags": "[EG] ", "description": "Sets the visibility of the given waypoint in 3D HUD view (for map visibility see showWaypoint).", "example": "[grp, 2] setWaypointVisible false;", "docSyntax": "waypoint setWaypointVisible visible", "syntax": "waypoint setWaypointVisible visible"}, "waypointVisible": {"version": "1.55", "tags": "", "description": "A getter for setWaypointVisible command.", "example": "_visible = waypointVisible [groupOne, 1];", "docSyntax": "waypointVisible waypoint", "syntax": "waypointVisible waypoint"}, "BIS_fnc_3Dcredits": {"version": "1.56", "tags": "", "description": "Displays structured text in 3D world.", "example": "[\"<t size='2'>Hello World</t>\", getPos helloWorld, 15, 0] spawn BIS_fnc_3Dcredits;", "docSyntax": "[text, position, minDis, fadeDis] spawn BIS_fnc_3Dcredits", "syntax": "[<string>,position,minDis,fadeDis] spawn BIS_fnc_3Dcredits"}, "BIS_fnc_crows": {"version": "1.56", "tags": "", "description": "Spawns flock of crows circling the area.", "example": "bis_crows = [BIS_scientist, 20, 8, 20] call BIS_fnc_crows;", "docSyntax": "[position, areaSize, number, height] call BIS_fnc_crows", "syntax": "[position,areaSize,<scalar>,height] call BIS_fnc_crows"}, "BIS_fnc_customGPS": {"version": "1.56", "tags": "", "description": "Replaces GPS frame.", "example": "[\"ca\\missions_pmc\\data\\ui_gps_ca.paa\", -0.05, 0.16] call BIS_fnc_customGPS;", "docSyntax": "[path, deltaX, deltaY] call BIS_fnc_customGPS", "syntax": "[path,deltaX,deltaY] call BIS_fnc_customGPS"}, "BIS_fnc_customGPSvideo": {"version": "1.56", "tags": "", "description": "Plays in-game video in GPS frame.", "example": "_script = [\"\\ca\\video_pmc\\CP00_Reynolds_b.ogv\",1.04] spawn BIS_fnc_customGPSvideo; waitUntil {scriptDone _script};", "docSyntax": "[path, sizeCoef] spawn BIS_fnc_customGPSvideo", "syntax": "[path,sizeCoef] spawn BIS_fnc_customGPSvideo"}, "BIS_fnc_customGPSVideo": {"version": "1.56", "tags": "", "description": "Plays in-game video in GPS frame.", "example": "[\"myVideo.ogv\", 0.75] call BIS_fnc_customGPSVideo;", "docSyntax": "[videoFilePath, sizeCoef] call BIS_fnc_customGPSVideo", "syntax": "[videoFilePath,sizeCoef] call BIS_fnc_customGPSVideo"}, "BIS_fnc_destroyCity": {"version": "1.56", "tags": "", "description": "Destroys building in given area based on input seed.", "example": "[\"destroyBase\", 500, 42, [ourHouseInTheMiddleOfTheStreet]] call BIS_fnc_destroyCity;", "docSyntax": "[position, areaSize, seed, blacklist] call BIS_fnc_destroyCity", "syntax": "[position,areaSize,seed,blacklist] call BIS_fnc_destroyCity"}, "BIS_fnc_dirIndicator": {"version": "1.56", "tags": "", "description": "Show a 4-directions indicator.", "example": "[player, TheBoss, [0.706, 0.0745, 0.0196, 1]] call BIS_fnc_dirIndicator;", "docSyntax": "[origin, target, color, sizeCoef] call BIS_fnc_dirIndicator", "syntax": "[origin,<object>,<scalar>,sizeCoef] call BIS_fnc_dirIndicator"}, "BIS_fnc_flies": {"version": "1.56", "tags": "", "description": "Spawns flies around position.", "example": "_flies = [position deadBody, 0.05, 1.5] call BIS_fnc_flies;", "docSyntax": "[position, interval, areaSize] call BIS_fnc_flies", "syntax": "[position,interval,areaSize] call BIS_fnc_flies"}, "BIS_fnc_playVideo": {"version": "1.56", "tags": "", "description": "Plays in-game video with a range of options. The function can be called or spawned. If spawned, scriptDone command can be used to see if video is stopped or finished. If called in scheduled environment, the next line of code will not process until the video is stopped or finished.", "example": "_video = [\"A3\\Missions_F_EPA\\video\\A_in_intro.ogv\"] spawn BIS_fnc_playVideo;", "docSyntax": "[content, size, color, skipVarName, bgColor, keepAspect] spawn BIS_fnc_playVideo", "syntax": "[content,size,<scalar>,skipVarName,bgColor,keepAspect] spawn BIS_fnc_playVideo"}, "BIS_fnc_sandstorm": {"version": "1.56", "tags": "", "description": "Creates particle sandstorm round given object.", "example": "[player, 0.04, 0.8, false] call BIS_fnc_sandstorm;", "docSyntax": "[object, interval, brightness, newspapers] call BIS_fnc_sandstorm", "syntax": "[<object>,interval,brightness,newspapers] call BIS_fnc_sandstorm"}, "allDead": {"version": "1.57", "tags": "", "description": "Return a list of all dead units including agents and destroyed vehicles. Dead units may be in vehicles.", "example": "{ deleteVehicle _x } forEach allDead;", "docSyntax": "allDead", "syntax": "allDead"}, "allMissionObjects": {"version": "1.57", "tags": "", "description": "Returns all mission objects (created by or during a mission) with given type (or its subtype). In some cases allMissionObjects could be substituted with entities, which would be much much faster alternative. Some of the unusual mission objects that can be detected with this command (as well as with nearestObject):", "example": "_airObjects = allMissionObjects \"Air\";", "docSyntax": "allMissionObjects type", "syntax": "allMissionObjects type"}, "setPlayerRespawnTime": {"version": "1.57", "tags": "[EL] ", "description": "Sets the time interval (in seconds) that the player must wait before respawn. It resets to mission default on mission start. In Single Player or when respawn type is GROUP or SIDE in Multiplayer, setting player respawn time has no effect, and playerRespawnTime will always return -1.", "example": "setPlayerRespawnTime 5;", "docSyntax": "setPlayerRespawnTime interval", "syntax": "setPlayerRespawnTime interval"}, "allowCrewInImmobile": {"version": "1.60", "tags": "", "description": "If true, units can be in a vehicle with broken tracks/wheels.", "example": "_vehicle allowCrewInImmobile true;", "docSyntax": "vehicle allowCrewInImmobile bool", "syntax": "<objVehicle> allowCrewInImmobile <bool>"}, "assignedTeam": {"version": "1.60", "tags": "[AG] ", "description": "Returns the team the unit belongs to. Possible values:", "example": "_team = assignedTeam player;", "docSyntax": "assignedTeam unitName", "syntax": "assignedTeam <objUnit>"}, "callExtension": {"version": "1.60", "tags": "", "description": "Calls custom .dll also known as Extension. The name of the extension is the name of the extension .dll without \".dll\" part (or without \"_x64.dll\" part on 64-bit Arma). For example if the file is 'myExtension.dll' the name of the extension will be \"myExtension\". For 64-bit extensions, the name of the extension doesn't need to change and is still \"myExtension\". The game will automatically look for 'myExtension_x64.dll' when you use 64-bit Arma exe.", "example": "_return = \"myExtension\" callExtension \"stringToBeParsed\";", "docSyntax": "extension callExtension function", "syntax": "extension callExtension function", "type": "executionStatement"}, "entities": {"version": "1.60", "tags": "", "description": "Returns a list of all alive and dead entities of the given type or deriving from the given type. Units in vehicles are ignored with the primary syntax.", "example": "_allcars = entities \"Car\";", "docSyntax": "entities type", "syntax": "entities type"}, "loadMagazine": {"version": "1.60", "tags": "", "description": "Initiates the loading action on given weapon of the turret of a transport. So the new magazine is not available instantly, yet according to the reloadTime.", "example": "vehicle player loadMagazine [[0], \"m256\", \"20Rnd_120mmHE_M1A2\"];", "docSyntax": "transport loadMagazine [turretPath, weaponName, magazineName]", "syntax": "transport loadMagazine [turretPath,weaponName,magazineName]"}, "setWeaponReloadingTime": {"version": "1.60", "tags": "", "description": "Sets states and/or makes an action of/on weapon. Reload time is between 0 and 1 inclusive, where 1 is 100% of maximum reloading time.", "example": "_done = _vehicle setWeaponReloadingTime [gunner (vehicle player), currentMuzzle (gunner (vehicle player)), 0.5];", "docSyntax": "vehicle setWeaponReloadingTime [gunner, muzzleName, reloadTime]", "syntax": "<objVehicle> setWeaponReloadingTime [gunner,muzzleName,reloadTime]"}, "surfaceNormal": {"version": "1.60", "tags": "", "description": "Returns surface normal on given position.", "example": "_normal = surfaceNormal [300, 500];", "docSyntax": "surfaceNormal position", "syntax": "surfaceNormal position"}, "visiblePosition": {"version": "1.60", "tags": "", "description": "Returns an object's rendered position (z value above surface underneath) in render time scope. Same as getPosVisual", "example": "playerRenderedPos = visiblePosition player;", "docSyntax": "visiblePosition object", "syntax": "visiblePosition <object>"}, "weaponState": {"version": "1.60", "tags": "", "description": "Returns the currently selected weapon state for unit or vehicle.", "example": "_wsPlayer = weaponState player; //\u00a0[\"arifle_MXC_ACO_F\",\"arifle_MXC_ACO_F\",\"Single\",\"30Rnd_65x39_caseless_mag\",30]", "docSyntax": "weaponState unit", "syntax": "weaponState <objUnit>"}, "aimPos": {"version": "1.62", "tags": "[AG] ", "description": "Returns the position of the object other units can aim to.", "example": "aimPos player", "docSyntax": "aimPos object", "syntax": "aimPos <object>"}, "ASLToATL": {"version": "1.62", "tags": "", "description": "Converts a position from PositionASL to PositionATL", "example": "ASLToATL (getPosASL player) isEqualTo getPosATL player", "docSyntax": "ASLToATL pos", "syntax": "ASLToATL <array>"}, "ATLToASL": {"version": "1.62", "tags": "", "description": "Converts a position from PositionATL to PositionASL", "example": "ATLToASL (getPosATL player) isEqualTo getPosASL player", "docSyntax": "ATLToASL pos", "syntax": "ATLToASL <array>"}, "deActivateKey": {"version": "1.62", "tags": "", "description": "Deactivates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the description.ext file of the missions.", "example": "deActivateKey \"Mission04Key\";", "docSyntax": "deActivateKey keyname", "syntax": "deActivateKey keyname"}, "eyePos": {"version": "1.62", "tags": "[AG] ", "description": "Returns the object's eyes / main turret position.", "example": "eyePos player", "docSyntax": "eyePos object", "syntax": "eyePos <object>"}, "gearIDCAmmoCount": {"version": "1.62", "tags": "", "description": "Returns ammo count of assigned magazine.", "example": "ammo = gearIDCAmmoCount _control;", "docSyntax": "gearIDCAmmoCount idc", "syntax": "gearIDCAmmoCount <scalar>"}, "gearSlotAmmoCount": {"version": "1.62", "tags": "", "description": "Returns ammo count of assigned magazine.", "example": "ammo = gearSlotAmmoCount _control;", "docSyntax": "gearSlotAmmoCount control", "syntax": "gearSlotAmmoCount <uiControl>"}, "gearSlotData": {"version": "1.62", "tags": "", "description": "Returns gear slot item name.", "example": "Open any ammobox and click by any gear slots", "docSyntax": "gearSlotData control", "syntax": "gearSlotData <uiControl>"}, "libraryCredits": {"version": "1.62", "tags": "", "description": "Returns the credits for the libraries used by the game.", "example": "hint str libraryCredits; //\u00a0as of Arma 2 OA 1.62.95208 /* [ [ \"Botan\", \"1999-2012 Jack Lloyd, 2001 Peter J Jones, 2004-2007 Justin Karneges, 2004 Vaclav Ovsik, 2005 Matthew Gregan, 2005-2006 Matt Johnston, 2006 Luca Piccarreta, 2007 Yves Jerschow, 2007-2008 FlexSecure GmbH, 2007-2008 Technische Universitat Darmstadt, 2007-2008 Falko Strenzke, 2007-2008 Martin Doering, 2007 Manuel Hartl, 2007 Christoph Ludwig, 2007 Patrick Sona, 2010 Olivier de Gaalon\" ], [ \"rapidjson\", \"2011 Milo Yip\" ], [ \"libcurl\", \"Copyright (c) 1996 - 2012, Daniel Stenberg\" ], [ \"GameSpy\", \"2009 GameSpy Industries, Inc.\" ], [ \"Theora\", \"2002-2009 by the Xiph.Org Foundation http://www.xiph.org/\" ], [ \"OggVorbis\", \"1994-2002 by the Xiph.Org Foundation http://www.xiph.org/\" ], [ \"Intel JPEG Library\", \"1998 Intel Corporation\" ], [ \"Matrix Template Library\", \"2001-2005 The Trustees of Indiana University\" ], [ \"Matrix Template Library\", \"1998-2001 University of Notre Dame\" ], [ \"Speex\", \"2002-2006 Jean-Marc Valin\" ], [ \"LZO Professional\", \"1996-2011 Markus Franz Xaver Johannes Oberhumer\" ], [ \"NVIDIA FXAA by TIMOTHY LOTTES\", \"2010, 2011 NVIDIA CORPORATION\" ], [ \"Jimenez's MLAA\", \"2012 2011 by Jorge Jimenez, Belen Masia, Jose I. Echevarria, Fernando Navarro and Diego Gutierrez\" ] ] */", "docSyntax": "libraryCredits", "syntax": "libraryCredits"}, "libraryDisclaimers": {"version": "1.62", "tags": "", "description": "Returns the library disclaimers.", "example": "hint str libraryDisclaimers; // as in Arma2 OA 1.62.95208", "docSyntax": "libraryDisclaimers", "syntax": "libraryDisclaimers"}, "lineIntersects": {"version": "1.62", "tags": "[AG] ", "description": "Checks for object intersection with a virtual line between two positions. Returns true if intersects with an object.", "example": "lineIntersects [eyePos player, aimPos chopper, player, chopper]", "docSyntax": "lineIntersects [begPos, endPos, objIgnore1, objIgnore2]", "syntax": "lineIntersects [begPos,endPos,objIgnore1,objIgnore2]"}, "lineIntersectsWith": {"version": "1.62", "tags": "[AG] ", "description": "Returns objects intersecting with the virtual line from begPos to endPos. By default resulting array of intersecting objects is unsorted. To sort by distance set sortByDistance param to true.", "example": "_objects = lineIntersectsWith [eyePos player, AGLtoASL screenToWorld [0.5,0.5]];", "docSyntax": "lineIntersectsWith [begPos, endPos, objIgnore1, objIgnore2, sortByDistance]", "syntax": "lineIntersectsWith [begPos,endPos,objIgnore1,objIgnore2,sortByDistance]"}, "moonIntensity": {"version": "1.62", "tags": "", "description": "Returns the intensity of the moon's brightness in range 0...1.", "example": "_intensity = moonIntensity;", "docSyntax": "moonIntensity", "syntax": "moonIntensity"}, "productVersion": {"version": "1.62", "tags": "", "description": "Returns the product's friendly name, identifier and version. In Arma 3 it also returns branch identifier, whether or not the game was launched using mods, and the platform.", "example": "hint str productVersion; //\u00a0would return [\"Arma 2 OA\", \"arma2oa\", 162, 95208] on Arma 2 OA 1.62.95208", "docSyntax": "productVersion", "syntax": "productVersion"}, "publicVariableClient": {"version": "1.62", "tags": "", "description": "Send the variable value to the client computer - same limitations regarding variable type as publicVariable. The Client ID is the temporary ID given to a connected client for that session. You can find out this ID with the owner command (using it on a player's character, for example, will give you that players client ID).", "example": "3 publicVariableClient \"CTFscoreOne\";", "docSyntax": "clientID publicVariableClient varName", "syntax": "clientID publicVariableClient varName"}, "publicVariableServer": {"version": "1.62", "tags": "", "description": "Send the variable value to the server - same limitations regarding variable type as publicVariable.", "example": "publicVariableServer \"CTFscoreOne\";", "docSyntax": "publicVariableServer varName", "syntax": "publicVariableServer varName"}, "setOwner": {"version": "1.62", "tags": "[SE] ", "description": "From server machine, change the ownership of an object to a given client. Returns true if locality was changed.", "example": "_someObject setOwner 12;", "docSyntax": "object setOwner clientID", "syntax": "<object> setOwner clientID"}, "setToneMapping": {"version": "1.62", "tags": "", "description": "Applies a specific tone mapping to the game.", "example": "setToneMapping \"Filmic\"", "docSyntax": "setToneMapping toneName", "syntax": "setToneMapping toneName"}, "setToneMappingParams": {"version": "1.62", "tags": "", "description": "Edits tone mapping parameters.", "example": "\"Filmic\" setToneMappingParams [0.2, 0.30, 0.20, 0.30, 0.01, 3.750, 6, 4]", "docSyntax": "toneName setToneMappingParams params", "syntax": "toneName setToneMappingParams <any>"}, "setUnitRecoilCoefficient": {"version": "1.62", "tags": "", "description": "Proportionaly increase/decrease unit's recoil. Drives muzzle up with every shot when supplied positive number and down when negative. 0 cancels recoil.", "example": "player setUnitRecoilCoefficient 10", "docSyntax": "unitName setUnitRecoilCoefficient coefficient", "syntax": "<objUnit> setUnitRecoilCoefficient coefficient"}, "sunOrMoon": {"version": "1.62", "tags": "", "description": "12:00 - 1 (...) - 1 18:39 - 0.911201 18:42 - 0.576303 18:45 - 0.240862 18:48 - 0 (...) - 0 06:00 - 0.0695308 06:03 - 0.404731 06:06 - 0.739519 06:09 - 1 (...) - 1 Returns the sun to moon transition state in range 0..1.", "example": "private _transitionState = sunOrMoon;", "docSyntax": "sunOrMoon", "syntax": "sunOrMoon"}, "terrainIntersect": {"version": "1.62", "tags": "", "description": "Checks for intersection of terrain between two AGL positions. Returns true if intersects with terrain. For ASL variant see terrainIntersectASL", "example": "_intersects = terrainIntersect [getPos player, getPos chopper];", "docSyntax": "terrainIntersect [pos1, pos2]", "syntax": "terrainIntersect [pos1,pos2]"}, "terrainIntersectASL": {"version": "1.62", "tags": "", "description": "Checks for intersection of terrain between two ASL positions. Returns true if intersects with terrain. For AGL variant, see terrainIntersect.", "example": "_intersects = terrainIntersectASL [getPosASL player, getPosASL chopper];", "docSyntax": "terrainIntersectASL [pos1, pos2]", "syntax": "terrainIntersectASL [pos1,pos2]"}, "unitRecoilCoefficient": {"version": "1.62", "tags": "", "description": "Returns recoil coefficient of a soldier.", "example": "_myRecoil = unitRecoilCoefficient player", "docSyntax": "unitRecoilCoefficient soldier", "syntax": "unitRecoilCoefficient soldier"}, "visiblePositionASL": {"version": "1.62", "tags": "", "description": "Returns an object's rendered 3D position ASL (z value above sea level) in render time scope.", "example": "playerRenderedPosASL = visiblePositionASL player;", "docSyntax": "visiblePositionASL object", "syntax": "visiblePositionASL <object>"}, "diag_captureFrame": {"version": "1.63", "tags": "", "description": "This command starts counting frames from the moment it is executed and when the count reaches the number passed as param, the current frame is captured and captured data UI dialog appears, similar to diag_captureSlowFrame.", "example": "diag_captureFrame 1; //capture the first frame after command execution", "docSyntax": "diag_captureFrame frame", "syntax": "diag_captureFrame frame", "type": "diagnoseStatement"}, "diag_captureSlowFrame": {"version": "1.63", "tags": "", "description": "Opens \"capture frame\" dialog if current frame exceeds set threshold in seconds. One can indicate to either capture duration of a specific profiling selection or the total duration of the frame. The selection names can be obtained by expanding the profiling tree. Clicking on a tree item will highlight the item on the graph and vice versa. The GUI also provides method of copying of the displayed data to clipboard. Some of the selections:", "example": "diag_captureSlowFrame ['total',0.003];", "docSyntax": "diag_captureSlowFrame [section, threshold]", "syntax": "diag_captureSlowFrame [section,threshold]", "type": "diagnoseStatement"}, "diag_logSlowFrame": {"version": "1.63", "tags": "", "description": "Log all frames, where section takes longer than the threshold (in seconds).", "example": "diag_logSlowFrame ['total', 0.3];", "docSyntax": "diag_logSlowFrame [section, threshold]", "syntax": "diag_logSlowFrame [section,threshold]", "type": "diagnoseStatement"}, "getPlayerUIDOld": {"version": "1.63", "tags": "", "description": "Returns the old UniqueID of Arma 2 OA of the given unit as string if it is player and empty value if it is AI. The uniqueID may be up to 100 characters long and may contain numbers, uppercase letters and underscores (the value can be used to construct a valid variable name by appending to another valid variable name).", "example": "_uid = getPlayerUIDOld player;", "docSyntax": "getPlayerUIDOld unit", "syntax": "getPlayerUIDOld <objUnit>"}, "hasInterface": {"version": "1.63", "tags": "", "description": "Returns true if the computer has an interface (a real player). False for a dedicated server or for a headless client.", "example": "_isHC =\u00a0!(hasInterface || isDedicated);", "docSyntax": "hasInterface", "syntax": "hasInterface"}, "onEachFrame": {"version": "1.63", "tags": "", "description": "Runs given statement every frame.", "example": "onEachFrame { hintSilent str position player}; //\u00a0Hints position every frame", "docSyntax": "onEachFrame statement", "syntax": "onEachFrame statement"}, "systemChat": {"version": "1.63", "tags": "[EL] ", "description": "Types text to the system radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "systemChat \"Hello world!\";", "docSyntax": "systemChat text", "syntax": "systemChat <string>"}, "addWeaponTurret": {"version": "1.64", "tags": "[AL] [EG] ", "description": "Adds a weapon to the turret. Use turret path [-1] for driver's turret.", "example": "_tank addWeaponTurret [\"LMG_M200\", [0,0]];", "docSyntax": "vehicle addWeaponTurret [weaponName, turretPath]", "syntax": "<objVehicle> addWeaponTurret [weaponName,turretPath]"}, "getHit": {"version": "1.64", "tags": "[AG] ", "description": "Returns selection damage. Same as getHitPointDamage, only the argument is selection part instead of hit point.", "example": "player getHit \"head\";", "docSyntax": "vehicle getHit selection", "syntax": "<objVehicle> getHit selection"}, "removeWeaponTurret": {"version": "1.64", "tags": "[AL] [EG] ", "description": "Removes weapon from the turret. Use turret path [-1] for driver's turret.", "example": "_tank removeWeaponTurret [\"LMG_M200\", [0,0]];", "docSyntax": "vehicle removeWeaponTurret [weaponName, turretPath]", "syntax": "<objVehicle> removeWeaponTurret [weaponName,turretPath]"}}