{"BIS_fnc_AAN": {"version": "1.50", "tags": "", "description": "Add an AAN overlay to the screen, with one headline and a rolling text on the bottom.", "example": "[ parseText \"<t size='2'>AAN live in Takistan</t>\", parseText \"Weather coming up hot and steamy - Takistan shelled again from border area\" ] spawn BIS_fnc_AAN;", "docSyntax": "[headline, rollingText] spawn BIS_fnc_AAN", "syntax": "[headline,rollingText] spawn BIS_fnc_AAN"}, "actionKeysNamesArray": {"version": "1.50", "tags": "", "description": "Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or user action names.", "example": "_actionList = actionKeysNamesArray \"ReloadMagazine\";", "docSyntax": "actionKeysNamesArray userAction", "syntax": "actionKeysNamesArray userAction"}, "addBackpack": {"version": "1.50", "tags": "", "description": "Adds a backpack for a unit. If a unit already has a backpack, the old backpack will be placed on the ground under the unit. Items defined in the backpack's config will be added as well.", "example": "this addBackpack \"TK_RPG_Backpack_EP1\";", "docSyntax": "unit addBackpack backpackClassName", "syntax": "<objUnit> addBackpack backpackClassName"}, "addCamShake": {"version": "1.50", "tags": "", "description": "Creates the camera shaking effect, like when you are near an explosion", "example": "addCamShake [10, 2, 25]; //\u00a0Shakes the camera for 1 second", "docSyntax": "addCamShake [power, duration, frequency]", "syntax": "addCamShake [power,duration,frequency]"}, "aimedAtTarget": {"version": "1.50", "tags": "", "description": "Returns how good the weapon of the vehicle is aimed at the target.", "example": "_aimingQuality = heli aimedAtTarget [target];", "docSyntax": "vehicle aimedAtTarget [target, weapon]", "syntax": "<objVehicle> aimedAtTarget [<object>,<string>]"}, "backpackSpaceFor": {"version": "1.50", "tags": "", "description": "Returns how much space is in backpack for given weapon or magazine", "example": "(backpackContainer player) backpackSpaceFor \"m16\"; //\u00a0[weapons, magazines]", "docSyntax": "backpack backpackSpaceFor weaponName", "syntax": "backpack backpackSpaceFor weaponName"}, "BIS_fnc_boundingBoxCorner": {"version": "1.50", "tags": "", "description": "/* Description: Returns position of all four bounding box corners OR Returns position of the nearest corner to the given position Parameter(s): _this: OBJECT - object with bounding box OR _this: ARRAY in format: 0: OBJECT - object with bounding box 1: ARRAY or OBJECT - position for which the nearest corner is returned Returns: ARRAY in format [pos1, pos2, pos3, pos4] - 4 corners of the bounding box OR ARRAY in format [x,y,z] - position of the nearest corner Example 1: _corners = car call BIS_fnc_boundingBoxCorner; Example 2: _nearestCorner = [car, player] call BIS_fnc_boundingBoxCorner; */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_boundingBoxDimensions": {"version": "1.50", "tags": "", "description": "Returns the sizes of the three dimensions of an object's bounding box.", "example": "[player] call BIS_fnc_boundingBoxDimensions;//Returns [1.6,2.2,2] for soldier", "docSyntax": "[object] call BIS_fnc_boundingBoxDimensions", "syntax": "[<object>] call BIS_fnc_boundingBoxDimensions"}, "BIS_fnc_boundingBoxMarker": {"version": "1.50", "tags": "", "description": "Creates marker on object with size of objects' bounding box.", "example": "BIS_Vehicle call BIS_fnc_boundingBoxMarker;", "docSyntax": "object call BIS_fnc_boundingBoxMarker", "syntax": "<object> call BIS_fnc_boundingBoxMarker"}, "BIS_fnc_boundingCircle": {"version": "1.50", "tags": "", "description": "Returns size of bounding circle (calculated from X and Y coordinates). This is actually the 2D horizontal diagonal length of the boundingBox.", "example": "vehicle player call BIS_fnc_boundingCircle;", "docSyntax": "object call BIS_fnc_boundingCircle", "syntax": "<object> call BIS_fnc_boundingCircle"}, "BIS_fnc_configViewer": {"version": "1.50", "tags": "", "description": "Opens the Splendid\u2122 Config Viewer.", "example": "call BIS_fnc_configViewer;", "docSyntax": "[parent, cfg, showOk, onSelect, onAdd, header] call BIS_fnc_configViewer", "syntax": "[parent,cfg,showOk,onSelect,onAdd,header] call BIS_fnc_configViewer"}, "currentMuzzle": {"version": "1.50", "tags": "", "description": "Returns a unit's current weapon muzzle. Does not work on vehicles.", "example": "_muzzle = currentMuzzle player;", "docSyntax": "currentMuzzle unit", "syntax": "currentMuzzle <objUnit>"}, "currentVisionMode": {"version": "1.50", "tags": "", "description": "Returns current vision mode of unit's weapon. Vision mode could be one of:", "example": "_currMode = currentVisionMode gunner _tank", "docSyntax": "currentVisionMode entity", "syntax": "currentVisionMode entity"}, "currentWeaponMode": {"version": "1.50", "tags": "", "description": "Returns current weapon mode of unit's weapon. Result can be: \"Single\", \"Burst\", \"FullAuto\", \"manual\", \"player\"", "example": "_weaponMode = currentWeaponMode player;", "docSyntax": "currentWeaponMode gunner", "syntax": "currentWeaponMode gunner"}, "currentZeroing": {"version": "1.50", "tags": "", "description": "Returns current zeroing.", "example": "private _zeroing = currentZeroing player;", "docSyntax": "currentZeroing object", "syntax": "currentZeroing <object>"}, "BIS_fnc_dynamicText": {"version": "1.50", "tags": "", "description": "Shows dynamic opening credits or any type of text.", "example": "[\"<t color='#ff0000' size='.8'>Warning!<br />Stop doing what you are doing</t>\",-1,-1,4,1,0,789] spawn BIS_fnc_dynamicText;", "docSyntax": "[text, x, y, duration, fadeInTime, deltaY, rscLayer] spawn BIS_fnc_dynamicText", "syntax": "[<string>,x,y,duration,fadeInTime,deltaY,rscLayer] spawn BIS_fnc_dynamicText"}, "enableCamShake": {"version": "1.50", "tags": "", "description": "Allows camera shake effects via addCamShake. If set to false, then a currently active shake effect will stop immediately. By default, shake effects are enabled, but once they have been disabled by this command, they will have to be enabled first, in order to be visible.", "example": "enableCamShake false;", "docSyntax": "enableCamShake value", "syntax": "enableCamShake <scalar>"}, "enableGunLights": {"version": "1.50", "tags": "", "description": "Toggles the target group's gun light(s).", "example": "_group enableGunLights false;", "docSyntax": "target enableGunLights state", "syntax": "<object> enableGunLights state"}, "enableIRLasers": {"version": "1.50", "tags": "", "description": "Allows the AI to use IR lasers. Units should be in \"Combat\" behaviour.", "example": "group player enableIRLasers true", "docSyntax": "unitOrGroup enableIRLasers value", "syntax": "unitOrGroup enableIRLasers <scalar>"}, "fadeSpeech": {"version": "1.50", "tags": "", "description": "Changes the master speech volume smoothly within the given time. The default volume is 1.0. Some of the sounds that play through speech channel are:", "example": "5 fadeSpeech 0.1;", "docSyntax": "time fadeSpeech volume", "syntax": "<scalar> fadeSpeech volume"}, "BIS_fnc_findExtreme": {"version": "1.50", "tags": "", "description": "Returns the minimum or maximum value in an array of numbers.", "example": "_result = [[1,4,5,8,3,7], 1] call BIS_fnc_findExtreme; //\u00a0returns 8 _result = [[1,4,5,8,3,7], 0] call BIS_fnc_findExtreme; //\u00a0returns 1", "docSyntax": "[numbers, mode] call BIS_fnc_findExtreme", "syntax": "[numbers,mode] call BIS_fnc_findExtreme"}, "fireAtTarget": {"version": "1.50", "tags": "", "description": "Remotely forces a unit to fire the given weapon. See also BIS_fnc_fire.", "example": "_handle = this fireAtTarget [groundtarget1,\"HellfireLauncher\"];", "docSyntax": "sourceVehicle fireAtTarget [targetVehicle, weaponMuzzleName]", "syntax": "sourceVehicle fireAtTarget [targetVehicle,weaponMuzzleName]"}, "forceWalk": {"version": "1.50", "tags": "", "description": "Forces unit to walk even if run or sprint is selected.", "example": "player forceWalk true;", "docSyntax": "unit forceWalk value", "syntax": "<objUnit> forceWalk <scalar>"}, "BIS_fnc_FTLmanager": {"version": "1.50", "tags": "", "description": "FTL (Friendly To Local) manager tracks relationship between player and civilian side.", "example": "[\"Init\"] call BIS_fnc_FTLmanager;", "docSyntax": "[functionCalled, type] call BIS_fnc_FTLmanager", "syntax": "[functionCalled,type] call BIS_fnc_FTLmanager"}, "getElevationOffset": {"version": "1.50", "tags": "", "description": "Returns the map elevation offset from [map]/config.cpp. Returns 0 if there is no elevationOffset defined in the config of the current world.", "example": "_offset = getElevationOffset;", "docSyntax": "getElevationOffset", "syntax": "getElevationOffset"}, "BIS_fnc_infoText": {"version": "1.50", "tags": "", "description": "Example (Click to enlarge)", "example": "[\"Somewhere on Altis\", format [\"Year %1\", date select 0], mapGridPosition player] spawn BIS_fnc_infoText;", "docSyntax": "[string_1, string_2, string_n] spawn BIS_fnc_infoText", "syntax": "[string_1,string_2,string_n] spawn BIS_fnc_infoText"}, "isAutoHoverOn": {"version": "1.50", "tags": "", "description": "Return true if vehicle has enabled auto hover. (always returns false if the vehicle can't set auto hover)", "example": "_isOn = isAutoHoverOn vehicle player;", "docSyntax": "isAutoHoverOn vehicle", "syntax": "isAutoHoverOn <objVehicle>"}, "isForcedWalk": {"version": "1.50", "tags": "", "description": "Returns true if player is forced to walk with forceWalk.", "example": "_bool = isForcedWalk player;", "docSyntax": "isForcedWalk unitName", "syntax": "isForcedWalk <objUnit>"}, "isManualFire": {"version": "1.50", "tags": "", "description": "Returns true if manual fire is on. Manual fire could either be selected in vehicle action menu (if available) or with action \"ManualFire\" and \"ManualFireCancel\". Always returns false for a soldier.", "example": "_bool = isManualFire vehicle player;", "docSyntax": "isManualFire vehicleName", "syntax": "isManualFire vehicleName"}, "isWalking": {"version": "1.50", "tags": "", "description": "Returns true if walk is toggled (default W+S in Arma 3).", "example": "_bool = isWalking player;", "docSyntax": "isWalking unitName", "syntax": "isWalking <objUnit>"}, "laserTarget": {"version": "1.50", "tags": "", "description": "Returns laser target object created by given unit (vehicle or soldier) when using a laser targeting device.", "example": "private _target = laserTarget gunner heli;", "docSyntax": "laserTarget unitName", "syntax": "laserTarget <objUnit>"}, "BIS_fnc_linearConversion": {"version": "1.50", "tags": "", "description": "Linear conversion of a value from one set to another", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_music": {"version": "1.50", "tags": "", "description": "Randomly play provided tracks defined in CfgMusic and does a 3 seconds fade out. This function takes accTime into account. See also BIS_fnc_jukebox.", "example": "[[\"myMusic1\", \"myMusic2\"], 1] call BIS_fnc_music;", "docSyntax": "[tracklist, delay] call BIS_fnc_music", "syntax": "[tracklist,<scalar>] call BIS_fnc_music"}, "removeBackpack": {"version": "1.50", "tags": "", "description": "Removes unit's backpack", "example": "removeBackpack this;", "docSyntax": "removeBackpack unit", "syntax": "removeBackpack <objUnit>"}, "resetCamShake": {"version": "1.50", "tags": "", "description": "Stops any ongoing camera shake effects. Does not prevent new effects from being created. To disallow new effects altogether, enableCamShake should be used.", "example": "resetCamShake;", "docSyntax": "resetCamShake", "syntax": "resetCamShake"}, "BIS_fnc_respawnManager": {"version": "1.50", "tags": "", "description": "/******************************************************************************* Version: 2.0 Name: Respawn manager DESCRIPTION: All checkpoints must be markers with name prefix BIS_checkpointnr PARAMETERS: 1) function called - string, list of functions: - Init - Destroy - AddCheckpoint - RemoveCheckpoint 2) parameter for the function For more information see https://wiki.bistudio.com/index.php/RespawnManager RETURNED VALUE: depends on the function called TODO: -performance: add markers positions to the array instead of the testing their positions every loop in _CheckNearestCheckpoint function - DONE -pridat funkci GetActualCheckpoint(character) - DONE -osetrit pripad, kdy postava neexistuje (je prave v respawnu/zahynula) - NEPOTREBUJEME -typy markeru podle modu: normal/debug - DONE -optional parameter marker name - DONE -optional prefix marker name as a parameter to the Init procedure -add functionality for 3 parameters function call - DONE -vlastni lokalni checkpointy(markery) pro hratelne postavy(AddCheckpoint/RemoveCheckpoint) *******************************************************************************/", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "scoreSide": {"version": "1.50", "tags": "", "description": "Returns score for the given side. MP Only.", "example": "_number = scoreSide west;", "docSyntax": "scoreSide side", "syntax": "scoreSide <objSide>"}, "BIS_fnc_scriptedMove": {"version": "1.50", "tags": "", "description": "Force a unit to turn towards and walk to", "example": "[myUnit, [getMarkerPos \"wp1\", getMarkerPos \"wp2\", getMarkerPos \"wp3\"]] call BIS_fnc_scriptedMove;", "docSyntax": "[unit, waypoints, code, walkAnim, animLength] call BIS_fnc_scriptedMove", "syntax": "[<objUnit>,waypoints,<code>,walkAnim,animLength] call BIS_fnc_scriptedMove"}, "sendUDPMessage": {"version": "1.50", "tags": "", "description": "Send message to given address using UDP protocol. Returns false if the message has not been delivered Note: Not implemented (see talk page for more info).", "example": "_bool = sendUDPMessage [\"192.168.0.1\", 2302, \"Here goes you message...\"];", "docSyntax": "sendUDPMessage [ip, port, message]", "syntax": "sendUDPMessage [ip,port,message]"}, "setCamShakeDefParams": {"version": "1.50", "tags": "", "description": "Sets camera shake default parameters.", "example": "setCamShakeDefParams [1, 2, 3, 4, 5, .5, .5];", "docSyntax": "setCamShakeDefParams [power, duration, frequency, minSpeed, minMass, caliberCoefHit, vehicleCoef]", "syntax": "setCamShakeDefParams [power,duration,frequency,minSpeed,minMass,caliberCoefHit,vehicleCoef]"}, "setCamShakeParams": {"version": "1.50", "tags": "", "description": "Sets camera shake parameters. Will not have any effect until shake is started via addCamShake.", "example": "setCamShakeParams [0.1, 1, 1, 1, true];", "docSyntax": "setCamShakeParams [posCoef, vertCoef, horzCoef, bankCoef, interpolation]", "syntax": "setCamShakeParams [posCoef,vertCoef,horzCoef,bankCoef,interpolation]"}, "setCamUseTI": {"version": "1.50", "tags": "", "description": "Sets thermal vision mode for currently used camera. This command only works with camCreate created camera that is currently the main camera for the player (see Example 2).", "example": "true setCamUseTI 1;", "docSyntax": "state setCamUseTI modeIndex", "syntax": "state setCamUseTI modeIndex"}, "setSimpleTaskTarget": {"version": "1.50", "tags": "", "description": "Attach a target to the simple task.", "example": "task setSimpleTaskTarget [targetVehicle, true];", "docSyntax": "task setSimpleTaskTarget [target, precisePosition]", "syntax": "<objTask> setSimpleTaskTarget [<object>,precisePosition]"}, "setVehicleTIPars": {"version": "1.50", "tags": "", "description": "Sets the \"heat\" state of different vehicle parts for Thermal Imaging detection. This allows simulation of heated up parts of a vehicle without it actually having to utilize them - on a range from 0 to 1, 0 being cold, 1 being hot.", "example": "vehicle player setVehicleTIPars [1, 1, 1]; //\u00a0set all parts hot vehicle player setVehicleTIPars [0, 0, 0]; //\u00a0set all parts cold vehicle player setVehicleTIPars [0.5, 0.5, 0.5]; //\u00a0set all parts warm", "docSyntax": "vehicle setVehicleTIPars [engine, wheels, weapon]", "syntax": "<objVehicle> setVehicleTIPars [engine,wheels,<string>]"}, "setVelocityTransformation": {"version": "1.50", "tags": "", "description": "Interpolates and applies PositionASL, velocity, vectorDir and vectorUp to the given object based on the interval value.", "example": "_tracker setVelocityTransformation [ _currentPos, _nextPos, _currentVelocity, _nextVelocity, _currentVectorDir, _nextVectorDir, _currentVectorUp, _nextVectorUp, _interval ];", "docSyntax": "object setVelocityTransformation [fromPosASL, toPosASL, fromVelocity, toVelocity, fromVectorDir, toVectorDir, fromVectorUp, toVectorUp, interval, customCenter]", "syntax": "<object> setVelocityTransformation [fromPosASL,toPosASL,fromVelocity,toVelocity,fromVectorDir,toVectorDir,fromVectorUp,toVectorUp,interval,customCenter]"}, "BIS_fnc_spawnEnemy": {"version": "1.50", "tags": "", "description": "Constantly spawns enemies around a player according to array of enemy classes. The units will try to hunt down the player.", "example": "[player, player, opfor, [\"O_Soldier_F\"]] spawn BIS_fnc_spawnEnemy;", "docSyntax": "[aPlayer, target, side, classes, maxEnemies, delay, code] spawn BIS_fnc_spawnEnemy", "syntax": "[aPlayer,<object>,<objSide>,classes,maxEnemies,<scalar>,<code>] spawn BIS_fnc_spawnEnemy"}, "BIS_fnc_spotter": {"version": "1.50", "tags": "", "description": "Make spotter report target distance to sniper. Will only stop if one of the two units dies.", "example": "[player, unitSpotter] call BIS_fnc_spotter;", "docSyntax": "[sniper, spotter] call BIS_fnc_spotter", "syntax": "[sniper,spotter] call BIS_fnc_spotter"}, "unitBackpack": {"version": "1.50", "tags": "", "description": "Returns unit's backpack", "example": "private _myBackpack = unitBackpack player;", "docSyntax": "unitBackpack unit", "syntax": "unitBackpack <objUnit>"}, "BIS_fnc_unitCapture": {"version": "1.50", "tags": "", "description": "Records movement data of input unit over a specified period of time. Simplified. Pressing the Esc key, the duration ending, or the unit dying ends the recording.", "example": "[BIS_Vehicle, 50, 30, true, 10] spawn BIS_fnc_unitCapture;", "docSyntax": "[unit, duration, FPS, firing, startTime] spawn BIS_fnc_unitCapture", "syntax": "[<objUnit>,duration,FPS,firing,startTime] spawn BIS_fnc_unitCapture"}, "BIS_fnc_unitCaptureFiring": {"version": "1.50", "tags": "", "description": "Records weapon fire data of input unit over a specified period of time. Pressing the ESC key, the duration ending, or the unit dying ends the recording.", "example": "[BIS_Vehicle, 50, 10] spawn BIS_fnc_unitCaptureFiring;", "docSyntax": "[unit, duration, startTime] spawn BIS_fnc_unitCaptureFiring", "syntax": "[<objUnit>,duration,startTime] spawn BIS_fnc_unitCaptureFiring"}, "BIS_fnc_unitCaptureSimple": {"version": "1.50", "tags": "", "description": "Records movement data of input unit over a specified period of time. Simplified. Pressing the Esc key, the duration ending, or the unit dying ends the recording.", "example": "[BIS_Vehicle, 50, 30, true, 10] spawn BIS_fnc_unitCaptureSimple;", "docSyntax": "[unit, duration, FPS, firing, startTime] spawn BIS_fnc_unitCaptureSimple", "syntax": "[<objUnit>,duration,FPS,firing,startTime] spawn BIS_fnc_unitCaptureSimple"}, "BIS_fnc_unitPlay": {"version": "1.50", "tags": "", "description": "Plays back input movement data on input unit. Simplified.", "example": "[ vehicle player, _unitCaptureData ] spawn BIS_fnc_unitPlay", "docSyntax": "[unit, data, varDone, stateIgnore, obsolete_1, obsolete_2, skipTime] spawn BIS_fnc_unitPlay", "syntax": "[<objUnit>,data,varDone,stateIgnore,obsolete_1,obsolete_2,skipTime] spawn BIS_fnc_unitPlay"}, "BIS_fnc_unitPlayFiring": {"version": "1.50", "tags": "", "description": "Plays back input weapon fire data on input unit.", "example": "_capturedFireData = [[2.135,\"GAU8\",\"<NULL-object>\"]]; [ BIS_Vehicle, _capturedData, true ] spawn BIS_fnc_unitPlayFiring;", "docSyntax": "[unit, data, stateIgnore] spawn BIS_fnc_unitPlayFiring", "syntax": "[<objUnit>,data,stateIgnore] spawn BIS_fnc_unitPlayFiring"}, "BIS_fnc_unitPlaySimple": {"version": "1.50", "tags": "", "description": "Plays back input movement data on input unit. Simplified.", "example": "_capturedData = [[0,[8208.26,1953.13,296.04],67]]; [BIS_Vehicle, _capturedData, [BIS_Object, \"DoneRecording\"], true, false, 0.2, 5] spawn BIS_fnc_unitPlaySimple;", "docSyntax": "[unit, data, varDone, stateIngnore, debug, sleep, skipTime] spawn BIS_fnc_unitPlaySimple", "syntax": "[<objUnit>,data,varDone,stateIngnore,debug,sleep,skipTime] spawn BIS_fnc_unitPlaySimple"}, "BIS_fnc_3Dcredits": {"version": "1.56", "tags": "", "description": "Displays structured text in 3D world. GUI layer for indicator is 2733.", "example": "[\"<t size='2'>Hello World</t>\", getPos helloWorld, 15, 0] spawn BIS_fnc_3Dcredits;", "docSyntax": "[text, position, minDis, fadeDis] spawn BIS_fnc_3Dcredits", "syntax": "[<string>,position,minDis,fadeDis] spawn BIS_fnc_3Dcredits"}, "BIS_fnc_crows": {"version": "1.56", "tags": "", "description": "Spawns flock of crows circling the area.", "example": "bis_crows = [BIS_scientist, 20, 8, 20] call BIS_fnc_crows;", "docSyntax": "[position, areaSize, number, height] call BIS_fnc_crows", "syntax": "[position,areaSize,<scalar>,height] call BIS_fnc_crows"}, "BIS_fnc_customGPS": {"version": "1.56", "tags": "", "description": "Replaces GPS frame.", "example": "[\"ca\\missions_pmc\\data\\ui_gps_ca.paa\", -0.05, 0.16] call BIS_fnc_customGPS;", "docSyntax": "[path, deltaX, deltaY] call BIS_fnc_customGPS", "syntax": "[path,deltaX,deltaY] call BIS_fnc_customGPS"}, "BIS_fnc_customGPSvideo": {"version": "1.56", "tags": "", "description": "Plays in-game video in GPS frame.", "example": "_script = [\"\\ca\\video_pmc\\CP00_Reynolds_b.ogv\",1.04] spawn BIS_fnc_customGPSvideo; waitUntil {scriptDone _script};", "docSyntax": "[path, sizeCoef] spawn BIS_fnc_customGPSvideo", "syntax": "[path,sizeCoef] spawn BIS_fnc_customGPSvideo"}, "BIS_fnc_customGPSVideo": {"version": "1.56", "tags": "", "description": "Plays in-game video in GPS frame.", "example": "[\"myVideo.ogv\", 0.75] call BIS_fnc_customGPSVideo;", "docSyntax": "[videoFilePath, sizeCoef] call BIS_fnc_customGPSVideo", "syntax": "[videoFilePath,sizeCoef] call BIS_fnc_customGPSVideo"}, "BIS_fnc_destroyCity": {"version": "1.56", "tags": "", "description": "Destroys building in given area based on input seed.", "example": "[\"destroyBase\", 500, 42, [ourHouseInTheMiddleOfTheStreet]] call BIS_fnc_destroyCity;", "docSyntax": "[position, areaSize, seed, blacklist] call BIS_fnc_destroyCity", "syntax": "[position,areaSize,seed,blacklist] call BIS_fnc_destroyCity"}, "BIS_fnc_dirIndicator": {"version": "1.56", "tags": "", "description": "Show a 4-directions indicator.", "example": "[player, TheBoss, [0.706, 0.0745, 0.0196, 1]] call BIS_fnc_dirIndicator;", "docSyntax": "[origin, target, color, sizeCoef] call BIS_fnc_dirIndicator", "syntax": "[origin,<object>,<scalar>,sizeCoef] call BIS_fnc_dirIndicator"}, "BIS_fnc_flies": {"version": "1.56", "tags": "", "description": "Spawns flies around position.", "example": "_flies = [position deadBody, 0.05, 1.5] call BIS_fnc_flies;", "docSyntax": "[position, interval, areaSize] call BIS_fnc_flies", "syntax": "[position,interval,areaSize] call BIS_fnc_flies"}, "BIS_fnc_playVideo": {"version": "1.56", "tags": "", "description": "Plays in-game video with a range of options. The function can be called or spawned. If spawned, scriptDone command can be used to see if video is stopped or finished. If called in scheduled environment, the next line of code will not process until the video is stopped or finished.", "example": "_video = [\"A3\\Missions_F_EPA\\video\\A_in_intro.ogv\"] spawn BIS_fnc_playVideo;", "docSyntax": "[content, size, color, skipVarName, bgColor, keepAspect] spawn BIS_fnc_playVideo", "syntax": "[content,size,<scalar>,skipVarName,bgColor,keepAspect] spawn BIS_fnc_playVideo"}, "BIS_fnc_sandstorm": {"version": "1.56", "tags": "", "description": "Creates particle sandstorm round given object.", "example": "[player, 0.04, 0.8, false] call BIS_fnc_sandstorm;", "docSyntax": "[object, interval, brightness, newspapers] call BIS_fnc_sandstorm", "syntax": "[<object>,interval,brightness,newspapers] call BIS_fnc_sandstorm"}, "allowCrewInImmobile": {"version": "1.60", "tags": "", "description": "If true, units can be in a vehicle with broken tracks/wheels.", "example": "_vehicle allowCrewInImmobile true;", "docSyntax": "vehicle allowCrewInImmobile bool", "syntax": "<objVehicle> allowCrewInImmobile <bool>"}, "assignedTeam": {"version": "1.60", "tags": "", "description": "Returns the team the unit belongs to. Possible values:", "example": "_team = assignedTeam player;", "docSyntax": "assignedTeam unitName", "syntax": "assignedTeam <objUnit>"}, "callExtension": {"version": "1.60", "tags": "", "description": "Calls custom .dll also known as Extension. The name of the extension is the name of the extension .dll without \".dll\" part (or without \"_x64.dll\" part on 64-bit Arma). For example if the file is 'myExtension.dll' the name of the extension will be \"myExtension\". For 64-bit extensions, the name of the extension doesn't need to change and is still \"myExtension\". The game will automatically look for 'myExtension_x64.dll' when you use 64-bit Arma exe.", "example": "_return = \"myExtension\" callExtension \"stringToBeParsed\";", "docSyntax": "extension callExtension function", "syntax": "extension callExtension function"}, "entities": {"version": "1.60", "tags": "", "description": "Returns a list of all alive and dead entities of the given type or deriving from the given type. Units in vehicles are ignored with the primary syntax.", "example": "_allcars = entities \"Car\";", "docSyntax": "entities type", "syntax": "entities type"}, "loadMagazine": {"version": "1.60", "tags": "", "description": "Initiates the loading action on given weapon of the turret of a transport. So the new magazine is not available instantly, yet according to the reloadTime.", "example": "vehicle player loadMagazine [[0], \"m256\", \"20Rnd_120mmHE_M1A2\"];", "docSyntax": "transport loadMagazine [turretPath, weaponName, magazineName]", "syntax": "transport loadMagazine [turretPath,weaponName,magazineName]"}, "setWeaponReloadingTime": {"version": "1.60", "tags": "", "description": "Sets reloading phase on the given weapon's current ammo round.", "example": "_success = _vehicle setWeaponReloadingTime [gunner (vehicle player), currentMuzzle gunner vehicle player, 0.5];", "docSyntax": "vehicle setWeaponReloadingTime [gunner, muzzleName, reloadTime]", "syntax": "<objVehicle> setWeaponReloadingTime [gunner,muzzleName,reloadTime]"}, "surfaceNormal": {"version": "1.60", "tags": "", "description": "Returns surface normal on given position.", "example": "_normal = surfaceNormal [300, 500];", "docSyntax": "surfaceNormal position", "syntax": "surfaceNormal position"}, "visiblePosition": {"version": "1.60", "tags": "", "description": "Returns an object's rendered position (z value above surface underneath) in render time scope. Same as getPosVisual.", "example": "playerRenderedPos = visiblePosition player;", "docSyntax": "visiblePosition object", "syntax": "visiblePosition <object>"}, "weaponState": {"version": "1.60", "tags": "", "description": "Returns the given or currently selected weapon state for unit or vehicle. With syntax 2, if no optional arguments are present, currently selected weapon is queried.", "example": "_wsPlayer = weaponState player; //\u00a0[\"arifle_MXC_ACO_F\",\"arifle_MXC_ACO_F\",\"Single\",\"30Rnd_65x39_caseless_mag\",30,0,0]", "docSyntax": "weaponState unit", "syntax": "weaponState <objUnit>"}, "aimPos": {"version": "1.62", "tags": "", "description": "Returns the position of the object other units can aim to.", "example": "_aimPos = aimPos player;", "docSyntax": "aimPos unit", "syntax": "aimPos <objUnit>"}, "ASLToATL": {"version": "1.62", "tags": "", "description": "Converts a position from PositionASL to PositionATL", "example": "ASLToATL (getPosASL player) isEqualTo getPosATL player", "docSyntax": "ASLToATL pos", "syntax": "ASLToATL <array>"}, "ATLToASL": {"version": "1.62", "tags": "", "description": "Converts a position from PositionATL to PositionASL", "example": "ATLToASL (getPosATL player) isEqualTo getPosASL player", "docSyntax": "ATLToASL pos", "syntax": "ATLToASL <array>"}, "deActivateKey": {"version": "1.62", "tags": "", "description": "Deactivates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the description.ext file of the missions.", "example": "deActivateKey \"Mission04Key\";", "docSyntax": "deActivateKey keyname", "syntax": "deActivateKey keyname"}, "eyePos": {"version": "1.62", "tags": "", "description": "Returns the object's eyes / main turret position.", "example": "eyePos player", "docSyntax": "eyePos object", "syntax": "eyePos <object>"}, "gearIDCAmmoCount": {"version": "1.62", "tags": "", "description": "Returns ammo count of assigned magazine.", "example": "ammo = gearIDCAmmoCount _control;", "docSyntax": "gearIDCAmmoCount idc", "syntax": "gearIDCAmmoCount <scalar>"}, "gearSlotAmmoCount": {"version": "1.62", "tags": "", "description": "Returns ammo count of assigned magazine.", "example": "ammo = gearSlotAmmoCount _control;", "docSyntax": "gearSlotAmmoCount control", "syntax": "gearSlotAmmoCount <uiControl>"}, "gearSlotData": {"version": "1.62", "tags": "", "description": "Returns gear slot item name.", "example": "gearSlotData _myControl", "docSyntax": "gearSlotData control", "syntax": "gearSlotData <uiControl>"}, "libraryCredits": {"version": "1.62", "tags": "", "description": "Returns the credits for the libraries used by the game.", "example": "hint str libraryCredits; //\u00a0as of Arma 2 OA 1.62.95208 /* [ [ \"Botan\", \"1999-2012 Jack Lloyd, 2001 Peter J Jones, 2004-2007 Justin Karneges, 2004 Vaclav Ovsik, 2005 Matthew Gregan, 2005-2006 Matt Johnston, 2006 Luca Piccarreta, 2007 Yves Jerschow, 2007-2008 FlexSecure GmbH, 2007-2008 Technische Universitat Darmstadt, 2007-2008 Falko Strenzke, 2007-2008 Martin Doering, 2007 Manuel Hartl, 2007 Christoph Ludwig, 2007 Patrick Sona, 2010 Olivier de Gaalon\" ], [ \"rapidjson\", \"2011 Milo Yip\" ], [ \"libcurl\", \"Copyright (c) 1996 - 2012, Daniel Stenberg\" ], [ \"GameSpy\", \"2009 GameSpy Industries, Inc.\" ], [ \"Theora\", \"2002-2009 by the Xiph.Org Foundation http://www.xiph.org/\" ], [ \"OggVorbis\", \"1994-2002 by the Xiph.Org Foundation http://www.xiph.org/\" ], [ \"Intel JPEG Library\", \"1998 Intel Corporation\" ], [ \"Matrix Template Library\", \"2001-2005 The Trustees of Indiana University\" ], [ \"Matrix Template Library\", \"1998-2001 University of Notre Dame\" ], [ \"Speex\", \"2002-2006 Jean-Marc Valin\" ], [ \"LZO Professional\", \"1996-2011 Markus Franz Xaver Johannes Oberhumer\" ], [ \"NVIDIA FXAA by TIMOTHY LOTTES\", \"2010, 2011 NVIDIA CORPORATION\" ], [ \"Jimenez's MLAA\", \"2012 2011 by Jorge Jimenez, Belen Masia, Jose I. Echevarria, Fernando Navarro and Diego Gutierrez\" ] ] */", "docSyntax": "libraryCredits", "syntax": "libraryCredits"}, "libraryDisclaimers": {"version": "1.62", "tags": "", "description": "Returns the library disclaimers.", "example": "hint str libraryDisclaimers; /* returns, in Arma 2:OA 1.62.95208: [\"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"] */", "docSyntax": "libraryDisclaimers", "syntax": "libraryDisclaimers"}, "lineIntersects": {"version": "1.62", "tags": "", "description": "Checks for object intersection with a virtual line between two positions.", "example": "private _hasStraightLineToChopper = lineIntersects [eyePos player, aimPos chopper, player, chopper];", "docSyntax": "lineIntersects [begPos, endPos, objIgnore1, objIgnore2]", "syntax": "lineIntersects [begPos,endPos,objIgnore1,objIgnore2]"}, "lineIntersectsWith": {"version": "1.62", "tags": "", "description": "Returns objects intersecting with the virtual line from begPos to endPos. By default, the resulting array of intersecting objects is unsorted (see sortByDistance).", "example": "_objects = lineIntersectsWith [eyePos player, AGLtoASL screenToWorld [0.5,0.5]];", "docSyntax": "lineIntersectsWith [begPos, endPos, objIgnore1, objIgnore2, sortByDistance]", "syntax": "lineIntersectsWith [begPos,endPos,objIgnore1,objIgnore2,sortByDistance]"}, "moonIntensity": {"version": "1.62", "tags": "", "description": "Returns the intensity of the moon's brightness in range 0...1.", "example": "_intensity = moonIntensity;", "docSyntax": "moonIntensity", "syntax": "moonIntensity"}, "productVersion": {"version": "1.62", "tags": "", "description": "Returns the product's friendly name, identifier, version and build number.", "example": "hint str productVersion; //\u00a0would return [\"Arma 2 OA\", \"arma2oa\", 162, 95208] on Arma 2 OA 1.62.95208", "docSyntax": "productVersion", "syntax": "productVersion"}, "publicVariableClient": {"version": "1.62", "tags": "", "description": "Send the variable value to the client computer - same limitations regarding variable type as publicVariable. The Client ID is the temporary ID given to a connected client for that session. You can find out this ID with the owner command (using it on a player's character, for example, will give you that players client ID).", "example": "3 publicVariableClient \"CTFscoreOne\";", "docSyntax": "clientID publicVariableClient varName", "syntax": "clientID publicVariableClient varName"}, "publicVariableServer": {"version": "1.62", "tags": "", "description": "Send the variable value to the server - same limitations regarding variable type as publicVariable.", "example": "publicVariableServer \"CTFscoreOne\";", "docSyntax": "publicVariableServer varName", "syntax": "publicVariableServer varName"}, "setOwner": {"version": "1.62", "tags": "", "description": "From server machine, change the ownership of an object to a given client. Using command in an unintended way will log a message to .rpt file. To transfer ownership of all AI units in a group properly, use setGroupOwner instead.", "example": "_someObject setOwner 12;", "docSyntax": "object setOwner clientID", "syntax": "<object> setOwner clientID"}, "setToneMapping": {"version": "1.62", "tags": "", "description": "Applies a specific tone mapping to the game. The tone mapping can be edited with setToneMappingParams.", "example": "setToneMapping \"Filmic\"", "docSyntax": "setToneMapping toneName", "syntax": "setToneMapping toneName"}, "setToneMappingParams": {"version": "1.62", "tags": "", "description": "Edits tone mapping parameters.", "example": "\"Filmic\" setToneMappingParams [0.2, 0.30, 0.20, 0.30, 0.01, 3.750, 6, 4]", "docSyntax": "toneName setToneMappingParams params", "syntax": "toneName setToneMappingParams <any>"}, "setUnitRecoilCoefficient": {"version": "1.62", "tags": "", "description": "Proportionaly increase/decrease unit's recoil. Drives muzzle up with every shot when supplied positive number and down when negative. 0 cancels recoil.", "example": "player setUnitRecoilCoefficient 10", "docSyntax": "unitName setUnitRecoilCoefficient coefficient", "syntax": "<objUnit> setUnitRecoilCoefficient coefficient"}, "sunOrMoon": {"version": "1.62", "tags": "", "description": "12:00 - 1 (...) - 1 18:39 - 0.911201 18:42 - 0.576303 18:45 - 0.240862 18:48 - 0 (...) - 0 06:00 - 0.0695308 06:03 - 0.404731 06:06 - 0.739519 06:09 - 1 (...) - 1 Returns the sun to moon transition state in range 0..1.", "example": "private _transitionState = sunOrMoon;", "docSyntax": "sunOrMoon", "syntax": "sunOrMoon"}, "terrainIntersect": {"version": "1.62", "tags": "", "description": "Checks for intersection of terrain between two AGL positions. Returns true if intersects with terrain. For ASL variant see terrainIntersectASL.", "example": "_intersects = terrainIntersect [getPos player, getPos chopper];", "docSyntax": "terrainIntersect [start, end]", "syntax": "terrainIntersect [start,end]"}, "terrainIntersectASL": {"version": "1.62", "tags": "", "description": "Checks for intersection of terrain between two ASL positions. Returns true if intersects with terrain. For AGL variant, see terrainIntersect.", "example": "_intersects = terrainIntersectASL [getPosASL player, getPosASL chopper];", "docSyntax": "terrainIntersectASL [start, end]", "syntax": "terrainIntersectASL [start,end]"}, "unitRecoilCoefficient": {"version": "1.62", "tags": "", "description": "Returns recoil coefficient of a soldier.", "example": "_myRecoil = unitRecoilCoefficient player", "docSyntax": "unitRecoilCoefficient soldier", "syntax": "unitRecoilCoefficient soldier"}, "visiblePositionASL": {"version": "1.62", "tags": "", "description": "Returns an object's rendered ASL position (z value above sea level) in render time scope.", "example": "_playerRenderedPosASL = visiblePositionASL player;", "docSyntax": "visiblePositionASL object", "syntax": "visiblePositionASL <object>"}}