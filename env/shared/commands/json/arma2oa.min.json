{"abs": {"version": "CMD", "tags": "", "description": "Returns absolute (positive) value of a real number.", "example": "_n = abs -3; //\u00a0Returns 3", "docSyntax": "abs x", "syntax": "abs x"}, "accTime": {"version": "CMD", "tags": "", "description": "Returns the current simulation acceleration factor.", "example": "_acc = accTime;", "docSyntax": "accTime", "syntax": "accTime"}, "acos": {"version": "CMD", "tags": "", "description": "ArcCosine of a number, result in Degrees", "example": "_degrees = acos 0.5; //\u00a0Returns 60", "docSyntax": "acos x", "syntax": "acos x"}, "action": {"version": "CMD", "tags": "", "description": "Make a unit perform an action. See Category:Actions for action names and syntaxes.", "example": "player action [\"SitDown\", player];", "docSyntax": "unit action actionArray", "syntax": "<objUnit> action actionArray"}, "actionKeys": {"version": "CMD", "tags": "", "description": "Returns Array containing dikCodes of keys, buttons and combos assigned to the given user action. Action names could be found in config class ControllerSchemes or user action names or user profile, for example:", "example": "_arrayOfNumbers = actionKeys \"ReloadMagazine\";", "docSyntax": "actionKeys userAction", "syntax": "actionKeys userAction"}, "actionKeysImages": {"version": "CMD", "tags": "", "description": "Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes or user action names.", "example": "_text = actionKeysImages \"ReloadMagazine\"", "docSyntax": "actionKeysImages userAction", "syntax": "actionKeysImages userAction"}, "actionKeysNames": {"version": "CMD", "tags": "", "description": "Returns a list of button names assigned to the given user action. Action names can be found in config class ControllerSchemes or user action names.", "example": "_list = actionKeysNames \"ReloadMagazine\"; //\u00a0\"R\"", "docSyntax": "actionKeysNames userAction", "syntax": "actionKeysNames userAction"}, "actionKeysNamesArray": {"version": "CMD", "tags": "", "description": "Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or user action names.", "example": "_actionList = actionKeysNamesArray \"ReloadMagazine\";", "docSyntax": "actionKeysNamesArray userAction", "syntax": "actionKeysNamesArray userAction"}, "activateAddons": {"version": "CMD", "tags": "", "description": "Activates the listed addons.", "example": "activateAddons [\"BISOFP\"];", "docSyntax": "activateAddons addonsList", "syntax": "activateAddons addonsList"}, "activateKey": {"version": "CMD", "tags": "", "description": "Activates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the description.ext file of the missions.", "example": "activateKey \"Mission04Key\";", "docSyntax": "activateKey keyname", "syntax": "activateKey keyname"}, "addAction": {"version": "CMD", "tags": "", "description": "Adds an entry to the action menu of an object. The action can only be activated when in proximity to the object and looking at it. Adding an action to the player makes that action available to the player at all times. For event handling of user interaction see inGameUISetEventHandler.", "example": "//\u00a0short and sweet player addAction [\"a useless action that does nothing\", {}]; player addAction [\"<t color='#FF0000'>This Useless Action Is RED</t>\", {hint \"RED\"}]; player addAction [\"Hint Hello!\", { hint format [\"Hello %1!\", name player] }]; player addAction [\"String Exec\", \"hint 'this is also compiled'\"];", "docSyntax": "object addAction [title, script, arguments, priority, showWindow, hideOnUse, shortcut, condition, positionInModel, radius, radiusView, showIn3D, available, textDefault, textToolTip]", "syntax": "<object> addAction [title,script,arguments,priority,showWindow,hideOnUse,shortcut,condition,positionInModel,radius,radiusView,showIn3D,available,textDefault,textToolTip]"}, "addBackpack": {"version": "CMD", "tags": "", "description": "Adds a backpack for a unit. If a unit already has a backpack, the old backpack will be placed on the ground under the unit. Items defined in the backpack's config will be added as well.", "example": "this addBackpack \"TK_RPG_Backpack_EP1\";", "docSyntax": "unit addBackpack backpackClassName", "syntax": "<objUnit> addBackpack backpackClassName"}, "addBackpackCargo": {"version": "CMD", "tags": "", "description": "Add backpack(s) to the cargo space of vehicle. Classname list of available backpacks is here.", "example": "this addBackpackCargo [\"TK_RPG_Backpack_EP1\", 2];", "docSyntax": "vehicle addBackpackCargo [backpackClassName, count]", "syntax": "<objVehicle> addBackpackCargo [backpackClassName,count]"}, "addBackpackCargoGlobal": {"version": "CMD", "tags": "", "description": "Add backpack(s) to the cargo space of vehicle.", "example": "this addBackpackCargoGlobal [\"TK_RPG_Backpack_EP1\", 2];", "docSyntax": "vehicle addBackpackCargoGlobal [packClassName, count]", "syntax": "<objVehicle> addBackpackCargoGlobal [packClassName,count]"}, "addCamShake": {"version": "CMD", "tags": "", "description": "Creates the camera shaking effect, like when you are near an explosion", "example": "addCamShake [10, 2, 25]; //\u00a0Shakes the camera for 1 second", "docSyntax": "addCamShake [power, duration, frequency]", "syntax": "addCamShake [power,duration,frequency]"}, "addEditorObject": {"version": "CMD", "tags": "", "description": "Add an object to the editor and assign arguments. Create script is,called with _new equal to true. Returns the ID of the new EditorObject.,Subtype class is optional.", "example": "-", "docSyntax": "map addEditorObject [type,[name1,value1,...],subtype class]", "syntax": "<objMap> addEditorObject [type,[name1,value1,...],subtype class]"}, "addEventHandler": {"version": "CMD", "tags": "", "description": "Adds an Event Handler to the given object.", "example": "_index = player addEventHandler [\"Killed\", {_this exec \"playerKilled.sqs\"}];", "docSyntax": "object addEventHandler [type, code]", "syntax": "<object> addEventHandler [type,<code>]"}, "addGroupIcon": {"version": "CMD", "tags": "", "description": "Adds icon to a group leader. Returns icon ID, Control icons visibility with setGroupIconsVisible.", "example": "groupName addGroupIcon [\"b_inf\", [offsetX, offsetY]]", "docSyntax": "group addGroupIcon [iconClass, offset]", "syntax": "<objGroup> addGroupIcon [iconClass,offset]"}, "addLiveStats": {"version": "CMD", "tags": "", "description": "Adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle).", "example": "player addLiveStats 10;", "docSyntax": "unit addLiveStats score", "syntax": "<objUnit> addLiveStats score"}, "addMagazine": {"version": "CMD", "tags": "", "description": "Adds a magazine to a person. Infantry units can only carry a specific number of magazines, once the magazine slots are filled (or uniform/vest/bagpack are full in Arma 3), any further addMagazine commands are ignored. If class of magazine does not exist, an error message is printed in .rpt: player addMagazine \"dasdsa\"; //\u00a0.rpt: Given magazine[dasdsa] not found)", "example": "player addMagazine \"30Rnd_556x45_STANAG\";", "docSyntax": "unitName addMagazine magazineName", "syntax": "<objUnit> addMagazine magazineName"}, "addMagazineCargo": {"version": "CMD", "tags": "", "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units. Once the magazine cargo space is filled up, any further addMagazineCargo commands are ignored.", "example": "_truck addMagazineCargo [\"M16\", 5];", "docSyntax": "vehicleName addMagazineCargo [magazineName, count]", "syntax": "vehicleName addMagazineCargo [magazineName,count]"}, "addMagazineCargoGlobal": {"version": "CMD", "tags": "", "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units. MP Synchronized", "example": "_truck addMagazineCargoGlobal [\"M16\", 5];", "docSyntax": "vehicleName addMagazineCargoGlobal [magazineName, count]", "syntax": "vehicleName addMagazineCargoGlobal [magazineName,count]"}, "addMagazinePool": {"version": "CMD", "tags": "", "description": "Adds magazines to the magazine pool, of which the player may choose in the following mission. Available in campaigns only.", "example": "addMagazinePool [\"M16\", 20];", "docSyntax": "addMagazinePool [magazineName, count]", "syntax": "addMagazinePool [magazineName,count]"}, "addMagazineTurret": {"version": "CMD", "tags": "", "description": "Adds a magazine to the turret. Use turret path [-1] for driver's turret. Note: you may create invalid combinations by using this function, for example by adding 20 grenades. When doing so, application behaviour is undefined. Since Arma 3 v1.56 it is possible to set custom ammo count in added magazine.", "example": "_tank addMagazineTurret [\"SmokeLauncherMag\",[0,0]];", "docSyntax": "vehicle addMagazineTurret [magazineName, turretPath, ammoCount]", "syntax": "<objVehicle> addMagazineTurret [magazineName,turretPath,ammoCount]"}, "addMenu": {"version": "CMD", "tags": "", "description": "Adds a new menu button. Priority is optional.", "example": "-", "docSyntax": "map addMenu [text,priority]", "syntax": "<objMap> addMenu [<string>,priority]"}, "addMenuItem": {"version": "CMD", "tags": "", "description": "Creates a new menu item. Menu can be \"file\" or \"view\",index is index,as returned from addMenu command. priority is optional and determines,where in the menu the item will reside (higher priority items first).", "example": "-", "docSyntax": "map addMenuItem [menu or index,text,command,priority]", "syntax": "<objMap> addMenuItem [menu or <scalar>,<string>,command,priority]"}, "addMPEventHandler": {"version": "CMD", "tags": "", "description": "Adds a multiplayer event handler (EH) to the given object and returns EH handle.", "example": "_index = player addMPEventHandler [\"MPKilled\", { _this execVM \"playerKilled.sqf\"; }];", "docSyntax": "object addMPEventHandler [type, expression]", "syntax": "<object> addMPEventHandler [type,expression]"}, "addPublicVariableEventHandler": {"version": "CMD", "tags": "", "description": "This command is deprecated since the introduction of remoteExec and remoteExecCall.", "example": "\"publicThis\" addPublicVariableEventHandler { hint format [ \"%1 has been updated to: %2\", _this select 0, _this select 1 ] };", "docSyntax": "varName addPublicVariableEventHandler code", "syntax": "varName addPublicVariableEventHandler <code>"}, "addRating": {"version": "CMD", "tags": "", "description": "Add a number to the rating of a unit - negative values can be used to reduce the rating.", "example": "player addRating 2000;", "docSyntax": "unitName addRating rating", "syntax": "<objUnit> addRating rating"}, "addResources": {"version": "CMD", "tags": "", "description": "Adds resources to a team member.", "docSyntax": "teamMember addResources [resource1, resource2, ...]", "syntax": "teamMember addResources [resource1,resource2,...]"}, "addScore": {"version": "CMD", "tags": "", "description": "Adds a number to the score of a unit. Negative values will remove from the score.", "example": "unit addScore 10;", "docSyntax": "unit addScore score", "syntax": "<objUnit> addScore score"}, "addSwitchableUnit": {"version": "CMD", "tags": "", "description": "Adds an unit to the list of units available for Team Switch. Units marked as playable in editor are automatically switchable. This command allows to add non-playable unit into array of switchableUnits and make them available for teamSwitch. Singleplayer only!", "example": "addSwitchableUnit bob;", "docSyntax": "addSwitchableUnit unit", "syntax": "addSwitchableUnit <objUnit>"}, "addTeamMember": {"version": "CMD", "tags": "", "description": "Add given member to given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.", "example": "_team addTeamMember _teamMember;", "docSyntax": "team addTeamMember member", "syntax": "team addTeamMember <objUnit>"}, "addVehicle": {"version": "CMD", "tags": "", "description": "Adds a specified vehicle for use by a specified AI led group.", "example": "_grp addVehicle _vehicle", "docSyntax": "groupName addVehicle vehicleName", "syntax": "groupName addVehicle vehicleName"}, "addWaypoint": {"version": "CMD", "tags": "", "description": "Adds (or inserts when index is given) a new waypoint to a group. The waypoint is placed randomly within a circle with the given center and radius. The function returns a waypoint with format [group, index].", "example": "_wp = _grp addWaypoint [position player, 0];", "docSyntax": "groupName addWaypoint [center, radius, index, name]", "syntax": "groupName addWaypoint [center,radius,<scalar>,<string>]"}, "addWeapon": {"version": "CMD", "tags": "", "description": "Add a weapon to a unit. For a global version of this command see addWeaponGlobal. Infantry units can only carry a specific number of weapons, once the weapon slots are filled, any further addWeapon commands are ignored.", "example": "player addMagazine \"30Rnd_556x45_Stanag\"; player addWeapon \"BAF_L85A2_RIS_SUSAT\";", "docSyntax": "object addWeapon weapon", "syntax": "<object> addWeapon <string>"}, "addWeaponCargo": {"version": "CMD", "tags": "", "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units. Ignores available cargo space.", "example": "_truck addWeaponCargo [\"M16\", 5];", "docSyntax": "vehicleName addWeaponCargo [weaponName, count]", "syntax": "vehicleName addWeaponCargo [weaponName,count]"}, "addWeaponCargoGlobal": {"version": "CMD", "tags": "", "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units. MP Synchronized", "example": "_truck addWeaponCargoGlobal [\"M16\", 5];", "docSyntax": "vehicleName addWeaponCargoGlobal [weaponName, count]", "syntax": "vehicleName addWeaponCargoGlobal [weaponName,count]"}, "addWeaponPool": {"version": "CMD", "tags": "", "description": "Add weapons to the weapon pool, of which the player may choose in the following mission. Available in campaigns only.", "example": "addWeaponPool [\"M16\",5];", "docSyntax": "addWeaponPool [weaponName, count]", "syntax": "addWeaponPool [weaponName,count]"}, "addWeaponTurret": {"version": "CMD", "tags": "", "description": "Adds a weapon to the turret. Use turret path [-1] for driver's turret.", "example": "_tank addWeaponTurret [\"LMG_M200\", [0,0]];", "docSyntax": "vehicle addWeaponTurret [weaponName, turretPath]", "syntax": "<objVehicle> addWeaponTurret [weaponName,turretPath]"}, "agent": {"version": "CMD", "tags": "", "description": "Return a person for a given agent.", "example": "_obj = agent teamMember _unit;", "docSyntax": "agent teamMember", "syntax": "agent teamMember"}, "agents": {"version": "CMD", "tags": "", "description": "Return a list of agents in the current mission.", "example": "{agent _x moveTo position player} forEach agents;", "docSyntax": "agents", "syntax": "agents"}, "aimedAtTarget": {"version": "CMD", "tags": "", "description": "Returns how good the weapon of the vehicle is aimed at the target.", "example": "_aimingQuality = heli aimedAtTarget [target];", "docSyntax": "vehicle aimedAtTarget [target, weapon]", "syntax": "<objVehicle> aimedAtTarget [<object>,<string>]"}, "aimPos": {"version": "CMD", "tags": "", "description": "Returns the position of the object other units can aim to.", "example": "_aimPos = aimPos player;", "docSyntax": "aimPos unit", "syntax": "aimPos <objUnit>"}, "airportSide": {"version": "CMD", "tags": "", "description": "Gets the side of an airport, set by setAirportSide. Default side is sideUnknown.", "example": "private _airportSide = airportSide 0;", "docSyntax": "airportSide id", "syntax": "airportSide <scalar>"}, "AISFinishHeal": {"version": "CMD", "tags": "", "description": "Alternative Injury Simulation (AIS) end state. Used to tell engine that script side healing is done when using \"HandleHeal\" event handler.", "example": "AISFinishHeal [_wounded, _medic, true];", "docSyntax": "AISFinishHeal [unit, healer, healerCanHeal]", "syntax": "AISFinishHeal [<objUnit>,healer,healerCanHeal]"}, "alive": {"version": "CMD", "tags": "", "description": "Check if given vehicle/person/building is alive (i.e. not dead or destroyed).", "example": "SQS: ?!(alive player)\u00a0: exit", "docSyntax": "alive object", "syntax": "alive <object>"}, "allDead": {"version": "CMD", "tags": "", "description": "Return a list of all dead units including agents and destroyed vehicles. Dead units may be in vehicles.", "example": "{ deleteVehicle _x } forEach allDead;", "docSyntax": "allDead", "syntax": "allDead"}, "allGroups": {"version": "CMD", "tags": "", "description": "Return a list of all groups created on the following sides east, west, resistance/independent and civilian only. Does not contain groups of sideLogic.", "example": "{(leader _x) sideChat \"Go\u00a0! Go\u00a0! Go\u00a0!\"} forEach allGroups;", "docSyntax": "allGroups", "syntax": "allGroups"}, "allMissionObjects": {"version": "CMD", "tags": "", "description": "Returns all objects of the given type that are currently present in the mission. In some cases, the entities command is a much faster alternative to this command.", "example": "_airObjects = allMissionObjects \"Air\";", "docSyntax": "allMissionObjects type", "syntax": "allMissionObjects type"}, "allow3DMode": {"version": "CMD", "tags": "", "description": "Allow/dissallow 3D mode.,", "example": "-", "docSyntax": "map allow3DMode bool", "syntax": "<objMap> allow3DMode <bool>"}, "allowCrewInImmobile": {"version": "CMD", "tags": "", "description": "If true, units can be in a vehicle with broken tracks/wheels.", "example": "_vehicle allowCrewInImmobile true;", "docSyntax": "vehicle allowCrewInImmobile bool", "syntax": "<objVehicle> allowCrewInImmobile <bool>"}, "allowDamage": {"version": "CMD", "tags": "", "description": "Allow or prevent an object being damaged (or injured, or killed). The command does not prevent object from taking scripted damage such as setHit, setHitIndex, setHitPointDamage or setDamage. To check if damage is allowed at current locality, see isDamageAllowed.", "example": "player allowDamage false;", "docSyntax": "object allowDamage allow", "syntax": "<object> allowDamage allow"}, "allowDammage": {"version": "CMD", "tags": "", "description": "Allow or prevent an object being damaged (or injured, or killed). The command does not prevent object from taking scripted damage such as setDamage or setHit.", "example": "player allowDammage false;", "docSyntax": "object allowDammage allow", "syntax": "<object> allowDammage allow"}, "allowFileOperations": {"version": "CMD", "tags": "", "description": "Allow/dissallow file ops (load/save etc).", "example": "-", "docSyntax": "map allowFileOperations bool", "syntax": "<objMap> allowFileOperations <bool>"}, "allowFleeing": {"version": "CMD", "tags": "", "description": "Sets the cowardice level (the lack of courage or bravery) of a group or unit.", "example": "_group1 allowFleeing 0;", "docSyntax": "unitOrGroup allowFleeing cowardice", "syntax": "unitOrGroup allowFleeing cowardice"}, "allowGetIn": {"version": "CMD", "tags": "", "description": "Set if the units given in the list are allowed to enter vehicles.", "example": "[_soldier1, _soldier2] allowGetIn true;", "docSyntax": "unitArray allowGetIn allow", "syntax": "unitArray allowGetIn allow"}, "allUnits": {"version": "CMD", "tags": "", "description": "Returns a list of all units, except agents, dead units or units waiting for respawn, outside and inside vehicles that were created on the following sides east, west, independent and civilian.", "example": "{ _x setDamage 0.5; _x groupChat \"Braaains\"; } forEach allUnits;", "docSyntax": "allUnits", "syntax": "allUnits"}, "ammo": {"version": "CMD", "tags": "", "description": "Check how many rounds are left in the currently loaded magazine in the given muzzle. Since Arma v1.56 the command also returns ammo for units in vehicles.", "example": "_count = player ammo \"M16\"; //returns 30 in case of a full magazine", "docSyntax": "unit ammo muzzle", "syntax": "<objUnit> ammo muzzle"}, "and": {"version": "CMD", "tags": "", "description": "Returns true only if both conditions are true. In case of the alternative syntax, lazy evaluation is used - if left operand is false, evaluation of the right side is ignored.", "example": "if ((not isNull player) and (alive player) and (_enemycount == 0)) then { hint \"you win\u00a0!\"; };", "docSyntax": "a and b", "syntax": "a and b"}, "animate": {"version": "CMD", "tags": "", "description": "Activates given object animation. Animation is defined in CfgModels animations class. Class names listed in CfgVehicles AnimationSources bound to \"Proxy\" controller can also be animated with animate command (see Arma 3: createVehicle/vehicles).", "example": "_building animate [\"maindoor\", 1];", "docSyntax": "object animate [animationName, phase, speed]", "syntax": "<object> animate [animationName,phase,<scalar>]"}, "animationPhase": {"version": "CMD", "tags": "", "description": "Returns the phase of the given animation on the given object. Animation can be scripted (animate, animateSource, animateDoor) or engine driven. Animation names for an object could be found out with animationNames command. When animation is rotation, like with \"MainTurret\" for example, the output is in radians, to convert to degrees use deg command.", "example": "_building animate [\"maindoor\",1]; sleep 1; _p = _building animationPhase \"maindoor\";//\u00a0Returns 1, if the animation speed is two seconds", "docSyntax": "object animationPhase animationName", "syntax": "<object> animationPhase animationName"}, "animationState": {"version": "CMD", "tags": "", "description": "Returns the name of a unit's current primary animation. Seems to be forced to lower case in Arma 3.", "example": "_state = animationState player;", "docSyntax": "animationState unitName", "syntax": "animationState <objUnit>"}, "armoryPoints": {"version": "CMD", "tags": "", "description": "Returns, stored in [USERNAME].ArmaXProfile, value of armoryPoints entry. If the entry doesn't exist, it returns 0.", "example": "_points = armoryPoints;", "docSyntax": "armoryPoints", "syntax": "armoryPoints"}, "asin": {"version": "CMD", "tags": "", "description": "Arcsine of a number, result in Degrees.", "example": "_degrees = asin 0.5; //\u00a0Returns 30", "docSyntax": "asin x", "syntax": "asin x"}, "ASLToATL": {"version": "CMD", "tags": "", "description": "Converts a position from PositionASL to PositionATL", "example": "ASLToATL (getPosASL player) isEqualTo getPosATL player", "docSyntax": "ASLToATL pos", "syntax": "ASLToATL <array>"}, "assert": {"version": "CMD", "tags": "", "description": "Tests a condition and if the condition is false, displays error on screen (if -showscripterrors enabled) and logs error into .rpt file. It does not interrupt the script execution. If script was pre-processed with preprocessFileLineNumbers, it will also show/log the error line number and the file name.", "example": "assert (1 > 2);", "docSyntax": "assert condition", "syntax": "assert condition"}, "assignAsCargo": {"version": "CMD", "tags": "", "description": "Assign a unit as cargo of a vehicle. Used together with orderGetIn to order a unit to get in as cargo into a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the cargo space of the vehicle.", "example": "_soldier1 assignAsCargo _truck; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsCargo vehicleName", "syntax": "<objUnit> assignAsCargo vehicleName"}, "assignAsCommander": {"version": "CMD", "tags": "", "description": "Assign a unit as commander of a vehicle. Used together with orderGetIn to order subordinate units to get in as commander of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the commander place of the vehicle.", "example": "_soldier1 assignAsCommander _tank; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsCommander vehicleName", "syntax": "<objUnit> assignAsCommander vehicleName"}, "assignAsDriver": {"version": "CMD", "tags": "", "description": "Assign a unit as driver of a vehicle. Used together with orderGetIn to order subordinate units to get in as driver of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the driver place of the vehicle.", "example": "_soldier1 assignAsDriver _tank; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsDriver vehicleName", "syntax": "<objUnit> assignAsDriver vehicleName"}, "assignAsGunner": {"version": "CMD", "tags": "", "description": "Assign a unit as gunner of a vehicle. Used together with orderGetIn to order subordinate units to get in as gunner of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the gunner place of the vehicle.", "example": "_soldier1 assignAsGunner _tank; [_soldier1] orderGetIn true;", "docSyntax": "unitName assignAsGunner vehicleName", "syntax": "<objUnit> assignAsGunner vehicleName"}, "assignedCargo": {"version": "CMD", "tags": "", "description": "Returns the list of soldiers assigned to the given vehicle as a cargo.", "example": "_list = assignedCargo _vehicleName", "docSyntax": "assignedCargo vehicle", "syntax": "assignedCargo <objVehicle>"}, "assignedCommander": {"version": "CMD", "tags": "", "description": "Returns the soldier assigned to the given vehicle as a commander.", "example": "_commander = assignedCommander vehicleName;", "docSyntax": "assignedCommander vehicle", "syntax": "assignedCommander <objVehicle>"}, "assignedDriver": {"version": "CMD", "tags": "", "description": "Returns the soldier assigned to the given vehicle as a driver.", "example": "_driver= assignedDriver vehicleName", "docSyntax": "assignedDriver vehicle", "syntax": "assignedDriver <objVehicle>"}, "assignedGunner": {"version": "CMD", "tags": "", "description": "Returns the soldier assigned to the given vehicle as a gunner.", "example": "_gunner = assignedGunner vehicle player;", "docSyntax": "assignedGunner vehicle", "syntax": "assignedGunner <objVehicle>"}, "assignedTarget": {"version": "CMD", "tags": "", "description": "Returns the target assigned to an unit or the vehicle's effectiveCommander. The target can be assigned by the group/vehicle/formation leader (as player via quick command menu or \"target\" complex command menu).", "example": "_target = assignedTarget _T72", "docSyntax": "assignedTarget vehicleName", "syntax": "assignedTarget vehicleName"}, "assignedTeam": {"version": "CMD", "tags": "", "description": "Returns the team the unit belongs to. Possible values:", "example": "_team = assignedTeam player;", "docSyntax": "assignedTeam unitName", "syntax": "assignedTeam <objUnit>"}, "assignedVehicle": {"version": "CMD", "tags": "", "description": "Returns the vehicle an unit is assigned to. If no vehicle is assigned objNull is returned.", "example": "_vehicle = assignedVehicle player;", "docSyntax": "assignedVehicle unit", "syntax": "assignedVehicle <objUnit>"}, "assignedVehicleRole": {"version": "CMD", "tags": "", "description": "Returns the role a unit is assigned to within its assigned vehicle.", "example": "_RoleArray = assignedVehicleRole player;", "docSyntax": "assignedVehicleRole unitName", "syntax": "assignedVehicleRole <objUnit>"}, "assignTeam": {"version": "CMD", "tags": "", "description": "Assigns the unit (in case of a vehicle, its commander) to the given team. Team is an option in group control (unit management) menu that allows to split player group in teams and then give bulk order to separate teams. In order to operate properly, the command requires specific conditions:", "example": "_soldier2 assignTeam \"RED\";", "docSyntax": "unit assignTeam team", "syntax": "<objUnit> assignTeam team"}, "assignToAirport": {"version": "CMD", "tags": "", "description": "Assigns a plane to an airport ID or object.", "example": "plane1 assignToAirport 0", "docSyntax": "plane assignToAirport id", "syntax": "plane assignToAirport <scalar>"}, "atan": {"version": "CMD", "tags": "", "description": "Returns the arcus tangens.", "example": "_degrees = atan 1; //\u00a045", "docSyntax": "atan x", "syntax": "atan x"}, "atan2": {"version": "CMD", "tags": "", "description": "ArcTangent of y/x. Used to determine the angle of a vector [x,y]. Result in Degrees between -180 and 180.", "example": "_xy = [5,3]; _degrees = (_xy select 0) atan2 (_xy select 1); //\u00a059.0362", "docSyntax": "y atan2 x", "syntax": "y atan2 x"}, "atg": {"version": "CMD", "tags": "", "description": "Returns the arcus tangens.", "example": "_atanThreeFifth = atg 3/5;", "docSyntax": "atg x", "syntax": "atg x"}, "ATLToASL": {"version": "CMD", "tags": "", "description": "Converts a position from PositionATL to PositionASL", "example": "ATLToASL (getPosATL player) isEqualTo getPosASL player", "docSyntax": "ATLToASL pos", "syntax": "ATLToASL <array>"}, "attachedObject": {"version": "CMD", "tags": "", "description": "Returns the object a location is attached to. If the location is unattached, then objNull is returned.", "example": "_locAttachedObj = attachedObject myLocation;", "docSyntax": "attachedObject location", "syntax": "attachedObject location"}, "attachObject": {"version": "CMD", "tags": "", "description": "Attaches a location to the specified object. To detach a location, attach it to objNull.", "example": "myLocation attachObject player;", "docSyntax": "location attachObject object", "syntax": "location attachObject <object>"}, "attachTo": {"version": "CMD", "tags": "", "description": "Attaches an object to another object.", "example": "player attachTo [car, [0, 0, 1]];", "docSyntax": "object1 attachTo [object2, offset, memPoint, followBoneRotation]", "syntax": "object1 attachTo [object2,offset,memPoint,followBoneRotation]"}, "attackEnabled": {"version": "CMD", "tags": "", "description": "Return whether a group's leader can issue attack commands to soldiers under his command.", "example": "if (not attackEnabled _soldier) then {_soldier setCombatMode \"Careless\"}", "docSyntax": "attackEnabled name", "syntax": "attackEnabled <string>"}, "backpackSpaceFor": {"version": "CMD", "tags": "", "description": "Returns how much space is in backpack for given weapon or magazine", "example": "(backpackContainer player) backpackSpaceFor \"m16\"; //\u00a0[weapons, magazines]", "docSyntax": "backpack backpackSpaceFor weaponName", "syntax": "backpack backpackSpaceFor weaponName"}, "behaviour": {"version": "CMD", "tags": "", "description": "Returns the behaviour of the individual unit, this is why it only accepts Object as the argument. For Arma 3 behaviour explanation see Arma_3_AI_Behavior", "example": "_soldier setBehaviour \"CARELESS\"; _b = behaviour _soldier; //\u00a0returns \"CARELESS\"", "docSyntax": "behaviour unit", "syntax": "behaviour <objUnit>"}, "benchmark": {"version": "CMD", "tags": "", "description": "Returns the value of \"3D Performance\" in OFP Preferences (flashpoint.cfg). This can be used to estimate the computer performance to adapt CPU and GPU demanding settings like view distance dynamically in missions.", "example": "? (benchmark > 2000)\u00a0: setViewDistance 2000", "docSyntax": "benchmark", "syntax": "benchmark"}, "boundingBox": {"version": "CMD", "tags": "", "description": "Returns a bounding box of given object in model coordinate space, adjusted according to destruction/animation of an object. This command is rather generous on the size estimation, for more precise coordinates use boundingBoxReal.", "example": "private _box = boundingBox _abrams;", "docSyntax": "boundingBox object", "syntax": "boundingBox <object>"}, "boundingCenter": {"version": "CMD", "tags": "", "description": "Returns the position of original (loaded) center of object in model coordinates.", "example": "_center = boundingCenter TruckOne", "docSyntax": "boundingCenter object", "syntax": "boundingCenter <object>"}, "buildingExit": {"version": "CMD", "tags": "", "description": "Returns the given indexed exit in a building. The returned value is in format Position.", "example": "_building buildingExit 0", "docSyntax": "building buildingExit index", "syntax": "building buildingExit <scalar>"}, "buildingPos": {"version": "CMD", "tags": "", "description": "Returns position of a given indexed position in a building.", "example": "_soldier setPosATL (_house1 buildingPos 2);", "docSyntax": "building buildingPos index", "syntax": "building buildingPos <scalar>"}, "buttonAction": {"version": "CMD", "tags": "", "description": "Returns the action assigned to a control of the currently active user dialog. Can be used for buttons and active texts. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "buttonSetAction [100, {player exec \"reply.sqs\"}] _action = buttonAction 100; //\u00a0Returns {player exec \"reply.sqs\"}", "docSyntax": "buttonAction idc", "syntax": "buttonAction <scalar>"}, "buttonSetAction": {"version": "CMD", "tags": "", "description": "Set the action of a control of the currently active user dialog. The script statement is executed on button release and _this is available, but contains \"\"; See Arma: GUI Configuration for more information about user dialogs. Works with:", "example": "buttonSetAction [100, \"player exec \"\"reply.sqs\"\"\"];", "docSyntax": "buttonSetAction [idc, action]", "syntax": "buttonSetAction [<scalar>,action]"}, "cadetMode": {"version": "CMD", "tags": "", "description": "Prior to Arma 3 it returns if the player is currently playing in cadet or veteran mode.", "example": "? (cadetMode)\u00a0: _AIsoldier setSkill 0.1 //sqs", "docSyntax": "cadetMode", "syntax": "cadetMode"}, "camCommand": {"version": "CMD", "tags": "", "description": "Executes a command on the given camera / actor object. Known commands:", "example": "_camera camCommand \"manual on\";", "docSyntax": "camera camCommand command", "syntax": "<objCamera> camCommand command"}, "camCommit": {"version": "CMD", "tags": "", "description": "Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. For camPrepareXXX commands use camCommitPrepared.", "example": "SQS; create a camera object _cam = \"camera\" camCreate [5600,4800,10] _cam camSetTarget player _cam cameraEffect [\"internal\", \"BACK\"] _cam camCommit 0 ; smoothly move the camera to its new position in 6 seconds _cam camSetPos [5680,4720,20] _cam camCommit 6 @camCommitted _cam ; proceed", "docSyntax": "camera camCommit time", "syntax": "<objCamera> camCommit <scalar>"}, "camCommitPrepared": {"version": "CMD", "tags": "", "description": "Smoothly conducts the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. This command is for use with camPrepareXXX commands. For the normal cam command use camCommit.", "example": "//\u00a0Create a camera object _cam = \"camera\" camCreate [5600,4800,10]; _cam camPrepareTarget player; _cam cameraEffect [\"internal\", \"BACK\"]; _cam camCommitPrepared 0; //\u00a0Smoothly move the camera to its new position in 6 seconds _cam camPreparePos [5680,4720,20]; _cam camCommitPrepared 6; waitUntil {camCommitted _cam}; //\u00a0Proceed", "docSyntax": "camera camCommitPrepared time", "syntax": "<objCamera> camCommitPrepared <scalar>"}, "camCommitted": {"version": "CMD", "tags": "", "description": "Checks if the conduction of the last camCommit call already finished.", "example": "SQS: ; create a camera object _cam = \"camera\" camCreate [5600,4800,10] _cam camSetTarget player _cam cameraEffect [\"internal\", \"BACK\"] _cam camCommit 0 ; smoothly move the camera to its new position in 6 seconds _cam camSetPos [5680,4720,20] _cam camCommit 6 @camCommitted _cam ; proceed", "docSyntax": "camCommitted camera", "syntax": "camCommitted <objCamera>"}, "camConstuctionSetParams": {"version": "CMD", "tags": "", "description": "Sets construction camera parameters. To work with \"camconstruct\" object.", "example": "_camera camConstuctionSetParams [getPos player, 50, 20];", "docSyntax": "camera camConstuctionSetParams [[x,y,z], radius, maxAboveLand]", "syntax": "<objCamera> camConstuctionSetParams [[x,y,z],radius,maxAboveLand]"}, "camCreate": {"version": "CMD", "tags": "", "description": "Create a camera or a seagull object on the given position. The creation happens immediately and doesn't wait for camCommit.", "example": "_cam = \"camera\" camCreate (ASLToAGL eyePos player);", "docSyntax": "type camCreate position", "syntax": "type camCreate position"}, "camDestroy": {"version": "CMD", "tags": "", "description": "Destroys camera object created with camCreate. This command doesn't need camCommit.", "example": "camDestroy _cam;", "docSyntax": "camDestroy object", "syntax": "camDestroy <object>"}, "cameraEffect": {"version": "CMD", "tags": "", "description": "Sets the given effect on the given camera. If you want to switch the screen directly to the first-person, aiming, third-person or group view of an object, use switchCamera instead. The effect type \"Terminate\" is used to exit the current camera view and switch back to the player's view. Does not need camCommit.", "example": "_cam cameraEffect [\"internal\", \"BACK\"];", "docSyntax": "camera cameraEffect [effectName, effectPosition, r2tName]", "syntax": "<objCamera> cameraEffect [effectName,effectPosition,r2tName]"}, "cameraEffectEnableHUD": {"version": "CMD", "tags": "", "description": "Enable / disable showing of in-game UI during currently active camera effect. By default the HUD is off, which will make results of drawIcon3D invisible, for example.", "example": "cameraEffectEnableHUD true;", "docSyntax": "cameraEffectEnableHUD enable", "syntax": "cameraEffectEnableHUD <bool>"}, "cameraInterest": {"version": "CMD", "tags": "", "description": "Return camera interest for given entity, as set by setCameraInterest, or as autodetected.", "example": "camInterest = cameraInterest myUnit;", "docSyntax": "cameraInterest entity", "syntax": "cameraInterest entity"}, "cameraOn": {"version": "CMD", "tags": "", "description": "Returns the vehicle to which the camera is attached.", "example": "_object = cameraOn;", "docSyntax": "cameraOn", "syntax": "cameraOn"}, "cameraView": {"version": "CMD", "tags": "", "description": "Returns mode of active camera view. Mode is one of:", "example": "if (cameraOn == _vehicle && cameraView == \"External\") then { _vehicle switchCamera \"Internal\"; };", "docSyntax": "cameraView", "syntax": "cameraView"}, "campaignConfigFile": {"version": "CMD", "tags": "", "description": "Returns root of campaign description.ext entries hierarchy.", "example": "_config = campaignConfigFile;", "docSyntax": "campaignConfigFile", "syntax": "campaignConfigFile"}, "camPreload": {"version": "CMD", "tags": "", "description": "Preloads the scene for the prepared camera with given timeout after which preloading is aborted. Max timeout is 30 seconds. Timeout of 0 means max timeout of 30 seconds as well.", "example": "_camera camPreload 5", "docSyntax": "camera camPreload timeout", "syntax": "<objCamera> camPreload timeout"}, "camPreloaded": {"version": "CMD", "tags": "", "description": "Checks whether the camera has finished preloading.", "example": "?(camPreloaded _camera)\u00a0: exit", "docSyntax": "camPreloaded camera", "syntax": "camPreloaded <objCamera>"}, "camPrepareBank": {"version": "CMD", "tags": "", "description": "Prepares the camera bank angle.", "example": "_camera camPrepareBank -0.1", "docSyntax": "camera camPrepareBank bank", "syntax": "<objCamera> camPrepareBank bank"}, "camPrepareDir": {"version": "CMD", "tags": "", "description": "Prepares the camera heading.", "example": "_camera camPrepareDir 150", "docSyntax": "camera camPrepareDir direction", "syntax": "<objCamera> camPrepareDir direction"}, "camPrepareDive": {"version": "CMD", "tags": "", "description": "Prepares the camera dive angle.", "example": "_camera camPrepareDive -0.1", "docSyntax": "camera camPrepareDive dive", "syntax": "<objCamera> camPrepareDive dive"}, "camPrepareFocus": {"version": "CMD", "tags": "", "description": "focusRange is in format [distance,blur]. Prepares the camera focus blur. [-1,1] will reset default values (auto focusing), [-1,-1] will disable postprocessing (all is focused). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareFocus [50, 1]", "docSyntax": "camera camPrepareFocus focusRange", "syntax": "<objCamera> camPrepareFocus focusRange"}, "camPrepareFov": {"version": "CMD", "tags": "", "description": "Prepares the camera field of view (zoom). The default zoom level is 0.75, 0.01 is the nearest and 2 the furthest zoom value. The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareFov 0.1", "docSyntax": "camera camPrepareFov fieldOfView", "syntax": "<objCamera> camPrepareFov fieldOfView"}, "camPrepareFovRange": {"version": "CMD", "tags": "", "description": "Prepares the camera field of view range for auto zooming.", "example": "_camera camPrepareFovRange [0.1, 0.5]", "docSyntax": "camera camPrepareFovRange fovRange", "syntax": "<objCamera> camPrepareFovRange fovRange"}, "camPreparePos": {"version": "CMD", "tags": "", "description": "Prepares the camera position. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPreparePos getPos player", "docSyntax": "camera camPreparePos position", "syntax": "<objCamera> camPreparePos position"}, "camPrepareRelPos": {"version": "CMD", "tags": "", "description": "Prepares the camera position relative to the current position of the currect target (see camPrepareTarget). Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareRelPos [10,5,-2]", "docSyntax": "camera camPrepareRelPos position", "syntax": "<objCamera> camPrepareRelPos position"}, "camPrepareTarget": {"version": "CMD", "tags": "", "description": "Prepares the camera target to a position or to a target. Needs the call of camCommitPrepared to be conducted.", "example": "_camera camPrepareTarget getPos player;", "docSyntax": "camera camPrepareTarget position", "syntax": "<objCamera> camPrepareTarget position"}, "camSetBank": {"version": "CMD", "tags": "", "description": "Sets camera bank angle. Does not commit changes.", "example": "_camera camSetBank -0.1", "docSyntax": "camera camSetBank bank", "syntax": "<objCamera> camSetBank bank"}, "camSetDir": {"version": "CMD", "tags": "", "description": "Sets the orientation of the given camera in the direction of the given vector. Needs camCommit.", "example": "Since Arma 3:private _pos1 = player modelToWorld [0, 5, 5]; private _pos2 = player modelToWorld [0, 50, 50]; private _cam = \"camera\" camCreate _pos1; _cam cameraEffect [\"INTERNAL\", \"BACK\"]; _cam camSetPos _pos2; _cam camSetDir (_pos2 vectorFromTo _pos1); _cam camCommit 5; waitUntil { camCommitted _cam }; _cam camSetPos _pos1; _cam camCommit 5;", "docSyntax": "camera camSetDir direction", "syntax": "<objCamera> camSetDir direction"}, "camSetDive": {"version": "CMD", "tags": "", "description": "Sets camera dive angle. Does not commit changes.", "example": "_camera camSetDive -0.1", "docSyntax": "camera camSetDive dive", "syntax": "<objCamera> camSetDive dive"}, "camSetFocus": {"version": "CMD", "tags": "", "description": "Sets camera focus range in format [distance, blur]. blur param - sets the camera focus blur. It does not automatically commit changes (see camCommit). Use [-1, -1] to disable focus completely.", "example": "_camera camSetFocus [50, 1];", "docSyntax": "camera camSetFocus focusRange", "syntax": "<objCamera> camSetFocus focusRange"}, "camSetFov": {"version": "CMD", "tags": "", "description": "Set the zoom level (Field Of View) of the given camera.", "example": "_cam camSetFov 0.75;", "docSyntax": "camera camSetFov level", "syntax": "<objCamera> camSetFov level"}, "camSetFovRange": {"version": "CMD", "tags": "", "description": "Set the zoom level (Field Of View) start and end values for automatical zooming.", "example": "_cam camSetFovRange [0.1, 0.7];", "docSyntax": "camera camSetFovRange fovRange", "syntax": "<objCamera> camSetFovRange fovRange"}, "camSetPos": {"version": "CMD", "tags": "", "description": "Sets the position of the given camera or seagull (see camCreate). It is worth mentioning that camera position can also be set with setPos, in which case it would be instant. With camSetPos it is possible to make smooth position transition in time, defined with camCommit, which is required in this case.", "example": "_cam camSetPos [2300,1000,130]; _cam camCommit 10;", "docSyntax": "camera camSetPos position", "syntax": "<objCamera> camSetPos position"}, "camSetRelPos": {"version": "CMD", "tags": "", "description": "Sets the position of the given camera relative to its target, set with camSetTarget. Needs a call to camCommit to be conducted.", "example": "_cam camSetTarget _car; _cam camSetRelPos [0,10,8];", "docSyntax": "camera camSetRelPos position", "syntax": "<objCamera> camSetRelPos position"}, "camSetTarget": {"version": "CMD", "tags": "", "description": "Set the target object or position where the given camera should point at. Needs the call of camCommit to be conducted. To reset the target use objNull.", "example": "_camera camSetTarget player;", "docSyntax": "camera camSetTarget target", "syntax": "<objCamera> camSetTarget <object>"}, "camTarget": {"version": "CMD", "tags": "", "description": "Returns camera's target.", "example": "_someObject = camTarget _camera;", "docSyntax": "camTarget camera", "syntax": "camTarget <objCamera>"}, "camUseNVG": {"version": "CMD", "tags": "", "description": "Set / clear using of night vision during cutscenes. This command only works with camCreate created camera that is currently the main camera for the player (see example).", "example": "camUseNVG true;", "docSyntax": "camUseNVG set", "syntax": "camUseNVG set"}, "canFire": {"version": "CMD", "tags": "", "description": "Returns true if the given vehicle is still able to fire. For the command to return true, vehicle must be alive, have weapon operator and the weapon cannot be damaged \u2265 0.9 but can be empty due to running out of ammo. If mission starts with vehicle having no ammo or setVehicleAmmo 0 command is executed on the vehicle, then canFire will always report false for it.", "example": "if (not canFire _tank) then { player sideChat \"Tank disabled!\"; };", "docSyntax": "canFire unitName", "syntax": "canFire <objUnit>"}, "canMove": {"version": "CMD", "tags": "", "description": "Returns if the given vehicle is still able to move.", "example": "if (not canMove _tank) then { player sideChat \"He's nailed on the ground! Now hurry!\"; };", "docSyntax": "canMove vehicle", "syntax": "canMove <objVehicle>"}, "canStand": {"version": "CMD", "tags": "", "description": "Returns if the given soldier is able to stand up. It only checks for the unit's legs and not its alive/dead status - it can return true for a dead unit.", "example": "SQS: ? (not canStand player)\u00a0: player groupChat \"My legs! They hit my legs!\"", "docSyntax": "canStand unit", "syntax": "canStand <objUnit>"}, "canUnloadInCombat": {"version": "CMD", "tags": "", "description": "Check if cargo of this vehicle want to get out when in combat.", "example": "if (canUnloadInCombat _vehicle) then {...};", "docSyntax": "canUnloadInCombat vehicle", "syntax": "canUnloadInCombat <objVehicle>"}, "captive": {"version": "CMD", "tags": "", "description": "Returns the captive state of the given unit (set with setCaptive). A captive unit will not be attacked by its enemies.", "example": "if (captive _general) then { removeAllWeapons _general; };", "docSyntax": "captive object", "syntax": "captive <object>"}, "captiveNum": {"version": "CMD", "tags": "", "description": "Checks whether the unit is a captive. If the unit is a vehicle, its commander is checked instead.", "example": "_captivity = captiveNum _unit;", "docSyntax": "captiveNum unit", "syntax": "captiveNum <objUnit>"}, "catch": {"version": "CMD", "tags": "", "description": "Processes code when an exception is thrown in a try block. The exception caught can be found in the _exception variable.", "example": "try {throw \"invalid argument\"} catch {hint str _exception};", "docSyntax": "tryBlock catch code", "syntax": "tryBlock catch <code>"}, "ceil": {"version": "CMD", "tags": "", "description": "The ceil value of x.", "example": "ceil 5.25; //\u00a0Result is 6", "docSyntax": "ceil x", "syntax": "ceil x"}, "cheatsEnabled": {"version": "CMD", "tags": "", "description": "Checks whether cheats are enabled (whether the designers' version is running).", "example": "_enabled = cheatsEnabled;", "docSyntax": "cheatsEnabled", "syntax": "cheatsEnabled"}, "checkAIFeature": {"version": "CMD", "tags": "", "description": "Checks if the given AI feature is currently enabled.", "example": "_featureUsed = checkAIFeature \"AwareFormationSoft\";", "docSyntax": "checkAIFeature feature", "syntax": "checkAIFeature feature"}, "clearBackpackCargoGlobal": {"version": "CMD", "tags": "", "description": "Removes all backpacks from the vehicle cargo space. MP synchronized.", "example": "clearBackpackCargoGlobal jeepOne;", "docSyntax": "clearBackpackCargoGlobal unit", "syntax": "clearBackpackCargoGlobal <objUnit>"}, "clearGroupIcons": {"version": "CMD", "tags": "", "description": "Removes all icons from group.", "example": "clearGroupIcons (group player);", "docSyntax": "clearGroupIcons group", "syntax": "clearGroupIcons <objGroup>"}, "clearMagazineCargo": {"version": "CMD", "tags": "", "description": "Remove all magazines from the given vehicle's magazine cargo space.", "example": "clearMagazineCargo _truck;", "docSyntax": "clearMagazineCargo vehicleName", "syntax": "clearMagazineCargo vehicleName"}, "clearMagazineCargoGlobal": {"version": "CMD", "tags": "", "description": "Removes all magazines from the vehicle cargo space. MP synchronized.", "example": "clearMagazineCargoGlobal jeepOne;", "docSyntax": "clearMagazineCargoGlobal object", "syntax": "clearMagazineCargoGlobal <object>"}, "clearMagazinePool": {"version": "CMD", "tags": "", "description": "Removes all magazines from the magazine pool, of which the player may choose in the following missions. Available in campaigns only.", "example": "clearMagazinePool;", "docSyntax": "clearMagazinePool", "syntax": "clearMagazinePool"}, "clearOverlay": {"version": "CMD", "tags": "", "description": "Clear the current overlay.", "example": "clearOverlay _map,", "docSyntax": "clearOverlay map", "syntax": "clearOverlay <objMap>"}, "clearRadio": {"version": "CMD", "tags": "", "description": "Clean up the content of radio protocol history.", "example": "clearRadio;", "docSyntax": "clearRadio", "syntax": "clearRadio"}, "clearVehicleInit": {"version": "CMD", "tags": "", "description": "Clears the object's init.", "example": "_tank1 setVehicleInit \"hint 'hi all'\"; processInitCommands; clearVehicleInit _tank1;", "docSyntax": "clearVehicleInit objectName", "syntax": "clearVehicleInit objectName"}, "clearWeaponCargo": {"version": "CMD", "tags": "", "description": "Remove all weapons from the given vehicle's weapon cargo space.", "example": "clearWeaponCargo _truck;", "docSyntax": "clearWeaponCargo vehicleName", "syntax": "clearWeaponCargo vehicleName"}, "clearWeaponCargoGlobal": {"version": "CMD", "tags": "", "description": "Removes all weapons from the vehicle cargo space. MP synchronized.", "example": "clearWeaponCargoGlobal jeepOne;", "docSyntax": "clearWeaponCargoGlobal unit", "syntax": "clearWeaponCargoGlobal <objUnit>"}, "clearWeaponPool": {"version": "CMD", "tags": "", "description": "Remove all weapons from the weapon pool, of which the player may choose in the following missions. Available in campaigns only.", "example": "clearWeaponPool;", "docSyntax": "clearWeaponPool", "syntax": "clearWeaponPool"}, "closeDialog": {"version": "CMD", "tags": "", "description": "Close the currently active user dialog with exit code. Most common exit codes are: #define IDC_OK 1 //emulate \"Ok\" button #define IDC_CANCEL 2 //emulate \"Cancel\" button", "example": "closeDialog 2;", "docSyntax": "closeDialog exitcode", "syntax": "closeDialog exitcode"}, "closeDisplay": {"version": "CMD", "tags": "", "description": "Closes given display with exit code. It does not instantly close the display but does it on next simulation cycle. Most common exit codes are:", "example": "_display closeDisplay 1;", "docSyntax": "display closeDisplay exitCode", "syntax": "<uiDisplay> closeDisplay exitCode"}, "closeOverlay": {"version": "CMD", "tags": "", "description": "Closes the current overlay without committing.", "example": "-", "docSyntax": "closeOverlay map", "syntax": "closeOverlay <objMap>"}, "collapseObjectTree": {"version": "CMD", "tags": "", "description": "Collapse the object tree.", "example": "collapseObjectTree _map,", "docSyntax": "collapseObjectTree map", "syntax": "collapseObjectTree <objMap>"}, "combatMode": {"version": "CMD", "tags": "", "description": "Returns the combat mode of the given AI group. See setCombatMode for more information about combat modes.", "example": "if (combatMode _grp1 == \"BLUE\") then {_grp1 setCombatMode \"GREEN\"};", "docSyntax": "combatMode group", "syntax": "combatMode <objGroup>"}, "commandChat": {"version": "CMD", "tags": "", "description": "Types text to the command radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "_soldierOne commandChat \"Show this text\";", "docSyntax": "unitName commandChat chatText", "syntax": "<objUnit> commandChat chatText"}, "commander": {"version": "CMD", "tags": "", "description": "In Operation Flashpoint it returns the commander of a vehicle. Since Armed Assault it returns the primary observer. The commander of a vehicle can be found with effectiveCommander.", "example": "moveOut commander _tank;", "docSyntax": "commander vehicle", "syntax": "commander <objVehicle>"}, "commandFire": {"version": "CMD", "tags": "", "description": "Order the given unit to fire on the given target (via the radio). If the target is objNull, the unit is ordered to fire on its current target (set with doTarget or commandTarget).", "example": "_ESoldier1 commandFire _WSoldier1;", "docSyntax": "unitName commandFire target", "syntax": "<objUnit> commandFire <object>"}, "commandFollow": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to follow another from his own group (via radio). It can also be used to resume unit formation after e.g doStop.", "example": "_soldier1 commandFollow _soldier2;", "docSyntax": "unit commandFollow unitLead", "syntax": "<objUnit> commandFollow unitLead"}, "commandFSM": {"version": "CMD", "tags": "", "description": "Orders a unit to process command defined by FSM file (via the radio).", "example": "_soldierOne commandFSM [\"move.fsm\", position player, player]", "docSyntax": "unitName commandFSM [fsm name, position, target]", "syntax": "<objUnit> commandFSM [fsm <string>,position,<object>]"}, "commandGetOut": {"version": "CMD", "tags": "", "description": "Orders one or multiple units to get out from the vehicle (via the radio). Same as doGetOut with latter being silent.", "example": "commandGetOut _unitOne", "docSyntax": "commandGetOut unit(s)", "syntax": "commandGetOut <objUnit>(s)"}, "commandingMenu": {"version": "CMD", "tags": "", "description": "Returns the name of the topmost commanding menu or \"\" if the menu is closed. For action menu visibility check see isActionMenuVisible. See Notes for Arma 2/Arma 3 structure.", "example": "waitUntil {commandingMenu == \"RscStatus\"}; hint \"Press 4, I'm bleeding\u00a0!\";", "docSyntax": "commandingMenu", "syntax": "commandingMenu"}, "commandMove": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to move to the given location (via the radio). Exactly the same as doMove, except this command displays a radio message. The command will not put a visible waypoint marker unlike when move command is given via commanding menu.", "example": "_soldier1 commandMove getMarkerPos \"Marker1\";", "docSyntax": "unitName commandMove position", "syntax": "<objUnit> commandMove position"}, "commandRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the command radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne commandRadio \"messageOne\";", "docSyntax": "unit commandRadio radioName", "syntax": "<objUnit> commandRadio radioName"}, "commandStop": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to stop via radio. A stop command will never finish, the unit(s) will never be ready.", "example": "commandStop _soldier1;", "docSyntax": "commandStop target", "syntax": "commandStop <object>"}, "commandTarget": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to target the given target (via the radio). Command given to the player, puts a red square with words Target and Distance on player's HUD at target location. If player in vehicle and has radar facilities, it also adds target marker to the radar.", "example": "_ESoldier1 commandTarget _WSoldier1;", "docSyntax": "unit commandTarget target", "syntax": "<objUnit> commandTarget <object>"}, "commandWatch": {"version": "CMD", "tags": "", "description": "Orders the unit(s) to watch the given position or target (via the radio). Use objNull as the target to order a unit to stop watching a position/target.", "example": "_soldierOne commandWatch markerPos \"MarkerMoveOne\";", "docSyntax": "units commandWatch position", "syntax": "units commandWatch position"}, "comment": {"version": "CMD", "tags": "", "description": "Defines a comment. See SQF Syntax - Comments to learn more about comments.", "example": "comment \"This is a commented line\"; // bad \"This is a commented line\"; // good // This is a commented line // perfect", "docSyntax": "comment text", "syntax": "comment <string>"}, "commitOverlay": {"version": "CMD", "tags": "", "description": "Commit the current overlay.", "example": "commitOverlay _map,", "docSyntax": "commitOverlay map", "syntax": "commitOverlay <objMap>"}, "completedFSM": {"version": "CMD", "tags": "", "description": "Checks whether the given FSM is completed. The FSM handle is the number returned by the execFSM command.", "example": "_completed = completedFSM _fsmHandle;", "docSyntax": "completedFSM fsmHandle", "syntax": "completedFSM fsmHandle"}, "composeText": {"version": "CMD", "tags": "", "description": "Creates a Structured Text by joining the given structured or plain text arguments.", "example": "hint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "composeText arguments", "syntax": "composeText arguments"}, "configFile": {"version": "CMD", "tags": "", "description": "Return root of config entries hierarchy.", "example": "_isMyClassActive = isClass (configFile >> \"CfgPatches\" >> \"MyClass\");", "docSyntax": "configFile", "syntax": "configFile"}, "configName": {"version": "CMD", "tags": "", "description": "Returns name of config entry.", "example": "_name = configName (configFile >> \"CfgVehicles\"); //\u00a0result is \"CfgVehicles\"", "docSyntax": "configName config", "syntax": "configName config"}, "copyFromClipboard": {"version": "CMD", "tags": "", "description": "Return ANSI content of the (text) clipboard. If Unicode support is desired, see forceUnicode.", "example": "hint copyFromClipboard;", "docSyntax": "copyFromClipboard", "syntax": "copyFromClipboard"}, "copyToClipboard": {"version": "CMD", "tags": "", "description": "Copies ANSI text string to the clipboard. If Unicode support is desired, see forceUnicode.", "example": "copyToClipboard str _data;", "docSyntax": "copyToClipboard text", "syntax": "copyToClipboard <string>"}, "copyWaypoints": {"version": "CMD", "tags": "", "description": "Copy the chain of waypoints from source to target group. The target group will start to process waypoints from the first one.", "example": "group1 copyWaypoints group2;", "docSyntax": "groupTo copyWaypoints groupFrom", "syntax": "groupTo copyWaypoints groupFrom"}, "cos": {"version": "CMD", "tags": "", "description": "Cosine of a number, argument in degrees.", "example": "cos 60;//returns 0.5", "docSyntax": "cos x", "syntax": "cos x"}, "count": {"version": "CMD", "tags": "", "description": "Can be used to count:", "example": "count [0, 0, 1, 2]; //\u00a0returns 4 count units group player; //\u00a0returns number of units in player group", "docSyntax": "count value", "syntax": "count <scalar>"}, "countEnemy": {"version": "CMD", "tags": "", "description": "Count how many units in the array are considered enemy to the given unit.", "example": "_num = player countEnemy list _triggerOne;", "docSyntax": "unitName countEnemy arrayName", "syntax": "<objUnit> countEnemy arrayName"}, "countFriendly": {"version": "CMD", "tags": "", "description": "Count how many units in the array are considered friendly to the given unit.", "example": "_num = player countFriendly list _triggerOne;", "docSyntax": "unitName countFriendly arrayName", "syntax": "<objUnit> countFriendly arrayName"}, "countSide": {"version": "CMD", "tags": "", "description": "Returns how many units in the given array belong to given side.", "example": "_num = west countSide list _triggerOne;", "docSyntax": "side countSide array", "syntax": "<objSide> countSide <array>"}, "countType": {"version": "CMD", "tags": "", "description": "Count how many objects in the array are of given type. This command also works with parent classes like \"Air\", \"Tank\", and \"Car\". For a full class reference see Classes.", "example": "_count = \"Tank\" countType list _triggerOne;", "docSyntax": "type countType objects", "syntax": "type countType objects"}, "countUnknown": {"version": "CMD", "tags": "", "description": "Count how many units in the array are unknown to the given unit.", "example": "_num = player countUnknown list _triggerOne;", "docSyntax": "unitName countUnknown arrayName", "syntax": "<objUnit> countUnknown arrayName"}, "createAgent": {"version": "CMD", "tags": "", "description": "Creates an agent of the given type. An agent does not have a group or leader or the standard soldier FSM associated with it - for instance, an enemy soldier spawned as an agent has limited AI and will do nothing when fired upon - which can be useful to limit the amount of AI processing being done in a mission with very large numbers of \"AI\".", "example": "private _agent = createAgent [\"B_Soldier_F\", getPosATL player, [], 0, \"FORM\"];", "docSyntax": "createAgent [type, position, markers, placement, special]", "syntax": "createAgent [type,position,markers,placement,special]"}, "createCenter": {"version": "CMD", "tags": "", "description": "Instanciate a Side center. A Side center is required to be able to create groups of this side.", "example": "createCenter east;", "docSyntax": "createCenter side", "syntax": "createCenter <objSide>"}, "createDialog": {"version": "CMD", "tags": "", "description": "Creates a dialog which is defined either in the mission's description.ext, in the campaign's description.ext or in the global resource.cpp. The given name has to be the class name used in one of these files. If another dialog is already opened, the desired dialog is created as a child dialog of the one already opened.", "example": "_ok = createDialog \"RscDisplayGame\"; if (!_ok) then {hint \"Dialog couldn't be opened!\"};", "docSyntax": "createDialog dialogName", "syntax": "createDialog dialogName"}, "createDiaryLink": {"version": "CMD", "tags": "", "description": "Creates a link to the given diary entry.", "example": "_diaryRec1 = player createDiaryRecord [\"Diary\", [\"Record 1\", \"We can not refer to the next record because it does not exist yet.\"]]; _diaryRec2 = player createDiaryRecord [\"Diary\", [\"Record 2\", \"Go to \" + createDiaryLink [\"Diary\", _diaryRec1, \"record 1\"]]]; _diaryRec3 = player createDiaryRecord [\"Diary\", [\"Record 3\", \"Go to \" + createDiaryLink [\"Diary\", _diaryRec2, \"record 2\"]]];", "docSyntax": "createDiaryLink [subject, record, text]", "syntax": "createDiaryLink [<string>,record,<string>]"}, "createDiaryRecord": {"version": "CMD", "tags": "", "description": "Creates a diary entry. Supported tags and their parameters: Show text", "example": "player createDiaryRecord [\"Diary\", [\"Intel\", \"Enemy base is on grid <marker name='enemyBase'>161170</marker>\"]]", "docSyntax": "player createDiaryRecord [subject, text, task, taskState, showTitle]", "syntax": "<objUnit> createDiaryRecord [<string>,<string>,<objTask>,taskState,showTitle]"}, "createDiarySubject": {"version": "CMD", "tags": "", "description": "Creates a new subject in the Diary.", "example": "_index = player createDiarySubject [\"myPage\",\"My page\"];", "docSyntax": "player createDiarySubject [subject, displayName, picture]", "syntax": "<objUnit> createDiarySubject [<string>,displayName,picture]"}, "createDisplay": {"version": "CMD", "tags": "", "description": "Creates child display of given display and loads from \"resourceName\". The notable difference between createDisplay and createDialog is that with createDisplay the player would be able to move around while the display is shown.", "example": "findDisplay 46 createDisplay \"RscCredits\";", "docSyntax": "parent createDisplay resourceName", "syntax": "parent createDisplay resourceName"}, "createGearDialog": {"version": "CMD", "tags": "", "description": "Opens gear dialog for given unit.", "example": "createGearDialog [player];", "docSyntax": "createGearDialog [unit, resource]", "syntax": "createGearDialog [<objUnit>,resource]"}, "createGroup": {"version": "CMD", "tags": "", "description": "Creates a new Group for the given Side. Using this command if the group limit is reached will return grpNull.", "example": "private _group = createGroup east;", "docSyntax": "createGroup side", "syntax": "createGroup <objSide>"}, "createGuardedPoint": {"version": "CMD", "tags": "", "description": "Adds a point guarded by the given side (scripted way of adding equivalent of \"GUARDED BY\" trigger in Editor). A closest AI group in the given side with assigned \"GUARD\" waypoint will attempt to secure this guard point. The actual guarded position is determined via the following rules:", "example": "createGuardedPoint [east, [0,0], -1, vehicle player];", "docSyntax": "createGuardedPoint [side, position, objectMapID, vehicle]", "syntax": "createGuardedPoint [<objSide>,position,objectMapID,<objVehicle>]"}, "createLocation": {"version": "CMD", "tags": "", "description": "Creates a location of the specified class and dimensions at the specified position. Classes are defined in CfgLocationTypes; for possible location types see Location Types.", "example": "_location = createLocation [\"NameVillage\" , [4035,2151,10], 100, 100];", "docSyntax": "createLocation [className, position, sizeX, sizeY]", "syntax": "createLocation [className,position,sizeX,sizeY]"}, "createMarker": {"version": "CMD", "tags": "", "description": "Creates a new map marker at the given position. The marker will be created for every connected player as well as all JIP players. The marker name has to be unique; the command will be ignored if a marker with the given name already exists.", "example": "_marker1 = createMarker [\"Marker1\", position player];", "docSyntax": "createMarker [name, position, channel, creator]", "syntax": "createMarker [<string>,position,channel,creator]"}, "createMarkerLocal": {"version": "CMD", "tags": "", "description": "Creates a local marker at the given position - the marker only exists on the machine that created it. The marker name has to be unique, if a marker with the given name exists, the command will be ignored. Use deleteMarkerLocal to delete a local marker.", "example": "_marker = createMarkerLocal [\"Marker1\", position player];", "docSyntax": "createMarkerLocal [name, position, channel, creator]", "syntax": "createMarkerLocal [<string>,position,channel,creator]"}, "createMenu": {"version": "CMD", "tags": "", "description": "Creates a previously added menu.", "example": "-", "docSyntax": "map createMenu index", "syntax": "<objMap> createMenu <scalar>"}, "createMine": {"version": "CMD", "tags": "", "description": "Creates a mine of the given type (type is the name of the subclass of CfgVehicles). If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The mine is placed inside a circle with this position as its center and placement as its radius.", "example": "_mine = createMine [\"APERSMine\", position player, [], 0];", "docSyntax": "createMine [type, position, markers, placement]", "syntax": "createMine [type,position,markers,placement]"}, "createMissionDisplay": {"version": "CMD", "tags": "", "description": "Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument \"root\".", "example": "_ChildDisplay = _Rootdisplay createMissionDisplay \"Tutorial\";", "docSyntax": "display createMissionDisplay missionRootDirectoryString", "syntax": "<uiDisplay> createMissionDisplay missionRootDirectoryString"}, "createSimpleTask": {"version": "CMD", "tags": "", "description": "Creates a new Task and adds it to the Diary.", "example": "_currentTask = player createSimpleTask [\"NewTask\"];", "docSyntax": "unit createSimpleTask [name, parentTask]", "syntax": "<objUnit> createSimpleTask [<string>,parentTask]"}, "createSoundSource": {"version": "CMD", "tags": "", "description": "Creates a sound source of the given type (type is the name of the subclass of CfgVehicles which is pointing to the sound defined in CfgSFX). The actual sound object created is of type \"#dynamicsound\" and could be detected with allMissionObjects. If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The sound source is placed inside a circle with this position as its center and placement as its radius. Some of the vanilla classes pre-configured in Arma 3:", "example": "_soundSource = createSoundSource [\"LittleDog\", position player, [], 0];", "docSyntax": "createSoundSource [type, position, markers, placement]", "syntax": "createSoundSource [type,position,markers,placement]"}, "createTarget": {"version": "CMD", "tags": "", "description": "Create a target.", "example": "_target = createTarget [\"targetType\", [0,0,0], 1, 1]", "docSyntax": "obj createTarget [type, position, typeAccuracy, posAccuracy]", "syntax": "<object> createTarget [type,position,typeAccuracy,posAccuracy]"}, "createTask": {"version": "CMD", "tags": "", "description": "Create a new AI task (subtask of parentTask). Type is name of registered task type.", "docSyntax": "teamMember createTask [[type, parentTask], priority, name1, value1, (...), nameN, valueN]", "syntax": "teamMember createTask [[type,parentTask],priority,name1,value1,(...),nameN,valueN]"}, "createTeam": {"version": "CMD", "tags": "", "description": "Creates a team and names it.", "example": "_team = createTeam [\"USMC_Team\", \"Fire Team Red\"];", "docSyntax": "createTeam [type, name]", "syntax": "createTeam [type,<string>]"}, "createTrigger": {"version": "CMD", "tags": "", "description": "Creates a trigger of the given type and at the given position. The type must be a class name in CfgNonAIVehicles or CfgVehicles with simulation = detector. An array containing all units that have activated the trigger is available via list triggerobj. Since triggers are objects, commands such as getPosASL, setPosASL, deleteVehicle, etc. work on them.", "example": "_trg = createTrigger [\"EmptyDetector\", getPos player]; _trg setTriggerArea [5, 5, 0, false]; _trg setTriggerActivation [\"CIV\", \"PRESENT\", true]; _trg setTriggerStatements [\"this\", \"hint 'Civilian near player'\", \"hint 'no civilian near'\"];", "docSyntax": "createTrigger [type, position, makeGlobal]", "syntax": "createTrigger [type,position,makeGlobal]"}, "createUnit": {"version": "CMD", "tags": "", "description": "Create a unit of the provided CfgVehicles class.", "example": "_unit = group player createUnit [\"B_RangeMaster_F\", position player, [], 0, \"FORM\"];", "docSyntax": "group createUnit [type, position, markers, placement, special]", "syntax": "<objGroup> createUnit [type,position,markers,placement,special]"}, "createVehicle": {"version": "CMD", "tags": "", "description": "Creates an empty object of given classname type. See Arma 3 Assets / Arma 3: createVehicle/vehicles, or Category:CfgVehicles for earlier games.", "example": "_jeep = \"Jeep\" createVehicle position player;", "docSyntax": "type createVehicle position", "syntax": "type createVehicle position"}, "createVehicleLocal": {"version": "CMD", "tags": "", "description": "Creates an object of the given type. Created object is not transferred through network in MP games. netId of such vehicle in multiplayer will be \"0:0\". To disable local vehicle creation, use CfgDisabledCommands to blacklist this command. Alternatively, you can use createSimpleObject with local option enabled where applicable.", "example": "_lightsource = \"#lightpoint\" createVehicleLocal _pos;", "docSyntax": "type createVehicleLocal position", "syntax": "type createVehicleLocal position"}, "crew": {"version": "CMD", "tags": "", "description": "Returns the crew (both dead and alive) of the given vehicle.", "example": "player in (crew _tank);", "docSyntax": "crew vehicleName", "syntax": "crew vehicleName"}, "ctrlActivate": {"version": "CMD", "tags": "", "description": "Launch actions attached to given (button based) control.", "example": "ctrlActivate _control", "docSyntax": "ctrlActivate controlName", "syntax": "ctrlActivate controlName"}, "ctrlAddEventHandler": {"version": "CMD", "tags": "", "description": "Add an event handler to the given control.", "example": "_map ctrlAddEventHandler [\"draw\", \"_this call BIS_fnc_strategicMapOpen_draw\"];", "docSyntax": "control ctrlAddEventHandler [handler, function]", "syntax": "<uiControl> ctrlAddEventHandler [handler,function]"}, "ctrlAutoScrollDelay": {"version": "CMD", "tags": "", "description": "Returns number of seconds auto-scroll will wait before scroll and/or rewind. -2 if scrollbar not present.", "example": "_ctrlDelay = ctrlAutoScrollDelay _ctrlGroup;", "docSyntax": "ctrlAutoScrollDelay control", "syntax": "ctrlAutoScrollDelay <uiControl>"}, "ctrlAutoScrollRewind": {"version": "CMD", "tags": "", "description": "Returns true if auto-scroll should move back to start after it reaches the end.", "example": "_ctrlRewind = ctrlAutoScrollRewind _ctrlGroup;", "docSyntax": "ctrlAutoScrollRewind control", "syntax": "ctrlAutoScrollRewind <uiControl>"}, "ctrlAutoScrollSpeed": {"version": "CMD", "tags": "", "description": "Returns number of seconds to auto-scroll one line. -1 if auto-scroll is disabled. -2 if scrollbar not present.", "example": "_ctrlSpeed = ctrlAutoScrollSpeed _ctrlGroup;", "docSyntax": "ctrlAutoScrollSpeed control", "syntax": "ctrlAutoScrollSpeed <uiControl>"}, "ctrlCommit": {"version": "CMD", "tags": "", "description": "Commits control animation to last specified duration.", "example": "_control ctrlCommit 2; // make animation last approx. 2 seconds", "docSyntax": "control ctrlCommit time", "syntax": "<uiControl> ctrlCommit <scalar>"}, "ctrlCommitted": {"version": "CMD", "tags": "", "description": "Check if the control animation is finished.", "example": "_done = ctrlCommitted _control", "docSyntax": "ctrlCommitted controlName", "syntax": "ctrlCommitted controlName"}, "ctrlEnable": {"version": "CMD", "tags": "", "description": "Enables or disables a control of the currently active user dialog. Disabled controls cannot be clicked onto. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "ctrlEnable [100, false]", "docSyntax": "ctrlEnable [idc, enable]", "syntax": "ctrlEnable [<scalar>,<bool>]"}, "ctrlEnabled": {"version": "CMD", "tags": "", "description": "Returns if a control on the currently active user dialog is enabled. Disabled controls cannot be focused. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "if\u00a0!(ctrlEnabled 100) then { ctrlEnable [100, true]; };", "docSyntax": "ctrlEnabled idc", "syntax": "ctrlEnabled <scalar>"}, "ctrlFade": {"version": "CMD", "tags": "", "description": "Returns the current fade factor of control.", "example": "_scale = ctrlFade _control", "docSyntax": "ctrlFade controlName", "syntax": "ctrlFade controlName"}, "ctrlMapAnimAdd": {"version": "CMD", "tags": "", "description": "Adds the next frame to the map animation.", "example": "_map ctrlMapAnimAdd [1, 0.1, getMarkerPos \"anim1\"]; ctrlMapAnimCommit _map;", "docSyntax": "map ctrlMapAnimAdd [time, zoom, position]", "syntax": "<objMap> ctrlMapAnimAdd [<scalar>,<scalar>,position]"}, "ctrlMapAnimClear": {"version": "CMD", "tags": "", "description": "Clears the map animation.", "example": "ctrlMapAnimClear _ctrlMap;", "docSyntax": "ctrlMapAnimClear controlName", "syntax": "ctrlMapAnimClear controlName"}, "ctrlMapAnimCommit": {"version": "CMD", "tags": "", "description": "Plays the map animation.", "example": "Center map on player: _ctrl ctrlMapAnimAdd [0, 0.05, player]; ctrlMapAnimCommit _ctrl;", "docSyntax": "ctrlMapAnimCommit mapControl", "syntax": "ctrlMapAnimCommit mapControl"}, "ctrlMapAnimDone": {"version": "CMD", "tags": "", "description": "Checks whether the map animation has finished.", "example": "_isDone = ctrlMapAnimDone _ctrlMap;", "docSyntax": "ctrlMapAnimDone controlName", "syntax": "ctrlMapAnimDone controlName"}, "ctrlMapCursor": {"version": "CMD", "tags": "", "description": "Changes the default cursor that appears when interacting with a map control to a custom one. Use an empty string to restore the default cursor.", "example": "_map ctrlMapCursor [\"Track\", \"Arrow\"];", "docSyntax": "control ctrlMapCursor [defaultCursor, newCursor]", "syntax": "<uiControl> ctrlMapCursor [defaultCursor,newCursor]"}, "ctrlMapMouseOver": {"version": "CMD", "tags": "", "description": "Returns description of map sign mouse cursor is over. Works with in-game map as well as 2D editor map in edit mode.", "example": "(uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_overFriendly\"]; _mouseover = if (count (ctrlMapMouseOver (uiNamespace getVariable \"_map\")) > 0) then { ctrlMapMouseOver (uiNamespace getVariable \"_map\") } else { [\"\"] }; if (_mouseover select 0 == \"task\" && str(_logic getVariable \"onTaskAssigned\")\u00a0!= str{}) then { //--- Task (uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_overMission\"]; } else { //--- Waypoint (uiNamespace getVariable \"_map\") ctrlMapCursor [\"Track\",\"HC_move\"]; };", "docSyntax": "ctrlMapMouseOver control", "syntax": "ctrlMapMouseOver <uiControl>"}, "ctrlMapScale": {"version": "CMD", "tags": "", "description": "Returns the current scale of given map control.", "example": "_control = (findDisplay 12) displayCtrl 51; //Arma 3 _scale = ctrlMapScale _control; //returns number from 1 to 0.001", "docSyntax": "ctrlMapScale ctrl", "syntax": "ctrlMapScale <uiControl>"}, "ctrlMapScreenToWorld": {"version": "CMD", "tags": "", "description": "Converts map screen coordinates into world coordinates. Unlike posScreenToWorld, this command returns world position is format [x, y], otherwise it is identical to posScreenToWorld.", "example": "_worldCoord = _control ctrlMapScreenToWorld _ScreenCoord;", "docSyntax": "control ctrlMapScreenToWorld [x, y]", "syntax": "<uiControl> ctrlMapScreenToWorld [x,y]"}, "ctrlMapWorldToScreen": {"version": "CMD", "tags": "", "description": "Converts world coordinates into map screen coordinates. This command is identical to posWorldToScreen.", "example": "_screenCoord = _control ctrlMapWorldToScreen _worldCoord;", "docSyntax": "control ctrlMapWorldToScreen position", "syntax": "<uiControl> ctrlMapWorldToScreen position"}, "ctrlParent": {"version": "CMD", "tags": "", "description": "Returns the parent Display of the given control. For parent Controls group see ctrlParentControlsGroup.", "example": "_display = ctrlParent _control", "docSyntax": "ctrlParent control", "syntax": "ctrlParent <uiControl>"}, "ctrlPosition": {"version": "CMD", "tags": "", "description": "Returns the current position of 2D control as [x, y, w, h] array. For 3D control it returns relative [x, y, z]. If the control is part of a CT_CONTROLS_GROUP, the returned position will be relative to the group's position.", "example": "_pos = ctrlPosition _control;", "docSyntax": "ctrlPosition controlName", "syntax": "ctrlPosition controlName"}, "ctrlRemoveAllEventHandlers": {"version": "CMD", "tags": "", "description": "Remove all event handlers from the given control.", "example": "_ctrlButton ctrlRemoveAllEventHandlers \"ButtonDown\";", "docSyntax": "control ctrlRemoveAllEventHandlers handlerName", "syntax": "<uiControl> ctrlRemoveAllEventHandlers handlerName"}, "ctrlRemoveEventHandler": {"version": "CMD", "tags": "", "description": "Remove a given event handler from the given control.", "example": "_map ctrlRemoveEventHandler [\"Draw\", _id];", "docSyntax": "control ctrlRemoveEventHandler [handler name,id]", "syntax": "<uiControl> ctrlRemoveEventHandler [handler <string>,<scalar>]"}, "ctrlScale": {"version": "CMD", "tags": "", "description": "Returns the current scale of the control.", "example": "_scale = ctrlScale _control;", "docSyntax": "ctrlScale control", "syntax": "ctrlScale <uiControl>"}, "ctrlSetActiveColor": {"version": "CMD", "tags": "", "description": "Sets text color of given control when control is selected.", "example": "_control ctrlSetActiveColor [1, 0, 0, 1]", "docSyntax": "control ctrlSetActiveColor color", "syntax": "<uiControl> ctrlSetActiveColor <scalar>"}, "ctrlSetAutoScrollDelay": {"version": "CMD", "tags": "", "description": "Sets number of second before auto-scroll starts/rewinds. Setter for ctrlAutoScrollDelay.", "example": "_ctrlGroup ctrlSetAutoScrollDelay 5;", "docSyntax": "control ctrlSetAutoScrollDelay delay", "syntax": "<uiControl> ctrlSetAutoScrollDelay <scalar>"}, "ctrlSetAutoScrollRewind": {"version": "CMD", "tags": "", "description": "Defines if scroll should rewind when auto-scroll reach end. Setter for ctrlAutoScrollRewind.", "example": "_ctrlGroup ctrlSetAutoScrollRewind true;", "docSyntax": "control ctrlSetAutoScrollRewind set", "syntax": "<uiControl> ctrlSetAutoScrollRewind set"}, "ctrlSetAutoScrollSpeed": {"version": "CMD", "tags": "", "description": "Sets number of second required to scroll to next line. If speed < 0, auto-scroll is disabled. Setter for ctrlAutoScrollSpeed.", "example": "_ctrlGroup ctrlSetAutoScrollSpeed 0.1;", "docSyntax": "control ctrlSetAutoScrollSpeed speed", "syntax": "<uiControl> ctrlSetAutoScrollSpeed <scalar>"}, "ctrlSetBackgroundColor": {"version": "CMD", "tags": "", "description": "Sets background color of given control. Only affects:", "example": "_control ctrlSetBackgroundColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetBackgroundColor color", "syntax": "<uiControl> ctrlSetBackgroundColor <scalar>"}, "ctrlSetEventHandler": {"version": "CMD", "tags": "", "description": "\ud83d\udd56", "example": "_control ctrlSetEventHandler [\"KeyDown\", \"\"];", "docSyntax": "controlName ctrlSetEventHandler [handlerName, function]", "syntax": "controlName ctrlSetEventHandler [handlerName,function]"}, "ctrlSetFade": {"version": "CMD", "tags": "", "description": "Sets wanted transparency for control animation. Requires ctrlCommit to commit changes. To hide or show a control instantly, use ctrlShow.", "example": "_control ctrlSetFade 1; _control ctrlCommit 5;", "docSyntax": "controlName ctrlSetFade fade", "syntax": "controlName ctrlSetFade fade"}, "ctrlSetFocus": {"version": "CMD", "tags": "", "description": "Sets the input focus on given control.", "example": "ctrlSetFocus _control;", "docSyntax": "ctrlSetFocus control", "syntax": "ctrlSetFocus <uiControl>"}, "ctrlSetFont": {"version": "CMD", "tags": "", "description": "Sets the font for given control (see available fonts)", "example": "_control ctrlSetFont \"TahomaB\"", "docSyntax": "control ctrlSetFont fontName", "syntax": "<uiControl> ctrlSetFont fontName"}, "ctrlSetFontH1": {"version": "CMD", "tags": "", "description": "Sets H1 font of given HTML control.", "example": "_control ctrlSetFontH1 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH1 fontName", "syntax": "controlName ctrlSetFontH1 fontName"}, "ctrlSetFontH1B": {"version": "CMD", "tags": "", "description": "Sets H1 bold font of given HTML control.", "example": "_control ctrlSetFontH1B \"TahomaB\";", "docSyntax": "controlName ctrlSetFontH1B fontName", "syntax": "controlName ctrlSetFontH1B fontName"}, "ctrlSetFontH2": {"version": "CMD", "tags": "", "description": "Sets H2 font of given HTML control", "example": "_control ctrlSetFontH2 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH2 fontName", "syntax": "controlName ctrlSetFontH2 fontName"}, "ctrlSetFontH2B": {"version": "CMD", "tags": "", "description": "Sets H2 bold font of given HTML control.", "example": "_control ctrlSetFontH2B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH2B fontName", "syntax": "controlName ctrlSetFontH2B fontName"}, "ctrlSetFontH3": {"version": "CMD", "tags": "", "description": "Sets H3 font of given HTML control.", "example": "_control ctrlSetFontH3 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH3 fontName", "syntax": "controlName ctrlSetFontH3 fontName"}, "ctrlSetFontH3B": {"version": "CMD", "tags": "", "description": "Sets H3 bold font of given HTML control.", "example": "_control ctrlSetFontH3B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH3B fontName", "syntax": "controlName ctrlSetFontH3B fontName"}, "ctrlSetFontH4": {"version": "CMD", "tags": "", "description": "Sets H4 font of given HTML control.", "example": "_control ctrlSetFontH4 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH4 fontName", "syntax": "controlName ctrlSetFontH4 fontName"}, "ctrlSetFontH4B": {"version": "CMD", "tags": "", "description": "Sets H4 bold font of given HTML control.", "example": "_control ctrlSetFontH4B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH4B fontName", "syntax": "controlName ctrlSetFontH4B fontName"}, "ctrlSetFontH5": {"version": "CMD", "tags": "", "description": "Sets H5 font of given HTML control.", "example": "_control ctrlSetFontH5 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH5 fontName", "syntax": "controlName ctrlSetFontH5 fontName"}, "ctrlSetFontH5B": {"version": "CMD", "tags": "", "description": "Sets H5 bold font of given HTML control.", "example": "_control ctrlSetFontH5B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH5B fontName", "syntax": "controlName ctrlSetFontH5B fontName"}, "ctrlSetFontH6": {"version": "CMD", "tags": "", "description": "Sets H6 font of given HTML control.", "example": "_control ctrlSetFontH6 \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH6 fontName", "syntax": "controlName ctrlSetFontH6 fontName"}, "ctrlSetFontH6B": {"version": "CMD", "tags": "", "description": "Sets H6 bold font of given HTML control.", "example": "_control ctrlSetFontH6B \"TahomaB\"", "docSyntax": "controlName ctrlSetFontH6B fontName", "syntax": "controlName ctrlSetFontH6B fontName"}, "ctrlSetFontHeight": {"version": "CMD", "tags": "", "description": "Sets the sizeEx property for most controls as follows:", "example": "_control ctrlSetFontHeight 0.05;", "docSyntax": "control ctrlSetFontHeight size", "syntax": "<uiControl> ctrlSetFontHeight size"}, "ctrlSetFontHeightH1": {"version": "CMD", "tags": "", "description": "Sets H1 font size of given HTML control.", "example": "_control ctrlSetFontHeightH1 0.05", "docSyntax": "controlName ctrlSetFontHeightH1 height", "syntax": "controlName ctrlSetFontHeightH1 height"}, "ctrlSetFontHeightH2": {"version": "CMD", "tags": "", "description": "Sets H2 font size of given HTML control.", "example": "_control ctrlSetFontHeightH2 0.05", "docSyntax": "controlName ctrlSetFontHeightH2 height", "syntax": "controlName ctrlSetFontHeightH2 height"}, "ctrlSetFontHeightH3": {"version": "CMD", "tags": "", "description": "Sets H3 font size of given HTML control.", "example": "_control ctrlSetFontHeightH3 0.05", "docSyntax": "controlName ctrlSetFontHeightH3 height", "syntax": "controlName ctrlSetFontHeightH3 height"}, "ctrlSetFontHeightH4": {"version": "CMD", "tags": "", "description": "Sets H4 font size of given HTML control.", "example": "_control ctrlSetFontHeightH4 0.05", "docSyntax": "controlName ctrlSetFontHeightH4 height", "syntax": "controlName ctrlSetFontHeightH4 height"}, "ctrlSetFontHeightH5": {"version": "CMD", "tags": "", "description": "Sets H5 font size of given HTML control.", "example": "_control ctrlSetFontHeightH5 0.05", "docSyntax": "controlName ctrlSetFontHeightH5 height", "syntax": "controlName ctrlSetFontHeightH5 height"}, "ctrlSetFontHeightH6": {"version": "CMD", "tags": "", "description": "Sets H6 font size of given HTML control.", "example": "_control ctrlSetFontHeightH6 0.05", "docSyntax": "controlName ctrlSetFontHeightH6 height", "syntax": "controlName ctrlSetFontHeightH6 height"}, "ctrlSetFontP": {"version": "CMD", "tags": "", "description": "Sets P font of given HTML control or its size.", "example": "_control ctrlSetFontP \"TahomaB\";", "docSyntax": "control ctrlSetFontP fontOrSize", "syntax": "<uiControl> ctrlSetFontP fontOrSize"}, "ctrlSetFontPB": {"version": "CMD", "tags": "", "description": "Sets P bold font of given HTML control.", "example": "_control ctrlSetFontPB \"TahomaB\"", "docSyntax": "controlName ctrlSetFontPB fontName", "syntax": "controlName ctrlSetFontPB fontName"}, "ctrlSetForegroundColor": {"version": "CMD", "tags": "", "description": "Sets foreground color of the given control.", "example": "_control ctrlSetForegroundColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetForegroundColor color", "syntax": "<uiControl> ctrlSetForegroundColor <scalar>"}, "ctrlSetPosition": {"version": "CMD", "tags": "", "description": "Sets wanted position and size for 2D control animation. Width and height are optional. ctrlCommit is required to complete the operation. For 3D control, param is relative [x, y, z] and no ctrlCommit is required as it cannot be animated. If target control is inside a CT_CONTROLS_GROUP, the position needs to be relative to it.", "example": "Move control: _control2D ctrlSetPosition [0, 0]; _control2D ctrlCommit 0;", "docSyntax": "controlName ctrlSetPosition [x, y]", "syntax": "controlName ctrlSetPosition [x,y]"}, "ctrlSetScale": {"version": "CMD", "tags": "", "description": "Sets scale of a control. Top left corner remains same. This command requires ctrlCommit.", "example": "_control ctrlSetScale 0.5;//\u00a0Makes the control 50% smaller _control ctrlCommit 0;", "docSyntax": "control ctrlSetScale scale", "syntax": "<uiControl> ctrlSetScale <scalar>"}, "ctrlSetStructuredText": {"version": "CMD", "tags": "", "description": "Set the Structured Text which will be displayed in structured text control.", "example": "_control ctrlSetStructuredText parseText \"First line<img image=data\\isniper.paa /><br />Second line\"", "docSyntax": "control ctrlSetStructuredText structuredText", "syntax": "<uiControl> ctrlSetStructuredText structuredText"}, "ctrlSetText": {"version": "CMD", "tags": "", "description": "Sets the text of a control of the currently active user dialog or display. This command can be used for static texts, buttons, edit lines and active texts as well as for images, where you can use it to set the image path.", "example": "ctrlSetText [100, \"Hello world\"]; //\u00a0for Dialogs", "docSyntax": "ctrlSetText [idc, text]", "syntax": "ctrlSetText [<scalar>,<string>]"}, "ctrlSetTextColor": {"version": "CMD", "tags": "", "description": "Sets text color of given control. Color is in format Color (RGBA). As of Arma 3 v1.40 this command can also be used to change fill-color of a CT_PROGRESS control.", "example": "_control ctrlSetTextColor [1, 0, 0, 1];", "docSyntax": "control ctrlSetTextColor color", "syntax": "<uiControl> ctrlSetTextColor <scalar>"}, "ctrlSetTextColorSecondary": {"version": "CMD", "tags": "", "description": "Sets the secondary text color of a text control.", "example": "_ctrlText ctrlSetTextColorSecondary [1, 0.5, 0.1, 0.5];", "docSyntax": "control ctrlSetTextColorSecondary color", "syntax": "<uiControl> ctrlSetTextColorSecondary <scalar>"}, "ctrlSetTextSecondary": {"version": "CMD", "tags": "", "description": "Sets the secondary text of a text control.", "example": "_ctrlText ctrlSetTextSecondary \"Hello World!\"", "docSyntax": "control ctrlSetTextSecondary text", "syntax": "<uiControl> ctrlSetTextSecondary <string>"}, "ctrlSetTooltip": {"version": "CMD", "tags": "", "description": "Sets tooltip text of given control.", "example": "_control ctrlSetTooltip \"tooltip\";", "docSyntax": "control ctrlSetTooltip text", "syntax": "<uiControl> ctrlSetTooltip <string>"}, "ctrlSetTooltipColorBox": {"version": "CMD", "tags": "", "description": "Sets tooltip border color of given control.", "example": "_control ctrlSetTooltipColorBox [1, 0, 0, 1];", "docSyntax": "control ctrlSetTooltipColorBox color", "syntax": "<uiControl> ctrlSetTooltipColorBox <scalar>"}, "ctrlSetTooltipColorShade": {"version": "CMD", "tags": "", "description": "Sets tooltip background color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorShade [1, 0, 0, 1];", "docSyntax": "control ctrlSetTooltipColorShade color", "syntax": "<uiControl> ctrlSetTooltipColorShade <scalar>"}, "ctrlSetTooltipColorText": {"version": "CMD", "tags": "", "description": "Sets tooltip text color of given control. Color is in format Color (RGBA).", "example": "_control ctrlSetTooltipColorText [1, 0, 0, 1]", "docSyntax": "display ctrlSetTooltipColorText color", "syntax": "<uiDisplay> ctrlSetTooltipColorText <scalar>"}, "ctrlShow": {"version": "CMD", "tags": "", "description": "Shows or hides a control. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "ctrlShow [100, false];", "docSyntax": "ctrlShow [idc, show]", "syntax": "ctrlShow [<scalar>,show]"}, "ctrlShown": {"version": "CMD", "tags": "", "description": "Returns whether given control is shown.", "example": "_bool = ctrlShown _ctrl;", "docSyntax": "ctrlShown controlName", "syntax": "ctrlShown controlName"}, "ctrlText": {"version": "CMD", "tags": "", "description": "Returns the text of a control of the currently active user dialog. This command can be used on static texts, buttons, edit lines and active texts as well as for images, where it returns the image path. Does not work on HTML control and returns empty string \"\". Since Arma 3 v2.05.147765 supported control types are:", "example": "_text = ctrlText 100;", "docSyntax": "ctrlText idc", "syntax": "ctrlText <scalar>"}, "ctrlTextSecondary": {"version": "CMD", "tags": "", "description": "Returns the secondary text of a text control.", "example": "_secondaryText = ctrlTextSecondary _ctrlText;", "docSyntax": "ctrlTextSecondary control", "syntax": "ctrlTextSecondary <uiControl>"}, "ctrlType": {"version": "CMD", "tags": "", "description": "Returns number representing the type of control, which is also defined by type property in config. For more information see Arma: GUI Configuration", "example": "_type = ctrlType _rscEdit; // 2", "docSyntax": "ctrlType control", "syntax": "ctrlType <uiControl>"}, "ctrlVisible": {"version": "CMD", "tags": "", "description": "Returns if a control of the currently active user dialog is shown or not. Read Arma: GUI Configuration for more information about user dialogs and controls.", "example": "_bool = ctrlVisible 100;", "docSyntax": "ctrlVisible idc", "syntax": "ctrlVisible <scalar>"}, "currentCommand": {"version": "CMD", "tags": "", "description": "Return the current command type (empty string when no command) for the commander of given vehicle (or for a given soldier). Returned value can be one of:", "example": "_command = currentCommand player;", "docSyntax": "currentCommand vehicleName", "syntax": "currentCommand vehicleName"}, "currentMagazine": {"version": "CMD", "tags": "", "description": "Returns class name of currently loaded vehicle's / unit's magazine.", "example": "_magazineClass = currentMagazine player;//Example: \"30Rnd_545x39_AK\"", "docSyntax": "currentMagazine vehicle", "syntax": "currentMagazine <objVehicle>"}, "currentMuzzle": {"version": "CMD", "tags": "", "description": "Returns a unit's current weapon muzzle. Does not work on vehicles.", "example": "_muzzle = currentMuzzle player;", "docSyntax": "currentMuzzle unit", "syntax": "currentMuzzle <objUnit>"}, "currentTask": {"version": "CMD", "tags": "", "description": "Return current task of given person.", "example": "_currTask = currentTask player;", "docSyntax": "currentTask person", "syntax": "currentTask <objUnit>"}, "currentTasks": {"version": "CMD", "tags": "", "description": "Returns array with all uncompleted tasks for the given agent. getVariable could be used on Task to get the following special local variables from the task:", "example": "currentTasks teamMember _agent", "docSyntax": "currentTasks teamMember", "syntax": "currentTasks teamMember"}, "currentVisionMode": {"version": "CMD", "tags": "", "description": "Returns current vision mode of unit's weapon. Vision mode could be one of:", "example": "_currMode = currentVisionMode gunner _tank", "docSyntax": "currentVisionMode entity", "syntax": "currentVisionMode entity"}, "currentWaypoint": {"version": "CMD", "tags": "", "description": "Returns the index of the current waypoint contrary to misleading name. To determine the validity of the index, compare it to the waypoints count. If all waypoints are completed, then the index is 1 greater than the last valid index. If there are no waypoints, then the index is 0. By default, a group has 1 waypoint at their starting position, which is considered completed and so the currentWaypoint is 1.", "example": "_index = currentWaypoint group player;", "docSyntax": "currentWaypoint groupName", "syntax": "currentWaypoint groupName"}, "currentWeapon": {"version": "CMD", "tags": "", "description": "Return the name of the currently selected weapon (on the primary turret for vehicles).", "example": "_weaponClass = currentWeapon (vehicle player);//Example: \"M16A2GL\"", "docSyntax": "currentWeapon vehicle", "syntax": "currentWeapon <objVehicle>"}, "currentWeaponMode": {"version": "CMD", "tags": "", "description": "Returns current weapon mode of unit's weapon. Result can be: \"Single\", \"Burst\", \"FullAuto\", \"manual\", \"player\"", "example": "_weaponMode = currentWeaponMode player;", "docSyntax": "currentWeaponMode gunner", "syntax": "currentWeaponMode gunner"}, "currentZeroing": {"version": "CMD", "tags": "", "description": "Returns current zeroing.", "example": "private _zeroing = currentZeroing player;", "docSyntax": "currentZeroing object", "syntax": "currentZeroing <object>"}, "cutFadeOut": {"version": "CMD", "tags": "", "description": "Terminates the effect in the given layer by fading it out according to the given duration. If named layer is used and it doesn't exist, it will be allocated. For title layer see titleFadeOut.", "example": "0 cutFadeOut 2;", "docSyntax": "layer cutFadeOut duration", "syntax": "layer cutFadeOut duration"}, "cutObj": {"version": "CMD", "tags": "", "description": "Displays an object defined in the global config in CfgTitles.", "example": "cutObj [\"TVSet\", \"PLAIN\"]; cutObj [\"TVSet\", \"PLAIN\", 2]", "docSyntax": "cutObj [class, type, speed, showInMap]", "syntax": "cutObj [class,type,<scalar>,showInMap]"}, "cutRsc": {"version": "CMD", "tags": "", "description": "Display a resource defined in RscTitles of the mission's Description.ext, the campaign's description.ext or the global config.", "example": "cutRsc [\"binocular\", \"PLAIN\"]; cutRsc [\"binocular\", \"PLAIN\", 2]; cutRsc [\"binocular\", \"PLAIN\", 2, false];", "docSyntax": "cutRsc [class, effect, speed, showInMap]", "syntax": "cutRsc [class,effect,<scalar>,showInMap]"}, "cutText": {"version": "CMD", "tags": "", "description": "Displays a text message in the center of the screen. The text can be displayed on multiple lines by using \"\\n\" new line characters:", "example": "cutText [\"\", \"BLACK OUT\"]; cutText [\"Hello World!\", \"PLAIN\", 2];", "docSyntax": "cutText [text, type, speed, showInMap, isStructuredText]", "syntax": "cutText [<string>,type,<scalar>,showInMap,isStructuredText]"}, "damage": {"version": "CMD", "tags": "", "description": "Return the damage value of an object.", "example": "? (damage player) > 0.1)\u00a0: player groupChat \"I'm hurt! Medic!\" //\u00a0SQS", "docSyntax": "damage object", "syntax": "<scalar> <object>"}, "date": {"version": "CMD", "tags": "", "description": "Return the actual in-mission date and time.", "example": "//\u00a0in Arma 3 date params [\"_year\", \"_month\", \"_day\", \"_hours\", \"_minutes\"]; //\u00a0pre Arma 3 _now = date; //\u00a0[2014,10,30,2,30] a.k.a Oct. 30th, 2:30am _year = _now select 0; _month = _now select 1; _day = _now select 2; _hours = _now select 3; _minutes = _now select 4;", "docSyntax": "date", "syntax": "date"}, "dateToNumber": {"version": "CMD", "tags": "", "description": "Convert a date to a float number, based on Jan 1st 00:00:00 = 0 and Dec 31st 23:59:59 = 1. The same day and time in leap year will be different after 28th of February and 23:59 on 31st of December will be 1.00274", "example": "_float = dateToNumber [2035,7,6,12,0]; //0.510959", "docSyntax": "dateToNumber date", "syntax": "dateToNumber date"}, "dayTime": {"version": "CMD", "tags": "", "description": "Returns the current in-game time in hours. For a formatted version of time, see BIS_fnc_timeToString.", "example": "dayTime; //\u00a0returns 16.5 given it is 16:30 (4.30pm) in game", "docSyntax": "dayTime", "syntax": "dayTime"}, "deActivateKey": {"version": "CMD", "tags": "", "description": "Deactivates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the description.ext file of the missions.", "example": "deActivateKey \"Mission04Key\";", "docSyntax": "deActivateKey keyname", "syntax": "deActivateKey keyname"}, "debugFSM": {"version": "CMD", "tags": "", "description": "Dump (something about FSM) to debugging output. This command is (assumed to be) non-functional in the retail version.", "example": "-", "docSyntax": "FSMhandle debugFSM true", "syntax": "FSMhandle debugFSM <bool>"}, "debugLog": {"version": "CMD", "tags": "", "description": "Dump argument type and value to debugging output.", "example": "debugLog player", "docSyntax": "debugLog anything", "syntax": "debugLog anything"}, "deg": {"version": "CMD", "tags": "", "description": "Converts given value in radians to degrees. 1 degree equals 0.01745 radians or pi / 180.", "example": "_degrees = deg 1; //\u00a0Returns 57.2958", "docSyntax": "deg value", "syntax": "deg <scalar>"}, "deleteCenter": {"version": "CMD", "tags": "", "description": "In a nutshell, this command removes gaming Side (see createCenter). If a side has >0 Groups it cannot be deleted. Center can only be created for: east, west, resistance, civilian and sideLogic, therefore only centers from the mentioned sides can be deleted.", "example": "deleteCenter east", "docSyntax": "deleteCenter side", "syntax": "deleteCenter <objSide>"}, "deleteCollection": {"version": "CMD", "tags": "", "description": "Delete a collection. As example, used with a soldier, it'll hide the ingame model. When targetting Arma 2 1.06 or newer, use hideObject instead. This function is a relic from dynamic building destruction development. It is left only for compatibility with scripts created before Arma 2 1.06, and its functionality may be changed or removed in the future.", "example": "deleteCollection unitName;", "docSyntax": "deleteCollection object", "syntax": "deleteCollection <object>"}, "deleteEditorObject": {"version": "CMD", "tags": "", "description": "Delete the editor object. Requires all editor object links to be removed prior.", "example": "-", "docSyntax": "map deleteEditorObject object", "syntax": "<objMap> deleteEditorObject <object>"}, "deleteGroup": {"version": "CMD", "tags": "", "description": "Destroys the given group.", "example": "deleteGroup _groupname;", "docSyntax": "deleteGroup group", "syntax": "deleteGroup <objGroup>"}, "deleteIdentity": {"version": "CMD", "tags": "", "description": "Deletes an identity created with saveIdentity from the campaign's progress file.", "example": "_deleted = deleteIdentity \"playerIdentity\";", "docSyntax": "deleteIdentity identityName", "syntax": "deleteIdentity identityName"}, "deleteLocation": {"version": "CMD", "tags": "", "description": "Deletes scripted location.", "example": "deleteLocation myLocation;", "docSyntax": "deleteLocation location", "syntax": "deleteLocation location"}, "deleteMarker": {"version": "CMD", "tags": "", "description": "Destroys the given marker.", "example": "deleteMarker \"Marker1\"", "docSyntax": "deleteMarker name", "syntax": "deleteMarker <string>"}, "deleteMarkerLocal": {"version": "CMD", "tags": "", "description": "Destroys the given marker.", "example": "deleteMarkerLocal \"Marker1\"", "docSyntax": "deleteMarkerLocal markerName", "syntax": "deleteMarkerLocal <string>"}, "deleteResources": {"version": "CMD", "tags": "", "description": "Delete (unregister) resources of the team member. Resources are deleted in the order they were added. Case insensitive.", "example": "teamMember _agent deleteResources [\"Legs\"];", "docSyntax": "teamMember deleteResources [resource1, resource2,...]", "syntax": "teamMember deleteResources [resource1,resource2,...]"}, "deleteStatus": {"version": "CMD", "tags": "", "description": "Deletes a status created with saveStatus from the campaign's progress file.", "example": "_deleted = deleteStatus \"playerStatus\";", "docSyntax": "deleteStatus statusName", "syntax": "deleteStatus statusName"}, "deleteTarget": {"version": "CMD", "tags": "", "description": "Delete a target.", "example": "deleteTarget target1", "docSyntax": "deleteTarget target", "syntax": "deleteTarget <object>"}, "deleteTeam": {"version": "CMD", "tags": "", "description": "Destroy given team.", "example": "deleteTeam _team;", "docSyntax": "deleteTeam team", "syntax": "deleteTeam team"}, "deleteVehicle": {"version": "CMD", "tags": "", "description": "Deletes an object. Only objects inserted in the mission editor and objects created during the game's progress can be deleted by this command. Island objects and player cannot be removed.", "example": "deleteVehicle _house1;", "docSyntax": "deleteVehicle object", "syntax": "deleteVehicle <object>"}, "deleteWaypoint": {"version": "CMD", "tags": "", "description": "Removes the specified waypoint.", "example": "deleteWaypoint [_grp, 2];", "docSyntax": "deleteWaypoint [group, index]", "syntax": "deleteWaypoint [<objGroup>,<scalar>]"}, "detach": {"version": "CMD", "tags": "", "description": "Detaches previously attached with attachTo object.", "example": "obj1 attachTo [player]; detach obj1;", "docSyntax": "detach object", "syntax": "detach <object>"}, "diag_captureFrame": {"version": "CMD", "tags": "", "description": "This command starts counting frames from the moment it is executed and when the count reaches the number passed as param, the current frame is captured and captured data UI dialog appears, similar to diag_captureSlowFrame. This can also be executed on a dedicated Server and because a Server has no UI it will behave like diag_captureFrameToFile.", "example": "diag_captureFrame 1; //\u00a0capture the first frame after command execution", "docSyntax": "diag_captureFrame frame", "syntax": "diag_captureFrame frame"}, "diag_captureSlowFrame": {"version": "CMD", "tags": "", "description": "Opens \"capture frame\" dialog if current frame exceeds set threshold in seconds. One can indicate to either capture duration of a specific profiling selection or the total duration of the frame. The selection names can be obtained by expanding the profiling tree. Clicking on a tree item will highlight the item on the graph and vice versa. The GUI also provides method of copying of the displayed data to clipboard. Some of the selections:", "example": "diag_captureSlowFrame ['total',0.003];", "docSyntax": "diag_captureSlowFrame [section, threshold]", "syntax": "diag_captureSlowFrame [section,threshold]"}, "diag_fps": {"version": "CMD", "tags": "", "description": "Returns average framerate calculated over last 16 frames.", "example": "diag_log diag_fps;", "docSyntax": "diag_fps", "syntax": "diag_fps"}, "diag_fpsMin": {"version": "CMD", "tags": "", "description": "Returns minimal framerate. Calculated from the longest frame over last 16 frames.", "example": "_minfps = diag_fpsMin;", "docSyntax": "diag_fpsMin", "syntax": "diag_fpsMin"}, "diag_frameNo": {"version": "CMD", "tags": "", "description": "Returns number of frame currently displayed.", "example": "_currFrameNo = diag_frameNo;", "docSyntax": "diag_frameNo", "syntax": "diag_frameNo"}, "diag_log": {"version": "CMD", "tags": "", "description": "Dumps the argument's value to the report file. Each call creates a new line in the file.", "example": "diag_log time;", "docSyntax": "diag_log output", "syntax": "diag_log output"}, "diag_logSlowFrame": {"version": "CMD", "tags": "", "description": "Log all frames, where section takes longer than the threshold (in seconds).", "example": "diag_logSlowFrame ['total', 0.3];", "docSyntax": "diag_logSlowFrame [section, threshold]", "syntax": "diag_logSlowFrame [section,threshold]"}, "diag_tickTime": {"version": "CMD", "tags": "", "description": "Real time in seconds spent from the start of the game. On Windows the command uses timeGetTime.", "example": "//\u00a0Measure execution time of a script _start = diag_tickTime; //\u00a0code _stop = diag_tickTime; diag_log format [\"%1\",_stop - _start];", "docSyntax": "diag_tickTime", "syntax": "diag_tickTime"}, "dialog": {"version": "CMD", "tags": "", "description": "Tests whether any user dialog is open.", "example": "if (!dialog) then { createDialog \"Dialog1\"; };", "docSyntax": "dialog", "syntax": "dialog"}, "diarySubjectExists": {"version": "CMD", "tags": "", "description": "Checks whether given subject is present in the Diary of given player.", "example": "_exists = player diarySubjectExists \"subjectName\"", "docSyntax": "player diarySubjectExists name", "syntax": "<objUnit> diarySubjectExists <string>"}, "difficultyEnabled": {"version": "CMD", "tags": "", "description": "Checks specific difficulty settings of the current user. Difficulty flag names can be found in the ArmA profile file under class Difficulties/xxx/Flags (xxx being regular or veteran).", "example": "hint str (difficultyEnabled \"armor\");", "docSyntax": "difficultyEnabled flagName", "syntax": "difficultyEnabled flagName"}, "direction": {"version": "CMD", "tags": "", "description": "Returns the direction an object or a location is facing (differs from getDir in that this also works with locations).", "example": "player setDir 90; _d = direction player;//returns 90", "docSyntax": "direction object", "syntax": "direction <object>"}, "directSay": {"version": "CMD", "tags": "", "description": "Sends given audio message to the direct channel. Command operates just like xxxxRadio commands, but the sound is played over direct channel and is independent of fadeSound. The message is defined in CfgRadio in the description.ext file or config radio protocol or a kbAddTopic. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "player directSay configName selectRandom (\"true\" configClasses (configFile >> \"CfgRadio\"));", "docSyntax": "unit directSay radioName", "syntax": "<objUnit> directSay radioName"}, "disableAI": {"version": "CMD", "tags": "", "description": "Disables parts of the AI behaviour to get a better control over the actions of a unit. If the unit changes locality, this command might need to be executed again at the new locality to maintain effect.", "example": "MyUnit disableAI \"AUTOTARGET\";", "docSyntax": "unit disableAI feature", "syntax": "<objUnit> disableAI feature"}, "disableConversation": {"version": "CMD", "tags": "", "description": "In theory disables the ability to talk to other people. In actuality, if true is given, the command increases unit's kbTell IsSpeaking status by 1, thus stopping unit from having a conversation. If false is given, the command decreases unit's kbTell IsSpeaking status by 1. The unit \"is speaking\" if IsSpeaking > 0.", "example": "player disableConversation true;", "docSyntax": "unitName disableConversation disable", "syntax": "<objUnit> disableConversation disable"}, "disableSerialization": {"version": "CMD", "tags": "", "description": "Disable saving of script containing this command. After this, the script can work with data types which do not support serialization (UI types). See Namespace serialization for more information.", "example": "disableSerialization; private _display = findDisplay 46;", "docSyntax": "disableSerialization", "syntax": "disableSerialization"}, "disableTIEquipment": {"version": "CMD", "tags": "", "description": "Disables TI (Thermal Imaging) equipment for given vehicle.", "example": "vehicle player disableTIEquipment true;", "docSyntax": "vehicle disableTIEquipment state", "syntax": "<objVehicle> disableTIEquipment state"}, "disableUserInput": {"version": "CMD", "tags": "", "description": "Disables or enables the keyboard and mouse input. Usually used during cutscenes.", "example": "disableUserInput true; // cutscene disableUserInput false;", "docSyntax": "disableUserInput state", "syntax": "disableUserInput state"}, "displayAddEventHandler": {"version": "CMD", "tags": "", "description": "Adds an event handler to the given display. See User Interface Event Handlers for the full list of event names. If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp.", "example": "moduleName_keyDownEHId = findDisplay 46 displayAddEventHandler [\"KeyDown\", \"hint str _this;\"];", "docSyntax": "display displayAddEventHandler [eventName, code]", "syntax": "<uiDisplay> displayAddEventHandler [eventName,<code>]"}, "displayCtrl": {"version": "CMD", "tags": "", "description": "Return child control with specified idc.", "example": "_displayControl = _ParentDisplay displayCtrl 101;", "docSyntax": "display displayCtrl idc", "syntax": "<uiDisplay> displayCtrl <scalar>"}, "displayRemoveAllEventHandlers": {"version": "CMD", "tags": "", "description": "Remove all event handlers from the given display.", "example": "findDisplay 46 displayRemoveAllEventHandlers \"KeyDown\";", "docSyntax": "display displayRemoveAllEventHandlers eventName", "syntax": "<uiDisplay> displayRemoveAllEventHandlers eventName"}, "displayRemoveEventHandler": {"version": "CMD", "tags": "", "description": "Remove a given event handler from the given display.", "example": "findDisplay 46 displayRemoveEventHandler [\"keyDown\",5];", "docSyntax": "display displayRemoveEventHandler [handlerType, id]", "syntax": "<uiDisplay> displayRemoveEventHandler [handlerType,<scalar>]"}, "displaySetEventHandler": {"version": "CMD", "tags": "", "description": "Sets given event handler of given display. The return code of the provided function should indicate whether this event was handled correctly. This implies telling the engine whether it is default code should be executed. See User Interface Event Handlers for the full list of handler names.", "example": "_control displaySetEventHandler [\"KeyDown\", \"\"];", "docSyntax": "display displaySetEventHandler [handlerName, function]", "syntax": "<uiDisplay> displaySetEventHandler [handlerName,function]"}, "dissolveTeam": {"version": "CMD", "tags": "", "description": "Dissolves the given team. All members become members of the main team.", "example": "dissolveTeam \"RED\"", "docSyntax": "dissolveTeam teamColor", "syntax": "dissolveTeam teamColor"}, "distance": {"version": "CMD", "tags": "", "description": "Returns a distance in meters between Objects, Positions or Locations.", "example": "_meters = player distance _object;", "docSyntax": "param1 distance param2", "syntax": "param1 <scalar> param2"}, "distributionRegion": {"version": "CMD", "tags": "", "description": "Returns the numerical index for the distribution region of this copy of Armed Assault.", "example": "if (distributionRegion == 1) then { hint \"miles\"; } else { hint \"kilometres\"; };", "docSyntax": "distributionRegion", "syntax": "distributionRegion"}, "doFire": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to fire on the given target (without radio messages). The target is set with doTarget or commandTarget. The target can be a unit or a vehicle, but not an object.", "example": "_ESoldier1 doFire _WSoldier1;", "docSyntax": "unitName doFire target", "syntax": "<objUnit> doFire <object>"}, "doFollow": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to follow another from his own group as his formation leader (without radio messages).", "example": "_soldier1 doFollow _soldier2;", "docSyntax": "unit doFollow unitLead", "syntax": "<objUnit> doFollow unitLead"}, "doFSM": {"version": "CMD", "tags": "", "description": "Orders a unit to process command defined by FSM file (silently). Unlike with execFSM where _this is passed to the FSM, the following parameters are passed when using doFSM/commandFSM:", "example": "_soldierOne doFSM [\"move.fsm\", position player, player];", "docSyntax": "unit doFSM [fsmName, position, target]", "syntax": "<objUnit> doFSM [fsmName,position,<object>]"}, "doGetOut": {"version": "CMD", "tags": "", "description": "Orders one or multiple units to get out from the vehicle (silently). Same as commandGetOut with latter being shown via radio chat.", "example": "doGetOut _unitOne", "docSyntax": "doGetOut units", "syntax": "doGetOut units"}, "doMove": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to move to the given position (without radio messages). Upon reaching its destination, if it is the group leader it will order the group to form around it's new position. If it is not the leader, it will immediately be ordered to return to formation by the group leader and begin moving back to the group. Use doStop to stop units returning to formation. moveToCompleted will return true when a unit issued this command reaches its destination.", "example": "_soldier1 doMove (position _officer);", "docSyntax": "unit(s) doMove position", "syntax": "<objUnit>(s) doMove position"}, "doStop": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to stop (without radio messages). The units stopped in this way will leave the groups formation. It will prevent them from moving around with their group (or formation leader), while still being able to turn around and even move to a new position if they see fit.", "example": "doStop _soldier1;", "docSyntax": "doStop unit(s)", "syntax": "doStop <objUnit>(s)"}, "doTarget": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to target the given target (without radio messages).", "example": "_ESoldier1 doTarget _WSoldier1;", "docSyntax": "unit doTarget target", "syntax": "<objUnit> doTarget <object>"}, "doWatch": {"version": "CMD", "tags": "", "description": "Order the given unit(s) to watch the given position or target (without radio messages). Use objNull as the target to order a unit to stop watching a position/target.", "example": "_soldierOne doWatch markerPos \"MarkerMoveOne\" The unit named \"soldierOne\" will watch the position where the marker \"MarkerMoveOne\" is placed.", "docSyntax": "unit(s) doWatch position", "syntax": "<objUnit>(s) doWatch position"}, "drawArrow": {"version": "CMD", "tags": "", "description": "Draws a single line arrow on the map. To draw a color filled arrow of custom shape see BIS_fnc_drawArrow", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawArrow [ player, player getRelPos [100, 0], [1,0,0,1] ]; }];", "docSyntax": "map drawArrow [from, to, color]", "syntax": "<objMap> drawArrow [from,to,<scalar>]"}, "drawEllipse": {"version": "CMD", "tags": "", "description": "Draws an ellipse on the map. Just like with marker or trigger area, negative a and b will result in hexagon.", "example": "findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawEllipse [ player, 10, 10, 0, [1, 0, 0, 1], \"\" ]; _this select 0 drawEllipse [ player, -10, -10, 0, [1, 1, 1, 1], \"#(rgb,8,8,3)color(1,0.6,0,1)\" ]; _this select 0 drawEllipse [ player, -10, -10, 90, [0, 0, 1, 1], \"\" ]; }];", "docSyntax": "map drawEllipse [c, a, b, angle, color, fill]", "syntax": "<objMap> drawEllipse [c,a,b,angle,<scalar>,fill]"}, "drawIcon": {"version": "CMD", "tags": "", "description": "Draws an icon on the map. This command needs to be called every frame, preferably using the onDraw UI Event Handler. Some useful icons can be found in configfile >> \"CfgVehicleIcons\".", "example": "Red icon with text: findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", { _this select 0 drawIcon [ \"iconStaticMG\", //\u00a0Custom images can also be used: getMissionPath \"\\myFolder\\myIcon.paa\" [1,0,0,1], getPos player, 24, 24, getDir player, \"Player Vehicle\", 1, 0.03, \"TahomaB\", \"right\" ] }];", "docSyntax": "map drawIcon [texture, color, position, width, height, angle, text, shadow, textSize, font, align]", "syntax": "<objMap> drawIcon [<string>,<scalar>,position,width,height,angle,<string>,shadow,textSize,font,align]"}, "drawLine": {"version": "CMD", "tags": "", "description": "Draw a line on the map. Can decrease framerate!", "example": "(findDisplay 12 displayCtrl 51) ctrlAddEventHandler [\"Draw\",\" (_this select 0) drawLine [ getPos player, [0,0,0], [0,0,1,1] ]; \"];", "docSyntax": "map drawLine [position1, position2, color]", "syntax": "<objMap> drawLine [position1,position2,<scalar>]"}, "drawLink": {"version": "CMD", "tags": "", "description": "The editor will draw a line between the two specified editor objects. Line type can be LINE or ARROW.", "example": "-", "docSyntax": "map drawLink [from,to,param type,line type,color]", "syntax": "<objMap> drawLink [from,to,param type,line type,<scalar>]"}, "drawLocation": {"version": "CMD", "tags": "", "description": "Used to draw locations in 2D Editor.", "example": "-", "docSyntax": "control drawLocation location", "syntax": "<uiControl> drawLocation location"}, "drawRectangle": {"version": "CMD", "tags": "", "description": "Draws a rectangle on the map.", "example": "_ctrl drawRectangle [ getPos player, 20, 20, getDir player, [0,0,1,1], \"\" ];", "docSyntax": "map drawRectangle [c, a, b, angle, color, fill]", "syntax": "<objMap> drawRectangle [c,a,b,angle,<scalar>,fill]"}, "driver": {"version": "CMD", "tags": "", "description": "Returns the driver of a vehicle.", "example": "(driver _tank) action [\"getout\", _tank];", "docSyntax": "driver vehicle", "syntax": "driver <objVehicle>"}, "drop": {"version": "CMD", "tags": "", "description": "Creates a particle effect. This command is used to create smoke, fire and similar effects. The particles are single polygons with single textures that always face the player. They can be set to dynamically change their position, size, direction, can be set to different weights and to be more or less dependent on the wind.", "example": "drop [\"cl_basic\", \"\", \"Billboard\", 1, 1, [-3.5 * (sin (direction xural)), -3.5 * (cos (direction xural)), 0], [random 0.1, random 0.1, random 0.5], 1, 0.005, 0.0042, 0.7, [0.3,3], [[0.5,0.5,0.5,0], [0.7,0.7,0.7,0.5], [0.9,0.9,0.9,0]], [0,1,0,1,0,1], 0.2, 0.2, \"\", \"\", xural];", "docSyntax": "drop parameters", "syntax": "drop parameters"}, "echo": {"version": "CMD", "tags": "", "description": "Sends any text into the debugger console or the logfile. This command is only present in internal version not in the retail version. Use diag_log instead!", "example": "echo \"Text in logfile\";", "docSyntax": "echo text", "syntax": "echo <string>"}, "editObject": {"version": "CMD", "tags": "", "description": "Show the edit object dialog for the given object.", "example": "-", "docSyntax": "map editObject object", "syntax": "<objMap> editObject <object>"}, "editorSetEventHandler": {"version": "CMD", "tags": "", "description": "Sets given event handler of given editor.", "example": "_map editorSetEventHandler [\"SelectObject\",\"\"];", "docSyntax": "map editorSetEventHandler [handler name,function]", "syntax": "<objMap> editorSetEventHandler [handler <string>,function]"}, "effectiveCommander": {"version": "CMD", "tags": "", "description": "Returns the effective commander of the vehicle. Effective commander is the player whom driver AI will listen to. So if in a tank there is a gunner and a commander and AI driver, if the effectiveCommander is gunner, then gunner pressing WASD will give AI orders to move. If gunner jumps out and then enters tank again, the effectiveCommander role most likely has changed to commander that remained in tank. Also the assignment seems to work on first come first served basis.", "example": "_commander = effectiveCommander tank;", "docSyntax": "effectiveCommander vehicle", "syntax": "effectiveCommander <objVehicle>"}, "emptyPositions": {"version": "CMD", "tags": "", "description": "Returns the number of given empty positions in the vehicle.", "example": "_freeCargoAndFFVPositions = vehicle player emptyPositions \"Cargo\";", "docSyntax": "vehicle emptyPositions position", "syntax": "<objVehicle> emptyPositions position"}, "enableAI": {"version": "CMD", "tags": "", "description": "Enables parts of the AI behavior that was disabled by disableAI.", "example": "_soldierOne enableAI \"Move\";", "docSyntax": "unit enableAI skilltype", "syntax": "<objUnit> enableAI skilltype"}, "enableAIFeature": {"version": "CMD", "tags": "", "description": "Enables/disables given AI feature.", "example": "\"AwareFormationSoft\" enableAIFeature true;", "docSyntax": "feature enableAIFeature enable", "syntax": "feature enableAIFeature <bool>"}, "enableAttack": {"version": "CMD", "tags": "", "description": "Set if leader can issue attack commands to the soldiers in his group.", "example": "_group1 enableAttack true;", "docSyntax": "group enableAttack enable", "syntax": "<objGroup> enableAttack <bool>"}, "enableCamShake": {"version": "CMD", "tags": "", "description": "Allows camera shake effects via addCamShake. If set to false, then a currently active shake effect will stop immediately. By default, shake effects are enabled, but once they have been disabled by this command, they will have to be enabled first, in order to be visible.", "example": "enableCamShake false;", "docSyntax": "enableCamShake value", "syntax": "enableCamShake <scalar>"}, "enableEndDialog": {"version": "CMD", "tags": "", "description": "Enables the execution of a custom camera sequence after the players death, coded in the script onPlayerKilled.sqs.", "example": "enableEndDialog;", "docSyntax": "enableEndDialog", "syntax": "enableEndDialog"}, "enableEngineArtillery": {"version": "CMD", "tags": "", "description": "Enable/disable the artillery engine. This allows the user to use the artillery computer on mortar/artillery, and for AI to use it for indirect fire.", "example": "enableEngineArtillery false;", "docSyntax": "enableEngineArtillery enabled", "syntax": "enableEngineArtillery <bool>"}, "enableEnvironment": {"version": "CMD", "tags": "", "description": "Enable/disable environmental effects: ambient life and/or ambient sound.", "example": "enableEnvironment false; //\u00a0identical to enableEnvironment [false, false]", "docSyntax": "enableEnvironment enable", "syntax": "enableEnvironment <bool>"}, "enableGunLights": {"version": "CMD", "tags": "", "description": "Toggles the target group's gun light(s).", "example": "_group enableGunLights false;", "docSyntax": "target enableGunLights state", "syntax": "<object> enableGunLights state"}, "enableIRLasers": {"version": "CMD", "tags": "", "description": "Allows the AI to use IR lasers. Units should be in \"Combat\" behaviour.", "example": "group player enableIRLasers true", "docSyntax": "unitOrGroup enableIRLasers value", "syntax": "unitOrGroup enableIRLasers <scalar>"}, "enableRadio": {"version": "CMD", "tags": "", "description": "Enable and disable radio messages to be heard and shown in the left lower corner of the screen. This command can be helpful during cutscenes.", "example": "enableRadio false;", "docSyntax": "enableRadio state", "syntax": "enableRadio state"}, "enableReload": {"version": "CMD", "tags": "", "description": "Enable / disable reload when magazine is empty.", "example": "_vehicle enableReload false;", "docSyntax": "object enableReload enable", "syntax": "<object> enableReload <bool>"}, "enableSaving": {"version": "CMD", "tags": "", "description": "Enable / disable saving of the game with an optional autosave.", "example": "enableSaving false; //\u00a0saving disabled, does autosave - same as [false, true] enableSaving true; //\u00a0saving enabled, doesn't autosave - same as [true, false] enableSaving [false, false]; //\u00a0saving disabled, doesn't autosave enableSaving [false, true]; //\u00a0saving disabled, does autosave enableSaving [true, false]; //\u00a0saving enabled, doesn't autosave enableSaving [true, true]; //\u00a0saving enabled, does autosave", "docSyntax": "enableSaving enable", "syntax": "enableSaving <bool>"}, "enableSentences": {"version": "CMD", "tags": "", "description": "Enables radio transmissions to be heard and seen on screen. It does not affect KBTell conversations.", "example": "enableSentences false;", "docSyntax": "enableSentences enable", "syntax": "enableSentences <bool>"}, "enableSimulation": {"version": "CMD", "tags": "", "description": "Enables / disables simulation for the given entity, e.g its animation and physics; it will still be able to take damage and report enemies. This command will affect entity simulation only locally. For a global and JIP enabled alternative, see enableSimulationGlobal.", "example": "player enableSimulation false;", "docSyntax": "entity enableSimulation state", "syntax": "entity enableSimulation state"}, "enableTeamSwitch": {"version": "CMD", "tags": "", "description": "Enable / disable Team Switch. The default setting is enabled.", "example": "enableTeamSwitch true;", "docSyntax": "enableTeamSwitch enable", "syntax": "enableTeamSwitch <bool>"}, "endLoadingScreen": {"version": "CMD", "tags": "", "description": "Finishes loading screen started by startLoadingScreen.", "example": "startLoadingScreen [\"Loading My Mission\"]; //\u00a0code progressLoadingScreen 0.5; //\u00a0code endLoadingScreen;", "docSyntax": "endLoadingScreen", "syntax": "endLoadingScreen"}, "endMission": {"version": "CMD", "tags": "", "description": "Finish the mission. Mission saves are deleted. Use failMission if they should not.", "example": "endMission \"END1\";", "docSyntax": "endMission endType", "syntax": "endMission endType"}, "engineOn": {"version": "CMD", "tags": "", "description": "Activates and deactivates the engine of a vehicle.", "example": "if (!isEngineOn _jeep) then { _jeep engineOn true; };", "docSyntax": "vehicle engineOn state", "syntax": "<objVehicle> engineOn state"}, "entities": {"version": "CMD", "tags": "", "description": "Returns a list of all alive and dead entities of the given type or deriving from the given type. Units in vehicles are ignored with the primary syntax.", "example": "_allcars = entities \"Car\";", "docSyntax": "entities type", "syntax": "entities type"}, "estimatedEndServerTime": {"version": "CMD", "tags": "", "description": "Estimated end of MP game in seconds converted to serverTime.", "example": "Estimated minutes left: _min = (ceil (estimatedEndServerTime - serverTime) / 60);", "docSyntax": "estimatedEndServerTime", "syntax": "estimatedEndServerTime"}, "estimatedTimeLeft": {"version": "CMD", "tags": "", "description": "Sets the estimated time left in the game that is shown in the \"Game in progress\" screen or in the master browser.", "example": "estimatedTimeLeft 600; //\u00a010 min", "docSyntax": "estimatedTimeLeft seconds", "syntax": "estimatedTimeLeft seconds"}, "evalObjectArgument": {"version": "CMD", "tags": "", "description": "Return argument in mission editor of a given object.", "example": "// returns string \"[1009.0351, 1319.4928]\" (findDisplay 128 displayCtrl 51) getObjectArgument [\"_unit_1\", \"POSITION\"] // returns array [1009.0351, 1319.4928] (findDisplay 128 displayCtrl 51) evalObjectArgument [\"_unit_1\", \"POSITION\"]", "docSyntax": "map evalObjectArgument [object, argument]", "syntax": "<objMap> evalObjectArgument [<object>,argument]"}, "execEditorScript": {"version": "CMD", "tags": "", "description": "Execute an editor script for the specified object.", "example": "_map execEditorScript [\"_team_1\",\"create\"];", "docSyntax": "map execEditorScript [object,script]", "syntax": "<objMap> execEditorScript [<object>,script]"}, "exp": {"version": "CMD", "tags": "", "description": "Exponential function with the base e. Equal to e^x.", "example": "_e = exp 1; //\u00a0Returns e (2.7182...)", "docSyntax": "exp x", "syntax": "exp x"}, "expectedDestination": {"version": "CMD", "tags": "", "description": "Return expected destination of unit as an array.", "example": "_data = expectedDestination player;", "docSyntax": "expectedDestination person", "syntax": "expectedDestination <objUnit>"}, "exportLandscapeXYZ": {"version": "CMD", "tags": "", "description": "Exports landscape as XYZ file.", "example": "exportLandscapeXYZ \"myLandscape.txt\"", "docSyntax": "exportLandscapeXYZ filename", "syntax": "exportLandscapeXYZ filename"}, "eyePos": {"version": "CMD", "tags": "", "description": "Returns the object's eyes / main turret position.", "example": "eyePos player", "docSyntax": "eyePos object", "syntax": "eyePos <object>"}, "faction": {"version": "CMD", "tags": "", "description": "Gets unit faction. Factions were introduced in Arma 2 and are defined under CfgFactionClasses.", "example": "private _playerFaction = faction player;", "docSyntax": "faction unitName", "syntax": "faction <objUnit>"}, "fadeMusic": {"version": "CMD", "tags": "", "description": "Changes the current music volume to the given value smoothly within the given time.", "example": "5 fadeMusic 0; //\u00a0fade current music volume to 0 in 5 sec", "docSyntax": "time fadeMusic volume", "syntax": "<scalar> fadeMusic volume"}, "fadeRadio": {"version": "CMD", "tags": "", "description": "Changes the radio volume smoothly within the given time.", "example": "5 fadeRadio 0.1;", "docSyntax": "time fadeRadio volume", "syntax": "<scalar> fadeRadio volume"}, "fadeSound": {"version": "CMD", "tags": "", "description": "Changes the sound volume smoothly within the given time.", "example": "5 fadeSound 0;", "docSyntax": "time fadeSound volume", "syntax": "<scalar> fadeSound volume"}, "fadeSpeech": {"version": "CMD", "tags": "", "description": "Changes the master speech volume smoothly within the given time. The default volume is 1.0. Some of the sounds that play through speech channel are:", "example": "5 fadeSpeech 0.1;", "docSyntax": "time fadeSpeech volume", "syntax": "<scalar> fadeSpeech volume"}, "failMission": {"version": "CMD", "tags": "", "description": "Finish the mission. If the server is set to run persistent mission, failMission will not end the mission when last player gets kicked to the lobby. Use endMission to end the mission. The end type can be:", "example": "failMission \"LOSER\";", "docSyntax": "failMission endtype", "syntax": "failMission endtype"}, "fillWeaponsFromPool": {"version": "CMD", "tags": "", "description": "Adds magazines from the campaign pool to the given unit, depending on his weapons. Available in campaigns only.", "example": "fillWeaponsFromPool _soldier;", "docSyntax": "fillWeaponsFromPool unit", "syntax": "fillWeaponsFromPool <objUnit>"}, "find": {"version": "CMD", "tags": "", "description": "Searches for an array element within array or a ANSI string within a ANSI string.", "example": "[\"Apples\", \"Oranges\", \"Pears\"] find \"Oranges\"; //\u00a0returns 1", "docSyntax": "array find element", "syntax": "<array> find element"}, "findCover": {"version": "CMD", "tags": "", "description": "Returns the object around where the unit finds cover. The minDist, visibilityPosition and ignoreObject parameters are optional.", "example": "-", "docSyntax": "object findCover [position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]", "syntax": "<object> findCover [position,hidePosition,maxDist,minDist,visibilityPosition,ignoreObject]"}, "findDisplay": {"version": "CMD", "tags": "", "description": "Finds a display by its IDD which can either be defined in missionConfigFile (description.ext) or configFile (config.cpp)", "example": "[] spawn { waitUntil {\u00a0!isNull findDisplay 46 }; hint \"Mission Display is now available!\"; };", "docSyntax": "findDisplay idd", "syntax": "findDisplay idd"}, "findEditorObject": {"version": "CMD", "tags": "", "description": "Return object that matches the provided reference.", "example": "-", "docSyntax": "map findEditorObject value", "syntax": "<objMap> findEditorObject <scalar>"}, "findEmptyPosition": {"version": "CMD", "tags": "", "description": "Searches for an empty position around specified position. The search starts looking for an empty position at a minimum distance of [radius] from the [center] and looks as far away as [radius + maxDistance]. If a [vehicleType] parameter is specified, then the search will look for an empty positions that is big enough to hold that vehicle type. If an empty position isn't found, an empty array is returned. This command ignores moving objects present within search area. The search area could be preloaded with findEmptyPositionReady command. See also: BIS_fnc_findSafePos.", "example": "_position = (getPosATL player) findEmptyPosition [0,100];", "docSyntax": "center findEmptyPosition [radius, maxDistance, vehicleType]", "syntax": "center findEmptyPosition [radius,maxDistance,vehicleType]"}, "findEmptyPositionReady": {"version": "CMD", "tags": "", "description": "Preloads area to be used with findEmptyPosition command and returns true when area is ready. The size of the area preloaded is from center - radius - maxDistance to center + radius + maxDistance", "example": "Preload aread within 500m: _ready = _center findEmptyPositionReady [0, 500];", "docSyntax": "center findEmptyPositionReady [radius, maxDistance]", "syntax": "center findEmptyPositionReady [radius,maxDistance]"}, "findNearestEnemy": {"version": "CMD", "tags": "", "description": "Finds the nearest enemy to the specified position. Returns a null object if the object's group does not know about any enemies. This command will return nearest object that is known to the unit and is considered enemy. An empty vehicle that is part of enemy group assets (see addVehicle) can be returned as valid nearest target.", "example": "_myNearestEnemy = (units _myGroup select 0) findNearestEnemy player;", "docSyntax": "object findNearestEnemy position", "syntax": "<object> findNearestEnemy position"}, "finishMissionInit": {"version": "CMD", "tags": "", "description": "Finish world initialization before mission is launched.", "example": "finishMissionInit", "docSyntax": "finishMissionInit", "syntax": "finishMissionInit"}, "finite": {"version": "CMD", "tags": "", "description": "Returns true if the provided number is finite (not infinite and a valid number).", "example": "finite 123; //\u00a0returns true", "docSyntax": "finite number", "syntax": "finite <scalar>"}, "fire": {"version": "CMD", "tags": "", "description": "Forces a unit to fire the given weapon.", "example": "_soldier fire \"M16\";", "docSyntax": "unit fire muzzle", "syntax": "<objUnit> fire muzzle"}, "fireAtTarget": {"version": "CMD", "tags": "", "description": "Remotely forces a unit to fire the given weapon. See also BIS_fnc_fire.", "example": "_handle = this fireAtTarget [groundtarget1,\"HellfireLauncher\"];", "docSyntax": "sourceVehicle fireAtTarget [targetVehicle, weaponMuzzleName]", "syntax": "sourceVehicle fireAtTarget [targetVehicle,weaponMuzzleName]"}, "flag": {"version": "CMD", "tags": "", "description": "Returns the original flag pole of the flag the unit is carrying.", "example": "_flag = flag _soldier;", "docSyntax": "flag unit", "syntax": "<objFlag> <objUnit>"}, "flagOwner": {"version": "CMD", "tags": "", "description": "Returns the global owner of a flag. A getter for setFlagOwner. Note that owner of a flag is Object rather than Number, as how it is usually with other owner commands", "example": "_person = flagOwner _flagOne;", "docSyntax": "flagOwner flag", "syntax": "flagOwner <objFlag>"}, "fleeing": {"version": "CMD", "tags": "", "description": "Checks if a unit is fleeing.", "example": "if (fleeing soldier_1) then {player sideChat \"We have won!\"} else {player sideChat \"Keep fighting!\"};", "docSyntax": "fleeing unit", "syntax": "fleeing <objUnit>"}, "floor": {"version": "CMD", "tags": "", "description": "Returns the next lowest integer in relation to the provided number.", "example": "floor 5.1; //\u00a0result is 5 floor 5.999; //\u00a0result is 5 floor -2.01; //\u00a0result is -3 floor -2.99; //\u00a0result is -3", "docSyntax": "floor num", "syntax": "floor num"}, "flyInHeight": {"version": "CMD", "tags": "", "description": "Sets the flying altitude for aircraft relatively to the ground surface. Avoid too low altitudes, as helicopters and planes won't evade trees and obstacles on the ground. The default flying altitude is 100 meters.", "example": "_helicopter flyInHeight 40;", "docSyntax": "aircraft flyInHeight altitude", "syntax": "aircraft flyInHeight <scalar>"}, "fog": {"version": "CMD", "tags": "", "description": "A getter for setFog. Returns the current value of the fog in range 0..1.", "example": "_foglevel = fog;", "docSyntax": "fog", "syntax": "fog"}, "fogForecast": {"version": "CMD", "tags": "", "description": "Returns the forecast fog value. A value of 0 means no fog, 1 means maximum fog.", "example": "_level = fogForecast;", "docSyntax": "fogForecast", "syntax": "fogForecast"}, "forceEnd": {"version": "CMD", "tags": "", "description": "Forces mission ending (set with endMission) even if a camera effect or any another condition delays the endMission (mostly in Operation Flashpoint).", "example": "forceEnd;//\u00a0in an ending trigger to ensure no camera is delaying mission ending", "docSyntax": "forceEnd", "syntax": "forceEnd"}, "forceMap": {"version": "CMD", "tags": "", "description": "Opens non-interactive main map in background that overrides user screen. To force open interactive map use openMap command.", "example": "forceMap true", "docSyntax": "forceMap show", "syntax": "forceMap show"}, "forceSpeed": {"version": "CMD", "tags": "", "description": "Force the speed limit on given object (object will never attempt to move faster than given by forceSpeed). Use negative value to return to default behaviour.", "example": "_helicopter forceSpeed 150;", "docSyntax": "object forceSpeed speed", "syntax": "<object> forceSpeed <scalar>"}, "forceWalk": {"version": "CMD", "tags": "", "description": "Forces unit to walk even if run or sprint is selected.", "example": "player forceWalk true;", "docSyntax": "unit forceWalk value", "syntax": "<objUnit> forceWalk <scalar>"}, "format": {"version": "CMD", "tags": "", "description": "Composes a string containing other variables or other variable types. Converts any variable type to a string. If you want to convert a string back to a number, use parseNumber.", "example": "format [\"Player:%1, player's side:%2\", player, side player]; //\u00a0returns \"Player:WEST 1-1-A:1 (Username), player's side:WEST\"", "docSyntax": "format [formatString, var1, var2, ...]", "syntax": "format [formatString,var1,var2,...]"}, "formation": {"version": "CMD", "tags": "", "description": "Returns the current formation of a group.", "example": "formation group player;", "docSyntax": "formation target", "syntax": "formation <object>"}, "formationDirection": {"version": "CMD", "tags": "", "description": "Return the direction in degrees of the 'unit' watching in formation.", "example": "_degrees = formationDirection _unit", "docSyntax": "formationDirection unitName", "syntax": "formationDirection <objUnit>"}, "formationLeader": {"version": "CMD", "tags": "", "description": "Return leader of the formation.", "example": "if (formationLeader player\u00a0!= leader player) then { hint \"Formation leader is not the group leader.\"; };", "docSyntax": "formationLeader unitName", "syntax": "formationLeader <objUnit>"}, "formationMembers": {"version": "CMD", "tags": "", "description": "Return list of units (drivers) in the formation.", "example": "_drivers = formationMembers _person", "docSyntax": "formationMembers person", "syntax": "formationMembers <objUnit>"}, "formationPosition": {"version": "CMD", "tags": "", "description": "Return position of unit in the formation.", "example": "_pos = formationPosition _unit;", "docSyntax": "formationPosition unit", "syntax": "formationPosition <objUnit>"}, "formationTask": {"version": "CMD", "tags": "", "description": "Return the current task of the unit in the formation.", "example": "_currentTask = formationTask _unit;", "docSyntax": "formationTask unit", "syntax": "formationTask <objUnit>"}, "formatText": {"version": "CMD", "tags": "", "description": "Creates a Structured Text similar to format command.", "example": "hint formatText [\"Image: %1\", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "formatText [format, argument1, argument2, ...]", "syntax": "formatText [format,argument1,argument2,...]"}, "formLeader": {"version": "CMD", "tags": "", "description": "Returns the formation leader of a given unit. This is often the same as the group leader, but not always, for example in cases when a unit is ordered to follow another unit.", "example": "if (formLeader player\u00a0!= leader player) then { hint \"The formation leader is different to the group leader!\"; };", "docSyntax": "formLeader unitName", "syntax": "formLeader <objUnit>"}, "fromEditor": {"version": "CMD", "tags": "", "description": "Return if given team was inserted directly from mission editor.", "example": "_fromEditor = fromEditor _member", "docSyntax": "fromEditor teamMember", "syntax": "fromEditor teamMember"}, "fuel": {"version": "CMD", "tags": "", "description": "Checks how much fuel is left in the gas tank of a vehicle.", "example": "if (fuel vehicle player == 0) then {hint \"The vehicle is out of fuel!\"};", "docSyntax": "fuel vehicle", "syntax": "fuel <objVehicle>"}, "gearIDCAmmoCount": {"version": "CMD", "tags": "", "description": "Returns ammo count of assigned magazine.", "example": "ammo = gearIDCAmmoCount _control;", "docSyntax": "gearIDCAmmoCount idc", "syntax": "gearIDCAmmoCount <scalar>"}, "gearSlotAmmoCount": {"version": "CMD", "tags": "", "description": "Returns ammo count of assigned magazine.", "example": "ammo = gearSlotAmmoCount _control;", "docSyntax": "gearSlotAmmoCount control", "syntax": "gearSlotAmmoCount <uiControl>"}, "gearSlotData": {"version": "CMD", "tags": "", "description": "Returns gear slot item name.", "example": "gearSlotData _myControl", "docSyntax": "gearSlotData control", "syntax": "gearSlotData <uiControl>"}, "getArray": {"version": "CMD", "tags": "", "description": "Extract array from config entry.", "example": "_array = getArray (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"threat\");", "docSyntax": "getArray config", "syntax": "getArray config"}, "getBackpackCargo": {"version": "CMD", "tags": "", "description": "Returns all backpack types and count from the cargo space.", "example": "_content = getBackpackCargo carName;", "docSyntax": "getBackpackCargo object", "syntax": "getBackpackCargo <object>"}, "getDammage": {"version": "CMD", "tags": "", "description": "Returns the object damage in the range from 0 to 1.", "example": "private _damage = getDammage player;", "docSyntax": "getDammage object", "syntax": "getDammage <object>"}, "getDir": {"version": "CMD", "tags": "", "description": "Returns the object heading in the range 0..360.", "example": "_azimuth = getDir player;", "docSyntax": "getDir object", "syntax": "getDir <object>"}, "getEditorCamera": {"version": "CMD", "tags": "", "description": "Fetches a reference to the mission editor camera.", "example": "-", "docSyntax": "getEditorCamera map", "syntax": "getEditorCamera <objMap>"}, "getEditorMode": {"version": "CMD", "tags": "", "description": "Returns the current mode of the editor.", "example": "-", "docSyntax": "getEditorMode map", "syntax": "getEditorMode <objMap>"}, "getEditorObjectScope": {"version": "CMD", "tags": "", "description": "Returns the editor object scope of the specified editor object.", "example": "-", "docSyntax": "map getEditorObjectScope object", "syntax": "<objMap> getEditorObjectScope <object>"}, "getElevationOffset": {"version": "CMD", "tags": "", "description": "Returns the map elevation offset from [map]/config.cpp. Returns 0 if there is no elevationOffset defined in the config of the current world.", "example": "_offset = getElevationOffset;", "docSyntax": "getElevationOffset", "syntax": "getElevationOffset"}, "getFriend": {"version": "CMD", "tags": "", "description": "Returns if sides are friendly or hostile. For a value smaller than 0.6 it results in being enemy, otherwise it is friendly. See also Side relations.", "example": "value = west getFriend east;", "docSyntax": "side1 getFriend side2", "syntax": "side1 getFriend side2"}, "getFSMVariable": {"version": "CMD", "tags": "", "description": "Return the value of variable in the variable space of given FSM. The FSM handle is the number returned by the execFSM command.", "example": "_handle getFSMVariable \"_foo\";", "docSyntax": "FSMhandle getFSMVariable name", "syntax": "FSMhandle getFSMVariable <string>"}, "getGroupIcon": {"version": "CMD", "tags": "", "description": "Get group icon properties.", "example": "_grpIconId = _group getVariable \"BIS_MARTA_ICON_TYPE\"; _grpIcon = _group getGroupIcon _grpIconId;", "docSyntax": "group getGroupIcon id", "syntax": "<objGroup> getGroupIcon <scalar>"}, "getGroupIconParams": {"version": "CMD", "tags": "", "description": "Returns group icons params used for command bar drawing such as color, text, scale, visibility, waypoint visibility, waypoint color.", "example": "_iconParams = getGroupIconParams group player;", "docSyntax": "getGroupIconParams group", "syntax": "getGroupIconParams <objGroup>"}, "getGroupIcons": {"version": "CMD", "tags": "", "description": "Returns all group icons. [id,icon,[offsetx,offsety],[..],..]", "example": "(example)", "docSyntax": "getGroupIcons group", "syntax": "getGroupIcons <objGroup>"}, "getHideFrom": {"version": "CMD", "tags": "", "description": "Returns the Position where object believes the enemy to be. If there is no direct line of sight between the object and the enemy, this position is extrapolated based on the last known position and speed of the enemy. A returned position of [0,0,0] implies that object does not knowAbout enemy. If enemy is null it is some position in front of the object or enemy position.", "example": "_pos = player getHideFrom _enemy;", "docSyntax": "object getHideFrom enemy", "syntax": "<object> getHideFrom enemy"}, "getHit": {"version": "CMD", "tags": "", "description": "Returns selection damage. Same as getHitPointDamage, only the argument is selection part instead of hit point.", "example": "player getHit \"head\";", "docSyntax": "vehicle getHit selection", "syntax": "<objVehicle> getHit selection"}, "getMagazineCargo": {"version": "CMD", "tags": "", "description": "Returns all magazines types and count from the cargo space", "example": "_content = getMagazineCargo carName;", "docSyntax": "getMagazineCargo object", "syntax": "getMagazineCargo <object>"}, "getMarkerColor": {"version": "CMD", "tags": "", "description": "Returns marker color for given marker.", "example": "\"MarkerOne\" setMarkerColor \"ColorBlack\"; _color = getMarkerColor \"MarkerOne\"; // returns \"ColorBlack\"", "docSyntax": "getMarkerColor markerName", "syntax": "getMarkerColor <string>"}, "getMarkerPos": {"version": "CMD", "tags": "", "description": "Returns marker position.", "example": "_mPos1 = getMarkerPos \"markerOne\";", "docSyntax": "getMarkerPos markerName", "syntax": "getMarkerPos <string>"}, "getMarkerSize": {"version": "CMD", "tags": "", "description": "Returns the size of the given marker. A getter for setMarkerSize and an alias of markerSize.", "example": "\"MarkerOne\" setMarkerSize [100,200]; _size = getMarkerSize \"MarkerOne\"; //returns [100,200]", "docSyntax": "getMarkerSize markerName", "syntax": "getMarkerSize <string>"}, "getMarkerType": {"version": "CMD", "tags": "", "description": "Gets type of marker. See CfgMarkers for a list of standard markers.", "example": "if (getMarkerType \"Marker1\" == \"\") then {hint \"Marker1 is not an icon!\"}", "docSyntax": "getMarkerType markerName", "syntax": "getMarkerType <string>"}, "getNumber": {"version": "CMD", "tags": "", "description": "Extract number from config entry.", "example": "_value = getNumber (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"maxSpeed\");", "docSyntax": "getNumber config", "syntax": "getNumber config"}, "getObjectArgument": {"version": "CMD", "tags": "", "description": "Return name of object argument in mission editor.", "example": "// returns string \"[1009.0351, 1319.4928]\" (findDisplay 128 displayCtrl 51) getObjectArgument [\"_unit_1\", \"POSITION\"] // returns array [1009.0351, 1319.4928] (findDisplay 128 displayCtrl 51) evalObjectArgument [\"_unit_1\", \"POSITION\"]", "docSyntax": "map getObjectArgument [object, argument]", "syntax": "<objMap> getObjectArgument [<object>,argument]"}, "getObjectChildren": {"version": "CMD", "tags": "", "description": "Return a list of all the children of the specified object.", "example": "-", "docSyntax": "map getObjectChildren object", "syntax": "<objMap> getObjectChildren <object>"}, "getObjectProxy": {"version": "CMD", "tags": "", "description": "Return the proxy object associated with the given editor object.", "example": "(findDisplay 128 displayCtrl 51) getObjectProxy \"_unit_1\" // returns the object 'B 1-1-A:1 (Sean Johnson)'", "docSyntax": "map getObjectProxy object", "syntax": "<objMap> getObjectProxy <object>"}, "getPlayerUID": {"version": "CMD", "tags": "", "description": "Return a UniqueID of the given unit (player).", "example": "private _uid = getPlayerUID player;", "docSyntax": "getPlayerUID unit", "syntax": "getPlayerUID <objUnit>"}, "getPlayerUIDOld": {"version": "CMD", "tags": "", "description": "Returns the old UniqueID of Arma 2 OA of the given unit as string if it is player and empty value if it is AI. The uniqueID may be up to 100 characters long and may contain numbers, uppercase letters and underscores (the value can be used to construct a valid variable name by appending to another valid variable name).", "example": "_uid = getPlayerUIDOld player;", "docSyntax": "getPlayerUIDOld unit", "syntax": "getPlayerUIDOld <objUnit>"}, "getPos": {"version": "CMD", "tags": "", "description": "Returns object or location position. If the argument is an object, the return value is in format PositionAGLS.", "example": "hintSilent str getPos player;", "docSyntax": "getPos object", "syntax": "getPos <object>"}, "getPosASL": {"version": "CMD", "tags": "", "description": "Returns the object position height above sea level.", "example": "_AslPos = getPosASL player;", "docSyntax": "getPosASL object", "syntax": "getPosASL <object>"}, "getPosATL": {"version": "CMD", "tags": "", "description": "Returns the position of an object relative to the terrain.", "example": "_objPosition = getPosATL player", "docSyntax": "getPosATL object", "syntax": "getPosATL <object>"}, "getResolution": {"version": "CMD", "tags": "", "description": "Returns an array containing all information about current client screen resolution.", "example": "_res = getResolution; //\u00a0a 16/9 single monitor setup [ 1360, //\u00a0width 768, //\u00a0height 867, //\u00a02D viewport width 653, //\u00a02D viewport height 1.77778, //\u00a0aspect ratio 0.85 //\u00a0UI scale ]", "docSyntax": "getResolution", "syntax": "getResolution"}, "getSpeed": {"version": "CMD", "tags": "", "description": "Get the speed for the given speed mode. SpeedMode can be:", "example": "_spd = player getSpeed \"FAST\";", "docSyntax": "object getSpeed speedMode", "syntax": "<object> getSpeed speedMode"}, "getTerrainHeightASL": {"version": "CMD", "tags": "", "description": "Returns the terrain height above the sea for the given position.", "example": "_height = getTerrainHeightASL (getPosATL player);", "docSyntax": "getTerrainHeightASL position", "syntax": "getTerrainHeightASL position"}, "getText": {"version": "CMD", "tags": "", "description": "Extracts localized text from config entry, if entry is subject to localization, otherwise returns text value. To obtain the translation key itself, see getTextRaw.", "example": "_text = getText (configFile >> \"CfgVehicles\" >> \"Thing\" >> \"icon\"); //\u00a0\"Get in %1 as Driver\"", "docSyntax": "getText config", "syntax": "getText config"}, "getVariable": {"version": "CMD", "tags": "", "description": "Returns the value of variable in the variable space assigned to various data types. All available data types combinations:", "example": "private _variable = myTruck getVariable \"myVariable\"; //\u00a0returns nil if \"myVariable\" is not set", "docSyntax": "varspace getVariable name", "syntax": "varspace getVariable <string>"}, "getWeaponCargo": {"version": "CMD", "tags": "", "description": "Returns all weapons types and count from the cargo space", "example": "_content = getWeaponCargo carName;", "docSyntax": "getWeaponCargo object", "syntax": "getWeaponCargo <object>"}, "getWPPos": {"version": "CMD", "tags": "", "description": "Returns the position of a selected waypoint of a given group. Waypoints include only those which were placed in the mission editor.", "example": "[_group1,1] setWPPos [200,600,0]; _pos = getWPPos [_group1,1]; returns [200,600,0]", "docSyntax": "getWPPos [group, index]", "syntax": "getWPPos [<objGroup>,<scalar>]"}, "glanceAt": {"version": "CMD", "tags": "", "description": "Control what the unit(s) is/are glancing at (target or Position). If target is used, it will get revealed fully. How frequently the unit(s) is/are glancing there depends on behaviour.", "example": "_someSoldier glanceAt _otherSoldier", "docSyntax": "unit(s) glanceAt position", "syntax": "<objUnit>(s) glanceAt position"}, "globalChat": {"version": "CMD", "tags": "", "description": "Types text to the global radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "_soldierOne globalChat \"Show this text\";", "docSyntax": "unitName globalChat chatText", "syntax": "<objUnit> globalChat chatText"}, "globalRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the global radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne globalRadio \"messageOne\";", "docSyntax": "unit globalRadio radioName", "syntax": "<objUnit> globalRadio radioName"}, "goto": {"version": "CMD", "tags": "", "description": "Break script flow and go to given label (defined by # - NOT to be confused with SQF's hash sign!)", "example": "goto \"myLabel\" player setDamage 1 #myLabel hint \"you successfully avoided death!\"", "docSyntax": "goto label", "syntax": "goto label"}, "group": {"version": "CMD", "tags": "", "description": "Returns the group a unit is assigned to.", "example": "_playerGrp = group player", "docSyntax": "group object", "syntax": "<objGroup> <object>"}, "groupChat": {"version": "CMD", "tags": "", "description": "Types text to the group radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "_soldierOne groupChat \"Show this text\";", "docSyntax": "unitName groupChat chatText", "syntax": "<objUnit> groupChat chatText"}, "groupFromNetId": {"version": "CMD", "tags": "", "description": "Get group with given unique ID. For objects use objectFromNetId. As this command is MP only, you can use BIS_fnc_groupFromNetId, which extends the use to SP as well.", "example": "_group = groupFromNetId \"4:45\";", "docSyntax": "groupFromNetId id", "syntax": "groupFromNetId <scalar>"}, "groupIconSelectable": {"version": "CMD", "tags": "", "description": "Returns whether or not group icons raise onGroupIconClick, onGroupIconOverEnter and onGroupIconOverLeave events.", "example": "hint str groupIconSelectable;", "docSyntax": "groupIconSelectable", "syntax": "groupIconSelectable"}, "groupIconsVisible": {"version": "CMD", "tags": "", "description": "Returns array with group icons visibility. A getter for setGroupIconsVisible", "example": "hint str groupIconsVisible;", "docSyntax": "groupIconsVisible", "syntax": "groupIconsVisible"}, "groupRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the group radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol.", "example": "_soldierOne groupRadio \"messageOne\";", "docSyntax": "unit groupRadio radioName", "syntax": "<objUnit> groupRadio radioName"}, "groupSelectedUnits": {"version": "CMD", "tags": "", "description": "Returns selected units in source group for normal commanding mode (individual units). For the High Command equivalent, see hcSelected.", "example": "_selectedUnits = groupSelectedUnits player;", "docSyntax": "groupSelectedUnits unit", "syntax": "groupSelectedUnits <objUnit>"}, "groupSelectUnit": {"version": "CMD", "tags": "", "description": "Selects a unit from player's group. If player is the leader, the effect of this command is similar to player pressing F1, F2, F3... buttons to highlight units in his squad, after which the unit command menu is shown. If leader is AI, player will get usual communication menu to interact with the leader.", "example": "After leaving menu, deselect all units (command menu is not opened -> no selection){ player groupSelectUnit [_x, false]; } forEach (groupSelectedUnits player);", "docSyntax": "player groupSelectUnit [unit, select]", "syntax": "<objUnit> groupSelectUnit [<objUnit>,select]"}, "gunner": {"version": "CMD", "tags": "", "description": "Returns the gunner of a vehicle.", "example": "gunner _tank action [\"getout\", _tank];", "docSyntax": "gunner vehicle", "syntax": "gunner <objVehicle>"}, "halt": {"version": "CMD", "tags": "", "description": "This command was meant to break the script into debugger, however currently it does not do anything except displaying and logging the following error: Error Debugger breakpoint hit.", "example": "if (_displayAnError) then {halt};", "docSyntax": "halt", "syntax": "halt"}, "handsHit": {"version": "CMD", "tags": "", "description": "Checks if a soldier's hands are hit, which results in inaccurate aiming.", "example": "? (handsHit player == 1)\u00a0: player globalChat \"Ouch! Don't shoot at my hands dammit!\"", "docSyntax": "handsHit unitName", "syntax": "handsHit <objUnit>"}, "hasInterface": {"version": "CMD", "tags": "", "description": "Returns true if the computer has an interface (a real player). False for a dedicated server or for a headless client.", "example": "_isHC =\u00a0!(hasInterface || isDedicated);", "docSyntax": "hasInterface", "syntax": "hasInterface"}, "hasWeapon": {"version": "CMD", "tags": "", "description": "Checks if a unit has the given weapon in hands or on back/in holster. Weapons inside unit containers such as vest and backpack are not counted.", "example": "if\u00a0!(player hasWeapon \"arifle_MX_ACO_pointer_F\") then { player addWeapon \"arifle_MX_ACO_pointer_F\" };", "docSyntax": "unitName hasWeapon weaponName", "syntax": "<objUnit> hasWeapon weaponName"}, "hcAllGroups": {"version": "CMD", "tags": "", "description": "Returns selected groups in high command.", "example": "hcAllGroups player;", "docSyntax": "hcAllGroups unit", "syntax": "hcAllGroups <objUnit>"}, "hcGroupParams": {"version": "CMD", "tags": "", "description": "Returns parameters describing group in high command bar. Return value is array in format [groupName, teamName] or [] if error. Possible values for team name:", "example": "player hcGroupParams someGroup;", "docSyntax": "unit hcGroupParams group", "syntax": "<objUnit> hcGroupParams <objGroup>"}, "hcLeader": {"version": "CMD", "tags": "", "description": "Returns group's high command commander.", "example": "_leader = hcLeader groupName;", "docSyntax": "hcLeader group", "syntax": "hcLeader <objGroup>"}, "hcRemoveAllGroups": {"version": "CMD", "tags": "", "description": "Remove all groups from unit's high command bar.", "example": "hcRemoveAllGroups player;", "docSyntax": "hcRemoveAllGroups unit", "syntax": "hcRemoveAllGroups <objUnit>"}, "hcRemoveGroup": {"version": "CMD", "tags": "", "description": "Removes group from unit's high command bar.", "example": "player hcRemoveGroup BIS_group;", "docSyntax": "unit hcRemoveGroup group", "syntax": "<objUnit> hcRemoveGroup <objGroup>"}, "hcSelected": {"version": "CMD", "tags": "", "description": "Returns selected groups in high command.", "example": "array = hcSelected unit;", "docSyntax": "hcSelected unit", "syntax": "hcSelected <objUnit>"}, "hcSelectGroup": {"version": "CMD", "tags": "", "description": "Select given group in high command bar.", "example": "player hcSelectGroup [group_1,group_2];", "docSyntax": "unit hcSelectGroup array", "syntax": "<objUnit> hcSelectGroup <array>"}, "hcSetGroup": {"version": "CMD", "tags": "", "description": "Add group to unit's high command bar.", "example": "unit hcSetGroup [group, \"HQ\", \"teamred\"];", "docSyntax": "unit hcSetGroup [group, groupName, team]", "syntax": "<objUnit> hcSetGroup [<objGroup>,groupName,team]"}, "hcShowBar": {"version": "CMD", "tags": "", "description": "Shows or hides high command bar. There must be some groups under HC command to show HC bar.", "example": "hcShowBar true;", "docSyntax": "hcShowBar bool", "syntax": "hcShowBar <bool>"}, "hcShownBar": {"version": "CMD", "tags": "", "description": "Return whether the High Command bar is shown/active.", "example": "if (hcShownBar) then { hint \"HC bar is active\"; };", "docSyntax": "hcShownBar", "syntax": "hcShownBar"}, "hideBehindScripted": {"version": "CMD", "tags": "", "description": "When set to true it disables the default engine hiding behavior.", "example": "_unit hideBehindScripted true;", "docSyntax": "object hideBehindScripted scriptedHideBehind", "syntax": "<object> hideBehindScripted scriptedHideBehind"}, "hideBody": {"version": "CMD", "tags": "", "description": "Hides dead body of the given unit. After a short delay, the body slowly sinks into the ground. After awhile, when group of the unit becomes grpNull, the body gets deleted and becomes objNull. If applied to alive unit, nothing happens until unit dies, then the unit's body gets hidden. If a dead unit is human player, the body is hidden but not deleted until player respawns.", "example": "hideBody player1;", "docSyntax": "hideBody unit", "syntax": "hideBody <objUnit>"}, "hideObject": {"version": "CMD", "tags": "", "description": "Hide entity. Can be used on soldiers and vehicles, also on static objects.", "example": "hideObject unitName;", "docSyntax": "hideObject object", "syntax": "hideObject <object>"}, "hierarchyObjectsCount": {"version": "CMD", "tags": "", "description": "The number of objects in hierarchy.", "example": "_number = hierarchyObjectsCount;", "docSyntax": "hierarchyObjectsCount", "syntax": "hierarchyObjectsCount"}, "hint": {"version": "CMD", "tags": "", "description": "Outputs a hint message to the right of the screen (left of the screen in Operation Flashpoint) with a sound (except in Armed Assault). Use hintSilent for soundless hint. To split message in multiple lines either use Structured Text or \\n (in lower case).", "example": "// outputs the following: // Press W to move forward. // Press S to move backwards. hint \"Press W to move forward.\\nPress S to move backwards.\"", "docSyntax": "hint message", "syntax": "hint message"}, "hintC": {"version": "CMD", "tags": "", "description": "Displays a very basic message dialog in the center of the screen. Player control is taken away until \"Continue\" is pressed. The message dialog can be dragged around on the screen. After \"Continue\" has been pressed, the content of the hintC is repeated in a normal hint.", "example": "hintC \"Press W to move forward\";", "docSyntax": "hintC message", "syntax": "hintC message"}, "hintCadet": {"version": "CMD", "tags": "", "description": "Shows a text hint only when in cadetMode. The text can contain several lines. \\n is used to indicate the end of a line.", "example": "hintCadet \"Press W to move forward\";", "docSyntax": "hintCadet text", "syntax": "hintCadet <string>"}, "hintSilent": {"version": "CMD", "tags": "", "description": "Same as hint, but without a sound.", "example": "hintSilent format [\"Hello, %1!\", name player];", "docSyntax": "hintSilent text", "syntax": "hintSilent <string>"}, "hostMission": {"version": "CMD", "tags": "", "description": "Host the multiplayer mission defined in the config class and opens the lobby with the scenario loaded. Must be called in UI action from a dialog.", "example": "hostMission [configFile >> \"CfgMissions\" >> \"MPMissions\" >> _scenarioClassName, _currentlyActiveDisplay];", "docSyntax": "hostMission [configEntry, activeDisplay]", "syntax": "hostMission [configEntry,activeDisplay]"}, "htmlLoad": {"version": "CMD", "tags": "", "description": "Load HTML from file or URI using given control. File path is relative to current mission dir or an absolute path (with drive letter etc.). The command is subject to restrictions, imposed by CfgCommands class.", "example": "_control htmlLoad \"briefing.html\";", "docSyntax": "control htmlLoad filename", "syntax": "<uiControl> htmlLoad filename"}, "image": {"version": "CMD", "tags": "", "description": "Creates a structured text containing the given image. Use setAttributes to set additional attributes on the image.", "example": "hint composeText [\"Image: \", image \"\\a3\\Data_f\\Flags\\flag_Altis_co.paa\"];", "docSyntax": "image filename", "syntax": "image filename"}, "importAllGroups": {"version": "CMD", "tags": "", "description": "Imports all groups into the RTE.", "example": "-", "docSyntax": "importAllGroups map", "syntax": "importAllGroups <objMap>"}, "importance": {"version": "CMD", "tags": "", "description": "Returns a location's importance value.", "example": "_locationImportance = importance myLocation", "docSyntax": "importance location", "syntax": "importance location"}, "in": {"version": "CMD", "tags": "", "description": "Checks whether value is in array, unit is in vehicle, position is inside location or ANSI string is part of other ANSI string. If Unicode support is desired, see forceUnicode.", "example": "1 in [0, 1, 2]; //\u00a0true", "docSyntax": "value in array", "syntax": "<scalar> in <array>"}, "inflame": {"version": "CMD", "tags": "", "description": "Sets the state of a fireplace.", "example": "_fireplaceOne inflame true;", "docSyntax": "fireplace inflame burn", "syntax": "fireplace inflame burn"}, "inflamed": {"version": "CMD", "tags": "", "description": "Checks if fireplace is inflamed (burning) or not. To check if a unit is receiving damage from fire, use isBurning command.", "example": "_inflamed = inflamed _fireplaceOne;", "docSyntax": "inflamed fireplace", "syntax": "inflamed fireplace"}, "inGameUISetEventHandler": {"version": "CMD", "tags": "", "description": "Sets given event handler of in-game UI. If EH function returns true, performed action is overridden. Event handlers available are:", "example": "inGameUISetEventHandler [\"Action\", \"hint 'Lights, Camera, Action!'; true\"]; sleep 10; inGameUISetEventHandler [\"Action\", \"\"]; //\u00a0removes the \"Action\" EH", "docSyntax": "inGameUISetEventHandler [handlerName, code]", "syntax": "inGameUISetEventHandler [handlerName,<code>]"}, "inheritsFrom": {"version": "CMD", "tags": "", "description": "Returns base entry of config entry.", "example": "_base = inheritsFrom (configFile >> \"CfgVehicles\" >> \"Car\"); Result is Config entry for class \"LandVehicle\"", "docSyntax": "inheritsFrom config", "syntax": "inheritsFrom config"}, "initAmbientLife": {"version": "CMD", "tags": "", "description": "Initialises the ambient life on local client from CfgWorlds >> worldName >> AmbientA3. Has no effect on dedicated server or headless client.", "example": "initAmbientLife;", "docSyntax": "initAmbientLife", "syntax": "initAmbientLife"}, "inputAction": {"version": "CMD", "tags": "", "description": "Return the state of input devices mapped to given input action.", "example": "inputAction \"leanLeft\" Returns 1 if the button mapped to \"leanLeft\" is pressed currently else 0.", "docSyntax": "inputAction name", "syntax": "inputAction <string>"}, "insertEditorObject": {"version": "CMD", "tags": "", "description": "Insert an object to the editor and assign arguments. Create script is,not called. Returns the ID of the new EditorObject. Subtype class is,optional.", "example": "-", "docSyntax": "map insertEditorObject [type,value,[name1,value1,...],subtype class]", "syntax": "<objMap> insertEditorObject [type,<scalar>,[name1,value1,...],subtype class]"}, "intersect": {"version": "CMD", "tags": "", "description": "Finds named selections in object which are in specified LOD, intersected by given section of a line. Return value is in the form of [selection, distance]. Multiple returned arrays are nested within a single array. No intersection returns []. lodName could be one of the following:", "example": "[_tank, \"VIEW\"] intersect [[1500, 1500, 2], [1550, 1500, 2]];", "docSyntax": "[object, lodName] intersect [begPos, endPos]", "syntax": "[<object>,lodName] intersect [begPos,endPos]"}, "isAgent": {"version": "CMD", "tags": "", "description": "Check if team member is an agent.", "example": "isAgent teamMember _unit;", "docSyntax": "isAgent teamMember", "syntax": "isAgent teamMember"}, "isArray": {"version": "CMD", "tags": "", "description": "Check if config entry represents array.", "example": "_ok = isArray (configFile >> \"CfgVehicles\") Result is false", "docSyntax": "isArray config", "syntax": "isArray config"}, "isAutoHoverOn": {"version": "CMD", "tags": "", "description": "Return true if vehicle has enabled auto hover. (always returns false if the vehicle can't set auto hover)", "example": "_isOn = isAutoHoverOn vehicle player;", "docSyntax": "isAutoHoverOn vehicle", "syntax": "isAutoHoverOn <objVehicle>"}, "isClass": {"version": "CMD", "tags": "", "description": "Check if config entry represents config class.", "example": "_ok = isClass (configFile >> \"CfgVehicles\"); Result is true.", "docSyntax": "isClass config", "syntax": "isClass config"}, "isDedicated": {"version": "CMD", "tags": "", "description": "Returns true if the machine executing the command is a dedicated multiplayer server. Returns false in single player.", "example": "if (isDedicated) then {diag_log \"Dedicated Server on the run\u00a0!\";};", "docSyntax": "isDedicated", "syntax": "isDedicated"}, "isEngineOn": {"version": "CMD", "tags": "", "description": "Returns true if engine is on, false if it is off.", "example": "_carEngineIsOn = isEngineOn _carOne;", "docSyntax": "isEngineOn vehicle", "syntax": "isEngineOn <objVehicle>"}, "isFlatEmpty": {"version": "CMD", "tags": "", "description": "Checks given position against given filter params. Filter includes checks for:", "example": "Check if player position is over land: _overLand =\u00a0!(position player isFlatEmpty [-1, -1, -1, -1, 0, false] isEqualTo []);", "docSyntax": "position isFlatEmpty [minDistance, mode, maxGradient, maxGradientRadius, overLandOrWater, shoreLine, ignoreObject]", "syntax": "position isFlatEmpty [minDistance,mode,maxGradient,maxGradientRadius,overLandOrWater,shoreLine,ignoreObject]"}, "isForcedWalk": {"version": "CMD", "tags": "", "description": "Returns true if player is forced to walk with forceWalk.", "example": "_bool = isForcedWalk player;", "docSyntax": "isForcedWalk unitName", "syntax": "isForcedWalk <objUnit>"}, "isFormationLeader": {"version": "CMD", "tags": "", "description": "Returns true if the specified unit is subgroup leader.", "example": "_isLeader = isFormationLeader player;", "docSyntax": "isFormationLeader unit", "syntax": "isFormationLeader <objUnit>"}, "isHidden": {"version": "CMD", "tags": "", "description": "Returns whether a person is hidden (reached the hiding position).", "example": "_bobIsHidden = isHidden bob;", "docSyntax": "isHidden person", "syntax": "isHidden <objUnit>"}, "isKeyActive": {"version": "CMD", "tags": "", "description": "Checks whether the given key is active in the current user profile. See keys, keysLimit and doneKeys in the description.ext file of the missions.", "example": "_active = isKeyActive \"Mission04Key\";", "docSyntax": "isKeyActive keyName", "syntax": "isKeyActive keyName"}, "isKindOf": {"version": "CMD", "tags": "", "description": "Checks whether the given object or type is (a subtype) of the given type.", "example": "vehicle player isKindOf \"Tank\";", "docSyntax": "object isKindOf typeName", "syntax": "<object> isKindOf typeName"}, "isManualFire": {"version": "CMD", "tags": "", "description": "Returns true if manual fire is on. Manual fire could either be selected in vehicle action menu (if available) or with action \"ManualFire\" and \"ManualFireCancel\". Always returns false for a soldier.", "example": "_bool = isManualFire vehicle player;", "docSyntax": "isManualFire vehicleName", "syntax": "isManualFire vehicleName"}, "isMarkedForCollection": {"version": "CMD", "tags": "", "description": "Checks whether the object is marked for weapons collection.", "example": "_marked = isMarkedForCollection _truck", "docSyntax": "isMarkedForCollection object", "syntax": "isMarkedForCollection <object>"}, "isMultiplayer": {"version": "CMD", "tags": "", "description": "Return true if multiPlayer.", "example": "if (isMultiplayer) then { //\u00a0...block }", "docSyntax": "isMultiplayer", "syntax": "isMultiplayer"}, "isNil": {"version": "CMD", "tags": "", "description": "Tests whether a variable is nil or undefined from its identifier, or whether the given expression evaluates to nil or Nothing.", "example": "if (isNil \"TAG_globalVariable\") then { TAG_globalVariable = 0 }; if (isNil \"_localVariable\") then { hint \"_localVariable is nil\" };", "docSyntax": "isNil variableName", "syntax": "isNil variableName"}, "isNull": {"version": "CMD", "tags": "", "description": "Checks whether the tested item is null.", "example": "if (isNull obj) then {hint \"doesn't exist\";};", "docSyntax": "isNull entity", "syntax": "isNull entity"}, "isNumber": {"version": "CMD", "tags": "", "description": "Check if config entry represents number.", "example": "_ok = isNumber (configFile >> \"CfgVehicles\") Result is false", "docSyntax": "isNumber config", "syntax": "isNumber config"}, "isOnRoad": {"version": "CMD", "tags": "", "description": "Checks if given position is inside road segment. Same as roadAt, only return is boolean instead of road object.", "example": "_objOnRoad = isOnRoad player;", "docSyntax": "isOnRoad position", "syntax": "isOnRoad position"}, "isPlayer": {"version": "CMD", "tags": "", "description": "Checks if given person is a player. Returns true for headless clients as well.", "example": "if (isPlayer _Soldier1) then { _soldier1 setDamage 1; };", "docSyntax": "isPlayer unit", "syntax": "isPlayer <objUnit>"}, "isRealTime": {"version": "CMD", "tags": "", "description": "Returns true if the mission editor is operating in real time mode.", "example": "_isRealTime = isRealTime _map", "docSyntax": "isRealTime map", "syntax": "isRealTime <objMap>"}, "isServer": {"version": "CMD", "tags": "", "description": "Returns true if the machine executing the command is the server in a multiplayer game or is running single player. It will return true for both dedicated and player-hosted server. See also Multiplayer Scripting/machines.", "example": "if (!isServer) exitWith {};", "docSyntax": "isServer", "syntax": "isServer"}, "isShowing3DIcons": {"version": "CMD", "tags": "", "description": "Returns true if the editor is set to draw 3D icons.", "example": "-", "docSyntax": "isShowing3DIcons map", "syntax": "isShowing3DIcons <objMap>"}, "isText": {"version": "CMD", "tags": "", "description": "Checks if config entry represents a text value.", "example": "_isText = isText (configFile >> \"CfgVehicles\") //\u00a0false", "docSyntax": "isText config", "syntax": "isText config"}, "isWalking": {"version": "CMD", "tags": "", "description": "Returns true if walk is toggled (default W+S in Arma 3).", "example": "_bool = isWalking player;", "docSyntax": "isWalking unitName", "syntax": "isWalking <objUnit>"}, "items": {"version": "CMD", "tags": "", "description": "Returns an array of names of all unit's stored items, including weapons but excluding magazines (see itemsWithMagazines) and assignedItems.", "example": "_itemsPlayer = items player;", "docSyntax": "items unit", "syntax": "items <objUnit>"}, "join": {"version": "CMD", "tags": "", "description": "Maximum number of", "example": "[_unitOne, _unitTwo] join player;", "docSyntax": "unitArray join group", "syntax": "unitArray join <objGroup>"}, "joinAs": {"version": "CMD", "tags": "", "description": "Joins the unit to the given group, if position id is available, this one is used.", "example": "player joinAs [_group, 4];", "docSyntax": "unit joinAs [group, id]", "syntax": "<objUnit> joinAs [<objGroup>,<scalar>]"}, "joinAsSilent": {"version": "CMD", "tags": "", "description": "Joins the unit to the given group, if position id is available, this one is used. Avoid any radio communication related to joining.", "example": "player joinAsSilent [_group, 4];", "docSyntax": "unit joinAsSilent [group, id]", "syntax": "<objUnit> joinAsSilent [<objGroup>,<scalar>]"}, "joinSilent": {"version": "CMD", "tags": "", "description": "Join all units in the array to given group silently (without radio message). To have a group member leave a group, join him with the grpNull group (e.g. [guy1] joinSilent grpNull), but beware, as brand new group is created for the leaving unit and this could result in the number of groups in a mission growing out of control.", "example": "[_unitOne, _unitTwo] joinSilent (group player);", "docSyntax": "unitArray joinSilent group", "syntax": "unitArray joinSilent <objGroup>"}, "kbAddDatabase": {"version": "CMD", "tags": "", "description": "Register knowledge base database to given person. See Conversations for more details.", "example": "_hasBeenAdded = _unit kbAddDatabase \"chat.txt\"", "docSyntax": "person kbAddDatabase fileName", "syntax": "<objUnit> kbAddDatabase fileName"}, "kbAddDatabaseTargets": {"version": "CMD", "tags": "", "description": "Register target list knowledge base database to given person. See Conversations for more details.", "example": "_hasBeenAdded = _unit kbAddDatabaseTargets \"chat.txt\"", "docSyntax": "person kbAddDatabaseTargets fileName", "syntax": "<objUnit> kbAddDatabaseTargets fileName"}, "kbAddTopic": {"version": "CMD", "tags": "", "description": "Register conversation topic to given person. See Conversations for more details.", "example": "player kbAddTopic [\"myTest\", \"myTest.bikb\", \"myTest.fsm\", compile preprocessFileLineNumbers \"myTest.sqf\"];", "docSyntax": "person kbAddTopic [topicName, conversationFile, fsmFile, eventHandler]", "syntax": "<objUnit> kbAddTopic [topicName,conversationFile,fsmFile,eventHandler]"}, "kbHasTopic": {"version": "CMD", "tags": "", "description": "Check if conversation topic was registered to given person. See Conversations for more details.", "example": "_obiHasTopic = player kbHasTopic \"helloThereGeneralK\";", "docSyntax": "person kbHasTopic topicName", "syntax": "<objUnit> kbHasTopic topicName"}, "kbReact": {"version": "CMD", "tags": "", "description": "Pass a non-verbal communication to the receiver. This command does as if the sentence was said and triggers the reaction scripts (AI FSM or player's conversation EH). See Conversations for more details.", "example": "// will trigger as if unit1 said the sentence (via kbTell) // unit2's FSM will react accordingly. unit1 kbReact [unit2, \"topicName\", \"speech1\"];", "docSyntax": "person kbReact [receiver, topicName, sentenceID(, argumentArray1, argumentArray2, \u2026)]", "syntax": "<objUnit> kbReact [receiver,topicName,sentenceID(,argumentArray1,argumentArray2,\u2026)]"}, "kbRemoveTopic": {"version": "CMD", "tags": "", "description": "Unregister conversation topic from given person. See Conversations for more details.", "example": "_unit1 kbRemoveTopic \"howsTheWeather\";", "docSyntax": "person kbRemoveTopic topicName", "syntax": "<objUnit> kbRemoveTopic topicName"}, "kbTell": {"version": "CMD", "tags": "", "description": "Make the person tell to the receiver the sentence. See Conversations for more details.", "example": "player kbTell [BIS_HQ, \"myTopic\", \"playerSentence1\"];", "docSyntax": "person kbTell [receiver, topicName, sentenceClass, argumentArray1, argumentArray2, (\u2026), forceRadio]", "syntax": "<objUnit> kbTell [receiver,topicName,sentenceClass,argumentArray1,argumentArray2,(\u2026),forceRadio]"}, "kbWasSaid": {"version": "CMD", "tags": "", "description": "Check if given item was said by person to someone. See Conversations for more details.", "example": "player kbWasSaid [otherUnit, \"myTopic\", \"mySentenceID\", 3];", "docSyntax": "person kbWasSaid [receiver, topic, sentenceID, maxAge]", "syntax": "<objUnit> kbWasSaid [receiver,topic,sentenceID,maxAge]"}, "keyImage": {"version": "CMD", "tags": "", "description": "Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code.", "example": "_image = keyImage 28; //\u00a0result is \"Enter\"", "docSyntax": "keyImage dikCode", "syntax": "keyImage dikCode"}, "keyName": {"version": "CMD", "tags": "", "description": "Returns the name of a button with extra quotation marks (on the keyboard, mouse or joystick) with the given code.", "example": "_name = keyName 28; //\u00a0result is \"\"\"Enter\"\"\"", "docSyntax": "keyName dikCode", "syntax": "keyName dikCode"}, "knowsAbout": {"version": "CMD", "tags": "", "description": "Checks if a group or a side knows about target.", "example": "_knowledge = player knowsAbout _target;", "docSyntax": "who knowsAbout target", "syntax": "who knowsAbout <object>"}, "land": {"version": "CMD", "tags": "", "description": "Forces a helicopter landing.", "example": "_cobraOne land \"LAND\";", "docSyntax": "helicopter land mode", "syntax": "helicopter land mode"}, "landAt": {"version": "CMD", "tags": "", "description": "Order an AI airplane to land at a given airport. ID is the number to identify which map airport you want the airplane to land at. See Arma: Airport IDs for more information.", "example": "_plane1 landAt 1;", "docSyntax": "plane landAt ID", "syntax": "plane landAt <scalar>"}, "landResult": {"version": "CMD", "tags": "", "description": "Return the result of helicopter landing position searching (performed, after land command).", "example": "_result = landResult BIS_heli;", "docSyntax": "landResult helicopter", "syntax": "landResult helicopter"}, "laserTarget": {"version": "CMD", "tags": "", "description": "Returns laser target object created by given unit (vehicle or soldier) when using a laser targeting device.", "example": "private _target = laserTarget gunner heli;", "docSyntax": "laserTarget unitName", "syntax": "laserTarget <objUnit>"}, "lbAdd": {"version": "CMD", "tags": "", "description": "Adds an item with the given text to the CT_LISTBOX or CT_COMBO or CT_TOOLBOX.", "example": "_index = lbAdd [101, \"First item\"];", "docSyntax": "lbAdd [idc, text]", "syntax": "lbAdd [<scalar>,<string>]"}, "lbClear": {"version": "CMD", "tags": "", "description": "Clear all items from a CT_LISTBOX or CT_COMBO control.", "example": "lbClear 101;", "docSyntax": "lbClear idc", "syntax": "lbClear <scalar>"}, "lbColor": {"version": "CMD", "tags": "", "description": "Returns the text color of the item with the given index of the CT_LISTBOX or CT_COMBO with IDC of the topmost user dialog.", "example": "_colour = lbColor [101, 0];", "docSyntax": "lbColor [idc, index]", "syntax": "lbColor [<scalar>,<scalar>]"}, "lbColorRight": {"version": "CMD", "tags": "", "description": "Returns the text color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_colour = lbColorRight [101, 0];", "docSyntax": "lbColorRight [idc, index]", "syntax": "lbColorRight [<scalar>,<scalar>]"}, "lbCurSel": {"version": "CMD", "tags": "", "description": "Returns the index of the selected item of the CT_LISTBOX, CT_LISTNBOX, CT_COMBO or CT_TOOLBOX. For CT_LISTBOX with multi selection enabled use lbSelection.", "example": "_index = lbCurSel 101;", "docSyntax": "lbCurSel idc", "syntax": "lbCurSel <scalar>"}, "lbData": {"version": "CMD", "tags": "", "description": "Returns the data set in given index of the CT_LISTBOX or CT_COMBO.", "example": "_data = lbData [101, 0];", "docSyntax": "lbData [idc, index]", "syntax": "lbData [<scalar>,<scalar>]"}, "lbDelete": {"version": "CMD", "tags": "", "description": "Removes the item with the given index from the CT_LISTBOX, CT_COMBO or CT_TOOLBOX.", "example": "lbDelete [101, 0];", "docSyntax": "lbDelete [idc, index]", "syntax": "lbDelete [<scalar>,<scalar>]"}, "lbIsSelected": {"version": "CMD", "tags": "", "description": "Checks whether or not given row of the given listbox is selected.", "example": "_selected = _control lbIsSelected 0;", "docSyntax": "control lbIsSelected index", "syntax": "<uiControl> lbIsSelected <scalar>"}, "lbPicture": {"version": "CMD", "tags": "", "description": "Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_picture = lbPicture [101, 0];", "docSyntax": "lbPicture [idc, index]", "syntax": "lbPicture [<scalar>,<scalar>]"}, "lbPictureRight": {"version": "CMD", "tags": "", "description": "Returns the right picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_picture = lbPictureRight [101, 0];", "docSyntax": "lbPictureRight [idc, index]", "syntax": "lbPictureRight [<scalar>,<scalar>]"}, "lbSelection": {"version": "CMD", "tags": "", "description": "Returns Array of selected rows indices in the given listbox. If listbox is of style LB_MULTI (multi-selection) the array will contain multiple elements, otherwise only a single element. For single selection listbox one can also use lbCurSel. See also lbIsSelected, lbSetSelected", "example": "_indices = lbSelection _control;", "docSyntax": "lbSelection control", "syntax": "lbSelection <uiControl>"}, "lbSetColor": {"version": "CMD", "tags": "", "description": "Sets the color of the item (left) with the given index of the listbox or combobox with id idc of the topmost user Dialog to color.", "example": "lbSetColor [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetColor [idc, index, color]", "syntax": "lbSetColor [<scalar>,<scalar>,<scalar>]"}, "lbSetColorRight": {"version": "CMD", "tags": "", "description": "Sets the color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog to color.", "example": "lbSetColorRight [101, 0, [0, 1, 0, 0.5]];", "docSyntax": "lbSetColorRight [idc, index, color]", "syntax": "lbSetColorRight [<scalar>,<scalar>,<scalar>]"}, "lbSetCurSel": {"version": "CMD", "tags": "", "description": "Selects the item with the given index in the listbox, listnbox, combobox, xcombobox, xlistbox", "example": "lbSetCurSel [101, 0];", "docSyntax": "lbSetCurSel [idc, index]", "syntax": "lbSetCurSel [<scalar>,<scalar>]"}, "lbSetData": {"version": "CMD", "tags": "", "description": "Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given data.", "example": "lbSetData [101, 1, \"#1\"];", "docSyntax": "lbSetData [idc, index, data]", "syntax": "lbSetData [<scalar>,<scalar>,data]"}, "lbSetPicture": {"version": "CMD", "tags": "", "description": "Sets the left picture in the row with given index of CT_LISTBOX or CT_COMBO. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).", "example": "lbSetPicture [101, 0, \"iskoda.paa\"];", "docSyntax": "lbSetPicture [idc, index, path]", "syntax": "lbSetPicture [<scalar>,<scalar>,path]"}, "lbSetPictureRight": {"version": "CMD", "tags": "", "description": "Sets the second (right aligned) picture in the item with the given index of the listbox or combobox with id idc of the topmost user dialog. Name is the picture name. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).", "example": "lbSetPictureRight [101, 0, \"iskoda\"];", "docSyntax": "lbSetPictureRight [idc, index, name]", "syntax": "lbSetPictureRight [<scalar>,<scalar>,<string>]"}, "lbSetSelected": {"version": "CMD", "tags": "", "description": "Sets the selection state of the given row of the given listbox of style LB_MULTI. The command has to be called for every row which is needed to be selected in multi-selection listbox. For single selection listbox use lbSetCurSel instead.", "example": "_control lbSetSelected [0, true];", "docSyntax": "control lbSetSelected [index, selected]", "syntax": "<uiControl> lbSetSelected [<scalar>,selected]"}, "lbSetText": {"version": "CMD", "tags": "", "description": "Sets the text on the left side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "lbSetText [101, 0, \"iskoda\"];", "docSyntax": "lbSetText [idc, index, name]", "syntax": "lbSetText [<scalar>,<scalar>,<string>]"}, "lbSetTextRight": {"version": "CMD", "tags": "", "description": "Sets the text on the right side of the item with the given row index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_control lbSetTextRight [0, \"iskoda\"];", "docSyntax": "control lbSetTextRight [row, name]", "syntax": "<uiControl> lbSetTextRight [<scalar>,<string>]"}, "lbSetValue": {"version": "CMD", "tags": "", "description": "Sets the additional value in the row with the given index of a CT_LISTBOX or CT_COMBO control.", "example": "lbSetValue [101, 0, 1];", "docSyntax": "lbSetValue [idc, index, value]", "syntax": "lbSetValue [<scalar>,<scalar>,<scalar>]"}, "lbSize": {"version": "CMD", "tags": "", "description": "Returns the number of items in a CT_LISTBOX or CT_COMBO control. For CT_TOOLBOX size see lnbSize.", "example": "_size = lbSize 101;", "docSyntax": "lbSize idc", "syntax": "lbSize <scalar>"}, "lbSort": {"version": "CMD", "tags": "", "description": "Sorts listbox entries alphabetically ascending by their lbText.", "example": "lbSort _myControl;", "docSyntax": "lbSort control", "syntax": "lbSort <uiControl>"}, "lbSortByValue": {"version": "CMD", "tags": "", "description": "Sorts the ListBox entries by lbValue. The entries are sorted in ascending order. Also note that this command will mix up the entries randomly if multiple entries have the same value. In Arma 3 use lbSortBy to avoid this problem.", "example": "lbSortByValue _control;", "docSyntax": "lbSortByValue control", "syntax": "lbSortByValue <uiControl>"}, "lbText": {"version": "CMD", "tags": "", "description": "Returns the shown text of the item with the given index of the CT_LISTBOX or CT_COMBO.", "example": "_text = lbText [101, 0];", "docSyntax": "lbText [idc, index]", "syntax": "lbText [<scalar>,<scalar>]"}, "lbTextRight": {"version": "CMD", "tags": "", "description": "Returns the shown right text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.", "example": "_text = lbTextRight [101, 0];", "docSyntax": "lbTextRight [idc, index]", "syntax": "lbTextRight [<scalar>,<scalar>]"}, "lbValue": {"version": "CMD", "tags": "", "description": "Returns the additional integer value of the item with the given index of the CT_LISTBOX or CT_COMBO.", "example": "_value = lbValue [101, 0];", "docSyntax": "lbValue [idc, index]", "syntax": "lbValue [<scalar>,<scalar>]"}, "leader": {"version": "CMD", "tags": "", "description": "Returns the group leader for the given unit or group. For dead units, objNull is returned.", "example": "leader group player == leader player;", "docSyntax": "leader unitOrGroup", "syntax": "leader unitOrGroup"}, "leaveVehicle": {"version": "CMD", "tags": "", "description": "Ceases the using of the vehicle by a group and unassigns vehicle from the group. If the argument is a single unit, the vehicle will be unassigned from unit's group. After vehicle is unassigned from the group, each individual crew member then unassigned from the vehicle.", "example": "_unit leaveVehicle _vehicle", "docSyntax": "group leaveVehicle vehicle", "syntax": "<objGroup> leaveVehicle <objVehicle>"}, "libraryCredits": {"version": "CMD", "tags": "", "description": "Returns the credits for the libraries used by the game.", "example": "hint str libraryCredits; //\u00a0as of Arma 2 OA 1.62.95208 /* [ [ \"Botan\", \"1999-2012 Jack Lloyd, 2001 Peter J Jones, 2004-2007 Justin Karneges, 2004 Vaclav Ovsik, 2005 Matthew Gregan, 2005-2006 Matt Johnston, 2006 Luca Piccarreta, 2007 Yves Jerschow, 2007-2008 FlexSecure GmbH, 2007-2008 Technische Universitat Darmstadt, 2007-2008 Falko Strenzke, 2007-2008 Martin Doering, 2007 Manuel Hartl, 2007 Christoph Ludwig, 2007 Patrick Sona, 2010 Olivier de Gaalon\" ], [ \"rapidjson\", \"2011 Milo Yip\" ], [ \"libcurl\", \"Copyright (c) 1996 - 2012, Daniel Stenberg\" ], [ \"GameSpy\", \"2009 GameSpy Industries, Inc.\" ], [ \"Theora\", \"2002-2009 by the Xiph.Org Foundation http://www.xiph.org/\" ], [ \"OggVorbis\", \"1994-2002 by the Xiph.Org Foundation http://www.xiph.org/\" ], [ \"Intel JPEG Library\", \"1998 Intel Corporation\" ], [ \"Matrix Template Library\", \"2001-2005 The Trustees of Indiana University\" ], [ \"Matrix Template Library\", \"1998-2001 University of Notre Dame\" ], [ \"Speex\", \"2002-2006 Jean-Marc Valin\" ], [ \"LZO Professional\", \"1996-2011 Markus Franz Xaver Johannes Oberhumer\" ], [ \"NVIDIA FXAA by TIMOTHY LOTTES\", \"2010, 2011 NVIDIA CORPORATION\" ], [ \"Jimenez's MLAA\", \"2012 2011 by Jorge Jimenez, Belen Masia, Jose I. Echevarria, Fernando Navarro and Diego Gutierrez\" ] ] */", "docSyntax": "libraryCredits", "syntax": "libraryCredits"}, "libraryDisclaimers": {"version": "CMD", "tags": "", "description": "Returns the library disclaimers.", "example": "hint str libraryDisclaimers; /* returns, in Arma 2:OA 1.62.95208: [\"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"] */", "docSyntax": "libraryDisclaimers", "syntax": "libraryDisclaimers"}, "lifeState": {"version": "CMD", "tags": "", "description": "Returns the life state of the given unit.", "example": "private _lifeState = lifeState player;", "docSyntax": "lifeState unit", "syntax": "lifeState <objUnit>"}, "lightAttachObject": {"version": "CMD", "tags": "", "description": "Attach light to given object at given position on object.", "example": "myLight lightAttachObject [myVehicle, [-0.5,-0.25,1]];", "docSyntax": "light lightAttachObject [object, position]", "syntax": "light lightAttachObject [<object>,position]"}, "lightDetachObject": {"version": "CMD", "tags": "", "description": "Detach light from object.", "example": "lightDetachObject _light", "docSyntax": "lightDetachObject light", "syntax": "lightDetachObject light"}, "lightIsOn": {"version": "CMD", "tags": "", "description": "Check if lampost is on (shining).", "example": "if (lightIsOn nearestObject [player, \"StreetLamp\"] == \"ON\") then { hint \"nightime\"; };", "docSyntax": "lightIsOn lamppost", "syntax": "lightIsOn lamppost"}, "limitSpeed": {"version": "CMD", "tags": "", "description": "Limit speed of given vehicle or person to given value (in km/h).", "example": "// Adjust \"speedLimit\" variable to change limited speed. (A3 1.24 we don't need loop for a continus effect, limitSpeed alone is enough.) _this setVariable [\"speedLimit\", 200]; _nul = _this spawn { while {canMove _this} do { _this limitSpeed (_this getVariable \"speedLimit\"); sleep 0.1; }; };", "docSyntax": "objectName limitSpeed speed", "syntax": "objectName limitSpeed <scalar>"}, "lineBreak": {"version": "CMD", "tags": "", "description": "Creates a structured text containing a line break.", "example": "hint composeText [\"First line\", lineBreak, \"Second line\"];", "docSyntax": "lineBreak", "syntax": "lineBreak"}, "lineIntersects": {"version": "CMD", "tags": "", "description": "Checks for object intersection with a virtual line between two positions.", "example": "private _hasStraightLineToChopper = lineIntersects [eyePos player, aimPos chopper, player, chopper];", "docSyntax": "lineIntersects [begPos, endPos, objIgnore1, objIgnore2]", "syntax": "lineIntersects [begPos,endPos,objIgnore1,objIgnore2]"}, "lineIntersectsWith": {"version": "CMD", "tags": "", "description": "Returns objects intersecting with the virtual line from begPos to endPos. By default, the resulting array of intersecting objects is unsorted (see sortByDistance).", "example": "_objects = lineIntersectsWith [eyePos player, AGLtoASL screenToWorld [0.5,0.5]];", "docSyntax": "lineIntersectsWith [begPos, endPos, objIgnore1, objIgnore2, sortByDistance]", "syntax": "lineIntersectsWith [begPos,endPos,objIgnore1,objIgnore2,sortByDistance]"}, "list": {"version": "CMD", "tags": "", "description": "List of units that would activate given Trigger. It returns nothing before the simulation started, i.e. in (undelayed) init.sqf files. Returns a pointer to the trigger's list after the simulation started.", "example": "_triggerList = list _triggerOne;", "docSyntax": "list trigger", "syntax": "list <objTrigger>"}, "listObjects": {"version": "CMD", "tags": "", "description": "Return the list of all objects of given type.", "example": "-", "docSyntax": "map listObjects type", "syntax": "<objMap> listObjects type"}, "ln": {"version": "CMD", "tags": "", "description": "Returns the natural logarithm of x.", "example": "_nlog = ln 10;", "docSyntax": "ln x", "syntax": "ln x"}, "lnbAddArray": {"version": "CMD", "tags": "", "description": "Adds list of rows of strings.", "example": "lnbAddArray [102,[[[\"#1\"],[1],[\"#1\"]]]];", "docSyntax": "lnbAddArray [idc, [[[text,text],[value,..],[data,..]],[[text,text],[value,..],[data,..]],]]", "syntax": "lnbAddArray [<scalar>,[[[<string>,<string>],[<scalar>,..],[data,..]],[[<string>,<string>],[<scalar>,..],[data,..]],]]"}, "lnbAddColumn": {"version": "CMD", "tags": "", "description": "Adds a column at given position.", "example": "_ctrl lnbAddColumn 0.8;", "docSyntax": "control lnbAddColumn position", "syntax": "<uiControl> lnbAddColumn position"}, "lnbAddRow": {"version": "CMD", "tags": "", "description": "Adds a row of strings.", "example": "lnbAddRow [1, [\"COL1\", \"COL2\"]];", "docSyntax": "lnbAddRow [idc, data]", "syntax": "lnbAddRow [<scalar>,data]"}, "lnbClear": {"version": "CMD", "tags": "", "description": "Clears all items in the given listbox or combobox.", "example": "lnbClear _ctrl;", "docSyntax": "lnbClear idc", "syntax": "lnbClear <scalar>"}, "lnbColor": {"version": "CMD", "tags": "", "description": "Returns the text color of the item with the given position of the 2D listbox. The color is returned in format Color (RGBA).", "example": "_ctrl lnbColor [0,0];", "docSyntax": "lnbColor [idc, [row, column]]", "syntax": "lnbColor [<scalar>,[<scalar>,<scalar>]]"}, "lnbCurSelRow": {"version": "CMD", "tags": "", "description": "Returns the index of the selected row id 2D listbox.", "example": "lnbCurSelRow _ctrl;", "docSyntax": "lnbCurSelRow idc", "syntax": "lnbCurSelRow <scalar>"}, "lnbData": {"version": "CMD", "tags": "", "description": "Returns the additional text (invisible) in an item with the given position of the 2D listbox.", "example": "_ctrl lnbData [lnbCurSelRow _ctrl,0]; //\u00a0\"#1\"", "docSyntax": "lnbData [idc, [row, column]]", "syntax": "lnbData [<scalar>,[<scalar>,<scalar>]]"}, "lnbDeleteColumn": {"version": "CMD", "tags": "", "description": "Removes column with given index from ListNBox control.", "example": "_ctrl lnbDeleteColumn 1;", "docSyntax": "lnbDeleteColumn [idc, index]", "syntax": "lnbDeleteColumn [<scalar>,<scalar>]"}, "lnbDeleteRow": {"version": "CMD", "tags": "", "description": "Removes row with the given index from the given listbox or combobox.", "example": "_ctrl lnbDeleteRow 1;", "docSyntax": "_ctrl lnbDeleteRow row", "syntax": "_ctrl lnbDeleteRow <scalar>"}, "lnbGetColumnsPosition": {"version": "CMD", "tags": "", "description": "Returns relative screen X of ListNBox control columns position [0.1,0.3,0.6...]. Use lnbSetColumnsPos to set positions.", "example": "lnbGetColumnsPosition _ctrl;", "docSyntax": "lnbGetColumnsPosition _ctrl", "syntax": "lnbGetColumnsPosition _ctrl"}, "lnbPicture": {"version": "CMD", "tags": "", "description": "Returns the picture name or path of the item with the given position of the 2D listbox.", "example": "lnbPicture [200, [1, 1]];", "docSyntax": "lnbPicture [idc, [row, column]]", "syntax": "lnbPicture [<scalar>,[<scalar>,<scalar>]]"}, "lnbSetColor": {"version": "CMD", "tags": "", "description": "Sets the color of the item with the given position of the 2D listbox. Color is in format Color (RGBA).", "example": "_ctrl lnbSetColor [[0,0], [1,0,0,1]];", "docSyntax": "lnbSetColor [idc, [row, column], color]", "syntax": "lnbSetColor [<scalar>,[<scalar>,<scalar>],<scalar>]"}, "lnbSetColumnsPos": {"version": "CMD", "tags": "", "description": "Sets relative screen X for ListNBox control columns positions. Setter for lnbGetColumnsPosition.", "example": "lnbSetColumnsPos [101, [0.1,0.5,0.7]];", "docSyntax": "lnbSetColumnsPos [idc, positions]", "syntax": "lnbSetColumnsPos [<scalar>,positions]"}, "lnbSetCurSelRow": {"version": "CMD", "tags": "", "description": "Selects the row with the given index of the 2D listbox.", "example": "disableSerialization; _ctrl = (findDisplay 300) displayCtrl 304; _ctrl lnbSetCurSelRow 1;", "docSyntax": "lnbSetCurSelRow [idc, index]", "syntax": "lnbSetCurSelRow [<scalar>,<scalar>]"}, "lnbSetData": {"version": "CMD", "tags": "", "description": "Sets the additional text (invisible) on the item with the given position of the 2D listbox.", "example": "lnbSetData [123, [0,0],\"#1\"];", "docSyntax": "lnbSetData [idc, [row, column], data]", "syntax": "lnbSetData [<scalar>,[<scalar>,<scalar>],data]"}, "lnbSetPicture": {"version": "CMD", "tags": "", "description": "Sets the picture in the item with the given position of the 2D listbox.The picture is searched in the mission, directory, the dtaExt subdirectory of the campaign directory, and the dtaExt directory and the data bank (or directory).", "example": "lnbSetPicture [1, [0, 0], \"Picture\"];", "docSyntax": "lnbSetPicture [idc, [row, column], picturePathOrName]", "syntax": "lnbSetPicture [<scalar>,[<scalar>,<scalar>],picturePathOrName]"}, "lnbSetText": {"version": "CMD", "tags": "", "description": "Sets the text in the item with the given position of the 2D listbox.", "example": "lnbSetText [101, [0,1], \"#1\"];", "docSyntax": "lnbSetText [idc, [row, column], data]", "syntax": "lnbSetText [<scalar>,[<scalar>,<scalar>],data]"}, "lnbSetValue": {"version": "CMD", "tags": "", "description": "Sets the additional integer value in the item with the position index of the 2D listbox.", "example": "_ctrl lnbSetValue [[0,0],1];", "docSyntax": "lnbSetValue [idc, [row, column], value]", "syntax": "lnbSetValue [<scalar>,[<scalar>,<scalar>],<scalar>]"}, "lnbSize": {"version": "CMD", "tags": "", "description": "Returns size of CT_LISTNBOX. This command supports CT_TOOLBOX control since Arma 3 v2.06. For CT_COMBO or CT_LISTBOX see lbSize.", "example": "lnbSize _control;", "docSyntax": "lnbSize controlOrIDC", "syntax": "lnbSize controlOrIDC"}, "lnbText": {"version": "CMD", "tags": "", "description": "Returns the shown text in the item with the given position of the given 2D listbox.", "example": "_ctrl lnbText [0,0];", "docSyntax": "control lnbText [row,column]", "syntax": "<uiControl> lnbText [<scalar>,<scalar>]"}, "lnbValue": {"version": "CMD", "tags": "", "description": "Returns the additional integer value in the item with the given position of the 2D listbox.", "example": "_ctrl lnbValue [0,0]; //\u00a01, default is 0 if value is String set by lnbSetValue", "docSyntax": "lnbValue [idc, [row, column]]", "syntax": "lnbValue [<scalar>,[<scalar>,<scalar>]]"}, "loadFile": {"version": "CMD", "tags": "", "description": "Returns the content of given files. If you plan to compile said string, be aware that the file should not contain comments or compile will throw an error. If there are comments, use preprocessFile/preprocessFileLineNumbers instead.", "example": "_contents = loadFile \"wantedString.txt\";", "docSyntax": "loadFile fileName", "syntax": "loadFile fileName"}, "loadGame": {"version": "CMD", "tags": "", "description": "Loads game from the last autosave made with saveGame. If no autosave exists, restarts the mission. When used in campaign it will also deduct 1 life, defined in:", "example": "loadGame;", "docSyntax": "loadGame", "syntax": "loadGame"}, "loadIdentity": {"version": "CMD", "tags": "", "description": "Loads person's identity from Objects.sav file in campaign directory (from entry name).", "example": "_ok = player loadIdentity \"playerIdentity\"", "docSyntax": "unit loadIdentity name", "syntax": "<objUnit> loadIdentity <string>"}, "loadMagazine": {"version": "CMD", "tags": "", "description": "Initiates the loading action on given weapon of the turret of a transport. So the new magazine is not available instantly, yet according to the reloadTime.", "example": "vehicle player loadMagazine [[0], \"m256\", \"20Rnd_120mmHE_M1A2\"];", "docSyntax": "transport loadMagazine [turretPath, weaponName, magazineName]", "syntax": "transport loadMagazine [turretPath,weaponName,magazineName]"}, "loadOverlay": {"version": "CMD", "tags": "", "description": "Creates the load overlay dialog for the specified type of overlay.", "example": "-", "docSyntax": "map loadOverlay config", "syntax": "<objMap> loadOverlay config"}, "loadStatus": {"version": "CMD", "tags": "", "description": "Loads object's properties from Objects.sav file in campaign directory (from entry name).", "example": "_ok = player loadStatus \"playerState\";", "docSyntax": "object loadStatus entryName", "syntax": "<object> loadStatus entryName"}, "local": {"version": "CMD", "tags": "", "description": "Check if given unit is local on the computer in multiplayer games - see Multiplayer Scripting - Locality.", "example": "if (not local _unit) then { hint format [\"%1 is remote\", name _unit]; };", "docSyntax": "local object", "syntax": "local <object>"}, "localize": {"version": "CMD", "tags": "", "description": "Used to internationalize text messages. A string is returned from Stringtable.csv (or Stringtable.xml) which corresponds to the stringName.", "example": "hint localize \"STR_WEST\"; //\u00a0Returns \"BLUFOR\"", "docSyntax": "localize stringName", "syntax": "localize stringName"}, "locationPosition": {"version": "CMD", "tags": "", "description": "Returns the position of a location. If the location is attached to an object, that object's position is returned.", "example": "_locationPos = locationPosition myLocation;", "docSyntax": "locationPosition location", "syntax": "locationPosition location"}, "lock": {"version": "CMD", "tags": "", "description": "Lock vehicle (disable mounting / dismounting) for player. This command will remove user get in/get out actions but will not stop player getting into or out of vehicle via script commands (e.g moveInCargo).", "example": "_jeepOne lock true;", "docSyntax": "vehicleName lock locked", "syntax": "vehicleName lock <bool>"}, "lockCargo": {"version": "CMD", "tags": "", "description": "Lock all cargo positions of a vehicle or lock by index. This command will remove user \"get in\" action (not get out) but will also stop player getting into vehicle via script commands (e.g moveInCargo) unlike lock command.", "example": "vehicleName lockCargo true;", "docSyntax": "vehicle lockCargo lock", "syntax": "<objVehicle> lockCargo lock"}, "lockDriver": {"version": "CMD", "tags": "", "description": "Lock the driver position of the vehicle. This command must be executed where vehicle is local. This command will remove user get in action (not get out) but will also stop player getting into vehicle via script commands unlike lock command", "example": "vehicleName lockDriver true;", "docSyntax": "vehicle lockDriver lock", "syntax": "<objVehicle> lockDriver lock"}, "locked": {"version": "CMD", "tags": "", "description": "Check if vehicle is locked. If it is locked, Persons cannot mount / dismount without order.", "example": "_locked = locked _jeepOne;", "docSyntax": "locked vehicle", "syntax": "<bool> <objVehicle>"}, "lockedCargo": {"version": "CMD", "tags": "", "description": "Check whether cargo position of the vehicle is locked.", "example": "_result = vehicleName lockedCargo 0;", "docSyntax": "vehicle lockedCargo cargoIndex", "syntax": "<objVehicle> lockedCargo cargoIndex"}, "lockedDriver": {"version": "CMD", "tags": "", "description": "Check whether driver position of the vehicle turret is locked.", "example": "_driverLocked = lockedDriver vehicle player;", "docSyntax": "lockedDriver vehicle", "syntax": "lockedDriver <objVehicle>"}, "lockedTurret": {"version": "CMD", "tags": "", "description": "Check whether gunner position of the vehicle turret is locked.", "example": "_locked = tank lockedTurret [0];", "docSyntax": "vehicle lockedTurret turretPath", "syntax": "<objVehicle> lockedTurret turretPath"}, "lockTurret": {"version": "CMD", "tags": "", "description": "Lock the gunner position of the vehicle turret. This command will remove user \"get in\" action (not \"get out\") but will also stop player getting into vehicle via script commands unlike lock command.", "example": "vehicleName lockTurret [[0,0], true];", "docSyntax": "vehicle lockTurret [turretPath, lock]", "syntax": "<objVehicle> lockTurret [turretPath,lock]"}, "lockWP": {"version": "CMD", "tags": "", "description": "Disable switching to next waypoint (current waypoint will never complete while lockwp is used). Sometimes used during cut-scenes.", "example": "_groupOne lockWP true;", "docSyntax": "groupName lockWP lock", "syntax": "groupName lockWP lock"}, "log": {"version": "CMD", "tags": "", "description": "Base-10 logarithm of x.", "example": "_log = log 10;", "docSyntax": "log x", "syntax": "log x"}, "lookAt": {"version": "CMD", "tags": "", "description": "Control what the unit(s) is/are looking at (target or Position). If target is used, it will get revealed fully.", "example": "_someSoldier lookAt _otherSoldier", "docSyntax": "unit(s) lookAt position", "syntax": "<objUnit>(s) lookAt position"}, "lookAtPos": {"version": "CMD", "tags": "", "description": "Point the camera and center the map on the position.", "example": "findDisplay 12 lookAtPos [0,0,0];", "docSyntax": "map lookAtPos position", "syntax": "<objMap> lookAtPos position"}, "magazines": {"version": "CMD", "tags": "", "description": "Returns array of type names of all vehicle's magazines. When applied to a unit, the command behaves differently and will omit magazines already loaded into unit's weapons. Use currentMagazine to get this information for a currently loaded magazine.", "example": "_mags = magazines player;", "docSyntax": "magazines vehicle", "syntax": "magazines <objVehicle>"}, "magazinesTurret": {"version": "CMD", "tags": "", "description": "Returns all magazines of given turret. Use turret path [-1] for driver's turret. Alternatively, use magazinesAllTurrets.", "example": "_mags = vehicle player magazinesTurret [0, 0];", "docSyntax": "vehicle magazinesTurret turretPath", "syntax": "<objVehicle> magazinesTurret turretPath"}, "mapAnimAdd": {"version": "CMD", "tags": "", "description": "Add next frame to map animation.", "example": "mapAnimAdd [1, 0.1, markerPos \"anim1\"]; mapAnimCommit;", "docSyntax": "mapAnimAdd [time, zoom, position]", "syntax": "mapAnimAdd [<scalar>,<scalar>,position]"}, "mapAnimClear": {"version": "CMD", "tags": "", "description": "Clear map animation.", "example": "mapAnimClear;", "docSyntax": "mapAnimClear", "syntax": "mapAnimClear"}, "mapAnimCommit": {"version": "CMD", "tags": "", "description": "Play map animation.", "example": "mapAnimCommit;", "docSyntax": "mapAnimCommit", "syntax": "mapAnimCommit"}, "mapAnimDone": {"version": "CMD", "tags": "", "description": "Check if map animation is finished.", "example": "private _isDone = mapAnimDone;", "docSyntax": "mapAnimDone", "syntax": "mapAnimDone"}, "mapCenterOnCamera": {"version": "CMD", "tags": "", "description": "ctrl mapCenterOnCamera enable syntax enables/disables continuous centering of the main map type control on the camera position. Needs to be executed once.", "example": "//\u00a0--- Minimap update ((uiNamespace getVariable \"BIS_UAV_DISPLAY\") displayCtrl 112410) mapCenterOnCamera true;", "docSyntax": "mainmap mapCenterOnCamera enable", "syntax": "mainmap mapCenterOnCamera <bool>"}, "mapGridPosition": {"version": "CMD", "tags": "", "description": "Returns the map grid position of an object or position.", "example": "_gridPos = mapGridPosition player;", "docSyntax": "mapGridPosition param", "syntax": "mapGridPosition param"}, "markerAlpha": {"version": "CMD", "tags": "", "description": "Gets the marker alpha. See setMarkerAlpha.", "example": "AlphaMarker = markerAlpha \"myMarker;", "docSyntax": "markerAlpha markerName", "syntax": "markerAlpha <string>"}, "markerBrush": {"version": "CMD", "tags": "", "description": "Gets the marker brush. See setMarkerBrush.", "example": "if (markerBrush \"Marker1\" == \"Solid\") then {hint \"Marker1 is solid!\"}", "docSyntax": "markerBrush name", "syntax": "markerBrush <string>"}, "markerColor": {"version": "CMD", "tags": "", "description": "Returns marker color for given marker. See also setMarkerColor.", "example": "if (markerColor \"Marker1\" == \"ColorRed\") then { hint \"Marker1 is red!\" };", "docSyntax": "markerColor markerName", "syntax": "markerColor <string>"}, "markerDir": {"version": "CMD", "tags": "", "description": "Get marker direction.", "example": "_mPos = markerDir \"markerOne\"", "docSyntax": "markerDir markerName", "syntax": "markerDir <string>"}, "markerPos": {"version": "CMD", "tags": "", "description": "Returns marker position. See also setMarkerPos.", "example": "_mPos1 = markerPos \"markerOne\";", "docSyntax": "markerPos markerName", "syntax": "markerPos <string>"}, "markerShape": {"version": "CMD", "tags": "", "description": "Returns the shape of given marker.", "example": "if (markerShape \"Marker1\" == \"RECTANGLE\") then {hint \"Marker1 is a rectangle!\"}", "docSyntax": "markerShape name", "syntax": "markerShape <string>"}, "markerSize": {"version": "CMD", "tags": "", "description": "Returns marker size. This command is identical to getMarkerSize.", "example": "_mSize = markerSize \"Marker1\";", "docSyntax": "markerSize markerName", "syntax": "markerSize <string>"}, "markerText": {"version": "CMD", "tags": "", "description": "Get marker text.", "example": "hint format [\"Marker Text: %1\",markerText \"Marker1\"];", "docSyntax": "markerText markerName", "syntax": "markerText <string>"}, "markerType": {"version": "CMD", "tags": "", "description": "Gets type of marker. See CfgMarkers for a list of standard markers.", "example": "if (markerType \"Marker1\" == \"\") then {hint \"Marker1 is not an icon!\"}", "docSyntax": "markerType markerName", "syntax": "markerType <string>"}, "max": {"version": "CMD", "tags": "", "description": "The greater value of a and b.", "example": "3 max 2; //\u00a0Result is 3", "docSyntax": "a max b", "syntax": "a max b"}, "members": {"version": "CMD", "tags": "", "description": "Return a list of members in given team.", "example": "_members = members _team;", "docSyntax": "members team", "syntax": "members team"}, "min": {"version": "CMD", "tags": "", "description": "The smaller of a and b.", "example": "3 min 2 //\u00a0Result is 2", "docSyntax": "a min b", "syntax": "a min b"}, "missionConfigFile": {"version": "CMD", "tags": "", "description": "Return root of mission Description.ext entries hierarchy.", "example": "for \"_i\" from 0 to (count paramsArray - 1) do { missionNamespace setVariable [configName ((missionConfigFile/\"Params\") select _i), paramsArray select _i]; };", "docSyntax": "missionConfigFile", "syntax": "missionConfigFile"}, "missionName": {"version": "CMD", "tags": "", "description": "Return currently loaded mission file (path to mission.pbo, relative to game exe).", "example": "hint format [\"You are playing mission \"\"%1\"\"\", missionName];", "docSyntax": "missionName", "syntax": "missionName"}, "missionNamespace": {"version": "CMD", "tags": "", "description": "Returns the global namespace attached to mission.", "example": "missionNamespace setVariable [\"YourString\",3];//Same as: YourString = 3; _yourString = missionNamespace getVariable \"YourString\";", "docSyntax": "missionNamespace", "syntax": "missionNamespace"}, "missionStart": {"version": "CMD", "tags": "", "description": "Returns date and time when mission started. Because this command returns the time of the actual start of the mission, it might not be available in pre-init or init, but is guaranteed to be available in post-init when time > 0.", "example": "setDate (missionStart select [0,5]);", "docSyntax": "missionStart", "syntax": "missionStart"}, "mod": {"version": "CMD", "tags": "", "description": "Remainder of a divided by b.", "example": "_remaining = 5 mod 2; //\u00a0returns 1, as 5 divided by 2 is 2 \u00d7 2 + 1", "docSyntax": "a mod b", "syntax": "a mod b"}, "modelToWorld": {"version": "CMD", "tags": "", "description": "Translates relative position from object model space to world space in PositionAGL format.", "example": "_aboveAndBehindPlayer = player modelToWorld [0,-1,3];", "docSyntax": "model modelToWorld position", "syntax": "model modelToWorld position"}, "moonIntensity": {"version": "CMD", "tags": "", "description": "Returns the intensity of the moon's brightness in range 0...1.", "example": "_intensity = moonIntensity;", "docSyntax": "moonIntensity", "syntax": "moonIntensity"}, "morale": {"version": "CMD", "tags": "", "description": "Checks a current morale level of the unit (-1..+1).", "example": "morale (leader player);//result is 0.5", "docSyntax": "morale unit", "syntax": "morale <objUnit>"}, "move": {"version": "CMD", "tags": "", "description": "Let group move to given position. Active waypoints will be ignored when command is used.", "example": "_groupOne move position player;", "docSyntax": "group move position", "syntax": "<objGroup> move position"}, "moveInCargo": {"version": "CMD", "tags": "", "description": "Moves a unit into a vehicle cargo position (immediately and without animation).", "example": "_soldierOne moveInCargo _jeepOne;", "docSyntax": "unit moveInCargo vehicle", "syntax": "<objUnit> moveInCargo <objVehicle>"}, "moveInCommander": {"version": "CMD", "tags": "", "description": "Move soldier into vehicle commander position (Immediate, no animation).", "example": "_soldierOne moveInCommander _tankOne", "docSyntax": "unitName moveInCommander vehicle", "syntax": "<objUnit> moveInCommander <objVehicle>"}, "moveInDriver": {"version": "CMD", "tags": "", "description": "Moves soldier into vehicle driver position (immediate, no animation).", "example": "_soldierOne moveInDriver _tankOne", "docSyntax": "unit moveInDriver vehicle", "syntax": "<objUnit> moveInDriver <objVehicle>"}, "moveInGunner": {"version": "CMD", "tags": "", "description": "Move soldier into vehicle gunner position (Immediate, no animation).", "example": "soldierOne moveInGunner tankOne", "docSyntax": "unitName moveInGunner vehicle", "syntax": "<objUnit> moveInGunner <objVehicle>"}, "moveInTurret": {"version": "CMD", "tags": "", "description": "Moves the soldier into the vehicle's turret. (Immediately, without animation). turret path is an array of positions inside a turret, or positions inside a turret of a turret.", "example": "_soldierOne moveInTurret [_tank, [0, 0]];", "docSyntax": "unitName moveInTurret [vehicle, turretPath]", "syntax": "<objUnit> moveInTurret [<objVehicle>,turretPath]"}, "moveObjectToEnd": {"version": "CMD", "tags": "", "description": "Shifts an editor object to the end of the objects array. This means,that the object will be drawn last (after all other objects).", "example": "-", "docSyntax": "map moveObjectToEnd object", "syntax": "<objMap> moveObjectToEnd <object>"}, "moveOut": {"version": "CMD", "tags": "", "description": "Moves the soldier out of the vehicle.", "example": "{if (lifeState _x == \"UNCONSCIOUS\") then { moveOut _x } } forEach crew cursorTarget;", "docSyntax": "moveOut soldier", "syntax": "moveOut soldier"}, "moveTarget": {"version": "CMD", "tags": "", "description": "Change information about a target.", "example": "_moved = _target moveTarget [position player, 1, 1]", "docSyntax": "target moveTarget [position, typeAccuracy, posAccuracy]", "syntax": "<object> moveTarget [position,typeAccuracy,posAccuracy]"}, "moveTime": {"version": "CMD", "tags": "", "description": "Returns the current time of the most important RTM animation currently being played on the soldier.", "example": "moveTime player;", "docSyntax": "moveTime soldier", "syntax": "moveTime soldier"}, "moveTo": {"version": "CMD", "tags": "", "description": "Low level command to person to move to given position.", "example": "_myAgent moveTo getPosATL player;", "docSyntax": "unit moveTo position", "syntax": "<objUnit> moveTo position"}, "moveToCompleted": {"version": "CMD", "tags": "", "description": "Check if latest low level moveTo command is finished.", "example": "_isCompleted = moveToCompleted _unit;", "docSyntax": "moveToCompleted person", "syntax": "moveToCompleted <objUnit>"}, "moveToFailed": {"version": "CMD", "tags": "", "description": "Check if latest low level moveTo command failed.", "example": "private _hasFailed = moveToFailed _unit;", "docSyntax": "moveToFailed unit", "syntax": "moveToFailed <objUnit>"}, "musicVolume": {"version": "CMD", "tags": "", "description": "Returns the current music volume (set by fadeMusic)", "example": "hint str musicVolume;", "docSyntax": "musicVolume", "syntax": "musicVolume"}, "name": {"version": "CMD", "tags": "", "description": "When argument is Object, the command returns the name given to a unit using the setIdentity instruction or selected randomly by the game engine if setIdentity has not been used on the unit. If used on vehicle, name of first crew member (in order commander, driver, gunner). If used on an object, \"Error: No unit\" is being returned.", "example": "_name = name player;", "docSyntax": "name object", "syntax": "<string> <object>"}, "nearEntities": {"version": "CMD", "tags": "", "description": "Finds entities inside a sphere with the given radius. If the alternative syntax is used, only entities of given types or subtypes are listed. Entities returned are not sorted by distance. This command doesn't return dead entities or entities inside vehicles. If you need to return those, use entities command.", "example": "_list = player nearEntities 20; _list = ASLToAGL getPosASL player nearEntities 50; _list = player nearEntities [\"Man\", 1000]; _list = ASLToAGL getPosASL player nearEntities [\"LaserTarget\", 3000]; _list = player nearEntities [[\"Car\", \"Motorcycle\", \"Tank\"], 50]; _list = ASLToAGL getPosASL player nearEntities [[\"Man\", \"Air\", \"Car\", \"Motorcycle\", \"Tank\"], 200];", "docSyntax": "position nearEntities radius", "syntax": "position nearEntities radius"}, "nearestBuilding": {"version": "CMD", "tags": "", "description": "Finds the nearest building to a given object or position. A \"building\" is defined as an object that is of class \"House\" and contains a path LOD.", "example": "_nBuilding = nearestBuilding player;", "docSyntax": "nearestBuilding position", "syntax": "nearestBuilding position"}, "nearestLocation": {"version": "CMD", "tags": "", "description": "Return the closest location of specified class to a given position. Checked range is unlimited (i.e. covers the whole map).", "example": "_nearestCity = nearestLocation [getPos player, \"nameCity\"];", "docSyntax": "nearestLocation [position, locationClass]", "syntax": "nearestLocation [position,locationClass]"}, "nearestLocations": {"version": "CMD", "tags": "", "description": "Returns an array of locations of chosen type(s) within the given radius of the given position, sorted from nearest to farthest.", "example": "_nearbyLocations = nearestLocations [position player, [\"RockArea\", \"VegetationFir\"], 100];", "docSyntax": "nearestLocations [position, [locationType1, locationType2, ...], radius, sortPosition]", "syntax": "nearestLocations [position,[locationType1,locationType2,...],radius,sortPosition]"}, "nearestLocationWithDubbing": {"version": "CMD", "tags": "", "description": "Find the nearest location having a non-empty speech.", "example": "_location = nearestLocationWithDubbing player;", "docSyntax": "nearestLocationWithDubbing position", "syntax": "nearestLocationWithDubbing position"}, "nearestObject": {"version": "CMD", "tags": "", "description": "Returns the nearest object of given type (or inherited classes) to given position within a sphere. Hardcoded radius is 50 meters. Unlike with nearestObjects, where distance is measured in 2D space, nearestObject will be closest object in 3D space.", "example": "_nObject = nearestObject [2345, 6789]; _nObject = nearestObject [player, \"StreetLamp\"];", "docSyntax": "nearestObject [position, type]", "syntax": "nearestObject [position,type]"}, "nearestObjects": {"version": "CMD", "tags": "", "description": "Returns a list of nearest objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered by proximity, the closest one will be first in the array. Alternatively, you can use nearObjects command, which doesn't sort results.", "example": "nearestObjects [player, [\"Car\", \"Tank\"], 200];", "docSyntax": "nearestObjects [position, types, radius, 2Dmode]", "syntax": "nearestObjects [position,types,radius,2Dmode]"}, "nearObjects": {"version": "CMD", "tags": "", "description": "Find objects (Units, Vehicles, Dead, Map Objects) in a sphere with given radius. The first object in the returned array is not necessarily the closest one. If you need returned objects to be sorted by distance, use nearestObjects. If typeName is given, only objects of given type (or its subtype) are listed.", "example": "_list = position player nearObjects 50;", "docSyntax": "position nearObjects radius", "syntax": "position nearObjects radius"}, "nearObjectsReady": {"version": "CMD", "tags": "", "description": "Check whether all data are loaded to nearObjects will return in reasonable time.", "example": "_twnpos nearObjectsReady 500;//from ALICE", "docSyntax": "position nearObjectsReady radius", "syntax": "position nearObjectsReady radius"}, "nearRoads": {"version": "CMD", "tags": "", "description": "Find the road segments within the circle of given radius.", "example": "_list = player nearRoads 50;", "docSyntax": "pos nearRoads radius", "syntax": "<array> nearRoads radius"}, "nearTargets": {"version": "CMD", "tags": "", "description": "Returns a list of targets within the defined range. \"Targets\" are not restricted to enemy units.", "example": "player nearTargets 100;//\u00a0Could return something like this: [[[2555.33,2535.33,1.32708],\"SoldierEB\",EAST,214222,EAST 1-1-A:1],[[2550.39,2482.5,1.32696],\"SoldierWB\",WEST,0,WEST 1-1-A:2]]", "docSyntax": "unit nearTargets range", "syntax": "<objUnit> nearTargets range"}, "needReload": {"version": "CMD", "tags": "", "description": "Return how much vehicle wants to reload its weapons.", "example": "_seriousness = needReload _vehicle;", "docSyntax": "needReload vehicle", "syntax": "needReload <objVehicle>"}, "netId": {"version": "CMD", "tags": "", "description": "Unique ID of object or group. As this command is MP only, you can use BIS_fnc_netId, which extends the use to SP as well. See also: BIS_fnc_objectVar", "example": "_playerNetId = netId player;", "docSyntax": "netId var", "syntax": "netId var"}, "newOverlay": {"version": "CMD", "tags": "", "description": "Creates the new overlay dialog for the specified type of overlay.", "example": "-", "docSyntax": "map newOverlay config", "syntax": "<objMap> newOverlay config"}, "nextMenuItemIndex": {"version": "CMD", "tags": "", "description": "Returns the next available menu item index.", "example": "-", "docSyntax": "nextMenuItemIndex map", "syntax": "nextMenuItemIndex <objMap>"}, "nextWeatherChange": {"version": "CMD", "tags": "", "description": "Return the remaining time (in seconds) over which the current weather change will occur.", "example": "_seconds = nextWeatherChange;", "docSyntax": "nextWeatherChange", "syntax": "nextWeatherChange"}, "nMenuItems": {"version": "CMD", "tags": "", "description": "Returns the total number of user-added menu items belonging to the given menu.", "example": "-", "docSyntax": "map nMenuItems menuName", "syntax": "<objMap> nMenuItems menuName"}, "not": {"version": "CMD", "tags": "", "description": "not a is exactly the same as ! a.", "example": "not false; //\u00a0returns true", "docSyntax": "not a", "syntax": "not a"}, "numberToDate": {"version": "CMD", "tags": "", "description": "Convert float number to a date.", "example": "setDate numberToDate [2008, 0.5324]; //\u00a0sets date to [2008,7,13,7,49]", "docSyntax": "numberToDate [year, time]", "syntax": "numberToDate [year,<scalar>]"}, "objectFromNetId": {"version": "CMD", "tags": "", "description": "Get object with given unique ID. If object is a group use groupFromNetId. As this command is MP only, you can use BIS_fnc_objectFromNetId, which extends the use to SP as well.", "example": "objectFromNetId \"2:3\"", "docSyntax": "objectFromNetId id", "syntax": "objectFromNetId <scalar>"}, "objStatus": {"version": "CMD", "tags": "", "description": "Sets the status of an objective that was defined in briefing.html. Status may be one of:", "example": "\"1\" objStatus \"DONE\" Marks the objective named \"OBJ_1\" as completed.", "docSyntax": "objectivenumber objStatus status", "syntax": "objectivenumber objStatus status"}, "onBriefingGear": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Gear tab is selected in the briefing.", "example": "onBriefingGear \"GearVoiceOver\"", "docSyntax": "onBriefingGear soundName", "syntax": "onBriefingGear <string>"}, "onBriefingGroup": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Group tab is selected in the briefing.", "example": "onBriefingGroup \"GroupVoiceOver\"", "docSyntax": "onBriefingGroup soundName", "syntax": "onBriefingGroup <string>"}, "onBriefingNotes": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Notes tab is selected in the briefing.", "example": "onBriefingNotes \"NotesVoiceOver\";", "docSyntax": "onBriefingNotes soundName", "syntax": "onBriefingNotes <string>"}, "onBriefingPlan": {"version": "CMD", "tags": "", "description": "Select a sound declared in the Description.ext of the mission to be played the first time the Plan tab is selected in the briefing.", "example": "onBriefingPlan \"PlanVoiceOver\"", "docSyntax": "onBriefingPlan soundName", "syntax": "onBriefingPlan <string>"}, "onBriefingTeamSwitch": {"version": "CMD", "tags": "", "description": "Select a sound defined in the CfgSounds of the mission to be played the first time the TeamSwitch tab is selected in the briefing.", "example": "onBriefingTeamSwitch \"TeamSwitchVoiceOver\";", "docSyntax": "onBriefingTeamSwitch soundName", "syntax": "onBriefingTeamSwitch <string>"}, "onCommandModeChanged": {"version": "CMD", "tags": "", "description": "Defines code performed when hc command mode changes either because of (Left Ctrl + Space) shortcut or hcShowBar scripting command. Groups hc mode must contain at least one group for this command to work (see High Command). Attached code receives _isHighCommand boolean.", "example": "//Examples in-use can be found in: //ca\\modules\\HC\\data\\scripts\\HC_GUI.sqf //A3\\modules_f\\HC\\data\\scripts\\HC_GUI.sqf", "docSyntax": "onCommandModeChanged code", "syntax": "onCommandModeChanged <code>"}, "onDoubleClick": {"version": "CMD", "tags": "", "description": "Defines an action performed when the user double clicks on the map. Command receives:,_pos array position,_units array selected units,_shift,_alt bool key state", "example": "-", "docSyntax": "map onDoubleClick command", "syntax": "<objMap> onDoubleClick command"}, "onEachFrame": {"version": "CMD", "tags": "", "description": "Runs given statement every frame.", "example": "onEachFrame { hintSilent str position player}; //\u00a0Hints position every frame", "docSyntax": "onEachFrame statement", "syntax": "onEachFrame statement"}, "onGroupIconClick": {"version": "CMD", "tags": "", "description": "Defines an action performed when player clicked on group marker (3D or in a map). The code executed once. This EH, unlike onGroupIconOverEnter and onGroupIconOverLeave, has one more param which returns 1 if RMB was pressed, 0 otherwise.", "example": "onGroupIconClick { //\u00a0passed values for _this are: params [\"_is3D\", \"_group\", \"_wpID\", \"_posX\", \"_posY\", \"_shift\", \"_ctrl\", \"_alt\"]; //\u00a0before Arma 3 _is3D = _this select 0; _group = _this select 1; _wpID = _this select 2; _RMB = _this select 3; _posx = _this select 4; _posy = _this select 5; _shift = _this select 6; _ctrl = _this select 7; _alt = _this select 8; _message = format [\"____ Info ____\"]; {_message = _message + format [\"\\n %1\",_x]} forEach _this; hint _message; }", "docSyntax": "onGroupIconClick command", "syntax": "onGroupIconClick command"}, "onGroupIconOverEnter": {"version": "CMD", "tags": "", "description": "Defines an action performed when player moves pointer over group marker (3D or in a map). The code will execute continuously while pointer is over icon.", "example": "onGroupIconOverEnter { //\u00a0passed values for _this are: params [\"_is3D\", \"_group\", \"_wpID\", \"_posX\", \"_posY\", \"_shift\", \"_ctrl\", \"_alt\"]; //\u00a0passed values for _this are: _is3D = _this select 0; _group = _this select 1; _wpID = _this select 2; _posx = _this select 3; _posy = _this select 4; _shift = _this select 5; _ctrl = _this select 6; _alt = _this select 7; _message = format [\"____ Info ____\"]; {_message = _message + format [\"\\n %1\",_x]} forEach _this; hint _message; }", "docSyntax": "onGroupIconOverEnter command", "syntax": "onGroupIconOverEnter command"}, "onGroupIconOverLeave": {"version": "CMD", "tags": "", "description": "Defines an action performed when pointer, previously positioned over icon, is moved away from it (3D or in a map). The code is executed once.", "example": "onGroupIconOverLeave { //\u00a0passed values for _this are: params [\"_is3D\", \"_group\", \"_wpID\", \"_posX\", \"_posY\", \"_shift\", \"_ctrl\", \"_alt\"]; //\u00a0before Arma 3 _is3D = _this select 0; _group = _this select 1; _wpID = _this select 2; _posx = _this select 3; _posy = _this select 4; _shift = _this select 5; _ctrl = _this select 6; _alt = _this select 7; _message = format [\"____ Info ____\"]; { _message = _message + format [\"\\n %1\",_x] } forEach _this; hint _message; };", "docSyntax": "onGroupIconOverLeave command", "syntax": "onGroupIconOverLeave command"}, "onHCGroupSelectionChanged": {"version": "CMD", "tags": "", "description": "Defines an action performed when high command group selection has been changed.", "example": "onHCGroupSelectionChanged { if (_isSelected) then { hint format [\"Group %1 has been selected.\", _group]; } else { hint format [\"Group %1 has been deselected.\", _group]; }; };", "docSyntax": "onHCGroupSelectionChanged code", "syntax": "onHCGroupSelectionChanged <code>"}, "onMapSingleClick": {"version": "CMD", "tags": "", "description": "Defines the action performed when user clicks in map by executing command string. The code is executed on every click, until the command is", "example": "Armed Assault: Creates a soldier unit at the position clicked: onMapSingleClick \"'SoldierWB' createUnit [_pos, group player]; true\";", "docSyntax": "onMapSingleClick command", "syntax": "onMapSingleClick command"}, "onPlayerConnected": {"version": "CMD", "tags": "", "description": "This command will execute the provided code on the server whenever a player connects to a multiplayer session.", "example": "onPlayerConnected \"[_id, _name] execVM 'PlayerConnected.sqf';\";", "docSyntax": "onPlayerConnected code", "syntax": "onPlayerConnected <code>"}, "onPlayerDisconnected": {"version": "CMD", "tags": "", "description": "This command will execute attached code whenever a player is leaving an MP session. The code will receive a number of special variables:", "example": "onPlayerDisconnected {diag_log [_id, _uid, _name]};", "docSyntax": "onPlayerDisconnected code", "syntax": "onPlayerDisconnected <code>"}, "onPreloadFinished": {"version": "CMD", "tags": "", "description": "Defines an action performed after the preload screen finished. Preload event occurs after briefing screen on mission start.", "example": "onPreloadFinished {TAG_ReceivingScreenDone = true};", "docSyntax": "onPreloadFinished command", "syntax": "onPreloadFinished command"}, "onPreloadStarted": {"version": "CMD", "tags": "", "description": "Defines an action performed just before the preload screen started. Preload event occurs after briefing screen on mission start.", "example": "onPreloadStarted {diag_log \"preload started\"};", "docSyntax": "onPreloadStarted command", "syntax": "onPreloadStarted command"}, "onShowNewObject": {"version": "CMD", "tags": "", "description": "Defines an action performed when the user right clicks on the map and,selects New Object. Set to empty for default behavior. Command receives:,_pos array position,", "example": "-", "docSyntax": "map onShowNewObject command", "syntax": "<objMap> onShowNewObject command"}, "onTeamSwitch": {"version": "CMD", "tags": "", "description": "Defines an action performed when the team switch is finished. Commandset receives the following special variables: _from object previous unit, _to object current unit. Consecutive use of onTeamSwitch command will overwrite previously set commandset.", "example": "onTeamSwitch { [_from, _to] execVM \"myTeamSwitchScript.sqf\"; };", "docSyntax": "onTeamSwitch commandset", "syntax": "onTeamSwitch commandset"}, "openDSInterface": {"version": "CMD", "tags": "", "description": "Opens MP interface.", "example": "openDSInterface", "docSyntax": "openDSInterface", "syntax": "openDSInterface"}, "openMap": {"version": "CMD", "tags": "", "description": "Opens or closes in-game map.", "example": "openMap true;", "docSyntax": "openMap show", "syntax": "openMap show"}, "or": {"version": "CMD", "tags": "", "description": "Returns true if one or both conditions are true. In case of the alternative syntax, lazy evaluation is used. The means that if left operand is true, evaluation of the right side is skipped completely.", "example": "if (_obj1 or (_enemycount == 0) or (not alive _enemyGeneral)) then { hint \"you win\u00a0!\"; };", "docSyntax": "a or b", "syntax": "a or b"}, "orderGetIn": {"version": "CMD", "tags": "", "description": "Force all units in the array to get in or out of their assigned vehicles. Units must be assigned to a vehicle before this command will do anything.", "example": "[_unitOne, _unitTwo] orderGetIn true", "docSyntax": "unitArray orderGetIn order", "syntax": "unitArray orderGetIn <scalar>"}, "overcast": {"version": "CMD", "tags": "", "description": "Return the current overcast level. Zero is clear skies, one is maximum cloud cover.", "example": "_cloudLevel = overcast;", "docSyntax": "overcast", "syntax": "overcast"}, "overcastForecast": {"version": "CMD", "tags": "", "description": "Return the overcast forecast.", "example": "_forecast = overcastForecast;", "docSyntax": "overcastForecast", "syntax": "overcastForecast"}, "owner": {"version": "CMD", "tags": "", "description": "On server machine, returns the machine network ID of the client to which the object is local. Otherwise returns 0. For use on clients clientOwner command is available. To find out the owner of a Group, use groupOwner.", "example": "_clientID = owner _someobject;", "docSyntax": "owner object", "syntax": "owner <object>"}, "parseNumber": {"version": "CMD", "tags": "", "description": "An SQF equivalent of C++ atof function. Parses the string, interpreting its content as a floating point number.", "example": "_number = parseNumber \"0.125\"; //\u00a00.125", "docSyntax": "parseNumber string", "syntax": "parseNumber <string>"}, "parseText": {"version": "CMD", "tags": "", "description": "Creates a structured text by parsing the given XML description. Do not use parseText when displaying a localized text from Stringtable.xml.", "example": "private _Stxt = parseText \"First line<img image='data\\isniper.paa'/><br/>Second line\";", "docSyntax": "parseText text", "syntax": "parseText <string>"}, "parsingNamespace": {"version": "CMD", "tags": "", "description": "Returns the global namespace attached to config parser.", "example": "parsingNamespace setVariable [\"var1\",101.23124]; _profVar1 = parsingNamespace getVariable \"var1\";", "docSyntax": "parsingNamespace", "syntax": "parsingNamespace"}, "pi": {"version": "CMD", "tags": "", "description": "pi (180 degrees converted to Radians).", "example": "_radians = 2 * pi; //\u00a0Result is 6.2830", "docSyntax": "pi", "syntax": "pi"}, "pickWeaponPool": {"version": "CMD", "tags": "", "description": "Transfers weapons and magazines from cargo of object into the weapon pool. This is used in the campaign to transfer weapons into the next mission.", "example": "pickWeaponPool vehicle player", "docSyntax": "pickWeaponPool object", "syntax": "pickWeaponPool <object>"}, "playableUnits": {"version": "CMD", "tags": "", "description": "Returns a list of playable units in a multiplayer game (occupied by both AI or players), created on the following sides east/opfor, west/blufor, resistance/independent and civilian only. Does not contain units of sideLogic.", "example": "{ _x groupChat \"I'm a playable unit.\"; } forEach playableUnits;", "docSyntax": "playableUnits", "syntax": "playableUnits"}, "playAction": {"version": "CMD", "tags": "", "description": "When used on a person, a smooth transition to the given action will be initiated.", "example": "soldierOne playAction \"SitDown\"", "docSyntax": "soldier playAction action", "syntax": "soldier playAction action"}, "playActionNow": {"version": "CMD", "tags": "", "description": "When used on a person, a smooth transition to the given action will be initiated, but all previous playAction are discarded.", "example": "soldierOne playActionNow \"SitDown\";", "docSyntax": "soldier playActionNow action", "syntax": "soldier playActionNow action"}, "playerRespawnTime": {"version": "CMD", "tags": "", "description": "Return the player's remaining time before respawn, or -1 if it is not available (such as when the player is alive).", "example": "waitUntil {playerRespawnTime <= 0};", "docSyntax": "playerRespawnTime", "syntax": "playerRespawnTime"}, "playerSide": {"version": "CMD", "tags": "", "description": "Returns the player's side. This is valid even when the player controlled person is dead (a difference from side player).", "example": "if (side man1 == playerSide) then { hint \"man1 is on your side!\"; };", "docSyntax": "playerSide", "syntax": "playerSide"}, "playersNumber": {"version": "CMD", "tags": "", "description": "Returns count of occupied role selection slots for given side. Players who claimed a slot in the lobby but did not start the mission are counted as well. If disabledAI = 0; in description.ext or Enable AI option is checked in Eden Editor, AI bots will be treated as valid players and will be counted too.", "example": "_west = playersNumber west; _east = playersNumber east; _civ = playersNumber civilian; hint format [\"West:%1 East:%2, Civ:%3\", _west, _east, _civ];", "docSyntax": "playersNumber side", "syntax": "playersNumber <objSide>"}, "playGesture": {"version": "CMD", "tags": "", "description": "When used on a person,a smooth transition to the given move will be initiated. Command doesn't seem to be functional", "example": "soldierOne playGesture \"Wave\"", "docSyntax": "soldier playGesture moveName", "syntax": "soldier playGesture moveName"}, "playMission": {"version": "CMD", "tags": "", "description": "The mission is launched (from the main menu). Both campaign and mission are given as their directory name. If the campaign is empty, a single mission is launched. If skipBriefing is true, the intro and briefing are skipped.", "example": "playMission [\"XOutrage\",\"x05Negotiator.Noe\"];", "docSyntax": "playMission [campaign, mission, skipBriefing]", "syntax": "playMission [campaign,mission,skipBriefing]"}, "playMove": {"version": "CMD", "tags": "", "description": "When used on a person, smooth transition to given move will be done.", "example": "soldierOne playMove \"Stand\";", "docSyntax": "unitName playMove moveName", "syntax": "<objUnit> playMove moveName"}, "playMoveNow": {"version": "CMD", "tags": "", "description": "When used on a person,a smooth transition to the given move will be initiated, but all previous playMove are discarded.", "example": "player playMoveNow \"AmovPercMevaSlowWrflDf\"", "docSyntax": "soldier playMoveNow moveName", "syntax": "soldier playMoveNow moveName"}, "playMusic": {"version": "CMD", "tags": "", "description": "Plays music defined in Description.ext's CfgMusic or config.cpp. If the musicName could not be found a message is logged into the .rpt file: Music <musicName> not found.", "example": "playMusic \"RadioAmbient1\";", "docSyntax": "playMusic musicName", "syntax": "playMusic musicName"}, "playScriptedMission": {"version": "CMD", "tags": "", "description": "Load the given world, launch an empty mission, and execute the given expression. Config (optional) can reference to the config entry, replacing Description.ext for this mission.", "example": "playScriptedMission [ \"desert_e\", { execVM \"\\ca\\missions_e\\data\\scenes\\credits1\\init.sqf\"; }, configFile / \"CfgMissions\" / \"Cutscenes\" / \"Credits\" ];", "docSyntax": "playScriptedMission [world, expression, config, ignoreChildWindow]", "syntax": "playScriptedMission [world,expression,config,ignoreChildWindow]"}, "playSound": {"version": "CMD", "tags": "", "description": "Plays a sound from CfgSounds. Sound can be defined in missionConfigFile, configFile or campaignConfigFile.", "example": "playSound \"soundname\"", "docSyntax": "playSound soundName", "syntax": "playSound <string>"}, "position": {"version": "CMD", "tags": "", "description": "Returns position of an object (alias of getPos) or location (alias of locationPosition).", "example": "private _pos = position player;", "docSyntax": "position object", "syntax": "position <object>"}, "positionCameraToWorld": {"version": "CMD", "tags": "", "description": "Transforms position from camera coordinate space to world coordinate space. Camera axes are relative to camera orientation. x axis goes from left of the camera to right of the camera, z axis goes from underneath the camera to above the camera and y axis goes from back of the camera to where the camera is looking.", "example": "_worldPos = positionCameraToWorld _cameraPos;", "docSyntax": "positionCameraToWorld cameraPos", "syntax": "positionCameraToWorld cameraPos"}, "posScreenToWorld": {"version": "CMD", "tags": "", "description": "Converts map screen coordinates into world coordinates. Unlike ctrlMapScreenToWorld, this command returns world position is format [x, y, 0], otherwise it is identical to it.", "example": "_worldCoord = _control posScreenToWorld _ScreenCoord;", "docSyntax": "map posScreenToWorld [x, y]", "syntax": "<objMap> posScreenToWorld [x,y]"}, "posWorldToScreen": {"version": "CMD", "tags": "", "description": "Converts world coordinates into map screen coordinates. This command is identical to ctrlMapWorldToScreen.", "example": "_screenCoord = _control posWorldToScreen _worldCoord;", "docSyntax": "map posWorldToScreen position", "syntax": "<objMap> posWorldToScreen position"}, "ppEffectAdjust": {"version": "CMD", "tags": "", "description": "Set post process effect parameters.", "example": "\"colorCorrections\" ppEffectAdjust [1, 1, -0.01, [0, 0, 0, 0], [1.5, 1, 1.2, 0.6], [0.199, 0.587, 0.114, 0]];", "docSyntax": "effect ppEffectAdjust settings", "syntax": "effect ppEffectAdjust settings"}, "ppEffectCommit": {"version": "CMD", "tags": "", "description": "Commit post process effect in given time.", "example": "\"colorCorrection\" ppEffectCommit 3;", "docSyntax": "effect ppEffectCommit commit", "syntax": "effect ppEffectCommit commit"}, "ppEffectCommitted": {"version": "CMD", "tags": "", "description": "Check whether given post process effect is committed.", "example": "ppEffectCommitted \"colorCorrection\";", "docSyntax": "ppEffectCommitted effect", "syntax": "ppEffectCommitted effect"}, "ppEffectCreate": {"version": "CMD", "tags": "", "description": "Creates Post process effects specified by effect name and priority.", "example": "_ppGrain = ppEffectCreate [\"filmGrain\", 2005];", "docSyntax": "ppEffectCreate [name, priority]", "syntax": "ppEffectCreate [<string>,priority]"}, "ppEffectDestroy": {"version": "CMD", "tags": "", "description": "Destroy Post process effects given by handle or array of handles.", "example": "ppEffectDestroy _hndl;", "docSyntax": "ppEffectDestroy effect", "syntax": "ppEffectDestroy effect"}, "ppEffectEnable": {"version": "CMD", "tags": "", "description": "Enable / disable Post process effects", "example": "\"colorCorrections\" ppEffectEnable true;", "docSyntax": "effect ppEffectEnable enable", "syntax": "effect ppEffectEnable <bool>"}, "precision": {"version": "CMD", "tags": "", "description": "Return the movement precision of the given entity, how is the entity able to be precise when moving to given target.", "example": "// used in formationCDanger.fsm if (getPosATL _this distance _dangerPos <= precision _this) then { /* ... */ };", "docSyntax": "precision entity", "syntax": "precision entity"}, "preloadCamera": {"version": "CMD", "tags": "", "description": "Preload all textures and models around given Position to avoid visual artifacts after camera is moved. Should be used before any abrupt camera change/cut. Returns true once all data is ready. See camPreload for alternative, more flexible camera preloading.", "example": "waitUntil {preloadCamera markerPos \"cam_location_2\"};", "docSyntax": "preloadCamera position", "syntax": "preloadCamera position"}, "preloadObject": {"version": "CMD", "tags": "", "description": "Preloads all textures, materials and proxies needed to render given object. Works with objects and classnames - note that classnames require an object instance in the mission.", "example": "[] spawn { waitUntil { 10 preloadObject \"SoldierW\" }; hint \"Preload finished\"; };", "docSyntax": "distance preloadObject object", "syntax": "<scalar> preloadObject <object>"}, "preloadSound": {"version": "CMD", "tags": "", "description": "Makes sure that a sound can start playing without any delay once it is needed. Command works in Arma 3, but might not be implemented in earlier Arma installments.", "example": "{ waitUntil {preloadSound _x}; } forEach getArray (missionConfigFile >> \"CfgSounds\" >> \"sounds\");", "docSyntax": "preloadSound soundName", "syntax": "preloadSound <string>"}, "preloadTitleObj": {"version": "CMD", "tags": "", "description": "Preloads data for the given resource object.", "example": "_ok = preloadTitleObj [\"BISLogo\", \"PLAIN\"]", "docSyntax": "preloadTitleObj [name, type, speed, showInMap]", "syntax": "preloadTitleObj [<string>,type,<scalar>,showInMap]"}, "preloadTitleRsc": {"version": "CMD", "tags": "", "description": "Resource title - preload data. The resource can be defined in the Description.ext file.", "example": "_ok = preloadTitleRsc [\"BIS\", \"PLAIN\"]", "docSyntax": "preloadTitleRsc [name, type, speed, showInMap]", "syntax": "preloadTitleRsc [<string>,type,<scalar>,showInMap]"}, "preprocessFile": {"version": "CMD", "tags": "", "description": "Reads and processes the content of the specified file. Preprocessor is C-like, supports comments using // or /* and */ and PreProcessor Commands. Due to the hard-drive access this command executes and the lack of caching this command should not be used in time-critical script loops.", "example": "_content = preprocessFile \"myFunction.sqf\";", "docSyntax": "preprocessFile fileName", "syntax": "preprocessFile fileName"}, "preprocessFileLineNumbers": {"version": "CMD", "tags": "", "description": "Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using /* */ and PreProcessor Commands. The preprocessor also adds a default debug entrypoint for compiler at the begining of script: #line 1 \"aFilename\"", "example": "_string = preprocessFileLineNumbers \"A3\\ui_f\\scripts\\IGUI\\RscUnitInfo.sqf\"", "docSyntax": "preprocessFileLineNumbers fileName", "syntax": "preprocessFileLineNumbers fileName"}, "primaryWeapon": {"version": "CMD", "tags": "", "description": "Returns name of unit's primary weapon. This command will also return a weapon class name if the weapon is not used by the player, for example, it is on the unit's back. Use currentWeapon to get the weapon the unit is using.", "example": "_pWeap = primaryWeapon player;", "docSyntax": "primaryWeapon unit", "syntax": "primaryWeapon <objUnit>"}, "priority": {"version": "CMD", "tags": "", "description": "Return the priority of the task.", "example": "_prioTsk01 = priority task01", "docSyntax": "priority task", "syntax": "priority <objTask>"}, "processDiaryLink": {"version": "CMD", "tags": "", "description": "Opens the Diary screen on the subject/record specified by link. To get a valid link format, use createDiaryLink.", "example": "processDiaryLink createDiaryLink [\"Tasks\", (simpleTasks player) select 0, \"\"]; //\u00a0Select a task in the Task menu", "docSyntax": "processDiaryLink link", "syntax": "processDiaryLink link"}, "processInitCommands": {"version": "CMD", "tags": "", "description": "Process statements stored using setVehicleInit. The statements will only be executed once even if processInitCommands is called multiple times.", "example": "processInitCommands;", "docSyntax": "processInitCommands", "syntax": "processInitCommands"}, "productVersion": {"version": "CMD", "tags": "", "description": "Returns the product's friendly name, identifier, version and build number.", "example": "hint str productVersion; //\u00a0would return [\"Arma 2 OA\", \"arma2oa\", 162, 95208] on Arma 2 OA 1.62.95208", "docSyntax": "productVersion", "syntax": "productVersion"}, "profileNamespace": {"version": "CMD", "tags": "", "description": "Returns the global namespace attached to the active user profile. Use setVariable and getVariable to save and load data to and from this Namespace. A variable can be deleted by setting its value to nil. By default the variables set in this namespace will exist while the game is running, and variables are saved persistently when the game is closed. Saving can also be forced by using saveProfileNamespace to prevent data loss on e.g game crash.", "example": "profileNamespace setVariable [\"TAG_kills\", 10000]; //\u00a0somewhere else in the code _kills = profileNamespace getVariable [\"TAG_kills\", 0];", "docSyntax": "profileNamespace", "syntax": "profileNamespace"}, "progressLoadingScreen": {"version": "CMD", "tags": "", "description": "If loading screen is shown, sets progress bar to the given value (interval is from 0 to 1])", "example": "startLoadingScreen [\"Loading My Mission\"]; //\u00a0 //\u00a0batch of code //\u00a0 progressLoadingScreen 0.25; //\u00a0 //\u00a0batch of code //\u00a0 progressLoadingScreen 0.50; //\u00a0 //\u00a0batch of code //\u00a0 progressLoadingScreen 0.95; //\u00a0 //\u00a0batch of code //\u00a0 endLoadingScreen;", "docSyntax": "progressLoadingScreen progress", "syntax": "progressLoadingScreen progress"}, "progressPosition": {"version": "CMD", "tags": "", "description": "Returns the current position in the progress bar.", "example": "_progress = progressPosition _control;", "docSyntax": "progressPosition control", "syntax": "progressPosition <uiControl>"}, "progressSetPosition": {"version": "CMD", "tags": "", "description": "Sets progress position of a progress bar.", "example": "_control progressSetPosition 0.5;", "docSyntax": "control progressSetPosition progress", "syntax": "<uiControl> progressSetPosition progress"}, "publicVariable": {"version": "CMD", "tags": "", "description": "Reliably broadcasts missionNamespace variable and its current value to all computers (server/client).", "example": "TAG_MyPublicVariable = 0; TAG_MyPublicVariable = 1; publicVariable \"TAG_MyPublicVariable\"; //\u00a0other clients will receive the \"TAG_MyPublicVariable\" variable with a 1 value TAG_MyPublicVariable = 2; //\u00a0needs to be broadcast again - synchronisation is not automatic", "docSyntax": "publicVariable varName", "syntax": "publicVariable varName"}, "publicVariableClient": {"version": "CMD", "tags": "", "description": "Send the variable value to the client computer - same limitations regarding variable type as publicVariable. The Client ID is the temporary ID given to a connected client for that session. You can find out this ID with the owner command (using it on a player's character, for example, will give you that players client ID).", "example": "3 publicVariableClient \"CTFscoreOne\";", "docSyntax": "clientID publicVariableClient varName", "syntax": "clientID publicVariableClient varName"}, "publicVariableServer": {"version": "CMD", "tags": "", "description": "Send the variable value to the server - same limitations regarding variable type as publicVariable.", "example": "publicVariableServer \"CTFscoreOne\";", "docSyntax": "publicVariableServer varName", "syntax": "publicVariableServer varName"}, "putWeaponPool": {"version": "CMD", "tags": "", "description": "Transfers weapons and magazines from weapon pool into cargo of given object. Used in campaign to transfer weapons into next mission.", "example": "putWeaponPool player;", "docSyntax": "putWeaponPool object", "syntax": "putWeaponPool <object>"}, "queryMagazinePool": {"version": "CMD", "tags": "", "description": "Return number of magazines of type name in magazine pool (used in campaign to transfer magazines into next mission).", "example": "_num = queryMagazinePool \"M16\";", "docSyntax": "queryMagazinePool name", "syntax": "queryMagazinePool <string>"}, "queryWeaponPool": {"version": "CMD", "tags": "", "description": "Return number of weapons of type name in weapon pool (used in campaign to transfer weapons into next mission).", "example": "_num = queryWeaponPool \"M16\"", "docSyntax": "queryWeaponPool name", "syntax": "queryWeaponPool <string>"}, "rad": {"version": "CMD", "tags": "", "description": "Converts given value in degrees to radians. 1 radian equals 180 degrees divided by pi.", "example": "_radians = rad 180; //\u00a0returns 3.1415 (pi)", "docSyntax": "rad value", "syntax": "rad <scalar>"}, "radioVolume": {"version": "CMD", "tags": "", "description": "Returns the current radio volume (set by fadeRadio).", "example": "hint str radioVolume;", "docSyntax": "radioVolume", "syntax": "radioVolume"}, "rain": {"version": "CMD", "tags": "", "description": "Returns the current value of rain density in range 0..1", "example": "_rainLevel = rain;", "docSyntax": "rain", "syntax": "rain"}, "random": {"version": "CMD", "tags": "", "description": "Syntax\u00a02's distribution", "example": "_rNumber = random 1;", "docSyntax": "random x", "syntax": "random x"}, "rank": {"version": "CMD", "tags": "", "description": "Returns the rank of the given unit. Rank can be one of the following:", "example": "_rank = rank player;", "docSyntax": "rank unit", "syntax": "rank <objUnit>"}, "rankId": {"version": "CMD", "tags": "", "description": "Return the rank of the given unit for comparison. Value may be:", "example": "_myIdRank = rankId player;", "docSyntax": "rankId unit", "syntax": "rankId <objUnit>"}, "rating": {"version": "CMD", "tags": "", "description": "Check unit rating. Rating is increased for killing enemies, decreased for killing friendlies (see Rating Values). Can be changed via addRating by the mission designer. The rating of the player is displayed as the \"score\" at the end of the mission. Via Description.ext one can define how many points it takes to get a perfect score, as well as the number of stars.", "example": "_score = rating player", "docSyntax": "rating unitName", "syntax": "rating <objUnit>"}, "rectangular": {"version": "CMD", "tags": "", "description": "Checks if a location is rectangular (returns true) or elliptical (returns false).", "example": "_isRect = rectangular myLocation;", "docSyntax": "rectangular location", "syntax": "rectangular location"}, "registeredTasks": {"version": "CMD", "tags": "", "description": "Returns array with all registered task types for the given agent. The values are the names set in CfgTasks classes name property. The same names are used for unregisterTask", "example": "tasklist = registeredTasks teamMember _agent;", "docSyntax": "registeredTasks teamMember", "syntax": "registeredTasks teamMember"}, "registerTask": {"version": "CMD", "tags": "", "description": "Registers a new task type. Parameters are defined in the given config class (subclass of CfgTasks)", "example": "teamMember _agent registerTask \"MyTask\";", "docSyntax": "teamMember registerTask entryName", "syntax": "teamMember registerTask entryName"}, "reload": {"version": "CMD", "tags": "", "description": "Old syntax: Reload first found muzzle that needs reloading (with some inconsistencies).", "example": "if (needReload player == 1) then { reload player };", "docSyntax": "reload unitName", "syntax": "reload <objUnit>"}, "reloadEnabled": {"version": "CMD", "tags": "", "description": "Check whether magazine is reloaded whenever emptied.", "example": "private _canReload = reloadEnabled _unit1;", "docSyntax": "reloadEnabled unitName", "syntax": "reloadEnabled <objUnit>"}, "remoteControl": {"version": "CMD", "tags": "", "description": "Switches on remote control of the unit. Command needs to be executed locally to the player. If driver is remote it will get transferred to players PC.", "example": "Set player remote control of driver:", "docSyntax": "who remoteControl whom", "syntax": "who remoteControl whom"}, "removeAction": {"version": "CMD", "tags": "", "description": "Removes user added action with given ID. This only removes actions added with the addAction command. You cannot remove default game actions, such as reload.", "example": "player removeAction 0;", "docSyntax": "unit removeAction actionID", "syntax": "<objUnit> removeAction actionID"}, "removeAllEventHandlers": {"version": "CMD", "tags": "", "description": "Removes all event handlers of given type that were added by addEventHandler and resets event handler's creation index to 0.", "example": "player removeAllEventHandlers \"Killed\";", "docSyntax": "object removeAllEventHandlers handlerType", "syntax": "<object> removeAllEventHandlers handlerType"}, "removeAllItems": {"version": "CMD", "tags": "", "description": "Removes all special items from the unit.", "example": "removeAllItems unitName;", "docSyntax": "removeAllItems unit", "syntax": "removeAllItems <objUnit>"}, "removeAllMPEventHandlers": {"version": "CMD", "tags": "", "description": "Removes all MP event handlers of the given type which were added by addMPEventHandler. Command needs to be executed only on one PC for MP event handler to be removed globally.", "example": "player removeAllMPEventHandlers \"mpkilled\";", "docSyntax": "objectName removeAllMPEventHandlers event", "syntax": "objectName removeAllMPEventHandlers event"}, "removeAllWeapons": {"version": "CMD", "tags": "", "description": "Removes all weapons and magazines from the given unit. Does not remove items like map, compass, radio (see removeWeapon for this).", "example": "removeAllWeapons player;", "docSyntax": "removeAllWeapons unitName", "syntax": "removeAllWeapons <objUnit>"}, "removeBackpack": {"version": "CMD", "tags": "", "description": "Removes unit's backpack", "example": "removeBackpack this;", "docSyntax": "removeBackpack unit", "syntax": "removeBackpack <objUnit>"}, "removeDrawIcon": {"version": "CMD", "tags": "", "description": "Removes an icon for an editor object.", "example": "-", "docSyntax": "map removeDrawIcon [object,string identifier]", "syntax": "<objMap> removeDrawIcon [<object>,<string> identifier]"}, "removeDrawLinks": {"version": "CMD", "tags": "", "description": "Remove all drawn links for the given editor object for the given editor,object type. Pass an empty string as param type to remove all draw,links for an object.", "example": "-", "docSyntax": "map removeDrawLinks [from,param type]", "syntax": "<objMap> removeDrawLinks [from,param type]"}, "removeEventHandler": {"version": "CMD", "tags": "", "description": "Removes a given Event Handler that was added with addEventHandler.", "example": "player removeEventHandler [\"Killed\", 0];", "docSyntax": "object removeEventHandler [type, index]", "syntax": "<object> removeEventHandler [type,<scalar>]"}, "removeGroupIcon": {"version": "CMD", "tags": "", "description": "Remove icon with given ID from group.", "example": "_target removeGroupIcon (_target getvariable \"hc_attackicon\");", "docSyntax": "group removeGroupIcon iconID", "syntax": "<objGroup> removeGroupIcon iconID"}, "removeMagazine": {"version": "CMD", "tags": "", "description": "Remove magazine from the unit.", "example": "player removeMagazine \"M16\"", "docSyntax": "unitName removeMagazine magazineName", "syntax": "<objUnit> removeMagazine magazineName"}, "removeMagazines": {"version": "CMD", "tags": "", "description": "Removes all magazines of given type from the unit. If magazine class does not exist, nothing happens, not even .rpt message, unlike with addMagazine command.", "example": "player removeMagazines \"30Rnd_556x45_Stanag\";", "docSyntax": "unitName removeMagazines magazineName", "syntax": "<objUnit> removeMagazines magazineName"}, "removeMagazinesTurret": {"version": "CMD", "tags": "", "description": "Removes all magazines of the given type from given vehicle. Use turret path [-1] for driver's turret.", "example": "vehicle player removeMagazinesTurret [\"60rnd_cmflaremagazine\",[-1]]", "docSyntax": "vehicle removeMagazinesTurret [magazineName, turretPath]", "syntax": "<objVehicle> removeMagazinesTurret [magazineName,turretPath]"}, "removeMagazineTurret": {"version": "CMD", "tags": "", "description": "Removes the magazine from the turret. Use turret path [-1] for driver's turret. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined.", "example": "vehicle player removeMagazineTurret [\"60rnd_cmflaremagazine\",[-1]]", "docSyntax": "vehicle removeMagazineTurret [magazineName, turretPath]", "syntax": "<objVehicle> removeMagazineTurret [magazineName,turretPath]"}, "removeMenuItem": {"version": "CMD", "tags": "", "description": "Removes a previously added menu item.", "example": "-", "docSyntax": "map removeMenuItem index", "syntax": "<objMap> removeMenuItem <scalar>"}, "removeMPEventHandler": {"version": "CMD", "tags": "", "description": "Removes MP event handler added by addMPEventHandler.", "example": "player removeMPEventHandler [\"MPKilled\", 0];", "docSyntax": "unitName removeMPEventHandler [event, index]", "syntax": "<objUnit> removeMPEventHandler [event,<scalar>]"}, "removeSimpleTask": {"version": "CMD", "tags": "", "description": "Remove a simple task from the list of simple tasks.", "example": "player removeSimpleTask _tskKillSpongebob", "docSyntax": "person removeSimpleTask task", "syntax": "<objUnit> removeSimpleTask <objTask>"}, "removeSwitchableUnit": {"version": "CMD", "tags": "", "description": "Remove a unit from the list of units available for Team Switch.", "example": "removeSwitchableUnit _unit1;", "docSyntax": "removeSwitchableUnit unitName", "syntax": "removeSwitchableUnit <objUnit>"}, "removeTeamMember": {"version": "CMD", "tags": "", "description": "Remove given member from given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.", "example": "_team removeTeamMember _teamMember;", "docSyntax": "team removeTeamMember member", "syntax": "team removeTeamMember <objUnit>"}, "removeWeapon": {"version": "CMD", "tags": "", "description": "Remove weapon from a unit. The unit must be local to the computer where command is executed. For a global version of this command see removeWeaponGlobal. Note: It is possible to create invalid combinations with this command (ie, attempting to remove a weapon that a unit does not possess). When doing so, application behaviour is undefined.", "example": "player removeWeapon \"BAF_L85A2_RIS_SUSAT\";", "docSyntax": "unit removeWeapon weapon", "syntax": "<objUnit> removeWeapon <string>"}, "removeWeaponTurret": {"version": "CMD", "tags": "", "description": "Removes weapon from the turret. Use turret path [-1] for driver's turret.", "example": "_tank removeWeaponTurret [\"LMG_M200\", [0,0]];", "docSyntax": "vehicle removeWeaponTurret [weaponName, turretPath]", "syntax": "<objVehicle> removeWeaponTurret [weaponName,turretPath]"}, "requiredVersion": {"version": "CMD", "tags": "", "description": "Check if version of application is available. If the current version is older than the required one, a warning message is shown and false is returned.", "example": "if\u00a0!(requiredVersion \"1.09\") exitWith {};", "docSyntax": "requiredVersion version", "syntax": "requiredVersion version"}, "resetCamShake": {"version": "CMD", "tags": "", "description": "Stops any ongoing camera shake effects. Does not prevent new effects from being created. To disallow new effects altogether, enableCamShake should be used.", "example": "resetCamShake;", "docSyntax": "resetCamShake", "syntax": "resetCamShake"}, "resize": {"version": "CMD", "tags": "", "description": "Changes the size of the given array. The command does not return new array, it resizes the source array to the desired number of elements. If the new size is bigger than the current size, the new places are filled with nil.", "example": "_arrayNum = [0,1,2,3,4]; _arrayNum resize 2; //\u00a0_arrayNum is now [0,1] _arrayNum resize 5; //\u00a0_arrayNum is now [0,1,nil,nil,nil]", "docSyntax": "array resize count", "syntax": "<array> resize count"}, "resources": {"version": "CMD", "tags": "", "description": "Returns the resources of a team member. Results are local to the PC on which command was executed.", "example": "resources teamMember _unit;", "docSyntax": "resources member", "syntax": "resources <objUnit>"}, "respawnVehicle": {"version": "CMD", "tags": "", "description": "Sets vehicle as respawnable in MP game. The vehicle will be spawned at the locality and coordinates it was prior to destruction. If respawn type is set to base respawn (type 3) and vehicle respawn marker is provided (respawn_vehicle_XXXSIDEXXX), vehicle will spawn on the marker.", "example": "car respawnVehicle [5, 3]; //\u00a0'car' will respawn at the predefined marker for the side after 5 seconds. The unit will respawn 3 times.", "docSyntax": "vehicle respawnVehicle [delay, count]", "syntax": "<objVehicle> respawnVehicle [<scalar>,count]"}, "restartEditorCamera": {"version": "CMD", "tags": "", "description": "Restarts the mission editor camera (if it was deleted by a script,for example).", "example": "-", "docSyntax": "restartEditorCamera map", "syntax": "restartEditorCamera <objMap>"}, "reveal": {"version": "CMD", "tags": "", "description": "Reveals a target to a group. If toWhom is a unit, unit's group is considered. If toWhom is a vehicle, vehicle commander's group is considered. The knowledge value will be set to the highest level any unit of the revealing side has about the revealed target. If the revealing side has no knowledge about the revealed target, the value will be set to 1.", "example": "_soldierOne reveal _soldierTwo; //\u00a0soldierOne knowsAbout information about soldierTwo is updated", "docSyntax": "toWhom reveal target", "syntax": "toWhom reveal <object>"}, "reversedMouseY": {"version": "CMD", "tags": "", "description": "Returns true if mouse vertical axe is inverted.", "example": "if (reversedMouseY) then { hint \"Dude!\" };", "docSyntax": "reversedMouseY", "syntax": "reversedMouseY"}, "roadsConnectedTo": {"version": "CMD", "tags": "", "description": "Find the road segments connected to the given road segment.", "example": "_road = (player nearRoads 50) select 0; _connectedRoads = roadsConnectedTo _road;", "docSyntax": "roadsConnectedTo roadSegment", "syntax": "roadsConnectedTo roadSegment"}, "round": {"version": "CMD", "tags": "", "description": "Rounds the provided value to the closest integer.", "example": "round 5.25; //\u00a0returns 5", "docSyntax": "round value", "syntax": "round <scalar>"}, "runInitScript": {"version": "CMD", "tags": "", "description": "Fades in mission screen and re-executes init.sqf and init.sqs scripts. In Eden Editor the code inside the \"Init\" mission attribute is executed.", "example": "runInitScript;", "docSyntax": "runInitScript", "syntax": "runInitScript"}, "safeZoneH": {"version": "CMD", "tags": "", "description": "Returns the height of the screen in screen measurement units. Taken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the Y axis, the value will be positive but resulting Y will end up beyond the bottom border. Therefore in order to calculate Y of the bottom screen border, the length of safeZoneY must be subtracted from safeZoneH, but because it is negative, it must be added instead. _screenBottomBorderY = safeZoneH + safeZoneY. The measurement units depend on the current screen resolution getResolution. See also SafeZone", "example": "_screenHeight = safeZoneH;", "docSyntax": "safeZoneH", "syntax": "safeZoneH"}, "safeZoneW": {"version": "CMD", "tags": "", "description": "Returns the width of the screen in screen measurement units. Taken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the X axis, the value will be positive but resulting X will end up beyond the right border. Therefore in order to calculate X of the right screen border, the length of safeZoneX must be subtracted from safeZoneW, but because it is negative, it must be added instead. _screenRightBorderX = safeZoneW + safeZoneX. The measurement units depend on the current screen resolution getResolution. See also SafeZone", "example": "_screenWidth = safeZoneW;", "docSyntax": "safeZoneW", "syntax": "safeZoneW"}, "safeZoneWAbs": {"version": "CMD", "tags": "", "description": "Returns absolute safeZoneW including all monitors.", "example": "_szW = safeZoneWAbs;", "docSyntax": "safeZoneWAbs", "syntax": "safeZoneWAbs"}, "safeZoneX": {"version": "CMD", "tags": "", "description": "Returns the X of the left border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the left border of the screen. Since it is going in opposite way of the X axis,", "example": "_screenLeftBorderX = safeZoneX; // returns a float value < 0", "docSyntax": "safeZoneX", "syntax": "safeZoneX"}, "safeZoneXAbs": {"version": "CMD", "tags": "", "description": "Returns absolute safeZoneX including all monitors.", "example": "_szX = safeZoneXAbs;", "docSyntax": "safeZoneXAbs", "syntax": "safeZoneXAbs"}, "safeZoneY": {"version": "CMD", "tags": "", "description": "Returns the Y of the top border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the top border of the screen. Since it is going in opposite way of the Y axis,", "example": "_screenTopBorderY = safeZoneY; // returns a float value < 0", "docSyntax": "safeZoneY", "syntax": "safeZoneY"}, "saveGame": {"version": "CMD", "tags": "", "description": "Autosaves the game (used for Retry). The saving is not started immediately, the request for autosave is made instead. To check the status of the request, use isSaving. The game can then be loaded from the last autosave with loadGame. Will not save if the player is null or dead.", "example": "saveGame;", "docSyntax": "saveGame", "syntax": "saveGame"}, "saveIdentity": {"version": "CMD", "tags": "", "description": "Saves units's identity to Objects.sav file in campaign directory as entry name.", "example": "_successful = player saveIdentity \"playerid\"", "docSyntax": "unit saveIdentity name", "syntax": "<objUnit> saveIdentity <string>"}, "saveOverlay": {"version": "CMD", "tags": "", "description": "Save the current overlay.", "example": "saveOverlay _map", "docSyntax": "saveOverlay map", "syntax": "saveOverlay <objMap>"}, "saveProfileNamespace": {"version": "CMD", "tags": "", "description": "Saves all variables stored in profileNamespace to the active Profile.", "example": "profileNamespace setVariable [\"TAG_lastPlayerLocation\", getPosASL player]; saveProfileNamespace;//\u00a0Optional since namespace is saved when game is closed", "docSyntax": "saveProfileNamespace", "syntax": "saveProfileNamespace"}, "saveStatus": {"version": "CMD", "tags": "", "description": "Saves object's properties to Objects.sav file in campaign directory as entry name.", "example": "player saveStatus \"playerstate\"", "docSyntax": "object saveStatus name", "syntax": "<object> saveStatus <string>"}, "saveVar": {"version": "CMD", "tags": "", "description": "Save variable value into the campaign space. This variable is available to all following missions in the campaign.", "example": "saveVar \"varOne\"", "docSyntax": "saveVar varname", "syntax": "saveVar varname"}, "savingEnabled": {"version": "CMD", "tags": "", "description": "Check if saving the game is enabled.", "example": "if (savingEnabled) then { hint \"Saving is enabled!\"; };", "docSyntax": "savingEnabled", "syntax": "savingEnabled"}, "say": {"version": "CMD", "tags": "", "description": "Make unit say given sound. The sound is defined in CfgSounds. If the unit is a person, it will also perform corresponding lipsync effect provided an appropriate .lip file has been created for this sound.", "example": "(units player select 1) say [\"whisper1\", 5];", "docSyntax": "from say sound", "syntax": "from say sound"}, "say2D": {"version": "CMD", "tags": "", "description": "Plays given sound in 2D.", "example": "player say2D \"HelloThere\";", "docSyntax": "from say2D sound", "syntax": "from say2D sound"}, "say3D": {"version": "CMD", "tags": "", "description": "Lets an object say given sound in 3D space. This allows broadcasting of positional music or sound from a source, without having to script a fade sound or music command. Compare this with say2D which will always play a sound at the location of the player after he has been in the vicinity of a broadcasting sound. Sound is defined in \"CfgSounds\" of the Description.ext or main config.", "example": "helicopter1 say3D \"Fortunateson\";", "docSyntax": "from say3D sound", "syntax": "from say3D sound"}, "scopeName": {"version": "CMD", "tags": "", "description": "Defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands like breakOut and breakTo. Scope name should be defined only once per scope. Trying to set a different name on the scope that has already defined scope name will result in error.", "example": "scopeName \"main\"; while {true} do { scopeName \"loop1\"; while {true} do { scopeName \"loop2\"; ... }; };", "docSyntax": "scopeName name", "syntax": "scopeName <string>"}, "score": {"version": "CMD", "tags": "", "description": "Returns the person's score in MP.", "example": "_pScore = score player;", "docSyntax": "score unit", "syntax": "score <objUnit>"}, "scoreSide": {"version": "CMD", "tags": "", "description": "Returns score for the given side. MP Only.", "example": "_number = scoreSide west;", "docSyntax": "scoreSide side", "syntax": "scoreSide <objSide>"}, "screenToWorld": {"version": "CMD", "tags": "", "description": "Returns the position on landscape (PositionAGL) corresponding to the given point on screen (in UI coordinates).", "example": "_wPos = screenToWorld [0.5,0.5];", "docSyntax": "screenToWorld screen", "syntax": "screenToWorld screen"}, "scriptDone": {"version": "CMD", "tags": "", "description": "Check if a script is finished running using the Script Handle returned by execVM or spawn.", "example": "SQS Syntax:@scriptDone _Handle", "docSyntax": "scriptDone handle", "syntax": "scriptDone handle"}, "scriptName": {"version": "CMD", "tags": "", "description": "Assign a user friendly name to the VM script this command is executed from.", "example": "scriptName \"leetScript.sqf\";", "docSyntax": "scriptName name", "syntax": "scriptName <string>"}, "scudState": {"version": "CMD", "tags": "", "description": "Return the current state of given Scud launcher.", "example": "waitUntil { sleep 1; scudState _scud > 2 }; guba say \"MasterPlanCompletion\";", "docSyntax": "scudState scudName", "syntax": "scudState scudName"}, "secondaryWeapon": {"version": "CMD", "tags": "", "description": "Returns the name of a unit's secondary weapon. To detect the weapon which is currently being used by the unit use currentWeapon.", "example": "private _secondaryWeapon = secondaryWeapon player;", "docSyntax": "secondaryWeapon unit", "syntax": "secondaryWeapon <objUnit>"}, "selectBestPlaces": {"version": "CMD", "tags": "", "description": "Find the places with the maximum value of expression in the given area. Places can be on water. Results are sorted by value. Search pattern is randomised every command execution.", "example": "myPlaces = selectBestPlaces [position player, 50, \"meadow + 2*hills\", 1, 5];", "docSyntax": "selectBestPlaces [position, radius, expression, precision, sourcesCount]", "syntax": "selectBestPlaces [position,radius,expression,precision,sourcesCount]"}, "selectDiarySubject": {"version": "CMD", "tags": "", "description": "Selects a subject page in the diary. The subject page is selected but the command does not open the map by default, which could be opened with openMap if necessary.", "example": "openMap true; player selectDiarySubject \"Diary\";", "docSyntax": "player selectDiarySubject subject", "syntax": "<objUnit> selectDiarySubject <string>"}, "selectedEditorObjects": {"version": "CMD", "tags": "", "description": "Returns a list of currently selected editor objects.", "example": "_selObjects = selectedEditorObjects _map; //\u00a0result can be: [\"_vehicle_0\",\"_vehicle_9\",\"_vehicle_11\"]", "docSyntax": "selectedEditorObjects map", "syntax": "selectedEditorObjects <objMap>"}, "selectEditorObject": {"version": "CMD", "tags": "", "description": "Select an editor object. Does not un-select previously selected objects.", "example": "-", "docSyntax": "map selectEditorObject object", "syntax": "<objMap> selectEditorObject <object>"}, "selectionPosition": {"version": "CMD", "tags": "", "description": "Returns selection position in model space pertaining to the current animation in render time scope. When the default syntax is used, command searches first in Memory level, then in Geometry level, FireGeometry level, LandContact level, HitPoints level and finally in ViewGeometry level and returns the first matching find. The second syntax allows to specify which one of these levels to search in instead.", "example": "_inModelPosition = player selectionPosition \"head_hit\";", "docSyntax": "object selectionPosition selectionName", "syntax": "<object> selectionPosition selectionName"}, "selectLeader": {"version": "CMD", "tags": "", "description": "Select the group's leader. Group locality can be checked with local command and group ownership with groupOwner command.", "example": "group player selectLeader player;", "docSyntax": "group selectLeader unitName", "syntax": "<objGroup> selectLeader <objUnit>"}, "selectNoPlayer": {"version": "CMD", "tags": "", "description": "Switches player to no unit, makes player return objNull.", "example": "Single player: selectNoPlayer; hint str player; //\u00a0<NULL-object> Rough multiplayer emulation: _noPlayer = createGroup sideLogic createUnit [ \"Logic\", [0,0,1000], [], 0, \"NONE\" ]; selectPlayer _noPlayer; hint str player; //\u00a0L Charlie 4-3:1 (KK)", "docSyntax": "selectNoPlayer", "syntax": "selectNoPlayer"}, "selectPlayer": {"version": "CMD", "tags": "", "description": "Move player into given unit. Some usage advices:", "example": "selectPlayer bob;", "docSyntax": "selectPlayer unitName", "syntax": "selectPlayer <objUnit>"}, "selectWeapon": {"version": "CMD", "tags": "", "description": "Selects the given weapon.", "example": "_soldier1 selectWeapon \"LAWLauncher\";", "docSyntax": "unitName selectWeapon muzzleName", "syntax": "<objUnit> selectWeapon muzzleName"}, "sendSimpleCommand": {"version": "CMD", "tags": "", "description": "Sends a simple command to the vehicle's driver / gunner (air vehicles ignore it). See also vehicleMoveInfo.", "example": "vehicle player sendSimpleCommand \"STOP\";", "docSyntax": "vehicleName sendSimpleCommand command", "syntax": "vehicleName sendSimpleCommand command"}, "sendTask": {"version": "CMD", "tags": "", "description": "Create a new AI task (subtask of parentTask). Type is name of registered task type.", "example": "(example)", "docSyntax": "sender sendTask [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...]", "syntax": "sender sendTask [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...]"}, "sendTaskResult": {"version": "CMD", "tags": "", "description": "Send a result of the task to the task sender.", "example": "(example)", "docSyntax": "task sendTaskResult [state,result,sentence]", "syntax": "<objTask> sendTaskResult [state,result,sentence]"}, "sendUDPMessage": {"version": "CMD", "tags": "", "description": "Send message to given address using UDP protocol. Returns false if the message has not been delivered Note: Not implemented (see talk page for more info).", "example": "_bool = sendUDPMessage [\"192.168.0.1\", 2302, \"Here goes you message...\"];", "docSyntax": "sendUDPMessage [ip, port, message]", "syntax": "sendUDPMessage [ip,port,message]"}, "serverCommand": {"version": "CMD", "tags": "", "description": "Executes the given server command.", "example": "serverCommand \"#logout\";", "docSyntax": "serverCommand command", "syntax": "serverCommand command"}, "serverCommandAvailable": {"version": "CMD", "tags": "", "description": "Returns true if given serverCommand is available on current machine, false if not. Here is the general table of availability of Arma 3 server commands:", "example": "_can = serverCommandAvailable \"#kick\";", "docSyntax": "serverCommandAvailable command", "syntax": "serverCommandAvailable command"}, "serverTime": {"version": "CMD", "tags": "", "description": "Returns the time since last server restart, synced to all clients in MP. The syncing is happening every 5 minutes, but you can force the next sync earlier by executing estimatedTimeLeft command. The time returned is also different to the time returned by time and diag_tickTime commands on server. Returns 0 in SP.", "example": "hint format [\"Synced server time\u00a0: %1\", serverTime];", "docSyntax": "serverTime", "syntax": "serverTime"}, "setAccTime": {"version": "CMD", "tags": "", "description": "Set simulation acceleration coefficient. May also be used to slow time in cutscenes.", "example": "setAccTime 0.1;", "docSyntax": "setAccTime accFactor", "syntax": "setAccTime accFactor"}, "setAirportSide": {"version": "CMD", "tags": "", "description": "Set owning side of the airport. ID is the number to identify which airport on the island you want to check.", "example": "0 setAirportSide east", "docSyntax": "id setAirportSide side", "syntax": "<scalar> setAirportSide <objSide>"}, "setAmmoCargo": {"version": "CMD", "tags": "", "description": "Set amount of ammo resources in cargo space of a rearm vehicle. Ammo resource is used to resupply vehicles that take ammo. Soldiers use individual magazines instead. Amount: 1 is full cargo. The", "example": "_ammoTruck1 setAmmoCargo 0.5;", "docSyntax": "vehicleName setAmmoCargo ammoCargo", "syntax": "vehicleName setAmmoCargo ammoCargo"}, "setAperture": {"version": "CMD", "tags": "", "description": "Sets custom eye accommodation camera aperture.", "example": "setAperture 0.3;", "docSyntax": "setAperture aperture", "syntax": "setAperture aperture"}, "setArmoryPoints": {"version": "CMD", "tags": "", "description": "Stores passed number into [USERNAME].ArmaXProfile file, where it assigns it as a value to armoryPoints entry. If entry doesn't exist, it is created.", "example": "setArmoryPoints (armoryPoints + 20);", "docSyntax": "setArmoryPoints points", "syntax": "setArmoryPoints <scalar>"}, "setAttributes": {"version": "CMD", "tags": "", "description": "Returns a Structured Text created from the given structured text and sets attributes to the given values.", "example": "_txt = text \"Red text, right align\"; _txt setAttributes [\"color\", \"#ff0000\", \"align\", \"right\"]; hint composeText [_txt];", "docSyntax": "text setAttributes [name1, value1, name2, value2, ...]", "syntax": "<string> setAttributes [name1,value1,name2,value2,...]"}, "setBehaviour": {"version": "CMD", "tags": "", "description": "Sets individual unit behaviour on every unit in a group.", "example": "_group1 setBehaviour \"SAFE\";", "docSyntax": "groupOrUnit setBehaviour behaviour", "syntax": "groupOrUnit setBehaviour behaviour"}, "setCameraEffect": {"version": "CMD", "tags": "", "description": "Applies an effect to the current camera of the player.", "example": "myTrigger setCameraEffect [\"ZoomIn\", \"FRONT\"];", "docSyntax": "triggerOrWaypoint setCameraEffect [type, position]", "syntax": "triggerOrWaypoint setCameraEffect [type,position]"}, "setCameraInterest": {"version": "CMD", "tags": "", "description": "Set camera interest for given entity. Camera interest is by default 0. Any unit which is speaking has its camera interest raised to 50. Camera interest is used to focus camera to control depth of field in cutscenes. Combination of camera interest, unit position of the screen, unit movement, unit type, and some other properties is used to determine which unit to focus at. Higher camera interest increases the chance of the unit being focused.", "example": "_soldier setCameraInterest 50;", "docSyntax": "entity setCameraInterest interest", "syntax": "entity setCameraInterest interest"}, "setCamShakeDefParams": {"version": "CMD", "tags": "", "description": "Sets camera shake default parameters.", "example": "setCamShakeDefParams [1, 2, 3, 4, 5, .5, .5];", "docSyntax": "setCamShakeDefParams [power, duration, frequency, minSpeed, minMass, caliberCoefHit, vehicleCoef]", "syntax": "setCamShakeDefParams [power,duration,frequency,minSpeed,minMass,caliberCoefHit,vehicleCoef]"}, "setCamShakeParams": {"version": "CMD", "tags": "", "description": "Sets camera shake parameters. Will not have any effect until shake is started via addCamShake.", "example": "setCamShakeParams [0.1, 1, 1, 1, true];", "docSyntax": "setCamShakeParams [posCoef, vertCoef, horzCoef, bankCoef, interpolation]", "syntax": "setCamShakeParams [posCoef,vertCoef,horzCoef,bankCoef,interpolation]"}, "setCamUseTI": {"version": "CMD", "tags": "", "description": "Sets thermal vision mode for currently used camera. This command only works with camCreate created camera that is currently the main camera for the player (see Example 2).", "example": "true setCamUseTI 1;", "docSyntax": "state setCamUseTI modeIndex", "syntax": "state setCamUseTI modeIndex"}, "setCaptive": {"version": "CMD", "tags": "", "description": "Mark a unit as captive. If unit is a vehicle, commander is marked. A captive unit:", "example": "_soldier1 setCaptive true; side _soldier1; //\u00a0returns civilian side group _soldier1; //\u00a0returns e.g blufor", "docSyntax": "unitName setCaptive status", "syntax": "<objUnit> setCaptive status"}, "setCombatMode": {"version": "CMD", "tags": "", "description": "Sets AI group combat mode (engagement rules). For individual unit's combat mode see setUnitCombatMode. Mode may be one of the following:", "example": "_group1 setCombatMode \"BLUE\";", "docSyntax": "group setCombatMode mode", "syntax": "<objGroup> setCombatMode mode"}, "setCurrentTask": {"version": "CMD", "tags": "", "description": "Set the task as a current task of the person.", "example": "player setCurrentTask tskKillSpongebob;", "docSyntax": "object setCurrentTask task", "syntax": "<object> setCurrentTask <objTask>"}, "setCurrentWaypoint": {"version": "CMD", "tags": "", "description": "Sets the currently active waypoint for a group.", "example": "_grp setCurrentWaypoint [_grp, 1];", "docSyntax": "groupName setCurrentWaypoint waypoint", "syntax": "groupName setCurrentWaypoint waypoint"}, "setDamage": {"version": "CMD", "tags": "", "description": "Sets the damage (or lack thereof) of an object/unit. The alternative syntax allows to skip destruction effects for vehicles and buildings.", "example": "_soldier1 setDamage 1;", "docSyntax": "object setDamage damage", "syntax": "<object> setDamage <scalar>"}, "setDammage": {"version": "CMD", "tags": "", "description": "Damages/hurts or repairs/heals object/unit. Damage 0 means fully functional, damage 1 means completely destroyed / dead.", "example": "_soldier1 setDammage 1;", "docSyntax": "object setDammage damage", "syntax": "<object> setDammage <scalar>"}, "setDate": {"version": "CMD", "tags": "", "description": "Sets mission date and time. Players joining after mission start will get the current server date including the year.", "example": "setDate [1986, 2, 25, 16, 0]; //\u00a04:00pm February 25, 1986", "docSyntax": "setDate date", "syntax": "setDate date"}, "setDestination": {"version": "CMD", "tags": "", "description": "Set the destination for path planning of the pilot. Possible values for planningMode are:", "example": "bob setDestination [screenToWorld [0.5,0.5], \"LEADER PLANNED\", true]", "docSyntax": "object setDestination [position, planningMode, forceReplan]", "syntax": "<object> setDestination [position,planningMode,forceReplan]"}, "setDir": {"version": "CMD", "tags": "", "description": "Sets object heading. Angles are measured in degrees clockwise from north; the regular range goes from 0 to 360 (0\u00b0 = N, 90\u00b0 = E, 180\u00b0 = S, 270\u00b0 = W). Negative angles represent counter-clockwise angles.", "example": "myUnit setDir 45; // will set myUnit to face North-east", "docSyntax": "object setDir heading", "syntax": "<object> setDir heading"}, "setDirection": {"version": "CMD", "tags": "", "description": "Sets the orientation of a location. The location's area and map icon (if its type uses an icon) will be rotated to this orientation.", "example": "_location = createLocation [\"VegetationPalm\", getPos player, 200, 200]; _location setText \"Benargee's Palm Tree\"; _location setDirection 45;", "docSyntax": "location setDirection direction", "syntax": "location setDirection direction"}, "setDrawIcon": {"version": "CMD", "tags": "", "description": "Set the icon to be shown in 2D editor for the specified editor object. If maintain size is false,icon will not scale depending on the scale,of the map. If maintain size is a number,the icon will maintain size,if map scale is below that number. is3D,show line and priority are,optional.", "example": "-", "docSyntax": "map setDrawIcon [object,texture,color,offset,width,height,maintain size?,angle,string identifier,shadow,is3D,draw line?,priority]", "syntax": "<objMap> setDrawIcon [<object>,<string>,<scalar>,offset,width,height,maintain size?,angle,<string> identifier,shadow,is3D,draw line?,priority]"}, "setDropInterval": {"version": "CMD", "tags": "", "description": "Set interval of emitting particles from particle source. In Arma 3 hardcoded limit of how many particles can exist at the same time is 18000. Correspondence between CfgCloudlets class param name and command param: particleSource setDropInterval interval;", "example": "_source setDropInterval 0.05;", "docSyntax": "particleSource setDropInterval interval", "syntax": "particleSource setDropInterval interval"}, "setEditorMode": {"version": "CMD", "tags": "", "description": "Sets map mode to MAP,3D or PREVIEW.", "example": "-", "docSyntax": "map setEditorMode mode", "syntax": "<objMap> setEditorMode mode"}, "setEditorObjectScope": {"version": "CMD", "tags": "", "description": "This command defines the level of access a user has to editor objects. \"objects\" is an array of either Editor Objects (eg [\"_unit_0\"]) or actual Game Objects (eg [player]). If the array is empty then the command will automatically parse all editor objects. \"editorType\" is the editor type to effect (eg \"unit\", \"vehicle\", \"center\") or \"\" for all types. \"condition\" is an executable string that must evaluate to true or false. If true, the scope of the evaluated editor object will be modified. \"_x\" can be used in the string as reference to the ingame representation of the currently processed array member. \"scope\" is one of \"HIDE\", \"VIEW\", \"SELECT\", \"LINKTO\", \"LINKFROM\", \"ALLNODRAG\", \"ALLNOTREE\", \"ALLNOCOPY\", \"ALLNOSELECT\" or \"ALL\". \"subordinatesAlso\" is a boolean value. If true then subordinates in the editor will be assigned the same scope as the parent.", "example": "_map setEditorObjectScope [ [],\"vehicle\", \"side effectiveCommander _x\u00a0!= side player\", \"HIDE\", false]", "docSyntax": "map setEditorObjectScope [objects, editorType, condition, scope, subordinatesAlso]", "syntax": "<objMap> setEditorObjectScope [objects,editorType,condition,scope,subordinatesAlso]"}, "setEffectCondition": {"version": "CMD", "tags": "", "description": "The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result.", "example": "_triggerObj setEffectCondition \"thisList\";", "docSyntax": "trigger setEffectCondition statement", "syntax": "<objTrigger> setEffectCondition statement"}, "setFace": {"version": "CMD", "tags": "", "description": "Set person's face. For a list of available faces, check Category:CfgIdentities.", "example": "soldier1 setFace \"WhiteHead_02\"", "docSyntax": "person setFace face", "syntax": "<objUnit> setFace face"}, "setFaceAnimation": {"version": "CMD", "tags": "", "description": "Sets facial animation phase (eye blinking), blink is in the range from 0 to 1.", "example": "_soldier1 setFaceAnimation 0.5;", "docSyntax": "unit setFaceAnimation blink", "syntax": "<objUnit> setFaceAnimation blink"}, "setFlagOwner": {"version": "CMD", "tags": "", "description": "Sets flag owner. When owner is set to objNull or any object other than a unit of class man or logic, flag is returned to the flagpole. A flag owned by a logic has no visual representation.", "example": "_flag1 setFlagOwner _soldier1;", "docSyntax": "flag setFlagOwner owner", "syntax": "<objFlag> setFlagOwner owner"}, "setFlagSide": {"version": "CMD", "tags": "", "description": "Sets flag Side. A flag may be taken by any unit that is enemy to the side that owns the flag. Just like with setFlagTexture, if the command executed where unit is local effect of the command will be global and JIP compatible.", "example": "_flag1 setFlagSide east;", "docSyntax": "flag setFlagSide side", "syntax": "<objFlag> setFlagSide <objSide>"}, "setFlagTexture": {"version": "CMD", "tags": "", "description": "Sets flag texture.", "example": "_flagE setFlagTexture \"\\ca\\misc\\data\\sever_vlajka.paa\";", "docSyntax": "flag setFlagTexture texture", "syntax": "<objFlag> setFlagTexture <string>"}, "setFog": {"version": "CMD", "tags": "", "description": "Smoothly change the fog over given time (in seconds). See also fogParams.", "example": "15 setFog 0.5;", "docSyntax": "time setFog fog", "syntax": "<scalar> setFog fog"}, "setFormation": {"version": "CMD", "tags": "", "description": "Set group formation.", "example": "_groupOne setFormation \"LINE\";", "docSyntax": "group setFormation formation", "syntax": "<objGroup> setFormation formation"}, "setFormationTask": {"version": "CMD", "tags": "", "description": "Set the current task of the formation member.", "example": "_unit setFormationTask \"MOVE\";", "docSyntax": "unit setFormationTask task", "syntax": "<objUnit> setFormationTask <objTask>"}, "setFormDir": {"version": "CMD", "tags": "", "description": "Sets group formation heading. Accepted heading range is 0 to 360. Formation is facing this direction unless enemy is seen. When group is moving, this value is overridden by movement direction. If the new direction is noticeably different from the old direction (approx +/- 15 degrees), units will change positions changing formationDirection.", "example": "_group1 setFormDir 180;", "docSyntax": "group setFormDir heading", "syntax": "<objGroup> setFormDir heading"}, "setFriend": {"version": "CMD", "tags": "", "description": "Sets how friendly a side is with another. The friendliness is set for one side, not for the other. See also Side relations.", "example": "west setFriend [resistance, 0]; //\u00a0west will not like resistance from now on", "docSyntax": "side1 setFriend [side2, value]", "syntax": "side1 setFriend [side2,<scalar>]"}, "setFromEditor": {"version": "CMD", "tags": "", "description": "Set if given team member was inserted directly from editor.", "example": "_teamMember setFromEditor true", "docSyntax": "teamMember setFromEditor fromEditor", "syntax": "teamMember setFromEditor fromEditor"}, "setFSMVariable": {"version": "CMD", "tags": "", "description": "Set variable to given value in the variable space of given FSM.", "example": "_handle = execFSM \"test.fsm\"; _handle setFSMVariable [\"_foo\", 23]; sets variable _foo in the FSM to 23", "docSyntax": "handle setFSMVariable [name, value]", "syntax": "handle setFSMVariable [<string>,<scalar>]"}, "setFuel": {"version": "CMD", "tags": "", "description": "Sets fuel level.", "example": "_jeepOne setFuel 0.5;", "docSyntax": "vehicle setFuel amount", "syntax": "<objVehicle> setFuel amount"}, "setFuelCargo": {"version": "CMD", "tags": "", "description": "Sets fuel amount in cargo space of refuel vehicles. Note that the carrying capacity of each side's refuel trucks differ.", "example": "_refuelTruck setFuelCargo 0;", "docSyntax": "vehicle setFuelCargo amount", "syntax": "<objVehicle> setFuelCargo amount"}, "setGroupIcon": {"version": "CMD", "tags": "", "description": "Sets group icon properties.", "example": "_target setGroupIcon [_icon, \"hc_selectedEnemy\"]; _target setGroupIcon [_icon, \"flag\"]; _grp setGroupIcon [_iconsize, _iconsizeclass, _offset]; _grp setGroupIcon [_newid, _icon, _offset]; _grp setGroupIcon [_icon, _iconclass];", "docSyntax": "group setGroupIcon [id, icon, offset]", "syntax": "<objGroup> setGroupIcon [<scalar>,icon,offset]"}, "setGroupIconParams": {"version": "CMD", "tags": "", "description": "Set group icons parameters.", "example": "_grp setGroupIconParams [[0.9,0,0, 1], \"The Group\", 1.25, false];", "docSyntax": "group setGroupIconParams properties", "syntax": "<objGroup> setGroupIconParams properties"}, "setGroupIconsSelectable": {"version": "CMD", "tags": "", "description": "Sets if group icons raise onGroupIconClick, onGroupIconOverEnter and onGroupIconOverLeave events.", "example": "setGroupIconsSelectable true;", "docSyntax": "setGroupIconsSelectable selectable", "syntax": "setGroupIconsSelectable selectable"}, "setGroupIconsVisible": {"version": "CMD", "tags": "", "description": "Sets if group icons added with addGroupIcon are visible on map and in the HUD.", "example": "setGroupIconsVisible [true, true]; (group player) addGroupIcon [\"b_inf\", [0, 0]];", "docSyntax": "setGroupIconsVisible [showOnMap, showOnHUD]", "syntax": "setGroupIconsVisible [showOnMap,showOnHUD]"}, "setGroupId": {"version": "CMD", "tags": "", "description": "Sets the group radio callsign, how it will be displayed in radio chat. Two groups on the same side cannot have the same callsign (possible on different sides) - see Example 4.", "example": "Arma 3:group player setGroupId [\"Some name for the group\"]; hint groupId group player; //\u00a0\"Some name for the group\" player sideChat \"lalala\"; //\u00a0Some name for the group (KK): \"lalala\"", "docSyntax": "group setGroupId [nameFormat, nameParam1, ..., nameParamN]", "syntax": "<objGroup> setGroupId [nameFormat,nameParam1,...,nameParamN]"}, "setHideBehind": {"version": "CMD", "tags": "", "description": "Sets the data for hiding. objectWhereHide can be taken using findCover. hidePosition can be taken using getHideFrom. Command is not functional in Arma 2.", "example": "-", "docSyntax": "object setHideBehind [objectWhereHide, hidePosition]", "syntax": "<object> setHideBehind [objectWhereHide,hidePosition]"}, "setHit": {"version": "CMD", "tags": "", "description": "Set damage on a part of an object.", "example": "vehicle player setHit [\"motor\", 1];", "docSyntax": "object setHit [part, damage, useEffects, instigator]", "syntax": "<object> setHit [part,<scalar>,useEffects,instigator]"}, "setIdentity": {"version": "CMD", "tags": "", "description": "Sets identity of a person. The identities could be defined in a custom config in Description.ext or in the main config. For a list of available main config values see CfgIdentities.", "example": "_soldier1 setIdentity \"MyLittleSoldier\";", "docSyntax": "person setIdentity identity", "syntax": "<objUnit> setIdentity identity"}, "setImportance": {"version": "CMD", "tags": "", "description": "Sets the importance value of location.", "example": "myLocation setImportance 2;", "docSyntax": "location setImportance value", "syntax": "location setImportance <scalar>"}, "setLeader": {"version": "CMD", "tags": "", "description": "Set the leader of given team. Effect is local, unless both leader unit and team are local to PC on which command is executed, then effect is global.", "example": "(example)", "docSyntax": "team setLeader leader", "syntax": "team setLeader leader"}, "setLightAmbient": {"version": "CMD", "tags": "", "description": "Set ambient color of light. This includes surfaces that face away from the light, unlike setLightColor.", "example": "myLight setLightAmbient [0.5,0,0]; //\u00a0produces red light around the origin source", "docSyntax": "light setLightAmbient [r, g, b]", "syntax": "light setLightAmbient [r,g,b]"}, "setLightBrightness": {"version": "CMD", "tags": "", "description": "Set brightness of light.", "example": "myLight setLightBrightness 2;", "docSyntax": "light setLightBrightness brightness", "syntax": "light setLightBrightness brightness"}, "setLightColor": {"version": "CMD", "tags": "", "description": "Set diffuse color of light. Illuminates surfaces that are facing the light.", "example": "myLight setLightColor [0.5,0,0]; //\u00a0produces red", "docSyntax": "light setLightColor [r, g, b]", "syntax": "light setLightColor [r,g,b]"}, "setMarkerAlpha": {"version": "CMD", "tags": "", "description": "Sets the marker alpha. The marker is modified on all computers in a network session.", "example": "\"my_marker\" setMarkerAlpha 0.5;", "docSyntax": "marker setMarkerAlpha alpha", "syntax": "marker setMarkerAlpha alpha"}, "setMarkerAlphaLocal": {"version": "CMD", "tags": "", "description": "Sets the marker alpha.", "example": "\"my_marker\" setMarkerAlphaLocal 0.5;", "docSyntax": "marker setMarkerAlphaLocal alpha", "syntax": "marker setMarkerAlphaLocal alpha"}, "setMarkerBrush": {"version": "CMD", "tags": "", "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.", "example": "\"Marker1\" setMarkerBrush \"DIAGGRID\";", "docSyntax": "markerName setMarkerBrush brush", "syntax": "<string> setMarkerBrush brush"}, "setMarkerBrushLocal": {"version": "CMD", "tags": "", "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.", "example": "\"Marker1\" setMarkerBrushLocal \"DiagGrid\";", "docSyntax": "markerName setMarkerBrushLocal brush", "syntax": "<string> setMarkerBrushLocal brush"}, "setMarkerColor": {"version": "CMD", "tags": "", "description": "Sets marker color. Marker color names and their corresponding RGBA values for Arma 3 could be found here: Arma 3: CfgMarkerColors", "example": "\"MarkerOne\" setMarkerColor \"ColorBlack\";", "docSyntax": "markerName setMarkerColor color", "syntax": "<string> setMarkerColor <scalar>"}, "setMarkerColorLocal": {"version": "CMD", "tags": "", "description": "Sets marker color for the given marker locally. Marker color names and their corresponding RGBA values for Arma 3 could be found in here: Arma 3: CfgMarkerColors", "example": "\"MarkerOne\" setMarkerColorLocal \"ColorBlack\";", "docSyntax": "markerName setMarkerColorLocal color", "syntax": "<string> setMarkerColorLocal <scalar>"}, "setMarkerDir": {"version": "CMD", "tags": "", "description": "Sets the orientation of the marker. Angle is in degrees.", "example": "\"Marker1\" setMarkerDir 90;", "docSyntax": "markerName setMarkerDir angle", "syntax": "<string> setMarkerDir angle"}, "setMarkerDirLocal": {"version": "CMD", "tags": "", "description": "Sets the orientation of the marker.", "example": "\"Marker1\" setMarkerDirLocal 90;", "docSyntax": "markerName setMarkerDirLocal angle", "syntax": "<string> setMarkerDirLocal angle"}, "setMarkerPos": {"version": "CMD", "tags": "", "description": "Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, its getPosWorld is used.", "example": "\"MarkerOne\" setMarkerPos getMarkerPos \"MarkerTwo\"", "docSyntax": "markerName setMarkerPos pos", "syntax": "<string> setMarkerPos <array>"}, "setMarkerPosLocal": {"version": "CMD", "tags": "", "description": "Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, its getPosWorld is used.", "example": "\"MarkerOne\" setMarkerPosLocal getMarkerPos \"MarkerTwo\";", "docSyntax": "markerName setMarkerPosLocal pos", "syntax": "<string> setMarkerPosLocal <array>"}, "setMarkerShape": {"version": "CMD", "tags": "", "description": "Selects shape (actual type) of the marker.", "example": "\"Marker1\" setMarkerShape \"RECTANGLE\";", "docSyntax": "markerName setMarkerShape shape", "syntax": "<string> setMarkerShape shape"}, "setMarkerShapeLocal": {"version": "CMD", "tags": "", "description": "Selects shape (actual type) of the local marker.", "example": "\"Marker1\" setMarkerShapeLocal \"RECTANGLE\";", "docSyntax": "markerName setMarkerShapeLocal shape", "syntax": "<string> setMarkerShapeLocal shape"}, "setMarkerSize": {"version": "CMD", "tags": "", "description": "Sets the marker's size.", "example": "\"MarkerOne\" setMarkerSize [100, 200];", "docSyntax": "markerName setMarkerSize [a-axis, b-axis]", "syntax": "<string> setMarkerSize [a-axis,b-axis]"}, "setMarkerSizeLocal": {"version": "CMD", "tags": "", "description": "Set marker size. Size is in format [a-axis, b-axis].", "example": "\"MarkerOne\" setMarkerSizeLocal [100, 200];", "docSyntax": "markerName setMarkerSizeLocal [a-axis, b-axis]", "syntax": "<string> setMarkerSizeLocal [a-axis,b-axis]"}, "setMarkerText": {"version": "CMD", "tags": "", "description": "Sets the text label of an existing marker.", "example": "\"Marker1\" setMarkerText \"You are here.\";", "docSyntax": "markerName setMarkerText text", "syntax": "<string> setMarkerText <string>"}, "setMarkerTextLocal": {"version": "CMD", "tags": "", "description": "Sets the text label of an existing marker.", "example": "\"Marker1\" setMarkerTextLocal \"You are here.\";", "docSyntax": "markerName setMarkerTextLocal text", "syntax": "<string> setMarkerTextLocal <string>"}, "setMarkerType": {"version": "CMD", "tags": "", "description": "Sets marker type. Marker type is a class name from CfgMarkers.", "example": "\"MarkerOne\" setMarkerType \"Warning\";", "docSyntax": "markerName setMarkerType type", "syntax": "<string> setMarkerType type"}, "setMarkerTypeLocal": {"version": "CMD", "tags": "", "description": "Sets marker type locally. Marker type is a class name in CfgMarkers.", "example": "\"MarkerOne\" setMarkerTypeLocal \"Warning\";", "docSyntax": "markerName setMarkerTypeLocal type", "syntax": "<string> setMarkerTypeLocal type"}, "setMimic": {"version": "CMD", "tags": "", "description": "Sets person's facial expression. To set it back to default, use \"\".", "example": "_soldier1 setMimic \"hurt\";", "docSyntax": "person setMimic mimic", "syntax": "<objUnit> setMimic mimic"}, "setMousePosition": {"version": "CMD", "tags": "", "description": "Moves mouse pointer to specified position on the screen. x and y could be any number, but will be clipped so mouse never leaves the screen area.", "example": "setMousePosition [0.5, 0.5];", "docSyntax": "setMousePosition [x, y]", "syntax": "setMousePosition [x,y]"}, "setMusicEffect": {"version": "CMD", "tags": "", "description": "Defines a music track played on activation. If another track is playing already, this will stop it and start the new track. Track is a subclass name of CfgMusic. In addition, \"$STOP$\" (stops the current music track) or use playMusic \"\". When used in a trigger, the track starts on activation but does not automatically stop on deactivation.", "example": "_trigger setMusicEffect \"Track1\";", "docSyntax": "trigger setMusicEffect track", "syntax": "<objTrigger> setMusicEffect track"}, "setName": {"version": "CMD", "tags": "", "description": "Sets the name of a location or a person. In Arma 3 this can be used to set name of a person but only in single player.", "example": "myLocation setName \"My Location Name\";", "docSyntax": "unit setName name", "syntax": "<objUnit> setName <string>"}, "setObjectArguments": {"version": "CMD", "tags": "", "description": "Set object arguments in mission editor.", "example": "-", "docSyntax": "map setObjectArguments [object,[name1,value1,...]]", "syntax": "<objMap> setObjectArguments [<object>,[name1,value1,...]]"}, "setObjectProxy": {"version": "CMD", "tags": "", "description": "Set the proxy object associated with the given editor object.", "example": "_map setObjectProxy [\"_group_0\", vehicle (leader _group)];", "docSyntax": "map setObjectProxy [object,proxy object]", "syntax": "<objMap> setObjectProxy [<object>,proxy <object>]"}, "setObjectTexture": {"version": "CMD", "tags": "", "description": "Applies given texture to object's selection. See Retexturing with setObjectTexture for a short tutorial.", "example": "_objectname setObjectTexture [0, \"\\pboname\\texture.paa\"]; _objectname setObjectTexture [1, \"\\pboname\\texture2.paa\"];", "docSyntax": "object setObjectTexture [selectionNumber, texture]", "syntax": "<object> setObjectTexture [selectionNumber,<string>]"}, "setOvercast": {"version": "CMD", "tags": "", "description": "Set overcast to given value smoothly during given time (in seconds). Zero time means immediate change. An overcast setting of zero means clear (sunny) weather, and one means storms and rain are very likely. Higher overcast values also result in higher wind speeds.", "example": "50 setOvercast 0.5", "docSyntax": "time setOvercast overcast", "syntax": "<scalar> setOvercast overcast"}, "setOwner": {"version": "CMD", "tags": "", "description": "From server machine, change the ownership of an object to a given client. Using command in an unintended way will log a message to .rpt file. To transfer ownership of all AI units in a group properly, use setGroupOwner instead.", "example": "_someObject setOwner 12;", "docSyntax": "object setOwner clientID", "syntax": "<object> setOwner clientID"}, "setParticleCircle": {"version": "CMD", "tags": "", "description": "Updates particle source, creates particles in circle with given radius. Velocity is transformed and added to total velocity.", "example": "_myParticleSource setParticleCircle [3, [0,0,5]];", "docSyntax": "particleSource setParticleCircle [circleRadius, circleVelocity]", "syntax": "particleSource setParticleCircle [circleRadius,circleVelocity]"}, "setParticleParams": {"version": "CMD", "tags": "", "description": "Set parameters to particle source. Array is in format ParticleArray.", "example": "see ParticleArray", "docSyntax": "particleSource setParticleParams array", "syntax": "particleSource setParticleParams <array>"}, "setParticleRandom": {"version": "CMD", "tags": "", "description": "Sets randomization of particle source parameters. Correspondence between CfgCloudlets class param names and command array of params: particleSource setParticleRandom [ lifeTimeVar, positionVar, moveVelocityVar, rotationVelocityVar, sizeVar, colorVar, randomDirectionPeriodVar, randomDirectionIntensityVar, angleVar, bounceOnSurfaceVar ];", "example": "_particleSource setParticleRandom [0, [0.1, 0.1, 0.1], [0, 0, 0.5], 0, 0.1, [0, 0, 0, 0], 0, 0, 45, 0];", "docSyntax": "particleSource setParticleRandom [lifeTime, position, moveVelocity, rotationVelocity, size, color, directionPeriod, directionIntensity, angle, bounceOnSurface]", "syntax": "particleSource setParticleRandom [lifeTime,position,moveVelocity,rotationVelocity,size,<scalar>,directionPeriod,directionIntensity,angle,bounceOnSurface]"}, "setPlayable": {"version": "CMD", "tags": "", "description": "Create MP role for the unit. The roles created this way are used for Join In Progress and Team Switch.", "example": "setPlayable _aPerson", "docSyntax": "setPlayable unitName", "syntax": "setPlayable <objUnit>"}, "setPlayerRespawnTime": {"version": "CMD", "tags": "", "description": "Sets the time interval (in seconds) that the player must wait before respawn. It resets to mission default on mission start. In Single Player or when respawn type is GROUP or SIDE in Multiplayer, setting player respawn time has no effect, and playerRespawnTime will always return -1.", "example": "setPlayerRespawnTime 5;", "docSyntax": "setPlayerRespawnTime interval", "syntax": "setPlayerRespawnTime interval"}, "setPos": {"version": "CMD", "tags": "", "description": "Sets object position to format PositionAGLS (over surface). The Z value is used to calculate the nearest surface below the provided position. If the surface is close, it uses the Z position of the surface. Otherwise, Z value becomes the offset from that surface.", "example": "player setPos [getPos player select 0, getPos player select 1, (getPos player select 2) +10]; //\u00a0the same as above using modelToWorld (ArmA v1.00) player setPos (player modelToWorld [0,0,10]); //\u00a0the same as above using vectorAdd (Arma 3 v1.22) player setPos (getPos player vectorAdd [0,0,10]);", "docSyntax": "object setPos pos", "syntax": "<object> setPos <array>"}, "setPosASL": {"version": "CMD", "tags": "", "description": "Sets the object position above sea level. Given position must be in PositionASL format.", "example": "player setPosASL [getPosASL player select 0, (getPosASL player select 1) + 10, getPosASL player select 2];", "docSyntax": "object setPosASL pos", "syntax": "<object> setPosASL <array>"}, "setPosASL2": {"version": "CMD", "tags": "", "description": "Sets the object position. The pos array uses the PositionASL format. The version of the command does not offset based on object center.", "example": "private _aslPos = getPosASL player; _aslPos set [1, _aslPos select 1 + 10]; player setPosASL2 _aslPos;", "docSyntax": "obj setPosASL2 pos", "syntax": "<object> setPosASL2 <array>"}, "setPosATL": {"version": "CMD", "tags": "", "description": "Sets the position of an object relative to the terrain.", "example": "player setPosATL [getPosATL player select 0, (getPosATL player select 1) - 10, getPosATL player select 2];", "docSyntax": "object setPosATL pos", "syntax": "<object> setPosATL <array>"}, "setPosition": {"version": "CMD", "tags": "", "description": "Sets the position of a location.", "example": "myLocation setPosition getPosATL player;", "docSyntax": "location setPosition pos", "syntax": "location setPosition <array>"}, "setRadioMsg": {"version": "CMD", "tags": "", "description": "Sets radio trigger menu title text (0 -> 0 -> map radio). Use \"NULL\" to disable radio slot. Use \"\" to restore default title", "example": "1 setRadioMsg \"Click meeeeeeeeee\"; //changes title of radio Alpha", "docSyntax": "index setRadioMsg text", "syntax": "<scalar> setRadioMsg <string>"}, "setRain": {"version": "CMD", "tags": "", "description": "Sets rain density smoothly over the given transition time. A transition time of zero means an immediate change. A rain density of zero is no rain, one is maximum rain. Rain is not possible when overcast is less than 0.7.", "example": "60 setRain 1;", "docSyntax": "time setRain rain", "syntax": "<scalar> setRain rain"}, "setRank": {"version": "CMD", "tags": "", "description": "Sets rank of given unit. Possible values: PRIVATE, CORPORAL, SERGEANT, LIEUTENANT, CAPTAIN, MAJOR or COLONEL.", "example": "player setRank \"COLONEL\"", "docSyntax": "unitName setRank rank", "syntax": "<objUnit> setRank rank"}, "setRectangular": {"version": "CMD", "tags": "", "description": "Set the shape of a location to be either rectangular or elliptical. Locations default shape is elliptical.", "example": "myLocation setRectangular true;", "docSyntax": "location setRectangular set", "syntax": "location setRectangular set"}, "setRepairCargo": {"version": "CMD", "tags": "", "description": "Set amount of repair resources in cargo space of repair vehicle. Amount 1 is full cargo.", "example": "_repairTruck1 setRepairCargo 0", "docSyntax": "vehicleName setRepairCargo amount", "syntax": "vehicleName setRepairCargo amount"}, "setSide": {"version": "CMD", "tags": "", "description": "Sets a location's side. The default side is Unknown.", "example": "_myLocation setSide resistance;", "docSyntax": "location setSide side", "syntax": "location setSide <objSide>"}, "setSimpleTaskDescription": {"version": "CMD", "tags": "", "description": "Attach descriptions to the simple task.", "example": "mytask setSimpleTaskDescription [\"Today you have to kill Spongebob\",\"Kill Spongebob\",\"Here he is!\"];", "docSyntax": "task setSimpleTaskDescription [description, descriptionShort, descriptionHUD]", "syntax": "<objTask> setSimpleTaskDescription [description,descriptionShort,descriptionHUD]"}, "setSimpleTaskDestination": {"version": "CMD", "tags": "", "description": "Attach a destination to the simple task.", "example": "_tskGoHere setSimpleTaskDestination (getMarkerPos \"obj1\");", "docSyntax": "task setSimpleTaskDestination pos", "syntax": "<objTask> setSimpleTaskDestination <array>"}, "setSimpleTaskTarget": {"version": "CMD", "tags": "", "description": "Attach a target to the simple task.", "example": "task setSimpleTaskTarget [targetVehicle, true];", "docSyntax": "task setSimpleTaskTarget [target, precisePosition]", "syntax": "<objTask> setSimpleTaskTarget [<object>,precisePosition]"}, "setSize": {"version": "CMD", "tags": "", "description": "Sets the size (radius) of a location. The width is 2 * x, the height is 2 * y.", "example": "myLocation setSize [10,30]", "docSyntax": "location setSize size", "syntax": "location setSize size"}, "setSkill": {"version": "CMD", "tags": "", "description": "Sets the skill level of given unit. The value of a sub-skill is interpolated into a range defined in CfgAISkill.", "example": "_hero setSkill 1;", "docSyntax": "unit setSkill skill", "syntax": "<objUnit> setSkill skill"}, "setSoundEffect": {"version": "CMD", "tags": "", "description": "Defines the different sound effects. To stop any sound, deactivate the trigger (might take up to 0.5 seconds to stop) or delete the trigger (immediate).", "example": "_trigger setSoundEffect [\"Alarm\", \"\", \"\", \"\"];", "docSyntax": "trigger setSoundEffect [sound, voice, soundEnv, soundDet]", "syntax": "<objTrigger> setSoundEffect [sound,voice,soundEnv,soundDet]"}, "setSpeedMode": {"version": "CMD", "tags": "", "description": "Sets group speed mode. If unit is passed as param, unit's group is used. Mode may be one of:", "example": "_groupOne setSpeedMode \"LIMITED\";", "docSyntax": "groupName setSpeedMode mode", "syntax": "groupName setSpeedMode mode"}, "setTargetAge": {"version": "CMD", "tags": "", "description": "Sets how the target is known to the other centers. They behave like the target was seen age seconds ago. Possible age values are: \"ACTUAL\", \"5 MIN\", \"10 MIN\", \"15 MIN\", \"30 MIN\", \"60 MIN\", \"120 MIN\" or \"UNKNOWN\".", "example": "player setTargetAge \"10 MIN\"", "docSyntax": "object setTargetAge age", "syntax": "<object> setTargetAge age"}, "setTaskResult": {"version": "CMD", "tags": "", "description": "Set a result of the task.", "docSyntax": "task setTaskResult [state,result]", "syntax": "<objTask> setTaskResult [state,result]"}, "setTaskState": {"version": "CMD", "tags": "", "description": "Set the state of a given task.", "example": "_tskKillSpongebob setTaskState \"Succeeded\";", "docSyntax": "task setTaskState state", "syntax": "<objTask> setTaskState state"}, "setTerrainGrid": {"version": "CMD", "tags": "", "description": "Sets the desired terrain resolution in meters.", "example": "setTerrainGrid 12.5;", "docSyntax": "setTerrainGrid grid", "syntax": "setTerrainGrid grid"}, "setText": {"version": "CMD", "tags": "", "description": "Sets the text associated with a location. This text will be displayed on the game map at the location's position.", "example": "myLocation setText \"Rahmadi Village\"", "docSyntax": "location setText text", "syntax": "location setText <string>"}, "setTitleEffect": {"version": "CMD", "tags": "", "description": "Defines the title effect to show on activation via [Type, Effect, Text] where 'Type' can be", "example": "_trigger setTitleEffect [\"TEXT\", \"PLAIN DOWN\", \"Hello world.\"]", "docSyntax": "trigger setTitleEffect [type, effect, text]", "syntax": "<objTrigger> setTitleEffect [type,effect,<string>]"}, "setToneMapping": {"version": "CMD", "tags": "", "description": "Applies a specific tone mapping to the game. The tone mapping can be edited with setToneMappingParams.", "example": "setToneMapping \"Filmic\"", "docSyntax": "setToneMapping toneName", "syntax": "setToneMapping toneName"}, "setToneMappingParams": {"version": "CMD", "tags": "", "description": "Edits tone mapping parameters.", "example": "\"Filmic\" setToneMappingParams [0.2, 0.30, 0.20, 0.30, 0.01, 3.750, 6, 4]", "docSyntax": "toneName setToneMappingParams params", "syntax": "toneName setToneMappingParams <any>"}, "setTriggerActivation": {"version": "CMD", "tags": "", "description": "Defines the trigger activation type. See ArmA:Mission Editor - Triggers for a thorough overview of triggers and its fields for activation, effects, etc. Since Arma 3 v1.67, \"ANYPLAYER\" activation can be used to detect any player.", "example": "_trigger setTriggerActivation [\"WEST\", \"EAST D\", true]", "docSyntax": "trigger setTriggerActivation [by, type, repeating]", "syntax": "<objTrigger> setTriggerActivation [by,type,repeating]"}, "setTriggerArea": {"version": "CMD", "tags": "", "description": "Trigger axis a, b and c (half of their x, y and z dimensions)", "example": "_trigger setTriggerArea [100, 50, 45, false];", "docSyntax": "trigger setTriggerArea [a, b, angle, isRectangle, c]", "syntax": "<objTrigger> setTriggerArea [a,b,angle,isRectangle,c]"}, "setTriggerStatements": {"version": "CMD", "tags": "", "description": "Defines trigger condition, activation and deactivation statements. Trigger condition has to return Boolean. true will activate the trigger, false will deactivate it (only if activation is set to repeat). thisList returns the same result as list command, which includes all entities in the trigger area that are capable of activating the trigger. Dead entities are excluded as well as crew in vehicles, vehicles themselves are included.", "example": "_trg setTriggerStatements [\"this\", \"hint 'trigger on'\", \"hint 'trigger off'\"]", "docSyntax": "trigger setTriggerStatements [condition, activation, deactivation]", "syntax": "<objTrigger> setTriggerStatements [condition,activation,deactivation]"}, "setTriggerText": {"version": "CMD", "tags": "", "description": "Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers.", "example": "trigger setTriggerText \"Call for support\";", "docSyntax": "trigger setTriggerText text", "syntax": "<objTrigger> setTriggerText <string>"}, "setTriggerTimeout": {"version": "CMD", "tags": "", "description": "Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time.", "example": "_trigger setTriggerTimeout [5, 10, 7, false];", "docSyntax": "trigger setTriggerTimeout [min, mid, max, interruptable]", "syntax": "<objTrigger> setTriggerTimeout [min,mid,max,interruptable]"}, "setTriggerType": {"version": "CMD", "tags": "", "description": "Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission):", "example": "_trigger setTriggerType \"END1\"", "docSyntax": "trigger setTriggerType action", "syntax": "<objTrigger> setTriggerType action"}, "setType": {"version": "CMD", "tags": "", "description": "Changes a location to the specified class. Location classes are defined in CfgLocationTypes.", "example": "myLocation setType \"RockArea\"", "docSyntax": "location setType name", "syntax": "location setType <string>"}, "setUnconscious": {"version": "CMD", "tags": "", "description": "In Arma 2 and since Arma 3 v1.64, this command sets unit into incapacitated state.", "example": "_unit setUnconscious true;", "docSyntax": "unit setUnconscious set", "syntax": "<objUnit> setUnconscious set"}, "setUnitAbility": {"version": "CMD", "tags": "", "description": "Sets skill of given unit. Unlike setSkill, setUnitAbility can set values > 1. Even though the skill command will correctly return set value, the actual unit ability will be capped to max available.", "example": "_unit setUnitAbility 1;", "docSyntax": "unit setUnitAbility value", "syntax": "<objUnit> setUnitAbility <scalar>"}, "setUnitPos": {"version": "CMD", "tags": "", "description": "Set unit position rules. This command will not change the stance of the human player, even though it will change the output of unitPos command. To change player stance use playAction or playActionNow: player playAction \"PlayerProne\"; // DOWN player playAction \"PlayerStand\"; // UP player playAction \"PlayerCrouch\"; // MIDDLE", "example": "_soldier setUnitPos \"UP\";", "docSyntax": "unit setUnitPos mode", "syntax": "<objUnit> setUnitPos mode"}, "setUnitPosWeak": {"version": "CMD", "tags": "", "description": "Set unit position rules. This command is the lowest level of priority for setting unit position and to be used in scripted FSM's. Priorities are:", "example": "_soldier disableAI \"FSM\"; _soldier setUnitPosWeak \"DOWN\";", "docSyntax": "unit setUnitPosWeak mode", "syntax": "<objUnit> setUnitPosWeak mode"}, "setUnitRank": {"version": "CMD", "tags": "", "description": "Sets rank of given unit. Possible rank values, and the associated rating that is set (not added, the value replaces previous rating) with it:", "example": "player setUnitRank \"COLONEL\";", "docSyntax": "unitName setUnitRank rank", "syntax": "<objUnit> setUnitRank rank"}, "setUnitRecoilCoefficient": {"version": "CMD", "tags": "", "description": "Proportionaly increase/decrease unit's recoil. Drives muzzle up with every shot when supplied positive number and down when negative. 0 cancels recoil.", "example": "player setUnitRecoilCoefficient 10", "docSyntax": "unitName setUnitRecoilCoefficient coefficient", "syntax": "<objUnit> setUnitRecoilCoefficient coefficient"}, "setVariable": {"version": "CMD", "tags": "", "description": "Set variable to given value in the variable space of given element. Can be used to broadcast variables over the network. To remove a variable, set it to nil (see Example 5).", "example": "_myTruck setVariable [\"TAG_myPublicVariable\", 123, true];", "docSyntax": "varspace setVariable [name, value, public]", "syntax": "varspace setVariable [<string>,<scalar>,public]"}, "setVectorDir": {"version": "CMD", "tags": "", "description": "Set object's direction vector. Up vector will remain unchanged.", "example": "player setVectorDir [5,6,1];", "docSyntax": "object setVectorDir [x,y,z]", "syntax": "<object> setVectorDir [x,y,z]"}, "setVectorDirAndUp": {"version": "CMD", "tags": "", "description": "Sets orientation of an object.", "example": "//\u00a0set exact yaw, pitch, and roll _y = 45; _p = -80; _r = 0; BRICK setVectorDirAndUp [ [sin _y * cos _p, cos _y * cos _p, sin _p], [[sin _r, -sin _p, cos _r * cos _p], -_y] call BIS_fnc_rotateVector2D ];", "docSyntax": "vehicle setVectorDirAndUp [[x1, y1, z1], [x2, y2, z2]]", "syntax": "<objVehicle> setVectorDirAndUp [[x1,y1,z1],[x2,y2,z2]]"}, "setVectorUp": {"version": "CMD", "tags": "", "description": "Set object's up vector. Direction of the object remain unchanged. Default object's vectorUp is [0,0,1].", "example": "Turn object upside down: _obj setVectorUp [0,0,-1];", "docSyntax": "object setVectorUp vectorUp", "syntax": "<object> setVectorUp vectorUp"}, "setVehicleAmmo": {"version": "CMD", "tags": "", "description": "Sets how much ammunition (compared to a full state defined by the vehicle type) the vehicle has. Note that the ammo will be added only to local turrets. To check locality of turret use turretLocal. The value ranges from 0 to 1.", "example": "player setVehicleAmmo 0;", "docSyntax": "vehicleName setVehicleAmmo value", "syntax": "vehicleName setVehicleAmmo <scalar>"}, "setVehicleArmor": {"version": "CMD", "tags": "", "description": "Sets the armor (or health for men) state of the vehicle (a value from 0 to 1). Works like setDamage, but the other way around: 1 is full health - see Example 2.", "example": "player setVehicleArmor 0.5;", "docSyntax": "vehicleName setVehicleArmor value", "syntax": "vehicleName setVehicleArmor <scalar>"}, "setVehicleId": {"version": "CMD", "tags": "", "description": "Sets ID to vehicle. By this ID vehicle is referenced by triggers and waypoints.", "example": "player setVehicleId 1", "docSyntax": "vehicleName setVehicleId id", "syntax": "vehicleName setVehicleId <scalar>"}, "setVehicleInit": {"version": "CMD", "tags": "", "description": "Attach a statement to a unit. The statement is propagated over the network in MP games, it can be executed by invoking processInitCommands.", "example": "_soldier3 setVehicleInit \"this allowFleeing 0\";", "docSyntax": "unitName setVehicleInit statement", "syntax": "<objUnit> setVehicleInit statement"}, "setVehicleLock": {"version": "CMD", "tags": "", "description": "Sets vehicle lock. Possible values:", "example": "_veh1 setVehicleLock \"LOCKED\";", "docSyntax": "vehicleName setVehicleLock lockState", "syntax": "vehicleName setVehicleLock lockState"}, "setVehiclePosition": {"version": "CMD", "tags": "", "description": "Moves the object to a given position (same as createVehicle placement algorithm). Uses either the position that's defined by the position param, or one of the marker positions from the markers array. The object is placed inside a circle with position as its center and placement as its radius. The type of placement could also be controlled with special.", "example": "player setVehiclePosition [[1000,2000], [\"Pos1\",\"Pos2\",\"Pos3\"], 0, \"CAN_COLLIDE\"]; Will place the player at either [1000,2000], or one of the three markers positions.", "docSyntax": "object setVehiclePosition [position, markers, placement, special]", "syntax": "<object> setVehiclePosition [position,markers,placement,special]"}, "setVehicleTIPars": {"version": "CMD", "tags": "", "description": "Sets the \"heat\" state of different vehicle parts for Thermal Imaging detection. This allows simulation of heated up parts of a vehicle without it actually having to utilize them - on a range from 0 to 1, 0 being cold, 1 being hot.", "example": "vehicle player setVehicleTIPars [1, 1, 1]; //\u00a0set all parts hot vehicle player setVehicleTIPars [0, 0, 0]; //\u00a0set all parts cold vehicle player setVehicleTIPars [0.5, 0.5, 0.5]; //\u00a0set all parts warm", "docSyntax": "vehicle setVehicleTIPars [engine, wheels, weapon]", "syntax": "<objVehicle> setVehicleTIPars [engine,wheels,<string>]"}, "setVehicleVarName": {"version": "CMD", "tags": "", "description": "Sets string representation of an object to a custom string.", "example": "private _playersCar = vehicle player; systemChat str _playersCar; //\u00a0displays e.g \"ce06b00# 164274: offroad_01_unarmed_f.p3d\" _playersCar setVehicleVarName \"MyOffroad\"; systemChat str _playersCar; //\u00a0displays \"MyOffroad\" isNil \"MyOffroad\"; //\u00a0true - the MyOffroad variable is not set MyOffroad = _playersCar; //\u00a0now it is publicVariable \"MyOffroad\"; //\u00a0broadcasts it over the network", "docSyntax": "object setVehicleVarName name", "syntax": "<object> setVehicleVarName <string>"}, "setVelocity": {"version": "CMD", "tags": "", "description": "Sets velocity vector of an object in m/s.", "example": "_truck1 setVelocity [20, 0, 0];", "docSyntax": "object setVelocity vector", "syntax": "<object> setVelocity vector"}, "setVelocityTransformation": {"version": "CMD", "tags": "", "description": "Interpolates and applies PositionASL, velocity, vectorDir and vectorUp to the given object based on the interval value.", "example": "_tracker setVelocityTransformation [ _currentPos, _nextPos, _currentVelocity, _nextVelocity, _currentVectorDir, _nextVectorDir, _currentVectorUp, _nextVectorUp, _interval ];", "docSyntax": "object setVelocityTransformation [fromPosASL, toPosASL, fromVelocity, toVelocity, fromVectorDir, toVectorDir, fromVectorUp, toVectorUp, interval, customCenter]", "syntax": "<object> setVelocityTransformation [fromPosASL,toPosASL,fromVelocity,toVelocity,fromVectorDir,toVectorDir,fromVectorUp,toVectorUp,interval,customCenter]"}, "setViewDistance": {"version": "CMD", "tags": "", "description": "Set rendering distance. Setting view distance to <= 0 resets the value to the client's options (set in Options\u00a0\u2192\u00a0Video\u00a0\u2192\u00a0General\u00a0\u2192\u00a0Visibility\u00a0\u2192\u00a0Overall).", "example": "setViewDistance 2250;", "docSyntax": "setViewDistance distance", "syntax": "setViewDistance <scalar>"}, "setVisibleIfTreeCollapsed": {"version": "CMD", "tags": "", "description": "Sets whether or not the object is visible even if the tree is collapsed.", "example": "_map setVisibleIfTreeCollapsed [\"_unit_0\", true]", "docSyntax": "map setVisibleIfTreeCollapsed [object, visible]", "syntax": "<objMap> setVisibleIfTreeCollapsed [<object>,visible]"}, "setWaypointBehaviour": {"version": "CMD", "tags": "", "description": "Switches the unit behaviour when the waypoint becomes active.", "example": "[_grp, 2] setWaypointBehaviour \"AWARE\";", "docSyntax": "waypoint setWaypointBehaviour mode", "syntax": "waypoint setWaypointBehaviour mode"}, "setWaypointCombatMode": {"version": "CMD", "tags": "", "description": "Changes a group's combat mode when the waypoint becomes active.", "example": "[_grp, 2] setWaypointCombatMode \"RED\";", "docSyntax": "waypoint setWaypointCombatMode mode", "syntax": "waypoint setWaypointCombatMode mode"}, "setWaypointCompletionRadius": {"version": "CMD", "tags": "", "description": "The completion radius allows units to call the waypoint completed once they are inside of the given circle.", "example": "[grp, 2] setWaypointCompletionRadius 30;", "docSyntax": "waypoint setWaypointCompletionRadius radius", "syntax": "waypoint setWaypointCompletionRadius radius"}, "setWaypointDescription": {"version": "CMD", "tags": "", "description": "Sets the description shown in the HUD while the waypoint is active.", "example": "[_grp, 2] setWaypointDescription \"Move here.\";", "docSyntax": "waypoint setWaypointDescription text", "syntax": "waypoint setWaypointDescription <string>"}, "setWaypointFormation": {"version": "CMD", "tags": "", "description": "Switches the group formation when the waypoint becomes active.", "example": "[_grp, 2] setWaypointFormation \"LINE\";", "docSyntax": "waypoint setWaypointFormation formation", "syntax": "waypoint setWaypointFormation formation"}, "setWaypointHousePosition": {"version": "CMD", "tags": "", "description": "For waypoints attached to a house, this defines the target buildingPos index.", "example": "[_grp, 2] setWaypointHousePosition 1;", "docSyntax": "waypoint setWaypointHousePosition pos", "syntax": "waypoint setWaypointHousePosition <array>"}, "setWaypointPosition": {"version": "CMD", "tags": "", "description": "Attempts to move given waypoint to a random position inside a circle with the given center and radius.", "example": "[_grp, 2] setWaypointPosition [position player, 0];", "docSyntax": "waypoint setWaypointPosition [center, radius]", "syntax": "waypoint setWaypointPosition [center,radius]"}, "setWaypointScript": {"version": "CMD", "tags": "", "description": "Attaches a script to a scripted waypoint. In early versions of Arma, command consisted of a script name and additional script arguments and the script had to use SQS-Syntax. The script receives the following arguments in _this variable: [group, position, target] + [the optional passed arguments]. The optional arguments are appended to the end of the arguments array.", "example": "[_grp, 2] setWaypointScript \"find.sqs player\";", "docSyntax": "waypoint setWaypointScript command", "syntax": "waypoint setWaypointScript command"}, "setWaypointSpeed": {"version": "CMD", "tags": "", "description": "Switches the group speed mode when the waypoint becomes active.", "example": "[_grp, 2] setWaypointSpeed \"FULL\";", "docSyntax": "waypoint setWaypointSpeed mode", "syntax": "waypoint setWaypointSpeed mode"}, "setWaypointStatements": {"version": "CMD", "tags": "", "description": "The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed.", "example": "_waypoint setWaypointStatements [\"true\", \"hint 'hello'; hint 'goodbye'\"];", "docSyntax": "waypoint setWaypointStatements [condition, statement]", "syntax": "waypoint setWaypointStatements [condition,statement]"}, "setWaypointTimeout": {"version": "CMD", "tags": "", "description": "Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid).", "example": "[_grp, 2] setWaypointTimeout [5, 10, 6];", "docSyntax": "waypoint setWaypointTimeout [min, mid, max]", "syntax": "waypoint setWaypointTimeout [min,mid,max]"}, "setWaypointType": {"version": "CMD", "tags": "", "description": "Sets the waypoint type of given waypoint. More details at Waypoints.", "example": "_myWaypoint setWaypointType \"HOLD\";", "docSyntax": "waypoint setWaypointType type", "syntax": "waypoint setWaypointType type"}, "setWaypointVisible": {"version": "CMD", "tags": "", "description": "Sets the visibility of the given waypoint in 3D HUD view (for map visibility see showWaypoint).", "example": "[grp, 2] setWaypointVisible false;", "docSyntax": "waypoint setWaypointVisible visible", "syntax": "waypoint setWaypointVisible visible"}, "setWeaponReloadingTime": {"version": "CMD", "tags": "", "description": "Sets reloading phase on the given weapon's current ammo round.", "example": "_success = _vehicle setWeaponReloadingTime [gunner (vehicle player), currentMuzzle gunner vehicle player, 0.5];", "docSyntax": "vehicle setWeaponReloadingTime [gunner, muzzleName, reloadTime]", "syntax": "<objVehicle> setWeaponReloadingTime [gunner,muzzleName,reloadTime]"}, "setWind": {"version": "CMD", "tags": "", "description": "Set current or permanent wind vector.", "example": "setWind [10, 10, true];", "docSyntax": "setWind [x, y, forced]", "syntax": "setWind [x,y,forced]"}, "setWPPos": {"version": "CMD", "tags": "", "description": "Sets waypoint position", "example": "[_groupOne, 1] setWPPos markerPos \"MarkerOne\";", "docSyntax": "waypoint setWPPos pos", "syntax": "waypoint setWPPos <array>"}, "show3DIcons": {"version": "CMD", "tags": "", "description": "Toggle the drawing of 3D icons.", "example": "-", "docSyntax": "map show3DIcons bool", "syntax": "<objMap> show3DIcons <bool>"}, "showCinemaBorder": {"version": "CMD", "tags": "", "description": "Forces drawing of cinema borders when using custom camera camCreate. This is normally used in cutscenes to indicate player has no control.", "example": "showCinemaBorder false;", "docSyntax": "showCinemaBorder show", "syntax": "showCinemaBorder show"}, "showCommandingMenu": {"version": "CMD", "tags": "", "description": "Create the commanding menu described by the given config class or menu name. When the name is empty, the current menu is hidden.", "example": "showCommandingMenu \"\";", "docSyntax": "showCommandingMenu name", "syntax": "showCommandingMenu <string>"}, "showCompass": {"version": "CMD", "tags": "", "description": "Shows or hides the compass on the map screen, if enabled for the mission and you possess the item. (default true)", "example": "showCompass false;", "docSyntax": "showCompass show", "syntax": "showCompass show"}, "showGPS": {"version": "CMD", "tags": "", "description": "Shows or hides the GPS receiver on the map screen, if enabled for the mission and you possess the item. (default false).", "example": "showGPS true;", "docSyntax": "showGPS show", "syntax": "showGPS show"}, "showHUD": {"version": "CMD", "tags": "", "description": "Enable / disable showing of HUD. Defines visibility of weapon crosshair and any informational tags that appear when pointing the weapon at an object as well as availability of the default action menu. Unfortunately, it also hides icons drawn with drawIcon3D.", "example": "showHUD false;", "docSyntax": "showHUD enable", "syntax": "showHUD <bool>"}, "showLegend": {"version": "CMD", "tags": "", "description": "Show/hide map legend.", "example": "-", "docSyntax": "map showLegend bool", "syntax": "<objMap> showLegend <bool>"}, "showMap": {"version": "CMD", "tags": "", "description": "Enable Map (default true)", "example": "showMap false", "docSyntax": "showMap show", "syntax": "showMap show"}, "shownCompass": {"version": "CMD", "tags": "", "description": "Checks if client has Compass enabled in description.ext (showCompass param) or force enabled with showCompass command.", "example": "if (shownCompass) then {hint \"You have Compass enabled\"};", "docSyntax": "shownCompass", "syntax": "shownCompass"}, "showNewEditorObject": {"version": "CMD", "tags": "", "description": "Show the add editor object dialog,type is editor object type,class is,class definition to automatically select,side filters by a certain,side,pos is position to create the object.", "example": "-", "docSyntax": "map showNewEditorObject [type,class,side,position]", "syntax": "<objMap> showNewEditorObject [type,class,<objSide>,position]"}, "shownGPS": {"version": "CMD", "tags": "", "description": "Checks if client has GPS reciever enabled in description.ext (showGPS param) or force enabled with showGPS command.", "example": "if (shownGPS) then {hint \"You have GPS reciever enabled\"};", "docSyntax": "shownGPS", "syntax": "shownGPS"}, "shownMap": {"version": "CMD", "tags": "", "description": "Checks if client has Map enabled in description.ext (showMap param) or force enabled with showMap command.", "example": "if (shownMap) then {hint \"You have Map enabled\"};", "docSyntax": "shownMap", "syntax": "shownMap"}, "shownPad": {"version": "CMD", "tags": "", "description": "Checks if client has Notepad enabled.", "example": "if (shownPad) then {hint \"You have Notepad enabled.\"};", "docSyntax": "shownPad", "syntax": "shownPad"}, "shownRadio": {"version": "CMD", "tags": "", "description": "Check if player has Radio enabled.", "example": "if (shownRadio) then {hint \"You have Radio enabled.\"};", "docSyntax": "shownRadio", "syntax": "shownRadio"}, "shownWarrant": {"version": "CMD", "tags": "", "description": "Check if player has ID card enabled. Obsolete command.", "example": "hint format [\"Your ID is %1\", [\"off\", \"on\"] select shownWarrant];", "docSyntax": "shownWarrant", "syntax": "shownWarrant"}, "shownWatch": {"version": "CMD", "tags": "", "description": "Checks if client has Watch enabled in description.ext (showWatch param) or force enabled with showWatch command.", "example": "if (shownWatch) then {hint \"You have Watch enabled\"};", "docSyntax": "shownWatch", "syntax": "shownWatch"}, "showPad": {"version": "CMD", "tags": "", "description": "Shows or hides the notebook on the map screen, if enabled for the mission. (default true). It is no longer relevant to Arma 2.", "example": "showPad false", "docSyntax": "showPad show", "syntax": "showPad show"}, "showRadio": {"version": "CMD", "tags": "", "description": "Shows or hides the radio on the map screen, if enabled for the mission and you possess the item. (default true).", "example": "showRadio false;", "docSyntax": "showRadio show", "syntax": "showRadio show"}, "showSubtitles": {"version": "CMD", "tags": "", "description": "Enables / disables showing of subtitles in a chat. Only scripted/engine chatter is affected, player manual chat is unaffected. Returns the previous state.", "example": "showSubtitles false;", "docSyntax": "showSubtitles enable", "syntax": "showSubtitles <bool>"}, "showWarrant": {"version": "CMD", "tags": "", "description": "Enable ID card.", "example": "showWarrant true", "docSyntax": "showWarrant show", "syntax": "showWarrant show"}, "showWatch": {"version": "CMD", "tags": "", "description": "Shows or hides the watch on the map screen, if enabled for the mission and you possess the item. (default true)", "example": "showWatch false;", "docSyntax": "showWatch show", "syntax": "showWatch show"}, "showWaypoint": {"version": "CMD", "tags": "", "description": "Defines how waypoints are shown to the player in map view. For 3D HUD visibility see setWaypointVisible.", "example": "[_grp, 2] showWaypoint \"ALWAYS\";", "docSyntax": "waypoint showWaypoint show", "syntax": "waypoint showWaypoint show"}, "side": {"version": "CMD", "tags": "", "description": "Returns the side of a unit, vehicle, object or location.", "example": "if (side player == west) then { hint \"Player is on the West side\" };", "docSyntax": "side target", "syntax": "<objSide> <object>"}, "sideChat": {"version": "CMD", "tags": "", "description": "Types text to the side radio channel by the specified unit.", "example": "_soldierOne sideChat \"Show this text\";", "docSyntax": "unit sideChat chatText", "syntax": "<objUnit> sideChat chatText"}, "sideEnemy": {"version": "CMD", "tags": "", "description": "The enemy side which is used for renegades. Units of this side are hostile to everyone.", "example": "if (side player == sideEnemy) then { hint \"We've got a renegade!\"; };", "docSyntax": "sideEnemy", "syntax": "sideEnemy"}, "sideFriendly": {"version": "CMD", "tags": "", "description": "The Friendly side - friendly to all, see Side relations.", "example": "if (side player == sideFriendly) then { hint \"I feel friendly today!\"; };", "docSyntax": "sideFriendly", "syntax": "sideFriendly"}, "sideLogic": {"version": "CMD", "tags": "", "description": "The Logic side. Side of Game Logics and Modules.", "example": "if (side _obj == sideLogic) then { hint \"It is a logic!\"; };", "docSyntax": "sideLogic", "syntax": "sideLogic"}, "sideRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the side radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne sideRadio \"messageOne\";", "docSyntax": "unit sideRadio radioName", "syntax": "<objUnit> sideRadio radioName"}, "sideUnknown": {"version": "CMD", "tags": "", "description": "The unknown side.", "example": "//soldier1 and soldier2 of different sides and out of sight soldier1 reveal soldier2; hint str (soldier1 nearTargets 1000); //returns: [[[1557.96,5047.4,1.32402],\"SoldierWB\",UNKNOWN,0.0155183,soldier2,5]] soldier1 reveal [soldier2,1.5]; //returns: [[[1556.52,5050.08,1.32402],\"SoldierWB\",WEST,0.0211193,soldier2,5]]", "docSyntax": "sideUnknown", "syntax": "sideUnknown"}, "simpleTasks": {"version": "CMD", "tags": "", "description": "Return all simple tasks assigned to given unit.", "example": "_tasks = simpleTasks player;", "docSyntax": "simpleTasks unit", "syntax": "simpleTasks <objUnit>"}, "simulationEnabled": {"version": "CMD", "tags": "", "description": "Check if the entity has enabled simulation.", "example": "simulationEnabled player;", "docSyntax": "simulationEnabled entity", "syntax": "simulationEnabled entity"}, "sin": {"version": "CMD", "tags": "", "description": "Sine of x.", "example": "_sine = sin 30; //\u00a0result is 0.5", "docSyntax": "sin x", "syntax": "sin x"}, "size": {"version": "CMD", "tags": "", "description": "Returns a location's size.", "example": "_locSize = size myLocation", "docSyntax": "size location", "syntax": "size location"}, "sizeOf": {"version": "CMD", "tags": "", "description": "Returns the diameter of bounding sphere of the object of given classname in meters. If you need to estimate the size of the object more precisely, use boundingBox or boundingBoxReal.", "example": "_dimension = sizeOf \"M1Abrams\"; //\u00a0Returns 10.7833", "docSyntax": "sizeOf classname", "syntax": "sizeOf classname"}, "skill": {"version": "CMD", "tags": "", "description": "Returns current skill of a unit, in range between 0 to 1, 1 being the highest level of skill.", "example": "_skill = skill unit1;", "docSyntax": "skill unit", "syntax": "skill <objUnit>"}, "skipTime": {"version": "CMD", "tags": "", "description": "Jumps the specified number of hours forward or backward.", "example": "skipTime 5;", "docSyntax": "skipTime duration", "syntax": "skipTime duration"}, "sleep": {"version": "CMD", "tags": "", "description": "Suspends code execution for given time in seconds. The sleep precision is given by a framerate, the delay given is the minimal delay expected. Must be called inside of a context which is interruptible, i.e. a script executed by execVM or spawn.", "example": "0 spawn { sleep 5; hint \"after (at least) 5 seconds...\"; };", "docSyntax": "sleep delay", "syntax": "sleep <scalar>"}, "sliderPosition": {"version": "CMD", "tags": "", "description": "Returns current thumb position of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.", "example": "_slidepos1 = sliderPosition 105;", "docSyntax": "sliderPosition idc", "syntax": "sliderPosition <scalar>"}, "sliderRange": {"version": "CMD", "tags": "", "description": "Returns limits of CT_SLIDER or CT_XSLIDER.", "example": "sliderRange _ctrlSlider params [\"_minValue\", \"_maxValue\"];", "docSyntax": "sliderRange idc", "syntax": "sliderRange <scalar>"}, "sliderSetPosition": {"version": "CMD", "tags": "", "description": "Sets current thumb position of CT_SLIDER or CT_XSLIDER.", "example": "_ctrlSlider sliderSetPosition 50;", "docSyntax": "sliderSetPosition [idc, pos]", "syntax": "sliderSetPosition [<scalar>,<array>]"}, "sliderSetRange": {"version": "CMD", "tags": "", "description": "Sets limits of CT_SLIDER or CT_XSLIDER.", "example": "sliderSetRange [101, 0, 100];", "docSyntax": "sliderSetRange [idc, min, max]", "syntax": "sliderSetRange [<scalar>,min,max]"}, "sliderSetSpeed": {"version": "CMD", "tags": "", "description": "Sets slider line step and page step delta amount as well as optional step amount of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.", "example": "sliderSetSpeed [101, 0.5, 2];", "docSyntax": "sliderSetSpeed [idc, line, page, step]", "syntax": "sliderSetSpeed [<scalar>,line,page,step]"}, "sliderSpeed": {"version": "CMD", "tags": "", "description": "Returns slider step value for line and page movement of CT_SLIDER or CT_XSLIDER.", "example": "sliderSpeed _ctrlSlider params [\"_min\", \"_max\"];", "docSyntax": "sliderSpeed idc", "syntax": "sliderSpeed <scalar>"}, "someAmmo": {"version": "CMD", "tags": "", "description": "Check if unit has some ammo.", "example": "? not (someAmmo _loon1)\u00a0: hint \"Loon1 is out of ammo!\"", "docSyntax": "someAmmo unitName", "syntax": "someAmmo <objUnit>"}, "soundVolume": {"version": "CMD", "tags": "", "description": "Returns the current sound volume (set by fadeSound).", "example": "hint str soundVolume;", "docSyntax": "soundVolume", "syntax": "soundVolume"}, "speed": {"version": "CMD", "tags": "", "description": "Object speed (in km/h). Returns relative speed of given object along Y axis. An equivalent to:", "example": "if (speed _truck1 >= 100) then {hint \"You're going too fast!\"};", "docSyntax": "speed object", "syntax": "<scalar> <object>"}, "speedMode": {"version": "CMD", "tags": "", "description": "Returns speed mode of the group, which can be any of the following:", "example": "_speed = speedMode group player;", "docSyntax": "speedMode groupName", "syntax": "speedMode groupName"}, "sqrt": {"version": "CMD", "tags": "", "description": "Returns square root of x.", "example": "private _squareRoot = sqrt 9; //\u00a0returns 3", "docSyntax": "sqrt x", "syntax": "sqrt x"}, "startLoadingScreen": {"version": "CMD", "tags": "", "description": "Shows loading screen with the given text, using the given resource. While loading screen is shown, simulation and scene drawing is disabled, user control is disabled, mouse cursor is hidden, scripts run at full speed (50ms per frame instead of 3ms per frame for Scheduled Scripts).", "example": "startLoadingScreen [\"Loading My Mission, please wait...\"];", "docSyntax": "startLoadingScreen [text, resource]", "syntax": "startLoadingScreen [<string>,resource]"}, "stop": {"version": "CMD", "tags": "", "description": "Stop AI unit.", "example": "loon1 stop true", "docSyntax": "unitName stop toggle", "syntax": "<objUnit> stop toggle"}, "stopped": {"version": "CMD", "tags": "", "description": "Check if unit is stopped by stop command.", "example": "? (stopped _loon1)\u00a0: hint \"Loon1 is stopped\"", "docSyntax": "stopped unitName", "syntax": "stopped <objUnit>"}, "str": {"version": "CMD", "tags": "", "description": "Converts any value into a string by placing \" and \" around the argument. When used on object, object debug name is returned.", "example": "_s = str (2 + 3);//\u00a0The value of _s is the string \"5\"", "docSyntax": "str value", "syntax": "str <scalar>"}, "sunOrMoon": {"version": "CMD", "tags": "", "description": "12:00 - 1 (...) - 1 18:39 - 0.911201 18:42 - 0.576303 18:45 - 0.240862 18:48 - 0 (...) - 0 06:00 - 0.0695308 06:03 - 0.404731 06:06 - 0.739519 06:09 - 1 (...) - 1 Returns the sun to moon transition state in range 0..1.", "example": "private _transitionState = sunOrMoon;", "docSyntax": "sunOrMoon", "syntax": "sunOrMoon"}, "supportInfo": {"version": "CMD", "tags": "", "description": "Creates a list of supported operators and type. Each field of array has the format: \"x:name\" Where x can be:", "example": "supportInfo \"b:select*\"; //\u00a0returns [\"b:ARRAY select SCALAR\",\"b:ARRAY select BOOL\",\"b:CONFIG select SCALAR\"]", "docSyntax": "supportInfo mask", "syntax": "supportInfo mask"}, "suppressFor": {"version": "CMD", "tags": "", "description": "Force suppressive fire from the unit.", "example": "_soldier1 suppressFor 10; //\u00a0Will force soldier1 to do suppressive fire to known enemies for 10 seconds", "docSyntax": "unit suppressFor duration", "syntax": "<objUnit> suppressFor duration"}, "surfaceIsWater": {"version": "CMD", "tags": "", "description": "Returns whether there is water at given position. In Arma 3, it also detects pond objects, but only if they are loaded in memory (normally only true if the objects are within the object view distance)", "example": "_isWater= surfaceIsWater [1000, 3000];", "docSyntax": "surfaceIsWater position", "syntax": "surfaceIsWater position"}, "surfaceNormal": {"version": "CMD", "tags": "", "description": "Returns surface normal on given position.", "example": "_normal = surfaceNormal [300, 500];", "docSyntax": "surfaceNormal position", "syntax": "surfaceNormal position"}, "surfaceType": {"version": "CMD", "tags": "", "description": "Returns what surface type is at the given position. For surface texture see surfaceTexture command.", "example": "private _surface = surfaceType [4500, 4500];", "docSyntax": "surfaceType position", "syntax": "surfaceType position"}, "switchableUnits": {"version": "CMD", "tags": "", "description": "Returns a list of playable units available for switching to", "example": "_availableUnits = switchableUnits;", "docSyntax": "switchableUnits", "syntax": "switchableUnits"}, "switchAction": {"version": "CMD", "tags": "", "description": "When used on a person, the given action is started immediately (there is no transition). Use switchmove \"\" to switch back to the default movement if there is no transition back, otherwise the person may be stuck.", "example": "soldierOne switchAction \"SitDown\"", "docSyntax": "soldier switchAction action", "syntax": "soldier switchAction action"}, "switchCamera": {"version": "CMD", "tags": "", "description": "Switch camera to given vehicle / camera. Mode is one of:", "example": "player switchCamera \"Gunner\";", "docSyntax": "target switchCamera mode", "syntax": "<object> switchCamera mode"}, "switchGesture": {"version": "CMD", "tags": "", "description": "When used on a person,the given move is started immediately (without transition).", "example": "soldierOne switchGesture \"Wave\";", "docSyntax": "soldier switchGesture moveName", "syntax": "soldier switchGesture moveName"}, "switchLight": {"version": "CMD", "tags": "", "description": "Controls whether a lamp is lit or not.", "example": "(object 12345) switchLight \"OFF\";", "docSyntax": "lamp switchLight mode", "syntax": "lamp switchLight mode"}, "switchMove": {"version": "CMD", "tags": "", "description": "Immediately applies given animation to the unit. For a smooth transition from the current animation, use playMove.", "example": "Prone: player switchMove \"AmovPpneMstpSrasWrflDnon\";", "docSyntax": "person switchMove moveName", "syntax": "<objUnit> switchMove moveName"}, "synchronizedObjects": {"version": "CMD", "tags": "", "description": "Return the list of objects synchronized with the given unit.", "example": "_objects = synchronizedObjects _logic;", "docSyntax": "synchronizedObjects unit", "syntax": "synchronizedObjects <objUnit>"}, "synchronizeObjectsAdd": {"version": "CMD", "tags": "", "description": "Add given objects to the unit's list of synchronized objects.", "example": "_acm = _groupLogic createUnit [\"AmbientCombatManager\", position player,[],0,\"NONE\"]; _acm synchronizeObjectsAdd [player];", "docSyntax": "unit synchronizeObjectsAdd objects", "syntax": "<objUnit> synchronizeObjectsAdd objects"}, "synchronizeObjectsRemove": {"version": "CMD", "tags": "", "description": "Removes given objects from the unit's list of synchronized objects.", "example": "player synchronizeObjectsRemove [_object1, _object2, _object3]", "docSyntax": "unit synchronizeObjectsRemove objects", "syntax": "<objUnit> synchronizeObjectsRemove objects"}, "synchronizeTrigger": {"version": "CMD", "tags": "", "description": "Synchronizes the trigger with zero or more waypoints.", "example": "_trigger synchronizeTrigger []", "docSyntax": "trigger synchronizeTrigger [waypoint1, waypoint2, ...]", "syntax": "<objTrigger> synchronizeTrigger [waypoint1,waypoint2,...]"}, "synchronizeWaypoint": {"version": "CMD", "tags": "", "description": "Synchronizes the trigger or the waypoint with an array of waypoints.", "example": "_myTrigger synchronizeWaypoint [[_group2, 3]];", "docSyntax": "triggerOrWaypoint synchronizeWaypoint waypoints", "syntax": "triggerOrWaypoint synchronizeWaypoint waypoints"}, "systemChat": {"version": "CMD", "tags": "", "description": "Types text to the system radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec)", "example": "systemChat \"Hello world!\";", "docSyntax": "systemChat text", "syntax": "systemChat <string>"}, "tan": {"version": "CMD", "tags": "", "description": "Tangent of x, argument in Degrees.", "example": "_tangent = tan 45 Result is 1", "docSyntax": "tan x", "syntax": "tan x"}, "targetsAggregate": {"version": "CMD", "tags": "", "description": "Aggregate candidates.", "example": "_aggregation = [player, sideEnemy, \"\", [], 0] targetsAggregate (player targetsQuery [objNull, sideUnknown, \"\", [], 0]);</code /* returns e.g [ [ [\"COUNT0\", 1], [\"SIDE0\", WEST], [\"UNIT0\", \"B_Soldier_F\"], [\"PLACE0\", [[<null>,<null>], 0, <null>]], [\"TIME0\", [-0.9, -0.9]], [\"UCOUNT0\", 1], [\"UTYPE0\", ... ] ] */ with e.g", "docSyntax": "[speaker, side, classname, position, timeMax] targetsAggregate candidates", "syntax": "[speaker,<objSide>,classname,position,timeMax] targetsAggregate candidates"}, "targetsQuery": {"version": "CMD", "tags": "", "description": "Returns sorted array of targets, known to the enquirer (including own troops), where the accuracy coefficient reflects how close the result matches the query. This command could be CPU intensive.", "example": "Return all known targets for player:_targets = player targetsQuery [objNull, sideUnknown, \"\", [], 0];", "docSyntax": "enquirer targetsQuery [targetIgnore, targetSide, targetType, targetPosition, targetMaxAge]", "syntax": "enquirer targetsQuery [targetIgnore,targetSide,targetType,targetPosition,targetMaxAge]"}, "taskChildren": {"version": "CMD", "tags": "", "description": "Return the child tasks of the specified task.", "example": "_children = taskChildren \"someTask\";", "docSyntax": "taskChildren task", "syntax": "taskChildren <objTask>"}, "taskCompleted": {"version": "CMD", "tags": "", "description": "Return if task is completed. (state Succeeded, Failed or Canceled)", "example": "_task = createSimpleTask [\"task_1\"]; _done = taskCompleted _task;", "docSyntax": "taskCompleted task", "syntax": "taskCompleted <objTask>"}, "taskDescription": {"version": "CMD", "tags": "", "description": "Returns the sub-parts of the task description. The returned Array is in format [Task description, Task title, Task waypoint description].", "example": "_taskDescArray = taskDescription _task;", "docSyntax": "taskDescription task", "syntax": "taskDescription <objTask>"}, "taskDestination": {"version": "CMD", "tags": "", "description": "Returns the position of the task (as specified by destination parameter in config).", "example": "if (!isNull currentTask player) then {taskDestination currentTaskplayer}; //return Position (Array)", "docSyntax": "taskDestination task", "syntax": "taskDestination <objTask>"}, "taskHint": {"version": "CMD", "tags": "", "description": "Shows info about new, changed or failed task. The text can contain several lines. \\n is used to set a line return.", "example": "taskHint [\"Task failed.\\nBad job!\", [1, 0, 0, 1], \"taskFailed\"];", "docSyntax": "taskHint [text, colour, icon]", "syntax": "taskHint [<string>,colour,icon]"}, "taskParent": {"version": "CMD", "tags": "", "description": "Returns the parent task of the specified task.", "example": "_parent = taskParent \"someTask\";", "docSyntax": "taskParent task", "syntax": "taskParent <objTask>"}, "taskResult": {"version": "CMD", "tags": "", "description": "Send a result of the task to the task sender.", "example": "taskResult (player createSimpleTask [\"NewTask\"]);", "docSyntax": "taskResult task", "syntax": "taskResult <objTask>"}, "taskState": {"version": "CMD", "tags": "", "description": "Returns the current state of a task. Possible return values are:", "example": "tskSomeTask = player createSimpleTask [\"NewTask\"]; hint format[\"Taskstate: %1\", taskState tskSomeTask];", "docSyntax": "taskState task", "syntax": "taskState <objTask>"}, "teamMember": {"version": "CMD", "tags": "", "description": "Return an agent for given person.", "example": "_agent = teamMember player;", "docSyntax": "teamMember person", "syntax": "teamMember <objUnit>"}, "teamName": {"version": "CMD", "tags": "", "description": "Return a name of given team.", "example": "_name = teamName _team;", "docSyntax": "teamName team", "syntax": "teamName team"}, "teams": {"version": "CMD", "tags": "", "description": "Return a list of teams in the current mission.", "example": "_teams = teams;", "docSyntax": "teams", "syntax": "teams"}, "teamSwitch": {"version": "CMD", "tags": "", "description": "Invoke the Team Switch dialog (force it even when conditions are not met). There has to be at least one playable unit for team switch to work, and for this command to work in MP, respawn type in description.ext should be 5 (SIDE).", "example": "teamSwitch;", "docSyntax": "teamSwitch", "syntax": "teamSwitch"}, "teamSwitchEnabled": {"version": "CMD", "tags": "", "description": "Check if Team Switch is currently enabled. Team Switch is enabled by default.", "example": "_isTeamSwitchEnabled = teamSwitchEnabled;", "docSyntax": "teamSwitchEnabled", "syntax": "teamSwitchEnabled"}, "teamType": {"version": "CMD", "tags": "", "description": "Returns a type of given team.", "example": "_type = teamType _team;", "docSyntax": "teamType team", "syntax": "teamType team"}, "terminate": {"version": "CMD", "tags": "", "description": "Terminates (aborts) spawned or execVMed script.", "example": "_script = [] execVM \"script.sqf\"; sleep 5; terminate _script;", "docSyntax": "terminate scriptHandle", "syntax": "terminate scriptHandle"}, "terrainIntersect": {"version": "CMD", "tags": "", "description": "Checks for intersection of terrain between two AGL positions. Returns true if intersects with terrain. For ASL variant see terrainIntersectASL.", "example": "_intersects = terrainIntersect [getPos player, getPos chopper];", "docSyntax": "terrainIntersect [start, end]", "syntax": "terrainIntersect [start,end]"}, "terrainIntersectASL": {"version": "CMD", "tags": "", "description": "Checks for intersection of terrain between two ASL positions. Returns true if intersects with terrain. For AGL variant, see terrainIntersect.", "example": "_intersects = terrainIntersectASL [getPosASL player, getPosASL chopper];", "docSyntax": "terrainIntersectASL [start, end]", "syntax": "terrainIntersectASL [start,end]"}, "text": {"version": "CMD", "tags": "", "description": "Creates a structured text containing the given plain text if argument is String. Use setAttributes to set additional attributes on the text. If the argument is location, returns location's text value (see Alt Syntax).", "example": "_stxt2 = text \"Hello world.\";", "docSyntax": "text string", "syntax": "<string> <string>"}, "textLog": {"version": "CMD", "tags": "", "description": "Dump argument value to debugging output.", "example": "textLog player", "docSyntax": "textLog anything", "syntax": "textLog anything"}, "textLogFormat": {"version": "CMD", "tags": "", "description": "Debugging output.", "example": "-", "docSyntax": "textLogFormat [format, arg1, arg2, ...]", "syntax": "textLogFormat [format,arg1,arg2,...]"}, "tg": {"version": "CMD", "tags": "", "description": "Identical to tan", "example": "_tangent = tg 45; //\u00a0Result is 1", "docSyntax": "tg x", "syntax": "tg x"}, "throw": {"version": "CMD", "tags": "", "description": "Throws an exception. The exception is processed by first catch block. This command will terminate further execution of the code.", "example": "try {throw \"invalid argument\"} catch {hint str _exception};", "docSyntax": "throw expression", "syntax": "throw expression"}, "time": {"version": "CMD", "tags": "", "description": "Returns time elapsed since mission started (in seconds). The value is different on each client. If you need unified time, use serverTime.", "example": "private _future = time + 30; waitUntil { time >= _future }; //\u00a0continue after 30 seconds", "docSyntax": "time", "syntax": "<scalar>"}, "titleCut": {"version": "CMD", "tags": "", "description": "Displays text on screen.", "example": "titleCut [\"Hello, how are you?\",\"Plain Down\",3];", "docSyntax": "titleCut [text, type, speed]", "syntax": "titleCut [<string>,type,<scalar>]"}, "titleFadeOut": {"version": "CMD", "tags": "", "description": "Terminate the title effect and set duration of the fade out phase to the given time. Same as cutFadeOut but for the title layer.", "example": "titleText [\"Hi\", \"plain\"]; titleFadeOut 2;", "docSyntax": "titleFadeOut duration", "syntax": "titleFadeOut duration"}, "titleObj": {"version": "CMD", "tags": "", "description": "Shows object defined in global config in CfgTitles", "example": "titleObj [\"BISLogo\", \"PLAIN\"]", "docSyntax": "titleObj [class, type, speed, showInMap]", "syntax": "titleObj [class,type,<scalar>,showInMap]"}, "titleRsc": {"version": "CMD", "tags": "", "description": "Displays a resource defined in RscTitles. Also see cutRsc, with these two commands you can show two different resources at once.", "example": "titleRsc [\"BIS\", \"PLAIN\"]", "docSyntax": "titleRsc [text, type, speed, showInMap]", "syntax": "titleRsc [<string>,type,<scalar>,showInMap]"}, "titleText": {"version": "CMD", "tags": "", "description": "Displays text across the screen. If used along with cutText two different texts (in different type styles) can be shown at once. The text can be displayed on multiple lines by using \"\\n\" new line characters (see Example 3).", "example": "titleText [\"Show this text\", \"PLAIN\"];", "docSyntax": "titleText [text, type, speed, showInMap, isStructuredText]", "syntax": "titleText [<string>,type,<scalar>,showInMap,isStructuredText]"}, "toArray": {"version": "CMD", "tags": "", "description": "Converts the supplied String into an Array of Numbers. The numbers in the created array are the decimal Unicode representations of characters.", "example": "hint format [\"%1\", toArray \"Aa\u0152\"];//\u00a0Returns \"[65,97,338]\"", "docSyntax": "toArray string", "syntax": "toArray <string>"}, "toLower": {"version": "CMD", "tags": "", "description": "Converts the supplied Unicode string to all lowercase characters. If the string doesn't have characters with codes > 255, you could benefit from faster conversion using toLowerANSI", "example": "hint toLower \"AaBb1\"; // returns \"aabb1\"", "docSyntax": "toLower string", "syntax": "toLower <string>"}, "toString": {"version": "CMD", "tags": "", "description": "Converts the supplied Array of Numbers into a String through Unicode characters representation conversion, or provided Code to compilable String.", "example": "hint toString [65,97,338]; returns \"Aa\u0152\"", "docSyntax": "toString array", "syntax": "toString <array>"}, "toUpper": {"version": "CMD", "tags": "", "description": "Converts the supplied Unicode string to all uppercase characters. If the string doesn't have characters with codes > 255, you could benefit from faster conversion using toUpperANSI", "example": "hint toUpper \"AaBb1\"; // returns \"AABB1\"", "docSyntax": "toUpper string", "syntax": "toUpper <string>"}, "triggerActivated": {"version": "CMD", "tags": "", "description": "Returns true if the trigger has been activated.", "example": "if (triggerActivated trg1) then { //\u00a0code };", "docSyntax": "triggerActivated trigger", "syntax": "triggerActivated <objTrigger>"}, "triggerActivation": {"version": "CMD", "tags": "", "description": "Returns trigger activation in the form [by, type, repeating].", "example": "_activation = triggerActivation someTrigger", "docSyntax": "triggerActivation trigger", "syntax": "triggerActivation <objTrigger>"}, "triggerArea": {"version": "CMD", "tags": "", "description": "Returns currently monitored trigger area. Since Arma 3 v1.60, the command returns 3rd dimension for the monitored area. If height is not set, the value for it would be -1.", "example": "_area = triggerArea sensor1; //\u00a0result is [200, 120, 45, false, -1];", "docSyntax": "triggerArea trigger", "syntax": "triggerArea <objTrigger>"}, "triggerAttachedVehicle": {"version": "CMD", "tags": "", "description": "Returns vehicle attached to the trigger (for example using triggerAttachVehicle).", "example": "return = triggerAttachedVehicle triggerName;", "docSyntax": "triggerAttachedVehicle trigger", "syntax": "triggerAttachedVehicle <objTrigger>"}, "triggerAttachObject": {"version": "CMD", "tags": "", "description": "Assigns a static object to the trigger. The activation source is changed to \"STATIC\".", "example": "_trigger triggerAttachObject 1234;", "docSyntax": "triggerName triggerAttachObject objectId", "syntax": "triggerName triggerAttachObject <scalar>"}, "triggerAttachVehicle": {"version": "CMD", "tags": "", "description": "Specifies the entity which will activate the selected trigger.", "example": "trigger triggerAttachVehicle [player];", "docSyntax": "triggerName triggerAttachVehicle objects", "syntax": "triggerName triggerAttachVehicle objects"}, "triggerStatements": {"version": "CMD", "tags": "", "description": "Returns trigger statements.", "example": "_statements = triggerStatements someTrigger;", "docSyntax": "triggerStatements trigger", "syntax": "triggerStatements <objTrigger>"}, "triggerText": {"version": "CMD", "tags": "", "description": "Returns trigger text.", "example": "_text = triggerText triggerName;", "docSyntax": "triggerText trigger", "syntax": "triggerText <objTrigger>"}, "triggerTimeout": {"version": "CMD", "tags": "", "description": "Returns trigger timeout in the form [min, mid, max, interruptable].", "example": "_timeOut = triggerTimeout someTrigger;", "docSyntax": "triggerTimeout trigger", "syntax": "triggerTimeout <objTrigger>"}, "triggerType": {"version": "CMD", "tags": "", "description": "Returns trigger type (see setTriggerType).", "example": "_type = triggerType tr1;", "docSyntax": "triggerType trigger", "syntax": "triggerType <objTrigger>"}, "try": {"version": "CMD", "tags": "", "description": "Defines a try-catch structure. This sets up an exception handling block. Any thrown exception in a try block is caught in a catch block. The structured exception block has the following form: try { /* block that can throw exception */ } catch { /* block that processes the exception. Exception is described in the _exception variable */ };", "example": "try {throw \"invalid argument\"} catch {hint str _exception};", "docSyntax": "try code", "syntax": "try <code>"}, "turretUnit": {"version": "CMD", "tags": "", "description": "Returns the unit in the vehicle turret. Driver turret [-1] is supported since Arma 3 v1.58. To find turret path of known unit see unitTurret", "example": "_vehicle turretUnit _thisTurret;", "docSyntax": "vehicle turretUnit turretpath", "syntax": "<objVehicle> turretUnit turretpath"}, "type": {"version": "CMD", "tags": "", "description": "Returns a string of a Location's class name or Task's name (same as taskName).", "example": "_locationType = type myLocation;", "docSyntax": "type location", "syntax": "type location"}, "typeName": {"version": "CMD", "tags": "", "description": "Returns the data type of an expression. The type is returned as on of the following all-uppercase strings:", "example": "_msg = \"hello\"; _result = typeName _msg; //_result will be \"STRING\"", "docSyntax": "typeName anything", "syntax": "typeName anything"}, "typeOf": {"version": "CMD", "tags": "", "description": "Returns the config class name of given object or \"\" if object does not have a config class.", "example": "if (typeOf vehicle player == \"B_Heli_Light_01_armed_F\") then { hint \"Player is in a AH-9 Pawnee\"; };", "docSyntax": "typeOf object", "syntax": "typeOf <object>"}, "uiNamespace": {"version": "CMD", "tags": "", "description": "Returns the global namespace attached to user interface.", "example": "uiNamespace setVariable [\"LIB_interruptDisplay\", _display];", "docSyntax": "uiNamespace", "syntax": "uiNamespace"}, "uiSleep": {"version": "CMD", "tags": "", "description": "Suspend execution of script for given uitime. uiSleep is a sleep method to delay script execution where script time/simulation time is stopped. uiSleep is basically using the system time (uiTime more specifically) and not simulation time. So in the cases where sleep would get stuck indefinitely, uiSleep can still be used to effectively delay script execution for example in pause or in a mission briefing or an editor or when simulation is paused in general.", "example": "uiSleep 0.5;", "docSyntax": "uiSleep delay", "syntax": "uiSleep <scalar>"}, "unassignTeam": {"version": "CMD", "tags": "", "description": "Unassigns the unit (in the case of a vehicle its commander unit) from his team. This is equal to unit assignTeam \"MAIN\".", "example": "unassignTeam _soldier2", "docSyntax": "unassignTeam vehicleName", "syntax": "unassignTeam vehicleName"}, "unassignVehicle": {"version": "CMD", "tags": "", "description": "Unassigns individual unit from a vehicle, i.e removes assignedVehicleRole of the unit. If the unit is currently in that vehicle, the group leader will issue an order to disembark.", "example": "unassignVehicle player;", "docSyntax": "unassignVehicle unitName", "syntax": "unassignVehicle <objUnit>"}, "unitBackpack": {"version": "CMD", "tags": "", "description": "Returns unit's backpack", "example": "private _myBackpack = unitBackpack player;", "docSyntax": "unitBackpack unit", "syntax": "unitBackpack <objUnit>"}, "unitPos": {"version": "CMD", "tags": "", "description": "Return the unit position rules.", "example": "hint str unitPos _unit;", "docSyntax": "unitPos unit", "syntax": "unitPos <objUnit>"}, "unitReady": {"version": "CMD", "tags": "", "description": "Check if the unit is ready. Unit is busy when it is given some command like move, until the command is finished.", "example": "private _it = unitReady _soldierOne;", "docSyntax": "unitReady unitName", "syntax": "unitReady <objUnit>"}, "unitRecoilCoefficient": {"version": "CMD", "tags": "", "description": "Returns recoil coefficient of a soldier.", "example": "_myRecoil = unitRecoilCoefficient player", "docSyntax": "unitRecoilCoefficient soldier", "syntax": "unitRecoilCoefficient soldier"}, "units": {"version": "CMD", "tags": "", "description": "Returns an array with all the units in the group or group of the unit.", "example": "_myUnitCount = count units player;", "docSyntax": "units type", "syntax": "units type"}, "unitsBelowHeight": {"version": "CMD", "tags": "", "description": "Returns units in group/array below given Above Terrain Level (ATL) height.", "example": "_allOnGroudUnits = group player unitsBelowHeight 10;", "docSyntax": "units unitsBelowHeight height", "syntax": "units unitsBelowHeight height"}, "unlockAchievement": {"version": "CMD", "tags": "", "description": "Unlocks the given achievement. The achievements are listed in CfgAchievements, however none of the currently listed achievements is used in Arma 3, hence the command always returns false.", "example": "_isUnlocked = unlockAchievement \"Hunter\";", "docSyntax": "unlockAchievement name", "syntax": "unlockAchievement <string>"}, "unregisterTask": {"version": "CMD", "tags": "", "description": "Unregisters a task type from given agent. The task type is the name given in CfgTasks classes in name property. Also available from registeredTasks array.", "example": "teamMember _agent unregisterTask (registeredTasks select 0);", "docSyntax": "teamMember unregisterTask name", "syntax": "teamMember unregisterTask <string>"}, "updateDrawIcon": {"version": "CMD", "tags": "", "description": "Updates the icon to be shown in 2D editor for the specified editor,object. If maintain size is false,icon will not scale depending on the,scale of the map. If maintain size is a number,the icon will maintain,size if map scale is below that number.", "example": "-", "docSyntax": "map updateDrawIcon [object,string identifier,color,offset,width,height,maintain size?,angle,shadow]", "syntax": "<objMap> updateDrawIcon [<object>,<string> identifier,<scalar>,offset,width,height,maintain size?,angle,shadow]"}, "updateMenuItem": {"version": "CMD", "tags": "", "description": "Sets the text and command for the menu item. index is index as returned from addMenuItem command. command is optional.", "example": "-", "docSyntax": "map updateMenuItem [menu item index,text,command]", "syntax": "<objMap> updateMenuItem [menu <objItem> <scalar>,<string>,command]"}, "updateObjectTree": {"version": "CMD", "tags": "", "description": "Update the editor object tree.", "example": "updateObjectTree _ctrlMap;", "docSyntax": "updateObjectTree map", "syntax": "updateObjectTree <objMap>"}, "useAudioTimeForMoves": {"version": "CMD", "tags": "", "description": "Switch between elapsed game time and audio time being used as animation timer. Used for audio/animation synchronization.", "example": "player useAudioTimeForMoves true", "docSyntax": "soldier useAudioTimeForMoves toggle", "syntax": "soldier useAudioTimeForMoves toggle"}, "vectorDir": {"version": "CMD", "tags": "", "description": "Returns object direction vector in world space ([x,y,z]).", "example": "_dirVector = vectorDir _unit;", "docSyntax": "vectorDir object", "syntax": "vectorDir <object>"}, "vectorUp": {"version": "CMD", "tags": "", "description": "Returns up vector of the given object in format Vector3D.", "example": "_objUpVector = vectorUp myObject;", "docSyntax": "vectorUp object", "syntax": "vectorUp <object>"}, "vehicle": {"version": "CMD", "tags": "", "description": "Vehicle in which given unit is mounted. If none, unit is returned. Alternatively, use objectParent", "example": "SQS ? vehicle player != player\u00a0: hint \"Player is in a vehicle\"", "docSyntax": "vehicle unitName", "syntax": "<objVehicle> <objUnit>"}, "vehicleChat": {"version": "CMD", "tags": "", "description": "Types text to the vehicle radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally, see remoteExec.", "example": "vehicle player vehicleChat \"Show this text\";", "docSyntax": "vehicleName vehicleChat chatText", "syntax": "vehicleName vehicleChat chatText"}, "vehicleRadio": {"version": "CMD", "tags": "", "description": "Sends the audio message to the vehicle radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).", "example": "_soldierOne vehicleRadio \"messageOne\";", "docSyntax": "unit vehicleRadio radioName", "syntax": "<objUnit> vehicleRadio radioName"}, "vehicles": {"version": "CMD", "tags": "", "description": "Returns an array of all vehicles available to current client. This command returns both empty and crewed vehicles", "example": "_vehicles = vehicles;", "docSyntax": "vehicles", "syntax": "vehicles"}, "vehicleVarName": {"version": "CMD", "tags": "", "description": "Returns the variable name that contains a primary editor reference to this object. This is the variable given in the Insert Unit dialog / name field in the editor. It can be changed using setVehicleVarName.", "example": "hint vehicleVarName player;", "docSyntax": "vehicleVarName object", "syntax": "vehicleVarName <object>"}, "velocity": {"version": "CMD", "tags": "", "description": "Returns the velocity of the object as vector in m/s.", "example": "_vector = velocity jeep;", "docSyntax": "velocity object", "syntax": "velocity <object>"}, "verifySignature": {"version": "CMD", "tags": "", "description": "Check if file is signed by any key present in game keys folders. On clients, it does not check against the keys accepted by server.", "example": "verifySignature \"@MyAddon\\Addons\\SomeAddon.pbo\";", "docSyntax": "verifySignature filename", "syntax": "verifySignature filename"}, "viewDistance": {"version": "CMD", "tags": "", "description": "Returns the rendering distance.", "example": "hint (\"my view distance is \" + str viewDistance + \" meters\");", "docSyntax": "viewDistance", "syntax": "viewDistance"}, "visibleMap": {"version": "CMD", "tags": "", "description": "Return true if the main map is shown (active).", "example": "if (visibleMap) then {hint \"You're showing the map\u00a0!\"}", "docSyntax": "visibleMap", "syntax": "visibleMap"}, "visiblePosition": {"version": "CMD", "tags": "", "description": "Returns an object's rendered position (z value above surface underneath) in render time scope. Same as getPosVisual.", "example": "playerRenderedPos = visiblePosition player;", "docSyntax": "visiblePosition object", "syntax": "visiblePosition <object>"}, "visiblePositionASL": {"version": "CMD", "tags": "", "description": "Returns an object's rendered ASL position (z value above sea level) in render time scope.", "example": "_playerRenderedPosASL = visiblePositionASL player;", "docSyntax": "visiblePositionASL object", "syntax": "visiblePositionASL <object>"}, "waitUntil": {"version": "CMD", "tags": "", "description": "Suspends execution of scheduled script until the given condition satisfied.", "example": "waitUntil { not alive player };", "docSyntax": "waitUntil condition", "syntax": "waitUntil condition"}, "waypointAttachedObject": {"version": "CMD", "tags": "", "description": "Gets the object attached to the waypoint.", "example": "waypointAttachedObject [groupOne,1]", "docSyntax": "waypointAttachedObject waypoint", "syntax": "waypointAttachedObject waypoint"}, "waypointAttachedVehicle": {"version": "CMD", "tags": "", "description": "Gets the vehicle attached to the waypoint.", "example": "waypointAttachedVehicle [groupOne, 1];", "docSyntax": "waypointAttachedVehicle waypoint", "syntax": "waypointAttachedVehicle waypoint"}, "waypointAttachObject": {"version": "CMD", "tags": "", "description": "Attaches a static object via it is numeric ID to the given waypoint.", "example": "[_grp, 2] waypointAttachObject 1234;", "docSyntax": "waypoint waypointAttachObject objectID", "syntax": "waypoint waypointAttachObject <scalar>"}, "waypointAttachVehicle": {"version": "CMD", "tags": "", "description": "Attaches the Waypoint to the provided vehicle Object.", "example": "[_grp, 2] waypointAttachVehicle vehicle player;", "docSyntax": "waypoint waypointAttachVehicle vehicleName", "syntax": "waypoint waypointAttachVehicle vehicleName"}, "waypointBehaviour": {"version": "CMD", "tags": "", "description": "Gets the waypoint behavior.", "example": "waypointBehaviour [groupOne,1]", "docSyntax": "waypointBehaviour waypoint", "syntax": "waypointBehaviour waypoint"}, "waypointCombatMode": {"version": "CMD", "tags": "", "description": "Gets the waypoint's combat mode setting.", "example": "waypointCombatMode [groupOne, 1];", "docSyntax": "waypointCombatMode waypoint", "syntax": "waypointCombatMode waypoint"}, "waypointCompletionRadius": {"version": "CMD", "tags": "", "description": "Gets the radius around the waypoint where the waypoint is completed.", "example": "_radius = waypointCompletionRadius [groupOne, 1];", "docSyntax": "waypointCompletionRadius waypoint", "syntax": "waypointCompletionRadius waypoint"}, "waypointDescription": {"version": "CMD", "tags": "", "description": "Gets the waypoint description.", "example": "waypointDescription [groupOne,1]", "docSyntax": "waypointDescription waypoint", "syntax": "waypointDescription waypoint"}, "waypointFormation": {"version": "CMD", "tags": "", "description": "Gets the waypoint formation. Possible values are:", "example": "waypointFormation [groupOne,1]", "docSyntax": "waypointFormation waypoint", "syntax": "waypointFormation waypoint"}, "waypointHousePosition": {"version": "CMD", "tags": "", "description": "Returns buildingPos index assigned to the waypoint.", "example": "waypointHousePosition [groupOne,1]", "docSyntax": "waypointHousePosition waypoint", "syntax": "waypointHousePosition waypoint"}, "waypointPosition": {"version": "CMD", "tags": "", "description": "Returns Position of the given waypoint.", "example": "_wPos = waypointPosition [_groupOne, 1];", "docSyntax": "waypointPosition waypoint", "syntax": "waypointPosition waypoint"}, "waypoints": {"version": "CMD", "tags": "", "description": "Returns an array of waypoints for the specified unit/group.", "example": "waypoints player;", "docSyntax": "waypoints groupName", "syntax": "waypoints groupName"}, "waypointScript": {"version": "CMD", "tags": "", "description": "Gets the waypoint script.", "example": "waypointScript [groupOne,1]", "docSyntax": "waypointScript waypoint", "syntax": "waypointScript waypoint"}, "waypointShow": {"version": "CMD", "tags": "", "description": "A getter for showWaypoint command.", "example": "_wpShow = waypointShow [groupOne, 1];", "docSyntax": "waypointShow waypoint", "syntax": "waypointShow waypoint"}, "waypointSpeed": {"version": "CMD", "tags": "", "description": "Gets the waypoint speed. Possible values are:", "example": "_speed = waypointSpeed [groupOne,1];", "docSyntax": "waypointSpeed waypoint", "syntax": "waypointSpeed waypoint"}, "waypointStatements": {"version": "CMD", "tags": "", "description": "Gets the waypoint statements.", "example": "waypointStatements [groupOne,1]", "docSyntax": "waypointStatements waypoint", "syntax": "waypointStatements waypoint"}, "waypointTimeout": {"version": "CMD", "tags": "", "description": "Gets the waypoint timeout values.", "example": "waypointTimeout [groupOne,1]", "docSyntax": "waypointTimeout waypoint", "syntax": "waypointTimeout waypoint"}, "waypointType": {"version": "CMD", "tags": "", "description": "Gets the waypoint type.", "example": "private _type = waypointType [groupOne, 1];", "docSyntax": "waypointType waypoint", "syntax": "waypointType waypoint"}, "waypointVisible": {"version": "CMD", "tags": "", "description": "A getter for setWaypointVisible command.", "example": "_visible = waypointVisible [groupOne, 1];", "docSyntax": "waypointVisible waypoint", "syntax": "waypointVisible waypoint"}, "weaponDirection": {"version": "CMD", "tags": "", "description": "Returns the direction that the vehicle weapon is aiming in. For addons the weapon name must be an entry in CfgWeapons.", "example": "_weaponVectorDir = player weaponDirection currentWeapon player;", "docSyntax": "vehicleName weaponDirection weaponName", "syntax": "vehicleName weaponDirection weaponName"}, "weapons": {"version": "CMD", "tags": "", "description": "Returns array of names of all unit's weapons.", "example": "_wArray = weapons player;", "docSyntax": "weapons unit", "syntax": "weapons <objUnit>"}, "weaponState": {"version": "CMD", "tags": "", "description": "Returns the given or currently selected weapon state for unit or vehicle. With syntax 2, if no optional arguments are present, currently selected weapon is queried.", "example": "_wsPlayer = weaponState player; //\u00a0[\"arifle_MXC_ACO_F\",\"arifle_MXC_ACO_F\",\"Single\",\"30Rnd_65x39_caseless_mag\",30,0,0]", "docSyntax": "weaponState unit", "syntax": "weaponState <objUnit>"}, "weaponsTurret": {"version": "CMD", "tags": "", "description": "Returns all weapons of given turret. Use turret path [-1] for driver's turret.", "example": "_weapons = vehicle player weaponsTurret [0,0]", "docSyntax": "vehicle weaponsTurret turretPath", "syntax": "<objVehicle> weaponsTurret turretPath"}, "WFSideText": {"version": "CMD", "tags": "", "description": "Returns the unlocalized text value of a side or an object's/group's side.", "example": "WFSideText player;", "docSyntax": "WFSideText value", "syntax": "WFSideText <scalar>"}, "wind": {"version": "CMD", "tags": "", "description": "Returns the current wind vector (in m/s) as array [x, y, z].", "example": "_windArray = wind;", "docSyntax": "wind", "syntax": "wind"}, "with": {"version": "CMD", "tags": "", "description": "Creates a With Type that is used inside a do construct in order to execute code inside a given namespace.", "example": "_myWithType = with uiNamespace;", "docSyntax": "with namespace", "syntax": "with namespace"}, "worldName": {"version": "CMD", "tags": "", "description": "Return the name of the currently loaded world.", "example": "private _name = worldName;", "docSyntax": "worldName", "syntax": "worldName"}, "worldToModel": {"version": "CMD", "tags": "", "description": "Converts position from world space to object model space.", "example": "_relPos = myObject worldToModel [0,0,0];", "docSyntax": "model worldToModel position", "syntax": "model worldToModel position"}, "worldToScreen": {"version": "CMD", "tags": "", "description": "Converts position in world space into screen (UI) space. If a specified position is not within the current screen view, an empty array is returned.", "example": "_screenPos = worldToScreen ASLtoAGL getPosASL soldier1;", "docSyntax": "worldToScreen position", "syntax": "worldToScreen position"}, "BIS_fnc_3Dcredits": {"version": "FNC", "tags": "", "description": "Displays structured text in 3D world. GUI layer for indicator is 2733.", "example": "[\"<t size='2'>Hello World</t>\", getPos helloWorld, 15, 0] spawn BIS_fnc_3Dcredits;", "docSyntax": "[text, position, minDis, fadeDis] spawn BIS_fnc_3Dcredits", "syntax": "[<string>,position,minDis,fadeDis] spawn BIS_fnc_3Dcredits"}, "BIS_fnc_AAN": {"version": "FNC", "tags": "", "description": "Add an AAN overlay to the screen, with one headline and a rolling text on the bottom.", "example": "[ parseText \"<t size='2'>AAN live in Takistan</t>\", parseText \"Weather coming up hot and steamy - Takistan shelled again from border area\" ] spawn BIS_fnc_AAN;", "docSyntax": "[headline, rollingText] spawn BIS_fnc_AAN", "syntax": "[headline,rollingText] spawn BIS_fnc_AAN"}, "BIS_fnc_absSpeed": {"version": "FNC", "tags": "", "description": "Returns absolute speed of a vehicle in kilometers per hour (km/h)", "example": "if (((vehicle player) call BIS_fnc_absSpeed) > 150) then { hint \"There goes my driver's license\u00a0:(\"; };", "docSyntax": "Object call BIS_fnc_absSpeed", "syntax": "<object> call BIS_fnc_absSpeed"}, "BIS_fnc_addEvidence": {"version": "FNC", "tags": "", "description": "/******************************************************************************* * * version: 1.0 * name: Add evidence * description: add an evidence value to global campaign variable * paramater: evidence variable name (defined in init.sqf of campaign mission C1) or simply number (scalar) * return value: none *", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_areEqual": {"version": "FNC", "tags": "", "description": "This function returns true if all of the passed data elements are of the same type and value. One or more elements can be passed.", "example": "[0, \"0\"] call BIS_fnc_areEqual; //\u00a0false [0, 1 + 1 - 2] call BIS_fnc_areEqual; //\u00a0true [str 50, \"50\"] call BIS_fnc_areEqual; //\u00a0true", "docSyntax": "[anything1, anything2, \u2026, anythingN] call BIS_fnc_areEqual", "syntax": "[anything1,anything2,\u2026,anythingN] call BIS_fnc_areEqual"}, "BIS_fnc_arithmeticMean": {"version": "FNC", "tags": "", "description": "Returns the arithmetic mean (\"average value\") of an array of numbers.", "example": "[1, 3] call BIS_fnc_arithmeticMean; //\u00a0returns 2", "docSyntax": "numbers call BIS_fnc_arithmeticMean", "syntax": "numbers call BIS_fnc_arithmeticMean"}, "BIS_fnc_arrayCompare": {"version": "FNC", "tags": "", "description": "This function checks if two arrays are containing the same elements in the same order.", "example": "_array1 = [0,1,2]; _array2 = [0,1,2]; [_array1, _array2] call BIS_fnc_arrayCompare; // returns true", "docSyntax": "[array1, array2] call BIS_fnc_arrayCompare", "syntax": "[array1,array2] call BIS_fnc_arrayCompare"}, "BIS_fnc_arrayFindDeep": {"version": "FNC", "tags": "", "description": "Searches an array for a specific value and returns its index.", "example": "[ [1,2,3,4,5], 3 ] call BIS_fnc_arrayFindDeep;//Returns [2]", "docSyntax": "[array,value] call BIS_fnc_arrayFindDeep", "syntax": "[<array>,<scalar>] call BIS_fnc_arrayFindDeep"}, "BIS_fnc_arrayInsert": {"version": "FNC", "tags": "", "description": "Inserts the elements of one array into another, at a specified index. Neither arrays are touched by reference, a new array is returned.", "example": "_result = [[0,1,2,3,4], [\"a\",\"b\",\"c\"], 1] call BIS_fnc_arrayInsert; //\u00a0returns [0,\"a\",\"b\",\"c\",1,2,3,4]", "docSyntax": "[array1, array2, index] call BIS_fnc_arrayInsert", "syntax": "[array1,array2,<scalar>] call BIS_fnc_arrayInsert"}, "BIS_fnc_arrayPop": {"version": "FNC", "tags": "", "description": "This function removes the last (rightmost) element of an array and returns it.", "example": "_array = [1,2,3,4]; _removedElement = _array call BIS_fnc_arrayPop; // _array is now [1,2,3] and _removedElement = 4", "docSyntax": "array call BIS_fnc_arrayPop", "syntax": "<array> call BIS_fnc_arrayPop"}, "BIS_fnc_arrayPush": {"version": "FNC", "tags": "", "description": "This function adds an element to the end of an array and returns the array.", "example": "_newArray = [[0,1,2], 3] call BIS_fnc_arrayPush; // _newArray is [0,1,2,3]", "docSyntax": "[array, element] call BIS_fnc_arrayPush", "syntax": "[<array>,element] call BIS_fnc_arrayPush"}, "BIS_fnc_arrayPushStack": {"version": "FNC", "tags": "", "description": "This function is similar to the array push function; however, it pushes the contents of an array onto the stack array.", "example": "_array = [0,1,2]; [_array, [3,4,5]] call BIS_fnc_arrayPushStack; // _array is [0,1,2,3,4,5]", "docSyntax": "[array1, array2] call BIS_fnc_arrayPushStack", "syntax": "[array1,array2] call BIS_fnc_arrayPushStack"}, "BIS_fnc_arrayShift": {"version": "FNC", "tags": "", "description": "This function removes the first (leftmost) element of an array and returns it.", "example": "_myArray = [\"2\", \"report\", \"status\"]; _removedElement = [_myArray] call BIS_fnc_arrayShift; //\u00a0array is within an array _removedElement == \"2\"; //\u00a0true _myArray isEqualTo [\"report\", \"status\"]; //\u00a0true", "docSyntax": "[array] call BIS_fnc_arrayShift", "syntax": "[<array>] call BIS_fnc_arrayShift"}, "BIS_fnc_arrayUnShift": {"version": "FNC", "tags": "", "description": "This function adds an element to the beginning of an array and returns the array. The array is passed by reference so changes inside the function will be reflected outside of it.", "example": "_array = [2,3,4]; [_array, 1] call BIS_fnc_arrayUnShift; // _array is now [1,2,3,4]", "docSyntax": "[array, value] call BIS_fnc_arrayUnShift", "syntax": "[<array>,<scalar>] call BIS_fnc_arrayUnShift"}, "BIS_fnc_boundingBoxCorner": {"version": "FNC", "tags": "", "description": "/* Description: Returns position of all four bounding box corners OR Returns position of the nearest corner to the given position Parameter(s): _this: OBJECT - object with bounding box OR _this: ARRAY in format: 0: OBJECT - object with bounding box 1: ARRAY or OBJECT - position for which the nearest corner is returned Returns: ARRAY in format [pos1, pos2, pos3, pos4] - 4 corners of the bounding box OR ARRAY in format [x,y,z] - position of the nearest corner Example 1: _corners = car call BIS_fnc_boundingBoxCorner; Example 2: _nearestCorner = [car, player] call BIS_fnc_boundingBoxCorner; */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_boundingBoxDimensions": {"version": "FNC", "tags": "", "description": "Returns the sizes of the three dimensions of an object's bounding box.", "example": "[player] call BIS_fnc_boundingBoxDimensions;//Returns [1.6,2.2,2] for soldier", "docSyntax": "[object] call BIS_fnc_boundingBoxDimensions", "syntax": "[<object>] call BIS_fnc_boundingBoxDimensions"}, "BIS_fnc_boundingBoxMarker": {"version": "FNC", "tags": "", "description": "Creates marker on object with size of objects' bounding box.", "example": "BIS_Vehicle call BIS_fnc_boundingBoxMarker;", "docSyntax": "object call BIS_fnc_boundingBoxMarker", "syntax": "<object> call BIS_fnc_boundingBoxMarker"}, "BIS_fnc_boundingCircle": {"version": "FNC", "tags": "", "description": "Returns size of bounding circle (calculated from X and Y coordinates). This is actually the 2D horizontal diagonal length of the boundingBox.", "example": "vehicle player call BIS_fnc_boundingCircle;", "docSyntax": "object call BIS_fnc_boundingCircle", "syntax": "<object> call BIS_fnc_boundingCircle"}, "BIS_fnc_classMagazine": {"version": "FNC", "tags": "", "description": "Returns class of magazine given by string.", "example": "_magazineConfig = currentMagazine player call BIS_fnc_classMagazine;", "docSyntax": "magazineClass call BIS_fnc_classMagazine", "syntax": "magazineClass call BIS_fnc_classMagazine"}, "BIS_fnc_classWeapon": {"version": "FNC", "tags": "", "description": "Returns class of weapon given by string.", "example": "_weaponConfig = currentWeapon player call BIS_fnc_classWeapon;", "docSyntax": "weaponClass call BIS_fnc_classWeapon", "syntax": "weaponClass call BIS_fnc_classWeapon"}, "BIS_fnc_colorRGBtoHTML": {"version": "FNC", "tags": "", "description": "Converts RGB color format to HTML color format.", "example": "_htmlColor = [0,0,0,1] call BIS_fnc_colorRGBtoHTML; // will return #000000", "docSyntax": "colorArray call BIS_fnc_colorRGBtoHTML", "syntax": "colorArray call BIS_fnc_colorRGBtoHTML"}, "BIS_fnc_commsMenuCreate": {"version": "FNC", "tags": "", "description": "Creates the global communications menu, if it is not already created. All entries are invisible by default. Unhide appropriate sections by using BIS_fnc_commsMenuToggleVisibility.", "example": "call BIS_fnc_commsMenuCreate;", "docSyntax": "call BIS_fnc_commsMenuCreate", "syntax": "call BIS_fnc_commsMenuCreate"}, "BIS_fnc_commsMenuToggleAvailability": {"version": "FNC", "tags": "", "description": "/* File: fn_commsMenuToggleAvailability.sqf Description: Enables or disables certain sections of the global communications menu. Parameter(s): _this select 0: index (Scalar) or list of indices (Array of Scalars) or section name (String) \"som\" - SecOps section \"wf\" - Warfare section _this select 1: mode (Scalar) 0 - disable 1 - enable Returns: Success flag (Boolean) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_commsMenuToggleVisibility": {"version": "FNC", "tags": "", "description": "/* File: fn_commsMenuToggleVisibility.sqf Description: Shows or hides certain sections of the global communications menu. Parameter(s): _this select 0: index (Scalar) or list of indices (Array of Scalars) or section name (String) \"som\" - SecOps section \"wf\" - Warfare section _this select 1: mode (Scalar) 0 - hide 1 - show Returns: Success flag (Boolean) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_conditionalSelect": {"version": "FNC", "tags": "", "description": "This returns a sub-array of elements that satisfy a specific condition in the order they have been passed.", "example": "[[10, 0, 8, 2, 6, 4], { _x > 5 }] call BIS_fnc_conditionalSelect; //\u00a0will return [10,8,6]", "docSyntax": "[items, condition] call BIS_fnc_conditionalSelect", "syntax": "[items,condition] call BIS_fnc_conditionalSelect"}, "BIS_fnc_configViewer": {"version": "FNC", "tags": "", "description": "Opens the Splendid\u2122 Config Viewer.", "example": "call BIS_fnc_configViewer;", "docSyntax": "[parent, cfg, showOk, onSelect, onAdd, header] call BIS_fnc_configViewer", "syntax": "[parent,cfg,showOk,onSelect,onAdd,header] call BIS_fnc_configViewer"}, "BIS_fnc_createMenu": {"version": "FNC", "tags": "", "description": "/* File: fn_createMenu.sqf Description: Create custom commanding menu (with multiple pages if necessary). Parameter(s): _this select 0 - STRING or ARRAY - Name of menu or [Name, Context sensitive] _this select 1 - STRING - Variable in which will be menu params stored (as variable_0, variable_1, ...) _this select 2 - ARRAY - Array with menu items (can be either [items] or [[items],[itemNames],[itemEnable]] if you want to set custom params (names, enable values)) _this select 3 - STRING - Name of submenu which will open when item is activated. Name of selected item is passed to string as %1 _this select 4 - STRING - Expression which is executed when item is activated. Name of selected item is passed to string as %1, ID is %2. _this select 5 - ANYTHING (Optional) - params passed to expression. Whole argument is passed as %3 _this select 6 - BOOLEAN - False to hide number shortcuts Returned value(s): True Example: c = [\"first\",\"second\"]; [\"Menu\", \"b\", c, \"\",\"hint 'ahoj'\"] call BIS_FNC_createmenu; showCommandingMenu \"#USER:b_0\" c = [[\"firstData\",\"secondData\"],[\"First\",\"Second\"]]; [\"Menu\", \"b\", c, \"\",\"hint (str '%1' + str '%2' + str '%3')\"] call BIS_FNC_createmenu; showCommandingMenu \"#USER:b_0\"; see news:g7p3po$gik$1@new-server.localdomain */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_crossProduct": {"version": "FNC", "tags": "", "description": "Return the cross product of two 3D vectors.", "example": "_product = [[1,2,3], [3,2,1]] call BIS_fnc_crossProduct;", "docSyntax": "[vector1, vector2] call BIS_fnc_crossProduct", "syntax": "[vector1,vector2] call BIS_fnc_crossProduct"}, "BIS_fnc_crows": {"version": "FNC", "tags": "", "description": "Spawns flock of crows circling the area.", "example": "bis_crows = [BIS_scientist, 20, 8, 20] call BIS_fnc_crows;", "docSyntax": "[position, areaSize, number, height] call BIS_fnc_crows", "syntax": "[position,areaSize,<scalar>,height] call BIS_fnc_crows"}, "BIS_fnc_customGPS": {"version": "FNC", "tags": "", "description": "Replaces GPS frame.", "example": "[\"ca\\missions_pmc\\data\\ui_gps_ca.paa\", -0.05, 0.16] call BIS_fnc_customGPS;", "docSyntax": "[path, deltaX, deltaY] call BIS_fnc_customGPS", "syntax": "[path,deltaX,deltaY] call BIS_fnc_customGPS"}, "BIS_fnc_customGPSvideo": {"version": "FNC", "tags": "", "description": "Plays in-game video in GPS frame.", "example": "_script = [\"\\ca\\video_pmc\\CP00_Reynolds_b.ogv\",1.04] spawn BIS_fnc_customGPSvideo; waitUntil {scriptDone _script};", "docSyntax": "[path, sizeCoef] spawn BIS_fnc_customGPSvideo", "syntax": "[path,sizeCoef] spawn BIS_fnc_customGPSvideo"}, "BIS_fnc_customGPSVideo": {"version": "FNC", "tags": "", "description": "Plays in-game video in GPS frame.", "example": "[\"myVideo.ogv\", 0.75] call BIS_fnc_customGPSVideo;", "docSyntax": "[videoFilePath, sizeCoef] call BIS_fnc_customGPSVideo", "syntax": "[videoFilePath,sizeCoef] call BIS_fnc_customGPSVideo"}, "BIS_fnc_cutDecimals": {"version": "FNC", "tags": "", "description": "Function that rounds specified number to specified amount of decimals.", "example": "_cutDecimals = [33.3333, 1] call BIS_fnc_cutDecimals; //\u00a0returns 33.3", "docSyntax": "[number, precision] call BIS_fnc_cutDecimals", "syntax": "[<scalar>,precision] call BIS_fnc_cutDecimals"}, "BIS_fnc_destroyCity": {"version": "FNC", "tags": "", "description": "Destroys building in given area based on input seed.", "example": "[\"destroyBase\", 500, 42, [ourHouseInTheMiddleOfTheStreet]] call BIS_fnc_destroyCity;", "docSyntax": "[position, areaSize, seed, blacklist] call BIS_fnc_destroyCity", "syntax": "[position,areaSize,seed,blacklist] call BIS_fnc_destroyCity"}, "BIS_fnc_diagAnim": {"version": "FNC", "tags": "", "description": "Displays or logs animation states:", "example": "call BIS_fnc_diagAnim;", "docSyntax": "[target] call BIS_fnc_diagAnim", "syntax": "[<object>] call BIS_fnc_diagAnim"}, "BIS_fnc_dirIndicator": {"version": "FNC", "tags": "", "description": "Show a 4-directions indicator.", "example": "[player, TheBoss, [0.706, 0.0745, 0.0196, 1]] call BIS_fnc_dirIndicator;", "docSyntax": "[origin, target, color, sizeCoef] call BIS_fnc_dirIndicator", "syntax": "[origin,<object>,<scalar>,sizeCoef] call BIS_fnc_dirIndicator"}, "BIS_fnc_dirTo": {"version": "FNC", "tags": "", "description": "Function which returns vector direction from pos1 to pos2.", "example": "sets unit1 in the direction of unit2 unit1 setDir [unit1, unit2] call BIS_fnc_dirTo", "docSyntax": "[param1, param2] call BIS_fnc_dirTo", "syntax": "[param1,param2] call BIS_fnc_dirTo"}, "BIS_fnc_distance2D": {"version": "FNC", "tags": "", "description": "Returns the distance between two objects or positions.", "example": "[player, rescueHelicopter] call BIS_fnc_distance2D;", "docSyntax": "[param1, param2] call BIS_fnc_distance2D", "syntax": "[param1,param2] call BIS_fnc_distance2D"}, "BIS_fnc_distance2Dsqr": {"version": "FNC", "tags": "", "description": "Returns the SQUARE of the distance between the two objects or positions \"as the crow flies\" (ignoring elevation).", "example": "[ player, soldier_1 ] call BIS_fnc_distance2Dsqr", "docSyntax": "[Point_1,Point_2] call BIS_fnc_distance2Dsqr", "syntax": "[Point_1,Point_2] call BIS_fnc_distance2Dsqr"}, "BIS_fnc_dotProduct": {"version": "FNC", "tags": "", "description": "Dot product of two vectors.", "example": "[[1,2,3], [1,2,3]] call BIS_fnc_dotProduct; //Returns: 1*1+2*2+3*3 = 14", "docSyntax": "[vector1, vector2] call BIS_fnc_dotProduct", "syntax": "[vector1,vector2] call BIS_fnc_dotProduct"}, "BIS_fnc_dynamicText": {"version": "FNC", "tags": "", "description": "Shows dynamic opening credits or any type of text.", "example": "[\"<t color='#ff0000' size='.8'>Warning!<br />Stop doing what you are doing</t>\",-1,-1,4,1,0,789] spawn BIS_fnc_dynamicText;", "docSyntax": "[text, x, y, duration, fadeInTime, deltaY, rscLayer] spawn BIS_fnc_dynamicText", "syntax": "[<string>,x,y,duration,fadeInTime,deltaY,rscLayer] spawn BIS_fnc_dynamicText"}, "BIS_fnc_findExtreme": {"version": "FNC", "tags": "", "description": "Returns the minimum or maximum value in an array of numbers.", "example": "_result = [[1,4,5,8,3,7], 1] call BIS_fnc_findExtreme; //\u00a0returns 8 _result = [[1,4,5,8,3,7], 0] call BIS_fnc_findExtreme; //\u00a0returns 1", "docSyntax": "[numbers, mode] call BIS_fnc_findExtreme", "syntax": "[numbers,mode] call BIS_fnc_findExtreme"}, "BIS_fnc_findNestedElement": {"version": "FNC", "tags": "", "description": "Function to find item in nested arrays and return a path to the first match.", "example": "_array = [[1, 2], [3, 4]]; _path = [_array, 3] call BIS_fnc_findNestedElement; //\u00a0expected result: [1, 0] //\u00a0((_array select 1) select 0) == 3", "docSyntax": "[array, query] call BIS_fnc_findNestedElement", "syntax": "[<array>,query] call BIS_fnc_findNestedElement"}, "BIS_fnc_findSafePos": {"version": "FNC", "tags": "", "description": "This function generates position on a map according to several given parameters (see diagram).", "example": "Find position minimum 1m from from player but not further than 150m, not closer than 3m to any other object, not in the water, maximum gradient of 20, not on the shoreline: _pos = [player, 1, 150, 3, 0, 20, 0] call BIS_fnc_findSafePos;", "docSyntax": "[center, minDist, maxDist, objDist, waterMode, maxGrad, shoreMode, blacklistPos, defaultPos] call BIS_fnc_findSafePos", "syntax": "[center,minDist,maxDist,objDist,waterMode,maxGrad,shoreMode,blacklistPos,defaultPos] call BIS_fnc_findSafePos"}, "BIS_fnc_flies": {"version": "FNC", "tags": "", "description": "Spawns flies around position.", "example": "_flies = [position deadBody, 0.05, 1.5] call BIS_fnc_flies;", "docSyntax": "[position, interval, areaSize] call BIS_fnc_flies", "syntax": "[position,interval,areaSize] call BIS_fnc_flies"}, "BIS_fnc_fps": {"version": "FNC", "tags": "", "description": "Function to measure FPS. Spawns code running for given time and displays result on screen via titleText, globalChat and diag_log. Variable BIS_fps_output is filled with diag_log content too.", "example": "_scriptHandle = [10, \"50 units on screen\", 3] call BIS_fnc_fps;", "docSyntax": "[duration, sceneId, startDelay] call BIS_fnc_fps", "syntax": "[duration,sceneId,startDelay] call BIS_fnc_fps"}, "BIS_fnc_FTLmanager": {"version": "FNC", "tags": "", "description": "FTL (Friendly To Local) manager tracks relationship between player and civilian side.", "example": "[\"Init\"] call BIS_fnc_FTLmanager;", "docSyntax": "[functionCalled, type] call BIS_fnc_FTLmanager", "syntax": "[functionCalled,type] call BIS_fnc_FTLmanager"}, "BIS_fnc_geometricMean": {"version": "FNC", "tags": "", "description": "Returns the geometric mean of an array of numbers.", "example": "[0,1,3] call BIS_fnc_geometricMean;//Returns 1.73205", "docSyntax": "array call BIS_fnc_geometricMean", "syntax": "<array> call BIS_fnc_geometricMean"}, "BIS_fnc_getFactions": {"version": "FNC", "tags": "", "description": "Gets list and sides of current factions.", "example": "call BIS_fnc_getFactions; //\u00a0returns all factions", "docSyntax": "[parameter] call BIS_fnc_getFactions", "syntax": "[parameter] call BIS_fnc_getFactions"}, "BIS_fnc_getLineDist": {"version": "FNC", "tags": "", "description": "Return the distance between two sections of a virtual straight line.", "example": "_distance = [0,5,15,20] call BIS_fnc_getLineDist; //\u00a0returns 10", "docSyntax": "[start1, length1, start2, length2] call BIS_fnc_getLineDist", "syntax": "[start1,length1,start2,length2] call BIS_fnc_getLineDist"}, "BIS_fnc_getPitchBank": {"version": "FNC", "tags": "", "description": "Returns the pitch and bank of an object, in degrees. Yaw can be found using the getDir command.", "example": "_pitchBank = vehicle player call BIS_fnc_getPitchBank;", "docSyntax": "object call BIS_fnc_getPitchBank", "syntax": "<object> call BIS_fnc_getPitchBank"}, "BIS_fnc_greatestNum": {"version": "FNC", "tags": "", "description": "Returns the greatest number out of the passed set.", "example": "_result = [7,2,1,5,10] call BIS_fnc_greatestNum; //_result = 10", "docSyntax": "numbers call BIS_fnc_greatestNum", "syntax": "numbers call BIS_fnc_greatestNum"}, "BIS_fnc_halo": {"version": "FNC", "tags": "", "description": "Makes a High Altitude Low Opening (HALO) parachute jump.", "example": "[player] call BIS_fnc_halo; //\u00a0instantly parachutes the player object", "docSyntax": "[unit, altitude] call BIS_fnc_halo", "syntax": "[<objUnit>,<scalar>] call BIS_fnc_halo"}, "BIS_fnc_help": {"version": "FNC", "tags": "", "description": "Opens the Functions Viewer which lists all functions defined in:", "example": "call BIS_fnc_help;", "docSyntax": "parentDisplay call BIS_fnc_help", "syntax": "parentDisplay call BIS_fnc_help"}, "BIS_fnc_infoText": {"version": "FNC", "tags": "", "description": "Example (Click to enlarge)", "example": "[\"Somewhere on Altis\", format [\"Year %1\", date select 0], mapGridPosition player] spawn BIS_fnc_infoText;", "docSyntax": "[string_1, string_2, string_n] spawn BIS_fnc_infoText", "syntax": "[string_1,string_2,string_n] spawn BIS_fnc_infoText"}, "BIS_fnc_inTrigger": {"version": "FNC", "tags": "", "description": "Detects whether position is within area or calculates distance to the nearest edge of trigger area by using optional params.", "example": "_trigger = createTrigger [\"EmptyDetector\", getPosATL player]; _trigger setTriggerArea [10, 10, 0, false]; _inTrigger = [_trigger, player] call BIS_fnc_inTrigger; //\u00a0-no comment defined-", "docSyntax": "[area, position, returnDistance, includeFloorCeiling] call BIS_fnc_inTrigger", "syntax": "[area,position,returnDistance,includeFloorCeiling] call BIS_fnc_inTrigger"}, "BIS_fnc_inv": {"version": "FNC", "tags": "", "description": "Returns inventory contents of given vehicle (unit). For vehicles it returns mounted gun and its ammo, not cargo weapons and ammo.", "example": "[player] call BIS_fnc_inv;", "docSyntax": "[unit] call BIS_fnc_inv", "syntax": "[<objUnit>] call BIS_fnc_inv"}, "BIS_fnc_invAdd": {"version": "FNC", "tags": "", "description": "Adds item to inventory - checks if there is room for it. Checks if add was done by engine.", "example": "[ player,\"someClass\" ] call BIS_fnc_invAdd;", "docSyntax": "[object,class,force] call BIS_fnc_invAdd", "syntax": "[<object>,class,force] call BIS_fnc_invAdd"}, "BIS_fnc_invCodeToArray": {"version": "FNC", "tags": "", "description": "Converts inventory code (used in configs) to array with numbers for weapons and magazines (and their counts).", "example": "[ call compile getText (configfile >> \"CfgVehicles\" >> typeOf player >> \"weaponSlots\")] call BIS_fnc_invCodeToArray;//Can return [1,0,0,0,0,0,0,0]", "docSyntax": "[configCode] call BIS_fnc_invCodeToArray", "syntax": "[configCode] call BIS_fnc_invCodeToArray"}, "BIS_fnc_invRemove": {"version": "FNC", "tags": "", "description": "Removes from inventory. Given number of items. Returns actually removed items count.", "example": "[ player,\"someClass\",5 ] call BIS_fnc_invRemove;", "docSyntax": "[object,class,count] call BIS_fnc_invRemove", "syntax": "[<object>,class,count] call BIS_fnc_invRemove"}, "BIS_fnc_invSlots": {"version": "FNC", "tags": "", "description": "Returns config inventory slots of given unit (total numbers of available slots in array).", "example": "[ player ] call BIS_fnc_invSlots;//Returns [1,1,1,8,12,1,0,12] for \"B_T_Recon_TL_F\" class. Means: 1 x WeaponSlotPrimary, 1 x WeaponSlotHangun, ... , 12 x WeaponSlotInventory", "docSyntax": "[object] call BIS_fnc_invSlots", "syntax": "[<object>] call BIS_fnc_invSlots"}, "BIS_fnc_invSlotsEmpty": {"version": "FNC", "tags": "", "description": "Returns empty inventory slots of given unit.", "example": "[ player ] call BIS_fnc_invSlotsEmpty;//Can return [0,0,-1,-7,0,-1,0,-12]", "docSyntax": "[object] call BIS_fnc_invSlotsEmpty", "syntax": "[<object>] call BIS_fnc_invSlotsEmpty"}, "BIS_fnc_invSlotType": {"version": "FNC", "tags": "", "description": "Returns empty inventory slots of given unit.", "example": "[ currentWeapon player ] call BIS_fnc_invSlotType;//Can return [1,0,0,0,0,0,0,0]", "docSyntax": "[class] call BIS_fnc_invSlotType", "syntax": "[class] call BIS_fnc_invSlotType"}, "BIS_fnc_invString": {"version": "FNC", "tags": "", "description": "Returns inventory contents of given vehicle (unit). Note: for vehicles it returns mounted gun and its ammo, not cargo weapons and ammo.", "example": "[ player ] call BIS_fnc_invString;", "docSyntax": "[object] call BIS_fnc_invString", "syntax": "[<object>] call BIS_fnc_invString"}, "BIS_fnc_isInFrontOf": {"version": "FNC", "tags": "", "description": "Check if an object is in front of another object (in the front 180\u00b0)", "example": "_isInstructorInFrontOfPlayer = [player, instructor, 0] call BIS_fnc_isInFrontOf;", "docSyntax": "[reference, checked, offset] call BIS_fnc_isInFrontOf", "syntax": "[reference,checked,offset] call BIS_fnc_isInFrontOf"}, "BIS_fnc_isPosBlacklisted": {"version": "FNC", "tags": "", "description": "Function checks a blacklist and sees if the given position is in it or not.", "example": "[[50,50], [[0,0], [100,100]]] call BIS_fnc_isPosBlacklisted;", "docSyntax": "[position, blacklistArea] call BIS_fnc_isPosBlacklisted", "syntax": "[position,blacklistArea] call BIS_fnc_isPosBlacklisted"}, "BIS_fnc_linearConversion": {"version": "FNC", "tags": "", "description": "Linear conversion of a value from one set to another", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_listPlayers": {"version": "FNC", "tags": "", "description": "Returns a list of currently played units, alive or dead.", "example": "_allPlayers = call BIS_fnc_listPlayers;", "docSyntax": "call BIS_fnc_listPlayers", "syntax": "call BIS_fnc_listPlayers"}, "BIS_fnc_locations": {"version": "FNC", "tags": "", "description": "Creates or registers location logics (used in various modules, like Ambient Civilians, Ambient Civilian Vehicles or Warfare 2). Upon registering, function will set following variables into location logic's variable space:", "example": "[\"CityCenter\",[position player,1000]] call BIS_fnc_locations;", "docSyntax": "[type(s),area,debug] call BIS_fnc_locations", "syntax": "[type(s),area,debug] call BIS_fnc_locations"}, "BIS_fnc_lowestNum": {"version": "FNC", "tags": "", "description": "Returns the lowest number out of the passed set.", "example": "_result = [7,2,1,5,10] call BIS_fnc_lowestNum; //_result = 1", "docSyntax": "numbers call BIS_fnc_lowestNum", "syntax": "numbers call BIS_fnc_lowestNum"}, "BIS_fnc_magnitude": {"version": "FNC", "tags": "", "description": "Returns the magnitude of an array of numbers. The vector can have any number of elements.", "example": "[5,3] call BIS_fnc_magnitude;", "docSyntax": "vector call BIS_fnc_magnitude", "syntax": "vector call BIS_fnc_magnitude"}, "BIS_fnc_magnitudeSqr": {"version": "FNC", "tags": "", "description": "Returns the square magnitude of an array of numbers. The vector can have any number of elements.", "example": "[5,3] call BIS_fnc_magnitudeSqr;", "docSyntax": "vector call BIS_fnc_magnitudeSqr", "syntax": "vector call BIS_fnc_magnitudeSqr"}, "BIS_fnc_maxDiffArray": {"version": "FNC", "tags": "", "description": "Function to return the maximum difference between all values in an array.", "example": "_maxDiff = [[0, 5, 10, -5]] call BIS_fnc_maxDiffArray; //\u00a0will return 15 (-5 to 10)", "docSyntax": "[arrayOfNumbers] call BIS_fnc_maxDiffArray", "syntax": "[arrayOfNumbers] call BIS_fnc_maxDiffArray"}, "BIS_fnc_miscAnim": {"version": "FNC", "tags": "", "description": "Setting up the animations with correct positions for object - choose correct performance. For ex. fixingTowingTractor (read the description).", "example": "[\"twoTalking1\", unit1, myCar, unit2] call BIS_fnc_miscAnim;", "docSyntax": "[anim, person1, vehicle, person2, isOnBoard, altitude, doMove] call BIS_fnc_miscAnim", "syntax": "[anim,person1,<objVehicle>,person2,isOnBoard,<scalar>,doMove] call BIS_fnc_miscAnim"}, "BIS_fnc_music": {"version": "FNC", "tags": "", "description": "Randomly play provided tracks defined in CfgMusic and does a 3 seconds fade out. This function takes accTime into account. See also BIS_fnc_jukebox.", "example": "[[\"myMusic1\", \"myMusic2\"], 1] call BIS_fnc_music;", "docSyntax": "[tracklist, delay] call BIS_fnc_music", "syntax": "[tracklist,<scalar>] call BIS_fnc_music"}, "BIS_fnc_nearestNum": {"version": "FNC", "tags": "", "description": "Returns the provided set closest number to the target number.", "example": "_closestValueTo4 = [[1,5,10], 4] call BIS_fnc_nearestNum; //\u00a0returns 5", "docSyntax": "[values, value] call BIS_fnc_nearestNum", "syntax": "[values,<scalar>] call BIS_fnc_nearestNum"}, "BIS_fnc_nearestPoint": {"version": "FNC", "tags": "", "description": "Computes nearest point in a line.", "example": "_idealLocation = [getMarkerPos \"base\", getMarkerPos \"destination\", getPos player, true] call BIS_fnc_nearestPoint;", "docSyntax": "[start, end, point, is2D] call BIS_fnc_nearestPoint", "syntax": "[start,end,point,is2D] call BIS_fnc_nearestPoint"}, "BIS_fnc_nearestPosition": {"version": "FNC", "tags": "", "description": "Function to find the nearest Object or position from a list, when compared to a given reference.", "example": "//\u00a0Find the nearest marker from player _nearestMarker = [allMapMarkers, player] call BIS_fnc_nearestPosition;", "docSyntax": "[items, origin] call BIS_fnc_nearestPosition", "syntax": "[items,origin] call BIS_fnc_nearestPosition"}, "BIS_fnc_objectsGrabber": {"version": "FNC", "tags": "", "description": "Converts a set of placed objects to an object array (as a String) for the DynO mapper.", "example": "[getPos player, 20, true] call BIS_fnc_objectsGrabber;", "docSyntax": "[position, size, objectOrientation] call BIS_fnc_objectsGrabber", "syntax": "[position,size,objectOrientation] call BIS_fnc_objectsGrabber"}, "BIS_fnc_objectsMapper": {"version": "FNC", "tags": "", "description": "Takes an array of data about a dynamic object template and creates the objects.", "example": "_objectsArray = [ [\"B_UAV_01_F\",[-5.23706,-0.183594,-0.00126648],167.39,1,0,[],\"\",\"\",true,false], [\"C_Offroad_01_F\",[-4.25903,4.62158,0.0630951],224.14,1,0,[],\"\",\"\",true,false] ]; [getMarkerPos \"myBase\", 0, _objectsArray, 0.5] call BIS_fnc_objectsMapper;", "docSyntax": "[position, azimuth, objectsArray, badChance] call BIS_fnc_objectsMapper", "syntax": "[position,azimuth,objectsArray,badChance] call BIS_fnc_objectsMapper"}, "BIS_fnc_parseNumber": {"version": "FNC", "tags": "", "description": "Return number from expression", "example": "_result = 7.62 call BIS_fnc_parseNumber; _result = \"7.62\" call BIS_fnc_parseNumber; _result = { 7.62 } call BIS_fnc_parseNumber;", "docSyntax": "value call BIS_fnc_parseNumber", "syntax": "<scalar> call BIS_fnc_parseNumber"}, "BIS_fnc_playVideo": {"version": "FNC", "tags": "", "description": "Plays in-game video with a range of options. The function can be called or spawned. If spawned, scriptDone command can be used to see if video is stopped or finished. If called in scheduled environment, the next line of code will not process until the video is stopped or finished.", "example": "_video = [\"A3\\Missions_F_EPA\\video\\A_in_intro.ogv\"] spawn BIS_fnc_playVideo;", "docSyntax": "[content, size, color, skipVarName, bgColor, keepAspect] spawn BIS_fnc_playVideo", "syntax": "[content,size,<scalar>,skipVarName,bgColor,keepAspect] spawn BIS_fnc_playVideo"}, "BIS_fnc_posToGrid": {"version": "FNC", "tags": "", "description": "Converts array position to map grid position.", "example": "player call BIS_fnc_posToGrid; //\u00a0[\"046\", \"049\"]", "docSyntax": "element call BIS_fnc_posToGrid", "syntax": "element call BIS_fnc_posToGrid"}, "BIS_fnc_randomIndex": {"version": "FNC", "tags": "", "description": "Return a random integer representing an index in the passed array.", "example": "[\"a\",0,objNull] call BIS_fnc_randomIndex; // returns 0, 1 or 2", "docSyntax": "array call BIS_fnc_randomIndex", "syntax": "<array> call BIS_fnc_randomIndex"}, "BIS_fnc_randomInt": {"version": "FNC", "tags": "", "description": "Returns a random integer between the two passed numbers (inclusive). The order of parameters doesn't matter: it can be [min, max] or [max, min].", "example": "[1,3] call BIS_fnc_randomInt; // will return 1, 2 or 3", "docSyntax": "[min, max] call BIS_fnc_randomInt", "syntax": "[min,max] call BIS_fnc_randomInt"}, "BIS_fnc_randomNum": {"version": "FNC", "tags": "", "description": "Returns a random (float) number between the two passed numbers (inclusive). The order of parameters doesn't matter: it can be [min, max] or [max, min].", "example": "[1,3] call BIS_fnc_randomNum; // can be 1, 3 or any value in-between", "docSyntax": "[min, max] call BIS_fnc_randomNum", "syntax": "[min,max] call BIS_fnc_randomNum"}, "BIS_fnc_recompile": {"version": "FNC", "tags": "", "description": "Can be used to recompile functions.", "example": "[] call BIS_fnc_recompile;", "docSyntax": "[mode] call BIS_fnc_recompile", "syntax": "[mode] call BIS_fnc_recompile"}, "BIS_fnc_refreshCommMenu": {"version": "FNC", "tags": "", "description": "Refresh the communication menu variable.", "example": "call BIS_fnc_refreshCommMenu;", "docSyntax": "call BIS_fnc_refreshCommMenu", "syntax": "call BIS_fnc_refreshCommMenu"}, "BIS_fnc_relativeDirTo": {"version": "FNC", "tags": "", "description": "Returns the relative direction from object 1 to object/position 2. Return value is always in between 0 and 360.", "example": "[[0,0,0], player] call BIS_fnc_relativeDirTo;", "docSyntax": "[from, to] call BIS_fnc_relativeDirTo", "syntax": "[from,to] call BIS_fnc_relativeDirTo"}, "BIS_fnc_relPos": {"version": "FNC", "tags": "", "description": "Returns a position that is a specified distance and compass direction from the passed position or object.", "example": "[[0,0,0], 1000, 50] call BIS_fnc_relPos; //\u00a0[766.044,642.788,0]", "docSyntax": "[origin, distance, direction] call BIS_fnc_relPos", "syntax": "[origin,<scalar>,direction] call BIS_fnc_relPos"}, "BIS_fnc_removeIndex": {"version": "FNC", "tags": "", "description": "Takes an array, and returns a new array with the specified index(es) removed. This takes the array passed in the first parameter, and returns an array that has the index number in the second parameter removed. If a third parameter is passed, then a range of indexes will be removed. Alternatively, you can pass an array of indexes to remove in the second parameter.", "example": "_array = [0,1,2,3,4]; [array,0] call BIS_fnc_removeIndex;//Returns [1,2,3,4]", "docSyntax": "[array,startIndex,endIndex] call BIS_fnc_removeIndex", "syntax": "[<array>,startIndex,endIndex] call BIS_fnc_removeIndex"}, "BIS_fnc_removeNestedElement": {"version": "FNC", "tags": "", "description": "Function to remove an item in a nested array. Modifies the array by reference.", "example": "_array = [[1, 2], [3, 3, 4]]; _bool = [_array, 3] call BIS_fnc_removeNestedElement; // _array is now [[1, 2], [4]]", "docSyntax": "[array, itemToRemove] call BIS_fnc_removeNestedElement", "syntax": "[<array>,itemToRemove] call BIS_fnc_removeNestedElement"}, "BIS_fnc_respawnManager": {"version": "FNC", "tags": "", "description": "/******************************************************************************* Version: 2.0 Name: Respawn manager DESCRIPTION: All checkpoints must be markers with name prefix BIS_checkpointnr PARAMETERS: 1) function called - string, list of functions: - Init - Destroy - AddCheckpoint - RemoveCheckpoint 2) parameter for the function For more information see https://wiki.bistudio.com/index.php/RespawnManager RETURNED VALUE: depends on the function called TODO: -performance: add markers positions to the array instead of the testing their positions every loop in _CheckNearestCheckpoint function - DONE -pridat funkci GetActualCheckpoint(character) - DONE -osetrit pripad, kdy postava neexistuje (je prave v respawnu/zahynula) - NEPOTREBUJEME -typy markeru podle modu: normal/debug - DONE -optional parameter marker name - DONE -optional prefix marker name as a parameter to the Init procedure -add functionality for 3 parameters function call - DONE -vlastni lokalni checkpointy(markery) pro hratelne postavy(AddCheckpoint/RemoveCheckpoint) *******************************************************************************/", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_respect": {"version": "FNC", "tags": "", "description": "RESpect - The Effective Calculation Process.", "docSyntax": "[mode, param1, param2, param3] call BIS_fnc_respect", "syntax": "[mode,param1,param2,param3] call BIS_fnc_respect"}, "BIS_fnc_returnConfigEntry": {"version": "FNC", "tags": "", "description": "Explores parent classes in the run-time config for the value of a config entry.", "example": "[configfile >> \"Cfg3DEN\" >> \"Attributes\" >> \"ActivationType\",\"idc\"] call BIS_fnc_returnConfigEntry;", "docSyntax": "[config,attribute,defaultValue] call BIS_fnc_returnConfigEntry", "syntax": "[config,attribute,defaultValue] call BIS_fnc_returnConfigEntry"}, "BIS_fnc_returnGroupComposition": {"version": "FNC", "tags": "", "description": "/* File: returnGroupComp.sqf Description: Function which returns a logical group composition based on a number of parameters. Parameter(s): _this select 0: side (Side). _this select 1: number of characters (Number). _this select 2: (optional) type (String): - \"riflesquad\": (default) standard rifle squad. - \"sniper\": sniper team. Returns: Array of Strings - object types. TODO: use CfgGroups instead? */ //Validate parameter count", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_returnNestedElement": {"version": "FNC", "tags": "", "description": "Function to return an item at a path in an array.", "example": "_array = [[1, 2], [3, 4]]; _value = [_array, [0, 1]] call BIS_fnc_returnNestedElement; //\u00a0returns 2", "docSyntax": "[array, path] call BIS_fnc_returnNestedElement", "syntax": "[<array>,path] call BIS_fnc_returnNestedElement"}, "BIS_fnc_returnParents": {"version": "FNC", "tags": "", "description": "Returns list of all parent classes.", "example": "[ configFile >> \"CfgVehicles\" >> \"Land_FirePlace_F\", true ] call BIS_fnc_returnParents; //Returns [\"Land_FirePlace_F\",\"House_F\",\"House\",\"HouseBase\",\"NonStrategic\",\"Building\",\"Static\",\"All\"]", "docSyntax": "[config, onlyClassNames] call BIS_fnc_returnParents", "syntax": "[config,onlyClassNames] call BIS_fnc_returnParents"}, "BIS_fnc_returnVehicleTurrets": {"version": "FNC", "tags": "", "description": "Return the path to all turrets and sub-turrets in a vehicle.", "example": "[configFile >> \"CfgVehicles\" >> \"B_MBT_01_TUSK_F\"] call BIS_fnc_returnVehicleTurrets;", "docSyntax": "[configEntry] call BIS_fnc_returnVehicleTurrets", "syntax": "[configEntry] call BIS_fnc_returnVehicleTurrets"}, "BIS_fnc_rotateVector2D": {"version": "FNC", "tags": "", "description": "This function returns a 2D vector rotated a specified number of degrees around the origin.", "example": "[ [5,3], 60 ] call BIS_fnc_rotateVector2D;//Returns[-0.0980766,5.83013]", "docSyntax": "[vector2D, angle] call BIS_fnc_rotateVector2D", "syntax": "[vector2D,angle] call BIS_fnc_rotateVector2D"}, "BIS_fnc_roundNum": {"version": "FNC", "tags": "", "description": "Round a number to the provided factor.", "example": "[10.254,2,3] call BIS_fnc_roundNum;//Returns 9", "docSyntax": "[number, factor, secondary factor] call BIS_fnc_roundNum", "syntax": "[<scalar>,factor,secondary factor] call BIS_fnc_roundNum"}, "BIS_fnc_sandstorm": {"version": "FNC", "tags": "", "description": "Creates particle sandstorm round given object.", "example": "[player, 0.04, 0.8, false] call BIS_fnc_sandstorm;", "docSyntax": "[object, interval, brightness, newspapers] call BIS_fnc_sandstorm", "syntax": "[<object>,interval,brightness,newspapers] call BIS_fnc_sandstorm"}, "BIS_fnc_sceneAreaClearance": {"version": "FNC", "tags": "", "description": "Removes object clutter within a set trigger, for use within cutscenes.", "example": "[triggerArea1] spawn BIS_fnc_sceneAreaClearance;", "docSyntax": "[trigger, objects, destination] spawn BIS_fnc_sceneAreaClearance", "syntax": "[<objTrigger>,objects,destination] spawn BIS_fnc_sceneAreaClearance"}, "BIS_fnc_sceneCheckWeapons": {"version": "FNC", "tags": "", "description": "Checks if participants have not missing weapon or have not it selected before scene", "example": "[[BIS_Cooper, \"primary\"],[BIS_Ohara, \"primary\"],[BIS_Rodriguez, \"primary\"],[BIS_Sykes, \"primary\"],[BIS_Miles, \"primary\"]] call BIS_fnc_sceneCheckWeapons;", "docSyntax": "[participants] call BIS_fnc_sceneCheckWeapons", "syntax": "[participants] call BIS_fnc_sceneCheckWeapons"}, "BIS_fnc_sceneCreateSceneTrigger": {"version": "FNC", "tags": "", "description": "Create trigger for scene which can interrupt scene with name passed during creating the trigger. Scene name is saved in format BIS_SceneIntDetector%1 where %1 is sceneName.", "example": "[\"BIS_scene,WEST,5,500,[1337,1337,0],false] call BIS_fnc_sceneCreateSceneTrigger;", "docSyntax": "[sceneName, side, timeout, triggerSize, triggerPosition] call BIS_fnc_sceneCreateSceneTrigger", "syntax": "[sceneName,<objSide>,timeout,triggerSize,triggerPosition] call BIS_fnc_sceneCreateSceneTrigger"}, "BIS_fnc_sceneCreateSoundEntities": {"version": "FNC", "tags": "", "description": "/******************************************************************************* * version: 1.0 * name: create sound entities * description: creates sound entities(logic objects) and attaches to * an objects passed as parameter * After scene end it will detach and delete all created * sound entities (if scene was executed from scenes * controller. * * paramater: objects - ARRAY of OBJECTS in format without \"BIS_\" * prefix. For example, if you have BIS_Cooper in mission * than parameter will be [Cooper]. Then you can use * created sound entities as BIS_ZvukCooper say \"something\" * * return value: nothing *", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_sceneGetObjects": {"version": "FNC", "tags": "", "description": "\u26a0", "example": "[player, 20, \"Car\"] call BIS_fnc_sceneGetObjects;", "docSyntax": "[centre, radius, type] call BIS_fnc_sceneGetObjects", "syntax": "[centre,radius,type] call BIS_fnc_sceneGetObjects"}, "BIS_fnc_sceneGetParticipants": {"version": "FNC", "tags": "", "description": "gets members of unit's group who are in unit's range.", "example": "[player, 20] call BIS_fnc_sceneGetParticipants;", "docSyntax": "[unit, maxDistance] call BIS_fnc_sceneGetParticipants", "syntax": "[<objUnit>,maxDistance] call BIS_fnc_sceneGetParticipants"}, "BIS_fnc_sceneGetPositionByAngle": {"version": "FNC", "tags": "", "description": "/******************************************************************************* * * version: 1.0 * name: sceneGetPositionByAngle * description: returns new calculated position of object from angle and distance from specified object * parameters: described below * return value: array of new coordinates [x, y] *", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_sceneIntruderDetector": {"version": "FNC", "tags": "", "description": "Checks if there are intruders during scene. All intruders during scene will be disabled if they will get into the detector trigger. Checking is deactivated by passing BIS_sceneIntruderDetectorLogic setVariable [\"_detectInProgress\", false];", "example": "[[1337,1337,0],[42,42]] call BIS_fnc_sceneCreateSceneTrigger;", "docSyntax": "[sceneCenter, triggerSize] call BIS_fnc_sceneIntruderDetector", "syntax": "[sceneCenter,triggerSize] call BIS_fnc_sceneIntruderDetector"}, "BIS_fnc_sceneMiscStuff": {"version": "FNC", "tags": "", "description": "/********************************************************************* Version: 1.0 Name: sceneMiscStuff DESCRIPTION: Does the basic minor stuff for scene - cinema borders, map is denied etc. PARAMETERS: 1) _cameraPositions - [[cameraTarget],[cameraPos]] - Coordinates. If BIS_debugScene is true then external camera is activated 2) _skipInitBlackout - BOOL - if true, initial blackout is skipped 3) _skipFinalBlackout - BOOL - if true, final blackout is skipped 4) _noUseCheckTheWeapons - BOOL - if true, checking of weapon before scene is skipped 5) _noUseLoadingScreen - BOOL - if true, loadingscreen is bypassed 6) __excludedObjectsForIntruderDetector - ARRAY of objects - objects will be excluded from intruder detector RETURNED VALUE: **********************************************************************/", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_sceneRotate": {"version": "FNC", "tags": "", "description": "Compute new object coordinates from given center and angle from MOTION BUILDER", "example": "[[1337,1337,0],42,120,[200,200,0]] call BIS_fnc_sceneRotate; //\u00a0Returns [[1337.15,1334.18,0],-258]", "docSyntax": "[center, centerAngle, angle, iniPosition] call BIS_fnc_sceneRotate", "syntax": "[center,centerAngle,angle,iniPosition] call BIS_fnc_sceneRotate"}, "BIS_fnc_sceneSetAnimationsForGroup": {"version": "FNC", "tags": "", "description": "Plays a range of animations for a specific set of units, intended for use during cutscenes.", "example": "_setAnims = [group player, [\"AmovPercMstpSrasWrflDnon\"]] call BIS_fnc_sceneSetAnimationsForGroup;", "docSyntax": "param call BIS_fnc_sceneSetAnimationsForGroup", "syntax": "param call BIS_fnc_sceneSetAnimationsForGroup"}, "BIS_fnc_sceneSetBehaviour": {"version": "FNC", "tags": "", "description": "Enables / disables a specific set of AI units, usable for cutscenes.", "example": "[\"disableAI\", [unit1, player, unit2, unit3]] call BIS_fnc_sceneSetBehaviour;", "docSyntax": "param call BIS_fnc_sceneSetBehaviour", "syntax": "param call BIS_fnc_sceneSetBehaviour"}, "BIS_fnc_sceneSetObjects": {"version": "FNC", "tags": "", "description": "This function sets objects positions and direction relative to the chosen object.", "example": "[player, _arrayOfObjects, false] call BIS_fnc_sceneSetObjects;", "docSyntax": "[centre, objectsArray, applyOffset, stopped] call BIS_fnc_sceneSetObjects", "syntax": "[centre,objectsArray,applyOffset,stopped] call BIS_fnc_sceneSetObjects"}, "BIS_fnc_sceneSetPosFormation": {"version": "FNC", "tags": "", "description": "Adjusts units into a pre-determined formation, using a few variables. Part of S.C.E.N.E.S function group.", "example": "[units group player, bluforCommander, player, \"HALFCIRCLE\", 0] spawn BIS_fnc_sceneSetPosFormation;", "docSyntax": "param spawn BIS_fnc_sceneSetPosFormation", "syntax": "param spawn BIS_fnc_sceneSetPosFormation"}, "BIS_fnc_scriptedMove": {"version": "FNC", "tags": "", "description": "Force a unit to turn towards and walk to", "example": "[myUnit, [getMarkerPos \"wp1\", getMarkerPos \"wp2\", getMarkerPos \"wp3\"]] call BIS_fnc_scriptedMove;", "docSyntax": "[unit, waypoints, code, walkAnim, animLength] call BIS_fnc_scriptedMove", "syntax": "[<objUnit>,waypoints,<code>,walkAnim,animLength] call BIS_fnc_scriptedMove"}, "BIS_fnc_selectCrew": {"version": "FNC", "tags": "", "description": "Return an appropriate crew type for a certain vehicle.", "example": "_crewType = [blufor, configFile >> \"CfgVehicles\" >> \"B_MRAP_01_F\"] call BIS_fnc_selectCrew;", "docSyntax": "[side, configEntry] call BIS_fnc_selectCrew", "syntax": "[<objSide>,configEntry] call BIS_fnc_selectCrew"}, "BIS_fnc_selectRandom": {"version": "FNC", "tags": "", "description": "Selects one of the arguments at random.", "example": "_bestShooter = [_rento, _ben, _trit] call BIS_fnc_selectRandom; //\u00a0returns one of the variables _bestSeries = [[\"halo1\",\"halo2\"],[\"ofp\",\"arma2\"]] call BIS_fnc_selectRandom; //\u00a0returns one of the arrays", "docSyntax": "values call BIS_fnc_selectRandom", "syntax": "values call BIS_fnc_selectRandom"}, "BIS_fnc_selectRandomWeighted": {"version": "FNC", "tags": "", "description": "Selects a random item from an array, taking into account item weight. Note:", "example": "[\"apples\",.3,\"pears\",.2,\"bananas\",.4,\"diamonds\",.1,\"unicorns\",.00001] call BIS_fnc_selectRandomWeighted;", "docSyntax": "itemsAndWeights call BIS_fnc_selectRandomWeighted", "syntax": "itemsAndWeights call BIS_fnc_selectRandomWeighted"}, "BIS_fnc_setNestedElement": {"version": "FNC", "tags": "", "description": "Function to set an item in a nested array using a path. Modifies the array by reference.", "example": "_array = [[1, 2], [3, 4]]; _bool = [_array, [0, 0], 0] call BIS_fnc_setNestedElement; // _array is now [[0, 2], [3, 4]]", "docSyntax": "[array, path, value] call BIS_fnc_setNestedElement", "syntax": "[<array>,path,<scalar>] call BIS_fnc_setNestedElement"}, "BIS_fnc_setPitchBank": {"version": "FNC", "tags": "", "description": "Rotate an object, giving it the specified pitch and bank, in degrees.", "example": "[player, 45, -45] call BIS_fnc_setPitchBank;", "docSyntax": "[object, pitch, bank] call BIS_fnc_setPitchBank", "syntax": "[<object>,pitch,bank] call BIS_fnc_setPitchBank"}, "BIS_fnc_showTime": {"version": "FNC", "tags": "", "description": "Shows time gap between two dates.", "example": "_dayStart = date; _dayStart set [3, 0]; //\u00a0set hours to 0 _dayStart set [4, 0]; //\u00a0set minutes to 0 _now = date; [_dayStart, _now] call BIS_fnc_showTime;", "docSyntax": "[startDate, endDate] call BIS_fnc_showTime", "syntax": "[startDate,endDate] call BIS_fnc_showTime"}, "BIS_fnc_sortNum": {"version": "FNC", "tags": "", "description": "Sorts an array of numbers from lowest (left) to highest (right). The passed array is modified by reference. This function uses the quick sort algorithm.", "example": "[5,9,987,6,97,8,6] call BIS_fnc_sortNum; // Returns [5,6,6,8,9,97,987]", "docSyntax": "array call BIS_fnc_sortNum", "syntax": "<array> call BIS_fnc_sortNum"}, "BIS_fnc_spawnCrew": {"version": "FNC", "tags": "", "description": "Function to fill all crew positions in a vehicle, including turrets. In dummy mode no objects are created and the returned array contains only ones. In this mode the function can be used to count the actual crew of an existing vehicle or vehicle type.", "example": "[ BIS_vehicle, group player ] call BIS_fnc_spawnCrew;", "docSyntax": "[vehicle,group,dummyMode,dummyType,crewType]] call BIS_fnc_spawnCrew", "syntax": "[<objVehicle>,<objGroup>,dummyMode,dummyType,crewType]] call BIS_fnc_spawnCrew"}, "BIS_fnc_spawnEnemy": {"version": "FNC", "tags": "", "description": "Constantly spawns enemies around a player according to array of enemy classes. The units will try to hunt down the player.", "example": "[player, player, opfor, [\"O_Soldier_F\"]] spawn BIS_fnc_spawnEnemy;", "docSyntax": "[aPlayer, target, side, classes, maxEnemies, delay, code] spawn BIS_fnc_spawnEnemy", "syntax": "[aPlayer,<object>,<objSide>,classes,maxEnemies,<scalar>,<code>] spawn BIS_fnc_spawnEnemy"}, "BIS_fnc_spawnGroup": {"version": "FNC", "tags": "", "description": "Function which handles the spawning of a dynamic group of characters. The composition of the group can be passed to the function. Alternatively a number can be passed and the function will spawn that amount of characters with a random type.", "example": "Spawn five random EAST units at aPosition: [getPos aPosition, east, 5] call BIS_fnc_spawnGroup;", "docSyntax": "[position, side, toSpawn, relPositions, ranks, skillRange, ammoRange, randomControls, azimuth, precisePos, maxVehicles] call BIS_fnc_spawnGroup", "syntax": "[position,<objSide>,toSpawn,relPositions,ranks,skillRange,ammoRange,randomControls,azimuth,precisePos,maxVehicles] call BIS_fnc_spawnGroup"}, "BIS_fnc_spawnVehicle": {"version": "FNC", "tags": "", "description": "Function to spawn a certain vehicle type with all crew (including turrets). The vehicle can either become part of an existing group or create a new group.", "example": "[getPos player, 180, \"BMP3\", east] call BIS_fnc_spawnVehicle;", "docSyntax": "[position, direction, type, sideOrGroup] call BIS_fnc_spawnVehicle", "syntax": "[position,direction,type,sideOrGroup] call BIS_fnc_spawnVehicle"}, "BIS_fnc_spotter": {"version": "FNC", "tags": "", "description": "Make spotter report target distance to sniper. Will only stop if one of the two units dies.", "example": "[player, unitSpotter] call BIS_fnc_spotter;", "docSyntax": "[sniper, spotter] call BIS_fnc_spotter", "syntax": "[sniper,spotter] call BIS_fnc_spotter"}, "BIS_fnc_subSelect": {"version": "FNC", "tags": "", "description": "Returns a sub-selection of the passed array.", "example": "_array = [\"a\",\"b\",true,3,8]; [_array, 2] call BIS_fnc_subSelect; // returns [true,3,8]", "docSyntax": "[array, start, endOrLength] call BIS_fnc_subSelect", "syntax": "[<array>,start,endOrLength] call BIS_fnc_subSelect"}, "BIS_fnc_supplydrop": {"version": "FNC", "tags": "", "description": "Script for para-drop of objects. Spawns waitUntil that handles ground hit (detaching of object from parachute). Used by supplydrop service.", "example": "[ [BIS_airDropVeh, \"reammobox\"] spawn BIS_fnc_supplydrop;", "docSyntax": "[airUnit,class] spawn BIS_fnc_supplydrop", "syntax": "[airUnit,class] spawn BIS_fnc_supplydrop"}, "BIS_fnc_supplydropService": {"version": "FNC", "tags": "", "description": "/* File: supplydropService.sqf Description: Supply drop service - controls approach and departure of transporting air vehicle and actual cargo drop. Used by Supply drop support request. Parameter(s): 1: <object> unit allowed to use the transport system 2: <object> vehicle providing transport 4: <array> positions to be cosen by player; accepted strings are \"pickup\" and \"unload\", the second position is defined by the next paramter (OPTIONAL) 5: <position> (NEEDED ONLY IF PARAMETER #4 IS USED) Returns: N/A */ //MP framework init (used for move command given to transporter vehicle)", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_swapVars": {"version": "FNC", "tags": "", "description": "Swaps the values of two variables passed as String.", "example": "_a = 1; _b = 2; [\"_a\", \"_b\"] call BIS_fnc_swapVars; _a == 2; //\u00a0true _b == 1; //\u00a0true", "docSyntax": "[variableName1, variableName2] call BIS_fnc_swapVars", "syntax": "[variableName1,variableName2] call BIS_fnc_swapVars"}, "BIS_fnc_taskAttack": {"version": "FNC", "tags": "", "description": "This function adds a Seek and Destroy waypoint on defined position to the group and set its behaviour to \"AWARE\". If the group has other waypoints, the waypoint will be added at the end of the list.", "example": "[opforGroup, getPosATL player] call BIS_fnc_taskAttack;", "docSyntax": "[group, position] call BIS_fnc_taskAttack", "syntax": "[<objGroup>,position] call BIS_fnc_taskAttack"}, "BIS_fnc_taskDefend": {"version": "FNC", "tags": "", "description": "Group will man nearby static defenses within a 100 metre radius of the defense position and guard the position. Some units will man weapons, others will patrol and the remainder will sit on the ground.", "example": "[group player, getPosATL leader player] call BIS_fnc_taskDefend;", "docSyntax": "[group, position] call BIS_fnc_taskDefend", "syntax": "[<objGroup>,position] call BIS_fnc_taskDefend"}, "BIS_fnc_taskHandler": {"version": "FNC", "tags": "", "description": "/******************************************************************************* * * version: 1.0 * name: Task handler * description: automatically sets tasks as current * parameters: _this select 0: a unit whose tasks will be handled (Array) _this select 1: links to tasks created via MP Framwork with priorities (loewr number means higher priority) * return value: none * example: [ BIS_cooper, [ [\"objShaftoe\", 1], [\"objGorka\", 3], [\"objNikolayev\", 5], [\"objLagushina\", 5], [\"objSmugglers\", 5], [\"objFindBase\", 4], [\"objSentries\", 3], [\"objLeader\", 3], [\"objDestroyBase\", 3], [\"objEscortLagushina\", 1], [\"objRescueCrew\", 2], [\"objSafehouse\", 3], [\"objMaksim\", 6], [\"objEvidence\", 7] ] ] call BIS_fnc_taskHandler * TODO: * generalize so it can be used in WF * add support for standard tasks * randomize the selection of tasks with the same priority", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_taskPatrol": {"version": "FNC", "tags": "", "description": "Create a random patrol of several waypoints around a given position.", "example": "[group _unit, getPos _unit, 1000] call BIS_fnc_taskPatrol;", "docSyntax": "[group, position, distance, blacklist] call BIS_fnc_taskPatrol", "syntax": "[<objGroup>,position,<scalar>,blacklist] call BIS_fnc_taskPatrol"}, "BIS_fnc_threat": {"version": "FNC", "tags": "", "description": "Calculates threat values of given unit.", "example": "_threatLevel = [player] call BIS_fnc_threat;", "docSyntax": "[unit] call BIS_fnc_threat", "syntax": "[<objUnit>] call BIS_fnc_threat"}, "BIS_fnc_transportService": {"version": "FNC", "tags": "", "description": "/* File: transportService.sqf Description: Transportation system Parameter(s): 1: <object> unit allowed to use the transport system 2: <object> vehicle providing transport 3: <array> positions to be chosen by player; accepted strings are \"pickup\" and \"unload\", the second position is defined by the next paramter (OPTIONAL) 4: <position> (NEEDED ONLY IF PARAMETER #3 IS USED) Returns: N/A */", "docSyntax": "[caller, vehicle, position, mainScope, secopScope] call BIS_fnc_transportService", "syntax": "[caller,<objVehicle>,position,mainScope,secopScope] call BIS_fnc_transportService"}, "BIS_fnc_unitCapture": {"version": "FNC", "tags": "", "description": "Records movement data of input unit over a specified period of time. Simplified. Pressing the Esc key, the duration ending, or the unit dying ends the recording.", "example": "[BIS_Vehicle, 50, 30, true, 10] spawn BIS_fnc_unitCapture;", "docSyntax": "[unit, duration, FPS, firing, startTime] spawn BIS_fnc_unitCapture", "syntax": "[<objUnit>,duration,FPS,firing,startTime] spawn BIS_fnc_unitCapture"}, "BIS_fnc_unitCaptureFiring": {"version": "FNC", "tags": "", "description": "Records weapon fire data of input unit over a specified period of time. Pressing the ESC key, the duration ending, or the unit dying ends the recording.", "example": "[BIS_Vehicle, 50, 10] spawn BIS_fnc_unitCaptureFiring;", "docSyntax": "[unit, duration, startTime] spawn BIS_fnc_unitCaptureFiring", "syntax": "[<objUnit>,duration,startTime] spawn BIS_fnc_unitCaptureFiring"}, "BIS_fnc_unitCaptureSimple": {"version": "FNC", "tags": "", "description": "Records movement data of input unit over a specified period of time. Simplified. Pressing the Esc key, the duration ending, or the unit dying ends the recording.", "example": "[BIS_Vehicle, 50, 30, true, 10] spawn BIS_fnc_unitCaptureSimple;", "docSyntax": "[unit, duration, FPS, firing, startTime] spawn BIS_fnc_unitCaptureSimple", "syntax": "[<objUnit>,duration,FPS,firing,startTime] spawn BIS_fnc_unitCaptureSimple"}, "BIS_fnc_unitPlay": {"version": "FNC", "tags": "", "description": "Plays back input movement data on input unit. Simplified.", "example": "[ vehicle player, _unitCaptureData ] spawn BIS_fnc_unitPlay", "docSyntax": "[unit, data, varDone, stateIgnore, obsolete_1, obsolete_2, skipTime] spawn BIS_fnc_unitPlay", "syntax": "[<objUnit>,data,varDone,stateIgnore,obsolete_1,obsolete_2,skipTime] spawn BIS_fnc_unitPlay"}, "BIS_fnc_unitPlayFiring": {"version": "FNC", "tags": "", "description": "Plays back input weapon fire data on input unit.", "example": "_capturedFireData = [[2.135,\"GAU8\",\"<NULL-object>\"]]; [ BIS_Vehicle, _capturedData, true ] spawn BIS_fnc_unitPlayFiring;", "docSyntax": "[unit, data, stateIgnore] spawn BIS_fnc_unitPlayFiring", "syntax": "[<objUnit>,data,stateIgnore] spawn BIS_fnc_unitPlayFiring"}, "BIS_fnc_unitPlaySimple": {"version": "FNC", "tags": "", "description": "Plays back input movement data on input unit. Simplified.", "example": "_capturedData = [[0,[8208.26,1953.13,296.04],67]]; [BIS_Vehicle, _capturedData, [BIS_Object, \"DoneRecording\"], true, false, 0.2, 5] spawn BIS_fnc_unitPlaySimple;", "docSyntax": "[unit, data, varDone, stateIngnore, debug, sleep, skipTime] spawn BIS_fnc_unitPlaySimple", "syntax": "[<objUnit>,data,varDone,stateIngnore,debug,sleep,skipTime] spawn BIS_fnc_unitPlaySimple"}, "BIS_fnc_unitVector": {"version": "FNC", "tags": "", "description": "/************************************************************ Unit Vector Returns the unit vector for the passed vector (vector pointing in the same direction, but with magnitude == 1) This does not modify the original array. The array can have any number of elements (2, 3, etc). ************************************************************/", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_variableSpaceAdd": {"version": "FNC", "tags": "", "description": "Add element to variable from someone's variable space.", "example": "[player, \"someVar\", 1337, true, true] call BIS_fnc_variableSpaceAdd;", "docSyntax": "[object, varName, element, global, inArray] call BIS_fnc_variableSpaceAdd", "syntax": "[<object>,varName,element,global,inArray] call BIS_fnc_variableSpaceAdd"}, "BIS_fnc_variableSpaceRemove": {"version": "FNC", "tags": "", "description": "Remove element from variable from someone's variable space.", "example": "[player, \"someVar\", 1337, true] call BIS_fnc_variableSpaceRemove;", "docSyntax": "[object,varName,element,global,inArray] call BIS_fnc_variableSpaceRemove", "syntax": "[<object>,varName,element,global,inArray] call BIS_fnc_variableSpaceRemove"}, "BIS_fnc_vectorAdd": {"version": "FNC", "tags": "", "description": "Returns the sum of two vectors.", "example": "[[1, 1, 1, 1, 1], [2, 5, 3, 1, 1]] call BIS_fnc_vectorAdd; //\u00a0Returns [3,6,4,2,2]", "docSyntax": "[vector1, vector2] call BIS_fnc_vectorAdd", "syntax": "[vector1,vector2] call BIS_fnc_vectorAdd"}, "BIS_fnc_vectorDiff": {"version": "FNC", "tags": "", "description": "Returns a vector that is the difference between two vectors.", "example": "_vectorDiff = [[1,2,3], [5,6,7]] call BIS_fnc_vectorDiff;", "docSyntax": "[vector1, vector2] call BIS_fnc_vectorDiff", "syntax": "[vector1,vector2] call BIS_fnc_vectorDiff"}, "BIS_fnc_vectorFromXToY": {"version": "FNC", "tags": "", "description": "Returns a unit vector that 'points' from vector1 to vector2. This is a very useful function as it can be used with the velocity command to move an object from one position to another (i.e vector1 to vector2).", "example": "_resultVector = [getPosASL vehicle player, getPosASL airTarget] call BIS_fnc_vectorFromXToY;", "docSyntax": "[vector1, vector2] call BIS_fnc_vectorFromXToY", "syntax": "[vector1,vector2] call BIS_fnc_vectorFromXToY"}, "BIS_fnc_vectorMultiply": {"version": "FNC", "tags": "", "description": "Multiplies 3D vector by a scalar.", "example": "_newVector = [[1,2,3], 3] call BIS_fnc_vectorMultiply; //\u00a0returns [3,6,9]", "docSyntax": "[vector, factor] call BIS_fnc_vectorMultiply", "syntax": "[vector,factor] call BIS_fnc_vectorMultiply"}, "BIS_fnc_version": {"version": "FNC", "tags": "", "description": "Detects which Arma 2 expansions and addons are available. Only works in Arma 2/Arma 2: Operation Arrowhead.", "example": "_availableExpansions = call BIS_fnc_version;", "docSyntax": "call BIS_fnc_version", "syntax": "call BIS_fnc_version"}, "BIS_fnc_zzRotate": {"version": "FNC", "tags": "", "description": "This function is non functional in Arma 3 because of undefined variables.", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}}