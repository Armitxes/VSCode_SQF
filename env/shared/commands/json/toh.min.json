{"BIS_fnc_ambientBlacklist": {"version": "1.00", "tags": "", "description": "Check if area is blacklisted. Blacklist triggers are to be named 'bis_ambientBlacklist_#', where # is number from 0 to 99.", "example": "[1337,1337,0] call BIS_fnc_ambientBlacklist;", "docSyntax": "[input] call BIS_fnc_ambientBlacklist", "syntax": "[input] call BIS_fnc_ambientBlacklist"}, "BIS_fnc_ambientBlacklistAdd": {"version": "1.00", "tags": "", "description": "Add a new ambient blacklist trigger", "example": "[BIS_trigger] call BIS_fnc_ambientBlacklistAdd;", "docSyntax": "[trigger] call BIS_fnc_ambientBlacklistAdd", "syntax": "[<objTrigger>] call BIS_fnc_ambientBlacklistAdd"}, "BIS_fnc_ambientBoats": {"version": "1.00", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_ambientHelicopters": {"version": "1.00", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_ambientPlanes": {"version": "1.00", "tags": "", "description": "Creates ambient airplanes fly-by near airports around the player. It will automatically get classes from configFile >> \"CfgVehicles\" on all planes that have \"ambientType\" attribute > 0.", "example": "[] call BIS_fnc_ambientPlanes;", "docSyntax": "[quantity, areaRadius, dirStep] call BIS_fnc_ambientPlanes", "syntax": "[quantity,areaRadius,dirStep] call BIS_fnc_ambientPlanes"}, "BIS_fnc_ambientPostprocess": {"version": "1.00", "tags": "", "description": "Initialize terrain-related postprocess effects.", "example": "[] call BIS_fnc_ambientPostprocess;", "docSyntax": "[terrain, activation] call BIS_fnc_ambientPostprocess", "syntax": "[terrain,activation] call BIS_fnc_ambientPostprocess"}, "BIS_fnc_animType": {"version": "1.00", "tags": "", "description": "Function that returns a categorized array using a single string with the animation name.", "example": "animType = [\"AmovPsitMstpSrasWrflDnon\"] call BIS_fnc_animType; //\u00a0Returns [[\"Action\",\"Move\"],[\"Pose\",\"Sit\"],[\"Movement\",\"Stop\"],[\"Stance\",\"Raised\"],[\"Hand item\",\"Rifle\"],[\"Direction\",\"Not specified\"]]", "docSyntax": "param call BIS_fnc_animType", "syntax": "param call BIS_fnc_animType"}, "BIS_fnc_assignPlayerRole": {"version": "1.00", "tags": "", "description": "Ensures the player can only get in the specific vehicle role.", "example": "[myVehicle, \"turret\", [0, 1]] call BIS_fnc_assignPlayerRole;", "docSyntax": "[vehicle, role, path] call BIS_fnc_assignPlayerRole", "syntax": "[<objVehicle>,role,path] call BIS_fnc_assignPlayerRole"}, "batteryChargeRTD": {"version": "1.00", "tags": "", "description": "Returns the current charge of a helicopter's batteries.", "example": "_charge = batteryChargeRTD vehicle player;", "docSyntax": "batteryChargeRTD helicopterRTD", "syntax": "batteryChargeRTD helicopterRTD"}, "BIS_fnc_camFollow": {"version": "1.00", "tags": "", "description": "Refresh a camera Field of View according to its distance with the target.", "example": "_camera = \"camera\" camCreate ((getPos player) vectorAdd [0,0,3]); [_camera, player, -2] call BIS_fnc_camFollow;", "docSyntax": "[camera, target, refreshTime] call BIS_fnc_camFollow", "syntax": "[<objCamera>,<object>,refreshTime] call BIS_fnc_camFollow"}, "clearForcesRTD": {"version": "1.00", "tags": "", "description": "Removes all force generators from world.", "example": "clearForcesRTD;", "docSyntax": "clearForcesRTD", "syntax": "clearForcesRTD"}, "collectiveRTD": {"version": "1.00", "tags": "", "description": "Returns the current position of a helicopter's collective pitch control.", "example": "_collective = collectiveRTD vehicle player;", "docSyntax": "collectiveRTD helicopterRTD", "syntax": "collectiveRTD helicopterRTD"}, "BIS_fnc_convertUnits": {"version": "1.00", "tags": "", "description": "Converts values to a target system of units.", "example": "_distString = [500, 0, 5, 1, -1] call BIS_fnc_convertUnits;", "docSyntax": "[value, from, to, mode, precision] call BIS_fnc_convertUnits", "syntax": "[<scalar>,from,to,mode,precision] call BIS_fnc_convertUnits"}, "BIS_fnc_counter": {"version": "1.00", "tags": "", "description": "/* Description: Modify the given counter (create it if doesn't exist) Parameter(s): _this select 0: STRING - variable name of counter ARRAY in format [variableName,nameSpace], where nameSpace can be object, group or missionNameSpace/uiNameSpace _this select 1 (Optional): NUMBER - added value _this select 2 (Optional): NUMBER - modulo value Returns: NUMBER - counter's value */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_credits": {"version": "1.00", "tags": "", "description": "Opens credits, identical to those found in main menu (Arma 3). Also present in Arma 3.", "example": "[] spawn BIS_fnc_credits;", "docSyntax": "[] spawn BIS_fnc_credits;", "syntax": "[] spawn BIS_fnc_credits;"}, "BIS_fnc_dbClassCheck": {"version": "1.00", "tags": "", "description": "Check if class exists in Scripted Database.", "example": "[[\"#MILLER\", [\"&NAME\", \"Miller\", \"&UID\", \"1234\", \"&MONEY\", 1000], [\"miller\"]] call BIS_fnc_dbClassCheck //\u00a0true", "docSyntax": "[databaseArray, path] call BIS_fnc_dbClassCheck", "syntax": "[databaseArray,path] call BIS_fnc_dbClassCheck"}, "BIS_fnc_dbClassId": {"version": "1.00", "tags": "", "description": "Converts string to class definition.", "example": "\"miller\" call BIS_fnc_dbClassID //\"#MILLER\"", "docSyntax": "text call BIS_fnc_dbClassId", "syntax": "<string> call BIS_fnc_dbClassId"}, "BIS_fnc_dbClassIndex": {"version": "1.00", "tags": "", "description": "Returns indices leading to given class.", "example": "[[\"#MILLER\", [\"&NAME\", \"Miller\", \"&UID\", \"1234\", \"&MONEY\", 1000]], [\"miller\"]] call BIS_fnc_dbClassIndex; //[0]", "docSyntax": "[database, path] call BIS_fnc_dbClassIndex", "syntax": "[database,path] call BIS_fnc_dbClassIndex"}, "BIS_fnc_dbClassList": {"version": "1.00", "tags": "", "description": "Returns all classes within class.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]], []] call BIS_fnc_dbClassList; // [\"MILLER\",\"TERRA\"]", "docSyntax": "[database, path] call BIS_fnc_dbClassList", "syntax": "[database,path] call BIS_fnc_dbClassList"}, "BIS_fnc_dbClassRemove": {"version": "1.00", "tags": "", "description": "Remove class from Scripted Database. The function does not return the modified database but modifies the passed array directly.", "example": "_db = [\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]]; [_db, [\"terra\"]] call BIS_fnc_dbClassRemove; //\u00a0true _db //\u00a0[\"#MILLER\",[\"&KILLS\",1000]]", "docSyntax": "[database, path] call BIS_fnc_dbClassRemove", "syntax": "[database,path] call BIS_fnc_dbClassRemove"}, "BIS_fnc_dbClassReturn": {"version": "1.00", "tags": "", "description": "Returns content of given class.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]], [\"miller\"]] call BIS_fnc_dbClassReturn; // [\"&KILLS\",1000]", "docSyntax": "[database, path] call BIS_fnc_dbClassReturn", "syntax": "[database,path] call BIS_fnc_dbClassReturn"}, "BIS_fnc_dbClassSet": {"version": "1.00", "tags": "", "description": "Add class to Scripted Database. The function modifies the passed array and returns a success flag.", "example": "_db = [\"#MILLER\", [\"&KILLS\", 1000], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]]; [_db, [\"kavala\"], [\"&POPULATION\", 42]] call BIS_fnc_dbClassSet; _db // [\"#MILLER\",[\"&KILLS\",1000],\"#TERRA\",[\"&WEAPON\",\"MX 6.5mm\"],\"#KAVALA\",[\"&POPULATION\",42]]", "docSyntax": "[database, path, (value)] call BIS_fnc_dbClassSet", "syntax": "[database,path,(<scalar>)] call BIS_fnc_dbClassSet"}, "BIS_fnc_dbConfigPath": {"version": "1.00", "tags": "", "description": "If there is a database present in the config (config.cpp or descritpion.ext) then this function can be used to get the config path of the passed array. So it basically converts the array into a config entry.", "docSyntax": "[path, config] call BIS_fnc_dbConfigPath", "syntax": "[path,config] call BIS_fnc_dbConfigPath"}, "BIS_fnc_dbImportConfig": {"version": "1.00", "tags": "", "description": "Copy config classes and adds them to Scripted Database. Config values can not be passed through this function. The passed array gets modified.", "docSyntax": "[database, path, config] call BIS_fnc_dbImportConfig", "syntax": "[database,path,config] call BIS_fnc_dbImportConfig"}, "BIS_fnc_dbImportXML": {"version": "1.00", "tags": "", "description": "Import XML file into Scripted Database.", "example": "_xmlDB = \"myFile.xml\" call BIS_fnc_dbImportXML;", "docSyntax": "xmlFile call BIS_fnc_dbImportXML", "syntax": "xmlFile call BIS_fnc_dbImportXML"}, "BIS_fnc_dbIsClass": {"version": "1.00", "tags": "", "description": "Checks if string is class definition.", "example": "\"#MYCLASS\" call BIS_fnc_dbIsClass; //\u00a0true \"#myclass\" call BIS_fnc_dbIsClass; //\u00a0true \"MYCLASS\" call BIS_fnc_dbIsClass; //\u00a0false 1234 call BIS_fnc_dbIsClass; //\u00a0false", "docSyntax": "text call BIS_fnc_dbIsClass", "syntax": "<string> call BIS_fnc_dbIsClass"}, "BIS_fnc_dbIsValue": {"version": "1.00", "tags": "", "description": "Checks if string is value definition.", "example": "\"&MYVALUE\" call BIS_fnc_dbIsValue; //\u00a0true \"&myvalue\" call BIS_fnc_dbIsValue; //\u00a0true \"MYVALUE\" call BIS_fnc_dbIsValue; //\u00a0false 1234 call BIS_fnc_dbIsValue; //\u00a0false", "docSyntax": "text call BIS_fnc_dbIsValue", "syntax": "<string> call BIS_fnc_dbIsValue"}, "BIS_fnc_dbPrint": {"version": "1.00", "tags": "", "description": "Copy Scripted Database content into clipboard for evaluation. Text will be formatted as config.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"], \"#TERRA\", [\"&WEAPON\", \"MX 6.5mm\"]]] call BIS_fnc_dbPrint;", "docSyntax": "[database, tabs] call BIS_fnc_dbPrint", "syntax": "[database,tabs] call BIS_fnc_dbPrint"}, "BIS_fnc_dbSymbolClass": {"version": "1.00", "tags": "", "description": "A getter function to return the symbol used for declaring a class.", "example": "call BIS_fnc_dbSymbolClass; // #", "docSyntax": "call BIS_fnc_dbSymbolClass", "syntax": "call BIS_fnc_dbSymbolClass"}, "BIS_fnc_dbSymbolValue": {"version": "1.00", "tags": "", "description": "A getter function to return the symobl used for declaring a value.", "example": "call BIS_fnc_dbSymbolValue; // &", "docSyntax": "call BIS_fnc_dbSymbolValue", "syntax": "call BIS_fnc_dbSymbolValue"}, "BIS_fnc_dbValueCheck": {"version": "1.00", "tags": "", "description": "Check if value exists in Scripted Database.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]]] call BIS_fnc_dbValueCheck; //\u00a0true", "docSyntax": "[database, path] call BIS_fnc_dbValueCheck", "syntax": "[database,path] call BIS_fnc_dbValueCheck"}, "BIS_fnc_dbValueId": {"version": "1.00", "tags": "", "description": "Converts string to value definition or vice versa.", "example": "\"MYVALUE\" call BIS_fnc_dbValueId; // \"&MYVALUE\"", "docSyntax": "valueString call BIS_fnc_dbValueId", "syntax": "valueString call BIS_fnc_dbValueId"}, "BIS_fnc_dbValueIndex": {"version": "1.00", "tags": "", "description": "Returns indexes leading to given value.", "docSyntax": "[database, path] call BIS_fnc_dbValueIndex", "syntax": "[database,path] call BIS_fnc_dbValueIndex"}, "BIS_fnc_dbValueList": {"version": "1.00", "tags": "", "description": "Returns all values within class.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]], [\"miller\"]] call BIS_fnc_dbValueList; // [\"KILLS\",\"RANK\"]", "docSyntax": "[database, path] call BIS_fnc_dbValueList", "syntax": "[database,path] call BIS_fnc_dbValueList"}, "BIS_fnc_dbValueRemove": {"version": "1.00", "tags": "", "description": "Remove value from Scripted Database.", "docSyntax": "[database, path] call BIS_fnc_dbValueRemove", "syntax": "[database,path] call BIS_fnc_dbValueRemove"}, "BIS_fnc_dbValueReturn": {"version": "1.00", "tags": "", "description": "Returns content of given value.", "example": "[[\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]], [\"miller\",\"kills\"]] call BIS_fnc_dbValueReturn; //\u00a01000", "docSyntax": "[database, path, (defaultValue)] call BIS_fnc_dbValueReturn", "syntax": "[database,path,(defaultValue)] call BIS_fnc_dbValueReturn"}, "BIS_fnc_dbValueSet": {"version": "1.00", "tags": "", "description": "Add value to Scripted Database. If current path does not exist it is created otherwise value is overwritten. The passed array gets modified.", "example": "_db = [\"#MILLER\", [\"&KILLS\", 1000, \"&RANK\", \"CAPTAIN\"]]; [_db, [\"miller\",\"kills\"],200] call BIS_fnc_dbValueSet; _db //[\"#MILLER\",[\"&KILLS\",200,\"&RANK\",\"CAPTAIN\"]]", "docSyntax": "[database, path, newvalue] call BIS_fnc_dbValueSet", "syntax": "[database,path,newvalue] call BIS_fnc_dbValueSet"}, "BIS_fnc_diaryHints": {"version": "1.00", "tags": "", "description": "#define DIARY_CATEGORY \"BIS_fnc_diaryHints\"", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_diaryMaps": {"version": "1.00", "tags": "", "description": "#define DIARY_CATEGORY \"BIS_fnc_diaryMaps\"", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_displayClouds": {"version": "1.00", "tags": "", "description": "#define DISPLAY (uinamespace getvariable 'hsim_RscClouds') #define CONTROL (DISPLAY displayctrl _idc) #define RSC_LAYER 759", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_displayColorGet": {"version": "1.00", "tags": "", "description": "Loads custom color settings from CfgUIDefault. If variables are not stored in profileNamespace yet, the function will declare them.", "example": "[\"GUI\", \"BCG_RGB\"] call BIS_fnc_displayColorGet;//Returns menu color", "docSyntax": "[tag, variable] call BIS_fnc_displayColorGet", "syntax": "[tag,variable] call BIS_fnc_displayColorGet"}, "BIS_fnc_displayColorSet": {"version": "1.00", "tags": "", "description": "Applies custom color settings to given Display. Display must be already using color macros, function will just refresh the values according to current color settings.", "example": "[configFile >> (GUI_classes select _forEachIndex), _x] call BIS_fnc_displayColorSet;", "docSyntax": "[displayClass, display, commitTime, code] call BIS_fnc_displayColorSet", "syntax": "[displayClass,<uiDisplay>,commitTime,<code>] call BIS_fnc_displayColorSet"}, "BIS_fnc_displayControls": {"version": "1.00", "tags": "", "description": "/* Description: Return all controls of given display class Parameter(s): _this select 0: CONFIG - display config _this select 1: NUMBER or CONFIG or STRING - type of returned values (control configs, their names or IDCs; default: configfile)) _this select 2: BOOL - true to search content of controls group (default: true) Returns: ARRAY */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_displayLoading": {"version": "1.00", "tags": "", "description": "Loading Screens init.", "example": "([_this, 2302] call (uiNamespace getVariable 'BIS_fnc_displayLoading')", "docSyntax": "[onLoad, id] call BIS_fnc_displayLoading", "syntax": "[onLoad,<scalar>] call BIS_fnc_displayLoading"}, "BIS_fnc_displayMission": {"version": "1.00", "tags": "", "description": "Returns main display of current mission/intro/outro. A cleaner alternative to findDisplay 46.", "example": "_mainDisplay = call BIS_fnc_displayMission;", "docSyntax": "call BIS_fnc_displayMission", "syntax": "call BIS_fnc_displayMission"}, "BIS_fnc_displayName": {"version": "1.00", "tags": "", "description": "Return given class displayName value. Return base class name if displayName not defined.", "example": "_myDisplayName = [configFile >> \"CfgVehicles\" >> typeOf vehicle player] call BIS_fnc_displayName;", "docSyntax": "[config] call BIS_fnc_displayName", "syntax": "[config] call BIS_fnc_displayName"}, "BIS_fnc_displayResize": {"version": "1.00", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "enableAutoStartUpRTD": {"version": "1.00", "tags": "", "description": "Toggle availability of the automated helicopter start-up and shutdown sequences.", "example": "myHelicopterRTD enableAutoStartUpRTD true;", "docSyntax": "helicopterRTD enableAutoStartUpRTD enable", "syntax": "helicopterRTD enableAutoStartUpRTD <bool>"}, "enableAutoTrimRTD": {"version": "1.00", "tags": "", "description": "Toggle auto-trim for RTD helicopters.", "example": "myHelicopterRTD enableAutoTrimRTD true;", "docSyntax": "helicopterRTD enableAutoTrimRTD enable", "syntax": "helicopterRTD enableAutoTrimRTD <bool>"}, "BIS_fnc_endMission": {"version": "1.00", "tags": "", "description": "Ends mission with the specified ending. Always ends with a 4 seconds black out effect.", "example": "[\"mission2\", 1, \"You won\"] call BIS_fnc_endMission; //\u00a0endMission \"mission2_1\"", "docSyntax": "[nextMission, endingId, displayText, isSuccess, code] call BIS_fnc_endMission", "syntax": "[nextMission,endingId,displayText,isSuccess,<code>] call BIS_fnc_endMission"}, "BIS_fnc_errorMsg": {"version": "1.00", "tags": "", "description": "Display error window.", "example": "[\"This is an error message\"] call BIS_fnc_errorMsg;", "docSyntax": "[message, otherParameters] call BIS_fnc_errorMsg", "syntax": "[message,otherParameters] call BIS_fnc_errorMsg"}, "forceAtPositionRTD": {"version": "1.00", "tags": "", "description": "Adds force generator to world.", "example": "forceAtPositionRTD;", "docSyntax": "forceAtPositionRTD position", "syntax": "forceAtPositionRTD position"}, "forceGeneratorRTD": {"version": "1.00", "tags": "", "description": "Adds force generator to world.", "example": "forceGeneratorRTD 2;", "docSyntax": "forceGeneratorRTD index", "syntax": "forceGeneratorRTD <scalar>"}, "BIS_fnc_functionPath": {"version": "1.00", "tags": "", "description": "Returns path to function file.", "example": "_path = \"BIS_fnc_wpLand\" call BIS_fnc_functionPath;", "docSyntax": "functionName call BIS_fnc_functionPath", "syntax": "functionName call BIS_fnc_functionPath"}, "BIS_fnc_functionsDebug": {"version": "1.00", "tags": "", "description": "Changes debug mode used when compiling functions from the Arma 3: Functions Library. Also recompiles all functions. See Arma 3: Functions Library for more information.", "example": "2 call BIS_fnc_functionsDebug;", "docSyntax": "mode call BIS_fnc_functionsDebug", "syntax": "mode call BIS_fnc_functionsDebug"}, "BIS_fnc_GC": {"version": "1.00", "tags": "", "description": "Sends an entity to the garbage collection queue. Replaces Arma 2 Garbage Collector.", "example": "[dude1] spawn BIS_fnc_GC;", "docSyntax": "entity spawn BIS_fnc_GC", "syntax": "entity spawn BIS_fnc_GC"}, "BIS_fnc_GCinit": {"version": "1.00", "tags": "", "description": "Initializes Garbage Collection.", "example": "[] call BIS_fnc_GCinit", "docSyntax": "[] call BIS_fnc_GCinit", "syntax": "[] call BIS_fnc_GCinit"}, "BIS_fnc_genericSentence": {"version": "1.00", "tags": "", "description": "Play generic sentence with probablity set by bis_genericSentenceMode variable (0.5 = 50%, 1 = 100%)", "example": "[\"FeedbackFlightNegativeHeightTooHigh\"] call BIS_fnc_genericSentence;", "docSyntax": "[class,(speaker,delay,canRepeat)] call BIS_fnc_genericSentence", "syntax": "[class,(speaker,<scalar>,canRepeat)] call BIS_fnc_genericSentence"}, "BIS_fnc_genericSentenceInit": {"version": "1.00", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "getEngineTargetRPMRTD": {"version": "1.00", "tags": "", "description": "Returns RPM of all engines.", "example": "private _rpm = getEngineTargetRPMRTD _helicopter;", "docSyntax": "getEngineTargetRPMRTD helicopter", "syntax": "getEngineTargetRPMRTD helicopter"}, "getHitPointDamage": {"version": "1.00", "tags": "", "description": "Return current level of damage in range 0..1 for a specific Hit Point (specified by its config class). If you need to get damage of a selection instead of hit point, use getHit.", "example": "vehicle player getHitPointDamage \"hitEngine\";", "docSyntax": "vehicle getHitPointDamage hitPointName", "syntax": "<objVehicle> getHitPointDamage hitPointName"}, "BIS_fnc_getIDC": {"version": "1.00", "tags": "", "description": "Returns IDD of given display.", "example": "_IDC = [configFile >> \"Display3DENPlace\", \"ButtonCancel\"] call BIS_fnc_getIDC;", "docSyntax": "[config, ctrlName] call BIS_fnc_getIDC", "syntax": "[config,ctrlName] call BIS_fnc_getIDC"}, "BIS_fnc_getIDD": {"version": "1.00", "tags": "", "description": "Returns IDD of given display.", "example": "_IDD = [configFile >> \"display3DENPublishMissionSelectImage\" ] call BIS_fnc_getIDD;", "docSyntax": "[config] call BIS_fnc_getIDD", "syntax": "[config] call BIS_fnc_getIDD"}, "getRotorBrakeRTD": {"version": "1.00", "tags": "", "description": "Returns if rotor break is on.", "example": "_isOn = getRotorBrakeRTD _heli;", "docSyntax": "getRotorBrakeRTD helicopter", "syntax": "getRotorBrakeRTD helicopter"}, "getWingsOrientationRTD": {"version": "1.00", "tags": "", "description": "Returns orientation of horizontal stabilizers.", "example": "_orientation = getWingsOrientationRTD myHelicopter;", "docSyntax": "getWingsOrientationRTD RTD_helicopter", "syntax": "getWingsOrientationRTD RTD_helicopter"}, "getWingsPositionRTD": {"version": "1.00", "tags": "", "description": "Returns position of stabilizers.", "example": "_position = getWingsPositionRTD myHelicopter;", "docSyntax": "getWingsPositionRTD RTD_helicopter", "syntax": "getWingsPositionRTD RTD_helicopter"}, "BIS_fnc_GUIbackground": {"version": "1.00", "tags": "", "description": "Creates GUI background.", "example": "[1,1,1,1] call BIS_fnc_GUIbackground;", "docSyntax": "[position] call BIS_fnc_GUIbackground", "syntax": "[position] call BIS_fnc_GUIbackground"}, "BIS_fnc_GUIeditor": {"version": "1.00", "tags": "", "description": "Opens the Arma 3: User Interface Editor.", "example": "call BIS_fnc_GUIeditor;", "docSyntax": "call BIS_fnc_GUIeditor;", "syntax": "call BIS_fnc_GUIeditor;"}, "BIS_fnc_GUIgrid": {"version": "1.00", "tags": "", "description": "Returns grid params and stores it into uiNamespace.", "example": "call BIS_fnc_GUIgrid; //[-0.452381,0.214286,1.2,1]", "docSyntax": "[category, grid] call BIS_fnc_GUIgrid", "syntax": "[category,grid] call BIS_fnc_GUIgrid"}, "BIS_fnc_GUIgridToProfile": {"version": "1.00", "tags": "", "description": "\ud83c\udfd7", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_GUIhint": {"version": "1.00", "tags": "", "description": "/* Description: Creates advanced hintC dialog Parameter(s): _this select 0: ARRAY in format [text,picture] * text: STRING - hint text * picture: STRING - picture [item1,item2...] - Listbox item ARRAYs in format [itemText,itemDescription,picture,icon] * itemText: STRING - Text displayed in listbox * itemDescription (Optional): STRING - text displayed after clicking on item * picture (Optional): STRING - picture displayed after clicking on item * icon (Optional): STRING - icon displayed in listbox left from text _this select 1 (Optional): STRING - hint header _this select 2 (Optional): ARRAY - [STRING,CODE,NUMBER] - text on left button (when \"\", button is hidden), code executed upon clicking and fade out delay. If only text is present, button is disabled. _this select 3 (Optional): ARRAY - [STRING,CODE,NUMBER] - STRING - text on right button and code executed upon clicking _this select 4 (Optional): ARRAY - [STRING,CODE,NUMBER] - STRING - text on middle button and code executed upon clicking _this select 5 (Optional): NUMBER or ARRAY - width or [width,height] of picture (in grid coordinates). Width > 17 means only picture is used. Returns: ARRAY - [endState(,lbId)] * endState: NUMBER - 1 when clicked on right button, -1 when clicked on left button, 0 when escaped * lbId: NUMBER - selected listbox item (when listbox was used) */ #define DISPLAY_CLASS 'Hsim_RscDisplayCommonHint_guiHint' #define DISPLAY_CONFIG (configfile >> \"RscDisplayCommonHint\") #define DISPLAY (uinamespace getvariable DISPLAY_CLASS) #define CONTROL (DISPLAY displayctrl _idc) #define CONTROL_FADEINTIME 0.3 #define CONTROL_FADEIN \\ CONTROL ctrlsetfade 1; \\ CONTROL ctrlcommit 0; \\ CONTROL ctrlsetfade 0; \\ CONTROL ctrlcommit CONTROL_FADEINTIME;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_guiMessage": {"version": "1.00", "tags": "", "description": "Shows customized native message box to user.", "example": "[\"Hello World\"] spawn BIS_fnc_guiMessage;", "docSyntax": "[message, header, position, isCancel, parent, pause] spawn BIS_fnc_guiMessage", "syntax": "[message,header,position,isCancel,parent,pause] spawn BIS_fnc_guiMessage"}, "BIS_fnc_halt": {"version": "1.00", "tags": "", "description": "Halts current function and all its parents and logs an error message.", "example": "[\"You are now supposed to be %1\", rank player] call BIS_fnc_halt;", "docSyntax": "[param1, param2, ..., param10] call BIS_fnc_halt", "syntax": "[param1,param2,...,param10] call BIS_fnc_halt"}, "BIS_fnc_helicopterCanFly": {"version": "1.00", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_helicopterDamage": {"version": "1.00", "tags": "", "description": "Handling EH-based helicopter damage, event handler in question being Dammagedsic.", "example": "myHelicopter addEventHandler [\"Dammaged\", { _this call BIS_fnc_helicopterDamage; }];", "docSyntax": "[helicopter, selection, damage] call BIS_fnc_helicopterDamage", "syntax": "[helicopter,selection,<scalar>] call BIS_fnc_helicopterDamage"}, "BIS_fnc_helicopterGetHitpoints": {"version": "1.00", "tags": "", "description": "Return all hitpoints for a helicopter.", "example": "[BIS_helicopter] call BIS_fnc_helicopterGetHitpoints;", "docSyntax": "object call BIS_fnc_helicopterGetHitpoints", "syntax": "<object> call BIS_fnc_helicopterGetHitpoints"}, "BIS_fnc_helicopterSeat": {"version": "1.00", "tags": "", "description": "Check if unit sits on right or left seat.", "example": "player call BIS_fnc_helicopterSeat;", "docSyntax": "unit call BIS_fnc_helicopterSeat", "syntax": "<objUnit> call BIS_fnc_helicopterSeat"}, "BIS_fnc_helicopterSeatMove": {"version": "1.00", "tags": "", "description": "Plays cockpit animation. Take On Helicopters only.", "example": "[instructor, \"thumbUp\"] call BIS_fnc_helicopterSeatMove;", "docSyntax": "[unit, gesture] call BIS_fnc_helicopterSeatMove", "syntax": "[<objUnit>,gesture] call BIS_fnc_helicopterSeatMove"}, "BIS_fnc_helicopterType": {"version": "1.00", "tags": "", "description": "Returns helicopter type.", "example": "private _helicopterType = [vehicle player] call BIS_fnc_helicopterType;", "docSyntax": "[object] call BIS_fnc_helicopterType", "syntax": "[<object>] call BIS_fnc_helicopterType"}, "BIS_fnc_HUDLimits": {"version": "1.00", "tags": "", "description": "Set helicopter advanced flight model HUD limits and prevents overwriting existing values. See also setHUDMovementLevels.", "example": "[[0,0,0], [1, 0, 50], [0,0,0]] call BIS_fnc_HUDLimits; //\u00a0limits altitude on HUD to 50m max", "docSyntax": "[speedLimit, altLimit, dirLimit] call BIS_fnc_HUDLimits", "syntax": "[speedLimit,altLimit,dirLimit] call BIS_fnc_HUDLimits"}, "HUDMovementLevels": {"version": "1.00", "tags": "", "description": "Returns movement borders for HUD [min speed, max speed, min alt, max alt, min dir, max dir, position[x,y,z] or target]", "example": "HUDMovementLevels; //\u00a0returns e.g [0,0,0,0,0,0,[0,0,0]]", "docSyntax": "HUDMovementLevels", "syntax": "HUDMovementLevels"}, "BIS_fnc_isLocalized": {"version": "1.00", "tags": "", "description": "Checks if string is localized. Obsolete variant before isLocalized command was introduced.", "example": "[\"STR_someLocalizedString\"] call BIS_fnc_isLocalized;", "docSyntax": "[localizationString] call BIS_fnc_isLocalized", "syntax": "[localizationString] call BIS_fnc_isLocalized"}, "BIS_fnc_kbCanSpeak": {"version": "1.00", "tags": "", "description": "Check if person is not locked by some conversation.", "example": "_canPlayerTalk = player call BIS_fnc_kbCanSpeak;", "docSyntax": "unit call BIS_fnc_kbCanSpeak", "syntax": "<objUnit> call BIS_fnc_kbCanSpeak"}, "BIS_fnc_kbCreateDummy": {"version": "1.00", "tags": "", "description": "Creates a dummy speaker (as a Game Logic). If given dummy variable has already been created, returns this one.", "example": "private _dummySpeaker = \"BIS_dummySpeaker\" call BIS_fnc_kbCreateDummy; //\u00a0_dummySpeaker == BIS_dummySpeaker now", "docSyntax": "dummyVarName call BIS_fnc_kbCreateDummy", "syntax": "dummyVarName call BIS_fnc_kbCreateDummy"}, "BIS_fnc_kbIsSpeaking": {"version": "1.00", "tags": "", "description": "Check if speaker is locked for different conversation.", "example": "player call BIS_fnc_kbIsSpeaking;", "docSyntax": "unit call BIS_fnc_kbIsSpeaking", "syntax": "<objUnit> call BIS_fnc_kbIsSpeaking"}, "BIS_fnc_kbMenu": {"version": "1.00", "tags": "", "description": "/* Description: Opens conversation menu. Script terminates itself when menu selection is finished. Parameter(s): _this select 0: ARRAY or STRING - List of responses (of type ARRAY) or Menu name Responses are in format: _response select 0: STRING or ANY - Display name when STRING, otherwise used as default option when menu is closed without selecting anything. _response select 1: STRING - expression ARRAY - BIS_fnc_kbTell params Returns: NUMBER - ID of select option */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_kbPriority": {"version": "1.00", "tags": "", "description": "/* Description: Set conversation priority. Conversations with priority not in the list won't be played Parameter(s): _this: ARRAY - List of priorities. Empty array will just return current value. NUMBER >0 - add priority to already existing list <0 - remove priority from already existing list Priority 0 cannot be tempered with Returns: ARRAY - List of priorities */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_kbSentence": {"version": "1.00", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_kbSkip": {"version": "1.00", "tags": "", "description": "Skip a conversation started with BIS_fnc_kbTell. Currently played sentence will be finished.", "example": "[\"topic1\", \"currentMission\"] call BIS_fnc_kbSkip;", "docSyntax": "[topicName, mission, wait] call BIS_fnc_kbSkip", "syntax": "[topicName,mission,wait] call BIS_fnc_kbSkip"}, "BIS_fnc_kbTell": {"version": "1.00", "tags": "", "description": "Play given sentence/conversation. Script terminates itself when conversation is finished.", "example": "[\"01_Wave\", \"A_in\", nil, \"SIDE\", nil, nil, 1, false] spawn BIS_fnc_kbTell;", "docSyntax": "[topic, container, section, radioMode, code, speakers, soundVolume, radioProtocol] spawn BIS_fnc_kbTell", "syntax": "[topic,container,section,radioMode,<code>,speakers,soundVolume,radioProtocol] spawn BIS_fnc_kbTell"}, "BIS_fnc_kbTellLocal": {"version": "1.00", "tags": "", "description": "Play given sentence, disable radio and/or lower sounds. Will use BIS_fnc_showSubtitle for better effects if channel is DIRECT or VEHICLE.", "example": "[\"sentence\", [player, [BIS_HQ, \"myTopic\", \"playerSentence1\"]]] call BIS_fnc_kbTellLocal;", "docSyntax": "[mode, parameters] call BIS_fnc_kbTellLocal", "syntax": "[mode,parameters] call BIS_fnc_kbTellLocal"}, "BIS_fnc_kbTopicConfig": {"version": "1.00", "tags": "", "description": "Reads the configs to return a matching config >> CfgSentences >> missionName >> topic entry.", "example": "private _configTopic = [\"missionName\", \"topic\"] call BIS_fnc_kbTopicConfig;", "docSyntax": "[missionName, topic] call BIS_fnc_kbTopicConfig", "syntax": "[missionName,topic] call BIS_fnc_kbTopicConfig"}, "BIS_fnc_keypointsExport": {"version": "1.00", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_keypointsExportFromKML": {"version": "1.00", "tags": "", "description": "/* Description: Imports and marks positions from KLM file. Parameter(s): _this: STRING - path to .kml file Returns: STRING - config output (also copied to clipboard) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_KMLimport": {"version": "1.00", "tags": "", "description": "Read positions from a KML file.", "example": "_data = \"subDir\\myFile.kml\" call BIS_fnc_KMLimport;", "docSyntax": "filePath call BIS_fnc_KMLimport", "syntax": "filePath call BIS_fnc_KMLimport"}, "BIS_fnc_markerCreate": {"version": "1.00", "tags": "", "description": "/* Description: Creates marker with given params. Reads config to recognize settings - use for quick debugging only. Parameter(s): _this: ARRAY of values: STRING - one of type, color, brush or shape. If no corresponding class is found, value is used as marker text ARRAY [STRING(,ANY,ANY,...)] - marker name with optional arguments [NUMBER] - marker size [a,a] [NUMBER,NUMBER] - marker size [x,y] [NUMBER,NUMBER,NUMBER] - marker position [x,y,z] OBJECT - object's position NUMBER - marker dir BOOL - marker locality (true if global) Returns: STRING - created marker */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_markerParams": {"version": "1.00", "tags": "", "description": "Returns marker params in format compatible with BIS_fnc_markerCreate.", "example": "_params = \"marker_1\" call BIS_fnc_markerParams;", "docSyntax": "varName call BIS_fnc_markerParams", "syntax": "varName call BIS_fnc_markerParams"}, "BIS_fnc_markerPath": {"version": "1.00", "tags": "", "description": "Create marker(s) between two points.", "example": "[\"markerStart\", \"markerEnd\"] call BIS_fnc_markerPath;", "docSyntax": "[start, end, spacing, params] call BIS_fnc_markerPath", "syntax": "[start,end,spacing,<any>] call BIS_fnc_markerPath"}, "BIS_fnc_moveIn": {"version": "1.00", "tags": "", "description": "Moves a unit into vehicle. Compatible with assignedVehicleRole output.", "example": "[myCar, player, \"cargo\"] [call]] BIS_fnc_moveIn;", "docSyntax": "[vehicle, unit, role] call BIS_fnc_moveIn", "syntax": "[<objVehicle>,<objUnit>,role] call BIS_fnc_moveIn"}, "BIS_fnc_MP": {"version": "1.00", "tags": "", "description": "Send function for remote execution (and executes locally if conditions are met).", "example": "Log a message for every connected player: [\"Imma spamming your log!\", \"BIS_fnc_log\"] call BIS_fnc_MP;", "docSyntax": "[params, functionName, target, isSpawn, isPersistent] call BIS_fnc_MP", "syntax": "[<any>,functionName,<object>,isSpawn,isPersistent] call BIS_fnc_MP"}, "BIS_fnc_MPexec": {"version": "1.00", "tags": "", "description": "Execute received remote execution. This function is used by BIS_fnc_MP and should not be called directly.", "example": "[\"BIS_fnc_MP_packet\", [\"Hello World\", \"hint\", true, true]] call BIS_fnc_MPexec;", "docSyntax": "[packetName, packetValue] call BIS_fnc_MPexec", "syntax": "[packetName,packetValue] call BIS_fnc_MPexec"}, "BIS_fnc_nearestHelipad": {"version": "1.00", "tags": "", "description": "Finds the nearest helipad of given type.", "docSyntax": "[position, radius, random, types] call BIS_fnc_nearestHelipad", "syntax": "[position,radius,random,types] call BIS_fnc_nearestHelipad"}, "BIS_fnc_noFlyZone": {"version": "1.00", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_noFlyZonesCreate": {"version": "1.00", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_noFlyZonesExport": {"version": "1.00", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_numberDigits": {"version": "1.00", "tags": "", "description": "Break number into array of digits.", "example": "12345678 call BIS_fnc_numberDigits; //\u00a0returns [1,2,3,4,5,6,7,8]", "docSyntax": "number call BIS_fnc_numberDigits", "syntax": "<scalar> call BIS_fnc_numberDigits"}, "numberOfEnginesRTD": {"version": "1.00", "tags": "", "description": "Returns the number of engines a helicopter has.", "example": "_engineCount = numberOfEnginesRTD vehicle player;", "docSyntax": "numberOfEnginesRTD helicopterRTD", "syntax": "numberOfEnginesRTD helicopterRTD"}, "BIS_fnc_numberText": {"version": "1.00", "tags": "", "description": "Convert a number into string (avoiding scientific notation).", "example": "[4096] call BIS_fnc_numberText; //\u00a0\"4 096\"", "docSyntax": "[number, modulo] call BIS_fnc_numberText", "syntax": "[<scalar>,modulo] call BIS_fnc_numberText"}, "BIS_fnc_onEnd": {"version": "1.00", "tags": "", "description": "Register code to be executed after mission end.", "example": "_onEndIndex = { player addRating 10000; } call BIS_fnc_onEnd;", "docSyntax": "argument call BIS_fnc_onEnd", "syntax": "argument call BIS_fnc_onEnd"}, "BIS_fnc_onLoad": {"version": "1.00", "tags": "", "description": "Register code to be executed after a mission load (from a save, for example).", "example": "_codeIndex = { hint \"Welcome back!\"; } call BIS_fnc_onLoad;", "docSyntax": "parameter call BIS_fnc_onLoad", "syntax": "parameter call BIS_fnc_onLoad"}, "BIS_fnc_overviewAuthor": {"version": "1.00", "tags": "", "description": "Returns the mission author's name preceded by \"by\", e.g \"by Username\". See Description.ext - author.", "example": "hint format [\"%1, %2\", briefingName, call BIS_fnc_overviewAuthor];", "docSyntax": "[config, control] call BIS_fnc_overviewAuthor", "syntax": "[config,<uiControl>] call BIS_fnc_overviewAuthor"}, "BIS_fnc_overviewDifficulty": {"version": "1.00", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_overviewMission": {"version": "1.00", "tags": "", "description": "#define CONTROL_SHOW(CONTROL) \\ CONTROL ctrlshow true; \\ CONTROL ctrlsetfade 0; \\ CONTROL ctrlcommit 0; #define CONTROL_HIDE(CONTROL) \\ CONTROL ctrlshow false; \\ CONTROL ctrlsetfade 1; \\ CONTROL ctrlcommit 0;", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_overviewTerrain": {"version": "1.00", "tags": "", "description": "N/A", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_overviewTimeTrial": {"version": "1.00", "tags": "", "description": "Returns the dynamically composed overview text for Time Trial scenarios.", "example": "\"BIS_someTimeTrail\" call BIS_fnc_overviewTimeTrial;", "docSyntax": "class call BIS_fnc_overviewTimeTrial", "syntax": "class call BIS_fnc_overviewTimeTrial"}, "BIS_fnc_param": {"version": "1.00", "tags": "", "description": "Load a script parameter. See Arma 3: Functions Library for detailed description.", "example": "_target = [_this, 0, objNull, [objNull,[]], [2,3]] call BIS_fnc_param;", "docSyntax": "[input, index, defaultValue, dataTypes, requiredCount] call BIS_fnc_param", "syntax": "[input,<scalar>,defaultValue,dataTypes,requiredCount] call BIS_fnc_param"}, "BIS_fnc_paramIn": {"version": "1.00", "tags": "", "description": "See BIS_fnc_param. Overloading default values is disabled in this variant. It's intended to be used where _this is not used as an input param.", "example": "_array = [_this, 0, [], [[]]] call BIS_fnc_param; _item = [_array,0,true,[true]] call BIS_fnc_paramIn;", "docSyntax": "See BIS_fnc_param", "syntax": "See BIS_fnc_param"}, "BIS_fnc_PIP": {"version": "1.00", "tags": "", "description": "Displays Picture in Picture.", "example": "[\"rendertarget0\", [[heli1, heli1 selectionPosition \"slingload0\"], cargo1], heli1, false] call BIS_fnc_PIP;", "docSyntax": "[renderTarget, cameraParams, vehicle, replace] call BIS_fnc_PIP", "syntax": "[renderTarget,cameraParams,<objVehicle>,replace] call BIS_fnc_PIP"}, "BIS_fnc_playerName": {"version": "1.00", "tags": "", "description": "Return current profile's name. Deprecated since Arma 3, use profileName instead.", "example": "_myPlayerName = call BIS_fnc_playerName;", "docSyntax": "call BIS_fnc_playerName", "syntax": "call BIS_fnc_playerName"}, "BIS_fnc_posDegToUTM": {"version": "1.00", "tags": "", "description": "Generate a UTM Zone, Easting and Northing from lat and long fields. It uses NAD83 constants.", "example": "_utmZone = [47.63959,-122.127249] call BIS_fnc_posDegToUTM;", "docSyntax": "[longitude, latitude, zone] call BIS_fnc_posDegToUTM", "syntax": "[longitude,latitude,zone] call BIS_fnc_posDegToUTM"}, "BIS_fnc_posDegToWorld": {"version": "1.00", "tags": "", "description": "Convert latitude/longtitude coordinates into game world position.", "example": "[47.63959,-122.127249] call BIS_fnc_posDegToWorld;", "docSyntax": "[longitude, latitude, world] call BIS_fnc_posDegToWorld", "syntax": "[longitude,latitude,world] call BIS_fnc_posDegToWorld"}, "BIS_fnc_position": {"version": "1.00", "tags": "", "description": "Returns PositionAGL, unless passed argument is Array, then the same array is returned. When position is Object and alternative position is stored in \"BIS_fnc_position_forced\" variable on this object, the stored position is used rather than actual object position. This function is a pretty safe way to get the position of an entity.", "example": "_pos = player call BIS_fnc_position;", "docSyntax": "argument call BIS_fnc_position", "syntax": "argument call BIS_fnc_position"}, "BIS_fnc_posUTMToDeg": {"version": "1.00", "tags": "", "description": "Generate Lat and Long fields from UTM Zone, Easting and Northing. It uses NAD83 constants.", "example": "[5273702, 560561, 10] call BIS_fnc_posUTMToDeg;", "docSyntax": "[easting, northing, zone, hemisphere] call BIS_fnc_posUTMToDeg", "syntax": "[easting,northing,zone,hemisphere] call BIS_fnc_posUTMToDeg"}, "profileNamespace": {"version": "1.00", "tags": "", "description": "Returns the global namespace attached to the active user profile. Use setVariable and getVariable to save and load data to and from this Namespace. A variable can be deleted by setting its value to nil. By default the variables set in this namespace will exist while the game is running, and variables are saved persistently when the game is closed. Saving can also be forced by using saveProfileNamespace to prevent data loss on e.g game crash.", "example": "profileNamespace setVariable [\"TAG_kills\", 10000]; //\u00a0somewhere else in the code _kills = profileNamespace getVariable [\"TAG_kills\", 0];", "docSyntax": "profileNamespace", "syntax": "profileNamespace"}, "BIS_fnc_progressLoadingScreen": {"version": "1.00", "tags": "", "description": "Progress scripted loading screen. The value will be preserved even when a new screen is opened.", "example": "_IDD = _prog = [0.75] call BIS_fnc_progressLoadingScreen;", "docSyntax": "[progress] call BIS_fnc_progressLoadingScreen", "syntax": "[progress] call BIS_fnc_progressLoadingScreen"}, "radioChannelAdd": {"version": "1.00", "tags": "", "description": "Add the units to the custom channel.", "example": "2 radioChannelAdd [player, unit1];", "docSyntax": "customChannelID radioChannelAdd units", "syntax": "customChannelID radioChannelAdd units"}, "radioChannelCreate": {"version": "1.00", "tags": "", "description": "Create a custom radio channel with the given color, label, call sign and registered characters. The custom channel ID returned can be used to manipulate the created channel later. There are 10 slots for custom radio channels which would correspond to channels 6-15 (see getPlayerChannel). The command will find an unused index in this range and create it when found.", "example": "_channelID= radioChannelCreate [[0.96, 0.34, 0.13, 0.8], \"Q-dance Radio\", \"%UNIT_NAME\", [player1, player2]];", "docSyntax": "radioChannelCreate [color, label, callSign, units, sentenceType]", "syntax": "radioChannelCreate [<scalar>,label,callSign,units,sentenceType]"}, "radioChannelRemove": {"version": "1.00", "tags": "", "description": "Remove the units from the custom radio channel.", "example": "3 radioChannelRemove [blufor_unit_1, blufor_unit_2];", "docSyntax": "customChannelID radioChannelRemove units", "syntax": "customChannelID radioChannelRemove units"}, "radioChannelSetCallSign": {"version": "1.00", "tags": "", "description": "Set the custom radio channel's call sign. Available special parameters:", "example": "4 radioChannelSetCallSign \"%UNIT_NAME\";", "docSyntax": "customChannelID radioChannelSetCallSign callSign", "syntax": "customChannelID radioChannelSetCallSign callSign"}, "radioChannelSetLabel": {"version": "1.00", "tags": "", "description": "Set the custom radio channel's label.", "example": "5 radioChannelSetLabel \"Q-dance Radio\";", "docSyntax": "customChannelID radioChannelSetLabel label", "syntax": "customChannelID radioChannelSetLabel label"}, "BIS_fnc_radioSetChannel": {"version": "1.00", "tags": "", "description": "/* Description: Set a specific or random music channel. Parameter(s): _this select 0: channel (String) _this select 1: next (Bool) _this select 2: override (Bool) Returns: Bool */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_radioSetPlaylist": {"version": "1.00", "tags": "", "description": "Set a random music playlist for the current set channel (default \"Rock\"). Musics with \"genre\" set in CfgMusic are selected and shuffled.", "example": "call BIS_fnc_radioSetPlaylist;", "docSyntax": "call BIS_fnc_radioSetPlaylist", "syntax": "call BIS_fnc_radioSetPlaylist"}, "BIS_fnc_radioSetTrack": {"version": "1.00", "tags": "", "description": "/* Description: Set a specific or random music track. Parameter(s): _this select 0: track (String) _this select 1: override (Bool) _this select 2: Bool (first track? -> start randomly within the track) Returns: Array (duration (s): Scalar, start time (s): Scalar) */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_randomPos": {"version": "1.00", "tags": "", "description": "Selects random position according to given params within given area", "example": "_randomPosMapNoWater = [] call BIS_fnc_randomPos;", "docSyntax": "[whitelist, blacklist, code] call BIS_fnc_randomPos", "syntax": "[whitelist,blacklist,<code>] call BIS_fnc_randomPos"}, "BIS_fnc_randomPosTrigger": {"version": "1.00", "tags": "", "description": "Selects random position within trigger, marker, location area or area defined by array", "example": "marker1 call BIS_fnc_randomPosTrigger;", "docSyntax": "param call BIS_fnc_randomPosTrigger", "syntax": "param call BIS_fnc_randomPosTrigger"}, "ropeCreate": {"version": "1.00", "tags": "", "description": "Creates a rope.", "example": "myRope = ropeCreate [vehicle player, \"fastrope0\", 10, 10, true];", "docSyntax": "ropeCreate [fromObject, fromPoint, toObject, toPoint, segments, length]", "syntax": "ropeCreate [fromObject,fromPoint,toObject,toPoint,segments,length]"}, "ropeDestroy": {"version": "1.00", "tags": "", "description": "Destroys the given rope. If the rope is attached to a vehicle, it will be detached and then destroyed.", "example": "ropeDestroy myRope;", "docSyntax": "ropeDestroy rope", "syntax": "ropeDestroy rope"}, "ropeDetach": {"version": "1.00", "tags": "", "description": "Detaches attached object from rope (i.e. detaches rope end from attached to it entity). See ropeAttachTo for attach operation.", "example": "vehicle player ropeDetach myRope;", "docSyntax": "attachedObject ropeDetach rope", "syntax": "attachedObject ropeDetach rope"}, "ropeSetCargoMass": {"version": "1.00", "tags": "", "description": "Set the simulated mass of an object attached to a rope.", "example": "ropeSetCargoMass [myRope, myCargo, 1138];", "docSyntax": "ropeSetCargoMass [rope, cargo, mass]", "syntax": "ropeSetCargoMass [rope,<objVehicle>,mass]"}, "BIS_fnc_roundDir": {"version": "1.00", "tags": "", "description": "Round direction to nearest set rounding; used for determining cardinal direction.", "example": "player setDir ([getDir player, 45] call BIS_fnc_roundDir);", "docSyntax": "[rawDirection, rounding] call BIS_fnc_roundDir", "syntax": "[rawDirection,rounding] call BIS_fnc_roundDir"}, "BIS_fnc_saveGame": {"version": "1.00", "tags": "", "description": "Evaluates the current battlefield situation and saves the game when appropriate.", "example": "[ [unit_1,unit_2] ] call BIS_fnc_saveGame;", "docSyntax": "[objects] call BIS_fnc_saveGame", "syntax": "[objects] call BIS_fnc_saveGame"}, "saveProfileNamespace": {"version": "1.00", "tags": "", "description": "Saves all variables stored in profileNamespace to the active Profile.", "example": "profileNamespace setVariable [\"TAG_lastPlayerLocation\", getPosASL player]; saveProfileNamespace;//\u00a0Optional since namespace is saved when game is closed", "docSyntax": "saveProfileNamespace", "syntax": "saveProfileNamespace"}, "BIS_fnc_secondsToString": {"version": "1.00", "tags": "", "description": "Convert seconds to formatted string.", "example": "hint format [\"Hi, it is currently %1.\", [time, \"HH:MM\"] call BIS_fnc_secondsToString];", "docSyntax": "[totalSeconds, format, returnArray] call BIS_fnc_secondsToString", "syntax": "[totalSeconds,format,returnArray] call BIS_fnc_secondsToString"}, "setActualCollectiveRTD": {"version": "1.00", "tags": "", "description": "Sets the collective pitch control to a specific position, regardless of input devices (until those are changed).", "example": "myHelicopterRTD setActualCollectiveRTD 0.7;", "docSyntax": "helicopterRTD setActualCollectiveRTD value", "syntax": "helicopterRTD setActualCollectiveRTD <scalar>"}, "setAPURTD": {"version": "1.00", "tags": "", "description": "Let the Auxiliary Power Unit (APU) reach a desired state over the given period of time.", "example": "vehicle player setAPURTD [1, 15];", "docSyntax": "helicopterRTD setAPURTD [value, time]", "syntax": "helicopterRTD setAPURTD [<scalar>,<scalar>]"}, "setBatteryChargeRTD": {"version": "1.00", "tags": "", "description": "Set the actual battery charge of a helicopter.", "example": "vehicle player setBatteryChargeRTD 0.5;", "docSyntax": "helicopterRTD setBatteryChargeRTD charge", "syntax": "helicopterRTD setBatteryChargeRTD charge"}, "setBatteryRTD": {"version": "1.00", "tags": "", "description": "Toggle a helicopter's electrical systems on and off.", "example": "(vehicle player) setBatteryRTD false;", "docSyntax": "helicopterRTD setBatteryRTD enable", "syntax": "helicopterRTD setBatteryRTD <bool>"}, "setBrakesRTD": {"version": "1.00", "tags": "", "description": "Enable landing gear wheel brakes for a helicopter.", "example": "myHelicopterRTD setBrakesRTD [1, 3];", "docSyntax": "helicopterRTD setBrakesRTD [value, wheelIndex]", "syntax": "helicopterRTD setBrakesRTD [<scalar>,wheelIndex]"}, "setCustomWeightRTD": {"version": "1.00", "tags": "", "description": "Add virtual custom weight to a helicopter's center of gravity. This can be used to simulate added internal payload for specific scenarios, and affects the flight model.", "example": "myHelicopterRTD setCustomWeightRTD 120;", "docSyntax": "helicopterRTD setCustomWeightRTD weight", "syntax": "helicopterRTD setCustomWeightRTD weight"}, "setEngineRpmRTD": {"version": "1.00", "tags": "", "description": "Sets the RPM of given engines.", "example": "myHelicopter setEngineRpmRTD [1337, -1];", "docSyntax": "helicopter setEngineRpmRTD [rpm, engineIndex]", "syntax": "helicopter setEngineRpmRTD [rpm,engineIndex]"}, "BIS_fnc_setHeight": {"version": "1.00", "tags": "", "description": "Set an object height.", "example": "//\u00a0will place player's vehicle on \"myHeightMarker\", 50m above terrain [vehicle player, 50, getMarkerPos \"myHeightMarker\", \"ATL\"]]] call BIS_fnc_setHeight;", "docSyntax": "[target, height, position, mode] call BIS_fnc_setHeight", "syntax": "[<object>,height,position,mode] call BIS_fnc_setHeight"}, "setHitPointDamage": {"version": "1.00", "tags": "", "description": "Set the current level of damage for a specific Hit Point (specified by its config class). This command has no effect when allowDamage is set to false.", "example": "vehicle player setHitPointDamage [\"hitEngine2\", 1.0];", "docSyntax": "vehicle setHitPointDamage [hitPointName, damage, useEffects, instigator]", "syntax": "<objVehicle> setHitPointDamage [hitPointName,<scalar>,useEffects,instigator]"}, "setPiPEffect": {"version": "1.00", "tags": "", "description": "Sets Render Target's visual effect (Picture-in-Picture).", "example": "\"rendersurface\" setPiPEffect [0];", "docSyntax": "name setPiPEffect [effect, optionalParam1, ..., optionalParamN]", "syntax": "<string> setPiPEffect [effect,optionalParam1,...,optionalParamN]"}, "setRotorBrakeRTD": {"version": "1.00", "tags": "", "description": "Toggles a helicopter's rotor brake.", "example": "myHelicopterRTD setRotorBrakeRTD 1;", "docSyntax": "helicopterRTD setRotorBrakeRTD enable", "syntax": "helicopterRTD setRotorBrakeRTD <bool>"}, "setStarterRTD": {"version": "1.00", "tags": "", "description": "Toggle the starter for the given helicopter engine(s) on or off.", "example": "vehicle player setStarterRTD [true, -1];", "docSyntax": "helicopterRTD setStarterRTD [enable, engineIndex]", "syntax": "helicopterRTD setStarterRTD [<bool>,engineIndex]"}, "setThrottleRTD": {"version": "1.00", "tags": "", "description": "Set the throttle for the given engine(s) of a helicopter.", "example": "vehicle player setThrottleRTD [0.5, 1];", "docSyntax": "helicopterRTD setThrottleRTD [value, engineIndex]", "syntax": "helicopterRTD setThrottleRTD [<scalar>,engineIndex]"}, "setWantedRPMRTD": {"version": "1.00", "tags": "", "description": "Tell the helicopter engine RPMs to reach the given value within a period of time. The simulation will try to reach the RPMs, but it does not guarantee it will reach the precise value!", "example": "vehicle player setWantedRPMRTD [2500, 30, 0];", "docSyntax": "helicopterRTD setWantedRPMRTD [value, time, engineIndex]", "syntax": "helicopterRTD setWantedRPMRTD [<scalar>,<scalar>,engineIndex]"}, "setWingForceScaleRTD": {"version": "1.00", "tags": "", "description": "Set effectivity of wings.", "docSyntax": "helicopterRTD setWingForceScaleRTD [leftHorizontal, rightHorizontal, vertical]", "syntax": "helicopterRTD setWingForceScaleRTD [leftHorizontal,rightHorizontal,vertical]"}, "BIS_fnc_shakeGauges": {"version": "1.00", "tags": "", "description": "/* Description: Shake analogue gauges Parameter(s): _this select 0 (Optional): NUMBER - shake limit (max distance gauges can move on screen from original position) _this select 1 (Optional): NUMBER - number of repeats _this select 2 (Optional): NUMBER - delay between every position change _this select 3 (Optional): ARRAY - list of IDCs Returns: NOTHING */", "docSyntax": "Syntax needed", "syntax": "Syntax needed"}, "BIS_fnc_shutdown": {"version": "1.00", "tags": "", "description": "Shut downs the game.", "example": "call BIS_fnc_shutdown", "docSyntax": "call BIS_fnc_shutdown", "syntax": "call BIS_fnc_shutdown"}, "BIS_fnc_singleMissionConfig": {"version": "1.00", "tags": "", "description": "Returns config of current single mission.", "example": "_config = call BIS_fnc_singleMissionConfig;", "docSyntax": "call BIS_fnc_singleMissionConfig", "syntax": "call BIS_fnc_singleMissionConfig"}, "BIS_fnc_singleMissionKeys": {"version": "1.00", "tags": "", "description": "Activate mission related keys.", "example": "_activatedKeys = call BIS_fnc_singleMissionKeys;", "docSyntax": "call BIS_fnc_singleMissionKeys", "syntax": "call BIS_fnc_singleMissionKeys"}, "BIS_fnc_singleMissionName": {"version": "1.00", "tags": "", "description": "Returns name of currently selected single mission.", "example": "_missionName = call BIS_fnc_singleMissionName;", "docSyntax": "call BIS_fnc_singleMissionName", "syntax": "call BIS_fnc_singleMissionName"}, "stopEngineRTD": {"version": "1.00", "tags": "", "description": "Instant engines stop.", "example": "stopEngineRTD myHeli", "docSyntax": "stopEngineRTD heli", "syntax": "stopEngineRTD heli"}, "systemOfUnits": {"version": "1.00", "tags": "", "description": "Returns the currently selected system of units.", "example": "_system = systemOfUnits;", "docSyntax": "systemOfUnits", "syntax": "systemOfUnits"}, "throttleRTD": {"version": "1.00", "tags": "", "description": "Return the current throttle level for all engines of a helicopter.", "example": "_throttleValues = throttleRTD vehicle player;", "docSyntax": "throttleRTD helicopterRTD", "syntax": "throttleRTD helicopterRTD"}, "BIS_fnc_titleText": {"version": "1.00", "tags": "", "description": "Display given string as structured text.", "example": "\"Stratis, 2035-07-14 0130<br />A dark night ahead\u2026\" call BIS_fnc_titleText;", "docSyntax": "message call BIS_fnc_titleText", "syntax": "message call BIS_fnc_titleText"}, "windRTD": {"version": "1.00", "tags": "", "description": "Returns wind strength and direction.", "example": "_wind = windRTD;", "docSyntax": "windRTD", "syntax": "windRTD"}, "wingsForcesRTD": {"version": "1.00", "tags": "", "description": "For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.", "example": "_wingForce = wingsForcesRTD _rtdHelo", "docSyntax": "wingsForcesRTD RTD_helicopter", "syntax": "wingsForcesRTD RTD_helicopter"}, "BIS_fnc_worldArea": {"version": "1.00", "tags": "", "description": "Creates (or returns if it already exists) trigger with size of map.", "example": "_bigTrigger = call BIS_fnc_worldArea;", "docSyntax": "call BIS_fnc_worldArea", "syntax": "call BIS_fnc_worldArea"}, "BIS_fnc_wpAerobatics": {"version": "1.00", "tags": "", "description": "AEROBATICS custom waypoint. Player must perform all the required manoeuvres:", "example": "[player, { hint \"OK, start!\" }, { hint \"success!\" }] spawn BIS_fnc_wpAerobatics;", "docSyntax": "arguments: [visuals, detectionCode, completionCode]", "syntax": "arguments: [visuals,detectionCode,completionCode]"}, "BIS_fnc_wpAngle": {"version": "1.00", "tags": "", "description": "CIRCLE custom waypoint. Keep helicopter rotated in given vector toward target.", "docSyntax": "arguments: [circleLimit, circleBorder, circleDir, customCond, hint]", "syntax": "arguments: [circleLimit,circleBorder,circleDir,customCond,hint]"}, "BIS_fnc_wpCheckpoint": {"version": "1.00", "tags": "", "description": "CHECKPOINT custom waypoint. Player has to reach waypoint position with certain precision (as opposed to normal Move waypoint, which became completed in around 500m).", "example": "[player,position dude,10,2] spawn BIS_fnc_wpCheckpoint;", "docSyntax": "arguments: [posLimit]", "syntax": "arguments: [posLimit]"}, "BIS_fnc_wpFastRope": {"version": "1.00", "tags": "", "description": "FAST-ROPE custom waypoint. Let everybody in vehicles' cargo space rappel down on a rope.", "example": "[player, position dude, 50, 5, 15, 1] spawn BIS_fnc_wpFastRope;", "docSyntax": "arguments: [limitHeight,limitSpeed,fastropeID]", "syntax": "arguments: [limitHeight,limitSpeed,fastropeID]"}, "BIS_fnc_wpFormation": {"version": "1.00", "tags": "", "description": "FORMATION custom waypoint. Player must stay within certain radius and angle towards followed vehicle.", "example": "[player, dude, 80, { HSim_keptFormation = false }, -60, [80,160], 20, true] spawn BIS_fnc_wpFormation;", "docSyntax": "arguments: [failCode, maxTime, relPos, diffAlt, visualize]", "syntax": "arguments: [failCode,maxTime,relPos,diffAlt,visualize]"}, "BIS_fnc_wpHover": {"version": "1.00", "tags": "", "description": "HOVER custom waypoint. Hover on specific spot.", "example": "[player, position dude, 10, 10, false, -1, true] spawn BIS_fnc_wpLand;", "docSyntax": "arguments: [minTime, reset, altDiff, visualize]", "syntax": "arguments: [minTime,reset,altDiff,visualize]"}, "BIS_fnc_wpLand": {"version": "1.00", "tags": "", "description": "\"LAND\" custom waypoint. Land on specific spot.", "example": "[player, position dude, 10, [42, 20], true] spawn BIS_fnc_wpLand;", "docSyntax": "arguments: [dirParam, visualize]", "syntax": "arguments: [dirParam,visualize]"}, "BIS_fnc_wpRestricted": {"version": "1.00", "tags": "", "description": "RESTRICTED custom waypoint. Player must fly in given limits.", "example": "[player, objNull, 0, [250, -1, 150, -1], 30, { HSim_RestrictedFlight = false }, true] spawn BIS_fnc_wpFormation;", "docSyntax": "arguments: [limits, maxTime, failCode, visualize, warnCode]", "syntax": "arguments: [limits,maxTime,failCode,visualize,warnCode]"}, "BIS_fnc_wpSlingLoadAttach": {"version": "1.00", "tags": "", "description": "ATTACH SLINGLOAD custom waypoint. Load an object to rope.", "example": "[player, dude, 50, 10, { hintC \"You lost the cargo!\" }, 1000] spawn BIS_fnc_wpSlingLoadAttach;", "docSyntax": "arguments: [posLimit,failCode,weight]", "syntax": "arguments: [posLimit,failCode,weight]"}, "BIS_fnc_wpSlingLoadDetach": {"version": "1.00", "tags": "", "description": "DETACH SLINGLOAD custom waypoint. Unload an object which was previously loaded using BIS_fnc_wpSlingLoadAttach.", "example": "[player, position dude, 50, 10, [42, 52]] spawn BIS_fnc_wpSlingLoadDetach;", "docSyntax": "arguments: [posLimit,limitDir]", "syntax": "arguments: [posLimit,limitDir]"}, "BIS_fnc_wpSlingLoadDrop": {"version": "1.00", "tags": "", "description": "DROP SLINGLOAD custom waypoint. Drop an object which was previously loaded using BIS_fnc_wpSlingLoadAttach", "example": "[player, position dude, 50] spawn BIS_fnc_wpSlingLoadDrop;", "docSyntax": "arguments: none", "syntax": "arguments: none"}, "BIS_fnc_wpSteady": {"version": "1.00", "tags": "", "description": "FLY STEADY custom waypoint. Keep helicopter's pitch, bank, relative velocity a relative vector in given limits", "example": "[ player, position dude, nil, [15,1.3,30], 10, { hintC \"You failed\"; }, { hint \"Watch out!\"; }, { hint \"Good\"; } ] spawn BIS_fnc_wpSteady;", "docSyntax": "arguments: [limitArray, failLimit, failCode, warningCode, positiveCode]", "syntax": "arguments: [limitArray,failLimit,failCode,warningCode,positiveCode]"}, "BIS_fnc_wpTimed": {"version": "1.00", "tags": "", "description": "COUNTDOWN custom waypoint. Player has to reach waypoint area before time runs out.", "example": "[player, position dude, 100, { hintC \"You failed!\" }, 42, true] spawn BIS_fnc_wpTimed;", "docSyntax": "arguments: [failCode,timeLimit,showHint]", "syntax": "arguments: [failCode,timeLimit,showHint]"}, "BIS_fnc_wpTransport": {"version": "1.00", "tags": "", "description": "TRANSPORT custom waypoint. Player must pick up group of units in their location. Get in AI pathfinding is supressed (to avoid unwanted behaviour on building roofs), units are teleported into player's vehicle instead.", "example": "[player, dude, 100] spawn BIS_fnc_wpTransport;", "docSyntax": "arguments: none", "syntax": "arguments: none"}, "BIS_fnc_wpWinchLoad": {"version": "1.00", "tags": "", "description": "WINCH LOAD custom waypoint. Load a group into helicopter cargo using winch.", "example": "[player, dude, 50, 5, 1, rescuer, {hintC \"Rescuer died!\"}, {hintC \"Dude saved\"}] spawn BIS_fnc_wpWinchLoad;", "docSyntax": "arguments: [limitHeight, winchID, crewman, failCode, loadCode]", "syntax": "arguments: [limitHeight,winchID,crewman,failCode,loadCode]"}}